
IS1300-PROject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c63c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  0800c7cc  0800c7cc  0001c7cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800caf8  0800caf8  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800caf8  0800caf8  0001caf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb00  0800cb00  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb00  0800cb00  0001cb00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb04  0800cb04  0001cb04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800cb08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f44  20000084  0800cb8c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001fc8  0800cb8c  00021fc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031f9c  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000597c  00000000  00000000  00052050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002038  00000000  00000000  000579d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001de0  00000000  00000000  00059a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ebe2  00000000  00000000  0005b7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028a1d  00000000  00000000  0008a3ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011b189  00000000  00000000  000b2de7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001cdf70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fb4  00000000  00000000  001cdfc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c7b4 	.word	0x0800c7b4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800c7b4 	.word	0x0800c7b4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
 8000d74:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d76:	4b2f      	ldr	r3, [pc, #188]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d78:	4a2f      	ldr	r2, [pc, #188]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000d7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d7c:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d82:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d88:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d8e:	4b29      	ldr	r3, [pc, #164]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d94:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d96:	2204      	movs	r2, #4
 8000d98:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da0:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000da6:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dac:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd6:	4817      	ldr	r0, [pc, #92]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dd8:	f001 fbfe 	bl	80025d8 <HAL_ADC_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000de2:	f000 fd21 	bl	8001828 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	4619      	mov	r1, r3
 8000df0:	4810      	ldr	r0, [pc, #64]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000df2:	f002 fc4b 	bl	800368c <HAL_ADCEx_MultiModeConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000dfc:	f000 fd14 	bl	8001828 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_ADC1_Init+0xe8>)
 8000e02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e04:	2306      	movs	r3, #6
 8000e06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e0c:	237f      	movs	r3, #127	; 0x7f
 8000e0e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e10:	2304      	movs	r3, #4
 8000e12:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000e1e:	f001 fed1 	bl	8002bc4 <HAL_ADC_ConfigChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000e28:	f000 fcfe 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20001d60 	.word	0x20001d60
 8000e38:	50040000 	.word	0x50040000
 8000e3c:	43210000 	.word	0x43210000

08000e40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b0ac      	sub	sp, #176	; 0xb0
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2288      	movs	r2, #136	; 0x88
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f00a fbbb 	bl	800b5dc <memset>
  if(adcHandle->Instance==ADC1)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a27      	ldr	r2, [pc, #156]	; (8000f08 <HAL_ADC_MspInit+0xc8>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d146      	bne.n	8000efe <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e74:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e82:	2301      	movs	r3, #1
 8000e84:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e86:	2308      	movs	r3, #8
 8000e88:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e92:	2302      	movs	r3, #2
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f003 fe49 	bl	8004b38 <HAL_RCCEx_PeriphCLKConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000eac:	f000 fcbc 	bl	8001828 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb4:	4a15      	ldr	r2, [pc, #84]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000eb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ecc:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ee6:	230b      	movs	r3, #11
 8000ee8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <HAL_ADC_MspInit+0xd0>)
 8000efa:	f002 fdd9 	bl	8003ab0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000efe:	bf00      	nop
 8000f00:	37b0      	adds	r7, #176	; 0xb0
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	50040000 	.word	0x50040000
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	48000400 	.word	0x48000400

08000f14 <start_clock>:


/**
 * @brief start the RTC clock
 */
void start_clock (uint8_t hours, uint8_t minutes, uint8_t seconds) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	71bb      	strb	r3, [r7, #6]
 8000f22:	4613      	mov	r3, r2
 8000f24:	717b      	strb	r3, [r7, #5]
    RTC_TimeTypeDef time;
    time.Hours = hours;
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	733b      	strb	r3, [r7, #12]
    time.Minutes = minutes;
 8000f2a:	79bb      	ldrb	r3, [r7, #6]
 8000f2c:	737b      	strb	r3, [r7, #13]
    time.Seconds = seconds;
 8000f2e:	797b      	ldrb	r3, [r7, #5]
 8000f30:	73bb      	strb	r3, [r7, #14]

    /* date has to be set to start the clock */
    HAL_RTC_SetDate(&hrtc, NULL, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	4807      	ldr	r0, [pc, #28]	; (8000f54 <start_clock+0x40>)
 8000f38:	f004 fc2e 	bl	8005798 <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2200      	movs	r2, #0
 8000f42:	4619      	mov	r1, r3
 8000f44:	4803      	ldr	r0, [pc, #12]	; (8000f54 <start_clock+0x40>)
 8000f46:	f004 fb2e 	bl	80055a6 <HAL_RTC_SetTime>
}
 8000f4a:	bf00      	nop
 8000f4c:	3720      	adds	r7, #32
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20001dd0 	.word	0x20001dd0

08000f58 <get_time>:

/**
 * @brief Get the current RTC time
 * @return Pointer to the time struct
 */
void get_time (RTC_TimeTypeDef *time) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    HAL_RTC_GetTime(&hrtc, time, RTC_FORMAT_BIN);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	480e      	ldr	r0, [pc, #56]	; (8000fa0 <get_time+0x48>)
 8000f66:	f004 fbbb 	bl	80056e0 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, NULL, RTC_FORMAT_BIN);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <get_time+0x48>)
 8000f70:	f004 fc99 	bl	80058a6 <HAL_RTC_GetDate>

    /* sad but the RTC started counting beyond :( */
    if (time->Hours > 23) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b17      	cmp	r3, #23
 8000f7a:	d90d      	bls.n	8000f98 <get_time+0x40>
        time->Hours = 1;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	701a      	strb	r2, [r3, #0]
        time->Minutes = 0;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2200      	movs	r2, #0
 8000f86:	705a      	strb	r2, [r3, #1]
        time->Seconds = 0;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	709a      	strb	r2, [r3, #2]
        HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	4803      	ldr	r0, [pc, #12]	; (8000fa0 <get_time+0x48>)
 8000f94:	f004 fb07 	bl	80055a6 <HAL_RTC_SetTime>
    }
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	20001dd0 	.word	0x20001dd0

08000fa4 <hardware_reset>:
uint16_t pins[] = {Disp_White_Pin, Disp_Green_Pin};

/**
 * @brief Perform a hardware reset on the display
 */
void hardware_reset () {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
    HAL_Delay(5);
 8000fa8:	2005      	movs	r0, #5
 8000faa:	f001 f8e7 	bl	800217c <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f002 ff24 	bl	8003e04 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000fbc:	200a      	movs	r0, #10
 8000fbe:	f001 f8dd 	bl	800217c <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fcc:	f002 ff1a 	bl	8003e04 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000fd0:	2001      	movs	r0, #1
 8000fd2:	f001 f8d3 	bl	800217c <HAL_Delay>
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	0000      	movs	r0, r0
 8000fdc:	0000      	movs	r0, r0
	...

08000fe0 <test_backlight>:


/**
 * @brief Test all backlight colors
 */
void test_backlight () {
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
    // TODO add red pwm
    for (int i = 0; i < 3; ++i) {
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	e02c      	b.n	8001046 <test_backlight+0x66>
        if (i != 2) {
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d01b      	beq.n	800102a <test_backlight+0x4a>
            HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);
 8000ff2:	4a1d      	ldr	r2, [pc, #116]	; (8001068 <test_backlight+0x88>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ffa:	4a1c      	ldr	r2, [pc, #112]	; (800106c <test_backlight+0x8c>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001002:	2201      	movs	r2, #1
 8001004:	4619      	mov	r1, r3
 8001006:	f002 fefd 	bl	8003e04 <HAL_GPIO_WritePin>
            HAL_Delay(200);
 800100a:	20c8      	movs	r0, #200	; 0xc8
 800100c:	f001 f8b6 	bl	800217c <HAL_Delay>
            HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 8001010:	4a15      	ldr	r2, [pc, #84]	; (8001068 <test_backlight+0x88>)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001018:	4a14      	ldr	r2, [pc, #80]	; (800106c <test_backlight+0x8c>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001020:	2200      	movs	r2, #0
 8001022:	4619      	mov	r1, r3
 8001024:	f002 feee 	bl	8003e04 <HAL_GPIO_WritePin>
 8001028:	e00a      	b.n	8001040 <test_backlight+0x60>
        } else {
            set_brightness(1.0);
 800102a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8001058 <test_backlight+0x78>
 800102e:	f000 fc03 	bl	8001838 <set_brightness>
            HAL_Delay(200);
 8001032:	20c8      	movs	r0, #200	; 0xc8
 8001034:	f001 f8a2 	bl	800217c <HAL_Delay>
            set_brightness(0.0);
 8001038:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8001060 <test_backlight+0x80>
 800103c:	f000 fbfc 	bl	8001838 <set_brightness>
    for (int i = 0; i < 3; ++i) {
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3301      	adds	r3, #1
 8001044:	607b      	str	r3, [r7, #4]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2b02      	cmp	r3, #2
 800104a:	ddcf      	ble.n	8000fec <test_backlight+0xc>
        }
    }
}
 800104c:	bf00      	nop
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	00000000 	.word	0x00000000
 800105c:	3ff00000 	.word	0x3ff00000
	...
 8001068:	20000000 	.word	0x20000000
 800106c:	20000008 	.word	0x20000008

08001070 <set_backlight>:


/**
 * @brief Set a backlight color
 */
void set_backlight (uint8_t color, GPIO_PinState state) {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	460a      	mov	r2, r1
 800107a:	71fb      	strb	r3, [r7, #7]
 800107c:	4613      	mov	r3, r2
 800107e:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(ports[color], pins[color], state);
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <set_backlight+0x30>)
 8001084:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	4a06      	ldr	r2, [pc, #24]	; (80010a4 <set_backlight+0x34>)
 800108c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001090:	79ba      	ldrb	r2, [r7, #6]
 8001092:	4619      	mov	r1, r3
 8001094:	f002 feb6 	bl	8003e04 <HAL_GPIO_WritePin>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	20000000 	.word	0x20000000
 80010a4:	20000008 	.word	0x20000008

080010a8 <split_byte>:
/**
 * @brief Split a byte to send to the display
 * @param[in] byte The byte to split into two
 * @param[out] buffer Where to place the two new bytes
 */
void split_byte (uint8_t byte, uint8_t *buffer) {
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	6039      	str	r1, [r7, #0]
 80010b2:	71fb      	strb	r3, [r7, #7]
    buffer[0] = byte & 0x0F;            // lower bits first
 80010b4:	79fb      	ldrb	r3, [r7, #7]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	b2da      	uxtb	r2, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	701a      	strb	r2, [r3, #0]
    buffer[1] = (byte & 0xF0) >> 4;     // upper bits second
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	3301      	adds	r3, #1
 80010c4:	79fa      	ldrb	r2, [r7, #7]
 80010c6:	0912      	lsrs	r2, r2, #4
 80010c8:	b2d2      	uxtb	r2, r2
 80010ca:	701a      	strb	r2, [r3, #0]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <display_transmit>:
 * @brief Send the display data or instructions
 * @param[in] startbyte The byte setting that initiates the transmit
 * @param[in] bytes The bytes that will be sent to the display
 * @param[in] length The number of bytes to send
 */
int display_transmit (uint8_t startbyte, uint8_t *bytes, uint16_t length) {
 80010d8:	b5b0      	push	{r4, r5, r7, lr}
 80010da:	b088      	sub	sp, #32
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	71fb      	strb	r3, [r7, #7]
 80010e4:	4613      	mov	r3, r2
 80010e6:	80bb      	strh	r3, [r7, #4]
 80010e8:	466b      	mov	r3, sp
 80010ea:	461d      	mov	r5, r3
    /* create message to transmit */
    uint16_t mes_length = length*2 +1; // +1 for start byte
 80010ec:	88bb      	ldrh	r3, [r7, #4]
 80010ee:	005b      	lsls	r3, r3, #1
 80010f0:	b29b      	uxth	r3, r3
 80010f2:	3301      	adds	r3, #1
 80010f4:	837b      	strh	r3, [r7, #26]
    uint8_t message[mes_length];
 80010f6:	8b7c      	ldrh	r4, [r7, #26]
 80010f8:	4623      	mov	r3, r4
 80010fa:	3b01      	subs	r3, #1
 80010fc:	617b      	str	r3, [r7, #20]
 80010fe:	b2a0      	uxth	r0, r4
 8001100:	f04f 0100 	mov.w	r1, #0
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	00cb      	lsls	r3, r1, #3
 800110e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001112:	00c2      	lsls	r2, r0, #3
 8001114:	b2a0      	uxth	r0, r4
 8001116:	f04f 0100 	mov.w	r1, #0
 800111a:	f04f 0200 	mov.w	r2, #0
 800111e:	f04f 0300 	mov.w	r3, #0
 8001122:	00cb      	lsls	r3, r1, #3
 8001124:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001128:	00c2      	lsls	r2, r0, #3
 800112a:	4623      	mov	r3, r4
 800112c:	3307      	adds	r3, #7
 800112e:	08db      	lsrs	r3, r3, #3
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	ebad 0d03 	sub.w	sp, sp, r3
 8001136:	466b      	mov	r3, sp
 8001138:	3300      	adds	r3, #0
 800113a:	613b      	str	r3, [r7, #16]

    message[0] = startbyte;  // start byte
 800113c:	693b      	ldr	r3, [r7, #16]
 800113e:	79fa      	ldrb	r2, [r7, #7]
 8001140:	701a      	strb	r2, [r3, #0]

    uint8_t divided[2]; // for splitting a byte into two
    for (int i = 0; i < length; ++i) {
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
 8001146:	e018      	b.n	800117a <display_transmit+0xa2>
        split_byte(bytes[i], divided);
 8001148:	69fb      	ldr	r3, [r7, #28]
 800114a:	683a      	ldr	r2, [r7, #0]
 800114c:	4413      	add	r3, r2
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	f107 020c 	add.w	r2, r7, #12
 8001154:	4611      	mov	r1, r2
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ffa6 	bl	80010a8 <split_byte>
        message[1 + i*2] = divided[0];
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	3301      	adds	r3, #1
 8001162:	7b39      	ldrb	r1, [r7, #12]
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	54d1      	strb	r1, [r2, r3]
        message[1 + i*2 +1] = divided[1];
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	3301      	adds	r3, #1
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	7b79      	ldrb	r1, [r7, #13]
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < length; ++i) {
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	3301      	adds	r3, #1
 8001178:	61fb      	str	r3, [r7, #28]
 800117a:	88bb      	ldrh	r3, [r7, #4]
 800117c:	69fa      	ldr	r2, [r7, #28]
 800117e:	429a      	cmp	r2, r3
 8001180:	dbe2      	blt.n	8001148 <display_transmit+0x70>
    }

    if (HAL_SPI_Transmit(&hspi2, message, mes_length, 100) != HAL_OK) {
 8001182:	6939      	ldr	r1, [r7, #16]
 8001184:	8b7a      	ldrh	r2, [r7, #26]
 8001186:	2364      	movs	r3, #100	; 0x64
 8001188:	4806      	ldr	r0, [pc, #24]	; (80011a4 <display_transmit+0xcc>)
 800118a:	f004 fd4e 	bl	8005c2a <HAL_SPI_Transmit>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <display_transmit+0xc0>
        return 1;
 8001194:	2301      	movs	r3, #1
 8001196:	e000      	b.n	800119a <display_transmit+0xc2>
    }
    return 0;
 8001198:	2300      	movs	r3, #0
 800119a:	46ad      	mov	sp, r5
}
 800119c:	4618      	mov	r0, r3
 800119e:	3720      	adds	r7, #32
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bdb0      	pop	{r4, r5, r7, pc}
 80011a4:	20001df4 	.word	0x20001df4

080011a8 <display_send_instruction>:
/**
 * @brief Send instruction bytes via spi to the display
 * @param[in] instructions A pointer to the instructions to send to the display
 * @param[in] length The number of instructions
 */
int display_send_instruction (uint8_t *instructions, uint16_t length) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]
    return display_transmit(0x1F, instructions, length);
 80011b4:	887b      	ldrh	r3, [r7, #2]
 80011b6:	461a      	mov	r2, r3
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	201f      	movs	r0, #31
 80011bc:	f7ff ff8c 	bl	80010d8 <display_transmit>
 80011c0:	4603      	mov	r3, r0
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3708      	adds	r7, #8
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}

080011ca <display_write>:
/**
 * @brief Write characters to the display where the cursor currently are
 * @param characters The characters to write
 * @param length The number of characters
 */
int display_write (char *characters, uint16_t length) {
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	460b      	mov	r3, r1
 80011d4:	807b      	strh	r3, [r7, #2]
    return display_transmit(0b01011111, (uint8_t*)characters, length);
 80011d6:	887b      	ldrh	r3, [r7, #2]
 80011d8:	461a      	mov	r2, r3
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	205f      	movs	r0, #95	; 0x5f
 80011de:	f7ff ff7b 	bl	80010d8 <display_transmit>
 80011e2:	4603      	mov	r3, r0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <set_row>:
uint8_t rows[] = {0b10000000, 0b10100000, 0b11000000, 0b11100000};
/**
 * @brief Set the cursor on the display
 * @param row The row to write to
 */
int set_row (uint8_t row) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
    /* the address range of DDARM is 00H-13H, 20H-33H, 40H53H, 60H-73H */
    return display_send_instruction(&rows[row], 1);
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	4a05      	ldr	r2, [pc, #20]	; (8001210 <set_row+0x24>)
 80011fa:	4413      	add	r3, r2
 80011fc:	2101      	movs	r1, #1
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ffd2 	bl	80011a8 <display_send_instruction>
 8001204:	4603      	mov	r3, r0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000000c 	.word	0x2000000c

08001214 <display_write_row>:
 * @brief Write text to a specific row on the display
 * @param characters The characters to write
 * @param length The number of characters
 * @param row The row to write to
 */
int display_write_row (char *characters, uint16_t length, uint8_t row) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	460b      	mov	r3, r1
 800121e:	807b      	strh	r3, [r7, #2]
 8001220:	4613      	mov	r3, r2
 8001222:	707b      	strb	r3, [r7, #1]
    set_row(row);
 8001224:	787b      	ldrb	r3, [r7, #1]
 8001226:	4618      	mov	r0, r3
 8001228:	f7ff ffe0 	bl	80011ec <set_row>
    return display_write(characters, length);
 800122c:	887b      	ldrh	r3, [r7, #2]
 800122e:	4619      	mov	r1, r3
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ffca 	bl	80011ca <display_write>
 8001236:	4603      	mov	r3, r0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <clear_display>:

/**
 * @brief Clears the display
 */
int clear_display () {
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
    uint8_t ins = 0x01;
 8001246:	2301      	movs	r3, #1
 8001248:	71fb      	strb	r3, [r7, #7]
    return display_send_instruction(&ins, 1);
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	2101      	movs	r1, #1
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ffaa 	bl	80011a8 <display_send_instruction>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
	...

08001260 <init_display>:

/**
 * @brief Initialise the display
 */
void init_display () {
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
    hardware_reset();
 8001266:	f7ff fe9d 	bl	8000fa4 <hardware_reset>

    test_backlight();
 800126a:	f7ff feb9 	bl	8000fe0 <test_backlight>
//    init_backlight();

    uint16_t ins_length = 12;
 800126e:	230c      	movs	r3, #12
 8001270:	827b      	strh	r3, [r7, #18]
    uint8_t instructions[] = {
 8001272:	4a19      	ldr	r2, [pc, #100]	; (80012d8 <init_display+0x78>)
 8001274:	1d3b      	adds	r3, r7, #4
 8001276:	ca07      	ldmia	r2, {r0, r1, r2}
 8001278:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0x01,
        0x38,
        0x0C,       // display on
    };

    if (display_send_instruction(instructions, ins_length))
 800127c:	8a7a      	ldrh	r2, [r7, #18]
 800127e:	1d3b      	adds	r3, r7, #4
 8001280:	4611      	mov	r1, r2
 8001282:	4618      	mov	r0, r3
 8001284:	f7ff ff90 	bl	80011a8 <display_send_instruction>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <init_display+0x32>
        handle_error();
 800128e:	f000 f827 	bl	80012e0 <handle_error>

    HAL_Delay(5);
 8001292:	2005      	movs	r0, #5
 8001294:	f000 ff72 	bl	800217c <HAL_Delay>

    for (int i = 0; i < 4; ++i) {
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	e00b      	b.n	80012b6 <init_display+0x56>
        set_row(i);
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	4618      	mov	r0, r3
 80012a4:	f7ff ffa2 	bl	80011ec <set_row>
        display_write("0123456789", 10);
 80012a8:	210a      	movs	r1, #10
 80012aa:	480c      	ldr	r0, [pc, #48]	; (80012dc <init_display+0x7c>)
 80012ac:	f7ff ff8d 	bl	80011ca <display_write>
    for (int i = 0; i < 4; ++i) {
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	3301      	adds	r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	ddf0      	ble.n	800129e <init_display+0x3e>
    }

    HAL_Delay(500);
 80012bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012c0:	f000 ff5c 	bl	800217c <HAL_Delay>

    clear_display();
 80012c4:	f7ff ffbc 	bl	8001240 <clear_display>

    HAL_Delay(10);
 80012c8:	200a      	movs	r0, #10
 80012ca:	f000 ff57 	bl	800217c <HAL_Delay>
}
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	0800c7d8 	.word	0x0800c7d8
 80012dc:	0800c7cc 	.word	0x0800c7cc

080012e0 <handle_error>:
 *      Author: Dell
 */

#include "main.h"

void handle_error( void ) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012e4:	b672      	cpsid	i
}
 80012e6:	bf00      	nop
    __disable_irq();
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80012e8:	2201      	movs	r2, #1
 80012ea:	2120      	movs	r1, #32
 80012ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f0:	f002 fd88 	bl	8003e04 <HAL_GPIO_WritePin>
    while (1)
 80012f4:	e7fe      	b.n	80012f4 <handle_error+0x14>
	...

080012f8 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012fc:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <MX_FREERTOS_Init+0x38>)
 80012fe:	2100      	movs	r1, #0
 8001300:	480c      	ldr	r0, [pc, #48]	; (8001334 <MX_FREERTOS_Init+0x3c>)
 8001302:	f007 fbb1 	bl	8008a68 <osThreadNew>
 8001306:	4603      	mov	r3, r0
 8001308:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <MX_FREERTOS_Init+0x40>)
 800130a:	6013      	str	r3, [r2, #0]

  /* creation of backlightTask */
  backlightTaskHandle = osThreadNew(startBacklightTask, NULL, &backlightTask_attributes);
 800130c:	4a0b      	ldr	r2, [pc, #44]	; (800133c <MX_FREERTOS_Init+0x44>)
 800130e:	2100      	movs	r1, #0
 8001310:	480b      	ldr	r0, [pc, #44]	; (8001340 <MX_FREERTOS_Init+0x48>)
 8001312:	f007 fba9 	bl	8008a68 <osThreadNew>
 8001316:	4603      	mov	r3, r0
 8001318:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <MX_FREERTOS_Init+0x4c>)
 800131a:	6013      	str	r3, [r2, #0]

  /* creation of clockTask */
  clockTaskHandle = osThreadNew(startClockTask, NULL, &clockTask_attributes);
 800131c:	4a0a      	ldr	r2, [pc, #40]	; (8001348 <MX_FREERTOS_Init+0x50>)
 800131e:	2100      	movs	r1, #0
 8001320:	480a      	ldr	r0, [pc, #40]	; (800134c <MX_FREERTOS_Init+0x54>)
 8001322:	f007 fba1 	bl	8008a68 <osThreadNew>
 8001326:	4603      	mov	r3, r0
 8001328:	4a09      	ldr	r2, [pc, #36]	; (8001350 <MX_FREERTOS_Init+0x58>)
 800132a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800132c:	bf00      	nop
 800132e:	bd80      	pop	{r7, pc}
 8001330:	0800c894 	.word	0x0800c894
 8001334:	08001355 	.word	0x08001355
 8001338:	20001dc4 	.word	0x20001dc4
 800133c:	0800c8b8 	.word	0x0800c8b8
 8001340:	08001369 	.word	0x08001369
 8001344:	20001dcc 	.word	0x20001dcc
 8001348:	0800c8dc 	.word	0x0800c8dc
 800134c:	080013d5 	.word	0x080013d5
 8001350:	20001dc8 	.word	0x20001dc8

08001354 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800135c:	2001      	movs	r0, #1
 800135e:	f007 fc15 	bl	8008b8c <osDelay>
 8001362:	e7fb      	b.n	800135c <StartDefaultTask+0x8>
 8001364:	0000      	movs	r0, r0
	...

08001368 <startBacklightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBacklightTask */
void startBacklightTask(void *argument)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBacklightTask */
    TickType_t lastWakeTime;
    const TickType_t period = pdMS_TO_TICKS(100);
 8001370:	2364      	movs	r3, #100	; 0x64
 8001372:	617b      	str	r3, [r7, #20]
    lastWakeTime = xTaskGetTickCount();
 8001374:	f008 fd60 	bl	8009e38 <xTaskGetTickCount>
 8001378:	4603      	mov	r3, r0
 800137a:	60fb      	str	r3, [r7, #12]
    uint32_t pot;

  /* Infinite loop */
  for(;;)
  {
    HAL_ADC_Start(&hadc1);
 800137c:	4814      	ldr	r0, [pc, #80]	; (80013d0 <startBacklightTask+0x68>)
 800137e:	f001 fa81 	bl	8002884 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 10);
 8001382:	210a      	movs	r1, #10
 8001384:	4812      	ldr	r0, [pc, #72]	; (80013d0 <startBacklightTask+0x68>)
 8001386:	f001 fb37 	bl	80029f8 <HAL_ADC_PollForConversion>
    pot = HAL_ADC_GetValue(&hadc1);
 800138a:	4811      	ldr	r0, [pc, #68]	; (80013d0 <startBacklightTask+0x68>)
 800138c:	f001 fc0c 	bl	8002ba8 <HAL_ADC_GetValue>
 8001390:	6138      	str	r0, [r7, #16]
    set_brightness((double)pot/POT_MAX);
 8001392:	6938      	ldr	r0, [r7, #16]
 8001394:	f7ff f8b6 	bl	8000504 <__aeabi_ui2d>
 8001398:	a30b      	add	r3, pc, #44	; (adr r3, 80013c8 <startBacklightTask+0x60>)
 800139a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800139e:	f7ff fa55 	bl	800084c <__aeabi_ddiv>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	ec43 2b17 	vmov	d7, r2, r3
 80013aa:	eeb0 0a47 	vmov.f32	s0, s14
 80013ae:	eef0 0a67 	vmov.f32	s1, s15
 80013b2:	f000 fa41 	bl	8001838 <set_brightness>

    vTaskDelayUntil(&lastWakeTime, period);
 80013b6:	f107 030c 	add.w	r3, r7, #12
 80013ba:	6979      	ldr	r1, [r7, #20]
 80013bc:	4618      	mov	r0, r3
 80013be:	f008 fb77 	bl	8009ab0 <vTaskDelayUntil>
    HAL_ADC_Start(&hadc1);
 80013c2:	e7db      	b.n	800137c <startBacklightTask+0x14>
 80013c4:	f3af 8000 	nop.w
 80013c8:	00000000 	.word	0x00000000
 80013cc:	40afc400 	.word	0x40afc400
 80013d0:	20001d60 	.word	0x20001d60

080013d4 <startClockTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startClockTask */
void startClockTask(void *argument)
{
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b08f      	sub	sp, #60	; 0x3c
 80013d8:	af02      	add	r7, sp, #8
 80013da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startClockTask */
    TickType_t lastWakeTime;
    const TickType_t period = pdMS_TO_TICKS(1000);
 80013dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    lastWakeTime = xTaskGetTickCount();
 80013e2:	f008 fd29 	bl	8009e38 <xTaskGetTickCount>
 80013e6:	4603      	mov	r3, r0
 80013e8:	61fb      	str	r3, [r7, #28]

    RTC_TimeTypeDef time;
    uint8_t buf_len = 8;
 80013ea:	2308      	movs	r3, #8
 80013ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    char buf[buf_len];
 80013f0:	f897 402b 	ldrb.w	r4, [r7, #43]	; 0x2b
 80013f4:	4623      	mov	r3, r4
 80013f6:	3b01      	subs	r3, #1
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
 80013fa:	b2e0      	uxtb	r0, r4
 80013fc:	f04f 0100 	mov.w	r1, #0
 8001400:	f04f 0200 	mov.w	r2, #0
 8001404:	f04f 0300 	mov.w	r3, #0
 8001408:	00cb      	lsls	r3, r1, #3
 800140a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800140e:	00c2      	lsls	r2, r0, #3
 8001410:	b2e0      	uxtb	r0, r4
 8001412:	f04f 0100 	mov.w	r1, #0
 8001416:	f04f 0200 	mov.w	r2, #0
 800141a:	f04f 0300 	mov.w	r3, #0
 800141e:	00cb      	lsls	r3, r1, #3
 8001420:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001424:	00c2      	lsls	r2, r0, #3
 8001426:	4623      	mov	r3, r4
 8001428:	3307      	adds	r3, #7
 800142a:	08db      	lsrs	r3, r3, #3
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	ebad 0d03 	sub.w	sp, sp, r3
 8001432:	ab02      	add	r3, sp, #8
 8001434:	3300      	adds	r3, #0
 8001436:	623b      	str	r3, [r7, #32]

  /* Infinite loop */
  for(;;)
  {
    get_time(&time);
 8001438:	f107 0308 	add.w	r3, r7, #8
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff fd8b 	bl	8000f58 <get_time>
    sprintf(buf, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 8001442:	6a38      	ldr	r0, [r7, #32]
 8001444:	7a3b      	ldrb	r3, [r7, #8]
 8001446:	461a      	mov	r2, r3
 8001448:	7a7b      	ldrb	r3, [r7, #9]
 800144a:	4619      	mov	r1, r3
 800144c:	7abb      	ldrb	r3, [r7, #10]
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	460b      	mov	r3, r1
 8001452:	490b      	ldr	r1, [pc, #44]	; (8001480 <startClockTask+0xac>)
 8001454:	f00a f8ca 	bl	800b5ec <siprintf>
    uart_println(buf);
 8001458:	6a3b      	ldr	r3, [r7, #32]
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fd00 	bl	8001e60 <uart_println>
    display_write_row(buf, buf_len, 0);
 8001460:	6a3b      	ldr	r3, [r7, #32]
 8001462:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001466:	b291      	uxth	r1, r2
 8001468:	2200      	movs	r2, #0
 800146a:	4618      	mov	r0, r3
 800146c:	f7ff fed2 	bl	8001214 <display_write_row>

    vTaskDelayUntil(&lastWakeTime, period);
 8001470:	f107 031c 	add.w	r3, r7, #28
 8001474:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001476:	4618      	mov	r0, r3
 8001478:	f008 fb1a 	bl	8009ab0 <vTaskDelayUntil>
    get_time(&time);
 800147c:	e7dc      	b.n	8001438 <startClockTask+0x64>
 800147e:	bf00      	nop
 8001480:	0800c80c 	.word	0x0800c80c

08001484 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	f107 0314 	add.w	r3, r7, #20
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800149a:	4b40      	ldr	r3, [pc, #256]	; (800159c <MX_GPIO_Init+0x118>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a3f      	ldr	r2, [pc, #252]	; (800159c <MX_GPIO_Init+0x118>)
 80014a0:	f043 0304 	orr.w	r3, r3, #4
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b3d      	ldr	r3, [pc, #244]	; (800159c <MX_GPIO_Init+0x118>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0304 	and.w	r3, r3, #4
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014b2:	4b3a      	ldr	r3, [pc, #232]	; (800159c <MX_GPIO_Init+0x118>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a39      	ldr	r2, [pc, #228]	; (800159c <MX_GPIO_Init+0x118>)
 80014b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b37      	ldr	r3, [pc, #220]	; (800159c <MX_GPIO_Init+0x118>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	4b34      	ldr	r3, [pc, #208]	; (800159c <MX_GPIO_Init+0x118>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	4a33      	ldr	r2, [pc, #204]	; (800159c <MX_GPIO_Init+0x118>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d6:	4b31      	ldr	r3, [pc, #196]	; (800159c <MX_GPIO_Init+0x118>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e2:	4b2e      	ldr	r3, [pc, #184]	; (800159c <MX_GPIO_Init+0x118>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	4a2d      	ldr	r2, [pc, #180]	; (800159c <MX_GPIO_Init+0x118>)
 80014e8:	f043 0302 	orr.w	r3, r3, #2
 80014ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ee:	4b2b      	ldr	r3, [pc, #172]	; (800159c <MX_GPIO_Init+0x118>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	f003 0302 	and.w	r3, r3, #2
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014fa:	4b28      	ldr	r3, [pc, #160]	; (800159c <MX_GPIO_Init+0x118>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	4a27      	ldr	r2, [pc, #156]	; (800159c <MX_GPIO_Init+0x118>)
 8001500:	f043 0308 	orr.w	r3, r3, #8
 8001504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001506:	4b25      	ldr	r3, [pc, #148]	; (800159c <MX_GPIO_Init+0x118>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	f003 0308 	and.w	r3, r3, #8
 800150e:	603b      	str	r3, [r7, #0]
 8001510:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001512:	2200      	movs	r2, #0
 8001514:	2120      	movs	r1, #32
 8001516:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151a:	f002 fc73 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 800151e:	2201      	movs	r2, #1
 8001520:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001524:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001528:	f002 fc6c 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Disp_Green_Pin|Disp_White_Pin, GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001532:	481b      	ldr	r0, [pc, #108]	; (80015a0 <MX_GPIO_Init+0x11c>)
 8001534:	f002 fc66 	bl	8003e04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001538:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800153e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001548:	f107 0314 	add.w	r3, r7, #20
 800154c:	4619      	mov	r1, r3
 800154e:	4814      	ldr	r0, [pc, #80]	; (80015a0 <MX_GPIO_Init+0x11c>)
 8001550:	f002 faae 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Disp_Reset_Pin;
 8001554:	f248 0320 	movw	r3, #32800	; 0x8020
 8001558:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001570:	f002 fa9e 	bl	8003ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Disp_Green_Pin|Disp_White_Pin;
 8001574:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001578:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001586:	f107 0314 	add.w	r3, r7, #20
 800158a:	4619      	mov	r1, r3
 800158c:	4804      	ldr	r0, [pc, #16]	; (80015a0 <MX_GPIO_Init+0x11c>)
 800158e:	f002 fa8f 	bl	8003ab0 <HAL_GPIO_Init>

}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	; 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40021000 	.word	0x40021000
 80015a0:	48000800 	.word	0x48000800
 80015a4:	00000000 	.word	0x00000000

080015a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015a8:	b590      	push	{r4, r7, lr}
 80015aa:	b08f      	sub	sp, #60	; 0x3c
 80015ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ae:	f000 fda5 	bl	80020fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b2:	f000 f8c3 	bl	800173c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015b6:	f7ff ff65 	bl	8001484 <MX_GPIO_Init>
  MX_UART5_Init();
 80015ba:	f000 fcbb 	bl	8001f34 <MX_UART5_Init>
  MX_SPI2_Init();
 80015be:	f000 f9c7 	bl	8001950 <MX_SPI2_Init>
  MX_RTC_Init();
 80015c2:	f000 f96b 	bl	800189c <MX_RTC_Init>
  MX_TIM3_Init();
 80015c6:	f000 fb53 	bl	8001c70 <MX_TIM3_Init>
  MX_ADC1_Init();
 80015ca:	f7ff fbc3 	bl	8000d54 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80015ce:	2104      	movs	r1, #4
 80015d0:	4855      	ldr	r0, [pc, #340]	; (8001728 <main+0x180>)
 80015d2:	f004 ff27 	bl	8006424 <HAL_TIM_PWM_Start>
  init_display();
 80015d6:	f7ff fe43 	bl	8001260 <init_display>

  /* program variables */
  RTC_TimeTypeDef time;
  uint8_t buf_len = 8;
 80015da:	2308      	movs	r3, #8
 80015dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  char buf[buf_len];
 80015e0:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 80015e4:	4623      	mov	r3, r4
 80015e6:	3b01      	subs	r3, #1
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80015ea:	b2e0      	uxtb	r0, r4
 80015ec:	f04f 0100 	mov.w	r1, #0
 80015f0:	f04f 0200 	mov.w	r2, #0
 80015f4:	f04f 0300 	mov.w	r3, #0
 80015f8:	00cb      	lsls	r3, r1, #3
 80015fa:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015fe:	00c2      	lsls	r2, r0, #3
 8001600:	b2e0      	uxtb	r0, r4
 8001602:	f04f 0100 	mov.w	r1, #0
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	00cb      	lsls	r3, r1, #3
 8001610:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001614:	00c2      	lsls	r2, r0, #3
 8001616:	4623      	mov	r3, r4
 8001618:	3307      	adds	r3, #7
 800161a:	08db      	lsrs	r3, r3, #3
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	ebad 0d03 	sub.w	sp, sp, r3
 8001622:	ab02      	add	r3, sp, #8
 8001624:	3300      	adds	r3, #0
 8001626:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pot;

  /* initialise time */
  set_backlight(WHITE, GPIO_PIN_SET);
 8001628:	2101      	movs	r1, #1
 800162a:	2000      	movs	r0, #0
 800162c:	f7ff fd20 	bl	8001070 <set_backlight>
  int h, m, s;
  display_write_row("Enter time", 10, 0);
 8001630:	2200      	movs	r2, #0
 8001632:	210a      	movs	r1, #10
 8001634:	483d      	ldr	r0, [pc, #244]	; (800172c <main+0x184>)
 8001636:	f7ff fded 	bl	8001214 <display_write_row>
  uart_get_clock_input(buf);
 800163a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163c:	4618      	mov	r0, r3
 800163e:	f000 fc3f 	bl	8001ec0 <uart_get_clock_input>
  uart_println("");
 8001642:	483b      	ldr	r0, [pc, #236]	; (8001730 <main+0x188>)
 8001644:	f000 fc0c 	bl	8001e60 <uart_println>
  sscanf(buf, "%02d:%02d:%02d", &h, &m, &s);
 8001648:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800164a:	1d39      	adds	r1, r7, #4
 800164c:	f107 0208 	add.w	r2, r7, #8
 8001650:	463b      	mov	r3, r7
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	460b      	mov	r3, r1
 8001656:	4937      	ldr	r1, [pc, #220]	; (8001734 <main+0x18c>)
 8001658:	f009 ffe8 	bl	800b62c <siscanf>
  start_clock(h, m, s);
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	b2db      	uxtb	r3, r3
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	b2d1      	uxtb	r1, r2
 8001664:	683a      	ldr	r2, [r7, #0]
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f7ff fc53 	bl	8000f14 <start_clock>
  clear_display();
 800166e:	f7ff fde7 	bl	8001240 <clear_display>
  set_backlight(WHITE, GPIO_PIN_RESET);
 8001672:	2100      	movs	r1, #0
 8001674:	2000      	movs	r0, #0
 8001676:	f7ff fcfb 	bl	8001070 <set_backlight>
  set_brightness(1.0);
 800167a:	ed9f 0b27 	vldr	d0, [pc, #156]	; 8001718 <main+0x170>
 800167e:	f000 f8db 	bl	8001838 <set_brightness>

  /* initialise potentiometer */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001682:	217f      	movs	r1, #127	; 0x7f
 8001684:	482c      	ldr	r0, [pc, #176]	; (8001738 <main+0x190>)
 8001686:	f001 ffa1 	bl	80035cc <HAL_ADCEx_Calibration_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800168a:	f007 f9a3 	bl	80089d4 <osKernelInitialize>
  MX_FREERTOS_Init();
 800168e:	f7ff fe33 	bl	80012f8 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001692:	f007 f9c3 	bl	8008a1c <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//      uart_receive(&c, 1);
      HAL_Delay(100);
 8001696:	2064      	movs	r0, #100	; 0x64
 8001698:	f000 fd70 	bl	800217c <HAL_Delay>

      /* potentiometer */
      HAL_ADC_Start(&hadc1);
 800169c:	4826      	ldr	r0, [pc, #152]	; (8001738 <main+0x190>)
 800169e:	f001 f8f1 	bl	8002884 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 10);
 80016a2:	210a      	movs	r1, #10
 80016a4:	4824      	ldr	r0, [pc, #144]	; (8001738 <main+0x190>)
 80016a6:	f001 f9a7 	bl	80029f8 <HAL_ADC_PollForConversion>
      pot = HAL_ADC_GetValue(&hadc1);
 80016aa:	4823      	ldr	r0, [pc, #140]	; (8001738 <main+0x190>)
 80016ac:	f001 fa7c 	bl	8002ba8 <HAL_ADC_GetValue>
 80016b0:	6238      	str	r0, [r7, #32]
      uart_printnum(pot);
 80016b2:	6a38      	ldr	r0, [r7, #32]
 80016b4:	f000 fbec 	bl	8001e90 <uart_printnum>
      set_brightness((double)pot/POT_MAX);
 80016b8:	6a38      	ldr	r0, [r7, #32]
 80016ba:	f7fe ff23 	bl	8000504 <__aeabi_ui2d>
 80016be:	a318      	add	r3, pc, #96	; (adr r3, 8001720 <main+0x178>)
 80016c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016c4:	f7ff f8c2 	bl	800084c <__aeabi_ddiv>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	ec43 2b17 	vmov	d7, r2, r3
 80016d0:	eeb0 0a47 	vmov.f32	s0, s14
 80016d4:	eef0 0a67 	vmov.f32	s1, s15
 80016d8:	f000 f8ae 	bl	8001838 <set_brightness>

      /* get and write time */
      get_time(&time);
 80016dc:	f107 030c 	add.w	r3, r7, #12
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fc39 	bl	8000f58 <get_time>
      sprintf(buf, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 80016e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016e8:	7b3b      	ldrb	r3, [r7, #12]
 80016ea:	461a      	mov	r2, r3
 80016ec:	7b7b      	ldrb	r3, [r7, #13]
 80016ee:	4619      	mov	r1, r3
 80016f0:	7bbb      	ldrb	r3, [r7, #14]
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	460b      	mov	r3, r1
 80016f6:	490f      	ldr	r1, [pc, #60]	; (8001734 <main+0x18c>)
 80016f8:	f009 ff78 	bl	800b5ec <siprintf>
      uart_println(buf);
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 fbae 	bl	8001e60 <uart_println>
      display_write_row(buf, buf_len, 0);
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800170a:	b291      	uxth	r1, r2
 800170c:	2200      	movs	r2, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f7ff fd80 	bl	8001214 <display_write_row>
      HAL_Delay(100);
 8001714:	e7bf      	b.n	8001696 <main+0xee>
 8001716:	bf00      	nop
 8001718:	00000000 	.word	0x00000000
 800171c:	3ff00000 	.word	0x3ff00000
 8001720:	00000000 	.word	0x00000000
 8001724:	40afc400 	.word	0x40afc400
 8001728:	20001ea4 	.word	0x20001ea4
 800172c:	0800c81c 	.word	0x0800c81c
 8001730:	0800c828 	.word	0x0800c828
 8001734:	0800c82c 	.word	0x0800c82c
 8001738:	20001d60 	.word	0x20001d60

0800173c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b096      	sub	sp, #88	; 0x58
 8001740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	f107 0314 	add.w	r3, r7, #20
 8001746:	2244      	movs	r2, #68	; 0x44
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f009 ff46 	bl	800b5dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001750:	463b      	mov	r3, r7
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800175e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001762:	f002 fb75 	bl	8003e50 <HAL_PWREx_ControlVoltageScaling>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800176c:	f000 f85c 	bl	8001828 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001770:	230a      	movs	r3, #10
 8001772:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001774:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001778:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800177a:	2310      	movs	r3, #16
 800177c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800177e:	2301      	movs	r3, #1
 8001780:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001782:	2302      	movs	r3, #2
 8001784:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001786:	2302      	movs	r3, #2
 8001788:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800178a:	2301      	movs	r3, #1
 800178c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800178e:	230a      	movs	r3, #10
 8001790:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001792:	2307      	movs	r3, #7
 8001794:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001796:	2302      	movs	r3, #2
 8001798:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800179a:	2302      	movs	r3, #2
 800179c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800179e:	f107 0314 	add.w	r3, r7, #20
 80017a2:	4618      	mov	r0, r3
 80017a4:	f002 fbaa 	bl	8003efc <HAL_RCC_OscConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80017ae:	f000 f83b 	bl	8001828 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017b2:	230f      	movs	r3, #15
 80017b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017b6:	2303      	movs	r3, #3
 80017b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017c2:	2300      	movs	r3, #0
 80017c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017c6:	463b      	mov	r3, r7
 80017c8:	2104      	movs	r1, #4
 80017ca:	4618      	mov	r0, r3
 80017cc:	f002 ff7c 	bl	80046c8 <HAL_RCC_ClockConfig>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80017d6:	f000 f827 	bl	8001828 <Error_Handler>
  }
}
 80017da:	bf00      	nop
 80017dc:	3758      	adds	r7, #88	; 0x58
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
	...

080017e4 <HAL_UART_TxCpltCallback>:
* @note This example shows a simple way to report end of IT Tx transfer, and
* you can add your own implementation.
* @retval None
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
    /* Set transmission flag: transfer complete*/
    uartReady = SET;
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <HAL_UART_TxCpltCallback+0x1c>)
 80017ee:	2201      	movs	r2, #1
 80017f0:	701a      	strb	r2, [r3, #0]
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	200000a0 	.word	0x200000a0

08001804 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a04      	ldr	r2, [pc, #16]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d101      	bne.n	800181a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001816:	f000 fc91 	bl	800213c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40012c00 	.word	0x40012c00

08001828 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    handle_error();
 800182c:	f7ff fd58 	bl	80012e0 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8001830:	bf00      	nop
 8001832:	bd80      	pop	{r7, pc}
 8001834:	0000      	movs	r0, r0
	...

08001838 <set_brightness>:

/**
 * @brief Change the PWM pulse width of the red background light
 * @param[in] brightness The brightness of the backlight
 */
void set_brightness (double brightness) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	ed87 0b00 	vstr	d0, [r7]
    brightness *= brightness * brightness;
 8001842:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001846:	e9d7 0100 	ldrd	r0, r1, [r7]
 800184a:	f7fe fed5 	bl	80005f8 <__aeabi_dmul>
 800184e:	4602      	mov	r2, r0
 8001850:	460b      	mov	r3, r1
 8001852:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001856:	f7fe fecf 	bl	80005f8 <__aeabi_dmul>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	e9c7 2300 	strd	r2, r3, [r7]
    uint16_t pulse = (uint16_t) (brightness * (double)0xFFFF);
 8001862:	a30c      	add	r3, pc, #48	; (adr r3, 8001894 <set_brightness+0x5c>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	e9d7 0100 	ldrd	r0, r1, [r7]
 800186c:	f7fe fec4 	bl	80005f8 <__aeabi_dmul>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4610      	mov	r0, r2
 8001876:	4619      	mov	r1, r3
 8001878:	f7ff f8d0 	bl	8000a1c <__aeabi_d2uiz>
 800187c:	4603      	mov	r3, r0
 800187e:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim3, CHANNEL, pulse);
 8001880:	4b03      	ldr	r3, [pc, #12]	; (8001890 <set_brightness+0x58>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	89fa      	ldrh	r2, [r7, #14]
 8001886:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001888:	bf00      	nop
 800188a:	3710      	adds	r7, #16
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20001ea4 	.word	0x20001ea4
 8001894:	00000000 	.word	0x00000000
 8001898:	40efffe0 	.word	0x40efffe0

0800189c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <MX_RTC_Init+0x48>)
 80018a2:	4a11      	ldr	r2, [pc, #68]	; (80018e8 <MX_RTC_Init+0x4c>)
 80018a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80018a6:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <MX_RTC_Init+0x48>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80018ac:	4b0d      	ldr	r3, [pc, #52]	; (80018e4 <MX_RTC_Init+0x48>)
 80018ae:	227f      	movs	r2, #127	; 0x7f
 80018b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <MX_RTC_Init+0x48>)
 80018b4:	22ff      	movs	r2, #255	; 0xff
 80018b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018b8:	4b0a      	ldr	r3, [pc, #40]	; (80018e4 <MX_RTC_Init+0x48>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80018be:	4b09      	ldr	r3, [pc, #36]	; (80018e4 <MX_RTC_Init+0x48>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <MX_RTC_Init+0x48>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018ca:	4b06      	ldr	r3, [pc, #24]	; (80018e4 <MX_RTC_Init+0x48>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018d0:	4804      	ldr	r0, [pc, #16]	; (80018e4 <MX_RTC_Init+0x48>)
 80018d2:	f003 fded 	bl	80054b0 <HAL_RTC_Init>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80018dc:	f7ff ffa4 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	20001dd0 	.word	0x20001dd0
 80018e8:	40002800 	.word	0x40002800

080018ec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b0a4      	sub	sp, #144	; 0x90
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018f4:	f107 0308 	add.w	r3, r7, #8
 80018f8:	2288      	movs	r2, #136	; 0x88
 80018fa:	2100      	movs	r1, #0
 80018fc:	4618      	mov	r0, r3
 80018fe:	f009 fe6d 	bl	800b5dc <memset>
  if(rtcHandle->Instance==RTC)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a10      	ldr	r2, [pc, #64]	; (8001948 <HAL_RTC_MspInit+0x5c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d118      	bne.n	800193e <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800190c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001910:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001912:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001916:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800191a:	f107 0308 	add.w	r3, r7, #8
 800191e:	4618      	mov	r0, r3
 8001920:	f003 f90a 	bl	8004b38 <HAL_RCCEx_PeriphCLKConfig>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800192a:	f7ff ff7d 	bl	8001828 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800192e:	4b07      	ldr	r3, [pc, #28]	; (800194c <HAL_RTC_MspInit+0x60>)
 8001930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001934:	4a05      	ldr	r2, [pc, #20]	; (800194c <HAL_RTC_MspInit+0x60>)
 8001936:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800193a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800193e:	bf00      	nop
 8001940:	3790      	adds	r7, #144	; 0x90
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40002800 	.word	0x40002800
 800194c:	40021000 	.word	0x40021000

08001950 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001954:	4b1b      	ldr	r3, [pc, #108]	; (80019c4 <MX_SPI2_Init+0x74>)
 8001956:	4a1c      	ldr	r2, [pc, #112]	; (80019c8 <MX_SPI2_Init+0x78>)
 8001958:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800195a:	4b1a      	ldr	r3, [pc, #104]	; (80019c4 <MX_SPI2_Init+0x74>)
 800195c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001960:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001962:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <MX_SPI2_Init+0x74>)
 8001964:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001968:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800196a:	4b16      	ldr	r3, [pc, #88]	; (80019c4 <MX_SPI2_Init+0x74>)
 800196c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001970:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001972:	4b14      	ldr	r3, [pc, #80]	; (80019c4 <MX_SPI2_Init+0x74>)
 8001974:	2202      	movs	r2, #2
 8001976:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <MX_SPI2_Init+0x74>)
 800197a:	2201      	movs	r2, #1
 800197c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <MX_SPI2_Init+0x74>)
 8001980:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001984:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <MX_SPI2_Init+0x74>)
 8001988:	2230      	movs	r2, #48	; 0x30
 800198a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800198c:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <MX_SPI2_Init+0x74>)
 800198e:	2280      	movs	r2, #128	; 0x80
 8001990:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <MX_SPI2_Init+0x74>)
 8001994:	2200      	movs	r2, #0
 8001996:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001998:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <MX_SPI2_Init+0x74>)
 800199a:	2200      	movs	r2, #0
 800199c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <MX_SPI2_Init+0x74>)
 80019a0:	2207      	movs	r2, #7
 80019a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80019a4:	4b07      	ldr	r3, [pc, #28]	; (80019c4 <MX_SPI2_Init+0x74>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <MX_SPI2_Init+0x74>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80019b0:	4804      	ldr	r0, [pc, #16]	; (80019c4 <MX_SPI2_Init+0x74>)
 80019b2:	f004 f897 	bl	8005ae4 <HAL_SPI_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80019bc:	f7ff ff34 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019c0:	bf00      	nop
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20001df4 	.word	0x20001df4
 80019c8:	40003800 	.word	0x40003800

080019cc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b08a      	sub	sp, #40	; 0x28
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	2200      	movs	r2, #0
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	60da      	str	r2, [r3, #12]
 80019e2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a25      	ldr	r2, [pc, #148]	; (8001a80 <HAL_SPI_MspInit+0xb4>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d144      	bne.n	8001a78 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019ee:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <HAL_SPI_MspInit+0xb8>)
 80019f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f2:	4a24      	ldr	r2, [pc, #144]	; (8001a84 <HAL_SPI_MspInit+0xb8>)
 80019f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019f8:	6593      	str	r3, [r2, #88]	; 0x58
 80019fa:	4b22      	ldr	r3, [pc, #136]	; (8001a84 <HAL_SPI_MspInit+0xb8>)
 80019fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a02:	613b      	str	r3, [r7, #16]
 8001a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a06:	4b1f      	ldr	r3, [pc, #124]	; (8001a84 <HAL_SPI_MspInit+0xb8>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	4a1e      	ldr	r2, [pc, #120]	; (8001a84 <HAL_SPI_MspInit+0xb8>)
 8001a0c:	f043 0304 	orr.w	r3, r3, #4
 8001a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a12:	4b1c      	ldr	r3, [pc, #112]	; (8001a84 <HAL_SPI_MspInit+0xb8>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a16:	f003 0304 	and.w	r3, r3, #4
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a1e:	4b19      	ldr	r3, [pc, #100]	; (8001a84 <HAL_SPI_MspInit+0xb8>)
 8001a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a22:	4a18      	ldr	r2, [pc, #96]	; (8001a84 <HAL_SPI_MspInit+0xb8>)
 8001a24:	f043 0302 	orr.w	r3, r3, #2
 8001a28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a2a:	4b16      	ldr	r3, [pc, #88]	; (8001a84 <HAL_SPI_MspInit+0xb8>)
 8001a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = Display_OUT_Pin;
 8001a36:	2308      	movs	r3, #8
 8001a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a42:	2303      	movs	r3, #3
 8001a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a46:	2305      	movs	r3, #5
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Display_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480d      	ldr	r0, [pc, #52]	; (8001a88 <HAL_SPI_MspInit+0xbc>)
 8001a52:	f002 f82d 	bl	8003ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Dispay_CLK_Pin|Display_CS_Pin;
 8001a56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a60:	2300      	movs	r3, #0
 8001a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a64:	2303      	movs	r3, #3
 8001a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a68:	2305      	movs	r3, #5
 8001a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6c:	f107 0314 	add.w	r3, r7, #20
 8001a70:	4619      	mov	r1, r3
 8001a72:	4806      	ldr	r0, [pc, #24]	; (8001a8c <HAL_SPI_MspInit+0xc0>)
 8001a74:	f002 f81c 	bl	8003ab0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001a78:	bf00      	nop
 8001a7a:	3728      	adds	r7, #40	; 0x28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40003800 	.word	0x40003800
 8001a84:	40021000 	.word	0x40021000
 8001a88:	48000800 	.word	0x48000800
 8001a8c:	48000400 	.word	0x48000400

08001a90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_MspInit+0x4c>)
 8001a98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a9a:	4a10      	ldr	r2, [pc, #64]	; (8001adc <HAL_MspInit+0x4c>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6613      	str	r3, [r2, #96]	; 0x60
 8001aa2:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <HAL_MspInit+0x4c>)
 8001aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa6:	f003 0301 	and.w	r3, r3, #1
 8001aaa:	607b      	str	r3, [r7, #4]
 8001aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aae:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_MspInit+0x4c>)
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <HAL_MspInit+0x4c>)
 8001ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ab8:	6593      	str	r3, [r2, #88]	; 0x58
 8001aba:	4b08      	ldr	r3, [pc, #32]	; (8001adc <HAL_MspInit+0x4c>)
 8001abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	603b      	str	r3, [r7, #0]
 8001ac4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	210f      	movs	r1, #15
 8001aca:	f06f 0001 	mvn.w	r0, #1
 8001ace:	f001 ff45 	bl	800395c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40021000 	.word	0x40021000

08001ae0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08c      	sub	sp, #48	; 0x30
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	2019      	movs	r0, #25
 8001af6:	f001 ff31 	bl	800395c <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001afa:	2019      	movs	r0, #25
 8001afc:	f001 ff4a 	bl	8003994 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b00:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <HAL_InitTick+0x9c>)
 8001b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b04:	4a1d      	ldr	r2, [pc, #116]	; (8001b7c <HAL_InitTick+0x9c>)
 8001b06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b0a:	6613      	str	r3, [r2, #96]	; 0x60
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <HAL_InitTick+0x9c>)
 8001b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b18:	f107 0210 	add.w	r2, r7, #16
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	4611      	mov	r1, r2
 8001b22:	4618      	mov	r0, r3
 8001b24:	f002 ff76 	bl	8004a14 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b28:	f002 ff5e 	bl	80049e8 <HAL_RCC_GetPCLK2Freq>
 8001b2c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b30:	4a13      	ldr	r2, [pc, #76]	; (8001b80 <HAL_InitTick+0xa0>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	0c9b      	lsrs	r3, r3, #18
 8001b38:	3b01      	subs	r3, #1
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <HAL_InitTick+0xa4>)
 8001b3e:	4a12      	ldr	r2, [pc, #72]	; (8001b88 <HAL_InitTick+0xa8>)
 8001b40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b42:	4b10      	ldr	r3, [pc, #64]	; (8001b84 <HAL_InitTick+0xa4>)
 8001b44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b48:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b4a:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <HAL_InitTick+0xa4>)
 8001b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b50:	4b0c      	ldr	r3, [pc, #48]	; (8001b84 <HAL_InitTick+0xa4>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <HAL_InitTick+0xa4>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001b5c:	4809      	ldr	r0, [pc, #36]	; (8001b84 <HAL_InitTick+0xa4>)
 8001b5e:	f004 fb37 	bl	80061d0 <HAL_TIM_Base_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d104      	bne.n	8001b72 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001b68:	4806      	ldr	r0, [pc, #24]	; (8001b84 <HAL_InitTick+0xa4>)
 8001b6a:	f004 fb89 	bl	8006280 <HAL_TIM_Base_Start_IT>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	e000      	b.n	8001b74 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b72:	2301      	movs	r3, #1
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	3730      	adds	r7, #48	; 0x30
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	431bde83 	.word	0x431bde83
 8001b84:	20001e58 	.word	0x20001e58
 8001b88:	40012c00 	.word	0x40012c00

08001b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <NMI_Handler+0x4>

08001b92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b96:	e7fe      	b.n	8001b96 <HardFault_Handler+0x4>

08001b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <MemManage_Handler+0x4>

08001b9e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <BusFault_Handler+0x4>

08001ba4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <UsageFault_Handler+0x4>

08001baa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bae:	bf00      	nop
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bbc:	4802      	ldr	r0, [pc, #8]	; (8001bc8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001bbe:	f004 fd37 	bl	8006630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001bc2:	bf00      	nop
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20001e58 	.word	0x20001e58

08001bcc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001bd0:	4802      	ldr	r0, [pc, #8]	; (8001bdc <UART5_IRQHandler+0x10>)
 8001bd2:	f005 fedd 	bl	8007990 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20001ef0 	.word	0x20001ef0

08001be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001be8:	4a14      	ldr	r2, [pc, #80]	; (8001c3c <_sbrk+0x5c>)
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <_sbrk+0x60>)
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bf4:	4b13      	ldr	r3, [pc, #76]	; (8001c44 <_sbrk+0x64>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d102      	bne.n	8001c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bfc:	4b11      	ldr	r3, [pc, #68]	; (8001c44 <_sbrk+0x64>)
 8001bfe:	4a12      	ldr	r2, [pc, #72]	; (8001c48 <_sbrk+0x68>)
 8001c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c02:	4b10      	ldr	r3, [pc, #64]	; (8001c44 <_sbrk+0x64>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4413      	add	r3, r2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d207      	bcs.n	8001c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c10:	f009 fcac 	bl	800b56c <__errno>
 8001c14:	4603      	mov	r3, r0
 8001c16:	220c      	movs	r2, #12
 8001c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c1e:	e009      	b.n	8001c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <_sbrk+0x64>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c26:	4b07      	ldr	r3, [pc, #28]	; (8001c44 <_sbrk+0x64>)
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	4a05      	ldr	r2, [pc, #20]	; (8001c44 <_sbrk+0x64>)
 8001c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c32:	68fb      	ldr	r3, [r7, #12]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3718      	adds	r7, #24
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	20018000 	.word	0x20018000
 8001c40:	00000400 	.word	0x00000400
 8001c44:	200000a4 	.word	0x200000a4
 8001c48:	20001fc8 	.word	0x20001fc8

08001c4c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c50:	4b06      	ldr	r3, [pc, #24]	; (8001c6c <SystemInit+0x20>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c56:	4a05      	ldr	r2, [pc, #20]	; (8001c6c <SystemInit+0x20>)
 8001c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c60:	bf00      	nop
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr
 8001c6a:	bf00      	nop
 8001c6c:	e000ed00 	.word	0xe000ed00

08001c70 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08e      	sub	sp, #56	; 0x38
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c84:	f107 031c 	add.w	r3, r7, #28
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c90:	463b      	mov	r3, r7
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	60da      	str	r2, [r3, #12]
 8001c9c:	611a      	str	r2, [r3, #16]
 8001c9e:	615a      	str	r2, [r3, #20]
 8001ca0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ca2:	4b2d      	ldr	r3, [pc, #180]	; (8001d58 <MX_TIM3_Init+0xe8>)
 8001ca4:	4a2d      	ldr	r2, [pc, #180]	; (8001d5c <MX_TIM3_Init+0xec>)
 8001ca6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ca8:	4b2b      	ldr	r3, [pc, #172]	; (8001d58 <MX_TIM3_Init+0xe8>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cae:	4b2a      	ldr	r3, [pc, #168]	; (8001d58 <MX_TIM3_Init+0xe8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001cb4:	4b28      	ldr	r3, [pc, #160]	; (8001d58 <MX_TIM3_Init+0xe8>)
 8001cb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cbc:	4b26      	ldr	r3, [pc, #152]	; (8001d58 <MX_TIM3_Init+0xe8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc2:	4b25      	ldr	r3, [pc, #148]	; (8001d58 <MX_TIM3_Init+0xe8>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cc8:	4823      	ldr	r0, [pc, #140]	; (8001d58 <MX_TIM3_Init+0xe8>)
 8001cca:	f004 fa81 	bl	80061d0 <HAL_TIM_Base_Init>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001cd4:	f7ff fda8 	bl	8001828 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	481c      	ldr	r0, [pc, #112]	; (8001d58 <MX_TIM3_Init+0xe8>)
 8001ce6:	f004 fed7 	bl	8006a98 <HAL_TIM_ConfigClockSource>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001cf0:	f7ff fd9a 	bl	8001828 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cf4:	4818      	ldr	r0, [pc, #96]	; (8001d58 <MX_TIM3_Init+0xe8>)
 8001cf6:	f004 fb33 	bl	8006360 <HAL_TIM_PWM_Init>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d001      	beq.n	8001d04 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001d00:	f7ff fd92 	bl	8001828 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d0c:	f107 031c 	add.w	r3, r7, #28
 8001d10:	4619      	mov	r1, r3
 8001d12:	4811      	ldr	r0, [pc, #68]	; (8001d58 <MX_TIM3_Init+0xe8>)
 8001d14:	f005 fbe2 	bl	80074dc <HAL_TIMEx_MasterConfigSynchronization>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001d1e:	f7ff fd83 	bl	8001828 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d22:	2360      	movs	r3, #96	; 0x60
 8001d24:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d26:	2300      	movs	r3, #0
 8001d28:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d32:	463b      	mov	r3, r7
 8001d34:	2204      	movs	r2, #4
 8001d36:	4619      	mov	r1, r3
 8001d38:	4807      	ldr	r0, [pc, #28]	; (8001d58 <MX_TIM3_Init+0xe8>)
 8001d3a:	f004 fd99 	bl	8006870 <HAL_TIM_PWM_ConfigChannel>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001d44:	f7ff fd70 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d48:	4803      	ldr	r0, [pc, #12]	; (8001d58 <MX_TIM3_Init+0xe8>)
 8001d4a:	f000 f829 	bl	8001da0 <HAL_TIM_MspPostInit>

}
 8001d4e:	bf00      	nop
 8001d50:	3738      	adds	r7, #56	; 0x38
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20001ea4 	.word	0x20001ea4
 8001d5c:	40000400 	.word	0x40000400

08001d60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a0a      	ldr	r2, [pc, #40]	; (8001d98 <HAL_TIM_Base_MspInit+0x38>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d10b      	bne.n	8001d8a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d72:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <HAL_TIM_Base_MspInit+0x3c>)
 8001d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d76:	4a09      	ldr	r2, [pc, #36]	; (8001d9c <HAL_TIM_Base_MspInit+0x3c>)
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d7e:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <HAL_TIM_Base_MspInit+0x3c>)
 8001d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d8a:	bf00      	nop
 8001d8c:	3714      	adds	r7, #20
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	40000400 	.word	0x40000400
 8001d9c:	40021000 	.word	0x40021000

08001da0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b088      	sub	sp, #32
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a11      	ldr	r2, [pc, #68]	; (8001e04 <HAL_TIM_MspPostInit+0x64>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d11b      	bne.n	8001dfa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_TIM_MspPostInit+0x68>)
 8001dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc6:	4a10      	ldr	r2, [pc, #64]	; (8001e08 <HAL_TIM_MspPostInit+0x68>)
 8001dc8:	f043 0304 	orr.w	r3, r3, #4
 8001dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <HAL_TIM_MspPostInit+0x68>)
 8001dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dd2:	f003 0304 	and.w	r3, r3, #4
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Red_PWM_Pin;
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dea:	2302      	movs	r3, #2
 8001dec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Red_PWM_GPIO_Port, &GPIO_InitStruct);
 8001dee:	f107 030c 	add.w	r3, r7, #12
 8001df2:	4619      	mov	r1, r3
 8001df4:	4805      	ldr	r0, [pc, #20]	; (8001e0c <HAL_TIM_MspPostInit+0x6c>)
 8001df6:	f001 fe5b 	bl	8003ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001dfa:	bf00      	nop
 8001dfc:	3720      	adds	r7, #32
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40000400 	.word	0x40000400
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	48000800 	.word	0x48000800

08001e10 <uart_send>:

/**
 * @brief Send a string over uart
 * @param[in] message The character array to send
 */
int uart_send (char *buffer, uint16_t length) {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Transmit(&huart5, (uint8_t*)buffer, length, TIMEOUT);
 8001e1c:	887a      	ldrh	r2, [r7, #2]
 8001e1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e22:	6879      	ldr	r1, [r7, #4]
 8001e24:	4803      	ldr	r0, [pc, #12]	; (8001e34 <uart_send+0x24>)
 8001e26:	f005 fc4d 	bl	80076c4 <HAL_UART_Transmit>
 8001e2a:	4603      	mov	r3, r0
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20001ef0 	.word	0x20001ef0

08001e38 <uart_receive>:
/**
 * @brief Recieve a string over uart
 * @param[out] buffer The place to write the recieved string
 * @param[in] length The amount of data to read
 */
int uart_receive (char *buffer, uint16_t length) {
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	460b      	mov	r3, r1
 8001e42:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Receive(&huart5, (uint8_t *)buffer, length, TIMEOUT);
 8001e44:	887a      	ldrh	r2, [r7, #2]
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4a:	6879      	ldr	r1, [r7, #4]
 8001e4c:	4803      	ldr	r0, [pc, #12]	; (8001e5c <uart_receive+0x24>)
 8001e4e:	f005 fccd 	bl	80077ec <HAL_UART_Receive>
 8001e52:	4603      	mov	r3, r0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	20001ef0 	.word	0x20001ef0

08001e60 <uart_println>:

/**
 * @brief send a string line to uart
 * @param[in] string The string to send
 */
int uart_println (char *string) {
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b082      	sub	sp, #8
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
    uart_send(string, strlen(string));
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f7fe f9b1 	bl	80001d0 <strlen>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	4619      	mov	r1, r3
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f7ff ffcb 	bl	8001e10 <uart_send>
    return uart_send("\r\n", 2);
 8001e7a:	2102      	movs	r1, #2
 8001e7c:	4803      	ldr	r0, [pc, #12]	; (8001e8c <uart_println+0x2c>)
 8001e7e:	f7ff ffc7 	bl	8001e10 <uart_send>
 8001e82:	4603      	mov	r3, r0
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	0800c83c 	.word	0x0800c83c

08001e90 <uart_printnum>:

/**
 * @brief Print a number over uart
 */
int uart_printnum (uint32_t num) {
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
    char buf[20];
    sprintf(buf, "%lu", num);
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	4907      	ldr	r1, [pc, #28]	; (8001ebc <uart_printnum+0x2c>)
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f009 fba3 	bl	800b5ec <siprintf>
    return uart_println(buf);
 8001ea6:	f107 030c 	add.w	r3, r7, #12
 8001eaa:	4618      	mov	r0, r3
 8001eac:	f7ff ffd8 	bl	8001e60 <uart_println>
 8001eb0:	4603      	mov	r3, r0
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3720      	adds	r7, #32
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}
 8001eba:	bf00      	nop
 8001ebc:	0800c840 	.word	0x0800c840

08001ec0 <uart_get_clock_input>:

/**
 * @brief Let user input the time
 * @param[out] buffer The buffer to write to
 */
void uart_get_clock_input (char *buffer) {
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b084      	sub	sp, #16
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
    uart_println("Please enter the time in HH:MM:SS format!");
 8001ec8:	4819      	ldr	r0, [pc, #100]	; (8001f30 <uart_get_clock_input+0x70>)
 8001eca:	f7ff ffc9 	bl	8001e60 <uart_println>

    char c;
    uint8_t i = 0;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	73fb      	strb	r3, [r7, #15]
    while (1) {
        uart_receive(&c, 1);
 8001ed2:	f107 030e 	add.w	r3, r7, #14
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ffad 	bl	8001e38 <uart_receive>
        /* as long as i < 8 and c != \r
         * If a char 127 (backspace) is written
         * move cursor back */

        /* check if done */
        if (i == 8) {
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d105      	bne.n	8001ef0 <uart_get_clock_input+0x30>
            if (c == '\r')
 8001ee4:	7bbb      	ldrb	r3, [r7, #14]
 8001ee6:	2b0d      	cmp	r3, #13
 8001ee8:	d01d      	beq.n	8001f26 <uart_get_clock_input+0x66>
                break;
            else if (c != 127)
 8001eea:	7bbb      	ldrb	r3, [r7, #14]
 8001eec:	2b7f      	cmp	r3, #127	; 0x7f
 8001eee:	d118      	bne.n	8001f22 <uart_get_clock_input+0x62>
                continue;
        }

        uart_send(&c, 1);
 8001ef0:	f107 030e 	add.w	r3, r7, #14
 8001ef4:	2101      	movs	r1, #1
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff ff8a 	bl	8001e10 <uart_send>

        /* write to buffer */
        if (c == 127) {
 8001efc:	7bbb      	ldrb	r3, [r7, #14]
 8001efe:	2b7f      	cmp	r3, #127	; 0x7f
 8001f00:	d106      	bne.n	8001f10 <uart_get_clock_input+0x50>
            if (i != 0)
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d0e4      	beq.n	8001ed2 <uart_get_clock_input+0x12>
                --i;
 8001f08:	7bfb      	ldrb	r3, [r7, #15]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	73fb      	strb	r3, [r7, #15]
 8001f0e:	e7e0      	b.n	8001ed2 <uart_get_clock_input+0x12>
        }
        else
            buffer[i++] = c;
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	73fa      	strb	r2, [r7, #15]
 8001f16:	461a      	mov	r2, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	4413      	add	r3, r2
 8001f1c:	7bba      	ldrb	r2, [r7, #14]
 8001f1e:	701a      	strb	r2, [r3, #0]
 8001f20:	e7d7      	b.n	8001ed2 <uart_get_clock_input+0x12>
                continue;
 8001f22:	bf00      	nop
        uart_receive(&c, 1);
 8001f24:	e7d5      	b.n	8001ed2 <uart_get_clock_input+0x12>
                break;
 8001f26:	bf00      	nop
    }
}
 8001f28:	bf00      	nop
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	0800c844 	.word	0x0800c844

08001f34 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001f38:	4b14      	ldr	r3, [pc, #80]	; (8001f8c <MX_UART5_Init+0x58>)
 8001f3a:	4a15      	ldr	r2, [pc, #84]	; (8001f90 <MX_UART5_Init+0x5c>)
 8001f3c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001f3e:	4b13      	ldr	r3, [pc, #76]	; (8001f8c <MX_UART5_Init+0x58>)
 8001f40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f44:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <MX_UART5_Init+0x58>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001f4c:	4b0f      	ldr	r3, [pc, #60]	; (8001f8c <MX_UART5_Init+0x58>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <MX_UART5_Init+0x58>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <MX_UART5_Init+0x58>)
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <MX_UART5_Init+0x58>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <MX_UART5_Init+0x58>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <MX_UART5_Init+0x58>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <MX_UART5_Init+0x58>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f76:	4805      	ldr	r0, [pc, #20]	; (8001f8c <MX_UART5_Init+0x58>)
 8001f78:	f005 fb56 	bl	8007628 <HAL_UART_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001f82:	f7ff fc51 	bl	8001828 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20001ef0 	.word	0x20001ef0
 8001f90:	40005000 	.word	0x40005000

08001f94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b0ac      	sub	sp, #176	; 0xb0
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001fac:	f107 0314 	add.w	r3, r7, #20
 8001fb0:	2288      	movs	r2, #136	; 0x88
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f009 fb11 	bl	800b5dc <memset>
  if(uartHandle->Instance==UART5)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a36      	ldr	r2, [pc, #216]	; (8002098 <HAL_UART_MspInit+0x104>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d164      	bne.n	800208e <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001fc4:	2310      	movs	r3, #16
 8001fc6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fcc:	f107 0314 	add.w	r3, r7, #20
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f002 fdb1 	bl	8004b38 <HAL_RCCEx_PeriphCLKConfig>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fdc:	f7ff fc24 	bl	8001828 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001fe0:	4b2e      	ldr	r3, [pc, #184]	; (800209c <HAL_UART_MspInit+0x108>)
 8001fe2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe4:	4a2d      	ldr	r2, [pc, #180]	; (800209c <HAL_UART_MspInit+0x108>)
 8001fe6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fea:	6593      	str	r3, [r2, #88]	; 0x58
 8001fec:	4b2b      	ldr	r3, [pc, #172]	; (800209c <HAL_UART_MspInit+0x108>)
 8001fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ff8:	4b28      	ldr	r3, [pc, #160]	; (800209c <HAL_UART_MspInit+0x108>)
 8001ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffc:	4a27      	ldr	r2, [pc, #156]	; (800209c <HAL_UART_MspInit+0x108>)
 8001ffe:	f043 0304 	orr.w	r3, r3, #4
 8002002:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002004:	4b25      	ldr	r3, [pc, #148]	; (800209c <HAL_UART_MspInit+0x108>)
 8002006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002008:	f003 0304 	and.w	r3, r3, #4
 800200c:	60fb      	str	r3, [r7, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002010:	4b22      	ldr	r3, [pc, #136]	; (800209c <HAL_UART_MspInit+0x108>)
 8002012:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002014:	4a21      	ldr	r2, [pc, #132]	; (800209c <HAL_UART_MspInit+0x108>)
 8002016:	f043 0308 	orr.w	r3, r3, #8
 800201a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800201c:	4b1f      	ldr	r3, [pc, #124]	; (800209c <HAL_UART_MspInit+0x108>)
 800201e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800202c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203c:	2303      	movs	r3, #3
 800203e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002042:	2308      	movs	r3, #8
 8002044:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002048:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800204c:	4619      	mov	r1, r3
 800204e:	4814      	ldr	r0, [pc, #80]	; (80020a0 <HAL_UART_MspInit+0x10c>)
 8002050:	f001 fd2e 	bl	8003ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002054:	2304      	movs	r3, #4
 8002056:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205a:	2302      	movs	r3, #2
 800205c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002066:	2303      	movs	r3, #3
 8002068:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800206c:	2308      	movs	r3, #8
 800206e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002072:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002076:	4619      	mov	r1, r3
 8002078:	480a      	ldr	r0, [pc, #40]	; (80020a4 <HAL_UART_MspInit+0x110>)
 800207a:	f001 fd19 	bl	8003ab0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2105      	movs	r1, #5
 8002082:	2035      	movs	r0, #53	; 0x35
 8002084:	f001 fc6a 	bl	800395c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002088:	2035      	movs	r0, #53	; 0x35
 800208a:	f001 fc83 	bl	8003994 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 800208e:	bf00      	nop
 8002090:	37b0      	adds	r7, #176	; 0xb0
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40005000 	.word	0x40005000
 800209c:	40021000 	.word	0x40021000
 80020a0:	48000800 	.word	0x48000800
 80020a4:	48000c00 	.word	0x48000c00

080020a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020ac:	f7ff fdce 	bl	8001c4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020b0:	480c      	ldr	r0, [pc, #48]	; (80020e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80020b2:	490d      	ldr	r1, [pc, #52]	; (80020e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020b4:	4a0d      	ldr	r2, [pc, #52]	; (80020ec <LoopForever+0xe>)
  movs r3, #0
 80020b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020b8:	e002      	b.n	80020c0 <LoopCopyDataInit>

080020ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020be:	3304      	adds	r3, #4

080020c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020c4:	d3f9      	bcc.n	80020ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020c6:	4a0a      	ldr	r2, [pc, #40]	; (80020f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020c8:	4c0a      	ldr	r4, [pc, #40]	; (80020f4 <LoopForever+0x16>)
  movs r3, #0
 80020ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020cc:	e001      	b.n	80020d2 <LoopFillZerobss>

080020ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d0:	3204      	adds	r2, #4

080020d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020d4:	d3fb      	bcc.n	80020ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020d6:	f009 fa4f 	bl	800b578 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020da:	f7ff fa65 	bl	80015a8 <main>

080020de <LoopForever>:

LoopForever:
    b LoopForever
 80020de:	e7fe      	b.n	80020de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020e0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020e8:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80020ec:	0800cb08 	.word	0x0800cb08
  ldr r2, =_sbss
 80020f0:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80020f4:	20001fc8 	.word	0x20001fc8

080020f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020f8:	e7fe      	b.n	80020f8 <ADC1_2_IRQHandler>
	...

080020fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002106:	4b0c      	ldr	r3, [pc, #48]	; (8002138 <HAL_Init+0x3c>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a0b      	ldr	r2, [pc, #44]	; (8002138 <HAL_Init+0x3c>)
 800210c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002110:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002112:	2003      	movs	r0, #3
 8002114:	f001 fc17 	bl	8003946 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002118:	200f      	movs	r0, #15
 800211a:	f7ff fce1 	bl	8001ae0 <HAL_InitTick>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	71fb      	strb	r3, [r7, #7]
 8002128:	e001      	b.n	800212e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800212a:	f7ff fcb1 	bl	8001a90 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800212e:	79fb      	ldrb	r3, [r7, #7]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}
 8002138:	40022000 	.word	0x40022000

0800213c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002140:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_IncTick+0x20>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_IncTick+0x24>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4413      	add	r3, r2
 800214c:	4a04      	ldr	r2, [pc, #16]	; (8002160 <HAL_IncTick+0x24>)
 800214e:	6013      	str	r3, [r2, #0]
}
 8002150:	bf00      	nop
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	20000018 	.word	0x20000018
 8002160:	20001f74 	.word	0x20001f74

08002164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return uwTick;
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <HAL_GetTick+0x14>)
 800216a:	681b      	ldr	r3, [r3, #0]
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	20001f74 	.word	0x20001f74

0800217c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002184:	f7ff ffee 	bl	8002164 <HAL_GetTick>
 8002188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002194:	d005      	beq.n	80021a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002196:	4b0a      	ldr	r3, [pc, #40]	; (80021c0 <HAL_Delay+0x44>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	4413      	add	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021a2:	bf00      	nop
 80021a4:	f7ff ffde 	bl	8002164 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	68fa      	ldr	r2, [r7, #12]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d8f7      	bhi.n	80021a4 <HAL_Delay+0x28>
  {
  }
}
 80021b4:	bf00      	nop
 80021b6:	bf00      	nop
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000018 	.word	0x20000018

080021c4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	431a      	orrs	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	609a      	str	r2, [r3, #8]
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	431a      	orrs	r2, r3
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	609a      	str	r2, [r3, #8]
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr

08002210 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
 800221c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002220:	4618      	mov	r0, r3
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800222c:	b480      	push	{r7}
 800222e:	b087      	sub	sp, #28
 8002230:	af00      	add	r7, sp, #0
 8002232:	60f8      	str	r0, [r7, #12]
 8002234:	60b9      	str	r1, [r7, #8]
 8002236:	607a      	str	r2, [r7, #4]
 8002238:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	3360      	adds	r3, #96	; 0x60
 800223e:	461a      	mov	r2, r3
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	4413      	add	r3, r2
 8002246:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	4b08      	ldr	r3, [pc, #32]	; (8002270 <LL_ADC_SetOffset+0x44>)
 800224e:	4013      	ands	r3, r2
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002256:	683a      	ldr	r2, [r7, #0]
 8002258:	430a      	orrs	r2, r1
 800225a:	4313      	orrs	r3, r2
 800225c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002264:	bf00      	nop
 8002266:	371c      	adds	r7, #28
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	03fff000 	.word	0x03fff000

08002274 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	3360      	adds	r3, #96	; 0x60
 8002282:	461a      	mov	r2, r3
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002294:	4618      	mov	r0, r3
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b087      	sub	sp, #28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	3360      	adds	r3, #96	; 0x60
 80022b0:	461a      	mov	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	431a      	orrs	r2, r3
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022ca:	bf00      	nop
 80022cc:	371c      	adds	r7, #28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr

080022d6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80022d6:	b480      	push	{r7}
 80022d8:	b083      	sub	sp, #12
 80022da:	af00      	add	r7, sp, #0
 80022dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d101      	bne.n	80022ee <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	3330      	adds	r3, #48	; 0x30
 800230c:	461a      	mov	r2, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	0a1b      	lsrs	r3, r3, #8
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	f003 030c 	and.w	r3, r3, #12
 8002318:	4413      	add	r3, r2
 800231a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	681a      	ldr	r2, [r3, #0]
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f003 031f 	and.w	r3, r3, #31
 8002326:	211f      	movs	r1, #31
 8002328:	fa01 f303 	lsl.w	r3, r1, r3
 800232c:	43db      	mvns	r3, r3
 800232e:	401a      	ands	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	0e9b      	lsrs	r3, r3, #26
 8002334:	f003 011f 	and.w	r1, r3, #31
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	f003 031f 	and.w	r3, r3, #31
 800233e:	fa01 f303 	lsl.w	r3, r1, r3
 8002342:	431a      	orrs	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002348:	bf00      	nop
 800234a:	371c      	adds	r7, #28
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002354:	b480      	push	{r7}
 8002356:	b087      	sub	sp, #28
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	3314      	adds	r3, #20
 8002364:	461a      	mov	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	0e5b      	lsrs	r3, r3, #25
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	4413      	add	r3, r2
 8002372:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	0d1b      	lsrs	r3, r3, #20
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	2107      	movs	r1, #7
 8002382:	fa01 f303 	lsl.w	r3, r1, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	401a      	ands	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	0d1b      	lsrs	r3, r3, #20
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	431a      	orrs	r2, r3
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800239e:	bf00      	nop
 80023a0:	371c      	adds	r7, #28
 80023a2:	46bd      	mov	sp, r7
 80023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a8:	4770      	bx	lr
	...

080023ac <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c4:	43db      	mvns	r3, r3
 80023c6:	401a      	ands	r2, r3
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	f003 0318 	and.w	r3, r3, #24
 80023ce:	4908      	ldr	r1, [pc, #32]	; (80023f0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023d0:	40d9      	lsrs	r1, r3
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	400b      	ands	r3, r1
 80023d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023da:	431a      	orrs	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023e2:	bf00      	nop
 80023e4:	3714      	adds	r7, #20
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	0007ffff 	.word	0x0007ffff

080023f4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 031f 	and.w	r3, r3, #31
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800243c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6093      	str	r3, [r2, #8]
}
 8002444:	bf00      	nop
 8002446:	370c      	adds	r7, #12
 8002448:	46bd      	mov	sp, r7
 800244a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244e:	4770      	bx	lr

08002450 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002464:	d101      	bne.n	800246a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800246a:	2300      	movs	r3, #0
}
 800246c:	4618      	mov	r0, r3
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002488:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800248c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024b4:	d101      	bne.n	80024ba <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024dc:	f043 0201 	orr.w	r2, r3, #1
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002500:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002504:	f043 0202 	orr.w	r2, r3, #2
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800250c:	bf00      	nop
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 0301 	and.w	r3, r3, #1
 8002528:	2b01      	cmp	r3, #1
 800252a:	d101      	bne.n	8002530 <LL_ADC_IsEnabled+0x18>
 800252c:	2301      	movs	r3, #1
 800252e:	e000      	b.n	8002532 <LL_ADC_IsEnabled+0x1a>
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800253e:	b480      	push	{r7}
 8002540:	b083      	sub	sp, #12
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b02      	cmp	r3, #2
 8002550:	d101      	bne.n	8002556 <LL_ADC_IsDisableOngoing+0x18>
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <LL_ADC_IsDisableOngoing+0x1a>
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002574:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002578:	f043 0204 	orr.w	r2, r3, #4
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002580:	bf00      	nop
 8002582:	370c      	adds	r7, #12
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800258c:	b480      	push	{r7}
 800258e:	b083      	sub	sp, #12
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f003 0304 	and.w	r3, r3, #4
 800259c:	2b04      	cmp	r3, #4
 800259e:	d101      	bne.n	80025a4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025a0:	2301      	movs	r3, #1
 80025a2:	e000      	b.n	80025a6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr

080025b2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025b2:	b480      	push	{r7}
 80025b4:	b083      	sub	sp, #12
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d101      	bne.n	80025ca <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025c6:	2301      	movs	r3, #1
 80025c8:	e000      	b.n	80025cc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025d8:	b590      	push	{r4, r7, lr}
 80025da:	b089      	sub	sp, #36	; 0x24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e0:	2300      	movs	r3, #0
 80025e2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025e4:	2300      	movs	r3, #0
 80025e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e136      	b.n	8002860 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d109      	bne.n	8002614 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f7fe fc1d 	bl	8000e40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff ff19 	bl	8002450 <LL_ADC_IsDeepPowerDownEnabled>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d004      	beq.n	800262e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4618      	mov	r0, r3
 800262a:	f7ff feff 	bl	800242c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff ff34 	bl	80024a0 <LL_ADC_IsInternalRegulatorEnabled>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d115      	bne.n	800266a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f7ff ff18 	bl	8002478 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002648:	4b87      	ldr	r3, [pc, #540]	; (8002868 <HAL_ADC_Init+0x290>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	099b      	lsrs	r3, r3, #6
 800264e:	4a87      	ldr	r2, [pc, #540]	; (800286c <HAL_ADC_Init+0x294>)
 8002650:	fba2 2303 	umull	r2, r3, r2, r3
 8002654:	099b      	lsrs	r3, r3, #6
 8002656:	3301      	adds	r3, #1
 8002658:	005b      	lsls	r3, r3, #1
 800265a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800265c:	e002      	b.n	8002664 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	3b01      	subs	r3, #1
 8002662:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f9      	bne.n	800265e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4618      	mov	r0, r3
 8002670:	f7ff ff16 	bl	80024a0 <LL_ADC_IsInternalRegulatorEnabled>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10d      	bne.n	8002696 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267e:	f043 0210 	orr.w	r2, r3, #16
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	f043 0201 	orr.w	r2, r3, #1
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7ff ff76 	bl	800258c <LL_ADC_REG_IsConversionOngoing>
 80026a0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a6:	f003 0310 	and.w	r3, r3, #16
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f040 80cf 	bne.w	800284e <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	f040 80cb 	bne.w	800284e <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026bc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80026c0:	f043 0202 	orr.w	r2, r3, #2
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff ff23 	bl	8002518 <LL_ADC_IsEnabled>
 80026d2:	4603      	mov	r3, r0
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d115      	bne.n	8002704 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026d8:	4865      	ldr	r0, [pc, #404]	; (8002870 <HAL_ADC_Init+0x298>)
 80026da:	f7ff ff1d 	bl	8002518 <LL_ADC_IsEnabled>
 80026de:	4604      	mov	r4, r0
 80026e0:	4864      	ldr	r0, [pc, #400]	; (8002874 <HAL_ADC_Init+0x29c>)
 80026e2:	f7ff ff19 	bl	8002518 <LL_ADC_IsEnabled>
 80026e6:	4603      	mov	r3, r0
 80026e8:	431c      	orrs	r4, r3
 80026ea:	4863      	ldr	r0, [pc, #396]	; (8002878 <HAL_ADC_Init+0x2a0>)
 80026ec:	f7ff ff14 	bl	8002518 <LL_ADC_IsEnabled>
 80026f0:	4603      	mov	r3, r0
 80026f2:	4323      	orrs	r3, r4
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d105      	bne.n	8002704 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	4619      	mov	r1, r3
 80026fe:	485f      	ldr	r0, [pc, #380]	; (800287c <HAL_ADC_Init+0x2a4>)
 8002700:	f7ff fd60 	bl	80021c4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	7e5b      	ldrb	r3, [r3, #25]
 8002708:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800270e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002714:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800271a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002722:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d106      	bne.n	8002740 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002736:	3b01      	subs	r3, #1
 8002738:	045b      	lsls	r3, r3, #17
 800273a:	69ba      	ldr	r2, [r7, #24]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002744:	2b00      	cmp	r3, #0
 8002746:	d009      	beq.n	800275c <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800274c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002754:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4313      	orrs	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68da      	ldr	r2, [r3, #12]
 8002762:	4b47      	ldr	r3, [pc, #284]	; (8002880 <HAL_ADC_Init+0x2a8>)
 8002764:	4013      	ands	r3, r2
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	69b9      	ldr	r1, [r7, #24]
 800276c:	430b      	orrs	r3, r1
 800276e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4618      	mov	r0, r3
 8002776:	f7ff ff09 	bl	800258c <LL_ADC_REG_IsConversionOngoing>
 800277a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7ff ff16 	bl	80025b2 <LL_ADC_INJ_IsConversionOngoing>
 8002786:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d13d      	bne.n	800280a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d13a      	bne.n	800280a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002798:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80027a0:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027b0:	f023 0302 	bic.w	r3, r3, #2
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	6812      	ldr	r2, [r2, #0]
 80027b8:	69b9      	ldr	r1, [r7, #24]
 80027ba:	430b      	orrs	r3, r1
 80027bc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d118      	bne.n	80027fa <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027d2:	f023 0304 	bic.w	r3, r3, #4
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027de:	4311      	orrs	r1, r2
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027e4:	4311      	orrs	r1, r2
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027ea:	430a      	orrs	r2, r1
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f042 0201 	orr.w	r2, r2, #1
 80027f6:	611a      	str	r2, [r3, #16]
 80027f8:	e007      	b.n	800280a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	691a      	ldr	r2, [r3, #16]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0201 	bic.w	r2, r2, #1
 8002808:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d10c      	bne.n	800282c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	f023 010f 	bic.w	r1, r3, #15
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	1e5a      	subs	r2, r3, #1
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	631a      	str	r2, [r3, #48]	; 0x30
 800282a:	e007      	b.n	800283c <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f022 020f 	bic.w	r2, r2, #15
 800283a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002840:	f023 0303 	bic.w	r3, r3, #3
 8002844:	f043 0201 	orr.w	r2, r3, #1
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	655a      	str	r2, [r3, #84]	; 0x54
 800284c:	e007      	b.n	800285e <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002852:	f043 0210 	orr.w	r2, r3, #16
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800285e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002860:	4618      	mov	r0, r3
 8002862:	3724      	adds	r7, #36	; 0x24
 8002864:	46bd      	mov	sp, r7
 8002866:	bd90      	pop	{r4, r7, pc}
 8002868:	20000010 	.word	0x20000010
 800286c:	053e2d63 	.word	0x053e2d63
 8002870:	50040000 	.word	0x50040000
 8002874:	50040100 	.word	0x50040100
 8002878:	50040200 	.word	0x50040200
 800287c:	50040300 	.word	0x50040300
 8002880:	fff0c007 	.word	0xfff0c007

08002884 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800288c:	4857      	ldr	r0, [pc, #348]	; (80029ec <HAL_ADC_Start+0x168>)
 800288e:	f7ff fdb1 	bl	80023f4 <LL_ADC_GetMultimode>
 8002892:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff fe77 	bl	800258c <LL_ADC_REG_IsConversionOngoing>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f040 809c 	bne.w	80029de <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d101      	bne.n	80028b4 <HAL_ADC_Start+0x30>
 80028b0:	2302      	movs	r3, #2
 80028b2:	e097      	b.n	80029e4 <HAL_ADC_Start+0x160>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028bc:	6878      	ldr	r0, [r7, #4]
 80028be:	f000 fd71 	bl	80033a4 <ADC_Enable>
 80028c2:	4603      	mov	r3, r0
 80028c4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028c6:	7dfb      	ldrb	r3, [r7, #23]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f040 8083 	bne.w	80029d4 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028d6:	f023 0301 	bic.w	r3, r3, #1
 80028da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a42      	ldr	r2, [pc, #264]	; (80029f0 <HAL_ADC_Start+0x16c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d002      	beq.n	80028f2 <HAL_ADC_Start+0x6e>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	e000      	b.n	80028f4 <HAL_ADC_Start+0x70>
 80028f2:	4b40      	ldr	r3, [pc, #256]	; (80029f4 <HAL_ADC_Start+0x170>)
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d002      	beq.n	8002902 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d105      	bne.n	800290e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002906:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800291a:	d106      	bne.n	800292a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002920:	f023 0206 	bic.w	r2, r3, #6
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	659a      	str	r2, [r3, #88]	; 0x58
 8002928:	e002      	b.n	8002930 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	221c      	movs	r2, #28
 8002936:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a2a      	ldr	r2, [pc, #168]	; (80029f0 <HAL_ADC_Start+0x16c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d002      	beq.n	8002950 <HAL_ADC_Start+0xcc>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	e000      	b.n	8002952 <HAL_ADC_Start+0xce>
 8002950:	4b28      	ldr	r3, [pc, #160]	; (80029f4 <HAL_ADC_Start+0x170>)
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	6812      	ldr	r2, [r2, #0]
 8002956:	4293      	cmp	r3, r2
 8002958:	d008      	beq.n	800296c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d005      	beq.n	800296c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	2b05      	cmp	r3, #5
 8002964:	d002      	beq.n	800296c <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	2b09      	cmp	r3, #9
 800296a:	d114      	bne.n	8002996 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	68db      	ldr	r3, [r3, #12]
 8002972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d007      	beq.n	800298a <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002982:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fde8 	bl	8002564 <LL_ADC_REG_StartConversion>
 8002994:	e025      	b.n	80029e2 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a12      	ldr	r2, [pc, #72]	; (80029f0 <HAL_ADC_Start+0x16c>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d002      	beq.n	80029b2 <HAL_ADC_Start+0x12e>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	e000      	b.n	80029b4 <HAL_ADC_Start+0x130>
 80029b2:	4b10      	ldr	r3, [pc, #64]	; (80029f4 <HAL_ADC_Start+0x170>)
 80029b4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00f      	beq.n	80029e2 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	655a      	str	r2, [r3, #84]	; 0x54
 80029d2:	e006      	b.n	80029e2 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80029dc:	e001      	b.n	80029e2 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029de:	2302      	movs	r3, #2
 80029e0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80029e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3718      	adds	r7, #24
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}
 80029ec:	50040300 	.word	0x50040300
 80029f0:	50040100 	.word	0x50040100
 80029f4:	50040000 	.word	0x50040000

080029f8 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b088      	sub	sp, #32
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002a02:	4866      	ldr	r0, [pc, #408]	; (8002b9c <HAL_ADC_PollForConversion+0x1a4>)
 8002a04:	f7ff fcf6 	bl	80023f4 <LL_ADC_GetMultimode>
 8002a08:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	2b08      	cmp	r3, #8
 8002a10:	d102      	bne.n	8002a18 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002a12:	2308      	movs	r3, #8
 8002a14:	61fb      	str	r3, [r7, #28]
 8002a16:	e02a      	b.n	8002a6e <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d005      	beq.n	8002a2a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	2b05      	cmp	r3, #5
 8002a22:	d002      	beq.n	8002a2a <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a24:	697b      	ldr	r3, [r7, #20]
 8002a26:	2b09      	cmp	r3, #9
 8002a28:	d111      	bne.n	8002a4e <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d007      	beq.n	8002a48 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3c:	f043 0220 	orr.w	r2, r3, #32
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0a4      	b.n	8002b92 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a48:	2304      	movs	r3, #4
 8002a4a:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a4c:	e00f      	b.n	8002a6e <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a4e:	4853      	ldr	r0, [pc, #332]	; (8002b9c <HAL_ADC_PollForConversion+0x1a4>)
 8002a50:	f7ff fcde 	bl	8002410 <LL_ADC_GetMultiDMATransfer>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d007      	beq.n	8002a6a <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5e:	f043 0220 	orr.w	r2, r3, #32
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e093      	b.n	8002b92 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a6a:	2304      	movs	r3, #4
 8002a6c:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a6e:	f7ff fb79 	bl	8002164 <HAL_GetTick>
 8002a72:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a74:	e021      	b.n	8002aba <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a7c:	d01d      	beq.n	8002aba <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a7e:	f7ff fb71 	bl	8002164 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	683a      	ldr	r2, [r7, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d302      	bcc.n	8002a94 <HAL_ADC_PollForConversion+0x9c>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d112      	bne.n	8002aba <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10b      	bne.n	8002aba <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aa6:	f043 0204 	orr.w	r2, r3, #4
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e06b      	b.n	8002b92 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d0d6      	beq.n	8002a76 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002acc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f7ff fbfc 	bl	80022d6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01c      	beq.n	8002b1e <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	7e5b      	ldrb	r3, [r3, #25]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d118      	bne.n	8002b1e <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0308 	and.w	r3, r3, #8
 8002af6:	2b08      	cmp	r3, #8
 8002af8:	d111      	bne.n	8002b1e <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b0a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d105      	bne.n	8002b1e <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b16:	f043 0201 	orr.w	r2, r3, #1
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a1f      	ldr	r2, [pc, #124]	; (8002ba0 <HAL_ADC_PollForConversion+0x1a8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d002      	beq.n	8002b2e <HAL_ADC_PollForConversion+0x136>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	e000      	b.n	8002b30 <HAL_ADC_PollForConversion+0x138>
 8002b2e:	4b1d      	ldr	r3, [pc, #116]	; (8002ba4 <HAL_ADC_PollForConversion+0x1ac>)
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	6812      	ldr	r2, [r2, #0]
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d008      	beq.n	8002b4a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d005      	beq.n	8002b4a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2b05      	cmp	r3, #5
 8002b42:	d002      	beq.n	8002b4a <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	2b09      	cmp	r3, #9
 8002b48:	d104      	bne.n	8002b54 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	68db      	ldr	r3, [r3, #12]
 8002b50:	61bb      	str	r3, [r7, #24]
 8002b52:	e00c      	b.n	8002b6e <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a11      	ldr	r2, [pc, #68]	; (8002ba0 <HAL_ADC_PollForConversion+0x1a8>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d002      	beq.n	8002b64 <HAL_ADC_PollForConversion+0x16c>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	e000      	b.n	8002b66 <HAL_ADC_PollForConversion+0x16e>
 8002b64:	4b0f      	ldr	r3, [pc, #60]	; (8002ba4 <HAL_ADC_PollForConversion+0x1ac>)
 8002b66:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	68db      	ldr	r3, [r3, #12]
 8002b6c:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d104      	bne.n	8002b7e <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2208      	movs	r2, #8
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	e008      	b.n	8002b90 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d103      	bne.n	8002b90 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	220c      	movs	r2, #12
 8002b8e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3720      	adds	r7, #32
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	50040300 	.word	0x50040300
 8002ba0:	50040100 	.word	0x50040100
 8002ba4:	50040000 	.word	0x50040000

08002ba8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	370c      	adds	r7, #12
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr
	...

08002bc4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b0b6      	sub	sp, #216	; 0xd8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d101      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x22>
 8002be2:	2302      	movs	r3, #2
 8002be4:	e3c7      	b.n	8003376 <HAL_ADC_ConfigChannel+0x7b2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fcca 	bl	800258c <LL_ADC_REG_IsConversionOngoing>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	f040 83a8 	bne.w	8003350 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	2b05      	cmp	r3, #5
 8002c06:	d824      	bhi.n	8002c52 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	3b02      	subs	r3, #2
 8002c0e:	2b03      	cmp	r3, #3
 8002c10:	d81b      	bhi.n	8002c4a <HAL_ADC_ConfigChannel+0x86>
 8002c12:	a201      	add	r2, pc, #4	; (adr r2, 8002c18 <HAL_ADC_ConfigChannel+0x54>)
 8002c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c18:	08002c29 	.word	0x08002c29
 8002c1c:	08002c31 	.word	0x08002c31
 8002c20:	08002c39 	.word	0x08002c39
 8002c24:	08002c41 	.word	0x08002c41
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	220c      	movs	r2, #12
 8002c2c:	605a      	str	r2, [r3, #4]
          break;
 8002c2e:	e011      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	2212      	movs	r2, #18
 8002c34:	605a      	str	r2, [r3, #4]
          break;
 8002c36:	e00d      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2218      	movs	r2, #24
 8002c3c:	605a      	str	r2, [r3, #4]
          break;
 8002c3e:	e009      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c46:	605a      	str	r2, [r3, #4]
          break;
 8002c48:	e004      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2206      	movs	r2, #6
 8002c4e:	605a      	str	r2, [r3, #4]
          break;
 8002c50:	e000      	b.n	8002c54 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002c52:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	6859      	ldr	r1, [r3, #4]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	461a      	mov	r2, r3
 8002c62:	f7ff fb4b 	bl	80022fc <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f7ff fc8e 	bl	800258c <LL_ADC_REG_IsConversionOngoing>
 8002c70:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7ff fc9a 	bl	80025b2 <LL_ADC_INJ_IsConversionOngoing>
 8002c7e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c82:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	f040 81a6 	bne.w	8002fd8 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f040 81a1 	bne.w	8002fd8 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	6819      	ldr	r1, [r3, #0]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	f7ff fb56 	bl	8002354 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	695a      	ldr	r2, [r3, #20]
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	08db      	lsrs	r3, r3, #3
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d00a      	beq.n	8002ce0 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	6919      	ldr	r1, [r3, #16]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cda:	f7ff faa7 	bl	800222c <LL_ADC_SetOffset>
 8002cde:	e17b      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff fac4 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002cec:	4603      	mov	r3, r0
 8002cee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10a      	bne.n	8002d0c <HAL_ADC_ConfigChannel+0x148>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fab9 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002d02:	4603      	mov	r3, r0
 8002d04:	0e9b      	lsrs	r3, r3, #26
 8002d06:	f003 021f 	and.w	r2, r3, #31
 8002d0a:	e01e      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x186>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2100      	movs	r1, #0
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff faae 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d22:	fa93 f3a3 	rbit	r3, r3
 8002d26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d32:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002d3a:	2320      	movs	r3, #32
 8002d3c:	e004      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002d3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d42:	fab3 f383 	clz	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d105      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x19e>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	0e9b      	lsrs	r3, r3, #26
 8002d5c:	f003 031f 	and.w	r3, r3, #31
 8002d60:	e018      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x1d0>
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d6e:	fa93 f3a3 	rbit	r3, r3
 8002d72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002d7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d101      	bne.n	8002d8a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002d86:	2320      	movs	r3, #32
 8002d88:	e004      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002d8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d8e:	fab3 f383 	clz	r3, r3
 8002d92:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d106      	bne.n	8002da6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	2100      	movs	r1, #0
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7ff fa7d 	bl	80022a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2101      	movs	r1, #1
 8002dac:	4618      	mov	r0, r3
 8002dae:	f7ff fa61 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002db2:	4603      	mov	r3, r0
 8002db4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10a      	bne.n	8002dd2 <HAL_ADC_ConfigChannel+0x20e>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff fa56 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	0e9b      	lsrs	r3, r3, #26
 8002dcc:	f003 021f 	and.w	r2, r3, #31
 8002dd0:	e01e      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x24c>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7ff fa4b 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002dde:	4603      	mov	r3, r0
 8002de0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002de4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002df0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002df4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002df8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002e00:	2320      	movs	r3, #32
 8002e02:	e004      	b.n	8002e0e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002e04:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002e08:	fab3 f383 	clz	r3, r3
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d105      	bne.n	8002e28 <HAL_ADC_ConfigChannel+0x264>
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	0e9b      	lsrs	r3, r3, #26
 8002e22:	f003 031f 	and.w	r3, r3, #31
 8002e26:	e018      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x296>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e34:	fa93 f3a3 	rbit	r3, r3
 8002e38:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002e3c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002e44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002e4c:	2320      	movs	r3, #32
 8002e4e:	e004      	b.n	8002e5a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002e50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e54:	fab3 f383 	clz	r3, r3
 8002e58:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d106      	bne.n	8002e6c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2200      	movs	r2, #0
 8002e64:	2101      	movs	r1, #1
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff fa1a 	bl	80022a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2102      	movs	r1, #2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff f9fe 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d10a      	bne.n	8002e98 <HAL_ADC_ConfigChannel+0x2d4>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2102      	movs	r1, #2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff f9f3 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	0e9b      	lsrs	r3, r3, #26
 8002e92:	f003 021f 	and.w	r2, r3, #31
 8002e96:	e01e      	b.n	8002ed6 <HAL_ADC_ConfigChannel+0x312>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2102      	movs	r1, #2
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7ff f9e8 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002eb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002eba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002ebe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d101      	bne.n	8002eca <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002ec6:	2320      	movs	r3, #32
 8002ec8:	e004      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002eca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d105      	bne.n	8002eee <HAL_ADC_ConfigChannel+0x32a>
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	0e9b      	lsrs	r3, r3, #26
 8002ee8:	f003 031f 	and.w	r3, r3, #31
 8002eec:	e016      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x358>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002f00:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f02:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002f06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002f0e:	2320      	movs	r3, #32
 8002f10:	e004      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002f12:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d106      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2200      	movs	r2, #0
 8002f26:	2102      	movs	r1, #2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff f9b9 	bl	80022a0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	2103      	movs	r1, #3
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff f99d 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d10a      	bne.n	8002f5a <HAL_ADC_ConfigChannel+0x396>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2103      	movs	r1, #3
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff f992 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002f50:	4603      	mov	r3, r0
 8002f52:	0e9b      	lsrs	r3, r3, #26
 8002f54:	f003 021f 	and.w	r2, r3, #31
 8002f58:	e017      	b.n	8002f8a <HAL_ADC_ConfigChannel+0x3c6>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2103      	movs	r1, #3
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff f987 	bl	8002274 <LL_ADC_GetOffsetChannel>
 8002f66:	4603      	mov	r3, r0
 8002f68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f6c:	fa93 f3a3 	rbit	r3, r3
 8002f70:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002f72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f74:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002f76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002f7c:	2320      	movs	r3, #32
 8002f7e:	e003      	b.n	8002f88 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002f80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f82:	fab3 f383 	clz	r3, r3
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d105      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x3de>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	0e9b      	lsrs	r3, r3, #26
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	e011      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x402>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fa8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002faa:	fa93 f3a3 	rbit	r3, r3
 8002fae:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002fb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fb2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002fba:	2320      	movs	r3, #32
 8002fbc:	e003      	b.n	8002fc6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002fbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fc0:	fab3 f383 	clz	r3, r3
 8002fc4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d106      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	2103      	movs	r1, #3
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff f964 	bl	80022a0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7ff fa9b 	bl	8002518 <LL_ADC_IsEnabled>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f040 813f 	bne.w	8003268 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6818      	ldr	r0, [r3, #0]
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	6819      	ldr	r1, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	f7ff f9d8 	bl	80023ac <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	4a8e      	ldr	r2, [pc, #568]	; (800323c <HAL_ADC_ConfigChannel+0x678>)
 8003002:	4293      	cmp	r3, r2
 8003004:	f040 8130 	bne.w	8003268 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003014:	2b00      	cmp	r3, #0
 8003016:	d10b      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x46c>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	0e9b      	lsrs	r3, r3, #26
 800301e:	3301      	adds	r3, #1
 8003020:	f003 031f 	and.w	r3, r3, #31
 8003024:	2b09      	cmp	r3, #9
 8003026:	bf94      	ite	ls
 8003028:	2301      	movls	r3, #1
 800302a:	2300      	movhi	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	e019      	b.n	8003064 <HAL_ADC_ConfigChannel+0x4a0>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003036:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003038:	fa93 f3a3 	rbit	r3, r3
 800303c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800303e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003040:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003048:	2320      	movs	r3, #32
 800304a:	e003      	b.n	8003054 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800304c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	3301      	adds	r3, #1
 8003056:	f003 031f 	and.w	r3, r3, #31
 800305a:	2b09      	cmp	r3, #9
 800305c:	bf94      	ite	ls
 800305e:	2301      	movls	r3, #1
 8003060:	2300      	movhi	r3, #0
 8003062:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003064:	2b00      	cmp	r3, #0
 8003066:	d079      	beq.n	800315c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003070:	2b00      	cmp	r3, #0
 8003072:	d107      	bne.n	8003084 <HAL_ADC_ConfigChannel+0x4c0>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	0e9b      	lsrs	r3, r3, #26
 800307a:	3301      	adds	r3, #1
 800307c:	069b      	lsls	r3, r3, #26
 800307e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003082:	e015      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x4ec>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800308c:	fa93 f3a3 	rbit	r3, r3
 8003090:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003094:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003098:	2b00      	cmp	r3, #0
 800309a:	d101      	bne.n	80030a0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 800309c:	2320      	movs	r3, #32
 800309e:	e003      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80030a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030a2:	fab3 f383 	clz	r3, r3
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	069b      	lsls	r3, r3, #26
 80030ac:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d109      	bne.n	80030d0 <HAL_ADC_ConfigChannel+0x50c>
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	0e9b      	lsrs	r3, r3, #26
 80030c2:	3301      	adds	r3, #1
 80030c4:	f003 031f 	and.w	r3, r3, #31
 80030c8:	2101      	movs	r1, #1
 80030ca:	fa01 f303 	lsl.w	r3, r1, r3
 80030ce:	e017      	b.n	8003100 <HAL_ADC_ConfigChannel+0x53c>
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030d8:	fa93 f3a3 	rbit	r3, r3
 80030dc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80030de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030e0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80030e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d101      	bne.n	80030ec <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80030e8:	2320      	movs	r3, #32
 80030ea:	e003      	b.n	80030f4 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80030ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ee:	fab3 f383 	clz	r3, r3
 80030f2:	b2db      	uxtb	r3, r3
 80030f4:	3301      	adds	r3, #1
 80030f6:	f003 031f 	and.w	r3, r3, #31
 80030fa:	2101      	movs	r1, #1
 80030fc:	fa01 f303 	lsl.w	r3, r1, r3
 8003100:	ea42 0103 	orr.w	r1, r2, r3
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800310c:	2b00      	cmp	r3, #0
 800310e:	d10a      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x562>
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	0e9b      	lsrs	r3, r3, #26
 8003116:	3301      	adds	r3, #1
 8003118:	f003 021f 	and.w	r2, r3, #31
 800311c:	4613      	mov	r3, r2
 800311e:	005b      	lsls	r3, r3, #1
 8003120:	4413      	add	r3, r2
 8003122:	051b      	lsls	r3, r3, #20
 8003124:	e018      	b.n	8003158 <HAL_ADC_ConfigChannel+0x594>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800312e:	fa93 f3a3 	rbit	r3, r3
 8003132:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003136:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003138:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800313e:	2320      	movs	r3, #32
 8003140:	e003      	b.n	800314a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003142:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003144:	fab3 f383 	clz	r3, r3
 8003148:	b2db      	uxtb	r3, r3
 800314a:	3301      	adds	r3, #1
 800314c:	f003 021f 	and.w	r2, r3, #31
 8003150:	4613      	mov	r3, r2
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	4413      	add	r3, r2
 8003156:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003158:	430b      	orrs	r3, r1
 800315a:	e080      	b.n	800325e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003164:	2b00      	cmp	r3, #0
 8003166:	d107      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x5b4>
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	0e9b      	lsrs	r3, r3, #26
 800316e:	3301      	adds	r3, #1
 8003170:	069b      	lsls	r3, r3, #26
 8003172:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003176:	e015      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x5e0>
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003180:	fa93 f3a3 	rbit	r3, r3
 8003184:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003188:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318c:	2b00      	cmp	r3, #0
 800318e:	d101      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003190:	2320      	movs	r3, #32
 8003192:	e003      	b.n	800319c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003196:	fab3 f383 	clz	r3, r3
 800319a:	b2db      	uxtb	r3, r3
 800319c:	3301      	adds	r3, #1
 800319e:	069b      	lsls	r3, r3, #26
 80031a0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d109      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x600>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	0e9b      	lsrs	r3, r3, #26
 80031b6:	3301      	adds	r3, #1
 80031b8:	f003 031f 	and.w	r3, r3, #31
 80031bc:	2101      	movs	r1, #1
 80031be:	fa01 f303 	lsl.w	r3, r1, r3
 80031c2:	e017      	b.n	80031f4 <HAL_ADC_ConfigChannel+0x630>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	fa93 f3a3 	rbit	r3, r3
 80031d0:	61fb      	str	r3, [r7, #28]
  return result;
 80031d2:	69fb      	ldr	r3, [r7, #28]
 80031d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80031d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d101      	bne.n	80031e0 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80031dc:	2320      	movs	r3, #32
 80031de:	e003      	b.n	80031e8 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	fab3 f383 	clz	r3, r3
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	3301      	adds	r3, #1
 80031ea:	f003 031f 	and.w	r3, r3, #31
 80031ee:	2101      	movs	r1, #1
 80031f0:	fa01 f303 	lsl.w	r3, r1, r3
 80031f4:	ea42 0103 	orr.w	r1, r2, r3
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10d      	bne.n	8003220 <HAL_ADC_ConfigChannel+0x65c>
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	0e9b      	lsrs	r3, r3, #26
 800320a:	3301      	adds	r3, #1
 800320c:	f003 021f 	and.w	r2, r3, #31
 8003210:	4613      	mov	r3, r2
 8003212:	005b      	lsls	r3, r3, #1
 8003214:	4413      	add	r3, r2
 8003216:	3b1e      	subs	r3, #30
 8003218:	051b      	lsls	r3, r3, #20
 800321a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800321e:	e01d      	b.n	800325c <HAL_ADC_ConfigChannel+0x698>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	fa93 f3a3 	rbit	r3, r3
 800322c:	613b      	str	r3, [r7, #16]
  return result;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d103      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003238:	2320      	movs	r3, #32
 800323a:	e005      	b.n	8003248 <HAL_ADC_ConfigChannel+0x684>
 800323c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	fab3 f383 	clz	r3, r3
 8003246:	b2db      	uxtb	r3, r3
 8003248:	3301      	adds	r3, #1
 800324a:	f003 021f 	and.w	r2, r3, #31
 800324e:	4613      	mov	r3, r2
 8003250:	005b      	lsls	r3, r3, #1
 8003252:	4413      	add	r3, r2
 8003254:	3b1e      	subs	r3, #30
 8003256:	051b      	lsls	r3, r3, #20
 8003258:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800325c:	430b      	orrs	r3, r1
 800325e:	683a      	ldr	r2, [r7, #0]
 8003260:	6892      	ldr	r2, [r2, #8]
 8003262:	4619      	mov	r1, r3
 8003264:	f7ff f876 	bl	8002354 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	4b44      	ldr	r3, [pc, #272]	; (8003380 <HAL_ADC_ConfigChannel+0x7bc>)
 800326e:	4013      	ands	r3, r2
 8003270:	2b00      	cmp	r3, #0
 8003272:	d07a      	beq.n	800336a <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003274:	4843      	ldr	r0, [pc, #268]	; (8003384 <HAL_ADC_ConfigChannel+0x7c0>)
 8003276:	f7fe ffcb 	bl	8002210 <LL_ADC_GetCommonPathInternalCh>
 800327a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a41      	ldr	r2, [pc, #260]	; (8003388 <HAL_ADC_ConfigChannel+0x7c4>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d12c      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003288:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800328c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d126      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a3c      	ldr	r2, [pc, #240]	; (800338c <HAL_ADC_ConfigChannel+0x7c8>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d004      	beq.n	80032a8 <HAL_ADC_ConfigChannel+0x6e4>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a3b      	ldr	r2, [pc, #236]	; (8003390 <HAL_ADC_ConfigChannel+0x7cc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d15d      	bne.n	8003364 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032b0:	4619      	mov	r1, r3
 80032b2:	4834      	ldr	r0, [pc, #208]	; (8003384 <HAL_ADC_ConfigChannel+0x7c0>)
 80032b4:	f7fe ff99 	bl	80021ea <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032b8:	4b36      	ldr	r3, [pc, #216]	; (8003394 <HAL_ADC_ConfigChannel+0x7d0>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	099b      	lsrs	r3, r3, #6
 80032be:	4a36      	ldr	r2, [pc, #216]	; (8003398 <HAL_ADC_ConfigChannel+0x7d4>)
 80032c0:	fba2 2303 	umull	r2, r3, r2, r3
 80032c4:	099b      	lsrs	r3, r3, #6
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	4613      	mov	r3, r2
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	4413      	add	r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032d2:	e002      	b.n	80032da <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	3b01      	subs	r3, #1
 80032d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f9      	bne.n	80032d4 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032e0:	e040      	b.n	8003364 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a2d      	ldr	r2, [pc, #180]	; (800339c <HAL_ADC_ConfigChannel+0x7d8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d118      	bne.n	800331e <HAL_ADC_ConfigChannel+0x75a>
 80032ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d112      	bne.n	800331e <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a23      	ldr	r2, [pc, #140]	; (800338c <HAL_ADC_ConfigChannel+0x7c8>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d004      	beq.n	800330c <HAL_ADC_ConfigChannel+0x748>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a22      	ldr	r2, [pc, #136]	; (8003390 <HAL_ADC_ConfigChannel+0x7cc>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d12d      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800330c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003310:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003314:	4619      	mov	r1, r3
 8003316:	481b      	ldr	r0, [pc, #108]	; (8003384 <HAL_ADC_ConfigChannel+0x7c0>)
 8003318:	f7fe ff67 	bl	80021ea <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800331c:	e024      	b.n	8003368 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1f      	ldr	r2, [pc, #124]	; (80033a0 <HAL_ADC_ConfigChannel+0x7dc>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d120      	bne.n	800336a <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003328:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800332c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d11a      	bne.n	800336a <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a14      	ldr	r2, [pc, #80]	; (800338c <HAL_ADC_ConfigChannel+0x7c8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d115      	bne.n	800336a <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800333e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003342:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003346:	4619      	mov	r1, r3
 8003348:	480e      	ldr	r0, [pc, #56]	; (8003384 <HAL_ADC_ConfigChannel+0x7c0>)
 800334a:	f7fe ff4e 	bl	80021ea <LL_ADC_SetCommonPathInternalCh>
 800334e:	e00c      	b.n	800336a <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003354:	f043 0220 	orr.w	r2, r3, #32
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003362:	e002      	b.n	800336a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003364:	bf00      	nop
 8003366:	e000      	b.n	800336a <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003368:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003372:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003376:	4618      	mov	r0, r3
 8003378:	37d8      	adds	r7, #216	; 0xd8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}
 800337e:	bf00      	nop
 8003380:	80080000 	.word	0x80080000
 8003384:	50040300 	.word	0x50040300
 8003388:	c7520000 	.word	0xc7520000
 800338c:	50040000 	.word	0x50040000
 8003390:	50040200 	.word	0x50040200
 8003394:	20000010 	.word	0x20000010
 8003398:	053e2d63 	.word	0x053e2d63
 800339c:	cb840000 	.word	0xcb840000
 80033a0:	80000001 	.word	0x80000001

080033a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff f8b1 	bl	8002518 <LL_ADC_IsEnabled>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d14d      	bne.n	8003458 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	4b28      	ldr	r3, [pc, #160]	; (8003464 <ADC_Enable+0xc0>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00d      	beq.n	80033e6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033ce:	f043 0210 	orr.w	r2, r3, #16
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033da:	f043 0201 	orr.w	r2, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e039      	b.n	800345a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7ff f86c 	bl	80024c8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80033f0:	f7fe feb8 	bl	8002164 <HAL_GetTick>
 80033f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033f6:	e028      	b.n	800344a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7ff f88b 	bl	8002518 <LL_ADC_IsEnabled>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d104      	bne.n	8003412 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff f85b 	bl	80024c8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003412:	f7fe fea7 	bl	8002164 <HAL_GetTick>
 8003416:	4602      	mov	r2, r0
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	1ad3      	subs	r3, r2, r3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d914      	bls.n	800344a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b01      	cmp	r3, #1
 800342c:	d00d      	beq.n	800344a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003432:	f043 0210 	orr.w	r2, r3, #16
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800343e:	f043 0201 	orr.w	r2, r3, #1
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e007      	b.n	800345a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b01      	cmp	r3, #1
 8003456:	d1cf      	bne.n	80033f8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	8000003f 	.word	0x8000003f

08003468 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff f862 	bl	800253e <LL_ADC_IsDisableOngoing>
 800347a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f7ff f849 	bl	8002518 <LL_ADC_IsEnabled>
 8003486:	4603      	mov	r3, r0
 8003488:	2b00      	cmp	r3, #0
 800348a:	d047      	beq.n	800351c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d144      	bne.n	800351c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	f003 030d 	and.w	r3, r3, #13
 800349c:	2b01      	cmp	r3, #1
 800349e:	d10c      	bne.n	80034ba <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f7ff f823 	bl	80024f0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2203      	movs	r2, #3
 80034b0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80034b2:	f7fe fe57 	bl	8002164 <HAL_GetTick>
 80034b6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034b8:	e029      	b.n	800350e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034be:	f043 0210 	orr.w	r2, r3, #16
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ca:	f043 0201 	orr.w	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e023      	b.n	800351e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034d6:	f7fe fe45 	bl	8002164 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d914      	bls.n	800350e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00d      	beq.n	800350e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f6:	f043 0210 	orr.w	r2, r3, #16
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003502:	f043 0201 	orr.w	r2, r3, #1
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e007      	b.n	800351e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1dc      	bne.n	80034d6 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3710      	adds	r7, #16
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <LL_ADC_IsEnabled>:
{
 8003526:	b480      	push	{r7}
 8003528:	b083      	sub	sp, #12
 800352a:	af00      	add	r7, sp, #0
 800352c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b01      	cmp	r3, #1
 8003538:	d101      	bne.n	800353e <LL_ADC_IsEnabled+0x18>
 800353a:	2301      	movs	r3, #1
 800353c:	e000      	b.n	8003540 <LL_ADC_IsEnabled+0x1a>
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <LL_ADC_StartCalibration>:
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800355e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003568:	4313      	orrs	r3, r2
 800356a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	609a      	str	r2, [r3, #8]
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <LL_ADC_IsCalibrationOnGoing>:
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800358e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003592:	d101      	bne.n	8003598 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003594:	2301      	movs	r3, #1
 8003596:	e000      	b.n	800359a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <LL_ADC_REG_IsConversionOngoing>:
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 0304 	and.w	r3, r3, #4
 80035b6:	2b04      	cmp	r3, #4
 80035b8:	d101      	bne.n	80035be <LL_ADC_REG_IsConversionOngoing+0x18>
 80035ba:	2301      	movs	r3, #1
 80035bc:	e000      	b.n	80035c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	370c      	adds	r7, #12
 80035c4:	46bd      	mov	sp, r7
 80035c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ca:	4770      	bx	lr

080035cc <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b084      	sub	sp, #16
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	6078      	str	r0, [r7, #4]
 80035d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_ADCEx_Calibration_Start+0x1c>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e04d      	b.n	8003684 <HAL_ADCEx_Calibration_Start+0xb8>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f7ff ff39 	bl	8003468 <ADC_Disable>
 80035f6:	4603      	mov	r3, r0
 80035f8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80035fa:	7bfb      	ldrb	r3, [r7, #15]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d136      	bne.n	800366e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003604:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003608:	f023 0302 	bic.w	r3, r3, #2
 800360c:	f043 0202 	orr.w	r2, r3, #2
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6839      	ldr	r1, [r7, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff ff96 	bl	800354c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003620:	e014      	b.n	800364c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	3301      	adds	r3, #1
 8003626:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800362e:	d30d      	bcc.n	800364c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003634:	f023 0312 	bic.w	r3, r3, #18
 8003638:	f043 0210 	orr.w	r2, r3, #16
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2200      	movs	r2, #0
 8003644:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003648:	2301      	movs	r3, #1
 800364a:	e01b      	b.n	8003684 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff ff94 	bl	800357e <LL_ADC_IsCalibrationOnGoing>
 8003656:	4603      	mov	r3, r0
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1e2      	bne.n	8003622 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003660:	f023 0303 	bic.w	r3, r3, #3
 8003664:	f043 0201 	orr.w	r2, r3, #1
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	655a      	str	r2, [r3, #84]	; 0x54
 800366c:	e005      	b.n	800367a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003672:	f043 0210 	orr.w	r2, r3, #16
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003682:	7bfb      	ldrb	r3, [r7, #15]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800368c:	b590      	push	{r4, r7, lr}
 800368e:	b09f      	sub	sp, #124	; 0x7c
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003696:	2300      	movs	r3, #0
 8003698:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d101      	bne.n	80036aa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e093      	b.n	80037d2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80036b2:	2300      	movs	r3, #0
 80036b4:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80036b6:	2300      	movs	r3, #0
 80036b8:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a47      	ldr	r2, [pc, #284]	; (80037dc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d102      	bne.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80036c4:	4b46      	ldr	r3, [pc, #280]	; (80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80036c6:	60bb      	str	r3, [r7, #8]
 80036c8:	e001      	b.n	80036ce <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80036ca:	2300      	movs	r3, #0
 80036cc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10b      	bne.n	80036ec <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d8:	f043 0220 	orr.w	r2, r3, #32
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e072      	b.n	80037d2 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff ff59 	bl	80035a6 <LL_ADC_REG_IsConversionOngoing>
 80036f4:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4618      	mov	r0, r3
 80036fc:	f7ff ff53 	bl	80035a6 <LL_ADC_REG_IsConversionOngoing>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d154      	bne.n	80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003706:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003708:	2b00      	cmp	r3, #0
 800370a:	d151      	bne.n	80037b0 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800370c:	4b35      	ldr	r3, [pc, #212]	; (80037e4 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800370e:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	2b00      	cmp	r3, #0
 8003716:	d02c      	beq.n	8003772 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	6859      	ldr	r1, [r3, #4]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800372a:	035b      	lsls	r3, r3, #13
 800372c:	430b      	orrs	r3, r1
 800372e:	431a      	orrs	r2, r3
 8003730:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003732:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003734:	4829      	ldr	r0, [pc, #164]	; (80037dc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003736:	f7ff fef6 	bl	8003526 <LL_ADC_IsEnabled>
 800373a:	4604      	mov	r4, r0
 800373c:	4828      	ldr	r0, [pc, #160]	; (80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800373e:	f7ff fef2 	bl	8003526 <LL_ADC_IsEnabled>
 8003742:	4603      	mov	r3, r0
 8003744:	431c      	orrs	r4, r3
 8003746:	4828      	ldr	r0, [pc, #160]	; (80037e8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003748:	f7ff feed 	bl	8003526 <LL_ADC_IsEnabled>
 800374c:	4603      	mov	r3, r0
 800374e:	4323      	orrs	r3, r4
 8003750:	2b00      	cmp	r3, #0
 8003752:	d137      	bne.n	80037c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800375c:	f023 030f 	bic.w	r3, r3, #15
 8003760:	683a      	ldr	r2, [r7, #0]
 8003762:	6811      	ldr	r1, [r2, #0]
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	6892      	ldr	r2, [r2, #8]
 8003768:	430a      	orrs	r2, r1
 800376a:	431a      	orrs	r2, r3
 800376c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800376e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003770:	e028      	b.n	80037c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003772:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800377a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800377c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800377e:	4817      	ldr	r0, [pc, #92]	; (80037dc <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003780:	f7ff fed1 	bl	8003526 <LL_ADC_IsEnabled>
 8003784:	4604      	mov	r4, r0
 8003786:	4816      	ldr	r0, [pc, #88]	; (80037e0 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003788:	f7ff fecd 	bl	8003526 <LL_ADC_IsEnabled>
 800378c:	4603      	mov	r3, r0
 800378e:	431c      	orrs	r4, r3
 8003790:	4815      	ldr	r0, [pc, #84]	; (80037e8 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003792:	f7ff fec8 	bl	8003526 <LL_ADC_IsEnabled>
 8003796:	4603      	mov	r3, r0
 8003798:	4323      	orrs	r3, r4
 800379a:	2b00      	cmp	r3, #0
 800379c:	d112      	bne.n	80037c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800379e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80037a6:	f023 030f 	bic.w	r3, r3, #15
 80037aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037ac:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037ae:	e009      	b.n	80037c4 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037b4:	f043 0220 	orr.w	r2, r3, #32
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80037c2:	e000      	b.n	80037c6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037c4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80037ce:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	377c      	adds	r7, #124	; 0x7c
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd90      	pop	{r4, r7, pc}
 80037da:	bf00      	nop
 80037dc:	50040000 	.word	0x50040000
 80037e0:	50040100 	.word	0x50040100
 80037e4:	50040300 	.word	0x50040300
 80037e8:	50040200 	.word	0x50040200

080037ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <__NVIC_SetPriorityGrouping+0x44>)
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003808:	4013      	ands	r3, r2
 800380a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003814:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003818:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800381c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800381e:	4a04      	ldr	r2, [pc, #16]	; (8003830 <__NVIC_SetPriorityGrouping+0x44>)
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	60d3      	str	r3, [r2, #12]
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	e000ed00 	.word	0xe000ed00

08003834 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003834:	b480      	push	{r7}
 8003836:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003838:	4b04      	ldr	r3, [pc, #16]	; (800384c <__NVIC_GetPriorityGrouping+0x18>)
 800383a:	68db      	ldr	r3, [r3, #12]
 800383c:	0a1b      	lsrs	r3, r3, #8
 800383e:	f003 0307 	and.w	r3, r3, #7
}
 8003842:	4618      	mov	r0, r3
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr
 800384c:	e000ed00 	.word	0xe000ed00

08003850 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800385a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800385e:	2b00      	cmp	r3, #0
 8003860:	db0b      	blt.n	800387a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003862:	79fb      	ldrb	r3, [r7, #7]
 8003864:	f003 021f 	and.w	r2, r3, #31
 8003868:	4907      	ldr	r1, [pc, #28]	; (8003888 <__NVIC_EnableIRQ+0x38>)
 800386a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800386e:	095b      	lsrs	r3, r3, #5
 8003870:	2001      	movs	r0, #1
 8003872:	fa00 f202 	lsl.w	r2, r0, r2
 8003876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800387a:	bf00      	nop
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr
 8003886:	bf00      	nop
 8003888:	e000e100 	.word	0xe000e100

0800388c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	4603      	mov	r3, r0
 8003894:	6039      	str	r1, [r7, #0]
 8003896:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003898:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800389c:	2b00      	cmp	r3, #0
 800389e:	db0a      	blt.n	80038b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	490c      	ldr	r1, [pc, #48]	; (80038d8 <__NVIC_SetPriority+0x4c>)
 80038a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038aa:	0112      	lsls	r2, r2, #4
 80038ac:	b2d2      	uxtb	r2, r2
 80038ae:	440b      	add	r3, r1
 80038b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038b4:	e00a      	b.n	80038cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	b2da      	uxtb	r2, r3
 80038ba:	4908      	ldr	r1, [pc, #32]	; (80038dc <__NVIC_SetPriority+0x50>)
 80038bc:	79fb      	ldrb	r3, [r7, #7]
 80038be:	f003 030f 	and.w	r3, r3, #15
 80038c2:	3b04      	subs	r3, #4
 80038c4:	0112      	lsls	r2, r2, #4
 80038c6:	b2d2      	uxtb	r2, r2
 80038c8:	440b      	add	r3, r1
 80038ca:	761a      	strb	r2, [r3, #24]
}
 80038cc:	bf00      	nop
 80038ce:	370c      	adds	r7, #12
 80038d0:	46bd      	mov	sp, r7
 80038d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d6:	4770      	bx	lr
 80038d8:	e000e100 	.word	0xe000e100
 80038dc:	e000ed00 	.word	0xe000ed00

080038e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b089      	sub	sp, #36	; 0x24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	f1c3 0307 	rsb	r3, r3, #7
 80038fa:	2b04      	cmp	r3, #4
 80038fc:	bf28      	it	cs
 80038fe:	2304      	movcs	r3, #4
 8003900:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003902:	69fb      	ldr	r3, [r7, #28]
 8003904:	3304      	adds	r3, #4
 8003906:	2b06      	cmp	r3, #6
 8003908:	d902      	bls.n	8003910 <NVIC_EncodePriority+0x30>
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	3b03      	subs	r3, #3
 800390e:	e000      	b.n	8003912 <NVIC_EncodePriority+0x32>
 8003910:	2300      	movs	r3, #0
 8003912:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003914:	f04f 32ff 	mov.w	r2, #4294967295
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	fa02 f303 	lsl.w	r3, r2, r3
 800391e:	43da      	mvns	r2, r3
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	401a      	ands	r2, r3
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003928:	f04f 31ff 	mov.w	r1, #4294967295
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	fa01 f303 	lsl.w	r3, r1, r3
 8003932:	43d9      	mvns	r1, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003938:	4313      	orrs	r3, r2
         );
}
 800393a:	4618      	mov	r0, r3
 800393c:	3724      	adds	r7, #36	; 0x24
 800393e:	46bd      	mov	sp, r7
 8003940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003944:	4770      	bx	lr

08003946 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f7ff ff4c 	bl	80037ec <__NVIC_SetPriorityGrouping>
}
 8003954:	bf00      	nop
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
 8003968:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800396a:	2300      	movs	r3, #0
 800396c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800396e:	f7ff ff61 	bl	8003834 <__NVIC_GetPriorityGrouping>
 8003972:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	68b9      	ldr	r1, [r7, #8]
 8003978:	6978      	ldr	r0, [r7, #20]
 800397a:	f7ff ffb1 	bl	80038e0 <NVIC_EncodePriority>
 800397e:	4602      	mov	r2, r0
 8003980:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003984:	4611      	mov	r1, r2
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff ff80 	bl	800388c <__NVIC_SetPriority>
}
 800398c:	bf00      	nop
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800399e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff ff54 	bl	8003850 <__NVIC_EnableIRQ>
}
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039b8:	2300      	movs	r3, #0
 80039ba:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b02      	cmp	r3, #2
 80039c6:	d008      	beq.n	80039da <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2204      	movs	r2, #4
 80039cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e022      	b.n	8003a20 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f022 020e 	bic.w	r2, r2, #14
 80039e8:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0201 	bic.w	r2, r2, #1
 80039f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039fe:	f003 021c 	and.w	r2, r3, #28
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	2101      	movs	r1, #1
 8003a08:	fa01 f202 	lsl.w	r2, r1, r2
 8003a0c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003a1e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3714      	adds	r7, #20
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a34:	2300      	movs	r3, #0
 8003a36:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d005      	beq.n	8003a50 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2204      	movs	r2, #4
 8003a48:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	73fb      	strb	r3, [r7, #15]
 8003a4e:	e029      	b.n	8003aa4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f022 020e 	bic.w	r2, r2, #14
 8003a5e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a74:	f003 021c 	and.w	r2, r3, #28
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a82:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d003      	beq.n	8003aa4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	4798      	blx	r3
    }
  }
  return status;
 8003aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003abe:	e17f      	b.n	8003dc0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	2101      	movs	r1, #1
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8003acc:	4013      	ands	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 8171 	beq.w	8003dba <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f003 0303 	and.w	r3, r3, #3
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d005      	beq.n	8003af0 <HAL_GPIO_Init+0x40>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f003 0303 	and.w	r3, r3, #3
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d130      	bne.n	8003b52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	2203      	movs	r2, #3
 8003afc:	fa02 f303 	lsl.w	r3, r2, r3
 8003b00:	43db      	mvns	r3, r3
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4013      	ands	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	68da      	ldr	r2, [r3, #12]
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b26:	2201      	movs	r2, #1
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	43db      	mvns	r3, r3
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	4013      	ands	r3, r2
 8003b34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	091b      	lsrs	r3, r3, #4
 8003b3c:	f003 0201 	and.w	r2, r3, #1
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	fa02 f303 	lsl.w	r3, r2, r3
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	2b03      	cmp	r3, #3
 8003b5c:	d118      	bne.n	8003b90 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003b64:	2201      	movs	r2, #1
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	43db      	mvns	r3, r3
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4013      	ands	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	08db      	lsrs	r3, r3, #3
 8003b7a:	f003 0201 	and.w	r2, r3, #1
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	fa02 f303 	lsl.w	r3, r2, r3
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 0303 	and.w	r3, r3, #3
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d017      	beq.n	8003bcc <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	2203      	movs	r2, #3
 8003ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bac:	43db      	mvns	r3, r3
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	689a      	ldr	r2, [r3, #8]
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	693a      	ldr	r2, [r7, #16]
 8003bca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d123      	bne.n	8003c20 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	08da      	lsrs	r2, r3, #3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	3208      	adds	r2, #8
 8003be0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003be4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f003 0307 	and.w	r3, r3, #7
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	220f      	movs	r2, #15
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	43db      	mvns	r3, r3
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	691a      	ldr	r2, [r3, #16]
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	f003 0307 	and.w	r3, r3, #7
 8003c06:	009b      	lsls	r3, r3, #2
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	693a      	ldr	r2, [r7, #16]
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	08da      	lsrs	r2, r3, #3
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	3208      	adds	r2, #8
 8003c1a:	6939      	ldr	r1, [r7, #16]
 8003c1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	005b      	lsls	r3, r3, #1
 8003c2a:	2203      	movs	r2, #3
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	43db      	mvns	r3, r3
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	4013      	ands	r3, r2
 8003c36:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f003 0203 	and.w	r2, r3, #3
 8003c40:	697b      	ldr	r3, [r7, #20]
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	fa02 f303 	lsl.w	r3, r2, r3
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f000 80ac 	beq.w	8003dba <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c62:	4b5f      	ldr	r3, [pc, #380]	; (8003de0 <HAL_GPIO_Init+0x330>)
 8003c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c66:	4a5e      	ldr	r2, [pc, #376]	; (8003de0 <HAL_GPIO_Init+0x330>)
 8003c68:	f043 0301 	orr.w	r3, r3, #1
 8003c6c:	6613      	str	r3, [r2, #96]	; 0x60
 8003c6e:	4b5c      	ldr	r3, [pc, #368]	; (8003de0 <HAL_GPIO_Init+0x330>)
 8003c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c72:	f003 0301 	and.w	r3, r3, #1
 8003c76:	60bb      	str	r3, [r7, #8]
 8003c78:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c7a:	4a5a      	ldr	r2, [pc, #360]	; (8003de4 <HAL_GPIO_Init+0x334>)
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	089b      	lsrs	r3, r3, #2
 8003c80:	3302      	adds	r3, #2
 8003c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c86:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	220f      	movs	r2, #15
 8003c92:	fa02 f303 	lsl.w	r3, r2, r3
 8003c96:	43db      	mvns	r3, r3
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ca4:	d025      	beq.n	8003cf2 <HAL_GPIO_Init+0x242>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a4f      	ldr	r2, [pc, #316]	; (8003de8 <HAL_GPIO_Init+0x338>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d01f      	beq.n	8003cee <HAL_GPIO_Init+0x23e>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a4e      	ldr	r2, [pc, #312]	; (8003dec <HAL_GPIO_Init+0x33c>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d019      	beq.n	8003cea <HAL_GPIO_Init+0x23a>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a4d      	ldr	r2, [pc, #308]	; (8003df0 <HAL_GPIO_Init+0x340>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d013      	beq.n	8003ce6 <HAL_GPIO_Init+0x236>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	4a4c      	ldr	r2, [pc, #304]	; (8003df4 <HAL_GPIO_Init+0x344>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d00d      	beq.n	8003ce2 <HAL_GPIO_Init+0x232>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a4b      	ldr	r2, [pc, #300]	; (8003df8 <HAL_GPIO_Init+0x348>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d007      	beq.n	8003cde <HAL_GPIO_Init+0x22e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a4a      	ldr	r2, [pc, #296]	; (8003dfc <HAL_GPIO_Init+0x34c>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d101      	bne.n	8003cda <HAL_GPIO_Init+0x22a>
 8003cd6:	2306      	movs	r3, #6
 8003cd8:	e00c      	b.n	8003cf4 <HAL_GPIO_Init+0x244>
 8003cda:	2307      	movs	r3, #7
 8003cdc:	e00a      	b.n	8003cf4 <HAL_GPIO_Init+0x244>
 8003cde:	2305      	movs	r3, #5
 8003ce0:	e008      	b.n	8003cf4 <HAL_GPIO_Init+0x244>
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	e006      	b.n	8003cf4 <HAL_GPIO_Init+0x244>
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e004      	b.n	8003cf4 <HAL_GPIO_Init+0x244>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e002      	b.n	8003cf4 <HAL_GPIO_Init+0x244>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <HAL_GPIO_Init+0x244>
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	697a      	ldr	r2, [r7, #20]
 8003cf6:	f002 0203 	and.w	r2, r2, #3
 8003cfa:	0092      	lsls	r2, r2, #2
 8003cfc:	4093      	lsls	r3, r2
 8003cfe:	693a      	ldr	r2, [r7, #16]
 8003d00:	4313      	orrs	r3, r2
 8003d02:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d04:	4937      	ldr	r1, [pc, #220]	; (8003de4 <HAL_GPIO_Init+0x334>)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	089b      	lsrs	r3, r3, #2
 8003d0a:	3302      	adds	r3, #2
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d12:	4b3b      	ldr	r3, [pc, #236]	; (8003e00 <HAL_GPIO_Init+0x350>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d36:	4a32      	ldr	r2, [pc, #200]	; (8003e00 <HAL_GPIO_Init+0x350>)
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d3c:	4b30      	ldr	r3, [pc, #192]	; (8003e00 <HAL_GPIO_Init+0x350>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	43db      	mvns	r3, r3
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d003      	beq.n	8003d60 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d60:	4a27      	ldr	r2, [pc, #156]	; (8003e00 <HAL_GPIO_Init+0x350>)
 8003d62:	693b      	ldr	r3, [r7, #16]
 8003d64:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d66:	4b26      	ldr	r3, [pc, #152]	; (8003e00 <HAL_GPIO_Init+0x350>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	43db      	mvns	r3, r3
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	4013      	ands	r3, r2
 8003d74:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d003      	beq.n	8003d8a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d8a:	4a1d      	ldr	r2, [pc, #116]	; (8003e00 <HAL_GPIO_Init+0x350>)
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003d90:	4b1b      	ldr	r3, [pc, #108]	; (8003e00 <HAL_GPIO_Init+0x350>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d003      	beq.n	8003db4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003db4:	4a12      	ldr	r2, [pc, #72]	; (8003e00 <HAL_GPIO_Init+0x350>)
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003dba:	697b      	ldr	r3, [r7, #20]
 8003dbc:	3301      	adds	r3, #1
 8003dbe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	f47f ae78 	bne.w	8003ac0 <HAL_GPIO_Init+0x10>
  }
}
 8003dd0:	bf00      	nop
 8003dd2:	bf00      	nop
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40021000 	.word	0x40021000
 8003de4:	40010000 	.word	0x40010000
 8003de8:	48000400 	.word	0x48000400
 8003dec:	48000800 	.word	0x48000800
 8003df0:	48000c00 	.word	0x48000c00
 8003df4:	48001000 	.word	0x48001000
 8003df8:	48001400 	.word	0x48001400
 8003dfc:	48001800 	.word	0x48001800
 8003e00:	40010400 	.word	0x40010400

08003e04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	460b      	mov	r3, r1
 8003e0e:	807b      	strh	r3, [r7, #2]
 8003e10:	4613      	mov	r3, r2
 8003e12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e14:	787b      	ldrb	r3, [r7, #1]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d003      	beq.n	8003e22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e1a:	887a      	ldrh	r2, [r7, #2]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e20:	e002      	b.n	8003e28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e22:	887a      	ldrh	r2, [r7, #2]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e38:	4b04      	ldr	r3, [pc, #16]	; (8003e4c <HAL_PWREx_GetVoltageRange+0x18>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40007000 	.word	0x40007000

08003e50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b085      	sub	sp, #20
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e5e:	d130      	bne.n	8003ec2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e60:	4b23      	ldr	r3, [pc, #140]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e6c:	d038      	beq.n	8003ee0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e6e:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e76:	4a1e      	ldr	r2, [pc, #120]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e7e:	4b1d      	ldr	r3, [pc, #116]	; (8003ef4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2232      	movs	r2, #50	; 0x32
 8003e84:	fb02 f303 	mul.w	r3, r2, r3
 8003e88:	4a1b      	ldr	r2, [pc, #108]	; (8003ef8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8e:	0c9b      	lsrs	r3, r3, #18
 8003e90:	3301      	adds	r3, #1
 8003e92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e94:	e002      	b.n	8003e9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e9c:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e9e:	695b      	ldr	r3, [r3, #20]
 8003ea0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea8:	d102      	bne.n	8003eb0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1f2      	bne.n	8003e96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003eb0:	4b0f      	ldr	r3, [pc, #60]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eb2:	695b      	ldr	r3, [r3, #20]
 8003eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ebc:	d110      	bne.n	8003ee0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003ebe:	2303      	movs	r3, #3
 8003ec0:	e00f      	b.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003eca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ece:	d007      	beq.n	8003ee0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ed0:	4b07      	ldr	r3, [pc, #28]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ed8:	4a05      	ldr	r2, [pc, #20]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ede:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40007000 	.word	0x40007000
 8003ef4:	20000010 	.word	0x20000010
 8003ef8:	431bde83 	.word	0x431bde83

08003efc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b088      	sub	sp, #32
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e3d4      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f0e:	4ba1      	ldr	r3, [pc, #644]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f003 030c 	and.w	r3, r3, #12
 8003f16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f18:	4b9e      	ldr	r3, [pc, #632]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	f003 0303 	and.w	r3, r3, #3
 8003f20:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0310 	and.w	r3, r3, #16
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	f000 80e4 	beq.w	80040f8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d007      	beq.n	8003f46 <HAL_RCC_OscConfig+0x4a>
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b0c      	cmp	r3, #12
 8003f3a:	f040 808b 	bne.w	8004054 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	f040 8087 	bne.w	8004054 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f46:	4b93      	ldr	r3, [pc, #588]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_RCC_OscConfig+0x62>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e3ac      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a1a      	ldr	r2, [r3, #32]
 8003f62:	4b8c      	ldr	r3, [pc, #560]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d004      	beq.n	8003f78 <HAL_RCC_OscConfig+0x7c>
 8003f6e:	4b89      	ldr	r3, [pc, #548]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f76:	e005      	b.n	8003f84 <HAL_RCC_OscConfig+0x88>
 8003f78:	4b86      	ldr	r3, [pc, #536]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8003f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f7e:	091b      	lsrs	r3, r3, #4
 8003f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d223      	bcs.n	8003fd0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f000 fd73 	bl	8004a78 <RCC_SetFlashLatencyFromMSIRange>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e38d      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f9c:	4b7d      	ldr	r3, [pc, #500]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a7c      	ldr	r2, [pc, #496]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8003fa2:	f043 0308 	orr.w	r3, r3, #8
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	4b7a      	ldr	r3, [pc, #488]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a1b      	ldr	r3, [r3, #32]
 8003fb4:	4977      	ldr	r1, [pc, #476]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fba:	4b76      	ldr	r3, [pc, #472]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	69db      	ldr	r3, [r3, #28]
 8003fc6:	021b      	lsls	r3, r3, #8
 8003fc8:	4972      	ldr	r1, [pc, #456]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	604b      	str	r3, [r1, #4]
 8003fce:	e025      	b.n	800401c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fd0:	4b70      	ldr	r3, [pc, #448]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a6f      	ldr	r2, [pc, #444]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8003fd6:	f043 0308 	orr.w	r3, r3, #8
 8003fda:	6013      	str	r3, [r2, #0]
 8003fdc:	4b6d      	ldr	r3, [pc, #436]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a1b      	ldr	r3, [r3, #32]
 8003fe8:	496a      	ldr	r1, [pc, #424]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fee:	4b69      	ldr	r3, [pc, #420]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8003ff0:	685b      	ldr	r3, [r3, #4]
 8003ff2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69db      	ldr	r3, [r3, #28]
 8003ffa:	021b      	lsls	r3, r3, #8
 8003ffc:	4965      	ldr	r1, [pc, #404]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d109      	bne.n	800401c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a1b      	ldr	r3, [r3, #32]
 800400c:	4618      	mov	r0, r3
 800400e:	f000 fd33 	bl	8004a78 <RCC_SetFlashLatencyFromMSIRange>
 8004012:	4603      	mov	r3, r0
 8004014:	2b00      	cmp	r3, #0
 8004016:	d001      	beq.n	800401c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e34d      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800401c:	f000 fc36 	bl	800488c <HAL_RCC_GetSysClockFreq>
 8004020:	4602      	mov	r2, r0
 8004022:	4b5c      	ldr	r3, [pc, #368]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	091b      	lsrs	r3, r3, #4
 8004028:	f003 030f 	and.w	r3, r3, #15
 800402c:	495a      	ldr	r1, [pc, #360]	; (8004198 <HAL_RCC_OscConfig+0x29c>)
 800402e:	5ccb      	ldrb	r3, [r1, r3]
 8004030:	f003 031f 	and.w	r3, r3, #31
 8004034:	fa22 f303 	lsr.w	r3, r2, r3
 8004038:	4a58      	ldr	r2, [pc, #352]	; (800419c <HAL_RCC_OscConfig+0x2a0>)
 800403a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800403c:	4b58      	ldr	r3, [pc, #352]	; (80041a0 <HAL_RCC_OscConfig+0x2a4>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4618      	mov	r0, r3
 8004042:	f7fd fd4d 	bl	8001ae0 <HAL_InitTick>
 8004046:	4603      	mov	r3, r0
 8004048:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800404a:	7bfb      	ldrb	r3, [r7, #15]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d052      	beq.n	80040f6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004050:	7bfb      	ldrb	r3, [r7, #15]
 8004052:	e331      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	699b      	ldr	r3, [r3, #24]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d032      	beq.n	80040c2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800405c:	4b4d      	ldr	r3, [pc, #308]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a4c      	ldr	r2, [pc, #304]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8004062:	f043 0301 	orr.w	r3, r3, #1
 8004066:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004068:	f7fe f87c 	bl	8002164 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004070:	f7fe f878 	bl	8002164 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e31a      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004082:	4b44      	ldr	r3, [pc, #272]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800408e:	4b41      	ldr	r3, [pc, #260]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a40      	ldr	r2, [pc, #256]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8004094:	f043 0308 	orr.w	r3, r3, #8
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	4b3e      	ldr	r3, [pc, #248]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a1b      	ldr	r3, [r3, #32]
 80040a6:	493b      	ldr	r1, [pc, #236]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80040ac:	4b39      	ldr	r3, [pc, #228]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	69db      	ldr	r3, [r3, #28]
 80040b8:	021b      	lsls	r3, r3, #8
 80040ba:	4936      	ldr	r1, [pc, #216]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	604b      	str	r3, [r1, #4]
 80040c0:	e01a      	b.n	80040f8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040c2:	4b34      	ldr	r3, [pc, #208]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a33      	ldr	r2, [pc, #204]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040ce:	f7fe f849 	bl	8002164 <HAL_GetTick>
 80040d2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040d4:	e008      	b.n	80040e8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040d6:	f7fe f845 	bl	8002164 <HAL_GetTick>
 80040da:	4602      	mov	r2, r0
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	1ad3      	subs	r3, r2, r3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d901      	bls.n	80040e8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e2e7      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040e8:	4b2a      	ldr	r3, [pc, #168]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0302 	and.w	r3, r3, #2
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1f0      	bne.n	80040d6 <HAL_RCC_OscConfig+0x1da>
 80040f4:	e000      	b.n	80040f8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040f6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d074      	beq.n	80041ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b08      	cmp	r3, #8
 8004108:	d005      	beq.n	8004116 <HAL_RCC_OscConfig+0x21a>
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	2b0c      	cmp	r3, #12
 800410e:	d10e      	bne.n	800412e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2b03      	cmp	r3, #3
 8004114:	d10b      	bne.n	800412e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004116:	4b1f      	ldr	r3, [pc, #124]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	2b00      	cmp	r3, #0
 8004120:	d064      	beq.n	80041ec <HAL_RCC_OscConfig+0x2f0>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d160      	bne.n	80041ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e2c4      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004136:	d106      	bne.n	8004146 <HAL_RCC_OscConfig+0x24a>
 8004138:	4b16      	ldr	r3, [pc, #88]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a15      	ldr	r2, [pc, #84]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 800413e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	e01d      	b.n	8004182 <HAL_RCC_OscConfig+0x286>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800414e:	d10c      	bne.n	800416a <HAL_RCC_OscConfig+0x26e>
 8004150:	4b10      	ldr	r3, [pc, #64]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a0f      	ldr	r2, [pc, #60]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8004156:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800415a:	6013      	str	r3, [r2, #0]
 800415c:	4b0d      	ldr	r3, [pc, #52]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a0c      	ldr	r2, [pc, #48]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8004162:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004166:	6013      	str	r3, [r2, #0]
 8004168:	e00b      	b.n	8004182 <HAL_RCC_OscConfig+0x286>
 800416a:	4b0a      	ldr	r3, [pc, #40]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a09      	ldr	r2, [pc, #36]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8004170:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004174:	6013      	str	r3, [r2, #0]
 8004176:	4b07      	ldr	r3, [pc, #28]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	4a06      	ldr	r2, [pc, #24]	; (8004194 <HAL_RCC_OscConfig+0x298>)
 800417c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004180:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d01c      	beq.n	80041c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418a:	f7fd ffeb 	bl	8002164 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004190:	e011      	b.n	80041b6 <HAL_RCC_OscConfig+0x2ba>
 8004192:	bf00      	nop
 8004194:	40021000 	.word	0x40021000
 8004198:	0800c900 	.word	0x0800c900
 800419c:	20000010 	.word	0x20000010
 80041a0:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041a4:	f7fd ffde 	bl	8002164 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b64      	cmp	r3, #100	; 0x64
 80041b0:	d901      	bls.n	80041b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e280      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041b6:	4baf      	ldr	r3, [pc, #700]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d0f0      	beq.n	80041a4 <HAL_RCC_OscConfig+0x2a8>
 80041c2:	e014      	b.n	80041ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c4:	f7fd ffce 	bl	8002164 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041cc:	f7fd ffca 	bl	8002164 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b64      	cmp	r3, #100	; 0x64
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e26c      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041de:	4ba5      	ldr	r3, [pc, #660]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f0      	bne.n	80041cc <HAL_RCC_OscConfig+0x2d0>
 80041ea:	e000      	b.n	80041ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d060      	beq.n	80042bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	2b04      	cmp	r3, #4
 80041fe:	d005      	beq.n	800420c <HAL_RCC_OscConfig+0x310>
 8004200:	69bb      	ldr	r3, [r7, #24]
 8004202:	2b0c      	cmp	r3, #12
 8004204:	d119      	bne.n	800423a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b02      	cmp	r3, #2
 800420a:	d116      	bne.n	800423a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800420c:	4b99      	ldr	r3, [pc, #612]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004214:	2b00      	cmp	r3, #0
 8004216:	d005      	beq.n	8004224 <HAL_RCC_OscConfig+0x328>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e249      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004224:	4b93      	ldr	r3, [pc, #588]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	691b      	ldr	r3, [r3, #16]
 8004230:	061b      	lsls	r3, r3, #24
 8004232:	4990      	ldr	r1, [pc, #576]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 8004234:	4313      	orrs	r3, r2
 8004236:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004238:	e040      	b.n	80042bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	68db      	ldr	r3, [r3, #12]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d023      	beq.n	800428a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004242:	4b8c      	ldr	r3, [pc, #560]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a8b      	ldr	r2, [pc, #556]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 8004248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800424c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424e:	f7fd ff89 	bl	8002164 <HAL_GetTick>
 8004252:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004254:	e008      	b.n	8004268 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004256:	f7fd ff85 	bl	8002164 <HAL_GetTick>
 800425a:	4602      	mov	r2, r0
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	2b02      	cmp	r3, #2
 8004262:	d901      	bls.n	8004268 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e227      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004268:	4b82      	ldr	r3, [pc, #520]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004270:	2b00      	cmp	r3, #0
 8004272:	d0f0      	beq.n	8004256 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004274:	4b7f      	ldr	r3, [pc, #508]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	061b      	lsls	r3, r3, #24
 8004282:	497c      	ldr	r1, [pc, #496]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 8004284:	4313      	orrs	r3, r2
 8004286:	604b      	str	r3, [r1, #4]
 8004288:	e018      	b.n	80042bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800428a:	4b7a      	ldr	r3, [pc, #488]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a79      	ldr	r2, [pc, #484]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 8004290:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004294:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004296:	f7fd ff65 	bl	8002164 <HAL_GetTick>
 800429a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800429c:	e008      	b.n	80042b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800429e:	f7fd ff61 	bl	8002164 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d901      	bls.n	80042b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e203      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80042b0:	4b70      	ldr	r3, [pc, #448]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1f0      	bne.n	800429e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d03c      	beq.n	8004342 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d01c      	beq.n	800430a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042d0:	4b68      	ldr	r3, [pc, #416]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 80042d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042d6:	4a67      	ldr	r2, [pc, #412]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 80042d8:	f043 0301 	orr.w	r3, r3, #1
 80042dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042e0:	f7fd ff40 	bl	8002164 <HAL_GetTick>
 80042e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042e6:	e008      	b.n	80042fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042e8:	f7fd ff3c 	bl	8002164 <HAL_GetTick>
 80042ec:	4602      	mov	r2, r0
 80042ee:	693b      	ldr	r3, [r7, #16]
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	2b02      	cmp	r3, #2
 80042f4:	d901      	bls.n	80042fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e1de      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042fa:	4b5e      	ldr	r3, [pc, #376]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 80042fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004300:	f003 0302 	and.w	r3, r3, #2
 8004304:	2b00      	cmp	r3, #0
 8004306:	d0ef      	beq.n	80042e8 <HAL_RCC_OscConfig+0x3ec>
 8004308:	e01b      	b.n	8004342 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800430a:	4b5a      	ldr	r3, [pc, #360]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 800430c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004310:	4a58      	ldr	r2, [pc, #352]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 8004312:	f023 0301 	bic.w	r3, r3, #1
 8004316:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800431a:	f7fd ff23 	bl	8002164 <HAL_GetTick>
 800431e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004320:	e008      	b.n	8004334 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004322:	f7fd ff1f 	bl	8002164 <HAL_GetTick>
 8004326:	4602      	mov	r2, r0
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	1ad3      	subs	r3, r2, r3
 800432c:	2b02      	cmp	r3, #2
 800432e:	d901      	bls.n	8004334 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004330:	2303      	movs	r3, #3
 8004332:	e1c1      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004334:	4b4f      	ldr	r3, [pc, #316]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 8004336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1ef      	bne.n	8004322 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0304 	and.w	r3, r3, #4
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 80a6 	beq.w	800449c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004350:	2300      	movs	r3, #0
 8004352:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004354:	4b47      	ldr	r3, [pc, #284]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 8004356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d10d      	bne.n	800437c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004360:	4b44      	ldr	r3, [pc, #272]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 8004362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004364:	4a43      	ldr	r2, [pc, #268]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 8004366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800436a:	6593      	str	r3, [r2, #88]	; 0x58
 800436c:	4b41      	ldr	r3, [pc, #260]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 800436e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004374:	60bb      	str	r3, [r7, #8]
 8004376:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004378:	2301      	movs	r3, #1
 800437a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800437c:	4b3e      	ldr	r3, [pc, #248]	; (8004478 <HAL_RCC_OscConfig+0x57c>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004384:	2b00      	cmp	r3, #0
 8004386:	d118      	bne.n	80043ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004388:	4b3b      	ldr	r3, [pc, #236]	; (8004478 <HAL_RCC_OscConfig+0x57c>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a3a      	ldr	r2, [pc, #232]	; (8004478 <HAL_RCC_OscConfig+0x57c>)
 800438e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004392:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004394:	f7fd fee6 	bl	8002164 <HAL_GetTick>
 8004398:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800439a:	e008      	b.n	80043ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800439c:	f7fd fee2 	bl	8002164 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	2b02      	cmp	r3, #2
 80043a8:	d901      	bls.n	80043ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80043aa:	2303      	movs	r3, #3
 80043ac:	e184      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043ae:	4b32      	ldr	r3, [pc, #200]	; (8004478 <HAL_RCC_OscConfig+0x57c>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d0f0      	beq.n	800439c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d108      	bne.n	80043d4 <HAL_RCC_OscConfig+0x4d8>
 80043c2:	4b2c      	ldr	r3, [pc, #176]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 80043c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043c8:	4a2a      	ldr	r2, [pc, #168]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 80043ca:	f043 0301 	orr.w	r3, r3, #1
 80043ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043d2:	e024      	b.n	800441e <HAL_RCC_OscConfig+0x522>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2b05      	cmp	r3, #5
 80043da:	d110      	bne.n	80043fe <HAL_RCC_OscConfig+0x502>
 80043dc:	4b25      	ldr	r3, [pc, #148]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 80043de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043e2:	4a24      	ldr	r2, [pc, #144]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 80043e4:	f043 0304 	orr.w	r3, r3, #4
 80043e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043ec:	4b21      	ldr	r3, [pc, #132]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 80043ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f2:	4a20      	ldr	r2, [pc, #128]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 80043f4:	f043 0301 	orr.w	r3, r3, #1
 80043f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043fc:	e00f      	b.n	800441e <HAL_RCC_OscConfig+0x522>
 80043fe:	4b1d      	ldr	r3, [pc, #116]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 8004400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004404:	4a1b      	ldr	r2, [pc, #108]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 8004406:	f023 0301 	bic.w	r3, r3, #1
 800440a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800440e:	4b19      	ldr	r3, [pc, #100]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 8004410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004414:	4a17      	ldr	r2, [pc, #92]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 8004416:	f023 0304 	bic.w	r3, r3, #4
 800441a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d016      	beq.n	8004454 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004426:	f7fd fe9d 	bl	8002164 <HAL_GetTick>
 800442a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800442c:	e00a      	b.n	8004444 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800442e:	f7fd fe99 	bl	8002164 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	f241 3288 	movw	r2, #5000	; 0x1388
 800443c:	4293      	cmp	r3, r2
 800443e:	d901      	bls.n	8004444 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e139      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004444:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <HAL_RCC_OscConfig+0x578>)
 8004446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d0ed      	beq.n	800442e <HAL_RCC_OscConfig+0x532>
 8004452:	e01a      	b.n	800448a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004454:	f7fd fe86 	bl	8002164 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800445a:	e00f      	b.n	800447c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800445c:	f7fd fe82 	bl	8002164 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f241 3288 	movw	r2, #5000	; 0x1388
 800446a:	4293      	cmp	r3, r2
 800446c:	d906      	bls.n	800447c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e122      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
 8004472:	bf00      	nop
 8004474:	40021000 	.word	0x40021000
 8004478:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800447c:	4b90      	ldr	r3, [pc, #576]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d1e8      	bne.n	800445c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800448a:	7ffb      	ldrb	r3, [r7, #31]
 800448c:	2b01      	cmp	r3, #1
 800448e:	d105      	bne.n	800449c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004490:	4b8b      	ldr	r3, [pc, #556]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 8004492:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004494:	4a8a      	ldr	r2, [pc, #552]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 8004496:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800449a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 8108 	beq.w	80046b6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044aa:	2b02      	cmp	r3, #2
 80044ac:	f040 80d0 	bne.w	8004650 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80044b0:	4b83      	ldr	r3, [pc, #524]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	f003 0203 	and.w	r2, r3, #3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d130      	bne.n	8004526 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ce:	3b01      	subs	r3, #1
 80044d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d127      	bne.n	8004526 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d11f      	bne.n	8004526 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ec:	687a      	ldr	r2, [r7, #4]
 80044ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044f0:	2a07      	cmp	r2, #7
 80044f2:	bf14      	ite	ne
 80044f4:	2201      	movne	r2, #1
 80044f6:	2200      	moveq	r2, #0
 80044f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d113      	bne.n	8004526 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004508:	085b      	lsrs	r3, r3, #1
 800450a:	3b01      	subs	r3, #1
 800450c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800450e:	429a      	cmp	r2, r3
 8004510:	d109      	bne.n	8004526 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451c:	085b      	lsrs	r3, r3, #1
 800451e:	3b01      	subs	r3, #1
 8004520:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004522:	429a      	cmp	r2, r3
 8004524:	d06e      	beq.n	8004604 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	2b0c      	cmp	r3, #12
 800452a:	d069      	beq.n	8004600 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800452c:	4b64      	ldr	r3, [pc, #400]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004534:	2b00      	cmp	r3, #0
 8004536:	d105      	bne.n	8004544 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004538:	4b61      	ldr	r3, [pc, #388]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d001      	beq.n	8004548 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e0b7      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004548:	4b5d      	ldr	r3, [pc, #372]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a5c      	ldr	r2, [pc, #368]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 800454e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004552:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004554:	f7fd fe06 	bl	8002164 <HAL_GetTick>
 8004558:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800455a:	e008      	b.n	800456e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800455c:	f7fd fe02 	bl	8002164 <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	2b02      	cmp	r3, #2
 8004568:	d901      	bls.n	800456e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800456a:	2303      	movs	r3, #3
 800456c:	e0a4      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800456e:	4b54      	ldr	r3, [pc, #336]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f0      	bne.n	800455c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800457a:	4b51      	ldr	r3, [pc, #324]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	4b51      	ldr	r3, [pc, #324]	; (80046c4 <HAL_RCC_OscConfig+0x7c8>)
 8004580:	4013      	ands	r3, r2
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800458a:	3a01      	subs	r2, #1
 800458c:	0112      	lsls	r2, r2, #4
 800458e:	4311      	orrs	r1, r2
 8004590:	687a      	ldr	r2, [r7, #4]
 8004592:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004594:	0212      	lsls	r2, r2, #8
 8004596:	4311      	orrs	r1, r2
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800459c:	0852      	lsrs	r2, r2, #1
 800459e:	3a01      	subs	r2, #1
 80045a0:	0552      	lsls	r2, r2, #21
 80045a2:	4311      	orrs	r1, r2
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80045a8:	0852      	lsrs	r2, r2, #1
 80045aa:	3a01      	subs	r2, #1
 80045ac:	0652      	lsls	r2, r2, #25
 80045ae:	4311      	orrs	r1, r2
 80045b0:	687a      	ldr	r2, [r7, #4]
 80045b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80045b4:	0912      	lsrs	r2, r2, #4
 80045b6:	0452      	lsls	r2, r2, #17
 80045b8:	430a      	orrs	r2, r1
 80045ba:	4941      	ldr	r1, [pc, #260]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80045c0:	4b3f      	ldr	r3, [pc, #252]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a3e      	ldr	r2, [pc, #248]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 80045c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045cc:	4b3c      	ldr	r3, [pc, #240]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	4a3b      	ldr	r2, [pc, #236]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 80045d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045d8:	f7fd fdc4 	bl	8002164 <HAL_GetTick>
 80045dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045de:	e008      	b.n	80045f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045e0:	f7fd fdc0 	bl	8002164 <HAL_GetTick>
 80045e4:	4602      	mov	r2, r0
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	1ad3      	subs	r3, r2, r3
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d901      	bls.n	80045f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80045ee:	2303      	movs	r3, #3
 80045f0:	e062      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045f2:	4b33      	ldr	r3, [pc, #204]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d0f0      	beq.n	80045e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045fe:	e05a      	b.n	80046b6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e059      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004604:	4b2e      	ldr	r3, [pc, #184]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d152      	bne.n	80046b6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004610:	4b2b      	ldr	r3, [pc, #172]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a2a      	ldr	r2, [pc, #168]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 8004616:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800461a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800461c:	4b28      	ldr	r3, [pc, #160]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	4a27      	ldr	r2, [pc, #156]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 8004622:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004626:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004628:	f7fd fd9c 	bl	8002164 <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004630:	f7fd fd98 	bl	8002164 <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e03a      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004642:	4b1f      	ldr	r3, [pc, #124]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d0f0      	beq.n	8004630 <HAL_RCC_OscConfig+0x734>
 800464e:	e032      	b.n	80046b6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	2b0c      	cmp	r3, #12
 8004654:	d02d      	beq.n	80046b2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004656:	4b1a      	ldr	r3, [pc, #104]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a19      	ldr	r2, [pc, #100]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 800465c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004660:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004662:	4b17      	ldr	r3, [pc, #92]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d105      	bne.n	800467a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800466e:	4b14      	ldr	r3, [pc, #80]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	4a13      	ldr	r2, [pc, #76]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 8004674:	f023 0303 	bic.w	r3, r3, #3
 8004678:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800467a:	4b11      	ldr	r3, [pc, #68]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 800467c:	68db      	ldr	r3, [r3, #12]
 800467e:	4a10      	ldr	r2, [pc, #64]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 8004680:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004684:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004688:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800468a:	f7fd fd6b 	bl	8002164 <HAL_GetTick>
 800468e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004690:	e008      	b.n	80046a4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004692:	f7fd fd67 	bl	8002164 <HAL_GetTick>
 8004696:	4602      	mov	r2, r0
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	1ad3      	subs	r3, r2, r3
 800469c:	2b02      	cmp	r3, #2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e009      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80046a4:	4b06      	ldr	r3, [pc, #24]	; (80046c0 <HAL_RCC_OscConfig+0x7c4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1f0      	bne.n	8004692 <HAL_RCC_OscConfig+0x796>
 80046b0:	e001      	b.n	80046b6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3720      	adds	r7, #32
 80046bc:	46bd      	mov	sp, r7
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40021000 	.word	0x40021000
 80046c4:	f99d808c 	.word	0xf99d808c

080046c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d101      	bne.n	80046dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e0c8      	b.n	800486e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046dc:	4b66      	ldr	r3, [pc, #408]	; (8004878 <HAL_RCC_ClockConfig+0x1b0>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	683a      	ldr	r2, [r7, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d910      	bls.n	800470c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ea:	4b63      	ldr	r3, [pc, #396]	; (8004878 <HAL_RCC_ClockConfig+0x1b0>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f023 0207 	bic.w	r2, r3, #7
 80046f2:	4961      	ldr	r1, [pc, #388]	; (8004878 <HAL_RCC_ClockConfig+0x1b0>)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046fa:	4b5f      	ldr	r3, [pc, #380]	; (8004878 <HAL_RCC_ClockConfig+0x1b0>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0307 	and.w	r3, r3, #7
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	429a      	cmp	r2, r3
 8004706:	d001      	beq.n	800470c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e0b0      	b.n	800486e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0301 	and.w	r3, r3, #1
 8004714:	2b00      	cmp	r3, #0
 8004716:	d04c      	beq.n	80047b2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2b03      	cmp	r3, #3
 800471e:	d107      	bne.n	8004730 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004720:	4b56      	ldr	r3, [pc, #344]	; (800487c <HAL_RCC_ClockConfig+0x1b4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d121      	bne.n	8004770 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e09e      	b.n	800486e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b02      	cmp	r3, #2
 8004736:	d107      	bne.n	8004748 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004738:	4b50      	ldr	r3, [pc, #320]	; (800487c <HAL_RCC_ClockConfig+0x1b4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d115      	bne.n	8004770 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e092      	b.n	800486e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d107      	bne.n	8004760 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004750:	4b4a      	ldr	r3, [pc, #296]	; (800487c <HAL_RCC_ClockConfig+0x1b4>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 0302 	and.w	r3, r3, #2
 8004758:	2b00      	cmp	r3, #0
 800475a:	d109      	bne.n	8004770 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e086      	b.n	800486e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004760:	4b46      	ldr	r3, [pc, #280]	; (800487c <HAL_RCC_ClockConfig+0x1b4>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e07e      	b.n	800486e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004770:	4b42      	ldr	r3, [pc, #264]	; (800487c <HAL_RCC_ClockConfig+0x1b4>)
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f023 0203 	bic.w	r2, r3, #3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	685b      	ldr	r3, [r3, #4]
 800477c:	493f      	ldr	r1, [pc, #252]	; (800487c <HAL_RCC_ClockConfig+0x1b4>)
 800477e:	4313      	orrs	r3, r2
 8004780:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004782:	f7fd fcef 	bl	8002164 <HAL_GetTick>
 8004786:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004788:	e00a      	b.n	80047a0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800478a:	f7fd fceb 	bl	8002164 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	f241 3288 	movw	r2, #5000	; 0x1388
 8004798:	4293      	cmp	r3, r2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e066      	b.n	800486e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047a0:	4b36      	ldr	r3, [pc, #216]	; (800487c <HAL_RCC_ClockConfig+0x1b4>)
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 020c 	and.w	r2, r3, #12
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d1eb      	bne.n	800478a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0302 	and.w	r3, r3, #2
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d008      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047be:	4b2f      	ldr	r3, [pc, #188]	; (800487c <HAL_RCC_ClockConfig+0x1b4>)
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	492c      	ldr	r1, [pc, #176]	; (800487c <HAL_RCC_ClockConfig+0x1b4>)
 80047cc:	4313      	orrs	r3, r2
 80047ce:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047d0:	4b29      	ldr	r3, [pc, #164]	; (8004878 <HAL_RCC_ClockConfig+0x1b0>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f003 0307 	and.w	r3, r3, #7
 80047d8:	683a      	ldr	r2, [r7, #0]
 80047da:	429a      	cmp	r2, r3
 80047dc:	d210      	bcs.n	8004800 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047de:	4b26      	ldr	r3, [pc, #152]	; (8004878 <HAL_RCC_ClockConfig+0x1b0>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f023 0207 	bic.w	r2, r3, #7
 80047e6:	4924      	ldr	r1, [pc, #144]	; (8004878 <HAL_RCC_ClockConfig+0x1b0>)
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ee:	4b22      	ldr	r3, [pc, #136]	; (8004878 <HAL_RCC_ClockConfig+0x1b0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0307 	and.w	r3, r3, #7
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d001      	beq.n	8004800 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80047fc:	2301      	movs	r3, #1
 80047fe:	e036      	b.n	800486e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0304 	and.w	r3, r3, #4
 8004808:	2b00      	cmp	r3, #0
 800480a:	d008      	beq.n	800481e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800480c:	4b1b      	ldr	r3, [pc, #108]	; (800487c <HAL_RCC_ClockConfig+0x1b4>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	4918      	ldr	r1, [pc, #96]	; (800487c <HAL_RCC_ClockConfig+0x1b4>)
 800481a:	4313      	orrs	r3, r2
 800481c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0308 	and.w	r3, r3, #8
 8004826:	2b00      	cmp	r3, #0
 8004828:	d009      	beq.n	800483e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800482a:	4b14      	ldr	r3, [pc, #80]	; (800487c <HAL_RCC_ClockConfig+0x1b4>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	00db      	lsls	r3, r3, #3
 8004838:	4910      	ldr	r1, [pc, #64]	; (800487c <HAL_RCC_ClockConfig+0x1b4>)
 800483a:	4313      	orrs	r3, r2
 800483c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800483e:	f000 f825 	bl	800488c <HAL_RCC_GetSysClockFreq>
 8004842:	4602      	mov	r2, r0
 8004844:	4b0d      	ldr	r3, [pc, #52]	; (800487c <HAL_RCC_ClockConfig+0x1b4>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	091b      	lsrs	r3, r3, #4
 800484a:	f003 030f 	and.w	r3, r3, #15
 800484e:	490c      	ldr	r1, [pc, #48]	; (8004880 <HAL_RCC_ClockConfig+0x1b8>)
 8004850:	5ccb      	ldrb	r3, [r1, r3]
 8004852:	f003 031f 	and.w	r3, r3, #31
 8004856:	fa22 f303 	lsr.w	r3, r2, r3
 800485a:	4a0a      	ldr	r2, [pc, #40]	; (8004884 <HAL_RCC_ClockConfig+0x1bc>)
 800485c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800485e:	4b0a      	ldr	r3, [pc, #40]	; (8004888 <HAL_RCC_ClockConfig+0x1c0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f7fd f93c 	bl	8001ae0 <HAL_InitTick>
 8004868:	4603      	mov	r3, r0
 800486a:	72fb      	strb	r3, [r7, #11]

  return status;
 800486c:	7afb      	ldrb	r3, [r7, #11]
}
 800486e:	4618      	mov	r0, r3
 8004870:	3710      	adds	r7, #16
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	bf00      	nop
 8004878:	40022000 	.word	0x40022000
 800487c:	40021000 	.word	0x40021000
 8004880:	0800c900 	.word	0x0800c900
 8004884:	20000010 	.word	0x20000010
 8004888:	20000014 	.word	0x20000014

0800488c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800488c:	b480      	push	{r7}
 800488e:	b089      	sub	sp, #36	; 0x24
 8004890:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004892:	2300      	movs	r3, #0
 8004894:	61fb      	str	r3, [r7, #28]
 8004896:	2300      	movs	r3, #0
 8004898:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800489a:	4b3e      	ldr	r3, [pc, #248]	; (8004994 <HAL_RCC_GetSysClockFreq+0x108>)
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f003 030c 	and.w	r3, r3, #12
 80048a2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048a4:	4b3b      	ldr	r3, [pc, #236]	; (8004994 <HAL_RCC_GetSysClockFreq+0x108>)
 80048a6:	68db      	ldr	r3, [r3, #12]
 80048a8:	f003 0303 	and.w	r3, r3, #3
 80048ac:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80048ae:	693b      	ldr	r3, [r7, #16]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d005      	beq.n	80048c0 <HAL_RCC_GetSysClockFreq+0x34>
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	2b0c      	cmp	r3, #12
 80048b8:	d121      	bne.n	80048fe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d11e      	bne.n	80048fe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048c0:	4b34      	ldr	r3, [pc, #208]	; (8004994 <HAL_RCC_GetSysClockFreq+0x108>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d107      	bne.n	80048dc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048cc:	4b31      	ldr	r3, [pc, #196]	; (8004994 <HAL_RCC_GetSysClockFreq+0x108>)
 80048ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048d2:	0a1b      	lsrs	r3, r3, #8
 80048d4:	f003 030f 	and.w	r3, r3, #15
 80048d8:	61fb      	str	r3, [r7, #28]
 80048da:	e005      	b.n	80048e8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048dc:	4b2d      	ldr	r3, [pc, #180]	; (8004994 <HAL_RCC_GetSysClockFreq+0x108>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	091b      	lsrs	r3, r3, #4
 80048e2:	f003 030f 	and.w	r3, r3, #15
 80048e6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80048e8:	4a2b      	ldr	r2, [pc, #172]	; (8004998 <HAL_RCC_GetSysClockFreq+0x10c>)
 80048ea:	69fb      	ldr	r3, [r7, #28]
 80048ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048f0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d10d      	bne.n	8004914 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048fc:	e00a      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2b04      	cmp	r3, #4
 8004902:	d102      	bne.n	800490a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004904:	4b25      	ldr	r3, [pc, #148]	; (800499c <HAL_RCC_GetSysClockFreq+0x110>)
 8004906:	61bb      	str	r3, [r7, #24]
 8004908:	e004      	b.n	8004914 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	2b08      	cmp	r3, #8
 800490e:	d101      	bne.n	8004914 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004910:	4b23      	ldr	r3, [pc, #140]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x114>)
 8004912:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	2b0c      	cmp	r3, #12
 8004918:	d134      	bne.n	8004984 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800491a:	4b1e      	ldr	r3, [pc, #120]	; (8004994 <HAL_RCC_GetSysClockFreq+0x108>)
 800491c:	68db      	ldr	r3, [r3, #12]
 800491e:	f003 0303 	and.w	r3, r3, #3
 8004922:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b02      	cmp	r3, #2
 8004928:	d003      	beq.n	8004932 <HAL_RCC_GetSysClockFreq+0xa6>
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b03      	cmp	r3, #3
 800492e:	d003      	beq.n	8004938 <HAL_RCC_GetSysClockFreq+0xac>
 8004930:	e005      	b.n	800493e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004932:	4b1a      	ldr	r3, [pc, #104]	; (800499c <HAL_RCC_GetSysClockFreq+0x110>)
 8004934:	617b      	str	r3, [r7, #20]
      break;
 8004936:	e005      	b.n	8004944 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004938:	4b19      	ldr	r3, [pc, #100]	; (80049a0 <HAL_RCC_GetSysClockFreq+0x114>)
 800493a:	617b      	str	r3, [r7, #20]
      break;
 800493c:	e002      	b.n	8004944 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	617b      	str	r3, [r7, #20]
      break;
 8004942:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004944:	4b13      	ldr	r3, [pc, #76]	; (8004994 <HAL_RCC_GetSysClockFreq+0x108>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	091b      	lsrs	r3, r3, #4
 800494a:	f003 0307 	and.w	r3, r3, #7
 800494e:	3301      	adds	r3, #1
 8004950:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004952:	4b10      	ldr	r3, [pc, #64]	; (8004994 <HAL_RCC_GetSysClockFreq+0x108>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	0a1b      	lsrs	r3, r3, #8
 8004958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	fb02 f203 	mul.w	r2, r2, r3
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800496a:	4b0a      	ldr	r3, [pc, #40]	; (8004994 <HAL_RCC_GetSysClockFreq+0x108>)
 800496c:	68db      	ldr	r3, [r3, #12]
 800496e:	0e5b      	lsrs	r3, r3, #25
 8004970:	f003 0303 	and.w	r3, r3, #3
 8004974:	3301      	adds	r3, #1
 8004976:	005b      	lsls	r3, r3, #1
 8004978:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004982:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004984:	69bb      	ldr	r3, [r7, #24]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3724      	adds	r7, #36	; 0x24
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	40021000 	.word	0x40021000
 8004998:	0800c918 	.word	0x0800c918
 800499c:	00f42400 	.word	0x00f42400
 80049a0:	007a1200 	.word	0x007a1200

080049a4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80049a8:	4b03      	ldr	r3, [pc, #12]	; (80049b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80049aa:	681b      	ldr	r3, [r3, #0]
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	20000010 	.word	0x20000010

080049bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049c0:	f7ff fff0 	bl	80049a4 <HAL_RCC_GetHCLKFreq>
 80049c4:	4602      	mov	r2, r0
 80049c6:	4b06      	ldr	r3, [pc, #24]	; (80049e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	0a1b      	lsrs	r3, r3, #8
 80049cc:	f003 0307 	and.w	r3, r3, #7
 80049d0:	4904      	ldr	r1, [pc, #16]	; (80049e4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80049d2:	5ccb      	ldrb	r3, [r1, r3]
 80049d4:	f003 031f 	and.w	r3, r3, #31
 80049d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049dc:	4618      	mov	r0, r3
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40021000 	.word	0x40021000
 80049e4:	0800c910 	.word	0x0800c910

080049e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049ec:	f7ff ffda 	bl	80049a4 <HAL_RCC_GetHCLKFreq>
 80049f0:	4602      	mov	r2, r0
 80049f2:	4b06      	ldr	r3, [pc, #24]	; (8004a0c <HAL_RCC_GetPCLK2Freq+0x24>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	0adb      	lsrs	r3, r3, #11
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	4904      	ldr	r1, [pc, #16]	; (8004a10 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049fe:	5ccb      	ldrb	r3, [r1, r3]
 8004a00:	f003 031f 	and.w	r3, r3, #31
 8004a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40021000 	.word	0x40021000
 8004a10:	0800c910 	.word	0x0800c910

08004a14 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b083      	sub	sp, #12
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	220f      	movs	r2, #15
 8004a22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004a24:	4b12      	ldr	r3, [pc, #72]	; (8004a70 <HAL_RCC_GetClockConfig+0x5c>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f003 0203 	and.w	r2, r3, #3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004a30:	4b0f      	ldr	r3, [pc, #60]	; (8004a70 <HAL_RCC_GetClockConfig+0x5c>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004a3c:	4b0c      	ldr	r3, [pc, #48]	; (8004a70 <HAL_RCC_GetClockConfig+0x5c>)
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004a48:	4b09      	ldr	r3, [pc, #36]	; (8004a70 <HAL_RCC_GetClockConfig+0x5c>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	08db      	lsrs	r3, r3, #3
 8004a4e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004a56:	4b07      	ldr	r3, [pc, #28]	; (8004a74 <HAL_RCC_GetClockConfig+0x60>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0207 	and.w	r2, r3, #7
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	601a      	str	r2, [r3, #0]
}
 8004a62:	bf00      	nop
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr
 8004a6e:	bf00      	nop
 8004a70:	40021000 	.word	0x40021000
 8004a74:	40022000 	.word	0x40022000

08004a78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b086      	sub	sp, #24
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a80:	2300      	movs	r3, #0
 8004a82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a84:	4b2a      	ldr	r3, [pc, #168]	; (8004b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d003      	beq.n	8004a98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a90:	f7ff f9d0 	bl	8003e34 <HAL_PWREx_GetVoltageRange>
 8004a94:	6178      	str	r0, [r7, #20]
 8004a96:	e014      	b.n	8004ac2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a98:	4b25      	ldr	r3, [pc, #148]	; (8004b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9c:	4a24      	ldr	r2, [pc, #144]	; (8004b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8004aa4:	4b22      	ldr	r3, [pc, #136]	; (8004b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004ab0:	f7ff f9c0 	bl	8003e34 <HAL_PWREx_GetVoltageRange>
 8004ab4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004ab6:	4b1e      	ldr	r3, [pc, #120]	; (8004b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aba:	4a1d      	ldr	r2, [pc, #116]	; (8004b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ac8:	d10b      	bne.n	8004ae2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b80      	cmp	r3, #128	; 0x80
 8004ace:	d919      	bls.n	8004b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2ba0      	cmp	r3, #160	; 0xa0
 8004ad4:	d902      	bls.n	8004adc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ad6:	2302      	movs	r3, #2
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	e013      	b.n	8004b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004adc:	2301      	movs	r3, #1
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	e010      	b.n	8004b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b80      	cmp	r3, #128	; 0x80
 8004ae6:	d902      	bls.n	8004aee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ae8:	2303      	movs	r3, #3
 8004aea:	613b      	str	r3, [r7, #16]
 8004aec:	e00a      	b.n	8004b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b80      	cmp	r3, #128	; 0x80
 8004af2:	d102      	bne.n	8004afa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004af4:	2302      	movs	r3, #2
 8004af6:	613b      	str	r3, [r7, #16]
 8004af8:	e004      	b.n	8004b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2b70      	cmp	r3, #112	; 0x70
 8004afe:	d101      	bne.n	8004b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004b00:	2301      	movs	r3, #1
 8004b02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004b04:	4b0b      	ldr	r3, [pc, #44]	; (8004b34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f023 0207 	bic.w	r2, r3, #7
 8004b0c:	4909      	ldr	r1, [pc, #36]	; (8004b34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004b14:	4b07      	ldr	r3, [pc, #28]	; (8004b34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d001      	beq.n	8004b26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e000      	b.n	8004b28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3718      	adds	r7, #24
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}
 8004b30:	40021000 	.word	0x40021000
 8004b34:	40022000 	.word	0x40022000

08004b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b086      	sub	sp, #24
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b40:	2300      	movs	r3, #0
 8004b42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b44:	2300      	movs	r3, #0
 8004b46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d041      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b5c:	d02a      	beq.n	8004bb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004b5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b62:	d824      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b64:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b68:	d008      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b6e:	d81e      	bhi.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004b74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b78:	d010      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b7a:	e018      	b.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b7c:	4b86      	ldr	r3, [pc, #536]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	4a85      	ldr	r2, [pc, #532]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b86:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b88:	e015      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	3304      	adds	r3, #4
 8004b8e:	2100      	movs	r1, #0
 8004b90:	4618      	mov	r0, r3
 8004b92:	f000 fabb 	bl	800510c <RCCEx_PLLSAI1_Config>
 8004b96:	4603      	mov	r3, r0
 8004b98:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b9a:	e00c      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3320      	adds	r3, #32
 8004ba0:	2100      	movs	r1, #0
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f000 fba6 	bl	80052f4 <RCCEx_PLLSAI2_Config>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004bac:	e003      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	74fb      	strb	r3, [r7, #19]
      break;
 8004bb2:	e000      	b.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bb6:	7cfb      	ldrb	r3, [r7, #19]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10b      	bne.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004bbc:	4b76      	ldr	r3, [pc, #472]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bca:	4973      	ldr	r1, [pc, #460]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004bd2:	e001      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd4:	7cfb      	ldrb	r3, [r7, #19]
 8004bd6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d041      	beq.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004be8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bec:	d02a      	beq.n	8004c44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004bee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bf2:	d824      	bhi.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004bf4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bf8:	d008      	beq.n	8004c0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004bfa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004bfe:	d81e      	bhi.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00a      	beq.n	8004c1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004c04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004c08:	d010      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004c0a:	e018      	b.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004c0c:	4b62      	ldr	r3, [pc, #392]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	4a61      	ldr	r2, [pc, #388]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c18:	e015      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	2100      	movs	r1, #0
 8004c20:	4618      	mov	r0, r3
 8004c22:	f000 fa73 	bl	800510c <RCCEx_PLLSAI1_Config>
 8004c26:	4603      	mov	r3, r0
 8004c28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c2a:	e00c      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	3320      	adds	r3, #32
 8004c30:	2100      	movs	r1, #0
 8004c32:	4618      	mov	r0, r3
 8004c34:	f000 fb5e 	bl	80052f4 <RCCEx_PLLSAI2_Config>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c3c:	e003      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	74fb      	strb	r3, [r7, #19]
      break;
 8004c42:	e000      	b.n	8004c46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004c44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c46:	7cfb      	ldrb	r3, [r7, #19]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10b      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c4c:	4b52      	ldr	r3, [pc, #328]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c5a:	494f      	ldr	r1, [pc, #316]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c62:	e001      	b.n	8004c68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c64:	7cfb      	ldrb	r3, [r7, #19]
 8004c66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	f000 80a0 	beq.w	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c76:	2300      	movs	r3, #0
 8004c78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c7a:	4b47      	ldr	r3, [pc, #284]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004c86:	2301      	movs	r3, #1
 8004c88:	e000      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d00d      	beq.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c90:	4b41      	ldr	r3, [pc, #260]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c94:	4a40      	ldr	r2, [pc, #256]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004c9c:	4b3e      	ldr	r3, [pc, #248]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca4:	60bb      	str	r3, [r7, #8]
 8004ca6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004cac:	4b3b      	ldr	r3, [pc, #236]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a3a      	ldr	r2, [pc, #232]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004cb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cb8:	f7fd fa54 	bl	8002164 <HAL_GetTick>
 8004cbc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cbe:	e009      	b.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cc0:	f7fd fa50 	bl	8002164 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	2b02      	cmp	r3, #2
 8004ccc:	d902      	bls.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	74fb      	strb	r3, [r7, #19]
        break;
 8004cd2:	e005      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cd4:	4b31      	ldr	r3, [pc, #196]	; (8004d9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d0ef      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ce0:	7cfb      	ldrb	r3, [r7, #19]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d15c      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ce6:	4b2c      	ldr	r3, [pc, #176]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cf0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d01f      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	429a      	cmp	r2, r3
 8004d02:	d019      	beq.n	8004d38 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d04:	4b24      	ldr	r3, [pc, #144]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d10:	4b21      	ldr	r3, [pc, #132]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d16:	4a20      	ldr	r2, [pc, #128]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d20:	4b1d      	ldr	r3, [pc, #116]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d26:	4a1c      	ldr	r2, [pc, #112]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d30:	4a19      	ldr	r2, [pc, #100]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d016      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d42:	f7fd fa0f 	bl	8002164 <HAL_GetTick>
 8004d46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d48:	e00b      	b.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d4a:	f7fd fa0b 	bl	8002164 <HAL_GetTick>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	1ad3      	subs	r3, r2, r3
 8004d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d902      	bls.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	74fb      	strb	r3, [r7, #19]
            break;
 8004d60:	e006      	b.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d62:	4b0d      	ldr	r3, [pc, #52]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d0ec      	beq.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004d70:	7cfb      	ldrb	r3, [r7, #19]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d10c      	bne.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d76:	4b08      	ldr	r3, [pc, #32]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d86:	4904      	ldr	r1, [pc, #16]	; (8004d98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d8e:	e009      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d90:	7cfb      	ldrb	r3, [r7, #19]
 8004d92:	74bb      	strb	r3, [r7, #18]
 8004d94:	e006      	b.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004d96:	bf00      	nop
 8004d98:	40021000 	.word	0x40021000
 8004d9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004da0:	7cfb      	ldrb	r3, [r7, #19]
 8004da2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004da4:	7c7b      	ldrb	r3, [r7, #17]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d105      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004daa:	4b9e      	ldr	r3, [pc, #632]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dae:	4a9d      	ldr	r2, [pc, #628]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004db4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00a      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dc2:	4b98      	ldr	r3, [pc, #608]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	f023 0203 	bic.w	r2, r3, #3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd0:	4994      	ldr	r1, [pc, #592]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0302 	and.w	r3, r3, #2
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00a      	beq.n	8004dfa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004de4:	4b8f      	ldr	r3, [pc, #572]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dea:	f023 020c 	bic.w	r2, r3, #12
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df2:	498c      	ldr	r1, [pc, #560]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f003 0304 	and.w	r3, r3, #4
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d00a      	beq.n	8004e1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004e06:	4b87      	ldr	r3, [pc, #540]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e14:	4983      	ldr	r1, [pc, #524]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00a      	beq.n	8004e3e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e28:	4b7e      	ldr	r3, [pc, #504]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e36:	497b      	ldr	r1, [pc, #492]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e38:	4313      	orrs	r3, r2
 8004e3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0310 	and.w	r3, r3, #16
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d00a      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e4a:	4b76      	ldr	r3, [pc, #472]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e58:	4972      	ldr	r1, [pc, #456]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5a:	4313      	orrs	r3, r2
 8004e5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0320 	and.w	r3, r3, #32
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00a      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e6c:	4b6d      	ldr	r3, [pc, #436]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e7a:	496a      	ldr	r1, [pc, #424]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e7c:	4313      	orrs	r3, r2
 8004e7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d00a      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e8e:	4b65      	ldr	r3, [pc, #404]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e9c:	4961      	ldr	r1, [pc, #388]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00a      	beq.n	8004ec6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004eb0:	4b5c      	ldr	r3, [pc, #368]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ebe:	4959      	ldr	r1, [pc, #356]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d00a      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ed2:	4b54      	ldr	r3, [pc, #336]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ee0:	4950      	ldr	r1, [pc, #320]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00a      	beq.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ef4:	4b4b      	ldr	r3, [pc, #300]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f02:	4948      	ldr	r1, [pc, #288]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f16:	4b43      	ldr	r3, [pc, #268]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f24:	493f      	ldr	r1, [pc, #252]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d028      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f38:	4b3a      	ldr	r3, [pc, #232]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f46:	4937      	ldr	r1, [pc, #220]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f56:	d106      	bne.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f58:	4b32      	ldr	r3, [pc, #200]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	4a31      	ldr	r2, [pc, #196]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f62:	60d3      	str	r3, [r2, #12]
 8004f64:	e011      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f6e:	d10c      	bne.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	3304      	adds	r3, #4
 8004f74:	2101      	movs	r1, #1
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 f8c8 	bl	800510c <RCCEx_PLLSAI1_Config>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f80:	7cfb      	ldrb	r3, [r7, #19]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004f86:	7cfb      	ldrb	r3, [r7, #19]
 8004f88:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d028      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f96:	4b23      	ldr	r3, [pc, #140]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fa4:	491f      	ldr	r1, [pc, #124]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004fb4:	d106      	bne.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004fb6:	4b1b      	ldr	r3, [pc, #108]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fb8:	68db      	ldr	r3, [r3, #12]
 8004fba:	4a1a      	ldr	r2, [pc, #104]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fc0:	60d3      	str	r3, [r2, #12]
 8004fc2:	e011      	b.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fcc:	d10c      	bne.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	3304      	adds	r3, #4
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f000 f899 	bl	800510c <RCCEx_PLLSAI1_Config>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fde:	7cfb      	ldrb	r3, [r7, #19]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d001      	beq.n	8004fe8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004fe4:	7cfb      	ldrb	r3, [r7, #19]
 8004fe6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d02b      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ff4:	4b0b      	ldr	r3, [pc, #44]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ffa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005002:	4908      	ldr	r1, [pc, #32]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005004:	4313      	orrs	r3, r2
 8005006:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800500e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005012:	d109      	bne.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005014:	4b03      	ldr	r3, [pc, #12]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005016:	68db      	ldr	r3, [r3, #12]
 8005018:	4a02      	ldr	r2, [pc, #8]	; (8005024 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800501a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800501e:	60d3      	str	r3, [r2, #12]
 8005020:	e014      	b.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005022:	bf00      	nop
 8005024:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800502c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005030:	d10c      	bne.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	3304      	adds	r3, #4
 8005036:	2101      	movs	r1, #1
 8005038:	4618      	mov	r0, r3
 800503a:	f000 f867 	bl	800510c <RCCEx_PLLSAI1_Config>
 800503e:	4603      	mov	r3, r0
 8005040:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005042:	7cfb      	ldrb	r3, [r7, #19]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d001      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005048:	7cfb      	ldrb	r3, [r7, #19]
 800504a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005054:	2b00      	cmp	r3, #0
 8005056:	d02f      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005058:	4b2b      	ldr	r3, [pc, #172]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800505a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800505e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005066:	4928      	ldr	r1, [pc, #160]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005068:	4313      	orrs	r3, r2
 800506a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005072:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005076:	d10d      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3304      	adds	r3, #4
 800507c:	2102      	movs	r1, #2
 800507e:	4618      	mov	r0, r3
 8005080:	f000 f844 	bl	800510c <RCCEx_PLLSAI1_Config>
 8005084:	4603      	mov	r3, r0
 8005086:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005088:	7cfb      	ldrb	r3, [r7, #19]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d014      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800508e:	7cfb      	ldrb	r3, [r7, #19]
 8005090:	74bb      	strb	r3, [r7, #18]
 8005092:	e011      	b.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005098:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800509c:	d10c      	bne.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	3320      	adds	r3, #32
 80050a2:	2102      	movs	r1, #2
 80050a4:	4618      	mov	r0, r3
 80050a6:	f000 f925 	bl	80052f4 <RCCEx_PLLSAI2_Config>
 80050aa:	4603      	mov	r3, r0
 80050ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80050ae:	7cfb      	ldrb	r3, [r7, #19]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d001      	beq.n	80050b8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80050b4:	7cfb      	ldrb	r3, [r7, #19]
 80050b6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00a      	beq.n	80050da <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050c4:	4b10      	ldr	r3, [pc, #64]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050d2:	490d      	ldr	r1, [pc, #52]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d00b      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050e6:	4b08      	ldr	r3, [pc, #32]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050f6:	4904      	ldr	r1, [pc, #16]	; (8005108 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80050fe:	7cbb      	ldrb	r3, [r7, #18]
}
 8005100:	4618      	mov	r0, r3
 8005102:	3718      	adds	r7, #24
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40021000 	.word	0x40021000

0800510c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b084      	sub	sp, #16
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005116:	2300      	movs	r3, #0
 8005118:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800511a:	4b75      	ldr	r3, [pc, #468]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d018      	beq.n	8005158 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005126:	4b72      	ldr	r3, [pc, #456]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	f003 0203 	and.w	r2, r3, #3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	429a      	cmp	r2, r3
 8005134:	d10d      	bne.n	8005152 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
       ||
 800513a:	2b00      	cmp	r3, #0
 800513c:	d009      	beq.n	8005152 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800513e:	4b6c      	ldr	r3, [pc, #432]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005140:	68db      	ldr	r3, [r3, #12]
 8005142:	091b      	lsrs	r3, r3, #4
 8005144:	f003 0307 	and.w	r3, r3, #7
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
       ||
 800514e:	429a      	cmp	r2, r3
 8005150:	d047      	beq.n	80051e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	73fb      	strb	r3, [r7, #15]
 8005156:	e044      	b.n	80051e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	2b03      	cmp	r3, #3
 800515e:	d018      	beq.n	8005192 <RCCEx_PLLSAI1_Config+0x86>
 8005160:	2b03      	cmp	r3, #3
 8005162:	d825      	bhi.n	80051b0 <RCCEx_PLLSAI1_Config+0xa4>
 8005164:	2b01      	cmp	r3, #1
 8005166:	d002      	beq.n	800516e <RCCEx_PLLSAI1_Config+0x62>
 8005168:	2b02      	cmp	r3, #2
 800516a:	d009      	beq.n	8005180 <RCCEx_PLLSAI1_Config+0x74>
 800516c:	e020      	b.n	80051b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800516e:	4b60      	ldr	r3, [pc, #384]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d11d      	bne.n	80051b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800517e:	e01a      	b.n	80051b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005180:	4b5b      	ldr	r3, [pc, #364]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005188:	2b00      	cmp	r3, #0
 800518a:	d116      	bne.n	80051ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005190:	e013      	b.n	80051ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005192:	4b57      	ldr	r3, [pc, #348]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10f      	bne.n	80051be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800519e:	4b54      	ldr	r3, [pc, #336]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d109      	bne.n	80051be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051ae:	e006      	b.n	80051be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	73fb      	strb	r3, [r7, #15]
      break;
 80051b4:	e004      	b.n	80051c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051b6:	bf00      	nop
 80051b8:	e002      	b.n	80051c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051ba:	bf00      	nop
 80051bc:	e000      	b.n	80051c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051be:	bf00      	nop
    }

    if(status == HAL_OK)
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10d      	bne.n	80051e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051c6:	4b4a      	ldr	r3, [pc, #296]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6819      	ldr	r1, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	3b01      	subs	r3, #1
 80051d8:	011b      	lsls	r3, r3, #4
 80051da:	430b      	orrs	r3, r1
 80051dc:	4944      	ldr	r1, [pc, #272]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051e2:	7bfb      	ldrb	r3, [r7, #15]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d17d      	bne.n	80052e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80051e8:	4b41      	ldr	r3, [pc, #260]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a40      	ldr	r2, [pc, #256]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051f4:	f7fc ffb6 	bl	8002164 <HAL_GetTick>
 80051f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051fa:	e009      	b.n	8005210 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051fc:	f7fc ffb2 	bl	8002164 <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d902      	bls.n	8005210 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	73fb      	strb	r3, [r7, #15]
        break;
 800520e:	e005      	b.n	800521c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005210:	4b37      	ldr	r3, [pc, #220]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005218:	2b00      	cmp	r3, #0
 800521a:	d1ef      	bne.n	80051fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800521c:	7bfb      	ldrb	r3, [r7, #15]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d160      	bne.n	80052e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d111      	bne.n	800524c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005228:	4b31      	ldr	r3, [pc, #196]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005230:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005234:	687a      	ldr	r2, [r7, #4]
 8005236:	6892      	ldr	r2, [r2, #8]
 8005238:	0211      	lsls	r1, r2, #8
 800523a:	687a      	ldr	r2, [r7, #4]
 800523c:	68d2      	ldr	r2, [r2, #12]
 800523e:	0912      	lsrs	r2, r2, #4
 8005240:	0452      	lsls	r2, r2, #17
 8005242:	430a      	orrs	r2, r1
 8005244:	492a      	ldr	r1, [pc, #168]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005246:	4313      	orrs	r3, r2
 8005248:	610b      	str	r3, [r1, #16]
 800524a:	e027      	b.n	800529c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d112      	bne.n	8005278 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005252:	4b27      	ldr	r3, [pc, #156]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800525a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800525e:	687a      	ldr	r2, [r7, #4]
 8005260:	6892      	ldr	r2, [r2, #8]
 8005262:	0211      	lsls	r1, r2, #8
 8005264:	687a      	ldr	r2, [r7, #4]
 8005266:	6912      	ldr	r2, [r2, #16]
 8005268:	0852      	lsrs	r2, r2, #1
 800526a:	3a01      	subs	r2, #1
 800526c:	0552      	lsls	r2, r2, #21
 800526e:	430a      	orrs	r2, r1
 8005270:	491f      	ldr	r1, [pc, #124]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005272:	4313      	orrs	r3, r2
 8005274:	610b      	str	r3, [r1, #16]
 8005276:	e011      	b.n	800529c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005278:	4b1d      	ldr	r3, [pc, #116]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005280:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6892      	ldr	r2, [r2, #8]
 8005288:	0211      	lsls	r1, r2, #8
 800528a:	687a      	ldr	r2, [r7, #4]
 800528c:	6952      	ldr	r2, [r2, #20]
 800528e:	0852      	lsrs	r2, r2, #1
 8005290:	3a01      	subs	r2, #1
 8005292:	0652      	lsls	r2, r2, #25
 8005294:	430a      	orrs	r2, r1
 8005296:	4916      	ldr	r1, [pc, #88]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005298:	4313      	orrs	r3, r2
 800529a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800529c:	4b14      	ldr	r3, [pc, #80]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a13      	ldr	r2, [pc, #76]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a8:	f7fc ff5c 	bl	8002164 <HAL_GetTick>
 80052ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052ae:	e009      	b.n	80052c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80052b0:	f7fc ff58 	bl	8002164 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d902      	bls.n	80052c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	73fb      	strb	r3, [r7, #15]
          break;
 80052c2:	e005      	b.n	80052d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052c4:	4b0a      	ldr	r3, [pc, #40]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0ef      	beq.n	80052b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80052d0:	7bfb      	ldrb	r3, [r7, #15]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d106      	bne.n	80052e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80052d6:	4b06      	ldr	r3, [pc, #24]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052d8:	691a      	ldr	r2, [r3, #16]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	4904      	ldr	r1, [pc, #16]	; (80052f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80052e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3710      	adds	r7, #16
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	40021000 	.word	0x40021000

080052f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005302:	4b6a      	ldr	r3, [pc, #424]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d018      	beq.n	8005340 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800530e:	4b67      	ldr	r3, [pc, #412]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	f003 0203 	and.w	r2, r3, #3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d10d      	bne.n	800533a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
       ||
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005326:	4b61      	ldr	r3, [pc, #388]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	091b      	lsrs	r3, r3, #4
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	1c5a      	adds	r2, r3, #1
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
       ||
 8005336:	429a      	cmp	r2, r3
 8005338:	d047      	beq.n	80053ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	73fb      	strb	r3, [r7, #15]
 800533e:	e044      	b.n	80053ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2b03      	cmp	r3, #3
 8005346:	d018      	beq.n	800537a <RCCEx_PLLSAI2_Config+0x86>
 8005348:	2b03      	cmp	r3, #3
 800534a:	d825      	bhi.n	8005398 <RCCEx_PLLSAI2_Config+0xa4>
 800534c:	2b01      	cmp	r3, #1
 800534e:	d002      	beq.n	8005356 <RCCEx_PLLSAI2_Config+0x62>
 8005350:	2b02      	cmp	r3, #2
 8005352:	d009      	beq.n	8005368 <RCCEx_PLLSAI2_Config+0x74>
 8005354:	e020      	b.n	8005398 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005356:	4b55      	ldr	r3, [pc, #340]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d11d      	bne.n	800539e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005366:	e01a      	b.n	800539e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005368:	4b50      	ldr	r3, [pc, #320]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005370:	2b00      	cmp	r3, #0
 8005372:	d116      	bne.n	80053a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005374:	2301      	movs	r3, #1
 8005376:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005378:	e013      	b.n	80053a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800537a:	4b4c      	ldr	r3, [pc, #304]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d10f      	bne.n	80053a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005386:	4b49      	ldr	r3, [pc, #292]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d109      	bne.n	80053a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005396:	e006      	b.n	80053a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005398:	2301      	movs	r3, #1
 800539a:	73fb      	strb	r3, [r7, #15]
      break;
 800539c:	e004      	b.n	80053a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800539e:	bf00      	nop
 80053a0:	e002      	b.n	80053a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80053a2:	bf00      	nop
 80053a4:	e000      	b.n	80053a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80053a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80053a8:	7bfb      	ldrb	r3, [r7, #15]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10d      	bne.n	80053ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80053ae:	4b3f      	ldr	r3, [pc, #252]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80053b0:	68db      	ldr	r3, [r3, #12]
 80053b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6819      	ldr	r1, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	3b01      	subs	r3, #1
 80053c0:	011b      	lsls	r3, r3, #4
 80053c2:	430b      	orrs	r3, r1
 80053c4:	4939      	ldr	r1, [pc, #228]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053ca:	7bfb      	ldrb	r3, [r7, #15]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d167      	bne.n	80054a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80053d0:	4b36      	ldr	r3, [pc, #216]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a35      	ldr	r2, [pc, #212]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80053d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053dc:	f7fc fec2 	bl	8002164 <HAL_GetTick>
 80053e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053e2:	e009      	b.n	80053f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053e4:	f7fc febe 	bl	8002164 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d902      	bls.n	80053f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	73fb      	strb	r3, [r7, #15]
        break;
 80053f6:	e005      	b.n	8005404 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053f8:	4b2c      	ldr	r3, [pc, #176]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1ef      	bne.n	80053e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005404:	7bfb      	ldrb	r3, [r7, #15]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d14a      	bne.n	80054a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d111      	bne.n	8005434 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005410:	4b26      	ldr	r3, [pc, #152]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005412:	695b      	ldr	r3, [r3, #20]
 8005414:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005418:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	6892      	ldr	r2, [r2, #8]
 8005420:	0211      	lsls	r1, r2, #8
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	68d2      	ldr	r2, [r2, #12]
 8005426:	0912      	lsrs	r2, r2, #4
 8005428:	0452      	lsls	r2, r2, #17
 800542a:	430a      	orrs	r2, r1
 800542c:	491f      	ldr	r1, [pc, #124]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800542e:	4313      	orrs	r3, r2
 8005430:	614b      	str	r3, [r1, #20]
 8005432:	e011      	b.n	8005458 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005434:	4b1d      	ldr	r3, [pc, #116]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005436:	695b      	ldr	r3, [r3, #20]
 8005438:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800543c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	6892      	ldr	r2, [r2, #8]
 8005444:	0211      	lsls	r1, r2, #8
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	6912      	ldr	r2, [r2, #16]
 800544a:	0852      	lsrs	r2, r2, #1
 800544c:	3a01      	subs	r2, #1
 800544e:	0652      	lsls	r2, r2, #25
 8005450:	430a      	orrs	r2, r1
 8005452:	4916      	ldr	r1, [pc, #88]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005454:	4313      	orrs	r3, r2
 8005456:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005458:	4b14      	ldr	r3, [pc, #80]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a13      	ldr	r2, [pc, #76]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800545e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005462:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005464:	f7fc fe7e 	bl	8002164 <HAL_GetTick>
 8005468:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800546a:	e009      	b.n	8005480 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800546c:	f7fc fe7a 	bl	8002164 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d902      	bls.n	8005480 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	73fb      	strb	r3, [r7, #15]
          break;
 800547e:	e005      	b.n	800548c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005480:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d0ef      	beq.n	800546c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800548c:	7bfb      	ldrb	r3, [r7, #15]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d106      	bne.n	80054a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005492:	4b06      	ldr	r3, [pc, #24]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005494:	695a      	ldr	r2, [r3, #20]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	4904      	ldr	r1, [pc, #16]	; (80054ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800549c:	4313      	orrs	r3, r2
 800549e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	40021000 	.word	0x40021000

080054b0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d06c      	beq.n	800559c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7fc fa08 	bl	80018ec <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2202      	movs	r2, #2
 80054e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	22ca      	movs	r2, #202	; 0xca
 80054ea:	625a      	str	r2, [r3, #36]	; 0x24
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2253      	movs	r2, #83	; 0x53
 80054f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80054f4:	6878      	ldr	r0, [r7, #4]
 80054f6:	f000 fa49 	bl	800598c <RTC_EnterInitMode>
 80054fa:	4603      	mov	r3, r0
 80054fc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80054fe:	7bfb      	ldrb	r3, [r7, #15]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d14b      	bne.n	800559c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6812      	ldr	r2, [r2, #0]
 800550e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005512:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005516:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6899      	ldr	r1, [r3, #8]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685a      	ldr	r2, [r3, #4]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	431a      	orrs	r2, r3
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	699b      	ldr	r3, [r3, #24]
 800552c:	431a      	orrs	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	68d2      	ldr	r2, [r2, #12]
 800553e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	6919      	ldr	r1, [r3, #16]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	689b      	ldr	r3, [r3, #8]
 800554a:	041a      	lsls	r2, r3, #16
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	430a      	orrs	r2, r1
 8005552:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fa4d 	bl	80059f4 <RTC_ExitInitMode>
 800555a:	4603      	mov	r3, r0
 800555c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800555e:	7bfb      	ldrb	r3, [r7, #15]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d11b      	bne.n	800559c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f022 0203 	bic.w	r2, r2, #3
 8005572:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	69da      	ldr	r2, [r3, #28]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	695b      	ldr	r3, [r3, #20]
 8005582:	431a      	orrs	r2, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	430a      	orrs	r2, r1
 800558a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	22ff      	movs	r2, #255	; 0xff
 8005592:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2201      	movs	r2, #1
 8005598:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800559c:	7bfb      	ldrb	r3, [r7, #15]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3710      	adds	r7, #16
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80055a6:	b590      	push	{r4, r7, lr}
 80055a8:	b087      	sub	sp, #28
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	60b9      	str	r1, [r7, #8]
 80055b0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d101      	bne.n	80055c0 <HAL_RTC_SetTime+0x1a>
 80055bc:	2302      	movs	r3, #2
 80055be:	e08b      	b.n	80056d8 <HAL_RTC_SetTime+0x132>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2201      	movs	r2, #1
 80055c4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	22ca      	movs	r2, #202	; 0xca
 80055d6:	625a      	str	r2, [r3, #36]	; 0x24
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	2253      	movs	r2, #83	; 0x53
 80055de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80055e0:	68f8      	ldr	r0, [r7, #12]
 80055e2:	f000 f9d3 	bl	800598c <RTC_EnterInitMode>
 80055e6:	4603      	mov	r3, r0
 80055e8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80055ea:	7cfb      	ldrb	r3, [r7, #19]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d163      	bne.n	80056b8 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d126      	bne.n	8005644 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005600:	2b00      	cmp	r3, #0
 8005602:	d102      	bne.n	800560a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2200      	movs	r2, #0
 8005608:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	781b      	ldrb	r3, [r3, #0]
 800560e:	4618      	mov	r0, r3
 8005610:	f000 fa2e 	bl	8005a70 <RTC_ByteToBcd2>
 8005614:	4603      	mov	r3, r0
 8005616:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	785b      	ldrb	r3, [r3, #1]
 800561c:	4618      	mov	r0, r3
 800561e:	f000 fa27 	bl	8005a70 <RTC_ByteToBcd2>
 8005622:	4603      	mov	r3, r0
 8005624:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005626:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	789b      	ldrb	r3, [r3, #2]
 800562c:	4618      	mov	r0, r3
 800562e:	f000 fa1f 	bl	8005a70 <RTC_ByteToBcd2>
 8005632:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005634:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	78db      	ldrb	r3, [r3, #3]
 800563c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]
 8005642:	e018      	b.n	8005676 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564e:	2b00      	cmp	r3, #0
 8005650:	d102      	bne.n	8005658 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	2200      	movs	r2, #0
 8005656:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	785b      	ldrb	r3, [r3, #1]
 8005662:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005664:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800566a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	78db      	ldrb	r3, [r3, #3]
 8005670:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005672:	4313      	orrs	r3, r2
 8005674:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005680:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005684:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	689a      	ldr	r2, [r3, #8]
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005694:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	6899      	ldr	r1, [r3, #8]
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	68da      	ldr	r2, [r3, #12]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	691b      	ldr	r3, [r3, #16]
 80056a4:	431a      	orrs	r2, r3
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	430a      	orrs	r2, r1
 80056ac:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f000 f9a0 	bl	80059f4 <RTC_ExitInitMode>
 80056b4:	4603      	mov	r3, r0
 80056b6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	22ff      	movs	r2, #255	; 0xff
 80056be:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80056c0:	7cfb      	ldrb	r3, [r7, #19]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d103      	bne.n	80056ce <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2201      	movs	r2, #1
 80056ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80056d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80056d8:	4618      	mov	r0, r3
 80056da:	371c      	adds	r7, #28
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd90      	pop	{r4, r7, pc}

080056e0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b086      	sub	sp, #24
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800570e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005712:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	0c1b      	lsrs	r3, r3, #16
 8005718:	b2db      	uxtb	r3, r3
 800571a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800571e:	b2da      	uxtb	r2, r3
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005724:	697b      	ldr	r3, [r7, #20]
 8005726:	0a1b      	lsrs	r3, r3, #8
 8005728:	b2db      	uxtb	r3, r3
 800572a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800572e:	b2da      	uxtb	r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	b2db      	uxtb	r3, r3
 8005738:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800573c:	b2da      	uxtb	r2, r3
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005742:	697b      	ldr	r3, [r7, #20]
 8005744:	0d9b      	lsrs	r3, r3, #22
 8005746:	b2db      	uxtb	r3, r3
 8005748:	f003 0301 	and.w	r3, r3, #1
 800574c:	b2da      	uxtb	r2, r3
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d11a      	bne.n	800578e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	4618      	mov	r0, r3
 800575e:	f000 f9a7 	bl	8005ab0 <RTC_Bcd2ToByte>
 8005762:	4603      	mov	r3, r0
 8005764:	461a      	mov	r2, r3
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	785b      	ldrb	r3, [r3, #1]
 800576e:	4618      	mov	r0, r3
 8005770:	f000 f99e 	bl	8005ab0 <RTC_Bcd2ToByte>
 8005774:	4603      	mov	r3, r0
 8005776:	461a      	mov	r2, r3
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	789b      	ldrb	r3, [r3, #2]
 8005780:	4618      	mov	r0, r3
 8005782:	f000 f995 	bl	8005ab0 <RTC_Bcd2ToByte>
 8005786:	4603      	mov	r3, r0
 8005788:	461a      	mov	r2, r3
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800578e:	2300      	movs	r3, #0
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005798:	b590      	push	{r4, r7, lr}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_RTC_SetDate+0x1a>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e075      	b.n	800589e <HAL_RTC_SetDate+0x106>
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2202      	movs	r2, #2
 80057be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10e      	bne.n	80057e6 <HAL_RTC_SetDate+0x4e>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	785b      	ldrb	r3, [r3, #1]
 80057cc:	f003 0310 	and.w	r3, r3, #16
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d008      	beq.n	80057e6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	785b      	ldrb	r3, [r3, #1]
 80057d8:	f023 0310 	bic.w	r3, r3, #16
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	330a      	adds	r3, #10
 80057e0:	b2da      	uxtb	r2, r3
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d11c      	bne.n	8005826 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	78db      	ldrb	r3, [r3, #3]
 80057f0:	4618      	mov	r0, r3
 80057f2:	f000 f93d 	bl	8005a70 <RTC_ByteToBcd2>
 80057f6:	4603      	mov	r3, r0
 80057f8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	785b      	ldrb	r3, [r3, #1]
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 f936 	bl	8005a70 <RTC_ByteToBcd2>
 8005804:	4603      	mov	r3, r0
 8005806:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005808:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800580a:	68bb      	ldr	r3, [r7, #8]
 800580c:	789b      	ldrb	r3, [r3, #2]
 800580e:	4618      	mov	r0, r3
 8005810:	f000 f92e 	bl	8005a70 <RTC_ByteToBcd2>
 8005814:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005816:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005820:	4313      	orrs	r3, r2
 8005822:	617b      	str	r3, [r7, #20]
 8005824:	e00e      	b.n	8005844 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	78db      	ldrb	r3, [r3, #3]
 800582a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	785b      	ldrb	r3, [r3, #1]
 8005830:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005832:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005838:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005840:	4313      	orrs	r3, r2
 8005842:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	22ca      	movs	r2, #202	; 0xca
 800584a:	625a      	str	r2, [r3, #36]	; 0x24
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	2253      	movs	r2, #83	; 0x53
 8005852:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005854:	68f8      	ldr	r0, [r7, #12]
 8005856:	f000 f899 	bl	800598c <RTC_EnterInitMode>
 800585a:	4603      	mov	r3, r0
 800585c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800585e:	7cfb      	ldrb	r3, [r7, #19]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d10c      	bne.n	800587e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800586e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005872:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f000 f8bd 	bl	80059f4 <RTC_ExitInitMode>
 800587a:	4603      	mov	r3, r0
 800587c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	22ff      	movs	r2, #255	; 0xff
 8005884:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005886:	7cfb      	ldrb	r3, [r7, #19]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d103      	bne.n	8005894 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800589c:	7cfb      	ldrb	r3, [r7, #19]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	371c      	adds	r7, #28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd90      	pop	{r4, r7, pc}

080058a6 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80058a6:	b580      	push	{r7, lr}
 80058a8:	b086      	sub	sp, #24
 80058aa:	af00      	add	r7, sp, #0
 80058ac:	60f8      	str	r0, [r7, #12]
 80058ae:	60b9      	str	r1, [r7, #8]
 80058b0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80058bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80058c0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	0c1b      	lsrs	r3, r3, #16
 80058c6:	b2da      	uxtb	r2, r3
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	0a1b      	lsrs	r3, r3, #8
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	f003 031f 	and.w	r3, r3, #31
 80058d6:	b2da      	uxtb	r2, r3
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	b2db      	uxtb	r3, r3
 80058e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	0b5b      	lsrs	r3, r3, #13
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	f003 0307 	and.w	r3, r3, #7
 80058f4:	b2da      	uxtb	r2, r3
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d11a      	bne.n	8005936 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	78db      	ldrb	r3, [r3, #3]
 8005904:	4618      	mov	r0, r3
 8005906:	f000 f8d3 	bl	8005ab0 <RTC_Bcd2ToByte>
 800590a:	4603      	mov	r3, r0
 800590c:	461a      	mov	r2, r3
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	785b      	ldrb	r3, [r3, #1]
 8005916:	4618      	mov	r0, r3
 8005918:	f000 f8ca 	bl	8005ab0 <RTC_Bcd2ToByte>
 800591c:	4603      	mov	r3, r0
 800591e:	461a      	mov	r2, r3
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	789b      	ldrb	r3, [r3, #2]
 8005928:	4618      	mov	r0, r3
 800592a:	f000 f8c1 	bl	8005ab0 <RTC_Bcd2ToByte>
 800592e:	4603      	mov	r3, r0
 8005930:	461a      	mov	r2, r3
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3718      	adds	r7, #24
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	68da      	ldr	r2, [r3, #12]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005956:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005958:	f7fc fc04 	bl	8002164 <HAL_GetTick>
 800595c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800595e:	e009      	b.n	8005974 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005960:	f7fc fc00 	bl	8002164 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800596e:	d901      	bls.n	8005974 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005970:	2303      	movs	r3, #3
 8005972:	e007      	b.n	8005984 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	f003 0320 	and.w	r3, r3, #32
 800597e:	2b00      	cmp	r3, #0
 8005980:	d0ee      	beq.n	8005960 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d120      	bne.n	80059e8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f04f 32ff 	mov.w	r2, #4294967295
 80059ae:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80059b0:	f7fc fbd8 	bl	8002164 <HAL_GetTick>
 80059b4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80059b6:	e00d      	b.n	80059d4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80059b8:	f7fc fbd4 	bl	8002164 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059c6:	d905      	bls.n	80059d4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2203      	movs	r2, #3
 80059d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d102      	bne.n	80059e8 <RTC_EnterInitMode+0x5c>
 80059e2:	7bfb      	ldrb	r3, [r7, #15]
 80059e4:	2b03      	cmp	r3, #3
 80059e6:	d1e7      	bne.n	80059b8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
	...

080059f4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059fc:	2300      	movs	r3, #0
 80059fe:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005a00:	4b1a      	ldr	r3, [pc, #104]	; (8005a6c <RTC_ExitInitMode+0x78>)
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	4a19      	ldr	r2, [pc, #100]	; (8005a6c <RTC_ExitInitMode+0x78>)
 8005a06:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a0a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005a0c:	4b17      	ldr	r3, [pc, #92]	; (8005a6c <RTC_ExitInitMode+0x78>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f003 0320 	and.w	r3, r3, #32
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10c      	bne.n	8005a32 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff ff91 	bl	8005940 <HAL_RTC_WaitForSynchro>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d01e      	beq.n	8005a62 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2203      	movs	r2, #3
 8005a28:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	73fb      	strb	r3, [r7, #15]
 8005a30:	e017      	b.n	8005a62 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005a32:	4b0e      	ldr	r3, [pc, #56]	; (8005a6c <RTC_ExitInitMode+0x78>)
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	4a0d      	ldr	r2, [pc, #52]	; (8005a6c <RTC_ExitInitMode+0x78>)
 8005a38:	f023 0320 	bic.w	r3, r3, #32
 8005a3c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7ff ff7e 	bl	8005940 <HAL_RTC_WaitForSynchro>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d005      	beq.n	8005a56 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2203      	movs	r2, #3
 8005a4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005a56:	4b05      	ldr	r3, [pc, #20]	; (8005a6c <RTC_ExitInitMode+0x78>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	4a04      	ldr	r2, [pc, #16]	; (8005a6c <RTC_ExitInitMode+0x78>)
 8005a5c:	f043 0320 	orr.w	r3, r3, #32
 8005a60:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a64:	4618      	mov	r0, r3
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}
 8005a6c:	40002800 	.word	0x40002800

08005a70 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	4603      	mov	r3, r0
 8005a78:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005a7e:	79fb      	ldrb	r3, [r7, #7]
 8005a80:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005a82:	e005      	b.n	8005a90 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	3301      	adds	r3, #1
 8005a88:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005a8a:	7afb      	ldrb	r3, [r7, #11]
 8005a8c:	3b0a      	subs	r3, #10
 8005a8e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005a90:	7afb      	ldrb	r3, [r7, #11]
 8005a92:	2b09      	cmp	r3, #9
 8005a94:	d8f6      	bhi.n	8005a84 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	b2db      	uxtb	r3, r3
 8005a9a:	011b      	lsls	r3, r3, #4
 8005a9c:	b2da      	uxtb	r2, r3
 8005a9e:	7afb      	ldrb	r3, [r7, #11]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	b2db      	uxtb	r3, r3
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3714      	adds	r7, #20
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b085      	sub	sp, #20
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	4603      	mov	r3, r0
 8005ab8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005aba:	79fb      	ldrb	r3, [r7, #7]
 8005abc:	091b      	lsrs	r3, r3, #4
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	0092      	lsls	r2, r2, #2
 8005ac4:	4413      	add	r3, r2
 8005ac6:	005b      	lsls	r3, r3, #1
 8005ac8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005aca:	79fb      	ldrb	r3, [r7, #7]
 8005acc:	f003 030f 	and.w	r3, r3, #15
 8005ad0:	b2da      	uxtb	r2, r3
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
 8005ad4:	4413      	add	r3, r2
 8005ad6:	b2db      	uxtb	r3, r3
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3714      	adds	r7, #20
 8005adc:	46bd      	mov	sp, r7
 8005ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae2:	4770      	bx	lr

08005ae4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d101      	bne.n	8005af6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e095      	b.n	8005c22 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d108      	bne.n	8005b10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005b06:	d009      	beq.n	8005b1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	61da      	str	r2, [r3, #28]
 8005b0e:	e005      	b.n	8005b1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d106      	bne.n	8005b3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f7fb ff48 	bl	80019cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b5c:	d902      	bls.n	8005b64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
 8005b62:	e002      	b.n	8005b6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	68db      	ldr	r3, [r3, #12]
 8005b6e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b72:	d007      	beq.n	8005b84 <HAL_SPI_Init+0xa0>
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b7c:	d002      	beq.n	8005b84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689b      	ldr	r3, [r3, #8]
 8005b90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b94:	431a      	orrs	r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	691b      	ldr	r3, [r3, #16]
 8005b9a:	f003 0302 	and.w	r3, r3, #2
 8005b9e:	431a      	orrs	r2, r3
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	695b      	ldr	r3, [r3, #20]
 8005ba4:	f003 0301 	and.w	r3, r3, #1
 8005ba8:	431a      	orrs	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	69db      	ldr	r3, [r3, #28]
 8005bb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc6:	ea42 0103 	orr.w	r1, r2, r3
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	430a      	orrs	r2, r1
 8005bd8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	0c1b      	lsrs	r3, r3, #16
 8005be0:	f003 0204 	and.w	r2, r3, #4
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	f003 0310 	and.w	r3, r3, #16
 8005bec:	431a      	orrs	r2, r3
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bf2:	f003 0308 	and.w	r3, r3, #8
 8005bf6:	431a      	orrs	r2, r3
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005c00:	ea42 0103 	orr.w	r1, r2, r3
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	430a      	orrs	r2, r1
 8005c10:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b088      	sub	sp, #32
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	60b9      	str	r1, [r7, #8]
 8005c34:	603b      	str	r3, [r7, #0]
 8005c36:	4613      	mov	r3, r2
 8005c38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d101      	bne.n	8005c4c <HAL_SPI_Transmit+0x22>
 8005c48:	2302      	movs	r3, #2
 8005c4a:	e158      	b.n	8005efe <HAL_SPI_Transmit+0x2d4>
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c54:	f7fc fa86 	bl	8002164 <HAL_GetTick>
 8005c58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c5a:	88fb      	ldrh	r3, [r7, #6]
 8005c5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d002      	beq.n	8005c70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c6a:	2302      	movs	r3, #2
 8005c6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c6e:	e13d      	b.n	8005eec <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d002      	beq.n	8005c7c <HAL_SPI_Transmit+0x52>
 8005c76:	88fb      	ldrh	r3, [r7, #6]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d102      	bne.n	8005c82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c80:	e134      	b.n	8005eec <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2203      	movs	r2, #3
 8005c86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	68ba      	ldr	r2, [r7, #8]
 8005c94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	88fa      	ldrh	r2, [r7, #6]
 8005c9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	88fa      	ldrh	r2, [r7, #6]
 8005ca0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ccc:	d10f      	bne.n	8005cee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cdc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	681a      	ldr	r2, [r3, #0]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cf8:	2b40      	cmp	r3, #64	; 0x40
 8005cfa:	d007      	beq.n	8005d0c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d14:	d94b      	bls.n	8005dae <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	685b      	ldr	r3, [r3, #4]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <HAL_SPI_Transmit+0xfa>
 8005d1e:	8afb      	ldrh	r3, [r7, #22]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d13e      	bne.n	8005da2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d28:	881a      	ldrh	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d34:	1c9a      	adds	r2, r3, #2
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d3e:	b29b      	uxth	r3, r3
 8005d40:	3b01      	subs	r3, #1
 8005d42:	b29a      	uxth	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d48:	e02b      	b.n	8005da2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f003 0302 	and.w	r3, r3, #2
 8005d54:	2b02      	cmp	r3, #2
 8005d56:	d112      	bne.n	8005d7e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5c:	881a      	ldrh	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	1c9a      	adds	r2, r3, #2
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	3b01      	subs	r3, #1
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d7c:	e011      	b.n	8005da2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d7e:	f7fc f9f1 	bl	8002164 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d803      	bhi.n	8005d96 <HAL_SPI_Transmit+0x16c>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d94:	d102      	bne.n	8005d9c <HAL_SPI_Transmit+0x172>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d102      	bne.n	8005da2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005da0:	e0a4      	b.n	8005eec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1ce      	bne.n	8005d4a <HAL_SPI_Transmit+0x120>
 8005dac:	e07c      	b.n	8005ea8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	685b      	ldr	r3, [r3, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d002      	beq.n	8005dbc <HAL_SPI_Transmit+0x192>
 8005db6:	8afb      	ldrh	r3, [r7, #22]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d170      	bne.n	8005e9e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d912      	bls.n	8005dec <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dca:	881a      	ldrh	r2, [r3, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd6:	1c9a      	adds	r2, r3, #2
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	3b02      	subs	r3, #2
 8005de4:	b29a      	uxth	r2, r3
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dea:	e058      	b.n	8005e9e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	330c      	adds	r3, #12
 8005df6:	7812      	ldrb	r2, [r2, #0]
 8005df8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	3b01      	subs	r3, #1
 8005e0c:	b29a      	uxth	r2, r3
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005e12:	e044      	b.n	8005e9e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	f003 0302 	and.w	r3, r3, #2
 8005e1e:	2b02      	cmp	r3, #2
 8005e20:	d12b      	bne.n	8005e7a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d912      	bls.n	8005e52 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e30:	881a      	ldrh	r2, [r3, #0]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3c:	1c9a      	adds	r2, r3, #2
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e46:	b29b      	uxth	r3, r3
 8005e48:	3b02      	subs	r3, #2
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e50:	e025      	b.n	8005e9e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	330c      	adds	r3, #12
 8005e5c:	7812      	ldrb	r2, [r2, #0]
 8005e5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	1c5a      	adds	r2, r3, #1
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	3b01      	subs	r3, #1
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e78:	e011      	b.n	8005e9e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e7a:	f7fc f973 	bl	8002164 <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	69bb      	ldr	r3, [r7, #24]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d803      	bhi.n	8005e92 <HAL_SPI_Transmit+0x268>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e90:	d102      	bne.n	8005e98 <HAL_SPI_Transmit+0x26e>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d102      	bne.n	8005e9e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e9c:	e026      	b.n	8005eec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d1b5      	bne.n	8005e14 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ea8:	69ba      	ldr	r2, [r7, #24]
 8005eaa:	6839      	ldr	r1, [r7, #0]
 8005eac:	68f8      	ldr	r0, [r7, #12]
 8005eae:	f000 f949 	bl	8006144 <SPI_EndRxTxTransaction>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d002      	beq.n	8005ebe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	2220      	movs	r2, #32
 8005ebc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10a      	bne.n	8005edc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	613b      	str	r3, [r7, #16]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	613b      	str	r3, [r7, #16]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	689b      	ldr	r3, [r3, #8]
 8005ed8:	613b      	str	r3, [r7, #16]
 8005eda:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d002      	beq.n	8005eea <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	77fb      	strb	r3, [r7, #31]
 8005ee8:	e000      	b.n	8005eec <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005eea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005efc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3720      	adds	r7, #32
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}
	...

08005f08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b088      	sub	sp, #32
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	603b      	str	r3, [r7, #0]
 8005f14:	4613      	mov	r3, r2
 8005f16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f18:	f7fc f924 	bl	8002164 <HAL_GetTick>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f20:	1a9b      	subs	r3, r3, r2
 8005f22:	683a      	ldr	r2, [r7, #0]
 8005f24:	4413      	add	r3, r2
 8005f26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f28:	f7fc f91c 	bl	8002164 <HAL_GetTick>
 8005f2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f2e:	4b39      	ldr	r3, [pc, #228]	; (8006014 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	015b      	lsls	r3, r3, #5
 8005f34:	0d1b      	lsrs	r3, r3, #20
 8005f36:	69fa      	ldr	r2, [r7, #28]
 8005f38:	fb02 f303 	mul.w	r3, r2, r3
 8005f3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f3e:	e054      	b.n	8005fea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f46:	d050      	beq.n	8005fea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f48:	f7fc f90c 	bl	8002164 <HAL_GetTick>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	1ad3      	subs	r3, r2, r3
 8005f52:	69fa      	ldr	r2, [r7, #28]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d902      	bls.n	8005f5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d13d      	bne.n	8005fda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	685a      	ldr	r2, [r3, #4]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f76:	d111      	bne.n	8005f9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f80:	d004      	beq.n	8005f8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f8a:	d107      	bne.n	8005f9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	681a      	ldr	r2, [r3, #0]
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fa4:	d10f      	bne.n	8005fc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005fb4:	601a      	str	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e017      	b.n	800600a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005fda:	697b      	ldr	r3, [r7, #20]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d101      	bne.n	8005fe4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	3b01      	subs	r3, #1
 8005fe8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	689a      	ldr	r2, [r3, #8]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	68ba      	ldr	r2, [r7, #8]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	bf0c      	ite	eq
 8005ffa:	2301      	moveq	r3, #1
 8005ffc:	2300      	movne	r3, #0
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	461a      	mov	r2, r3
 8006002:	79fb      	ldrb	r3, [r7, #7]
 8006004:	429a      	cmp	r2, r3
 8006006:	d19b      	bne.n	8005f40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3720      	adds	r7, #32
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	bf00      	nop
 8006014:	20000010 	.word	0x20000010

08006018 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b08a      	sub	sp, #40	; 0x28
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006026:	2300      	movs	r3, #0
 8006028:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800602a:	f7fc f89b 	bl	8002164 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006032:	1a9b      	subs	r3, r3, r2
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	4413      	add	r3, r2
 8006038:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800603a:	f7fc f893 	bl	8002164 <HAL_GetTick>
 800603e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	330c      	adds	r3, #12
 8006046:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006048:	4b3d      	ldr	r3, [pc, #244]	; (8006140 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800604a:	681a      	ldr	r2, [r3, #0]
 800604c:	4613      	mov	r3, r2
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	4413      	add	r3, r2
 8006052:	00da      	lsls	r2, r3, #3
 8006054:	1ad3      	subs	r3, r2, r3
 8006056:	0d1b      	lsrs	r3, r3, #20
 8006058:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800605a:	fb02 f303 	mul.w	r3, r2, r3
 800605e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006060:	e060      	b.n	8006124 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006068:	d107      	bne.n	800607a <SPI_WaitFifoStateUntilTimeout+0x62>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d104      	bne.n	800607a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	b2db      	uxtb	r3, r3
 8006076:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006078:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006080:	d050      	beq.n	8006124 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006082:	f7fc f86f 	bl	8002164 <HAL_GetTick>
 8006086:	4602      	mov	r2, r0
 8006088:	6a3b      	ldr	r3, [r7, #32]
 800608a:	1ad3      	subs	r3, r2, r3
 800608c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800608e:	429a      	cmp	r2, r3
 8006090:	d902      	bls.n	8006098 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006094:	2b00      	cmp	r3, #0
 8006096:	d13d      	bne.n	8006114 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	685a      	ldr	r2, [r3, #4]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060b0:	d111      	bne.n	80060d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ba:	d004      	beq.n	80060c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060c4:	d107      	bne.n	80060d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060de:	d10f      	bne.n	8006100 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	681a      	ldr	r2, [r3, #0]
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	2200      	movs	r2, #0
 800610c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006110:	2303      	movs	r3, #3
 8006112:	e010      	b.n	8006136 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800611a:	2300      	movs	r3, #0
 800611c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	3b01      	subs	r3, #1
 8006122:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	689a      	ldr	r2, [r3, #8]
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	4013      	ands	r3, r2
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	429a      	cmp	r2, r3
 8006132:	d196      	bne.n	8006062 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3728      	adds	r7, #40	; 0x28
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	20000010 	.word	0x20000010

08006144 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	9300      	str	r3, [sp, #0]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2200      	movs	r2, #0
 8006158:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800615c:	68f8      	ldr	r0, [r7, #12]
 800615e:	f7ff ff5b 	bl	8006018 <SPI_WaitFifoStateUntilTimeout>
 8006162:	4603      	mov	r3, r0
 8006164:	2b00      	cmp	r3, #0
 8006166:	d007      	beq.n	8006178 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800616c:	f043 0220 	orr.w	r2, r3, #32
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006174:	2303      	movs	r3, #3
 8006176:	e027      	b.n	80061c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2200      	movs	r2, #0
 8006180:	2180      	movs	r1, #128	; 0x80
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f7ff fec0 	bl	8005f08 <SPI_WaitFlagStateUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d007      	beq.n	800619e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006192:	f043 0220 	orr.w	r2, r3, #32
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e014      	b.n	80061c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	9300      	str	r3, [sp, #0]
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80061aa:	68f8      	ldr	r0, [r7, #12]
 80061ac:	f7ff ff34 	bl	8006018 <SPI_WaitFifoStateUntilTimeout>
 80061b0:	4603      	mov	r3, r0
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d007      	beq.n	80061c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061ba:	f043 0220 	orr.w	r2, r3, #32
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e000      	b.n	80061c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3710      	adds	r7, #16
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}

080061d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e049      	b.n	8006276 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d106      	bne.n	80061fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7fb fdb2 	bl	8001d60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3304      	adds	r3, #4
 800620c:	4619      	mov	r1, r3
 800620e:	4610      	mov	r0, r2
 8006210:	f000 fd34 	bl	8006c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2201      	movs	r2, #1
 8006268:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3708      	adds	r7, #8
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
	...

08006280 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006280:	b480      	push	{r7}
 8006282:	b085      	sub	sp, #20
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800628e:	b2db      	uxtb	r3, r3
 8006290:	2b01      	cmp	r3, #1
 8006292:	d001      	beq.n	8006298 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006294:	2301      	movs	r3, #1
 8006296:	e04f      	b.n	8006338 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	68da      	ldr	r2, [r3, #12]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f042 0201 	orr.w	r2, r2, #1
 80062ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a23      	ldr	r2, [pc, #140]	; (8006344 <HAL_TIM_Base_Start_IT+0xc4>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d01d      	beq.n	80062f6 <HAL_TIM_Base_Start_IT+0x76>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c2:	d018      	beq.n	80062f6 <HAL_TIM_Base_Start_IT+0x76>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a1f      	ldr	r2, [pc, #124]	; (8006348 <HAL_TIM_Base_Start_IT+0xc8>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d013      	beq.n	80062f6 <HAL_TIM_Base_Start_IT+0x76>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a1e      	ldr	r2, [pc, #120]	; (800634c <HAL_TIM_Base_Start_IT+0xcc>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d00e      	beq.n	80062f6 <HAL_TIM_Base_Start_IT+0x76>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a1c      	ldr	r2, [pc, #112]	; (8006350 <HAL_TIM_Base_Start_IT+0xd0>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d009      	beq.n	80062f6 <HAL_TIM_Base_Start_IT+0x76>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a1b      	ldr	r2, [pc, #108]	; (8006354 <HAL_TIM_Base_Start_IT+0xd4>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d004      	beq.n	80062f6 <HAL_TIM_Base_Start_IT+0x76>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a19      	ldr	r2, [pc, #100]	; (8006358 <HAL_TIM_Base_Start_IT+0xd8>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d115      	bne.n	8006322 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689a      	ldr	r2, [r3, #8]
 80062fc:	4b17      	ldr	r3, [pc, #92]	; (800635c <HAL_TIM_Base_Start_IT+0xdc>)
 80062fe:	4013      	ands	r3, r2
 8006300:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2b06      	cmp	r3, #6
 8006306:	d015      	beq.n	8006334 <HAL_TIM_Base_Start_IT+0xb4>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800630e:	d011      	beq.n	8006334 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0201 	orr.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006320:	e008      	b.n	8006334 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	681a      	ldr	r2, [r3, #0]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f042 0201 	orr.w	r2, r2, #1
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	e000      	b.n	8006336 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006334:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3714      	adds	r7, #20
 800633c:	46bd      	mov	sp, r7
 800633e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006342:	4770      	bx	lr
 8006344:	40012c00 	.word	0x40012c00
 8006348:	40000400 	.word	0x40000400
 800634c:	40000800 	.word	0x40000800
 8006350:	40000c00 	.word	0x40000c00
 8006354:	40013400 	.word	0x40013400
 8006358:	40014000 	.word	0x40014000
 800635c:	00010007 	.word	0x00010007

08006360 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e049      	b.n	8006406 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006378:	b2db      	uxtb	r3, r3
 800637a:	2b00      	cmp	r3, #0
 800637c:	d106      	bne.n	800638c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2200      	movs	r2, #0
 8006382:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f841 	bl	800640e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2202      	movs	r2, #2
 8006390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	3304      	adds	r3, #4
 800639c:	4619      	mov	r1, r3
 800639e:	4610      	mov	r0, r2
 80063a0:	f000 fc6c 	bl	8006c7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2201      	movs	r2, #1
 80063f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2201      	movs	r2, #1
 8006400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006404:	2300      	movs	r3, #0
}
 8006406:	4618      	mov	r0, r3
 8006408:	3708      	adds	r7, #8
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}

0800640e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800640e:	b480      	push	{r7}
 8006410:	b083      	sub	sp, #12
 8006412:	af00      	add	r7, sp, #0
 8006414:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
	...

08006424 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b084      	sub	sp, #16
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d109      	bne.n	8006448 <HAL_TIM_PWM_Start+0x24>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800643a:	b2db      	uxtb	r3, r3
 800643c:	2b01      	cmp	r3, #1
 800643e:	bf14      	ite	ne
 8006440:	2301      	movne	r3, #1
 8006442:	2300      	moveq	r3, #0
 8006444:	b2db      	uxtb	r3, r3
 8006446:	e03c      	b.n	80064c2 <HAL_TIM_PWM_Start+0x9e>
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	2b04      	cmp	r3, #4
 800644c:	d109      	bne.n	8006462 <HAL_TIM_PWM_Start+0x3e>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b01      	cmp	r3, #1
 8006458:	bf14      	ite	ne
 800645a:	2301      	movne	r3, #1
 800645c:	2300      	moveq	r3, #0
 800645e:	b2db      	uxtb	r3, r3
 8006460:	e02f      	b.n	80064c2 <HAL_TIM_PWM_Start+0x9e>
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	2b08      	cmp	r3, #8
 8006466:	d109      	bne.n	800647c <HAL_TIM_PWM_Start+0x58>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800646e:	b2db      	uxtb	r3, r3
 8006470:	2b01      	cmp	r3, #1
 8006472:	bf14      	ite	ne
 8006474:	2301      	movne	r3, #1
 8006476:	2300      	moveq	r3, #0
 8006478:	b2db      	uxtb	r3, r3
 800647a:	e022      	b.n	80064c2 <HAL_TIM_PWM_Start+0x9e>
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	2b0c      	cmp	r3, #12
 8006480:	d109      	bne.n	8006496 <HAL_TIM_PWM_Start+0x72>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b01      	cmp	r3, #1
 800648c:	bf14      	ite	ne
 800648e:	2301      	movne	r3, #1
 8006490:	2300      	moveq	r3, #0
 8006492:	b2db      	uxtb	r3, r3
 8006494:	e015      	b.n	80064c2 <HAL_TIM_PWM_Start+0x9e>
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	2b10      	cmp	r3, #16
 800649a:	d109      	bne.n	80064b0 <HAL_TIM_PWM_Start+0x8c>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80064a2:	b2db      	uxtb	r3, r3
 80064a4:	2b01      	cmp	r3, #1
 80064a6:	bf14      	ite	ne
 80064a8:	2301      	movne	r3, #1
 80064aa:	2300      	moveq	r3, #0
 80064ac:	b2db      	uxtb	r3, r3
 80064ae:	e008      	b.n	80064c2 <HAL_TIM_PWM_Start+0x9e>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	bf14      	ite	ne
 80064bc:	2301      	movne	r3, #1
 80064be:	2300      	moveq	r3, #0
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d001      	beq.n	80064ca <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e09c      	b.n	8006604 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d104      	bne.n	80064da <HAL_TIM_PWM_Start+0xb6>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2202      	movs	r2, #2
 80064d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064d8:	e023      	b.n	8006522 <HAL_TIM_PWM_Start+0xfe>
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	2b04      	cmp	r3, #4
 80064de:	d104      	bne.n	80064ea <HAL_TIM_PWM_Start+0xc6>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064e8:	e01b      	b.n	8006522 <HAL_TIM_PWM_Start+0xfe>
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	2b08      	cmp	r3, #8
 80064ee:	d104      	bne.n	80064fa <HAL_TIM_PWM_Start+0xd6>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2202      	movs	r2, #2
 80064f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064f8:	e013      	b.n	8006522 <HAL_TIM_PWM_Start+0xfe>
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	2b0c      	cmp	r3, #12
 80064fe:	d104      	bne.n	800650a <HAL_TIM_PWM_Start+0xe6>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2202      	movs	r2, #2
 8006504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006508:	e00b      	b.n	8006522 <HAL_TIM_PWM_Start+0xfe>
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b10      	cmp	r3, #16
 800650e:	d104      	bne.n	800651a <HAL_TIM_PWM_Start+0xf6>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2202      	movs	r2, #2
 8006514:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006518:	e003      	b.n	8006522 <HAL_TIM_PWM_Start+0xfe>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2202      	movs	r2, #2
 800651e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2201      	movs	r2, #1
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	4618      	mov	r0, r3
 800652c:	f000 ffb0 	bl	8007490 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a35      	ldr	r2, [pc, #212]	; (800660c <HAL_TIM_PWM_Start+0x1e8>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d013      	beq.n	8006562 <HAL_TIM_PWM_Start+0x13e>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a34      	ldr	r2, [pc, #208]	; (8006610 <HAL_TIM_PWM_Start+0x1ec>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d00e      	beq.n	8006562 <HAL_TIM_PWM_Start+0x13e>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a32      	ldr	r2, [pc, #200]	; (8006614 <HAL_TIM_PWM_Start+0x1f0>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d009      	beq.n	8006562 <HAL_TIM_PWM_Start+0x13e>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4a31      	ldr	r2, [pc, #196]	; (8006618 <HAL_TIM_PWM_Start+0x1f4>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d004      	beq.n	8006562 <HAL_TIM_PWM_Start+0x13e>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	4a2f      	ldr	r2, [pc, #188]	; (800661c <HAL_TIM_PWM_Start+0x1f8>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d101      	bne.n	8006566 <HAL_TIM_PWM_Start+0x142>
 8006562:	2301      	movs	r3, #1
 8006564:	e000      	b.n	8006568 <HAL_TIM_PWM_Start+0x144>
 8006566:	2300      	movs	r3, #0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d007      	beq.n	800657c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800657a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a22      	ldr	r2, [pc, #136]	; (800660c <HAL_TIM_PWM_Start+0x1e8>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d01d      	beq.n	80065c2 <HAL_TIM_PWM_Start+0x19e>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800658e:	d018      	beq.n	80065c2 <HAL_TIM_PWM_Start+0x19e>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4a22      	ldr	r2, [pc, #136]	; (8006620 <HAL_TIM_PWM_Start+0x1fc>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d013      	beq.n	80065c2 <HAL_TIM_PWM_Start+0x19e>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a21      	ldr	r2, [pc, #132]	; (8006624 <HAL_TIM_PWM_Start+0x200>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d00e      	beq.n	80065c2 <HAL_TIM_PWM_Start+0x19e>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a1f      	ldr	r2, [pc, #124]	; (8006628 <HAL_TIM_PWM_Start+0x204>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d009      	beq.n	80065c2 <HAL_TIM_PWM_Start+0x19e>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a17      	ldr	r2, [pc, #92]	; (8006610 <HAL_TIM_PWM_Start+0x1ec>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d004      	beq.n	80065c2 <HAL_TIM_PWM_Start+0x19e>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a15      	ldr	r2, [pc, #84]	; (8006614 <HAL_TIM_PWM_Start+0x1f0>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d115      	bne.n	80065ee <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689a      	ldr	r2, [r3, #8]
 80065c8:	4b18      	ldr	r3, [pc, #96]	; (800662c <HAL_TIM_PWM_Start+0x208>)
 80065ca:	4013      	ands	r3, r2
 80065cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2b06      	cmp	r3, #6
 80065d2:	d015      	beq.n	8006600 <HAL_TIM_PWM_Start+0x1dc>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065da:	d011      	beq.n	8006600 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f042 0201 	orr.w	r2, r2, #1
 80065ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065ec:	e008      	b.n	8006600 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f042 0201 	orr.w	r2, r2, #1
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	e000      	b.n	8006602 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006600:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3710      	adds	r7, #16
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	40012c00 	.word	0x40012c00
 8006610:	40013400 	.word	0x40013400
 8006614:	40014000 	.word	0x40014000
 8006618:	40014400 	.word	0x40014400
 800661c:	40014800 	.word	0x40014800
 8006620:	40000400 	.word	0x40000400
 8006624:	40000800 	.word	0x40000800
 8006628:	40000c00 	.word	0x40000c00
 800662c:	00010007 	.word	0x00010007

08006630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b082      	sub	sp, #8
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b02      	cmp	r3, #2
 8006644:	d122      	bne.n	800668c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f003 0302 	and.w	r3, r3, #2
 8006650:	2b02      	cmp	r3, #2
 8006652:	d11b      	bne.n	800668c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f06f 0202 	mvn.w	r2, #2
 800665c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	699b      	ldr	r3, [r3, #24]
 800666a:	f003 0303 	and.w	r3, r3, #3
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fae3 	bl	8006c3e <HAL_TIM_IC_CaptureCallback>
 8006678:	e005      	b.n	8006686 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fad5 	bl	8006c2a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fae6 	bl	8006c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f003 0304 	and.w	r3, r3, #4
 8006696:	2b04      	cmp	r3, #4
 8006698:	d122      	bne.n	80066e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f003 0304 	and.w	r3, r3, #4
 80066a4:	2b04      	cmp	r3, #4
 80066a6:	d11b      	bne.n	80066e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f06f 0204 	mvn.w	r2, #4
 80066b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2202      	movs	r2, #2
 80066b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 fab9 	bl	8006c3e <HAL_TIM_IC_CaptureCallback>
 80066cc:	e005      	b.n	80066da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ce:	6878      	ldr	r0, [r7, #4]
 80066d0:	f000 faab 	bl	8006c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 fabc 	bl	8006c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	f003 0308 	and.w	r3, r3, #8
 80066ea:	2b08      	cmp	r3, #8
 80066ec:	d122      	bne.n	8006734 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	68db      	ldr	r3, [r3, #12]
 80066f4:	f003 0308 	and.w	r3, r3, #8
 80066f8:	2b08      	cmp	r3, #8
 80066fa:	d11b      	bne.n	8006734 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f06f 0208 	mvn.w	r2, #8
 8006704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2204      	movs	r2, #4
 800670a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	69db      	ldr	r3, [r3, #28]
 8006712:	f003 0303 	and.w	r3, r3, #3
 8006716:	2b00      	cmp	r3, #0
 8006718:	d003      	beq.n	8006722 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fa8f 	bl	8006c3e <HAL_TIM_IC_CaptureCallback>
 8006720:	e005      	b.n	800672e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fa81 	bl	8006c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f000 fa92 	bl	8006c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2200      	movs	r2, #0
 8006732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	691b      	ldr	r3, [r3, #16]
 800673a:	f003 0310 	and.w	r3, r3, #16
 800673e:	2b10      	cmp	r3, #16
 8006740:	d122      	bne.n	8006788 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f003 0310 	and.w	r3, r3, #16
 800674c:	2b10      	cmp	r3, #16
 800674e:	d11b      	bne.n	8006788 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f06f 0210 	mvn.w	r2, #16
 8006758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2208      	movs	r2, #8
 800675e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	69db      	ldr	r3, [r3, #28]
 8006766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800676a:	2b00      	cmp	r3, #0
 800676c:	d003      	beq.n	8006776 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fa65 	bl	8006c3e <HAL_TIM_IC_CaptureCallback>
 8006774:	e005      	b.n	8006782 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fa57 	bl	8006c2a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800677c:	6878      	ldr	r0, [r7, #4]
 800677e:	f000 fa68 	bl	8006c52 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	691b      	ldr	r3, [r3, #16]
 800678e:	f003 0301 	and.w	r3, r3, #1
 8006792:	2b01      	cmp	r3, #1
 8006794:	d10e      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	68db      	ldr	r3, [r3, #12]
 800679c:	f003 0301 	and.w	r3, r3, #1
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d107      	bne.n	80067b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f06f 0201 	mvn.w	r2, #1
 80067ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	f7fb f828 	bl	8001804 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067be:	2b80      	cmp	r3, #128	; 0x80
 80067c0:	d10e      	bne.n	80067e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067cc:	2b80      	cmp	r3, #128	; 0x80
 80067ce:	d107      	bne.n	80067e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 ff10 	bl	8007600 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067ee:	d10e      	bne.n	800680e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067fa:	2b80      	cmp	r3, #128	; 0x80
 80067fc:	d107      	bne.n	800680e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f000 ff03 	bl	8007614 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006818:	2b40      	cmp	r3, #64	; 0x40
 800681a:	d10e      	bne.n	800683a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006826:	2b40      	cmp	r3, #64	; 0x40
 8006828:	d107      	bne.n	800683a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f000 fa16 	bl	8006c66 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	f003 0320 	and.w	r3, r3, #32
 8006844:	2b20      	cmp	r3, #32
 8006846:	d10e      	bne.n	8006866 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f003 0320 	and.w	r3, r3, #32
 8006852:	2b20      	cmp	r3, #32
 8006854:	d107      	bne.n	8006866 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f06f 0220 	mvn.w	r2, #32
 800685e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fec3 	bl	80075ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006866:	bf00      	nop
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
	...

08006870 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800687c:	2300      	movs	r3, #0
 800687e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006886:	2b01      	cmp	r3, #1
 8006888:	d101      	bne.n	800688e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800688a:	2302      	movs	r3, #2
 800688c:	e0ff      	b.n	8006a8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2b14      	cmp	r3, #20
 800689a:	f200 80f0 	bhi.w	8006a7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800689e:	a201      	add	r2, pc, #4	; (adr r2, 80068a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80068a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a4:	080068f9 	.word	0x080068f9
 80068a8:	08006a7f 	.word	0x08006a7f
 80068ac:	08006a7f 	.word	0x08006a7f
 80068b0:	08006a7f 	.word	0x08006a7f
 80068b4:	08006939 	.word	0x08006939
 80068b8:	08006a7f 	.word	0x08006a7f
 80068bc:	08006a7f 	.word	0x08006a7f
 80068c0:	08006a7f 	.word	0x08006a7f
 80068c4:	0800697b 	.word	0x0800697b
 80068c8:	08006a7f 	.word	0x08006a7f
 80068cc:	08006a7f 	.word	0x08006a7f
 80068d0:	08006a7f 	.word	0x08006a7f
 80068d4:	080069bb 	.word	0x080069bb
 80068d8:	08006a7f 	.word	0x08006a7f
 80068dc:	08006a7f 	.word	0x08006a7f
 80068e0:	08006a7f 	.word	0x08006a7f
 80068e4:	080069fd 	.word	0x080069fd
 80068e8:	08006a7f 	.word	0x08006a7f
 80068ec:	08006a7f 	.word	0x08006a7f
 80068f0:	08006a7f 	.word	0x08006a7f
 80068f4:	08006a3d 	.word	0x08006a3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	68b9      	ldr	r1, [r7, #8]
 80068fe:	4618      	mov	r0, r3
 8006900:	f000 fa56 	bl	8006db0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	699a      	ldr	r2, [r3, #24]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f042 0208 	orr.w	r2, r2, #8
 8006912:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	699a      	ldr	r2, [r3, #24]
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0204 	bic.w	r2, r2, #4
 8006922:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6999      	ldr	r1, [r3, #24]
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	691a      	ldr	r2, [r3, #16]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	619a      	str	r2, [r3, #24]
      break;
 8006936:	e0a5      	b.n	8006a84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	4618      	mov	r0, r3
 8006940:	f000 fac6 	bl	8006ed0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	699a      	ldr	r2, [r3, #24]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006952:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	699a      	ldr	r2, [r3, #24]
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006962:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6999      	ldr	r1, [r3, #24]
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	021a      	lsls	r2, r3, #8
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	430a      	orrs	r2, r1
 8006976:	619a      	str	r2, [r3, #24]
      break;
 8006978:	e084      	b.n	8006a84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	68b9      	ldr	r1, [r7, #8]
 8006980:	4618      	mov	r0, r3
 8006982:	f000 fb2f 	bl	8006fe4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	69da      	ldr	r2, [r3, #28]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f042 0208 	orr.w	r2, r2, #8
 8006994:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	69da      	ldr	r2, [r3, #28]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f022 0204 	bic.w	r2, r2, #4
 80069a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	69d9      	ldr	r1, [r3, #28]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	691a      	ldr	r2, [r3, #16]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	430a      	orrs	r2, r1
 80069b6:	61da      	str	r2, [r3, #28]
      break;
 80069b8:	e064      	b.n	8006a84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	68b9      	ldr	r1, [r7, #8]
 80069c0:	4618      	mov	r0, r3
 80069c2:	f000 fb97 	bl	80070f4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	69da      	ldr	r2, [r3, #28]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	69da      	ldr	r2, [r3, #28]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	69d9      	ldr	r1, [r3, #28]
 80069ec:	68bb      	ldr	r3, [r7, #8]
 80069ee:	691b      	ldr	r3, [r3, #16]
 80069f0:	021a      	lsls	r2, r3, #8
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	61da      	str	r2, [r3, #28]
      break;
 80069fa:	e043      	b.n	8006a84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	68b9      	ldr	r1, [r7, #8]
 8006a02:	4618      	mov	r0, r3
 8006a04:	f000 fbe0 	bl	80071c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f042 0208 	orr.w	r2, r2, #8
 8006a16:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f022 0204 	bic.w	r2, r2, #4
 8006a26:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	691a      	ldr	r2, [r3, #16]
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	430a      	orrs	r2, r1
 8006a38:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a3a:	e023      	b.n	8006a84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68b9      	ldr	r1, [r7, #8]
 8006a42:	4618      	mov	r0, r3
 8006a44:	f000 fc24 	bl	8007290 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a6e:	68bb      	ldr	r3, [r7, #8]
 8006a70:	691b      	ldr	r3, [r3, #16]
 8006a72:	021a      	lsls	r2, r3, #8
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	430a      	orrs	r2, r1
 8006a7a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a7c:	e002      	b.n	8006a84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	75fb      	strb	r3, [r7, #23]
      break;
 8006a82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3718      	adds	r7, #24
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop

08006a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b084      	sub	sp, #16
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d101      	bne.n	8006ab4 <HAL_TIM_ConfigClockSource+0x1c>
 8006ab0:	2302      	movs	r3, #2
 8006ab2:	e0b6      	b.n	8006c22 <HAL_TIM_ConfigClockSource+0x18a>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2202      	movs	r2, #2
 8006ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ad2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006ad6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ade:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	68ba      	ldr	r2, [r7, #8]
 8006ae6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006af0:	d03e      	beq.n	8006b70 <HAL_TIM_ConfigClockSource+0xd8>
 8006af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006af6:	f200 8087 	bhi.w	8006c08 <HAL_TIM_ConfigClockSource+0x170>
 8006afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006afe:	f000 8086 	beq.w	8006c0e <HAL_TIM_ConfigClockSource+0x176>
 8006b02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b06:	d87f      	bhi.n	8006c08 <HAL_TIM_ConfigClockSource+0x170>
 8006b08:	2b70      	cmp	r3, #112	; 0x70
 8006b0a:	d01a      	beq.n	8006b42 <HAL_TIM_ConfigClockSource+0xaa>
 8006b0c:	2b70      	cmp	r3, #112	; 0x70
 8006b0e:	d87b      	bhi.n	8006c08 <HAL_TIM_ConfigClockSource+0x170>
 8006b10:	2b60      	cmp	r3, #96	; 0x60
 8006b12:	d050      	beq.n	8006bb6 <HAL_TIM_ConfigClockSource+0x11e>
 8006b14:	2b60      	cmp	r3, #96	; 0x60
 8006b16:	d877      	bhi.n	8006c08 <HAL_TIM_ConfigClockSource+0x170>
 8006b18:	2b50      	cmp	r3, #80	; 0x50
 8006b1a:	d03c      	beq.n	8006b96 <HAL_TIM_ConfigClockSource+0xfe>
 8006b1c:	2b50      	cmp	r3, #80	; 0x50
 8006b1e:	d873      	bhi.n	8006c08 <HAL_TIM_ConfigClockSource+0x170>
 8006b20:	2b40      	cmp	r3, #64	; 0x40
 8006b22:	d058      	beq.n	8006bd6 <HAL_TIM_ConfigClockSource+0x13e>
 8006b24:	2b40      	cmp	r3, #64	; 0x40
 8006b26:	d86f      	bhi.n	8006c08 <HAL_TIM_ConfigClockSource+0x170>
 8006b28:	2b30      	cmp	r3, #48	; 0x30
 8006b2a:	d064      	beq.n	8006bf6 <HAL_TIM_ConfigClockSource+0x15e>
 8006b2c:	2b30      	cmp	r3, #48	; 0x30
 8006b2e:	d86b      	bhi.n	8006c08 <HAL_TIM_ConfigClockSource+0x170>
 8006b30:	2b20      	cmp	r3, #32
 8006b32:	d060      	beq.n	8006bf6 <HAL_TIM_ConfigClockSource+0x15e>
 8006b34:	2b20      	cmp	r3, #32
 8006b36:	d867      	bhi.n	8006c08 <HAL_TIM_ConfigClockSource+0x170>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d05c      	beq.n	8006bf6 <HAL_TIM_ConfigClockSource+0x15e>
 8006b3c:	2b10      	cmp	r3, #16
 8006b3e:	d05a      	beq.n	8006bf6 <HAL_TIM_ConfigClockSource+0x15e>
 8006b40:	e062      	b.n	8006c08 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6818      	ldr	r0, [r3, #0]
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	6899      	ldr	r1, [r3, #8]
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	685a      	ldr	r2, [r3, #4]
 8006b4e:	683b      	ldr	r3, [r7, #0]
 8006b50:	68db      	ldr	r3, [r3, #12]
 8006b52:	f000 fc7d 	bl	8007450 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b5e:	68bb      	ldr	r3, [r7, #8]
 8006b60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	609a      	str	r2, [r3, #8]
      break;
 8006b6e:	e04f      	b.n	8006c10 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6818      	ldr	r0, [r3, #0]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	6899      	ldr	r1, [r3, #8]
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	685a      	ldr	r2, [r3, #4]
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	f000 fc66 	bl	8007450 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689a      	ldr	r2, [r3, #8]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b92:	609a      	str	r2, [r3, #8]
      break;
 8006b94:	e03c      	b.n	8006c10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6818      	ldr	r0, [r3, #0]
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	6859      	ldr	r1, [r3, #4]
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	f000 fbda 	bl	800735c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2150      	movs	r1, #80	; 0x50
 8006bae:	4618      	mov	r0, r3
 8006bb0:	f000 fc33 	bl	800741a <TIM_ITRx_SetConfig>
      break;
 8006bb4:	e02c      	b.n	8006c10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6818      	ldr	r0, [r3, #0]
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	6859      	ldr	r1, [r3, #4]
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	68db      	ldr	r3, [r3, #12]
 8006bc2:	461a      	mov	r2, r3
 8006bc4:	f000 fbf9 	bl	80073ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2160      	movs	r1, #96	; 0x60
 8006bce:	4618      	mov	r0, r3
 8006bd0:	f000 fc23 	bl	800741a <TIM_ITRx_SetConfig>
      break;
 8006bd4:	e01c      	b.n	8006c10 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6818      	ldr	r0, [r3, #0]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	6859      	ldr	r1, [r3, #4]
 8006bde:	683b      	ldr	r3, [r7, #0]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	461a      	mov	r2, r3
 8006be4:	f000 fbba 	bl	800735c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	2140      	movs	r1, #64	; 0x40
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f000 fc13 	bl	800741a <TIM_ITRx_SetConfig>
      break;
 8006bf4:	e00c      	b.n	8006c10 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681a      	ldr	r2, [r3, #0]
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4619      	mov	r1, r3
 8006c00:	4610      	mov	r0, r2
 8006c02:	f000 fc0a 	bl	800741a <TIM_ITRx_SetConfig>
      break;
 8006c06:	e003      	b.n	8006c10 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	73fb      	strb	r3, [r7, #15]
      break;
 8006c0c:	e000      	b.n	8006c10 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006c0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}

08006c2a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c2a:	b480      	push	{r7}
 8006c2c:	b083      	sub	sp, #12
 8006c2e:	af00      	add	r7, sp, #0
 8006c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c32:	bf00      	nop
 8006c34:	370c      	adds	r7, #12
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr

08006c3e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c3e:	b480      	push	{r7}
 8006c40:	b083      	sub	sp, #12
 8006c42:	af00      	add	r7, sp, #0
 8006c44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c46:	bf00      	nop
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c5a:	bf00      	nop
 8006c5c:	370c      	adds	r7, #12
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr

08006c66 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c66:	b480      	push	{r7}
 8006c68:	b083      	sub	sp, #12
 8006c6a:	af00      	add	r7, sp, #0
 8006c6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c6e:	bf00      	nop
 8006c70:	370c      	adds	r7, #12
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr
	...

08006c7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a40      	ldr	r2, [pc, #256]	; (8006d90 <TIM_Base_SetConfig+0x114>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d013      	beq.n	8006cbc <TIM_Base_SetConfig+0x40>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c9a:	d00f      	beq.n	8006cbc <TIM_Base_SetConfig+0x40>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a3d      	ldr	r2, [pc, #244]	; (8006d94 <TIM_Base_SetConfig+0x118>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d00b      	beq.n	8006cbc <TIM_Base_SetConfig+0x40>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a3c      	ldr	r2, [pc, #240]	; (8006d98 <TIM_Base_SetConfig+0x11c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d007      	beq.n	8006cbc <TIM_Base_SetConfig+0x40>
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a3b      	ldr	r2, [pc, #236]	; (8006d9c <TIM_Base_SetConfig+0x120>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d003      	beq.n	8006cbc <TIM_Base_SetConfig+0x40>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	4a3a      	ldr	r2, [pc, #232]	; (8006da0 <TIM_Base_SetConfig+0x124>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d108      	bne.n	8006cce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	685b      	ldr	r3, [r3, #4]
 8006cc8:	68fa      	ldr	r2, [r7, #12]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a2f      	ldr	r2, [pc, #188]	; (8006d90 <TIM_Base_SetConfig+0x114>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d01f      	beq.n	8006d16 <TIM_Base_SetConfig+0x9a>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cdc:	d01b      	beq.n	8006d16 <TIM_Base_SetConfig+0x9a>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a2c      	ldr	r2, [pc, #176]	; (8006d94 <TIM_Base_SetConfig+0x118>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d017      	beq.n	8006d16 <TIM_Base_SetConfig+0x9a>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a2b      	ldr	r2, [pc, #172]	; (8006d98 <TIM_Base_SetConfig+0x11c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d013      	beq.n	8006d16 <TIM_Base_SetConfig+0x9a>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a2a      	ldr	r2, [pc, #168]	; (8006d9c <TIM_Base_SetConfig+0x120>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d00f      	beq.n	8006d16 <TIM_Base_SetConfig+0x9a>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a29      	ldr	r2, [pc, #164]	; (8006da0 <TIM_Base_SetConfig+0x124>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d00b      	beq.n	8006d16 <TIM_Base_SetConfig+0x9a>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a28      	ldr	r2, [pc, #160]	; (8006da4 <TIM_Base_SetConfig+0x128>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d007      	beq.n	8006d16 <TIM_Base_SetConfig+0x9a>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a27      	ldr	r2, [pc, #156]	; (8006da8 <TIM_Base_SetConfig+0x12c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d003      	beq.n	8006d16 <TIM_Base_SetConfig+0x9a>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a26      	ldr	r2, [pc, #152]	; (8006dac <TIM_Base_SetConfig+0x130>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d108      	bne.n	8006d28 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	68db      	ldr	r3, [r3, #12]
 8006d22:	68fa      	ldr	r2, [r7, #12]
 8006d24:	4313      	orrs	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	695b      	ldr	r3, [r3, #20]
 8006d32:	4313      	orrs	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	689a      	ldr	r2, [r3, #8]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a10      	ldr	r2, [pc, #64]	; (8006d90 <TIM_Base_SetConfig+0x114>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d00f      	beq.n	8006d74 <TIM_Base_SetConfig+0xf8>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a12      	ldr	r2, [pc, #72]	; (8006da0 <TIM_Base_SetConfig+0x124>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d00b      	beq.n	8006d74 <TIM_Base_SetConfig+0xf8>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	4a11      	ldr	r2, [pc, #68]	; (8006da4 <TIM_Base_SetConfig+0x128>)
 8006d60:	4293      	cmp	r3, r2
 8006d62:	d007      	beq.n	8006d74 <TIM_Base_SetConfig+0xf8>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	4a10      	ldr	r2, [pc, #64]	; (8006da8 <TIM_Base_SetConfig+0x12c>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d003      	beq.n	8006d74 <TIM_Base_SetConfig+0xf8>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	4a0f      	ldr	r2, [pc, #60]	; (8006dac <TIM_Base_SetConfig+0x130>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d103      	bne.n	8006d7c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	691a      	ldr	r2, [r3, #16]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2201      	movs	r2, #1
 8006d80:	615a      	str	r2, [r3, #20]
}
 8006d82:	bf00      	nop
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	40012c00 	.word	0x40012c00
 8006d94:	40000400 	.word	0x40000400
 8006d98:	40000800 	.word	0x40000800
 8006d9c:	40000c00 	.word	0x40000c00
 8006da0:	40013400 	.word	0x40013400
 8006da4:	40014000 	.word	0x40014000
 8006da8:	40014400 	.word	0x40014400
 8006dac:	40014800 	.word	0x40014800

08006db0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b087      	sub	sp, #28
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	f023 0201 	bic.w	r2, r3, #1
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6a1b      	ldr	r3, [r3, #32]
 8006dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	685b      	ldr	r3, [r3, #4]
 8006dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	f023 0303 	bic.w	r3, r3, #3
 8006dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	68fa      	ldr	r2, [r7, #12]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	f023 0302 	bic.w	r3, r3, #2
 8006dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	689b      	ldr	r3, [r3, #8]
 8006e02:	697a      	ldr	r2, [r7, #20]
 8006e04:	4313      	orrs	r3, r2
 8006e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a2c      	ldr	r2, [pc, #176]	; (8006ebc <TIM_OC1_SetConfig+0x10c>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d00f      	beq.n	8006e30 <TIM_OC1_SetConfig+0x80>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a2b      	ldr	r2, [pc, #172]	; (8006ec0 <TIM_OC1_SetConfig+0x110>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d00b      	beq.n	8006e30 <TIM_OC1_SetConfig+0x80>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	4a2a      	ldr	r2, [pc, #168]	; (8006ec4 <TIM_OC1_SetConfig+0x114>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d007      	beq.n	8006e30 <TIM_OC1_SetConfig+0x80>
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	4a29      	ldr	r2, [pc, #164]	; (8006ec8 <TIM_OC1_SetConfig+0x118>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d003      	beq.n	8006e30 <TIM_OC1_SetConfig+0x80>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	4a28      	ldr	r2, [pc, #160]	; (8006ecc <TIM_OC1_SetConfig+0x11c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d10c      	bne.n	8006e4a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f023 0308 	bic.w	r3, r3, #8
 8006e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	4313      	orrs	r3, r2
 8006e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f023 0304 	bic.w	r3, r3, #4
 8006e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a1b      	ldr	r2, [pc, #108]	; (8006ebc <TIM_OC1_SetConfig+0x10c>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d00f      	beq.n	8006e72 <TIM_OC1_SetConfig+0xc2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a1a      	ldr	r2, [pc, #104]	; (8006ec0 <TIM_OC1_SetConfig+0x110>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d00b      	beq.n	8006e72 <TIM_OC1_SetConfig+0xc2>
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a19      	ldr	r2, [pc, #100]	; (8006ec4 <TIM_OC1_SetConfig+0x114>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d007      	beq.n	8006e72 <TIM_OC1_SetConfig+0xc2>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	4a18      	ldr	r2, [pc, #96]	; (8006ec8 <TIM_OC1_SetConfig+0x118>)
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d003      	beq.n	8006e72 <TIM_OC1_SetConfig+0xc2>
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a17      	ldr	r2, [pc, #92]	; (8006ecc <TIM_OC1_SetConfig+0x11c>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d111      	bne.n	8006e96 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	695b      	ldr	r3, [r3, #20]
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	693a      	ldr	r2, [r7, #16]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	685a      	ldr	r2, [r3, #4]
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	621a      	str	r2, [r3, #32]
}
 8006eb0:	bf00      	nop
 8006eb2:	371c      	adds	r7, #28
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	40012c00 	.word	0x40012c00
 8006ec0:	40013400 	.word	0x40013400
 8006ec4:	40014000 	.word	0x40014000
 8006ec8:	40014400 	.word	0x40014400
 8006ecc:	40014800 	.word	0x40014800

08006ed0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
 8006ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6a1b      	ldr	r3, [r3, #32]
 8006ede:	f023 0210 	bic.w	r2, r3, #16
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6a1b      	ldr	r3, [r3, #32]
 8006eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	699b      	ldr	r3, [r3, #24]
 8006ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006efe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	021b      	lsls	r3, r3, #8
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f023 0320 	bic.w	r3, r3, #32
 8006f1e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	011b      	lsls	r3, r3, #4
 8006f26:	697a      	ldr	r2, [r7, #20]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	4a28      	ldr	r2, [pc, #160]	; (8006fd0 <TIM_OC2_SetConfig+0x100>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d003      	beq.n	8006f3c <TIM_OC2_SetConfig+0x6c>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	4a27      	ldr	r2, [pc, #156]	; (8006fd4 <TIM_OC2_SetConfig+0x104>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d10d      	bne.n	8006f58 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	011b      	lsls	r3, r3, #4
 8006f4a:	697a      	ldr	r2, [r7, #20]
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f50:	697b      	ldr	r3, [r7, #20]
 8006f52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a1d      	ldr	r2, [pc, #116]	; (8006fd0 <TIM_OC2_SetConfig+0x100>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d00f      	beq.n	8006f80 <TIM_OC2_SetConfig+0xb0>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a1c      	ldr	r2, [pc, #112]	; (8006fd4 <TIM_OC2_SetConfig+0x104>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d00b      	beq.n	8006f80 <TIM_OC2_SetConfig+0xb0>
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	4a1b      	ldr	r2, [pc, #108]	; (8006fd8 <TIM_OC2_SetConfig+0x108>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d007      	beq.n	8006f80 <TIM_OC2_SetConfig+0xb0>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	4a1a      	ldr	r2, [pc, #104]	; (8006fdc <TIM_OC2_SetConfig+0x10c>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d003      	beq.n	8006f80 <TIM_OC2_SetConfig+0xb0>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	4a19      	ldr	r2, [pc, #100]	; (8006fe0 <TIM_OC2_SetConfig+0x110>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d113      	bne.n	8006fa8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f80:	693b      	ldr	r3, [r7, #16]
 8006f82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f88:	693b      	ldr	r3, [r7, #16]
 8006f8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	695b      	ldr	r3, [r3, #20]
 8006f94:	009b      	lsls	r3, r3, #2
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	693a      	ldr	r2, [r7, #16]
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	68fa      	ldr	r2, [r7, #12]
 8006fb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	685a      	ldr	r2, [r3, #4]
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	697a      	ldr	r2, [r7, #20]
 8006fc0:	621a      	str	r2, [r3, #32]
}
 8006fc2:	bf00      	nop
 8006fc4:	371c      	adds	r7, #28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	40012c00 	.word	0x40012c00
 8006fd4:	40013400 	.word	0x40013400
 8006fd8:	40014000 	.word	0x40014000
 8006fdc:	40014400 	.word	0x40014400
 8006fe0:	40014800 	.word	0x40014800

08006fe4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b087      	sub	sp, #28
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6a1b      	ldr	r3, [r3, #32]
 8006ff2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6a1b      	ldr	r3, [r3, #32]
 8006ffe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007012:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f023 0303 	bic.w	r3, r3, #3
 800701e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	4313      	orrs	r3, r2
 8007028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	021b      	lsls	r3, r3, #8
 8007038:	697a      	ldr	r2, [r7, #20]
 800703a:	4313      	orrs	r3, r2
 800703c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	4a27      	ldr	r2, [pc, #156]	; (80070e0 <TIM_OC3_SetConfig+0xfc>)
 8007042:	4293      	cmp	r3, r2
 8007044:	d003      	beq.n	800704e <TIM_OC3_SetConfig+0x6a>
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a26      	ldr	r2, [pc, #152]	; (80070e4 <TIM_OC3_SetConfig+0x100>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d10d      	bne.n	800706a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800704e:	697b      	ldr	r3, [r7, #20]
 8007050:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007054:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	021b      	lsls	r3, r3, #8
 800705c:	697a      	ldr	r2, [r7, #20]
 800705e:	4313      	orrs	r3, r2
 8007060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a1c      	ldr	r2, [pc, #112]	; (80070e0 <TIM_OC3_SetConfig+0xfc>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d00f      	beq.n	8007092 <TIM_OC3_SetConfig+0xae>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a1b      	ldr	r2, [pc, #108]	; (80070e4 <TIM_OC3_SetConfig+0x100>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d00b      	beq.n	8007092 <TIM_OC3_SetConfig+0xae>
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	4a1a      	ldr	r2, [pc, #104]	; (80070e8 <TIM_OC3_SetConfig+0x104>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d007      	beq.n	8007092 <TIM_OC3_SetConfig+0xae>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	4a19      	ldr	r2, [pc, #100]	; (80070ec <TIM_OC3_SetConfig+0x108>)
 8007086:	4293      	cmp	r3, r2
 8007088:	d003      	beq.n	8007092 <TIM_OC3_SetConfig+0xae>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	4a18      	ldr	r2, [pc, #96]	; (80070f0 <TIM_OC3_SetConfig+0x10c>)
 800708e:	4293      	cmp	r3, r2
 8007090:	d113      	bne.n	80070ba <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	695b      	ldr	r3, [r3, #20]
 80070a6:	011b      	lsls	r3, r3, #4
 80070a8:	693a      	ldr	r2, [r7, #16]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	699b      	ldr	r3, [r3, #24]
 80070b2:	011b      	lsls	r3, r3, #4
 80070b4:	693a      	ldr	r2, [r7, #16]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	693a      	ldr	r2, [r7, #16]
 80070be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	685a      	ldr	r2, [r3, #4]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	697a      	ldr	r2, [r7, #20]
 80070d2:	621a      	str	r2, [r3, #32]
}
 80070d4:	bf00      	nop
 80070d6:	371c      	adds	r7, #28
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr
 80070e0:	40012c00 	.word	0x40012c00
 80070e4:	40013400 	.word	0x40013400
 80070e8:	40014000 	.word	0x40014000
 80070ec:	40014400 	.word	0x40014400
 80070f0:	40014800 	.word	0x40014800

080070f4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b087      	sub	sp, #28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800712e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	021b      	lsls	r3, r3, #8
 8007136:	68fa      	ldr	r2, [r7, #12]
 8007138:	4313      	orrs	r3, r2
 800713a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007142:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	031b      	lsls	r3, r3, #12
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	4313      	orrs	r3, r2
 800714e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a18      	ldr	r2, [pc, #96]	; (80071b4 <TIM_OC4_SetConfig+0xc0>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d00f      	beq.n	8007178 <TIM_OC4_SetConfig+0x84>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a17      	ldr	r2, [pc, #92]	; (80071b8 <TIM_OC4_SetConfig+0xc4>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d00b      	beq.n	8007178 <TIM_OC4_SetConfig+0x84>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a16      	ldr	r2, [pc, #88]	; (80071bc <TIM_OC4_SetConfig+0xc8>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d007      	beq.n	8007178 <TIM_OC4_SetConfig+0x84>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a15      	ldr	r2, [pc, #84]	; (80071c0 <TIM_OC4_SetConfig+0xcc>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d003      	beq.n	8007178 <TIM_OC4_SetConfig+0x84>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a14      	ldr	r2, [pc, #80]	; (80071c4 <TIM_OC4_SetConfig+0xd0>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d109      	bne.n	800718c <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800717e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	019b      	lsls	r3, r3, #6
 8007186:	697a      	ldr	r2, [r7, #20]
 8007188:	4313      	orrs	r3, r2
 800718a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	697a      	ldr	r2, [r7, #20]
 8007190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	693a      	ldr	r2, [r7, #16]
 80071a4:	621a      	str	r2, [r3, #32]
}
 80071a6:	bf00      	nop
 80071a8:	371c      	adds	r7, #28
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	40012c00 	.word	0x40012c00
 80071b8:	40013400 	.word	0x40013400
 80071bc:	40014000 	.word	0x40014000
 80071c0:	40014400 	.word	0x40014400
 80071c4:	40014800 	.word	0x40014800

080071c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a1b      	ldr	r3, [r3, #32]
 80071d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6a1b      	ldr	r3, [r3, #32]
 80071e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	68fa      	ldr	r2, [r7, #12]
 8007202:	4313      	orrs	r3, r2
 8007204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800720c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	041b      	lsls	r3, r3, #16
 8007214:	693a      	ldr	r2, [r7, #16]
 8007216:	4313      	orrs	r3, r2
 8007218:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a17      	ldr	r2, [pc, #92]	; (800727c <TIM_OC5_SetConfig+0xb4>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d00f      	beq.n	8007242 <TIM_OC5_SetConfig+0x7a>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a16      	ldr	r2, [pc, #88]	; (8007280 <TIM_OC5_SetConfig+0xb8>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d00b      	beq.n	8007242 <TIM_OC5_SetConfig+0x7a>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a15      	ldr	r2, [pc, #84]	; (8007284 <TIM_OC5_SetConfig+0xbc>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d007      	beq.n	8007242 <TIM_OC5_SetConfig+0x7a>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a14      	ldr	r2, [pc, #80]	; (8007288 <TIM_OC5_SetConfig+0xc0>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d003      	beq.n	8007242 <TIM_OC5_SetConfig+0x7a>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	4a13      	ldr	r2, [pc, #76]	; (800728c <TIM_OC5_SetConfig+0xc4>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d109      	bne.n	8007256 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007248:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	021b      	lsls	r3, r3, #8
 8007250:	697a      	ldr	r2, [r7, #20]
 8007252:	4313      	orrs	r3, r2
 8007254:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	697a      	ldr	r2, [r7, #20]
 800725a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	693a      	ldr	r2, [r7, #16]
 800726e:	621a      	str	r2, [r3, #32]
}
 8007270:	bf00      	nop
 8007272:	371c      	adds	r7, #28
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	40012c00 	.word	0x40012c00
 8007280:	40013400 	.word	0x40013400
 8007284:	40014000 	.word	0x40014000
 8007288:	40014400 	.word	0x40014400
 800728c:	40014800 	.word	0x40014800

08007290 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007290:	b480      	push	{r7}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	021b      	lsls	r3, r3, #8
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	051b      	lsls	r3, r3, #20
 80072de:	693a      	ldr	r2, [r7, #16]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a18      	ldr	r2, [pc, #96]	; (8007348 <TIM_OC6_SetConfig+0xb8>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d00f      	beq.n	800730c <TIM_OC6_SetConfig+0x7c>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a17      	ldr	r2, [pc, #92]	; (800734c <TIM_OC6_SetConfig+0xbc>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d00b      	beq.n	800730c <TIM_OC6_SetConfig+0x7c>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	4a16      	ldr	r2, [pc, #88]	; (8007350 <TIM_OC6_SetConfig+0xc0>)
 80072f8:	4293      	cmp	r3, r2
 80072fa:	d007      	beq.n	800730c <TIM_OC6_SetConfig+0x7c>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	4a15      	ldr	r2, [pc, #84]	; (8007354 <TIM_OC6_SetConfig+0xc4>)
 8007300:	4293      	cmp	r3, r2
 8007302:	d003      	beq.n	800730c <TIM_OC6_SetConfig+0x7c>
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4a14      	ldr	r2, [pc, #80]	; (8007358 <TIM_OC6_SetConfig+0xc8>)
 8007308:	4293      	cmp	r3, r2
 800730a:	d109      	bne.n	8007320 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007312:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	695b      	ldr	r3, [r3, #20]
 8007318:	029b      	lsls	r3, r3, #10
 800731a:	697a      	ldr	r2, [r7, #20]
 800731c:	4313      	orrs	r3, r2
 800731e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	697a      	ldr	r2, [r7, #20]
 8007324:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68fa      	ldr	r2, [r7, #12]
 800732a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	621a      	str	r2, [r3, #32]
}
 800733a:	bf00      	nop
 800733c:	371c      	adds	r7, #28
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	40012c00 	.word	0x40012c00
 800734c:	40013400 	.word	0x40013400
 8007350:	40014000 	.word	0x40014000
 8007354:	40014400 	.word	0x40014400
 8007358:	40014800 	.word	0x40014800

0800735c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800735c:	b480      	push	{r7}
 800735e:	b087      	sub	sp, #28
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6a1b      	ldr	r3, [r3, #32]
 800736c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	f023 0201 	bic.w	r2, r3, #1
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	699b      	ldr	r3, [r3, #24]
 800737e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007386:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	011b      	lsls	r3, r3, #4
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	4313      	orrs	r3, r2
 8007390:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007392:	697b      	ldr	r3, [r7, #20]
 8007394:	f023 030a 	bic.w	r3, r3, #10
 8007398:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800739a:	697a      	ldr	r2, [r7, #20]
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	4313      	orrs	r3, r2
 80073a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	693a      	ldr	r2, [r7, #16]
 80073a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	621a      	str	r2, [r3, #32]
}
 80073ae:	bf00      	nop
 80073b0:	371c      	adds	r7, #28
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b087      	sub	sp, #28
 80073be:	af00      	add	r7, sp, #0
 80073c0:	60f8      	str	r0, [r7, #12]
 80073c2:	60b9      	str	r1, [r7, #8]
 80073c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	f023 0210 	bic.w	r2, r3, #16
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	699b      	ldr	r3, [r3, #24]
 80073d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	031b      	lsls	r3, r3, #12
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	4313      	orrs	r3, r2
 80073ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073f0:	693b      	ldr	r3, [r7, #16]
 80073f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	011b      	lsls	r3, r3, #4
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	4313      	orrs	r3, r2
 8007400:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	697a      	ldr	r2, [r7, #20]
 8007406:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	621a      	str	r2, [r3, #32]
}
 800740e:	bf00      	nop
 8007410:	371c      	adds	r7, #28
 8007412:	46bd      	mov	sp, r7
 8007414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007418:	4770      	bx	lr

0800741a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800741a:	b480      	push	{r7}
 800741c:	b085      	sub	sp, #20
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
 8007422:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	689b      	ldr	r3, [r3, #8]
 8007428:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007430:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007432:	683a      	ldr	r2, [r7, #0]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	4313      	orrs	r3, r2
 8007438:	f043 0307 	orr.w	r3, r3, #7
 800743c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	609a      	str	r2, [r3, #8]
}
 8007444:	bf00      	nop
 8007446:	3714      	adds	r7, #20
 8007448:	46bd      	mov	sp, r7
 800744a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744e:	4770      	bx	lr

08007450 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007450:	b480      	push	{r7}
 8007452:	b087      	sub	sp, #28
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	607a      	str	r2, [r7, #4]
 800745c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800746a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	021a      	lsls	r2, r3, #8
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	431a      	orrs	r2, r3
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	4313      	orrs	r3, r2
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	4313      	orrs	r3, r2
 800747c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	609a      	str	r2, [r3, #8]
}
 8007484:	bf00      	nop
 8007486:	371c      	adds	r7, #28
 8007488:	46bd      	mov	sp, r7
 800748a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748e:	4770      	bx	lr

08007490 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	60f8      	str	r0, [r7, #12]
 8007498:	60b9      	str	r1, [r7, #8]
 800749a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	f003 031f 	and.w	r3, r3, #31
 80074a2:	2201      	movs	r2, #1
 80074a4:	fa02 f303 	lsl.w	r3, r2, r3
 80074a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6a1a      	ldr	r2, [r3, #32]
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	43db      	mvns	r3, r3
 80074b2:	401a      	ands	r2, r3
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	6a1a      	ldr	r2, [r3, #32]
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	f003 031f 	and.w	r3, r3, #31
 80074c2:	6879      	ldr	r1, [r7, #4]
 80074c4:	fa01 f303 	lsl.w	r3, r1, r3
 80074c8:	431a      	orrs	r2, r3
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	621a      	str	r2, [r3, #32]
}
 80074ce:	bf00      	nop
 80074d0:	371c      	adds	r7, #28
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
	...

080074dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
 80074e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d101      	bne.n	80074f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074f0:	2302      	movs	r3, #2
 80074f2:	e068      	b.n	80075c6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4a2e      	ldr	r2, [pc, #184]	; (80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d004      	beq.n	8007528 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4a2d      	ldr	r2, [pc, #180]	; (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007524:	4293      	cmp	r3, r2
 8007526:	d108      	bne.n	800753a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800752e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	68fa      	ldr	r2, [r7, #12]
 8007536:	4313      	orrs	r3, r2
 8007538:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007540:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	4313      	orrs	r3, r2
 800754a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	4a1e      	ldr	r2, [pc, #120]	; (80075d4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d01d      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007566:	d018      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	4a1b      	ldr	r2, [pc, #108]	; (80075dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d013      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a1a      	ldr	r2, [pc, #104]	; (80075e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007578:	4293      	cmp	r3, r2
 800757a:	d00e      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a18      	ldr	r2, [pc, #96]	; (80075e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d009      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a13      	ldr	r2, [pc, #76]	; (80075d8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800758c:	4293      	cmp	r3, r2
 800758e:	d004      	beq.n	800759a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	4a14      	ldr	r2, [pc, #80]	; (80075e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007596:	4293      	cmp	r3, r2
 8007598:	d10c      	bne.n	80075b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80075a0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	689b      	ldr	r3, [r3, #8]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	4313      	orrs	r3, r2
 80075aa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3714      	adds	r7, #20
 80075ca:	46bd      	mov	sp, r7
 80075cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d0:	4770      	bx	lr
 80075d2:	bf00      	nop
 80075d4:	40012c00 	.word	0x40012c00
 80075d8:	40013400 	.word	0x40013400
 80075dc:	40000400 	.word	0x40000400
 80075e0:	40000800 	.word	0x40000800
 80075e4:	40000c00 	.word	0x40000c00
 80075e8:	40014000 	.word	0x40014000

080075ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b083      	sub	sp, #12
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075f4:	bf00      	nop
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007600:	b480      	push	{r7}
 8007602:	b083      	sub	sp, #12
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007608:	bf00      	nop
 800760a:	370c      	adds	r7, #12
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800761c:	bf00      	nop
 800761e:	370c      	adds	r7, #12
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d101      	bne.n	800763a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007636:	2301      	movs	r3, #1
 8007638:	e040      	b.n	80076bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800763e:	2b00      	cmp	r3, #0
 8007640:	d106      	bne.n	8007650 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f7fa fca2 	bl	8001f94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2224      	movs	r2, #36	; 0x24
 8007654:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681a      	ldr	r2, [r3, #0]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f022 0201 	bic.w	r2, r2, #1
 8007664:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fc8a 	bl	8007f80 <UART_SetConfig>
 800766c:	4603      	mov	r3, r0
 800766e:	2b01      	cmp	r3, #1
 8007670:	d101      	bne.n	8007676 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e022      	b.n	80076bc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	2b00      	cmp	r3, #0
 800767c:	d002      	beq.n	8007684 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f000 ff08 	bl	8008494 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007692:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689a      	ldr	r2, [r3, #8]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80076a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f042 0201 	orr.w	r2, r2, #1
 80076b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 ff8f 	bl	80085d8 <UART_CheckIdleState>
 80076ba:	4603      	mov	r3, r0
}
 80076bc:	4618      	mov	r0, r3
 80076be:	3708      	adds	r7, #8
 80076c0:	46bd      	mov	sp, r7
 80076c2:	bd80      	pop	{r7, pc}

080076c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076c4:	b580      	push	{r7, lr}
 80076c6:	b08a      	sub	sp, #40	; 0x28
 80076c8:	af02      	add	r7, sp, #8
 80076ca:	60f8      	str	r0, [r7, #12]
 80076cc:	60b9      	str	r1, [r7, #8]
 80076ce:	603b      	str	r3, [r7, #0]
 80076d0:	4613      	mov	r3, r2
 80076d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076d8:	2b20      	cmp	r3, #32
 80076da:	f040 8082 	bne.w	80077e2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d002      	beq.n	80076ea <HAL_UART_Transmit+0x26>
 80076e4:	88fb      	ldrh	r3, [r7, #6]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d101      	bne.n	80076ee <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80076ea:	2301      	movs	r3, #1
 80076ec:	e07a      	b.n	80077e4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80076f4:	2b01      	cmp	r3, #1
 80076f6:	d101      	bne.n	80076fc <HAL_UART_Transmit+0x38>
 80076f8:	2302      	movs	r3, #2
 80076fa:	e073      	b.n	80077e4 <HAL_UART_Transmit+0x120>
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2200      	movs	r2, #0
 8007708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	2221      	movs	r2, #33	; 0x21
 8007710:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007712:	f7fa fd27 	bl	8002164 <HAL_GetTick>
 8007716:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	88fa      	ldrh	r2, [r7, #6]
 800771c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	88fa      	ldrh	r2, [r7, #6]
 8007724:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	689b      	ldr	r3, [r3, #8]
 800772c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007730:	d108      	bne.n	8007744 <HAL_UART_Transmit+0x80>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d104      	bne.n	8007744 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800773a:	2300      	movs	r3, #0
 800773c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	61bb      	str	r3, [r7, #24]
 8007742:	e003      	b.n	800774c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007748:	2300      	movs	r3, #0
 800774a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2200      	movs	r2, #0
 8007750:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007754:	e02d      	b.n	80077b2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007756:	683b      	ldr	r3, [r7, #0]
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	2200      	movs	r2, #0
 800775e:	2180      	movs	r1, #128	; 0x80
 8007760:	68f8      	ldr	r0, [r7, #12]
 8007762:	f000 ff82 	bl	800866a <UART_WaitOnFlagUntilTimeout>
 8007766:	4603      	mov	r3, r0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d001      	beq.n	8007770 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e039      	b.n	80077e4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007770:	69fb      	ldr	r3, [r7, #28]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d10b      	bne.n	800778e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007776:	69bb      	ldr	r3, [r7, #24]
 8007778:	881a      	ldrh	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007782:	b292      	uxth	r2, r2
 8007784:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007786:	69bb      	ldr	r3, [r7, #24]
 8007788:	3302      	adds	r3, #2
 800778a:	61bb      	str	r3, [r7, #24]
 800778c:	e008      	b.n	80077a0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	781a      	ldrb	r2, [r3, #0]
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	b292      	uxth	r2, r2
 8007798:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800779a:	69fb      	ldr	r3, [r7, #28]
 800779c:	3301      	adds	r3, #1
 800779e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	3b01      	subs	r3, #1
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80077b8:	b29b      	uxth	r3, r3
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1cb      	bne.n	8007756 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	9300      	str	r3, [sp, #0]
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	2200      	movs	r2, #0
 80077c6:	2140      	movs	r1, #64	; 0x40
 80077c8:	68f8      	ldr	r0, [r7, #12]
 80077ca:	f000 ff4e 	bl	800866a <UART_WaitOnFlagUntilTimeout>
 80077ce:	4603      	mov	r3, r0
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d001      	beq.n	80077d8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e005      	b.n	80077e4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2220      	movs	r2, #32
 80077dc:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80077de:	2300      	movs	r3, #0
 80077e0:	e000      	b.n	80077e4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80077e2:	2302      	movs	r3, #2
  }
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3720      	adds	r7, #32
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}

080077ec <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08a      	sub	sp, #40	; 0x28
 80077f0:	af02      	add	r7, sp, #8
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	603b      	str	r3, [r7, #0]
 80077f8:	4613      	mov	r3, r2
 80077fa:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007800:	2b20      	cmp	r3, #32
 8007802:	f040 80bf 	bne.w	8007984 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d002      	beq.n	8007812 <HAL_UART_Receive+0x26>
 800780c:	88fb      	ldrh	r3, [r7, #6]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d101      	bne.n	8007816 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8007812:	2301      	movs	r3, #1
 8007814:	e0b7      	b.n	8007986 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800781c:	2b01      	cmp	r3, #1
 800781e:	d101      	bne.n	8007824 <HAL_UART_Receive+0x38>
 8007820:	2302      	movs	r3, #2
 8007822:	e0b0      	b.n	8007986 <HAL_UART_Receive+0x19a>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2200      	movs	r2, #0
 8007830:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2222      	movs	r2, #34	; 0x22
 8007838:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2200      	movs	r2, #0
 800783e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007840:	f7fa fc90 	bl	8002164 <HAL_GetTick>
 8007844:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	88fa      	ldrh	r2, [r7, #6]
 800784a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	88fa      	ldrh	r2, [r7, #6]
 8007852:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	689b      	ldr	r3, [r3, #8]
 800785a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800785e:	d10e      	bne.n	800787e <HAL_UART_Receive+0x92>
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d105      	bne.n	8007874 <HAL_UART_Receive+0x88>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800786e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007872:	e02d      	b.n	80078d0 <HAL_UART_Receive+0xe4>
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	22ff      	movs	r2, #255	; 0xff
 8007878:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800787c:	e028      	b.n	80078d0 <HAL_UART_Receive+0xe4>
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	689b      	ldr	r3, [r3, #8]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10d      	bne.n	80078a2 <HAL_UART_Receive+0xb6>
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	691b      	ldr	r3, [r3, #16]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d104      	bne.n	8007898 <HAL_UART_Receive+0xac>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	22ff      	movs	r2, #255	; 0xff
 8007892:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007896:	e01b      	b.n	80078d0 <HAL_UART_Receive+0xe4>
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	227f      	movs	r2, #127	; 0x7f
 800789c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80078a0:	e016      	b.n	80078d0 <HAL_UART_Receive+0xe4>
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80078aa:	d10d      	bne.n	80078c8 <HAL_UART_Receive+0xdc>
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d104      	bne.n	80078be <HAL_UART_Receive+0xd2>
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	227f      	movs	r2, #127	; 0x7f
 80078b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80078bc:	e008      	b.n	80078d0 <HAL_UART_Receive+0xe4>
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	223f      	movs	r2, #63	; 0x3f
 80078c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80078c6:	e003      	b.n	80078d0 <HAL_UART_Receive+0xe4>
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078d6:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	689b      	ldr	r3, [r3, #8]
 80078dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e0:	d108      	bne.n	80078f4 <HAL_UART_Receive+0x108>
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	691b      	ldr	r3, [r3, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d104      	bne.n	80078f4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80078ea:	2300      	movs	r3, #0
 80078ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	61bb      	str	r3, [r7, #24]
 80078f2:	e003      	b.n	80078fc <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078f8:	2300      	movs	r3, #0
 80078fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007904:	e033      	b.n	800796e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	2200      	movs	r2, #0
 800790e:	2120      	movs	r1, #32
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 feaa 	bl	800866a <UART_WaitOnFlagUntilTimeout>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800791c:	2303      	movs	r3, #3
 800791e:	e032      	b.n	8007986 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d10c      	bne.n	8007940 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800792c:	b29a      	uxth	r2, r3
 800792e:	8a7b      	ldrh	r3, [r7, #18]
 8007930:	4013      	ands	r3, r2
 8007932:	b29a      	uxth	r2, r3
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	3302      	adds	r3, #2
 800793c:	61bb      	str	r3, [r7, #24]
 800793e:	e00d      	b.n	800795c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007946:	b29b      	uxth	r3, r3
 8007948:	b2da      	uxtb	r2, r3
 800794a:	8a7b      	ldrh	r3, [r7, #18]
 800794c:	b2db      	uxtb	r3, r3
 800794e:	4013      	ands	r3, r2
 8007950:	b2da      	uxtb	r2, r3
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	3301      	adds	r3, #1
 800795a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007962:	b29b      	uxth	r3, r3
 8007964:	3b01      	subs	r3, #1
 8007966:	b29a      	uxth	r2, r3
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007974:	b29b      	uxth	r3, r3
 8007976:	2b00      	cmp	r3, #0
 8007978:	d1c5      	bne.n	8007906 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2220      	movs	r2, #32
 800797e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	e000      	b.n	8007986 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007984:	2302      	movs	r3, #2
  }
}
 8007986:	4618      	mov	r0, r3
 8007988:	3720      	adds	r7, #32
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}
	...

08007990 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b0ba      	sub	sp, #232	; 0xe8
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	69db      	ldr	r3, [r3, #28]
 800799e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80079b6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80079ba:	f640 030f 	movw	r3, #2063	; 0x80f
 80079be:	4013      	ands	r3, r2
 80079c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80079c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d115      	bne.n	80079f8 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80079cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d0:	f003 0320 	and.w	r3, r3, #32
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d00f      	beq.n	80079f8 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80079d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079dc:	f003 0320 	and.w	r3, r3, #32
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d009      	beq.n	80079f8 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	f000 82a6 	beq.w	8007f3a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	4798      	blx	r3
      }
      return;
 80079f6:	e2a0      	b.n	8007f3a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80079f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f000 8117 	beq.w	8007c30 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007a02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d106      	bne.n	8007a1c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007a0e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007a12:	4b85      	ldr	r3, [pc, #532]	; (8007c28 <HAL_UART_IRQHandler+0x298>)
 8007a14:	4013      	ands	r3, r2
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	f000 810a 	beq.w	8007c30 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a20:	f003 0301 	and.w	r3, r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d011      	beq.n	8007a4c <HAL_UART_IRQHandler+0xbc>
 8007a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00b      	beq.n	8007a4c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a42:	f043 0201 	orr.w	r2, r3, #1
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a50:	f003 0302 	and.w	r3, r3, #2
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d011      	beq.n	8007a7c <HAL_UART_IRQHandler+0xec>
 8007a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d00b      	beq.n	8007a7c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	2202      	movs	r2, #2
 8007a6a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a72:	f043 0204 	orr.w	r2, r3, #4
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a80:	f003 0304 	and.w	r3, r3, #4
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d011      	beq.n	8007aac <HAL_UART_IRQHandler+0x11c>
 8007a88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a8c:	f003 0301 	and.w	r3, r3, #1
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d00b      	beq.n	8007aac <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2204      	movs	r2, #4
 8007a9a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007aa2:	f043 0202 	orr.w	r2, r3, #2
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ab0:	f003 0308 	and.w	r3, r3, #8
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d017      	beq.n	8007ae8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007abc:	f003 0320 	and.w	r3, r3, #32
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d105      	bne.n	8007ad0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007ac4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ac8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d00b      	beq.n	8007ae8 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	2208      	movs	r2, #8
 8007ad6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ade:	f043 0208 	orr.w	r2, r3, #8
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ae8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d012      	beq.n	8007b1a <HAL_UART_IRQHandler+0x18a>
 8007af4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007af8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d00c      	beq.n	8007b1a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b08:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b10:	f043 0220 	orr.w	r2, r3, #32
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f000 820c 	beq.w	8007f3e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007b26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b2a:	f003 0320 	and.w	r3, r3, #32
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d00d      	beq.n	8007b4e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007b32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b36:	f003 0320 	and.w	r3, r3, #32
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d007      	beq.n	8007b4e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d003      	beq.n	8007b4e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b54:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b62:	2b40      	cmp	r3, #64	; 0x40
 8007b64:	d005      	beq.n	8007b72 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b66:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d04f      	beq.n	8007c12 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fe3d 	bl	80087f2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b82:	2b40      	cmp	r3, #64	; 0x40
 8007b84:	d141      	bne.n	8007c0a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	3308      	adds	r3, #8
 8007b8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b94:	e853 3f00 	ldrex	r3, [r3]
 8007b98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007ba4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3308      	adds	r3, #8
 8007bae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007bb2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007bb6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007bbe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007bc2:	e841 2300 	strex	r3, r2, [r1]
 8007bc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007bca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d1d9      	bne.n	8007b86 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d013      	beq.n	8007c02 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bde:	4a13      	ldr	r2, [pc, #76]	; (8007c2c <HAL_UART_IRQHandler+0x29c>)
 8007be0:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be6:	4618      	mov	r0, r3
 8007be8:	f7fb ff20 	bl	8003a2c <HAL_DMA_Abort_IT>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d017      	beq.n	8007c22 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007bfc:	4610      	mov	r0, r2
 8007bfe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c00:	e00f      	b.n	8007c22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f9a6 	bl	8007f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c08:	e00b      	b.n	8007c22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f000 f9a2 	bl	8007f54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c10:	e007      	b.n	8007c22 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f99e 	bl	8007f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007c20:	e18d      	b.n	8007f3e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c22:	bf00      	nop
    return;
 8007c24:	e18b      	b.n	8007f3e <HAL_UART_IRQHandler+0x5ae>
 8007c26:	bf00      	nop
 8007c28:	04000120 	.word	0x04000120
 8007c2c:	080088b9 	.word	0x080088b9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	f040 8146 	bne.w	8007ec6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c3e:	f003 0310 	and.w	r3, r3, #16
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 813f 	beq.w	8007ec6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c4c:	f003 0310 	and.w	r3, r3, #16
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	f000 8138 	beq.w	8007ec6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	2210      	movs	r2, #16
 8007c5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c68:	2b40      	cmp	r3, #64	; 0x40
 8007c6a:	f040 80b4 	bne.w	8007dd6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	685b      	ldr	r3, [r3, #4]
 8007c76:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c7a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f000 815f 	beq.w	8007f42 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c8e:	429a      	cmp	r2, r3
 8007c90:	f080 8157 	bcs.w	8007f42 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f003 0320 	and.w	r3, r3, #32
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f040 8085 	bne.w	8007dba <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cbc:	e853 3f00 	ldrex	r3, [r3]
 8007cc0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007cc4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ccc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	461a      	mov	r2, r3
 8007cd6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007cde:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ce6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cea:	e841 2300 	strex	r3, r2, [r1]
 8007cee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007cf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1da      	bne.n	8007cb0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	3308      	adds	r3, #8
 8007d00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d04:	e853 3f00 	ldrex	r3, [r3]
 8007d08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d0c:	f023 0301 	bic.w	r3, r3, #1
 8007d10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	3308      	adds	r3, #8
 8007d1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d2a:	e841 2300 	strex	r3, r2, [r1]
 8007d2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d1e1      	bne.n	8007cfa <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	3308      	adds	r3, #8
 8007d3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d40:	e853 3f00 	ldrex	r3, [r3]
 8007d44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	3308      	adds	r3, #8
 8007d56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d62:	e841 2300 	strex	r3, r2, [r1]
 8007d66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d1e3      	bne.n	8007d36 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2220      	movs	r2, #32
 8007d72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2200      	movs	r2, #0
 8007d78:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d82:	e853 3f00 	ldrex	r3, [r3]
 8007d86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d8a:	f023 0310 	bic.w	r3, r3, #16
 8007d8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	461a      	mov	r2, r3
 8007d98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d9c:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d9e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007da2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007da4:	e841 2300 	strex	r3, r2, [r1]
 8007da8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007daa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1e4      	bne.n	8007d7a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db4:	4618      	mov	r0, r3
 8007db6:	f7fb fdfb 	bl	80039b0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dc6:	b29b      	uxth	r3, r3
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	4619      	mov	r1, r3
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 f8ca 	bl	8007f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007dd4:	e0b5      	b.n	8007f42 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	1ad3      	subs	r3, r2, r3
 8007de6:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007df0:	b29b      	uxth	r3, r3
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	f000 80a7 	beq.w	8007f46 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007df8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	f000 80a2 	beq.w	8007f46 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e0a:	e853 3f00 	ldrex	r3, [r3]
 8007e0e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e24:	647b      	str	r3, [r7, #68]	; 0x44
 8007e26:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e28:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e2c:	e841 2300 	strex	r3, r2, [r1]
 8007e30:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d1e4      	bne.n	8007e02 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	3308      	adds	r3, #8
 8007e3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e42:	e853 3f00 	ldrex	r3, [r3]
 8007e46:	623b      	str	r3, [r7, #32]
   return(result);
 8007e48:	6a3b      	ldr	r3, [r7, #32]
 8007e4a:	f023 0301 	bic.w	r3, r3, #1
 8007e4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	3308      	adds	r3, #8
 8007e58:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e5c:	633a      	str	r2, [r7, #48]	; 0x30
 8007e5e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e60:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e64:	e841 2300 	strex	r3, r2, [r1]
 8007e68:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d1e3      	bne.n	8007e38 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2220      	movs	r2, #32
 8007e74:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	e853 3f00 	ldrex	r3, [r3]
 8007e8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f023 0310 	bic.w	r3, r3, #16
 8007e96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ea4:	61fb      	str	r3, [r7, #28]
 8007ea6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea8:	69b9      	ldr	r1, [r7, #24]
 8007eaa:	69fa      	ldr	r2, [r7, #28]
 8007eac:	e841 2300 	strex	r3, r2, [r1]
 8007eb0:	617b      	str	r3, [r7, #20]
   return(result);
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d1e4      	bne.n	8007e82 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007eb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ebc:	4619      	mov	r1, r3
 8007ebe:	6878      	ldr	r0, [r7, #4]
 8007ec0:	f000 f852 	bl	8007f68 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ec4:	e03f      	b.n	8007f46 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007ec6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d00e      	beq.n	8007ef0 <HAL_UART_IRQHandler+0x560>
 8007ed2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d008      	beq.n	8007ef0 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007ee6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f000 fd25 	bl	8008938 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007eee:	e02d      	b.n	8007f4c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d00e      	beq.n	8007f1a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d008      	beq.n	8007f1a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d01c      	beq.n	8007f4a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	4798      	blx	r3
    }
    return;
 8007f18:	e017      	b.n	8007f4a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d012      	beq.n	8007f4c <HAL_UART_IRQHandler+0x5bc>
 8007f26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d00c      	beq.n	8007f4c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f000 fcd6 	bl	80088e4 <UART_EndTransmit_IT>
    return;
 8007f38:	e008      	b.n	8007f4c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007f3a:	bf00      	nop
 8007f3c:	e006      	b.n	8007f4c <HAL_UART_IRQHandler+0x5bc>
    return;
 8007f3e:	bf00      	nop
 8007f40:	e004      	b.n	8007f4c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007f42:	bf00      	nop
 8007f44:	e002      	b.n	8007f4c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007f46:	bf00      	nop
 8007f48:	e000      	b.n	8007f4c <HAL_UART_IRQHandler+0x5bc>
    return;
 8007f4a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007f4c:	37e8      	adds	r7, #232	; 0xe8
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bd80      	pop	{r7, pc}
 8007f52:	bf00      	nop

08007f54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	460b      	mov	r3, r1
 8007f72:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f74:	bf00      	nop
 8007f76:	370c      	adds	r7, #12
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr

08007f80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f80:	b5b0      	push	{r4, r5, r7, lr}
 8007f82:	b088      	sub	sp, #32
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f88:	2300      	movs	r3, #0
 8007f8a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	689a      	ldr	r2, [r3, #8]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	431a      	orrs	r2, r3
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	695b      	ldr	r3, [r3, #20]
 8007f9a:	431a      	orrs	r2, r3
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	69db      	ldr	r3, [r3, #28]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	681a      	ldr	r2, [r3, #0]
 8007faa:	4bad      	ldr	r3, [pc, #692]	; (8008260 <UART_SetConfig+0x2e0>)
 8007fac:	4013      	ands	r3, r2
 8007fae:	687a      	ldr	r2, [r7, #4]
 8007fb0:	6812      	ldr	r2, [r2, #0]
 8007fb2:	69f9      	ldr	r1, [r7, #28]
 8007fb4:	430b      	orrs	r3, r1
 8007fb6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68da      	ldr	r2, [r3, #12]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	430a      	orrs	r2, r1
 8007fcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4aa2      	ldr	r2, [pc, #648]	; (8008264 <UART_SetConfig+0x2e4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d004      	beq.n	8007fe8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a1b      	ldr	r3, [r3, #32]
 8007fe2:	69fa      	ldr	r2, [r7, #28]
 8007fe4:	4313      	orrs	r3, r2
 8007fe6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689b      	ldr	r3, [r3, #8]
 8007fee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	69fa      	ldr	r2, [r7, #28]
 8007ff8:	430a      	orrs	r2, r1
 8007ffa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a99      	ldr	r2, [pc, #612]	; (8008268 <UART_SetConfig+0x2e8>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d121      	bne.n	800804a <UART_SetConfig+0xca>
 8008006:	4b99      	ldr	r3, [pc, #612]	; (800826c <UART_SetConfig+0x2ec>)
 8008008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800800c:	f003 0303 	and.w	r3, r3, #3
 8008010:	2b03      	cmp	r3, #3
 8008012:	d817      	bhi.n	8008044 <UART_SetConfig+0xc4>
 8008014:	a201      	add	r2, pc, #4	; (adr r2, 800801c <UART_SetConfig+0x9c>)
 8008016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800801a:	bf00      	nop
 800801c:	0800802d 	.word	0x0800802d
 8008020:	08008039 	.word	0x08008039
 8008024:	08008033 	.word	0x08008033
 8008028:	0800803f 	.word	0x0800803f
 800802c:	2301      	movs	r3, #1
 800802e:	76fb      	strb	r3, [r7, #27]
 8008030:	e0e7      	b.n	8008202 <UART_SetConfig+0x282>
 8008032:	2302      	movs	r3, #2
 8008034:	76fb      	strb	r3, [r7, #27]
 8008036:	e0e4      	b.n	8008202 <UART_SetConfig+0x282>
 8008038:	2304      	movs	r3, #4
 800803a:	76fb      	strb	r3, [r7, #27]
 800803c:	e0e1      	b.n	8008202 <UART_SetConfig+0x282>
 800803e:	2308      	movs	r3, #8
 8008040:	76fb      	strb	r3, [r7, #27]
 8008042:	e0de      	b.n	8008202 <UART_SetConfig+0x282>
 8008044:	2310      	movs	r3, #16
 8008046:	76fb      	strb	r3, [r7, #27]
 8008048:	e0db      	b.n	8008202 <UART_SetConfig+0x282>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	4a88      	ldr	r2, [pc, #544]	; (8008270 <UART_SetConfig+0x2f0>)
 8008050:	4293      	cmp	r3, r2
 8008052:	d132      	bne.n	80080ba <UART_SetConfig+0x13a>
 8008054:	4b85      	ldr	r3, [pc, #532]	; (800826c <UART_SetConfig+0x2ec>)
 8008056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800805a:	f003 030c 	and.w	r3, r3, #12
 800805e:	2b0c      	cmp	r3, #12
 8008060:	d828      	bhi.n	80080b4 <UART_SetConfig+0x134>
 8008062:	a201      	add	r2, pc, #4	; (adr r2, 8008068 <UART_SetConfig+0xe8>)
 8008064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008068:	0800809d 	.word	0x0800809d
 800806c:	080080b5 	.word	0x080080b5
 8008070:	080080b5 	.word	0x080080b5
 8008074:	080080b5 	.word	0x080080b5
 8008078:	080080a9 	.word	0x080080a9
 800807c:	080080b5 	.word	0x080080b5
 8008080:	080080b5 	.word	0x080080b5
 8008084:	080080b5 	.word	0x080080b5
 8008088:	080080a3 	.word	0x080080a3
 800808c:	080080b5 	.word	0x080080b5
 8008090:	080080b5 	.word	0x080080b5
 8008094:	080080b5 	.word	0x080080b5
 8008098:	080080af 	.word	0x080080af
 800809c:	2300      	movs	r3, #0
 800809e:	76fb      	strb	r3, [r7, #27]
 80080a0:	e0af      	b.n	8008202 <UART_SetConfig+0x282>
 80080a2:	2302      	movs	r3, #2
 80080a4:	76fb      	strb	r3, [r7, #27]
 80080a6:	e0ac      	b.n	8008202 <UART_SetConfig+0x282>
 80080a8:	2304      	movs	r3, #4
 80080aa:	76fb      	strb	r3, [r7, #27]
 80080ac:	e0a9      	b.n	8008202 <UART_SetConfig+0x282>
 80080ae:	2308      	movs	r3, #8
 80080b0:	76fb      	strb	r3, [r7, #27]
 80080b2:	e0a6      	b.n	8008202 <UART_SetConfig+0x282>
 80080b4:	2310      	movs	r3, #16
 80080b6:	76fb      	strb	r3, [r7, #27]
 80080b8:	e0a3      	b.n	8008202 <UART_SetConfig+0x282>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a6d      	ldr	r2, [pc, #436]	; (8008274 <UART_SetConfig+0x2f4>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d120      	bne.n	8008106 <UART_SetConfig+0x186>
 80080c4:	4b69      	ldr	r3, [pc, #420]	; (800826c <UART_SetConfig+0x2ec>)
 80080c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80080ce:	2b30      	cmp	r3, #48	; 0x30
 80080d0:	d013      	beq.n	80080fa <UART_SetConfig+0x17a>
 80080d2:	2b30      	cmp	r3, #48	; 0x30
 80080d4:	d814      	bhi.n	8008100 <UART_SetConfig+0x180>
 80080d6:	2b20      	cmp	r3, #32
 80080d8:	d009      	beq.n	80080ee <UART_SetConfig+0x16e>
 80080da:	2b20      	cmp	r3, #32
 80080dc:	d810      	bhi.n	8008100 <UART_SetConfig+0x180>
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d002      	beq.n	80080e8 <UART_SetConfig+0x168>
 80080e2:	2b10      	cmp	r3, #16
 80080e4:	d006      	beq.n	80080f4 <UART_SetConfig+0x174>
 80080e6:	e00b      	b.n	8008100 <UART_SetConfig+0x180>
 80080e8:	2300      	movs	r3, #0
 80080ea:	76fb      	strb	r3, [r7, #27]
 80080ec:	e089      	b.n	8008202 <UART_SetConfig+0x282>
 80080ee:	2302      	movs	r3, #2
 80080f0:	76fb      	strb	r3, [r7, #27]
 80080f2:	e086      	b.n	8008202 <UART_SetConfig+0x282>
 80080f4:	2304      	movs	r3, #4
 80080f6:	76fb      	strb	r3, [r7, #27]
 80080f8:	e083      	b.n	8008202 <UART_SetConfig+0x282>
 80080fa:	2308      	movs	r3, #8
 80080fc:	76fb      	strb	r3, [r7, #27]
 80080fe:	e080      	b.n	8008202 <UART_SetConfig+0x282>
 8008100:	2310      	movs	r3, #16
 8008102:	76fb      	strb	r3, [r7, #27]
 8008104:	e07d      	b.n	8008202 <UART_SetConfig+0x282>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a5b      	ldr	r2, [pc, #364]	; (8008278 <UART_SetConfig+0x2f8>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d120      	bne.n	8008152 <UART_SetConfig+0x1d2>
 8008110:	4b56      	ldr	r3, [pc, #344]	; (800826c <UART_SetConfig+0x2ec>)
 8008112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008116:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800811a:	2bc0      	cmp	r3, #192	; 0xc0
 800811c:	d013      	beq.n	8008146 <UART_SetConfig+0x1c6>
 800811e:	2bc0      	cmp	r3, #192	; 0xc0
 8008120:	d814      	bhi.n	800814c <UART_SetConfig+0x1cc>
 8008122:	2b80      	cmp	r3, #128	; 0x80
 8008124:	d009      	beq.n	800813a <UART_SetConfig+0x1ba>
 8008126:	2b80      	cmp	r3, #128	; 0x80
 8008128:	d810      	bhi.n	800814c <UART_SetConfig+0x1cc>
 800812a:	2b00      	cmp	r3, #0
 800812c:	d002      	beq.n	8008134 <UART_SetConfig+0x1b4>
 800812e:	2b40      	cmp	r3, #64	; 0x40
 8008130:	d006      	beq.n	8008140 <UART_SetConfig+0x1c0>
 8008132:	e00b      	b.n	800814c <UART_SetConfig+0x1cc>
 8008134:	2300      	movs	r3, #0
 8008136:	76fb      	strb	r3, [r7, #27]
 8008138:	e063      	b.n	8008202 <UART_SetConfig+0x282>
 800813a:	2302      	movs	r3, #2
 800813c:	76fb      	strb	r3, [r7, #27]
 800813e:	e060      	b.n	8008202 <UART_SetConfig+0x282>
 8008140:	2304      	movs	r3, #4
 8008142:	76fb      	strb	r3, [r7, #27]
 8008144:	e05d      	b.n	8008202 <UART_SetConfig+0x282>
 8008146:	2308      	movs	r3, #8
 8008148:	76fb      	strb	r3, [r7, #27]
 800814a:	e05a      	b.n	8008202 <UART_SetConfig+0x282>
 800814c:	2310      	movs	r3, #16
 800814e:	76fb      	strb	r3, [r7, #27]
 8008150:	e057      	b.n	8008202 <UART_SetConfig+0x282>
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4a49      	ldr	r2, [pc, #292]	; (800827c <UART_SetConfig+0x2fc>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d125      	bne.n	80081a8 <UART_SetConfig+0x228>
 800815c:	4b43      	ldr	r3, [pc, #268]	; (800826c <UART_SetConfig+0x2ec>)
 800815e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008166:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800816a:	d017      	beq.n	800819c <UART_SetConfig+0x21c>
 800816c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008170:	d817      	bhi.n	80081a2 <UART_SetConfig+0x222>
 8008172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008176:	d00b      	beq.n	8008190 <UART_SetConfig+0x210>
 8008178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800817c:	d811      	bhi.n	80081a2 <UART_SetConfig+0x222>
 800817e:	2b00      	cmp	r3, #0
 8008180:	d003      	beq.n	800818a <UART_SetConfig+0x20a>
 8008182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008186:	d006      	beq.n	8008196 <UART_SetConfig+0x216>
 8008188:	e00b      	b.n	80081a2 <UART_SetConfig+0x222>
 800818a:	2300      	movs	r3, #0
 800818c:	76fb      	strb	r3, [r7, #27]
 800818e:	e038      	b.n	8008202 <UART_SetConfig+0x282>
 8008190:	2302      	movs	r3, #2
 8008192:	76fb      	strb	r3, [r7, #27]
 8008194:	e035      	b.n	8008202 <UART_SetConfig+0x282>
 8008196:	2304      	movs	r3, #4
 8008198:	76fb      	strb	r3, [r7, #27]
 800819a:	e032      	b.n	8008202 <UART_SetConfig+0x282>
 800819c:	2308      	movs	r3, #8
 800819e:	76fb      	strb	r3, [r7, #27]
 80081a0:	e02f      	b.n	8008202 <UART_SetConfig+0x282>
 80081a2:	2310      	movs	r3, #16
 80081a4:	76fb      	strb	r3, [r7, #27]
 80081a6:	e02c      	b.n	8008202 <UART_SetConfig+0x282>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	4a2d      	ldr	r2, [pc, #180]	; (8008264 <UART_SetConfig+0x2e4>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d125      	bne.n	80081fe <UART_SetConfig+0x27e>
 80081b2:	4b2e      	ldr	r3, [pc, #184]	; (800826c <UART_SetConfig+0x2ec>)
 80081b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80081bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081c0:	d017      	beq.n	80081f2 <UART_SetConfig+0x272>
 80081c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081c6:	d817      	bhi.n	80081f8 <UART_SetConfig+0x278>
 80081c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081cc:	d00b      	beq.n	80081e6 <UART_SetConfig+0x266>
 80081ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081d2:	d811      	bhi.n	80081f8 <UART_SetConfig+0x278>
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d003      	beq.n	80081e0 <UART_SetConfig+0x260>
 80081d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081dc:	d006      	beq.n	80081ec <UART_SetConfig+0x26c>
 80081de:	e00b      	b.n	80081f8 <UART_SetConfig+0x278>
 80081e0:	2300      	movs	r3, #0
 80081e2:	76fb      	strb	r3, [r7, #27]
 80081e4:	e00d      	b.n	8008202 <UART_SetConfig+0x282>
 80081e6:	2302      	movs	r3, #2
 80081e8:	76fb      	strb	r3, [r7, #27]
 80081ea:	e00a      	b.n	8008202 <UART_SetConfig+0x282>
 80081ec:	2304      	movs	r3, #4
 80081ee:	76fb      	strb	r3, [r7, #27]
 80081f0:	e007      	b.n	8008202 <UART_SetConfig+0x282>
 80081f2:	2308      	movs	r3, #8
 80081f4:	76fb      	strb	r3, [r7, #27]
 80081f6:	e004      	b.n	8008202 <UART_SetConfig+0x282>
 80081f8:	2310      	movs	r3, #16
 80081fa:	76fb      	strb	r3, [r7, #27]
 80081fc:	e001      	b.n	8008202 <UART_SetConfig+0x282>
 80081fe:	2310      	movs	r3, #16
 8008200:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a17      	ldr	r2, [pc, #92]	; (8008264 <UART_SetConfig+0x2e4>)
 8008208:	4293      	cmp	r3, r2
 800820a:	f040 8087 	bne.w	800831c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800820e:	7efb      	ldrb	r3, [r7, #27]
 8008210:	2b08      	cmp	r3, #8
 8008212:	d837      	bhi.n	8008284 <UART_SetConfig+0x304>
 8008214:	a201      	add	r2, pc, #4	; (adr r2, 800821c <UART_SetConfig+0x29c>)
 8008216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821a:	bf00      	nop
 800821c:	08008241 	.word	0x08008241
 8008220:	08008285 	.word	0x08008285
 8008224:	08008249 	.word	0x08008249
 8008228:	08008285 	.word	0x08008285
 800822c:	0800824f 	.word	0x0800824f
 8008230:	08008285 	.word	0x08008285
 8008234:	08008285 	.word	0x08008285
 8008238:	08008285 	.word	0x08008285
 800823c:	08008257 	.word	0x08008257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008240:	f7fc fbbc 	bl	80049bc <HAL_RCC_GetPCLK1Freq>
 8008244:	6178      	str	r0, [r7, #20]
        break;
 8008246:	e022      	b.n	800828e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008248:	4b0d      	ldr	r3, [pc, #52]	; (8008280 <UART_SetConfig+0x300>)
 800824a:	617b      	str	r3, [r7, #20]
        break;
 800824c:	e01f      	b.n	800828e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800824e:	f7fc fb1d 	bl	800488c <HAL_RCC_GetSysClockFreq>
 8008252:	6178      	str	r0, [r7, #20]
        break;
 8008254:	e01b      	b.n	800828e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800825a:	617b      	str	r3, [r7, #20]
        break;
 800825c:	e017      	b.n	800828e <UART_SetConfig+0x30e>
 800825e:	bf00      	nop
 8008260:	efff69f3 	.word	0xefff69f3
 8008264:	40008000 	.word	0x40008000
 8008268:	40013800 	.word	0x40013800
 800826c:	40021000 	.word	0x40021000
 8008270:	40004400 	.word	0x40004400
 8008274:	40004800 	.word	0x40004800
 8008278:	40004c00 	.word	0x40004c00
 800827c:	40005000 	.word	0x40005000
 8008280:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008284:	2300      	movs	r3, #0
 8008286:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	76bb      	strb	r3, [r7, #26]
        break;
 800828c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800828e:	697b      	ldr	r3, [r7, #20]
 8008290:	2b00      	cmp	r3, #0
 8008292:	f000 80f1 	beq.w	8008478 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685a      	ldr	r2, [r3, #4]
 800829a:	4613      	mov	r3, r2
 800829c:	005b      	lsls	r3, r3, #1
 800829e:	4413      	add	r3, r2
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d305      	bcc.n	80082b2 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	429a      	cmp	r2, r3
 80082b0:	d902      	bls.n	80082b8 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80082b2:	2301      	movs	r3, #1
 80082b4:	76bb      	strb	r3, [r7, #26]
 80082b6:	e0df      	b.n	8008478 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80082b8:	697b      	ldr	r3, [r7, #20]
 80082ba:	4618      	mov	r0, r3
 80082bc:	f04f 0100 	mov.w	r1, #0
 80082c0:	f04f 0200 	mov.w	r2, #0
 80082c4:	f04f 0300 	mov.w	r3, #0
 80082c8:	020b      	lsls	r3, r1, #8
 80082ca:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082ce:	0202      	lsls	r2, r0, #8
 80082d0:	6879      	ldr	r1, [r7, #4]
 80082d2:	6849      	ldr	r1, [r1, #4]
 80082d4:	0849      	lsrs	r1, r1, #1
 80082d6:	4608      	mov	r0, r1
 80082d8:	f04f 0100 	mov.w	r1, #0
 80082dc:	1814      	adds	r4, r2, r0
 80082de:	eb43 0501 	adc.w	r5, r3, r1
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	461a      	mov	r2, r3
 80082e8:	f04f 0300 	mov.w	r3, #0
 80082ec:	4620      	mov	r0, r4
 80082ee:	4629      	mov	r1, r5
 80082f0:	f7f8 fbb4 	bl	8000a5c <__aeabi_uldivmod>
 80082f4:	4602      	mov	r2, r0
 80082f6:	460b      	mov	r3, r1
 80082f8:	4613      	mov	r3, r2
 80082fa:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008302:	d308      	bcc.n	8008316 <UART_SetConfig+0x396>
 8008304:	693b      	ldr	r3, [r7, #16]
 8008306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800830a:	d204      	bcs.n	8008316 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	693a      	ldr	r2, [r7, #16]
 8008312:	60da      	str	r2, [r3, #12]
 8008314:	e0b0      	b.n	8008478 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	76bb      	strb	r3, [r7, #26]
 800831a:	e0ad      	b.n	8008478 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	69db      	ldr	r3, [r3, #28]
 8008320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008324:	d15b      	bne.n	80083de <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8008326:	7efb      	ldrb	r3, [r7, #27]
 8008328:	2b08      	cmp	r3, #8
 800832a:	d828      	bhi.n	800837e <UART_SetConfig+0x3fe>
 800832c:	a201      	add	r2, pc, #4	; (adr r2, 8008334 <UART_SetConfig+0x3b4>)
 800832e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008332:	bf00      	nop
 8008334:	08008359 	.word	0x08008359
 8008338:	08008361 	.word	0x08008361
 800833c:	08008369 	.word	0x08008369
 8008340:	0800837f 	.word	0x0800837f
 8008344:	0800836f 	.word	0x0800836f
 8008348:	0800837f 	.word	0x0800837f
 800834c:	0800837f 	.word	0x0800837f
 8008350:	0800837f 	.word	0x0800837f
 8008354:	08008377 	.word	0x08008377
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008358:	f7fc fb30 	bl	80049bc <HAL_RCC_GetPCLK1Freq>
 800835c:	6178      	str	r0, [r7, #20]
        break;
 800835e:	e013      	b.n	8008388 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008360:	f7fc fb42 	bl	80049e8 <HAL_RCC_GetPCLK2Freq>
 8008364:	6178      	str	r0, [r7, #20]
        break;
 8008366:	e00f      	b.n	8008388 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008368:	4b49      	ldr	r3, [pc, #292]	; (8008490 <UART_SetConfig+0x510>)
 800836a:	617b      	str	r3, [r7, #20]
        break;
 800836c:	e00c      	b.n	8008388 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800836e:	f7fc fa8d 	bl	800488c <HAL_RCC_GetSysClockFreq>
 8008372:	6178      	str	r0, [r7, #20]
        break;
 8008374:	e008      	b.n	8008388 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800837a:	617b      	str	r3, [r7, #20]
        break;
 800837c:	e004      	b.n	8008388 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800837e:	2300      	movs	r3, #0
 8008380:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008382:	2301      	movs	r3, #1
 8008384:	76bb      	strb	r3, [r7, #26]
        break;
 8008386:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d074      	beq.n	8008478 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	005a      	lsls	r2, r3, #1
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	085b      	lsrs	r3, r3, #1
 8008398:	441a      	add	r2, r3
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	685b      	ldr	r3, [r3, #4]
 800839e:	fbb2 f3f3 	udiv	r3, r2, r3
 80083a2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	2b0f      	cmp	r3, #15
 80083a8:	d916      	bls.n	80083d8 <UART_SetConfig+0x458>
 80083aa:	693b      	ldr	r3, [r7, #16]
 80083ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083b0:	d212      	bcs.n	80083d8 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	b29b      	uxth	r3, r3
 80083b6:	f023 030f 	bic.w	r3, r3, #15
 80083ba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	085b      	lsrs	r3, r3, #1
 80083c0:	b29b      	uxth	r3, r3
 80083c2:	f003 0307 	and.w	r3, r3, #7
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	89fb      	ldrh	r3, [r7, #14]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	89fa      	ldrh	r2, [r7, #14]
 80083d4:	60da      	str	r2, [r3, #12]
 80083d6:	e04f      	b.n	8008478 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	76bb      	strb	r3, [r7, #26]
 80083dc:	e04c      	b.n	8008478 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083de:	7efb      	ldrb	r3, [r7, #27]
 80083e0:	2b08      	cmp	r3, #8
 80083e2:	d828      	bhi.n	8008436 <UART_SetConfig+0x4b6>
 80083e4:	a201      	add	r2, pc, #4	; (adr r2, 80083ec <UART_SetConfig+0x46c>)
 80083e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ea:	bf00      	nop
 80083ec:	08008411 	.word	0x08008411
 80083f0:	08008419 	.word	0x08008419
 80083f4:	08008421 	.word	0x08008421
 80083f8:	08008437 	.word	0x08008437
 80083fc:	08008427 	.word	0x08008427
 8008400:	08008437 	.word	0x08008437
 8008404:	08008437 	.word	0x08008437
 8008408:	08008437 	.word	0x08008437
 800840c:	0800842f 	.word	0x0800842f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008410:	f7fc fad4 	bl	80049bc <HAL_RCC_GetPCLK1Freq>
 8008414:	6178      	str	r0, [r7, #20]
        break;
 8008416:	e013      	b.n	8008440 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008418:	f7fc fae6 	bl	80049e8 <HAL_RCC_GetPCLK2Freq>
 800841c:	6178      	str	r0, [r7, #20]
        break;
 800841e:	e00f      	b.n	8008440 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008420:	4b1b      	ldr	r3, [pc, #108]	; (8008490 <UART_SetConfig+0x510>)
 8008422:	617b      	str	r3, [r7, #20]
        break;
 8008424:	e00c      	b.n	8008440 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008426:	f7fc fa31 	bl	800488c <HAL_RCC_GetSysClockFreq>
 800842a:	6178      	str	r0, [r7, #20]
        break;
 800842c:	e008      	b.n	8008440 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800842e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008432:	617b      	str	r3, [r7, #20]
        break;
 8008434:	e004      	b.n	8008440 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8008436:	2300      	movs	r3, #0
 8008438:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800843a:	2301      	movs	r3, #1
 800843c:	76bb      	strb	r3, [r7, #26]
        break;
 800843e:	bf00      	nop
    }

    if (pclk != 0U)
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d018      	beq.n	8008478 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	685b      	ldr	r3, [r3, #4]
 800844a:	085a      	lsrs	r2, r3, #1
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	441a      	add	r2, r3
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	fbb2 f3f3 	udiv	r3, r2, r3
 8008458:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	2b0f      	cmp	r3, #15
 800845e:	d909      	bls.n	8008474 <UART_SetConfig+0x4f4>
 8008460:	693b      	ldr	r3, [r7, #16]
 8008462:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008466:	d205      	bcs.n	8008474 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008468:	693b      	ldr	r3, [r7, #16]
 800846a:	b29a      	uxth	r2, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	60da      	str	r2, [r3, #12]
 8008472:	e001      	b.n	8008478 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2200      	movs	r2, #0
 800847c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008484:	7ebb      	ldrb	r3, [r7, #26]
}
 8008486:	4618      	mov	r0, r3
 8008488:	3720      	adds	r7, #32
 800848a:	46bd      	mov	sp, r7
 800848c:	bdb0      	pop	{r4, r5, r7, pc}
 800848e:	bf00      	nop
 8008490:	00f42400 	.word	0x00f42400

08008494 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008494:	b480      	push	{r7}
 8008496:	b083      	sub	sp, #12
 8008498:	af00      	add	r7, sp, #0
 800849a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084a0:	f003 0301 	and.w	r3, r3, #1
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00a      	beq.n	80084be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	685b      	ldr	r3, [r3, #4]
 80084ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	430a      	orrs	r2, r1
 80084bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c2:	f003 0302 	and.w	r3, r3, #2
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d00a      	beq.n	80084e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	430a      	orrs	r2, r1
 80084de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e4:	f003 0304 	and.w	r3, r3, #4
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d00a      	beq.n	8008502 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	430a      	orrs	r2, r1
 8008500:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008506:	f003 0308 	and.w	r3, r3, #8
 800850a:	2b00      	cmp	r3, #0
 800850c:	d00a      	beq.n	8008524 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	430a      	orrs	r2, r1
 8008522:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008528:	f003 0310 	and.w	r3, r3, #16
 800852c:	2b00      	cmp	r3, #0
 800852e:	d00a      	beq.n	8008546 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	689b      	ldr	r3, [r3, #8]
 8008536:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	430a      	orrs	r2, r1
 8008544:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800854a:	f003 0320 	and.w	r3, r3, #32
 800854e:	2b00      	cmp	r3, #0
 8008550:	d00a      	beq.n	8008568 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	689b      	ldr	r3, [r3, #8]
 8008558:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	430a      	orrs	r2, r1
 8008566:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800856c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008570:	2b00      	cmp	r3, #0
 8008572:	d01a      	beq.n	80085aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	430a      	orrs	r2, r1
 8008588:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008592:	d10a      	bne.n	80085aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	430a      	orrs	r2, r1
 80085a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00a      	beq.n	80085cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	430a      	orrs	r2, r1
 80085ca:	605a      	str	r2, [r3, #4]
  }
}
 80085cc:	bf00      	nop
 80085ce:	370c      	adds	r7, #12
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af02      	add	r7, sp, #8
 80085de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085e8:	f7f9 fdbc 	bl	8002164 <HAL_GetTick>
 80085ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f003 0308 	and.w	r3, r3, #8
 80085f8:	2b08      	cmp	r3, #8
 80085fa:	d10e      	bne.n	800861a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	f000 f82d 	bl	800866a <UART_WaitOnFlagUntilTimeout>
 8008610:	4603      	mov	r3, r0
 8008612:	2b00      	cmp	r3, #0
 8008614:	d001      	beq.n	800861a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008616:	2303      	movs	r3, #3
 8008618:	e023      	b.n	8008662 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f003 0304 	and.w	r3, r3, #4
 8008624:	2b04      	cmp	r3, #4
 8008626:	d10e      	bne.n	8008646 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008628:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800862c:	9300      	str	r3, [sp, #0]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2200      	movs	r2, #0
 8008632:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f000 f817 	bl	800866a <UART_WaitOnFlagUntilTimeout>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008642:	2303      	movs	r3, #3
 8008644:	e00d      	b.n	8008662 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2220      	movs	r2, #32
 800864a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	2220      	movs	r2, #32
 8008650:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	2200      	movs	r2, #0
 8008656:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008660:	2300      	movs	r3, #0
}
 8008662:	4618      	mov	r0, r3
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800866a:	b580      	push	{r7, lr}
 800866c:	b09c      	sub	sp, #112	; 0x70
 800866e:	af00      	add	r7, sp, #0
 8008670:	60f8      	str	r0, [r7, #12]
 8008672:	60b9      	str	r1, [r7, #8]
 8008674:	603b      	str	r3, [r7, #0]
 8008676:	4613      	mov	r3, r2
 8008678:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800867a:	e0a5      	b.n	80087c8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800867c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800867e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008682:	f000 80a1 	beq.w	80087c8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008686:	f7f9 fd6d 	bl	8002164 <HAL_GetTick>
 800868a:	4602      	mov	r2, r0
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	1ad3      	subs	r3, r2, r3
 8008690:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008692:	429a      	cmp	r2, r3
 8008694:	d302      	bcc.n	800869c <UART_WaitOnFlagUntilTimeout+0x32>
 8008696:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008698:	2b00      	cmp	r3, #0
 800869a:	d13e      	bne.n	800871a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086a4:	e853 3f00 	ldrex	r3, [r3]
 80086a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80086aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086ac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086b0:	667b      	str	r3, [r7, #100]	; 0x64
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	461a      	mov	r2, r3
 80086b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086bc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086be:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086c0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80086c2:	e841 2300 	strex	r3, r2, [r1]
 80086c6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80086c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d1e6      	bne.n	800869c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	3308      	adds	r3, #8
 80086d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086d8:	e853 3f00 	ldrex	r3, [r3]
 80086dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e0:	f023 0301 	bic.w	r3, r3, #1
 80086e4:	663b      	str	r3, [r7, #96]	; 0x60
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	3308      	adds	r3, #8
 80086ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086ee:	64ba      	str	r2, [r7, #72]	; 0x48
 80086f0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086f6:	e841 2300 	strex	r3, r2, [r1]
 80086fa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80086fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d1e5      	bne.n	80086ce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2220      	movs	r2, #32
 8008706:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2220      	movs	r2, #32
 800870c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2200      	movs	r2, #0
 8008712:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008716:	2303      	movs	r3, #3
 8008718:	e067      	b.n	80087ea <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 0304 	and.w	r3, r3, #4
 8008724:	2b00      	cmp	r3, #0
 8008726:	d04f      	beq.n	80087c8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	69db      	ldr	r3, [r3, #28]
 800872e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008736:	d147      	bne.n	80087c8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008740:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874a:	e853 3f00 	ldrex	r3, [r3]
 800874e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008752:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008756:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	461a      	mov	r2, r3
 800875e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008760:	637b      	str	r3, [r7, #52]	; 0x34
 8008762:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008764:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008766:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008768:	e841 2300 	strex	r3, r2, [r1]
 800876c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800876e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008770:	2b00      	cmp	r3, #0
 8008772:	d1e6      	bne.n	8008742 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3308      	adds	r3, #8
 800877a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	e853 3f00 	ldrex	r3, [r3]
 8008782:	613b      	str	r3, [r7, #16]
   return(result);
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	f023 0301 	bic.w	r3, r3, #1
 800878a:	66bb      	str	r3, [r7, #104]	; 0x68
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	3308      	adds	r3, #8
 8008792:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008794:	623a      	str	r2, [r7, #32]
 8008796:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008798:	69f9      	ldr	r1, [r7, #28]
 800879a:	6a3a      	ldr	r2, [r7, #32]
 800879c:	e841 2300 	strex	r3, r2, [r1]
 80087a0:	61bb      	str	r3, [r7, #24]
   return(result);
 80087a2:	69bb      	ldr	r3, [r7, #24]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d1e5      	bne.n	8008774 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	2220      	movs	r2, #32
 80087ac:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2220      	movs	r2, #32
 80087b2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087b4:	68fb      	ldr	r3, [r7, #12]
 80087b6:	2220      	movs	r2, #32
 80087b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	2200      	movs	r2, #0
 80087c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80087c4:	2303      	movs	r3, #3
 80087c6:	e010      	b.n	80087ea <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	69da      	ldr	r2, [r3, #28]
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	4013      	ands	r3, r2
 80087d2:	68ba      	ldr	r2, [r7, #8]
 80087d4:	429a      	cmp	r2, r3
 80087d6:	bf0c      	ite	eq
 80087d8:	2301      	moveq	r3, #1
 80087da:	2300      	movne	r3, #0
 80087dc:	b2db      	uxtb	r3, r3
 80087de:	461a      	mov	r2, r3
 80087e0:	79fb      	ldrb	r3, [r7, #7]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	f43f af4a 	beq.w	800867c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	3770      	adds	r7, #112	; 0x70
 80087ee:	46bd      	mov	sp, r7
 80087f0:	bd80      	pop	{r7, pc}

080087f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b095      	sub	sp, #84	; 0x54
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008802:	e853 3f00 	ldrex	r3, [r3]
 8008806:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800880e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	461a      	mov	r2, r3
 8008816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008818:	643b      	str	r3, [r7, #64]	; 0x40
 800881a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800881c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800881e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008820:	e841 2300 	strex	r3, r2, [r1]
 8008824:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008828:	2b00      	cmp	r3, #0
 800882a:	d1e6      	bne.n	80087fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3308      	adds	r3, #8
 8008832:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008834:	6a3b      	ldr	r3, [r7, #32]
 8008836:	e853 3f00 	ldrex	r3, [r3]
 800883a:	61fb      	str	r3, [r7, #28]
   return(result);
 800883c:	69fb      	ldr	r3, [r7, #28]
 800883e:	f023 0301 	bic.w	r3, r3, #1
 8008842:	64bb      	str	r3, [r7, #72]	; 0x48
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	3308      	adds	r3, #8
 800884a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800884c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800884e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008850:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008854:	e841 2300 	strex	r3, r2, [r1]
 8008858:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800885a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885c:	2b00      	cmp	r3, #0
 800885e:	d1e5      	bne.n	800882c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008864:	2b01      	cmp	r3, #1
 8008866:	d118      	bne.n	800889a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	e853 3f00 	ldrex	r3, [r3]
 8008874:	60bb      	str	r3, [r7, #8]
   return(result);
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	f023 0310 	bic.w	r3, r3, #16
 800887c:	647b      	str	r3, [r7, #68]	; 0x44
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	461a      	mov	r2, r3
 8008884:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008886:	61bb      	str	r3, [r7, #24]
 8008888:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800888a:	6979      	ldr	r1, [r7, #20]
 800888c:	69ba      	ldr	r2, [r7, #24]
 800888e:	e841 2300 	strex	r3, r2, [r1]
 8008892:	613b      	str	r3, [r7, #16]
   return(result);
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1e6      	bne.n	8008868 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2220      	movs	r2, #32
 800889e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2200      	movs	r2, #0
 80088a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2200      	movs	r2, #0
 80088aa:	665a      	str	r2, [r3, #100]	; 0x64
}
 80088ac:	bf00      	nop
 80088ae:	3754      	adds	r7, #84	; 0x54
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f7ff fb3c 	bl	8007f54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088dc:	bf00      	nop
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b088      	sub	sp, #32
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	e853 3f00 	ldrex	r3, [r3]
 80088f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008900:	61fb      	str	r3, [r7, #28]
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	461a      	mov	r2, r3
 8008908:	69fb      	ldr	r3, [r7, #28]
 800890a:	61bb      	str	r3, [r7, #24]
 800890c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800890e:	6979      	ldr	r1, [r7, #20]
 8008910:	69ba      	ldr	r2, [r7, #24]
 8008912:	e841 2300 	strex	r3, r2, [r1]
 8008916:	613b      	str	r3, [r7, #16]
   return(result);
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1e6      	bne.n	80088ec <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2220      	movs	r2, #32
 8008922:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2200      	movs	r2, #0
 8008928:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f7f8 ff5a 	bl	80017e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008930:	bf00      	nop
 8008932:	3720      	adds	r7, #32
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008938:	b480      	push	{r7}
 800893a:	b083      	sub	sp, #12
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008940:	bf00      	nop
 8008942:	370c      	adds	r7, #12
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <__NVIC_SetPriority>:
{
 800894c:	b480      	push	{r7}
 800894e:	b083      	sub	sp, #12
 8008950:	af00      	add	r7, sp, #0
 8008952:	4603      	mov	r3, r0
 8008954:	6039      	str	r1, [r7, #0]
 8008956:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800895c:	2b00      	cmp	r3, #0
 800895e:	db0a      	blt.n	8008976 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	b2da      	uxtb	r2, r3
 8008964:	490c      	ldr	r1, [pc, #48]	; (8008998 <__NVIC_SetPriority+0x4c>)
 8008966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800896a:	0112      	lsls	r2, r2, #4
 800896c:	b2d2      	uxtb	r2, r2
 800896e:	440b      	add	r3, r1
 8008970:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008974:	e00a      	b.n	800898c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	b2da      	uxtb	r2, r3
 800897a:	4908      	ldr	r1, [pc, #32]	; (800899c <__NVIC_SetPriority+0x50>)
 800897c:	79fb      	ldrb	r3, [r7, #7]
 800897e:	f003 030f 	and.w	r3, r3, #15
 8008982:	3b04      	subs	r3, #4
 8008984:	0112      	lsls	r2, r2, #4
 8008986:	b2d2      	uxtb	r2, r2
 8008988:	440b      	add	r3, r1
 800898a:	761a      	strb	r2, [r3, #24]
}
 800898c:	bf00      	nop
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	e000e100 	.word	0xe000e100
 800899c:	e000ed00 	.word	0xe000ed00

080089a0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80089a0:	b580      	push	{r7, lr}
 80089a2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80089a4:	4b05      	ldr	r3, [pc, #20]	; (80089bc <SysTick_Handler+0x1c>)
 80089a6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80089a8:	f001 fd7c 	bl	800a4a4 <xTaskGetSchedulerState>
 80089ac:	4603      	mov	r3, r0
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d001      	beq.n	80089b6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80089b2:	f002 fb61 	bl	800b078 <xPortSysTickHandler>
  }
}
 80089b6:	bf00      	nop
 80089b8:	bd80      	pop	{r7, pc}
 80089ba:	bf00      	nop
 80089bc:	e000e010 	.word	0xe000e010

080089c0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80089c0:	b580      	push	{r7, lr}
 80089c2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80089c4:	2100      	movs	r1, #0
 80089c6:	f06f 0004 	mvn.w	r0, #4
 80089ca:	f7ff ffbf 	bl	800894c <__NVIC_SetPriority>
#endif
}
 80089ce:	bf00      	nop
 80089d0:	bd80      	pop	{r7, pc}
	...

080089d4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089da:	f3ef 8305 	mrs	r3, IPSR
 80089de:	603b      	str	r3, [r7, #0]
  return(result);
 80089e0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d003      	beq.n	80089ee <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80089e6:	f06f 0305 	mvn.w	r3, #5
 80089ea:	607b      	str	r3, [r7, #4]
 80089ec:	e00c      	b.n	8008a08 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80089ee:	4b0a      	ldr	r3, [pc, #40]	; (8008a18 <osKernelInitialize+0x44>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d105      	bne.n	8008a02 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80089f6:	4b08      	ldr	r3, [pc, #32]	; (8008a18 <osKernelInitialize+0x44>)
 80089f8:	2201      	movs	r2, #1
 80089fa:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80089fc:	2300      	movs	r3, #0
 80089fe:	607b      	str	r3, [r7, #4]
 8008a00:	e002      	b.n	8008a08 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008a02:	f04f 33ff 	mov.w	r3, #4294967295
 8008a06:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008a08:	687b      	ldr	r3, [r7, #4]
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr
 8008a16:	bf00      	nop
 8008a18:	200000a8 	.word	0x200000a8

08008a1c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a22:	f3ef 8305 	mrs	r3, IPSR
 8008a26:	603b      	str	r3, [r7, #0]
  return(result);
 8008a28:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d003      	beq.n	8008a36 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008a2e:	f06f 0305 	mvn.w	r3, #5
 8008a32:	607b      	str	r3, [r7, #4]
 8008a34:	e010      	b.n	8008a58 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008a36:	4b0b      	ldr	r3, [pc, #44]	; (8008a64 <osKernelStart+0x48>)
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	2b01      	cmp	r3, #1
 8008a3c:	d109      	bne.n	8008a52 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008a3e:	f7ff ffbf 	bl	80089c0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008a42:	4b08      	ldr	r3, [pc, #32]	; (8008a64 <osKernelStart+0x48>)
 8008a44:	2202      	movs	r2, #2
 8008a46:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008a48:	f001 f8e4 	bl	8009c14 <vTaskStartScheduler>
      stat = osOK;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	607b      	str	r3, [r7, #4]
 8008a50:	e002      	b.n	8008a58 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008a52:	f04f 33ff 	mov.w	r3, #4294967295
 8008a56:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008a58:	687b      	ldr	r3, [r7, #4]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	200000a8 	.word	0x200000a8

08008a68 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b08e      	sub	sp, #56	; 0x38
 8008a6c:	af04      	add	r7, sp, #16
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	60b9      	str	r1, [r7, #8]
 8008a72:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008a74:	2300      	movs	r3, #0
 8008a76:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a78:	f3ef 8305 	mrs	r3, IPSR
 8008a7c:	617b      	str	r3, [r7, #20]
  return(result);
 8008a7e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d17e      	bne.n	8008b82 <osThreadNew+0x11a>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d07b      	beq.n	8008b82 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008a8a:	2380      	movs	r3, #128	; 0x80
 8008a8c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008a8e:	2318      	movs	r3, #24
 8008a90:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008a92:	2300      	movs	r3, #0
 8008a94:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008a96:	f04f 33ff 	mov.w	r3, #4294967295
 8008a9a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d045      	beq.n	8008b2e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d002      	beq.n	8008ab0 <osThreadNew+0x48>
        name = attr->name;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	699b      	ldr	r3, [r3, #24]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d002      	beq.n	8008abe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008abe:	69fb      	ldr	r3, [r7, #28]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d008      	beq.n	8008ad6 <osThreadNew+0x6e>
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	2b38      	cmp	r3, #56	; 0x38
 8008ac8:	d805      	bhi.n	8008ad6 <osThreadNew+0x6e>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d001      	beq.n	8008ada <osThreadNew+0x72>
        return (NULL);
 8008ad6:	2300      	movs	r3, #0
 8008ad8:	e054      	b.n	8008b84 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	695b      	ldr	r3, [r3, #20]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d003      	beq.n	8008aea <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	089b      	lsrs	r3, r3, #2
 8008ae8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d00e      	beq.n	8008b10 <osThreadNew+0xa8>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	68db      	ldr	r3, [r3, #12]
 8008af6:	2b5b      	cmp	r3, #91	; 0x5b
 8008af8:	d90a      	bls.n	8008b10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d006      	beq.n	8008b10 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d002      	beq.n	8008b10 <osThreadNew+0xa8>
        mem = 1;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	61bb      	str	r3, [r7, #24]
 8008b0e:	e010      	b.n	8008b32 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d10c      	bne.n	8008b32 <osThreadNew+0xca>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	2b00      	cmp	r3, #0
 8008b1e:	d108      	bne.n	8008b32 <osThreadNew+0xca>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	691b      	ldr	r3, [r3, #16]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d104      	bne.n	8008b32 <osThreadNew+0xca>
          mem = 0;
 8008b28:	2300      	movs	r3, #0
 8008b2a:	61bb      	str	r3, [r7, #24]
 8008b2c:	e001      	b.n	8008b32 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008b32:	69bb      	ldr	r3, [r7, #24]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	d110      	bne.n	8008b5a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b40:	9202      	str	r2, [sp, #8]
 8008b42:	9301      	str	r3, [sp, #4]
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	9300      	str	r3, [sp, #0]
 8008b48:	68bb      	ldr	r3, [r7, #8]
 8008b4a:	6a3a      	ldr	r2, [r7, #32]
 8008b4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f000 fe0c 	bl	800976c <xTaskCreateStatic>
 8008b54:	4603      	mov	r3, r0
 8008b56:	613b      	str	r3, [r7, #16]
 8008b58:	e013      	b.n	8008b82 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d110      	bne.n	8008b82 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008b60:	6a3b      	ldr	r3, [r7, #32]
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	f107 0310 	add.w	r3, r7, #16
 8008b68:	9301      	str	r3, [sp, #4]
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	9300      	str	r3, [sp, #0]
 8008b6e:	68bb      	ldr	r3, [r7, #8]
 8008b70:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b72:	68f8      	ldr	r0, [r7, #12]
 8008b74:	f000 fe57 	bl	8009826 <xTaskCreate>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d001      	beq.n	8008b82 <osThreadNew+0x11a>
            hTask = NULL;
 8008b7e:	2300      	movs	r3, #0
 8008b80:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b82:	693b      	ldr	r3, [r7, #16]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3728      	adds	r7, #40	; 0x28
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b084      	sub	sp, #16
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b94:	f3ef 8305 	mrs	r3, IPSR
 8008b98:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b9a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d003      	beq.n	8008ba8 <osDelay+0x1c>
    stat = osErrorISR;
 8008ba0:	f06f 0305 	mvn.w	r3, #5
 8008ba4:	60fb      	str	r3, [r7, #12]
 8008ba6:	e007      	b.n	8008bb8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d002      	beq.n	8008bb8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f000 fffa 	bl	8009bac <vTaskDelay>
    }
  }

  return (stat);
 8008bb8:	68fb      	ldr	r3, [r7, #12]
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3710      	adds	r7, #16
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
	...

08008bc4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	4a07      	ldr	r2, [pc, #28]	; (8008bf0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008bd4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	4a06      	ldr	r2, [pc, #24]	; (8008bf4 <vApplicationGetIdleTaskMemory+0x30>)
 8008bda:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2280      	movs	r2, #128	; 0x80
 8008be0:	601a      	str	r2, [r3, #0]
}
 8008be2:	bf00      	nop
 8008be4:	3714      	adds	r7, #20
 8008be6:	46bd      	mov	sp, r7
 8008be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bec:	4770      	bx	lr
 8008bee:	bf00      	nop
 8008bf0:	200000ac 	.word	0x200000ac
 8008bf4:	20000108 	.word	0x20000108

08008bf8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008bf8:	b480      	push	{r7}
 8008bfa:	b085      	sub	sp, #20
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	4a07      	ldr	r2, [pc, #28]	; (8008c24 <vApplicationGetTimerTaskMemory+0x2c>)
 8008c08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	4a06      	ldr	r2, [pc, #24]	; (8008c28 <vApplicationGetTimerTaskMemory+0x30>)
 8008c0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c16:	601a      	str	r2, [r3, #0]
}
 8008c18:	bf00      	nop
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr
 8008c24:	20000308 	.word	0x20000308
 8008c28:	20000364 	.word	0x20000364

08008c2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b083      	sub	sp, #12
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f103 0208 	add.w	r2, r3, #8
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f04f 32ff 	mov.w	r2, #4294967295
 8008c44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	f103 0208 	add.w	r2, r3, #8
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f103 0208 	add.w	r2, r3, #8
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c7a:	bf00      	nop
 8008c7c:	370c      	adds	r7, #12
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c84:	4770      	bx	lr

08008c86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c86:	b480      	push	{r7}
 8008c88:	b085      	sub	sp, #20
 8008c8a:	af00      	add	r7, sp, #0
 8008c8c:	6078      	str	r0, [r7, #4]
 8008c8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	685b      	ldr	r3, [r3, #4]
 8008c94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	68fa      	ldr	r2, [r7, #12]
 8008c9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	689a      	ldr	r2, [r3, #8]
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	683a      	ldr	r2, [r7, #0]
 8008caa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	683a      	ldr	r2, [r7, #0]
 8008cb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008cb2:	683b      	ldr	r3, [r7, #0]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	1c5a      	adds	r2, r3, #1
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	601a      	str	r2, [r3, #0]
}
 8008cc2:	bf00      	nop
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cce:	b480      	push	{r7}
 8008cd0:	b085      	sub	sp, #20
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008cd8:	683b      	ldr	r3, [r7, #0]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ce4:	d103      	bne.n	8008cee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	60fb      	str	r3, [r7, #12]
 8008cec:	e00c      	b.n	8008d08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	3308      	adds	r3, #8
 8008cf2:	60fb      	str	r3, [r7, #12]
 8008cf4:	e002      	b.n	8008cfc <vListInsert+0x2e>
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	685b      	ldr	r3, [r3, #4]
 8008cfa:	60fb      	str	r3, [r7, #12]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	685b      	ldr	r3, [r3, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68ba      	ldr	r2, [r7, #8]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d2f6      	bcs.n	8008cf6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	685a      	ldr	r2, [r3, #4]
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d10:	683b      	ldr	r3, [r7, #0]
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	683a      	ldr	r2, [r7, #0]
 8008d16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	68fa      	ldr	r2, [r7, #12]
 8008d1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	683a      	ldr	r2, [r7, #0]
 8008d22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	1c5a      	adds	r2, r3, #1
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	601a      	str	r2, [r3, #0]
}
 8008d34:	bf00      	nop
 8008d36:	3714      	adds	r7, #20
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d40:	b480      	push	{r7}
 8008d42:	b085      	sub	sp, #20
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	687a      	ldr	r2, [r7, #4]
 8008d54:	6892      	ldr	r2, [r2, #8]
 8008d56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	687a      	ldr	r2, [r7, #4]
 8008d5e:	6852      	ldr	r2, [r2, #4]
 8008d60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d103      	bne.n	8008d74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	689a      	ldr	r2, [r3, #8]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2200      	movs	r2, #0
 8008d78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	1e5a      	subs	r2, r3, #1
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
}
 8008d88:	4618      	mov	r0, r3
 8008d8a:	3714      	adds	r7, #20
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d10a      	bne.n	8008dbe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dac:	f383 8811 	msr	BASEPRI, r3
 8008db0:	f3bf 8f6f 	isb	sy
 8008db4:	f3bf 8f4f 	dsb	sy
 8008db8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008dba:	bf00      	nop
 8008dbc:	e7fe      	b.n	8008dbc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008dbe:	f002 f8c9 	bl	800af54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	681a      	ldr	r2, [r3, #0]
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dca:	68f9      	ldr	r1, [r7, #12]
 8008dcc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008dce:	fb01 f303 	mul.w	r3, r1, r3
 8008dd2:	441a      	add	r2, r3
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	2200      	movs	r2, #0
 8008ddc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681a      	ldr	r2, [r3, #0]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dee:	3b01      	subs	r3, #1
 8008df0:	68f9      	ldr	r1, [r7, #12]
 8008df2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008df4:	fb01 f303 	mul.w	r3, r1, r3
 8008df8:	441a      	add	r2, r3
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	22ff      	movs	r2, #255	; 0xff
 8008e02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	22ff      	movs	r2, #255	; 0xff
 8008e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d114      	bne.n	8008e3e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	691b      	ldr	r3, [r3, #16]
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d01a      	beq.n	8008e52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	3310      	adds	r3, #16
 8008e20:	4618      	mov	r0, r3
 8008e22:	f001 f981 	bl	800a128 <xTaskRemoveFromEventList>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d012      	beq.n	8008e52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e2c:	4b0c      	ldr	r3, [pc, #48]	; (8008e60 <xQueueGenericReset+0xcc>)
 8008e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	f3bf 8f4f 	dsb	sy
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	e009      	b.n	8008e52 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	3310      	adds	r3, #16
 8008e42:	4618      	mov	r0, r3
 8008e44:	f7ff fef2 	bl	8008c2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	3324      	adds	r3, #36	; 0x24
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f7ff feed 	bl	8008c2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e52:	f002 f8af 	bl	800afb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e56:	2301      	movs	r3, #1
}
 8008e58:	4618      	mov	r0, r3
 8008e5a:	3710      	adds	r7, #16
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	e000ed04 	.word	0xe000ed04

08008e64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b08e      	sub	sp, #56	; 0x38
 8008e68:	af02      	add	r7, sp, #8
 8008e6a:	60f8      	str	r0, [r7, #12]
 8008e6c:	60b9      	str	r1, [r7, #8]
 8008e6e:	607a      	str	r2, [r7, #4]
 8008e70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10a      	bne.n	8008e8e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008e78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e7c:	f383 8811 	msr	BASEPRI, r3
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e8a:	bf00      	nop
 8008e8c:	e7fe      	b.n	8008e8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d10a      	bne.n	8008eaa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e98:	f383 8811 	msr	BASEPRI, r3
 8008e9c:	f3bf 8f6f 	isb	sy
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ea6:	bf00      	nop
 8008ea8:	e7fe      	b.n	8008ea8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d002      	beq.n	8008eb6 <xQueueGenericCreateStatic+0x52>
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d001      	beq.n	8008eba <xQueueGenericCreateStatic+0x56>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	e000      	b.n	8008ebc <xQueueGenericCreateStatic+0x58>
 8008eba:	2300      	movs	r3, #0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10a      	bne.n	8008ed6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	623b      	str	r3, [r7, #32]
}
 8008ed2:	bf00      	nop
 8008ed4:	e7fe      	b.n	8008ed4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d102      	bne.n	8008ee2 <xQueueGenericCreateStatic+0x7e>
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d101      	bne.n	8008ee6 <xQueueGenericCreateStatic+0x82>
 8008ee2:	2301      	movs	r3, #1
 8008ee4:	e000      	b.n	8008ee8 <xQueueGenericCreateStatic+0x84>
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d10a      	bne.n	8008f02 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef0:	f383 8811 	msr	BASEPRI, r3
 8008ef4:	f3bf 8f6f 	isb	sy
 8008ef8:	f3bf 8f4f 	dsb	sy
 8008efc:	61fb      	str	r3, [r7, #28]
}
 8008efe:	bf00      	nop
 8008f00:	e7fe      	b.n	8008f00 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008f02:	2350      	movs	r3, #80	; 0x50
 8008f04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	2b50      	cmp	r3, #80	; 0x50
 8008f0a:	d00a      	beq.n	8008f22 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f10:	f383 8811 	msr	BASEPRI, r3
 8008f14:	f3bf 8f6f 	isb	sy
 8008f18:	f3bf 8f4f 	dsb	sy
 8008f1c:	61bb      	str	r3, [r7, #24]
}
 8008f1e:	bf00      	nop
 8008f20:	e7fe      	b.n	8008f20 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f22:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00d      	beq.n	8008f4a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f30:	2201      	movs	r2, #1
 8008f32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f36:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	4613      	mov	r3, r2
 8008f40:	687a      	ldr	r2, [r7, #4]
 8008f42:	68b9      	ldr	r1, [r7, #8]
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f000 f805 	bl	8008f54 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	3730      	adds	r7, #48	; 0x30
 8008f50:	46bd      	mov	sp, r7
 8008f52:	bd80      	pop	{r7, pc}

08008f54 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b084      	sub	sp, #16
 8008f58:	af00      	add	r7, sp, #0
 8008f5a:	60f8      	str	r0, [r7, #12]
 8008f5c:	60b9      	str	r1, [r7, #8]
 8008f5e:	607a      	str	r2, [r7, #4]
 8008f60:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d103      	bne.n	8008f70 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f68:	69bb      	ldr	r3, [r7, #24]
 8008f6a:	69ba      	ldr	r2, [r7, #24]
 8008f6c:	601a      	str	r2, [r3, #0]
 8008f6e:	e002      	b.n	8008f76 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008f70:	69bb      	ldr	r3, [r7, #24]
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008f76:	69bb      	ldr	r3, [r7, #24]
 8008f78:	68fa      	ldr	r2, [r7, #12]
 8008f7a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008f7c:	69bb      	ldr	r3, [r7, #24]
 8008f7e:	68ba      	ldr	r2, [r7, #8]
 8008f80:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f82:	2101      	movs	r1, #1
 8008f84:	69b8      	ldr	r0, [r7, #24]
 8008f86:	f7ff ff05 	bl	8008d94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008f8a:	69bb      	ldr	r3, [r7, #24]
 8008f8c:	78fa      	ldrb	r2, [r7, #3]
 8008f8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008f92:	bf00      	nop
 8008f94:	3710      	adds	r7, #16
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
	...

08008f9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b08e      	sub	sp, #56	; 0x38
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
 8008fa8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008faa:	2300      	movs	r3, #0
 8008fac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10a      	bne.n	8008fce <xQueueGenericSend+0x32>
	__asm volatile
 8008fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008fca:	bf00      	nop
 8008fcc:	e7fe      	b.n	8008fcc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d103      	bne.n	8008fdc <xQueueGenericSend+0x40>
 8008fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d101      	bne.n	8008fe0 <xQueueGenericSend+0x44>
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e000      	b.n	8008fe2 <xQueueGenericSend+0x46>
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d10a      	bne.n	8008ffc <xQueueGenericSend+0x60>
	__asm volatile
 8008fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fea:	f383 8811 	msr	BASEPRI, r3
 8008fee:	f3bf 8f6f 	isb	sy
 8008ff2:	f3bf 8f4f 	dsb	sy
 8008ff6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ff8:	bf00      	nop
 8008ffa:	e7fe      	b.n	8008ffa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	2b02      	cmp	r3, #2
 8009000:	d103      	bne.n	800900a <xQueueGenericSend+0x6e>
 8009002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009006:	2b01      	cmp	r3, #1
 8009008:	d101      	bne.n	800900e <xQueueGenericSend+0x72>
 800900a:	2301      	movs	r3, #1
 800900c:	e000      	b.n	8009010 <xQueueGenericSend+0x74>
 800900e:	2300      	movs	r3, #0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d10a      	bne.n	800902a <xQueueGenericSend+0x8e>
	__asm volatile
 8009014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009018:	f383 8811 	msr	BASEPRI, r3
 800901c:	f3bf 8f6f 	isb	sy
 8009020:	f3bf 8f4f 	dsb	sy
 8009024:	623b      	str	r3, [r7, #32]
}
 8009026:	bf00      	nop
 8009028:	e7fe      	b.n	8009028 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800902a:	f001 fa3b 	bl	800a4a4 <xTaskGetSchedulerState>
 800902e:	4603      	mov	r3, r0
 8009030:	2b00      	cmp	r3, #0
 8009032:	d102      	bne.n	800903a <xQueueGenericSend+0x9e>
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	2b00      	cmp	r3, #0
 8009038:	d101      	bne.n	800903e <xQueueGenericSend+0xa2>
 800903a:	2301      	movs	r3, #1
 800903c:	e000      	b.n	8009040 <xQueueGenericSend+0xa4>
 800903e:	2300      	movs	r3, #0
 8009040:	2b00      	cmp	r3, #0
 8009042:	d10a      	bne.n	800905a <xQueueGenericSend+0xbe>
	__asm volatile
 8009044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009048:	f383 8811 	msr	BASEPRI, r3
 800904c:	f3bf 8f6f 	isb	sy
 8009050:	f3bf 8f4f 	dsb	sy
 8009054:	61fb      	str	r3, [r7, #28]
}
 8009056:	bf00      	nop
 8009058:	e7fe      	b.n	8009058 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800905a:	f001 ff7b 	bl	800af54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800905e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009066:	429a      	cmp	r2, r3
 8009068:	d302      	bcc.n	8009070 <xQueueGenericSend+0xd4>
 800906a:	683b      	ldr	r3, [r7, #0]
 800906c:	2b02      	cmp	r3, #2
 800906e:	d129      	bne.n	80090c4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009070:	683a      	ldr	r2, [r7, #0]
 8009072:	68b9      	ldr	r1, [r7, #8]
 8009074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009076:	f000 fa0b 	bl	8009490 <prvCopyDataToQueue>
 800907a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800907c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009080:	2b00      	cmp	r3, #0
 8009082:	d010      	beq.n	80090a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009086:	3324      	adds	r3, #36	; 0x24
 8009088:	4618      	mov	r0, r3
 800908a:	f001 f84d 	bl	800a128 <xTaskRemoveFromEventList>
 800908e:	4603      	mov	r3, r0
 8009090:	2b00      	cmp	r3, #0
 8009092:	d013      	beq.n	80090bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009094:	4b3f      	ldr	r3, [pc, #252]	; (8009194 <xQueueGenericSend+0x1f8>)
 8009096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800909a:	601a      	str	r2, [r3, #0]
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	f3bf 8f6f 	isb	sy
 80090a4:	e00a      	b.n	80090bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80090a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d007      	beq.n	80090bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80090ac:	4b39      	ldr	r3, [pc, #228]	; (8009194 <xQueueGenericSend+0x1f8>)
 80090ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090b2:	601a      	str	r2, [r3, #0]
 80090b4:	f3bf 8f4f 	dsb	sy
 80090b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80090bc:	f001 ff7a 	bl	800afb4 <vPortExitCritical>
				return pdPASS;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e063      	b.n	800918c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d103      	bne.n	80090d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090ca:	f001 ff73 	bl	800afb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80090ce:	2300      	movs	r3, #0
 80090d0:	e05c      	b.n	800918c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d106      	bne.n	80090e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090d8:	f107 0314 	add.w	r3, r7, #20
 80090dc:	4618      	mov	r0, r3
 80090de:	f001 f887 	bl	800a1f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090e2:	2301      	movs	r3, #1
 80090e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090e6:	f001 ff65 	bl	800afb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090ea:	f000 fdf9 	bl	8009ce0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090ee:	f001 ff31 	bl	800af54 <vPortEnterCritical>
 80090f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090f8:	b25b      	sxtb	r3, r3
 80090fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fe:	d103      	bne.n	8009108 <xQueueGenericSend+0x16c>
 8009100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009102:	2200      	movs	r2, #0
 8009104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800910a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800910e:	b25b      	sxtb	r3, r3
 8009110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009114:	d103      	bne.n	800911e <xQueueGenericSend+0x182>
 8009116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009118:	2200      	movs	r2, #0
 800911a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800911e:	f001 ff49 	bl	800afb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009122:	1d3a      	adds	r2, r7, #4
 8009124:	f107 0314 	add.w	r3, r7, #20
 8009128:	4611      	mov	r1, r2
 800912a:	4618      	mov	r0, r3
 800912c:	f001 f876 	bl	800a21c <xTaskCheckForTimeOut>
 8009130:	4603      	mov	r3, r0
 8009132:	2b00      	cmp	r3, #0
 8009134:	d124      	bne.n	8009180 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009136:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009138:	f000 faa2 	bl	8009680 <prvIsQueueFull>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d018      	beq.n	8009174 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009144:	3310      	adds	r3, #16
 8009146:	687a      	ldr	r2, [r7, #4]
 8009148:	4611      	mov	r1, r2
 800914a:	4618      	mov	r0, r3
 800914c:	f000 ff9c 	bl	800a088 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009152:	f000 fa2d 	bl	80095b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009156:	f000 fdd1 	bl	8009cfc <xTaskResumeAll>
 800915a:	4603      	mov	r3, r0
 800915c:	2b00      	cmp	r3, #0
 800915e:	f47f af7c 	bne.w	800905a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009162:	4b0c      	ldr	r3, [pc, #48]	; (8009194 <xQueueGenericSend+0x1f8>)
 8009164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009168:	601a      	str	r2, [r3, #0]
 800916a:	f3bf 8f4f 	dsb	sy
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	e772      	b.n	800905a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009176:	f000 fa1b 	bl	80095b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800917a:	f000 fdbf 	bl	8009cfc <xTaskResumeAll>
 800917e:	e76c      	b.n	800905a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009182:	f000 fa15 	bl	80095b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009186:	f000 fdb9 	bl	8009cfc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800918a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800918c:	4618      	mov	r0, r3
 800918e:	3738      	adds	r7, #56	; 0x38
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	e000ed04 	.word	0xe000ed04

08009198 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009198:	b580      	push	{r7, lr}
 800919a:	b090      	sub	sp, #64	; 0x40
 800919c:	af00      	add	r7, sp, #0
 800919e:	60f8      	str	r0, [r7, #12]
 80091a0:	60b9      	str	r1, [r7, #8]
 80091a2:	607a      	str	r2, [r7, #4]
 80091a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80091aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10a      	bne.n	80091c6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80091b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80091c2:	bf00      	nop
 80091c4:	e7fe      	b.n	80091c4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d103      	bne.n	80091d4 <xQueueGenericSendFromISR+0x3c>
 80091cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d101      	bne.n	80091d8 <xQueueGenericSendFromISR+0x40>
 80091d4:	2301      	movs	r3, #1
 80091d6:	e000      	b.n	80091da <xQueueGenericSendFromISR+0x42>
 80091d8:	2300      	movs	r3, #0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d10a      	bne.n	80091f4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80091de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80091f0:	bf00      	nop
 80091f2:	e7fe      	b.n	80091f2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d103      	bne.n	8009202 <xQueueGenericSendFromISR+0x6a>
 80091fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091fe:	2b01      	cmp	r3, #1
 8009200:	d101      	bne.n	8009206 <xQueueGenericSendFromISR+0x6e>
 8009202:	2301      	movs	r3, #1
 8009204:	e000      	b.n	8009208 <xQueueGenericSendFromISR+0x70>
 8009206:	2300      	movs	r3, #0
 8009208:	2b00      	cmp	r3, #0
 800920a:	d10a      	bne.n	8009222 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800920c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009210:	f383 8811 	msr	BASEPRI, r3
 8009214:	f3bf 8f6f 	isb	sy
 8009218:	f3bf 8f4f 	dsb	sy
 800921c:	623b      	str	r3, [r7, #32]
}
 800921e:	bf00      	nop
 8009220:	e7fe      	b.n	8009220 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009222:	f001 ff79 	bl	800b118 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009226:	f3ef 8211 	mrs	r2, BASEPRI
 800922a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800922e:	f383 8811 	msr	BASEPRI, r3
 8009232:	f3bf 8f6f 	isb	sy
 8009236:	f3bf 8f4f 	dsb	sy
 800923a:	61fa      	str	r2, [r7, #28]
 800923c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800923e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009240:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009244:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800924a:	429a      	cmp	r2, r3
 800924c:	d302      	bcc.n	8009254 <xQueueGenericSendFromISR+0xbc>
 800924e:	683b      	ldr	r3, [r7, #0]
 8009250:	2b02      	cmp	r3, #2
 8009252:	d12f      	bne.n	80092b4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009256:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800925a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800925e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009262:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009264:	683a      	ldr	r2, [r7, #0]
 8009266:	68b9      	ldr	r1, [r7, #8]
 8009268:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800926a:	f000 f911 	bl	8009490 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800926e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009276:	d112      	bne.n	800929e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800927a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800927c:	2b00      	cmp	r3, #0
 800927e:	d016      	beq.n	80092ae <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009280:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009282:	3324      	adds	r3, #36	; 0x24
 8009284:	4618      	mov	r0, r3
 8009286:	f000 ff4f 	bl	800a128 <xTaskRemoveFromEventList>
 800928a:	4603      	mov	r3, r0
 800928c:	2b00      	cmp	r3, #0
 800928e:	d00e      	beq.n	80092ae <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	2b00      	cmp	r3, #0
 8009294:	d00b      	beq.n	80092ae <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2201      	movs	r2, #1
 800929a:	601a      	str	r2, [r3, #0]
 800929c:	e007      	b.n	80092ae <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800929e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80092a2:	3301      	adds	r3, #1
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	b25a      	sxtb	r2, r3
 80092a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80092ae:	2301      	movs	r3, #1
 80092b0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80092b2:	e001      	b.n	80092b8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80092b4:	2300      	movs	r3, #0
 80092b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092ba:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80092c2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80092c6:	4618      	mov	r0, r3
 80092c8:	3740      	adds	r7, #64	; 0x40
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
	...

080092d0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b08c      	sub	sp, #48	; 0x30
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80092dc:	2300      	movs	r3, #0
 80092de:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80092e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d10a      	bne.n	8009300 <xQueueReceive+0x30>
	__asm volatile
 80092ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092ee:	f383 8811 	msr	BASEPRI, r3
 80092f2:	f3bf 8f6f 	isb	sy
 80092f6:	f3bf 8f4f 	dsb	sy
 80092fa:	623b      	str	r3, [r7, #32]
}
 80092fc:	bf00      	nop
 80092fe:	e7fe      	b.n	80092fe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d103      	bne.n	800930e <xQueueReceive+0x3e>
 8009306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800930a:	2b00      	cmp	r3, #0
 800930c:	d101      	bne.n	8009312 <xQueueReceive+0x42>
 800930e:	2301      	movs	r3, #1
 8009310:	e000      	b.n	8009314 <xQueueReceive+0x44>
 8009312:	2300      	movs	r3, #0
 8009314:	2b00      	cmp	r3, #0
 8009316:	d10a      	bne.n	800932e <xQueueReceive+0x5e>
	__asm volatile
 8009318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931c:	f383 8811 	msr	BASEPRI, r3
 8009320:	f3bf 8f6f 	isb	sy
 8009324:	f3bf 8f4f 	dsb	sy
 8009328:	61fb      	str	r3, [r7, #28]
}
 800932a:	bf00      	nop
 800932c:	e7fe      	b.n	800932c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800932e:	f001 f8b9 	bl	800a4a4 <xTaskGetSchedulerState>
 8009332:	4603      	mov	r3, r0
 8009334:	2b00      	cmp	r3, #0
 8009336:	d102      	bne.n	800933e <xQueueReceive+0x6e>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d101      	bne.n	8009342 <xQueueReceive+0x72>
 800933e:	2301      	movs	r3, #1
 8009340:	e000      	b.n	8009344 <xQueueReceive+0x74>
 8009342:	2300      	movs	r3, #0
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10a      	bne.n	800935e <xQueueReceive+0x8e>
	__asm volatile
 8009348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934c:	f383 8811 	msr	BASEPRI, r3
 8009350:	f3bf 8f6f 	isb	sy
 8009354:	f3bf 8f4f 	dsb	sy
 8009358:	61bb      	str	r3, [r7, #24]
}
 800935a:	bf00      	nop
 800935c:	e7fe      	b.n	800935c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800935e:	f001 fdf9 	bl	800af54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009366:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936a:	2b00      	cmp	r3, #0
 800936c:	d01f      	beq.n	80093ae <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800936e:	68b9      	ldr	r1, [r7, #8]
 8009370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009372:	f000 f8f7 	bl	8009564 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009378:	1e5a      	subs	r2, r3, #1
 800937a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800937e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009380:	691b      	ldr	r3, [r3, #16]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d00f      	beq.n	80093a6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009388:	3310      	adds	r3, #16
 800938a:	4618      	mov	r0, r3
 800938c:	f000 fecc 	bl	800a128 <xTaskRemoveFromEventList>
 8009390:	4603      	mov	r3, r0
 8009392:	2b00      	cmp	r3, #0
 8009394:	d007      	beq.n	80093a6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009396:	4b3d      	ldr	r3, [pc, #244]	; (800948c <xQueueReceive+0x1bc>)
 8009398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800939c:	601a      	str	r2, [r3, #0]
 800939e:	f3bf 8f4f 	dsb	sy
 80093a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80093a6:	f001 fe05 	bl	800afb4 <vPortExitCritical>
				return pdPASS;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e069      	b.n	8009482 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d103      	bne.n	80093bc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093b4:	f001 fdfe 	bl	800afb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80093b8:	2300      	movs	r3, #0
 80093ba:	e062      	b.n	8009482 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d106      	bne.n	80093d0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093c2:	f107 0310 	add.w	r3, r7, #16
 80093c6:	4618      	mov	r0, r3
 80093c8:	f000 ff12 	bl	800a1f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093cc:	2301      	movs	r3, #1
 80093ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093d0:	f001 fdf0 	bl	800afb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093d4:	f000 fc84 	bl	8009ce0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093d8:	f001 fdbc 	bl	800af54 <vPortEnterCritical>
 80093dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093e2:	b25b      	sxtb	r3, r3
 80093e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e8:	d103      	bne.n	80093f2 <xQueueReceive+0x122>
 80093ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ec:	2200      	movs	r2, #0
 80093ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093f8:	b25b      	sxtb	r3, r3
 80093fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fe:	d103      	bne.n	8009408 <xQueueReceive+0x138>
 8009400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009402:	2200      	movs	r2, #0
 8009404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009408:	f001 fdd4 	bl	800afb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800940c:	1d3a      	adds	r2, r7, #4
 800940e:	f107 0310 	add.w	r3, r7, #16
 8009412:	4611      	mov	r1, r2
 8009414:	4618      	mov	r0, r3
 8009416:	f000 ff01 	bl	800a21c <xTaskCheckForTimeOut>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d123      	bne.n	8009468 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009422:	f000 f917 	bl	8009654 <prvIsQueueEmpty>
 8009426:	4603      	mov	r3, r0
 8009428:	2b00      	cmp	r3, #0
 800942a:	d017      	beq.n	800945c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800942c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942e:	3324      	adds	r3, #36	; 0x24
 8009430:	687a      	ldr	r2, [r7, #4]
 8009432:	4611      	mov	r1, r2
 8009434:	4618      	mov	r0, r3
 8009436:	f000 fe27 	bl	800a088 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800943a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800943c:	f000 f8b8 	bl	80095b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009440:	f000 fc5c 	bl	8009cfc <xTaskResumeAll>
 8009444:	4603      	mov	r3, r0
 8009446:	2b00      	cmp	r3, #0
 8009448:	d189      	bne.n	800935e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800944a:	4b10      	ldr	r3, [pc, #64]	; (800948c <xQueueReceive+0x1bc>)
 800944c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009450:	601a      	str	r2, [r3, #0]
 8009452:	f3bf 8f4f 	dsb	sy
 8009456:	f3bf 8f6f 	isb	sy
 800945a:	e780      	b.n	800935e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800945c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800945e:	f000 f8a7 	bl	80095b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009462:	f000 fc4b 	bl	8009cfc <xTaskResumeAll>
 8009466:	e77a      	b.n	800935e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800946a:	f000 f8a1 	bl	80095b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800946e:	f000 fc45 	bl	8009cfc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009474:	f000 f8ee 	bl	8009654 <prvIsQueueEmpty>
 8009478:	4603      	mov	r3, r0
 800947a:	2b00      	cmp	r3, #0
 800947c:	f43f af6f 	beq.w	800935e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009480:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009482:	4618      	mov	r0, r3
 8009484:	3730      	adds	r7, #48	; 0x30
 8009486:	46bd      	mov	sp, r7
 8009488:	bd80      	pop	{r7, pc}
 800948a:	bf00      	nop
 800948c:	e000ed04 	.word	0xe000ed04

08009490 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b086      	sub	sp, #24
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800949c:	2300      	movs	r3, #0
 800949e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d10d      	bne.n	80094ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d14d      	bne.n	8009552 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	4618      	mov	r0, r3
 80094bc:	f001 f810 	bl	800a4e0 <xTaskPriorityDisinherit>
 80094c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	2200      	movs	r2, #0
 80094c6:	609a      	str	r2, [r3, #8]
 80094c8:	e043      	b.n	8009552 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d119      	bne.n	8009504 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6858      	ldr	r0, [r3, #4]
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d8:	461a      	mov	r2, r3
 80094da:	68b9      	ldr	r1, [r7, #8]
 80094dc:	f002 f870 	bl	800b5c0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	685a      	ldr	r2, [r3, #4]
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094e8:	441a      	add	r2, r3
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	685a      	ldr	r2, [r3, #4]
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d32b      	bcc.n	8009552 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	605a      	str	r2, [r3, #4]
 8009502:	e026      	b.n	8009552 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	68d8      	ldr	r0, [r3, #12]
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800950c:	461a      	mov	r2, r3
 800950e:	68b9      	ldr	r1, [r7, #8]
 8009510:	f002 f856 	bl	800b5c0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	68da      	ldr	r2, [r3, #12]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951c:	425b      	negs	r3, r3
 800951e:	441a      	add	r2, r3
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	68da      	ldr	r2, [r3, #12]
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	429a      	cmp	r2, r3
 800952e:	d207      	bcs.n	8009540 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	689a      	ldr	r2, [r3, #8]
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009538:	425b      	negs	r3, r3
 800953a:	441a      	add	r2, r3
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2b02      	cmp	r3, #2
 8009544:	d105      	bne.n	8009552 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009546:	693b      	ldr	r3, [r7, #16]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d002      	beq.n	8009552 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800954c:	693b      	ldr	r3, [r7, #16]
 800954e:	3b01      	subs	r3, #1
 8009550:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	1c5a      	adds	r2, r3, #1
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800955a:	697b      	ldr	r3, [r7, #20]
}
 800955c:	4618      	mov	r0, r3
 800955e:	3718      	adds	r7, #24
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009564:	b580      	push	{r7, lr}
 8009566:	b082      	sub	sp, #8
 8009568:	af00      	add	r7, sp, #0
 800956a:	6078      	str	r0, [r7, #4]
 800956c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009572:	2b00      	cmp	r3, #0
 8009574:	d018      	beq.n	80095a8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	68da      	ldr	r2, [r3, #12]
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957e:	441a      	add	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	68da      	ldr	r2, [r3, #12]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	429a      	cmp	r2, r3
 800958e:	d303      	bcc.n	8009598 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	68d9      	ldr	r1, [r3, #12]
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095a0:	461a      	mov	r2, r3
 80095a2:	6838      	ldr	r0, [r7, #0]
 80095a4:	f002 f80c 	bl	800b5c0 <memcpy>
	}
}
 80095a8:	bf00      	nop
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80095b8:	f001 fccc 	bl	800af54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095c4:	e011      	b.n	80095ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d012      	beq.n	80095f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	3324      	adds	r3, #36	; 0x24
 80095d2:	4618      	mov	r0, r3
 80095d4:	f000 fda8 	bl	800a128 <xTaskRemoveFromEventList>
 80095d8:	4603      	mov	r3, r0
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d001      	beq.n	80095e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80095de:	f000 fe7f 	bl	800a2e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80095e2:	7bfb      	ldrb	r3, [r7, #15]
 80095e4:	3b01      	subs	r3, #1
 80095e6:	b2db      	uxtb	r3, r3
 80095e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	dce9      	bgt.n	80095c6 <prvUnlockQueue+0x16>
 80095f2:	e000      	b.n	80095f6 <prvUnlockQueue+0x46>
					break;
 80095f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	22ff      	movs	r2, #255	; 0xff
 80095fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80095fe:	f001 fcd9 	bl	800afb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009602:	f001 fca7 	bl	800af54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800960c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800960e:	e011      	b.n	8009634 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	691b      	ldr	r3, [r3, #16]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d012      	beq.n	800963e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	3310      	adds	r3, #16
 800961c:	4618      	mov	r0, r3
 800961e:	f000 fd83 	bl	800a128 <xTaskRemoveFromEventList>
 8009622:	4603      	mov	r3, r0
 8009624:	2b00      	cmp	r3, #0
 8009626:	d001      	beq.n	800962c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009628:	f000 fe5a 	bl	800a2e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800962c:	7bbb      	ldrb	r3, [r7, #14]
 800962e:	3b01      	subs	r3, #1
 8009630:	b2db      	uxtb	r3, r3
 8009632:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009638:	2b00      	cmp	r3, #0
 800963a:	dce9      	bgt.n	8009610 <prvUnlockQueue+0x60>
 800963c:	e000      	b.n	8009640 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800963e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	22ff      	movs	r2, #255	; 0xff
 8009644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009648:	f001 fcb4 	bl	800afb4 <vPortExitCritical>
}
 800964c:	bf00      	nop
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}

08009654 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b084      	sub	sp, #16
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800965c:	f001 fc7a 	bl	800af54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009664:	2b00      	cmp	r3, #0
 8009666:	d102      	bne.n	800966e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009668:	2301      	movs	r3, #1
 800966a:	60fb      	str	r3, [r7, #12]
 800966c:	e001      	b.n	8009672 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800966e:	2300      	movs	r3, #0
 8009670:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009672:	f001 fc9f 	bl	800afb4 <vPortExitCritical>

	return xReturn;
 8009676:	68fb      	ldr	r3, [r7, #12]
}
 8009678:	4618      	mov	r0, r3
 800967a:	3710      	adds	r7, #16
 800967c:	46bd      	mov	sp, r7
 800967e:	bd80      	pop	{r7, pc}

08009680 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009680:	b580      	push	{r7, lr}
 8009682:	b084      	sub	sp, #16
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009688:	f001 fc64 	bl	800af54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009694:	429a      	cmp	r2, r3
 8009696:	d102      	bne.n	800969e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009698:	2301      	movs	r3, #1
 800969a:	60fb      	str	r3, [r7, #12]
 800969c:	e001      	b.n	80096a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800969e:	2300      	movs	r3, #0
 80096a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096a2:	f001 fc87 	bl	800afb4 <vPortExitCritical>

	return xReturn;
 80096a6:	68fb      	ldr	r3, [r7, #12]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3710      	adds	r7, #16
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}

080096b0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80096b0:	b480      	push	{r7}
 80096b2:	b085      	sub	sp, #20
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
 80096b8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096ba:	2300      	movs	r3, #0
 80096bc:	60fb      	str	r3, [r7, #12]
 80096be:	e014      	b.n	80096ea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80096c0:	4a0f      	ldr	r2, [pc, #60]	; (8009700 <vQueueAddToRegistry+0x50>)
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10b      	bne.n	80096e4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80096cc:	490c      	ldr	r1, [pc, #48]	; (8009700 <vQueueAddToRegistry+0x50>)
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	683a      	ldr	r2, [r7, #0]
 80096d2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80096d6:	4a0a      	ldr	r2, [pc, #40]	; (8009700 <vQueueAddToRegistry+0x50>)
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	00db      	lsls	r3, r3, #3
 80096dc:	4413      	add	r3, r2
 80096de:	687a      	ldr	r2, [r7, #4]
 80096e0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80096e2:	e006      	b.n	80096f2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	3301      	adds	r3, #1
 80096e8:	60fb      	str	r3, [r7, #12]
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	2b07      	cmp	r3, #7
 80096ee:	d9e7      	bls.n	80096c0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80096f0:	bf00      	nop
 80096f2:	bf00      	nop
 80096f4:	3714      	adds	r7, #20
 80096f6:	46bd      	mov	sp, r7
 80096f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096fc:	4770      	bx	lr
 80096fe:	bf00      	nop
 8009700:	20001f78 	.word	0x20001f78

08009704 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
 800970a:	60f8      	str	r0, [r7, #12]
 800970c:	60b9      	str	r1, [r7, #8]
 800970e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009714:	f001 fc1e 	bl	800af54 <vPortEnterCritical>
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800971e:	b25b      	sxtb	r3, r3
 8009720:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009724:	d103      	bne.n	800972e <vQueueWaitForMessageRestricted+0x2a>
 8009726:	697b      	ldr	r3, [r7, #20]
 8009728:	2200      	movs	r2, #0
 800972a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800972e:	697b      	ldr	r3, [r7, #20]
 8009730:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009734:	b25b      	sxtb	r3, r3
 8009736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800973a:	d103      	bne.n	8009744 <vQueueWaitForMessageRestricted+0x40>
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	2200      	movs	r2, #0
 8009740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009744:	f001 fc36 	bl	800afb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009748:	697b      	ldr	r3, [r7, #20]
 800974a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974c:	2b00      	cmp	r3, #0
 800974e:	d106      	bne.n	800975e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	3324      	adds	r3, #36	; 0x24
 8009754:	687a      	ldr	r2, [r7, #4]
 8009756:	68b9      	ldr	r1, [r7, #8]
 8009758:	4618      	mov	r0, r3
 800975a:	f000 fcb9 	bl	800a0d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800975e:	6978      	ldr	r0, [r7, #20]
 8009760:	f7ff ff26 	bl	80095b0 <prvUnlockQueue>
	}
 8009764:	bf00      	nop
 8009766:	3718      	adds	r7, #24
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800976c:	b580      	push	{r7, lr}
 800976e:	b08e      	sub	sp, #56	; 0x38
 8009770:	af04      	add	r7, sp, #16
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	60b9      	str	r1, [r7, #8]
 8009776:	607a      	str	r2, [r7, #4]
 8009778:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800977a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800977c:	2b00      	cmp	r3, #0
 800977e:	d10a      	bne.n	8009796 <xTaskCreateStatic+0x2a>
	__asm volatile
 8009780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009784:	f383 8811 	msr	BASEPRI, r3
 8009788:	f3bf 8f6f 	isb	sy
 800978c:	f3bf 8f4f 	dsb	sy
 8009790:	623b      	str	r3, [r7, #32]
}
 8009792:	bf00      	nop
 8009794:	e7fe      	b.n	8009794 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8009796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10a      	bne.n	80097b2 <xTaskCreateStatic+0x46>
	__asm volatile
 800979c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a0:	f383 8811 	msr	BASEPRI, r3
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	f3bf 8f4f 	dsb	sy
 80097ac:	61fb      	str	r3, [r7, #28]
}
 80097ae:	bf00      	nop
 80097b0:	e7fe      	b.n	80097b0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80097b2:	235c      	movs	r3, #92	; 0x5c
 80097b4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80097b6:	693b      	ldr	r3, [r7, #16]
 80097b8:	2b5c      	cmp	r3, #92	; 0x5c
 80097ba:	d00a      	beq.n	80097d2 <xTaskCreateStatic+0x66>
	__asm volatile
 80097bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c0:	f383 8811 	msr	BASEPRI, r3
 80097c4:	f3bf 8f6f 	isb	sy
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	61bb      	str	r3, [r7, #24]
}
 80097ce:	bf00      	nop
 80097d0:	e7fe      	b.n	80097d0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80097d2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80097d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d01e      	beq.n	8009818 <xTaskCreateStatic+0xac>
 80097da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d01b      	beq.n	8009818 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80097e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80097e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097e8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80097ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ec:	2202      	movs	r2, #2
 80097ee:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80097f2:	2300      	movs	r3, #0
 80097f4:	9303      	str	r3, [sp, #12]
 80097f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f8:	9302      	str	r3, [sp, #8]
 80097fa:	f107 0314 	add.w	r3, r7, #20
 80097fe:	9301      	str	r3, [sp, #4]
 8009800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	68b9      	ldr	r1, [r7, #8]
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	f000 f850 	bl	80098b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009810:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009812:	f000 f8dd 	bl	80099d0 <prvAddNewTaskToReadyList>
 8009816:	e001      	b.n	800981c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009818:	2300      	movs	r3, #0
 800981a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800981c:	697b      	ldr	r3, [r7, #20]
	}
 800981e:	4618      	mov	r0, r3
 8009820:	3728      	adds	r7, #40	; 0x28
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}

08009826 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009826:	b580      	push	{r7, lr}
 8009828:	b08c      	sub	sp, #48	; 0x30
 800982a:	af04      	add	r7, sp, #16
 800982c:	60f8      	str	r0, [r7, #12]
 800982e:	60b9      	str	r1, [r7, #8]
 8009830:	603b      	str	r3, [r7, #0]
 8009832:	4613      	mov	r3, r2
 8009834:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009836:	88fb      	ldrh	r3, [r7, #6]
 8009838:	009b      	lsls	r3, r3, #2
 800983a:	4618      	mov	r0, r3
 800983c:	f001 fcac 	bl	800b198 <pvPortMalloc>
 8009840:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00e      	beq.n	8009866 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009848:	205c      	movs	r0, #92	; 0x5c
 800984a:	f001 fca5 	bl	800b198 <pvPortMalloc>
 800984e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	2b00      	cmp	r3, #0
 8009854:	d003      	beq.n	800985e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009856:	69fb      	ldr	r3, [r7, #28]
 8009858:	697a      	ldr	r2, [r7, #20]
 800985a:	631a      	str	r2, [r3, #48]	; 0x30
 800985c:	e005      	b.n	800986a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800985e:	6978      	ldr	r0, [r7, #20]
 8009860:	f001 fd66 	bl	800b330 <vPortFree>
 8009864:	e001      	b.n	800986a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009866:	2300      	movs	r3, #0
 8009868:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d017      	beq.n	80098a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	2200      	movs	r2, #0
 8009874:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009878:	88fa      	ldrh	r2, [r7, #6]
 800987a:	2300      	movs	r3, #0
 800987c:	9303      	str	r3, [sp, #12]
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	9302      	str	r3, [sp, #8]
 8009882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009884:	9301      	str	r3, [sp, #4]
 8009886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009888:	9300      	str	r3, [sp, #0]
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	68b9      	ldr	r1, [r7, #8]
 800988e:	68f8      	ldr	r0, [r7, #12]
 8009890:	f000 f80e 	bl	80098b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009894:	69f8      	ldr	r0, [r7, #28]
 8009896:	f000 f89b 	bl	80099d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800989a:	2301      	movs	r3, #1
 800989c:	61bb      	str	r3, [r7, #24]
 800989e:	e002      	b.n	80098a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098a0:	f04f 33ff 	mov.w	r3, #4294967295
 80098a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098a6:	69bb      	ldr	r3, [r7, #24]
	}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3720      	adds	r7, #32
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b088      	sub	sp, #32
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	60f8      	str	r0, [r7, #12]
 80098b8:	60b9      	str	r1, [r7, #8]
 80098ba:	607a      	str	r2, [r7, #4]
 80098bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80098be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	009b      	lsls	r3, r3, #2
 80098c6:	461a      	mov	r2, r3
 80098c8:	21a5      	movs	r1, #165	; 0xa5
 80098ca:	f001 fe87 	bl	800b5dc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80098ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80098d8:	3b01      	subs	r3, #1
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	4413      	add	r3, r2
 80098de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	f023 0307 	bic.w	r3, r3, #7
 80098e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	f003 0307 	and.w	r3, r3, #7
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00a      	beq.n	8009908 <prvInitialiseNewTask+0x58>
	__asm volatile
 80098f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f6:	f383 8811 	msr	BASEPRI, r3
 80098fa:	f3bf 8f6f 	isb	sy
 80098fe:	f3bf 8f4f 	dsb	sy
 8009902:	617b      	str	r3, [r7, #20]
}
 8009904:	bf00      	nop
 8009906:	e7fe      	b.n	8009906 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d01f      	beq.n	800994e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800990e:	2300      	movs	r3, #0
 8009910:	61fb      	str	r3, [r7, #28]
 8009912:	e012      	b.n	800993a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009914:	68ba      	ldr	r2, [r7, #8]
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	4413      	add	r3, r2
 800991a:	7819      	ldrb	r1, [r3, #0]
 800991c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	4413      	add	r3, r2
 8009922:	3334      	adds	r3, #52	; 0x34
 8009924:	460a      	mov	r2, r1
 8009926:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009928:	68ba      	ldr	r2, [r7, #8]
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	4413      	add	r3, r2
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	2b00      	cmp	r3, #0
 8009932:	d006      	beq.n	8009942 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009934:	69fb      	ldr	r3, [r7, #28]
 8009936:	3301      	adds	r3, #1
 8009938:	61fb      	str	r3, [r7, #28]
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	2b0f      	cmp	r3, #15
 800993e:	d9e9      	bls.n	8009914 <prvInitialiseNewTask+0x64>
 8009940:	e000      	b.n	8009944 <prvInitialiseNewTask+0x94>
			{
				break;
 8009942:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009946:	2200      	movs	r2, #0
 8009948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800994c:	e003      	b.n	8009956 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800994e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009950:	2200      	movs	r2, #0
 8009952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009958:	2b37      	cmp	r3, #55	; 0x37
 800995a:	d901      	bls.n	8009960 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800995c:	2337      	movs	r3, #55	; 0x37
 800995e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009964:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800996a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800996c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996e:	2200      	movs	r2, #0
 8009970:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009974:	3304      	adds	r3, #4
 8009976:	4618      	mov	r0, r3
 8009978:	f7ff f978 	bl	8008c6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800997c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997e:	3318      	adds	r3, #24
 8009980:	4618      	mov	r0, r3
 8009982:	f7ff f973 	bl	8008c6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800998a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800998c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009994:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800999a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800999c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800999e:	2200      	movs	r2, #0
 80099a0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a4:	2200      	movs	r2, #0
 80099a6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80099aa:	683a      	ldr	r2, [r7, #0]
 80099ac:	68f9      	ldr	r1, [r7, #12]
 80099ae:	69b8      	ldr	r0, [r7, #24]
 80099b0:	f001 f9a6 	bl	800ad00 <pxPortInitialiseStack>
 80099b4:	4602      	mov	r2, r0
 80099b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80099ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d002      	beq.n	80099c6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80099c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099c6:	bf00      	nop
 80099c8:	3720      	adds	r7, #32
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
	...

080099d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80099d0:	b580      	push	{r7, lr}
 80099d2:	b082      	sub	sp, #8
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80099d8:	f001 fabc 	bl	800af54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80099dc:	4b2d      	ldr	r3, [pc, #180]	; (8009a94 <prvAddNewTaskToReadyList+0xc4>)
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	3301      	adds	r3, #1
 80099e2:	4a2c      	ldr	r2, [pc, #176]	; (8009a94 <prvAddNewTaskToReadyList+0xc4>)
 80099e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80099e6:	4b2c      	ldr	r3, [pc, #176]	; (8009a98 <prvAddNewTaskToReadyList+0xc8>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d109      	bne.n	8009a02 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80099ee:	4a2a      	ldr	r2, [pc, #168]	; (8009a98 <prvAddNewTaskToReadyList+0xc8>)
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80099f4:	4b27      	ldr	r3, [pc, #156]	; (8009a94 <prvAddNewTaskToReadyList+0xc4>)
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d110      	bne.n	8009a1e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80099fc:	f000 fc94 	bl	800a328 <prvInitialiseTaskLists>
 8009a00:	e00d      	b.n	8009a1e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a02:	4b26      	ldr	r3, [pc, #152]	; (8009a9c <prvAddNewTaskToReadyList+0xcc>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d109      	bne.n	8009a1e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a0a:	4b23      	ldr	r3, [pc, #140]	; (8009a98 <prvAddNewTaskToReadyList+0xc8>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d802      	bhi.n	8009a1e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a18:	4a1f      	ldr	r2, [pc, #124]	; (8009a98 <prvAddNewTaskToReadyList+0xc8>)
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a1e:	4b20      	ldr	r3, [pc, #128]	; (8009aa0 <prvAddNewTaskToReadyList+0xd0>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	3301      	adds	r3, #1
 8009a24:	4a1e      	ldr	r2, [pc, #120]	; (8009aa0 <prvAddNewTaskToReadyList+0xd0>)
 8009a26:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a28:	4b1d      	ldr	r3, [pc, #116]	; (8009aa0 <prvAddNewTaskToReadyList+0xd0>)
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a34:	4b1b      	ldr	r3, [pc, #108]	; (8009aa4 <prvAddNewTaskToReadyList+0xd4>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d903      	bls.n	8009a44 <prvAddNewTaskToReadyList+0x74>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a40:	4a18      	ldr	r2, [pc, #96]	; (8009aa4 <prvAddNewTaskToReadyList+0xd4>)
 8009a42:	6013      	str	r3, [r2, #0]
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a48:	4613      	mov	r3, r2
 8009a4a:	009b      	lsls	r3, r3, #2
 8009a4c:	4413      	add	r3, r2
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	4a15      	ldr	r2, [pc, #84]	; (8009aa8 <prvAddNewTaskToReadyList+0xd8>)
 8009a52:	441a      	add	r2, r3
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	3304      	adds	r3, #4
 8009a58:	4619      	mov	r1, r3
 8009a5a:	4610      	mov	r0, r2
 8009a5c:	f7ff f913 	bl	8008c86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a60:	f001 faa8 	bl	800afb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a64:	4b0d      	ldr	r3, [pc, #52]	; (8009a9c <prvAddNewTaskToReadyList+0xcc>)
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00e      	beq.n	8009a8a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a6c:	4b0a      	ldr	r3, [pc, #40]	; (8009a98 <prvAddNewTaskToReadyList+0xc8>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a76:	429a      	cmp	r2, r3
 8009a78:	d207      	bcs.n	8009a8a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a7a:	4b0c      	ldr	r3, [pc, #48]	; (8009aac <prvAddNewTaskToReadyList+0xdc>)
 8009a7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a80:	601a      	str	r2, [r3, #0]
 8009a82:	f3bf 8f4f 	dsb	sy
 8009a86:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a8a:	bf00      	nop
 8009a8c:	3708      	adds	r7, #8
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	bd80      	pop	{r7, pc}
 8009a92:	bf00      	nop
 8009a94:	20000c38 	.word	0x20000c38
 8009a98:	20000764 	.word	0x20000764
 8009a9c:	20000c44 	.word	0x20000c44
 8009aa0:	20000c54 	.word	0x20000c54
 8009aa4:	20000c40 	.word	0x20000c40
 8009aa8:	20000768 	.word	0x20000768
 8009aac:	e000ed04 	.word	0xe000ed04

08009ab0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b08a      	sub	sp, #40	; 0x28
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009aba:	2300      	movs	r3, #0
 8009abc:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10a      	bne.n	8009ada <vTaskDelayUntil+0x2a>
	__asm volatile
 8009ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ac8:	f383 8811 	msr	BASEPRI, r3
 8009acc:	f3bf 8f6f 	isb	sy
 8009ad0:	f3bf 8f4f 	dsb	sy
 8009ad4:	617b      	str	r3, [r7, #20]
}
 8009ad6:	bf00      	nop
 8009ad8:	e7fe      	b.n	8009ad8 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009ada:	683b      	ldr	r3, [r7, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d10a      	bne.n	8009af6 <vTaskDelayUntil+0x46>
	__asm volatile
 8009ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ae4:	f383 8811 	msr	BASEPRI, r3
 8009ae8:	f3bf 8f6f 	isb	sy
 8009aec:	f3bf 8f4f 	dsb	sy
 8009af0:	613b      	str	r3, [r7, #16]
}
 8009af2:	bf00      	nop
 8009af4:	e7fe      	b.n	8009af4 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8009af6:	4b2a      	ldr	r3, [pc, #168]	; (8009ba0 <vTaskDelayUntil+0xf0>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00a      	beq.n	8009b14 <vTaskDelayUntil+0x64>
	__asm volatile
 8009afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b02:	f383 8811 	msr	BASEPRI, r3
 8009b06:	f3bf 8f6f 	isb	sy
 8009b0a:	f3bf 8f4f 	dsb	sy
 8009b0e:	60fb      	str	r3, [r7, #12]
}
 8009b10:	bf00      	nop
 8009b12:	e7fe      	b.n	8009b12 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009b14:	f000 f8e4 	bl	8009ce0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009b18:	4b22      	ldr	r3, [pc, #136]	; (8009ba4 <vTaskDelayUntil+0xf4>)
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	683a      	ldr	r2, [r7, #0]
 8009b24:	4413      	add	r3, r2
 8009b26:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	6a3a      	ldr	r2, [r7, #32]
 8009b2e:	429a      	cmp	r2, r3
 8009b30:	d20b      	bcs.n	8009b4a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	69fa      	ldr	r2, [r7, #28]
 8009b38:	429a      	cmp	r2, r3
 8009b3a:	d211      	bcs.n	8009b60 <vTaskDelayUntil+0xb0>
 8009b3c:	69fa      	ldr	r2, [r7, #28]
 8009b3e:	6a3b      	ldr	r3, [r7, #32]
 8009b40:	429a      	cmp	r2, r3
 8009b42:	d90d      	bls.n	8009b60 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009b44:	2301      	movs	r3, #1
 8009b46:	627b      	str	r3, [r7, #36]	; 0x24
 8009b48:	e00a      	b.n	8009b60 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	69fa      	ldr	r2, [r7, #28]
 8009b50:	429a      	cmp	r2, r3
 8009b52:	d303      	bcc.n	8009b5c <vTaskDelayUntil+0xac>
 8009b54:	69fa      	ldr	r2, [r7, #28]
 8009b56:	6a3b      	ldr	r3, [r7, #32]
 8009b58:	429a      	cmp	r2, r3
 8009b5a:	d901      	bls.n	8009b60 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	69fa      	ldr	r2, [r7, #28]
 8009b64:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d006      	beq.n	8009b7a <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009b6c:	69fa      	ldr	r2, [r7, #28]
 8009b6e:	6a3b      	ldr	r3, [r7, #32]
 8009b70:	1ad3      	subs	r3, r2, r3
 8009b72:	2100      	movs	r1, #0
 8009b74:	4618      	mov	r0, r3
 8009b76:	f000 fd21 	bl	800a5bc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009b7a:	f000 f8bf 	bl	8009cfc <xTaskResumeAll>
 8009b7e:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d107      	bne.n	8009b96 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8009b86:	4b08      	ldr	r3, [pc, #32]	; (8009ba8 <vTaskDelayUntil+0xf8>)
 8009b88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b8c:	601a      	str	r2, [r3, #0]
 8009b8e:	f3bf 8f4f 	dsb	sy
 8009b92:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b96:	bf00      	nop
 8009b98:	3728      	adds	r7, #40	; 0x28
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	bd80      	pop	{r7, pc}
 8009b9e:	bf00      	nop
 8009ba0:	20000c60 	.word	0x20000c60
 8009ba4:	20000c3c 	.word	0x20000c3c
 8009ba8:	e000ed04 	.word	0xe000ed04

08009bac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009bac:	b580      	push	{r7, lr}
 8009bae:	b084      	sub	sp, #16
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d017      	beq.n	8009bee <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009bbe:	4b13      	ldr	r3, [pc, #76]	; (8009c0c <vTaskDelay+0x60>)
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d00a      	beq.n	8009bdc <vTaskDelay+0x30>
	__asm volatile
 8009bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bca:	f383 8811 	msr	BASEPRI, r3
 8009bce:	f3bf 8f6f 	isb	sy
 8009bd2:	f3bf 8f4f 	dsb	sy
 8009bd6:	60bb      	str	r3, [r7, #8]
}
 8009bd8:	bf00      	nop
 8009bda:	e7fe      	b.n	8009bda <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009bdc:	f000 f880 	bl	8009ce0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009be0:	2100      	movs	r1, #0
 8009be2:	6878      	ldr	r0, [r7, #4]
 8009be4:	f000 fcea 	bl	800a5bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009be8:	f000 f888 	bl	8009cfc <xTaskResumeAll>
 8009bec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d107      	bne.n	8009c04 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009bf4:	4b06      	ldr	r3, [pc, #24]	; (8009c10 <vTaskDelay+0x64>)
 8009bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009bfa:	601a      	str	r2, [r3, #0]
 8009bfc:	f3bf 8f4f 	dsb	sy
 8009c00:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c04:	bf00      	nop
 8009c06:	3710      	adds	r7, #16
 8009c08:	46bd      	mov	sp, r7
 8009c0a:	bd80      	pop	{r7, pc}
 8009c0c:	20000c60 	.word	0x20000c60
 8009c10:	e000ed04 	.word	0xe000ed04

08009c14 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b08a      	sub	sp, #40	; 0x28
 8009c18:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009c22:	463a      	mov	r2, r7
 8009c24:	1d39      	adds	r1, r7, #4
 8009c26:	f107 0308 	add.w	r3, r7, #8
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	f7fe ffca 	bl	8008bc4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009c30:	6839      	ldr	r1, [r7, #0]
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	68ba      	ldr	r2, [r7, #8]
 8009c36:	9202      	str	r2, [sp, #8]
 8009c38:	9301      	str	r3, [sp, #4]
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	9300      	str	r3, [sp, #0]
 8009c3e:	2300      	movs	r3, #0
 8009c40:	460a      	mov	r2, r1
 8009c42:	4921      	ldr	r1, [pc, #132]	; (8009cc8 <vTaskStartScheduler+0xb4>)
 8009c44:	4821      	ldr	r0, [pc, #132]	; (8009ccc <vTaskStartScheduler+0xb8>)
 8009c46:	f7ff fd91 	bl	800976c <xTaskCreateStatic>
 8009c4a:	4603      	mov	r3, r0
 8009c4c:	4a20      	ldr	r2, [pc, #128]	; (8009cd0 <vTaskStartScheduler+0xbc>)
 8009c4e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009c50:	4b1f      	ldr	r3, [pc, #124]	; (8009cd0 <vTaskStartScheduler+0xbc>)
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d002      	beq.n	8009c5e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009c58:	2301      	movs	r3, #1
 8009c5a:	617b      	str	r3, [r7, #20]
 8009c5c:	e001      	b.n	8009c62 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d102      	bne.n	8009c6e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009c68:	f000 fcfc 	bl	800a664 <xTimerCreateTimerTask>
 8009c6c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009c6e:	697b      	ldr	r3, [r7, #20]
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d116      	bne.n	8009ca2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c78:	f383 8811 	msr	BASEPRI, r3
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	f3bf 8f4f 	dsb	sy
 8009c84:	613b      	str	r3, [r7, #16]
}
 8009c86:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c88:	4b12      	ldr	r3, [pc, #72]	; (8009cd4 <vTaskStartScheduler+0xc0>)
 8009c8a:	f04f 32ff 	mov.w	r2, #4294967295
 8009c8e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c90:	4b11      	ldr	r3, [pc, #68]	; (8009cd8 <vTaskStartScheduler+0xc4>)
 8009c92:	2201      	movs	r2, #1
 8009c94:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c96:	4b11      	ldr	r3, [pc, #68]	; (8009cdc <vTaskStartScheduler+0xc8>)
 8009c98:	2200      	movs	r2, #0
 8009c9a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c9c:	f001 f8b8 	bl	800ae10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009ca0:	e00e      	b.n	8009cc0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ca8:	d10a      	bne.n	8009cc0 <vTaskStartScheduler+0xac>
	__asm volatile
 8009caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cae:	f383 8811 	msr	BASEPRI, r3
 8009cb2:	f3bf 8f6f 	isb	sy
 8009cb6:	f3bf 8f4f 	dsb	sy
 8009cba:	60fb      	str	r3, [r7, #12]
}
 8009cbc:	bf00      	nop
 8009cbe:	e7fe      	b.n	8009cbe <vTaskStartScheduler+0xaa>
}
 8009cc0:	bf00      	nop
 8009cc2:	3718      	adds	r7, #24
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	0800c870 	.word	0x0800c870
 8009ccc:	0800a2f9 	.word	0x0800a2f9
 8009cd0:	20000c5c 	.word	0x20000c5c
 8009cd4:	20000c58 	.word	0x20000c58
 8009cd8:	20000c44 	.word	0x20000c44
 8009cdc:	20000c3c 	.word	0x20000c3c

08009ce0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009ce4:	4b04      	ldr	r3, [pc, #16]	; (8009cf8 <vTaskSuspendAll+0x18>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3301      	adds	r3, #1
 8009cea:	4a03      	ldr	r2, [pc, #12]	; (8009cf8 <vTaskSuspendAll+0x18>)
 8009cec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009cee:	bf00      	nop
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf6:	4770      	bx	lr
 8009cf8:	20000c60 	.word	0x20000c60

08009cfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009d02:	2300      	movs	r3, #0
 8009d04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009d06:	2300      	movs	r3, #0
 8009d08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009d0a:	4b42      	ldr	r3, [pc, #264]	; (8009e14 <xTaskResumeAll+0x118>)
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10a      	bne.n	8009d28 <xTaskResumeAll+0x2c>
	__asm volatile
 8009d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d16:	f383 8811 	msr	BASEPRI, r3
 8009d1a:	f3bf 8f6f 	isb	sy
 8009d1e:	f3bf 8f4f 	dsb	sy
 8009d22:	603b      	str	r3, [r7, #0]
}
 8009d24:	bf00      	nop
 8009d26:	e7fe      	b.n	8009d26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009d28:	f001 f914 	bl	800af54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009d2c:	4b39      	ldr	r3, [pc, #228]	; (8009e14 <xTaskResumeAll+0x118>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	3b01      	subs	r3, #1
 8009d32:	4a38      	ldr	r2, [pc, #224]	; (8009e14 <xTaskResumeAll+0x118>)
 8009d34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d36:	4b37      	ldr	r3, [pc, #220]	; (8009e14 <xTaskResumeAll+0x118>)
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d162      	bne.n	8009e04 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009d3e:	4b36      	ldr	r3, [pc, #216]	; (8009e18 <xTaskResumeAll+0x11c>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d05e      	beq.n	8009e04 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d46:	e02f      	b.n	8009da8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d48:	4b34      	ldr	r3, [pc, #208]	; (8009e1c <xTaskResumeAll+0x120>)
 8009d4a:	68db      	ldr	r3, [r3, #12]
 8009d4c:	68db      	ldr	r3, [r3, #12]
 8009d4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	3318      	adds	r3, #24
 8009d54:	4618      	mov	r0, r3
 8009d56:	f7fe fff3 	bl	8008d40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	3304      	adds	r3, #4
 8009d5e:	4618      	mov	r0, r3
 8009d60:	f7fe ffee 	bl	8008d40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d68:	4b2d      	ldr	r3, [pc, #180]	; (8009e20 <xTaskResumeAll+0x124>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d903      	bls.n	8009d78 <xTaskResumeAll+0x7c>
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d74:	4a2a      	ldr	r2, [pc, #168]	; (8009e20 <xTaskResumeAll+0x124>)
 8009d76:	6013      	str	r3, [r2, #0]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d7c:	4613      	mov	r3, r2
 8009d7e:	009b      	lsls	r3, r3, #2
 8009d80:	4413      	add	r3, r2
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	4a27      	ldr	r2, [pc, #156]	; (8009e24 <xTaskResumeAll+0x128>)
 8009d86:	441a      	add	r2, r3
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	3304      	adds	r3, #4
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	4610      	mov	r0, r2
 8009d90:	f7fe ff79 	bl	8008c86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d98:	4b23      	ldr	r3, [pc, #140]	; (8009e28 <xTaskResumeAll+0x12c>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9e:	429a      	cmp	r2, r3
 8009da0:	d302      	bcc.n	8009da8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009da2:	4b22      	ldr	r3, [pc, #136]	; (8009e2c <xTaskResumeAll+0x130>)
 8009da4:	2201      	movs	r2, #1
 8009da6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009da8:	4b1c      	ldr	r3, [pc, #112]	; (8009e1c <xTaskResumeAll+0x120>)
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1cb      	bne.n	8009d48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d001      	beq.n	8009dba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009db6:	f000 fb55 	bl	800a464 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009dba:	4b1d      	ldr	r3, [pc, #116]	; (8009e30 <xTaskResumeAll+0x134>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d010      	beq.n	8009de8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009dc6:	f000 f847 	bl	8009e58 <xTaskIncrementTick>
 8009dca:	4603      	mov	r3, r0
 8009dcc:	2b00      	cmp	r3, #0
 8009dce:	d002      	beq.n	8009dd6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009dd0:	4b16      	ldr	r3, [pc, #88]	; (8009e2c <xTaskResumeAll+0x130>)
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	3b01      	subs	r3, #1
 8009dda:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d1f1      	bne.n	8009dc6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009de2:	4b13      	ldr	r3, [pc, #76]	; (8009e30 <xTaskResumeAll+0x134>)
 8009de4:	2200      	movs	r2, #0
 8009de6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009de8:	4b10      	ldr	r3, [pc, #64]	; (8009e2c <xTaskResumeAll+0x130>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d009      	beq.n	8009e04 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009df0:	2301      	movs	r3, #1
 8009df2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009df4:	4b0f      	ldr	r3, [pc, #60]	; (8009e34 <xTaskResumeAll+0x138>)
 8009df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dfa:	601a      	str	r2, [r3, #0]
 8009dfc:	f3bf 8f4f 	dsb	sy
 8009e00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e04:	f001 f8d6 	bl	800afb4 <vPortExitCritical>

	return xAlreadyYielded;
 8009e08:	68bb      	ldr	r3, [r7, #8]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	20000c60 	.word	0x20000c60
 8009e18:	20000c38 	.word	0x20000c38
 8009e1c:	20000bf8 	.word	0x20000bf8
 8009e20:	20000c40 	.word	0x20000c40
 8009e24:	20000768 	.word	0x20000768
 8009e28:	20000764 	.word	0x20000764
 8009e2c:	20000c4c 	.word	0x20000c4c
 8009e30:	20000c48 	.word	0x20000c48
 8009e34:	e000ed04 	.word	0xe000ed04

08009e38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b083      	sub	sp, #12
 8009e3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009e3e:	4b05      	ldr	r3, [pc, #20]	; (8009e54 <xTaskGetTickCount+0x1c>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009e44:	687b      	ldr	r3, [r7, #4]
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	370c      	adds	r7, #12
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr
 8009e52:	bf00      	nop
 8009e54:	20000c3c 	.word	0x20000c3c

08009e58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b086      	sub	sp, #24
 8009e5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009e5e:	2300      	movs	r3, #0
 8009e60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e62:	4b4f      	ldr	r3, [pc, #316]	; (8009fa0 <xTaskIncrementTick+0x148>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	f040 808f 	bne.w	8009f8a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e6c:	4b4d      	ldr	r3, [pc, #308]	; (8009fa4 <xTaskIncrementTick+0x14c>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3301      	adds	r3, #1
 8009e72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e74:	4a4b      	ldr	r2, [pc, #300]	; (8009fa4 <xTaskIncrementTick+0x14c>)
 8009e76:	693b      	ldr	r3, [r7, #16]
 8009e78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d120      	bne.n	8009ec2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e80:	4b49      	ldr	r3, [pc, #292]	; (8009fa8 <xTaskIncrementTick+0x150>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d00a      	beq.n	8009ea0 <xTaskIncrementTick+0x48>
	__asm volatile
 8009e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	603b      	str	r3, [r7, #0]
}
 8009e9c:	bf00      	nop
 8009e9e:	e7fe      	b.n	8009e9e <xTaskIncrementTick+0x46>
 8009ea0:	4b41      	ldr	r3, [pc, #260]	; (8009fa8 <xTaskIncrementTick+0x150>)
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	60fb      	str	r3, [r7, #12]
 8009ea6:	4b41      	ldr	r3, [pc, #260]	; (8009fac <xTaskIncrementTick+0x154>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a3f      	ldr	r2, [pc, #252]	; (8009fa8 <xTaskIncrementTick+0x150>)
 8009eac:	6013      	str	r3, [r2, #0]
 8009eae:	4a3f      	ldr	r2, [pc, #252]	; (8009fac <xTaskIncrementTick+0x154>)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6013      	str	r3, [r2, #0]
 8009eb4:	4b3e      	ldr	r3, [pc, #248]	; (8009fb0 <xTaskIncrementTick+0x158>)
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	4a3d      	ldr	r2, [pc, #244]	; (8009fb0 <xTaskIncrementTick+0x158>)
 8009ebc:	6013      	str	r3, [r2, #0]
 8009ebe:	f000 fad1 	bl	800a464 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009ec2:	4b3c      	ldr	r3, [pc, #240]	; (8009fb4 <xTaskIncrementTick+0x15c>)
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	693a      	ldr	r2, [r7, #16]
 8009ec8:	429a      	cmp	r2, r3
 8009eca:	d349      	bcc.n	8009f60 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ecc:	4b36      	ldr	r3, [pc, #216]	; (8009fa8 <xTaskIncrementTick+0x150>)
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d104      	bne.n	8009ee0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ed6:	4b37      	ldr	r3, [pc, #220]	; (8009fb4 <xTaskIncrementTick+0x15c>)
 8009ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8009edc:	601a      	str	r2, [r3, #0]
					break;
 8009ede:	e03f      	b.n	8009f60 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ee0:	4b31      	ldr	r3, [pc, #196]	; (8009fa8 <xTaskIncrementTick+0x150>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	68db      	ldr	r3, [r3, #12]
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	685b      	ldr	r3, [r3, #4]
 8009eee:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ef0:	693a      	ldr	r2, [r7, #16]
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d203      	bcs.n	8009f00 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009ef8:	4a2e      	ldr	r2, [pc, #184]	; (8009fb4 <xTaskIncrementTick+0x15c>)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009efe:	e02f      	b.n	8009f60 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f00:	68bb      	ldr	r3, [r7, #8]
 8009f02:	3304      	adds	r3, #4
 8009f04:	4618      	mov	r0, r3
 8009f06:	f7fe ff1b 	bl	8008d40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d004      	beq.n	8009f1c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	3318      	adds	r3, #24
 8009f16:	4618      	mov	r0, r3
 8009f18:	f7fe ff12 	bl	8008d40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009f1c:	68bb      	ldr	r3, [r7, #8]
 8009f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f20:	4b25      	ldr	r3, [pc, #148]	; (8009fb8 <xTaskIncrementTick+0x160>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	d903      	bls.n	8009f30 <xTaskIncrementTick+0xd8>
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f2c:	4a22      	ldr	r2, [pc, #136]	; (8009fb8 <xTaskIncrementTick+0x160>)
 8009f2e:	6013      	str	r3, [r2, #0]
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f34:	4613      	mov	r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	4413      	add	r3, r2
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	4a1f      	ldr	r2, [pc, #124]	; (8009fbc <xTaskIncrementTick+0x164>)
 8009f3e:	441a      	add	r2, r3
 8009f40:	68bb      	ldr	r3, [r7, #8]
 8009f42:	3304      	adds	r3, #4
 8009f44:	4619      	mov	r1, r3
 8009f46:	4610      	mov	r0, r2
 8009f48:	f7fe fe9d 	bl	8008c86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f50:	4b1b      	ldr	r3, [pc, #108]	; (8009fc0 <xTaskIncrementTick+0x168>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d3b8      	bcc.n	8009ecc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009f5a:	2301      	movs	r3, #1
 8009f5c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f5e:	e7b5      	b.n	8009ecc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f60:	4b17      	ldr	r3, [pc, #92]	; (8009fc0 <xTaskIncrementTick+0x168>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f66:	4915      	ldr	r1, [pc, #84]	; (8009fbc <xTaskIncrementTick+0x164>)
 8009f68:	4613      	mov	r3, r2
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	4413      	add	r3, r2
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	440b      	add	r3, r1
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d901      	bls.n	8009f7c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009f78:	2301      	movs	r3, #1
 8009f7a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009f7c:	4b11      	ldr	r3, [pc, #68]	; (8009fc4 <xTaskIncrementTick+0x16c>)
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d007      	beq.n	8009f94 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009f84:	2301      	movs	r3, #1
 8009f86:	617b      	str	r3, [r7, #20]
 8009f88:	e004      	b.n	8009f94 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009f8a:	4b0f      	ldr	r3, [pc, #60]	; (8009fc8 <xTaskIncrementTick+0x170>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	4a0d      	ldr	r2, [pc, #52]	; (8009fc8 <xTaskIncrementTick+0x170>)
 8009f92:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009f94:	697b      	ldr	r3, [r7, #20]
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3718      	adds	r7, #24
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
 8009f9e:	bf00      	nop
 8009fa0:	20000c60 	.word	0x20000c60
 8009fa4:	20000c3c 	.word	0x20000c3c
 8009fa8:	20000bf0 	.word	0x20000bf0
 8009fac:	20000bf4 	.word	0x20000bf4
 8009fb0:	20000c50 	.word	0x20000c50
 8009fb4:	20000c58 	.word	0x20000c58
 8009fb8:	20000c40 	.word	0x20000c40
 8009fbc:	20000768 	.word	0x20000768
 8009fc0:	20000764 	.word	0x20000764
 8009fc4:	20000c4c 	.word	0x20000c4c
 8009fc8:	20000c48 	.word	0x20000c48

08009fcc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009fcc:	b480      	push	{r7}
 8009fce:	b085      	sub	sp, #20
 8009fd0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009fd2:	4b28      	ldr	r3, [pc, #160]	; (800a074 <vTaskSwitchContext+0xa8>)
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d003      	beq.n	8009fe2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009fda:	4b27      	ldr	r3, [pc, #156]	; (800a078 <vTaskSwitchContext+0xac>)
 8009fdc:	2201      	movs	r2, #1
 8009fde:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009fe0:	e041      	b.n	800a066 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8009fe2:	4b25      	ldr	r3, [pc, #148]	; (800a078 <vTaskSwitchContext+0xac>)
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fe8:	4b24      	ldr	r3, [pc, #144]	; (800a07c <vTaskSwitchContext+0xb0>)
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	60fb      	str	r3, [r7, #12]
 8009fee:	e010      	b.n	800a012 <vTaskSwitchContext+0x46>
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d10a      	bne.n	800a00c <vTaskSwitchContext+0x40>
	__asm volatile
 8009ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffa:	f383 8811 	msr	BASEPRI, r3
 8009ffe:	f3bf 8f6f 	isb	sy
 800a002:	f3bf 8f4f 	dsb	sy
 800a006:	607b      	str	r3, [r7, #4]
}
 800a008:	bf00      	nop
 800a00a:	e7fe      	b.n	800a00a <vTaskSwitchContext+0x3e>
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	3b01      	subs	r3, #1
 800a010:	60fb      	str	r3, [r7, #12]
 800a012:	491b      	ldr	r1, [pc, #108]	; (800a080 <vTaskSwitchContext+0xb4>)
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	4613      	mov	r3, r2
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	4413      	add	r3, r2
 800a01c:	009b      	lsls	r3, r3, #2
 800a01e:	440b      	add	r3, r1
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d0e4      	beq.n	8009ff0 <vTaskSwitchContext+0x24>
 800a026:	68fa      	ldr	r2, [r7, #12]
 800a028:	4613      	mov	r3, r2
 800a02a:	009b      	lsls	r3, r3, #2
 800a02c:	4413      	add	r3, r2
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	4a13      	ldr	r2, [pc, #76]	; (800a080 <vTaskSwitchContext+0xb4>)
 800a032:	4413      	add	r3, r2
 800a034:	60bb      	str	r3, [r7, #8]
 800a036:	68bb      	ldr	r3, [r7, #8]
 800a038:	685b      	ldr	r3, [r3, #4]
 800a03a:	685a      	ldr	r2, [r3, #4]
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	605a      	str	r2, [r3, #4]
 800a040:	68bb      	ldr	r3, [r7, #8]
 800a042:	685a      	ldr	r2, [r3, #4]
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	3308      	adds	r3, #8
 800a048:	429a      	cmp	r2, r3
 800a04a:	d104      	bne.n	800a056 <vTaskSwitchContext+0x8a>
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	685b      	ldr	r3, [r3, #4]
 800a050:	685a      	ldr	r2, [r3, #4]
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	605a      	str	r2, [r3, #4]
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	685b      	ldr	r3, [r3, #4]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	4a09      	ldr	r2, [pc, #36]	; (800a084 <vTaskSwitchContext+0xb8>)
 800a05e:	6013      	str	r3, [r2, #0]
 800a060:	4a06      	ldr	r2, [pc, #24]	; (800a07c <vTaskSwitchContext+0xb0>)
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	6013      	str	r3, [r2, #0]
}
 800a066:	bf00      	nop
 800a068:	3714      	adds	r7, #20
 800a06a:	46bd      	mov	sp, r7
 800a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	20000c60 	.word	0x20000c60
 800a078:	20000c4c 	.word	0x20000c4c
 800a07c:	20000c40 	.word	0x20000c40
 800a080:	20000768 	.word	0x20000768
 800a084:	20000764 	.word	0x20000764

0800a088 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a088:	b580      	push	{r7, lr}
 800a08a:	b084      	sub	sp, #16
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d10a      	bne.n	800a0ae <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a09c:	f383 8811 	msr	BASEPRI, r3
 800a0a0:	f3bf 8f6f 	isb	sy
 800a0a4:	f3bf 8f4f 	dsb	sy
 800a0a8:	60fb      	str	r3, [r7, #12]
}
 800a0aa:	bf00      	nop
 800a0ac:	e7fe      	b.n	800a0ac <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a0ae:	4b07      	ldr	r3, [pc, #28]	; (800a0cc <vTaskPlaceOnEventList+0x44>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	3318      	adds	r3, #24
 800a0b4:	4619      	mov	r1, r3
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f7fe fe09 	bl	8008cce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a0bc:	2101      	movs	r1, #1
 800a0be:	6838      	ldr	r0, [r7, #0]
 800a0c0:	f000 fa7c 	bl	800a5bc <prvAddCurrentTaskToDelayedList>
}
 800a0c4:	bf00      	nop
 800a0c6:	3710      	adds	r7, #16
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	20000764 	.word	0x20000764

0800a0d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	60f8      	str	r0, [r7, #12]
 800a0d8:	60b9      	str	r1, [r7, #8]
 800a0da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d10a      	bne.n	800a0f8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a0e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0e6:	f383 8811 	msr	BASEPRI, r3
 800a0ea:	f3bf 8f6f 	isb	sy
 800a0ee:	f3bf 8f4f 	dsb	sy
 800a0f2:	617b      	str	r3, [r7, #20]
}
 800a0f4:	bf00      	nop
 800a0f6:	e7fe      	b.n	800a0f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a0f8:	4b0a      	ldr	r3, [pc, #40]	; (800a124 <vTaskPlaceOnEventListRestricted+0x54>)
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	3318      	adds	r3, #24
 800a0fe:	4619      	mov	r1, r3
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f7fe fdc0 	bl	8008c86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d002      	beq.n	800a112 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a10c:	f04f 33ff 	mov.w	r3, #4294967295
 800a110:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a112:	6879      	ldr	r1, [r7, #4]
 800a114:	68b8      	ldr	r0, [r7, #8]
 800a116:	f000 fa51 	bl	800a5bc <prvAddCurrentTaskToDelayedList>
	}
 800a11a:	bf00      	nop
 800a11c:	3718      	adds	r7, #24
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	20000764 	.word	0x20000764

0800a128 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b086      	sub	sp, #24
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a138:	693b      	ldr	r3, [r7, #16]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d10a      	bne.n	800a154 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a142:	f383 8811 	msr	BASEPRI, r3
 800a146:	f3bf 8f6f 	isb	sy
 800a14a:	f3bf 8f4f 	dsb	sy
 800a14e:	60fb      	str	r3, [r7, #12]
}
 800a150:	bf00      	nop
 800a152:	e7fe      	b.n	800a152 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a154:	693b      	ldr	r3, [r7, #16]
 800a156:	3318      	adds	r3, #24
 800a158:	4618      	mov	r0, r3
 800a15a:	f7fe fdf1 	bl	8008d40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a15e:	4b1e      	ldr	r3, [pc, #120]	; (800a1d8 <xTaskRemoveFromEventList+0xb0>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	d11d      	bne.n	800a1a2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	3304      	adds	r3, #4
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7fe fde8 	bl	8008d40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a174:	4b19      	ldr	r3, [pc, #100]	; (800a1dc <xTaskRemoveFromEventList+0xb4>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	429a      	cmp	r2, r3
 800a17a:	d903      	bls.n	800a184 <xTaskRemoveFromEventList+0x5c>
 800a17c:	693b      	ldr	r3, [r7, #16]
 800a17e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a180:	4a16      	ldr	r2, [pc, #88]	; (800a1dc <xTaskRemoveFromEventList+0xb4>)
 800a182:	6013      	str	r3, [r2, #0]
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a188:	4613      	mov	r3, r2
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	4413      	add	r3, r2
 800a18e:	009b      	lsls	r3, r3, #2
 800a190:	4a13      	ldr	r2, [pc, #76]	; (800a1e0 <xTaskRemoveFromEventList+0xb8>)
 800a192:	441a      	add	r2, r3
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	3304      	adds	r3, #4
 800a198:	4619      	mov	r1, r3
 800a19a:	4610      	mov	r0, r2
 800a19c:	f7fe fd73 	bl	8008c86 <vListInsertEnd>
 800a1a0:	e005      	b.n	800a1ae <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a1a2:	693b      	ldr	r3, [r7, #16]
 800a1a4:	3318      	adds	r3, #24
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	480e      	ldr	r0, [pc, #56]	; (800a1e4 <xTaskRemoveFromEventList+0xbc>)
 800a1aa:	f7fe fd6c 	bl	8008c86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1b2:	4b0d      	ldr	r3, [pc, #52]	; (800a1e8 <xTaskRemoveFromEventList+0xc0>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b8:	429a      	cmp	r2, r3
 800a1ba:	d905      	bls.n	800a1c8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a1c0:	4b0a      	ldr	r3, [pc, #40]	; (800a1ec <xTaskRemoveFromEventList+0xc4>)
 800a1c2:	2201      	movs	r2, #1
 800a1c4:	601a      	str	r2, [r3, #0]
 800a1c6:	e001      	b.n	800a1cc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a1cc:	697b      	ldr	r3, [r7, #20]
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3718      	adds	r7, #24
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	20000c60 	.word	0x20000c60
 800a1dc:	20000c40 	.word	0x20000c40
 800a1e0:	20000768 	.word	0x20000768
 800a1e4:	20000bf8 	.word	0x20000bf8
 800a1e8:	20000764 	.word	0x20000764
 800a1ec:	20000c4c 	.word	0x20000c4c

0800a1f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a1f0:	b480      	push	{r7}
 800a1f2:	b083      	sub	sp, #12
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a1f8:	4b06      	ldr	r3, [pc, #24]	; (800a214 <vTaskInternalSetTimeOutState+0x24>)
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a200:	4b05      	ldr	r3, [pc, #20]	; (800a218 <vTaskInternalSetTimeOutState+0x28>)
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	605a      	str	r2, [r3, #4]
}
 800a208:	bf00      	nop
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a212:	4770      	bx	lr
 800a214:	20000c50 	.word	0x20000c50
 800a218:	20000c3c 	.word	0x20000c3c

0800a21c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b088      	sub	sp, #32
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
 800a224:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d10a      	bne.n	800a242 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a230:	f383 8811 	msr	BASEPRI, r3
 800a234:	f3bf 8f6f 	isb	sy
 800a238:	f3bf 8f4f 	dsb	sy
 800a23c:	613b      	str	r3, [r7, #16]
}
 800a23e:	bf00      	nop
 800a240:	e7fe      	b.n	800a240 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d10a      	bne.n	800a25e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24c:	f383 8811 	msr	BASEPRI, r3
 800a250:	f3bf 8f6f 	isb	sy
 800a254:	f3bf 8f4f 	dsb	sy
 800a258:	60fb      	str	r3, [r7, #12]
}
 800a25a:	bf00      	nop
 800a25c:	e7fe      	b.n	800a25c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a25e:	f000 fe79 	bl	800af54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a262:	4b1d      	ldr	r3, [pc, #116]	; (800a2d8 <xTaskCheckForTimeOut+0xbc>)
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	69ba      	ldr	r2, [r7, #24]
 800a26e:	1ad3      	subs	r3, r2, r3
 800a270:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a27a:	d102      	bne.n	800a282 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a27c:	2300      	movs	r3, #0
 800a27e:	61fb      	str	r3, [r7, #28]
 800a280:	e023      	b.n	800a2ca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	4b15      	ldr	r3, [pc, #84]	; (800a2dc <xTaskCheckForTimeOut+0xc0>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	429a      	cmp	r2, r3
 800a28c:	d007      	beq.n	800a29e <xTaskCheckForTimeOut+0x82>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	685b      	ldr	r3, [r3, #4]
 800a292:	69ba      	ldr	r2, [r7, #24]
 800a294:	429a      	cmp	r2, r3
 800a296:	d302      	bcc.n	800a29e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a298:	2301      	movs	r3, #1
 800a29a:	61fb      	str	r3, [r7, #28]
 800a29c:	e015      	b.n	800a2ca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	697a      	ldr	r2, [r7, #20]
 800a2a4:	429a      	cmp	r2, r3
 800a2a6:	d20b      	bcs.n	800a2c0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a2a8:	683b      	ldr	r3, [r7, #0]
 800a2aa:	681a      	ldr	r2, [r3, #0]
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	1ad2      	subs	r2, r2, r3
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f7ff ff9b 	bl	800a1f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	61fb      	str	r3, [r7, #28]
 800a2be:	e004      	b.n	800a2ca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a2ca:	f000 fe73 	bl	800afb4 <vPortExitCritical>

	return xReturn;
 800a2ce:	69fb      	ldr	r3, [r7, #28]
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3720      	adds	r7, #32
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}
 800a2d8:	20000c3c 	.word	0x20000c3c
 800a2dc:	20000c50 	.word	0x20000c50

0800a2e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a2e4:	4b03      	ldr	r3, [pc, #12]	; (800a2f4 <vTaskMissedYield+0x14>)
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	601a      	str	r2, [r3, #0]
}
 800a2ea:	bf00      	nop
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr
 800a2f4:	20000c4c 	.word	0x20000c4c

0800a2f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a300:	f000 f852 	bl	800a3a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a304:	4b06      	ldr	r3, [pc, #24]	; (800a320 <prvIdleTask+0x28>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d9f9      	bls.n	800a300 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a30c:	4b05      	ldr	r3, [pc, #20]	; (800a324 <prvIdleTask+0x2c>)
 800a30e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a312:	601a      	str	r2, [r3, #0]
 800a314:	f3bf 8f4f 	dsb	sy
 800a318:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a31c:	e7f0      	b.n	800a300 <prvIdleTask+0x8>
 800a31e:	bf00      	nop
 800a320:	20000768 	.word	0x20000768
 800a324:	e000ed04 	.word	0xe000ed04

0800a328 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b082      	sub	sp, #8
 800a32c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a32e:	2300      	movs	r3, #0
 800a330:	607b      	str	r3, [r7, #4]
 800a332:	e00c      	b.n	800a34e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a334:	687a      	ldr	r2, [r7, #4]
 800a336:	4613      	mov	r3, r2
 800a338:	009b      	lsls	r3, r3, #2
 800a33a:	4413      	add	r3, r2
 800a33c:	009b      	lsls	r3, r3, #2
 800a33e:	4a12      	ldr	r2, [pc, #72]	; (800a388 <prvInitialiseTaskLists+0x60>)
 800a340:	4413      	add	r3, r2
 800a342:	4618      	mov	r0, r3
 800a344:	f7fe fc72 	bl	8008c2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	3301      	adds	r3, #1
 800a34c:	607b      	str	r3, [r7, #4]
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2b37      	cmp	r3, #55	; 0x37
 800a352:	d9ef      	bls.n	800a334 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a354:	480d      	ldr	r0, [pc, #52]	; (800a38c <prvInitialiseTaskLists+0x64>)
 800a356:	f7fe fc69 	bl	8008c2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a35a:	480d      	ldr	r0, [pc, #52]	; (800a390 <prvInitialiseTaskLists+0x68>)
 800a35c:	f7fe fc66 	bl	8008c2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a360:	480c      	ldr	r0, [pc, #48]	; (800a394 <prvInitialiseTaskLists+0x6c>)
 800a362:	f7fe fc63 	bl	8008c2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a366:	480c      	ldr	r0, [pc, #48]	; (800a398 <prvInitialiseTaskLists+0x70>)
 800a368:	f7fe fc60 	bl	8008c2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a36c:	480b      	ldr	r0, [pc, #44]	; (800a39c <prvInitialiseTaskLists+0x74>)
 800a36e:	f7fe fc5d 	bl	8008c2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a372:	4b0b      	ldr	r3, [pc, #44]	; (800a3a0 <prvInitialiseTaskLists+0x78>)
 800a374:	4a05      	ldr	r2, [pc, #20]	; (800a38c <prvInitialiseTaskLists+0x64>)
 800a376:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a378:	4b0a      	ldr	r3, [pc, #40]	; (800a3a4 <prvInitialiseTaskLists+0x7c>)
 800a37a:	4a05      	ldr	r2, [pc, #20]	; (800a390 <prvInitialiseTaskLists+0x68>)
 800a37c:	601a      	str	r2, [r3, #0]
}
 800a37e:	bf00      	nop
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	20000768 	.word	0x20000768
 800a38c:	20000bc8 	.word	0x20000bc8
 800a390:	20000bdc 	.word	0x20000bdc
 800a394:	20000bf8 	.word	0x20000bf8
 800a398:	20000c0c 	.word	0x20000c0c
 800a39c:	20000c24 	.word	0x20000c24
 800a3a0:	20000bf0 	.word	0x20000bf0
 800a3a4:	20000bf4 	.word	0x20000bf4

0800a3a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b082      	sub	sp, #8
 800a3ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3ae:	e019      	b.n	800a3e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a3b0:	f000 fdd0 	bl	800af54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3b4:	4b10      	ldr	r3, [pc, #64]	; (800a3f8 <prvCheckTasksWaitingTermination+0x50>)
 800a3b6:	68db      	ldr	r3, [r3, #12]
 800a3b8:	68db      	ldr	r3, [r3, #12]
 800a3ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	3304      	adds	r3, #4
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f7fe fcbd 	bl	8008d40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a3c6:	4b0d      	ldr	r3, [pc, #52]	; (800a3fc <prvCheckTasksWaitingTermination+0x54>)
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	4a0b      	ldr	r2, [pc, #44]	; (800a3fc <prvCheckTasksWaitingTermination+0x54>)
 800a3ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a3d0:	4b0b      	ldr	r3, [pc, #44]	; (800a400 <prvCheckTasksWaitingTermination+0x58>)
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	4a0a      	ldr	r2, [pc, #40]	; (800a400 <prvCheckTasksWaitingTermination+0x58>)
 800a3d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a3da:	f000 fdeb 	bl	800afb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f000 f810 	bl	800a404 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3e4:	4b06      	ldr	r3, [pc, #24]	; (800a400 <prvCheckTasksWaitingTermination+0x58>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d1e1      	bne.n	800a3b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a3ec:	bf00      	nop
 800a3ee:	bf00      	nop
 800a3f0:	3708      	adds	r7, #8
 800a3f2:	46bd      	mov	sp, r7
 800a3f4:	bd80      	pop	{r7, pc}
 800a3f6:	bf00      	nop
 800a3f8:	20000c0c 	.word	0x20000c0c
 800a3fc:	20000c38 	.word	0x20000c38
 800a400:	20000c20 	.word	0x20000c20

0800a404 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a404:	b580      	push	{r7, lr}
 800a406:	b084      	sub	sp, #16
 800a408:	af00      	add	r7, sp, #0
 800a40a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a412:	2b00      	cmp	r3, #0
 800a414:	d108      	bne.n	800a428 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a41a:	4618      	mov	r0, r3
 800a41c:	f000 ff88 	bl	800b330 <vPortFree>
				vPortFree( pxTCB );
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f000 ff85 	bl	800b330 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a426:	e018      	b.n	800a45a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a42e:	2b01      	cmp	r3, #1
 800a430:	d103      	bne.n	800a43a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800a432:	6878      	ldr	r0, [r7, #4]
 800a434:	f000 ff7c 	bl	800b330 <vPortFree>
	}
 800a438:	e00f      	b.n	800a45a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800a440:	2b02      	cmp	r3, #2
 800a442:	d00a      	beq.n	800a45a <prvDeleteTCB+0x56>
	__asm volatile
 800a444:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a448:	f383 8811 	msr	BASEPRI, r3
 800a44c:	f3bf 8f6f 	isb	sy
 800a450:	f3bf 8f4f 	dsb	sy
 800a454:	60fb      	str	r3, [r7, #12]
}
 800a456:	bf00      	nop
 800a458:	e7fe      	b.n	800a458 <prvDeleteTCB+0x54>
	}
 800a45a:	bf00      	nop
 800a45c:	3710      	adds	r7, #16
 800a45e:	46bd      	mov	sp, r7
 800a460:	bd80      	pop	{r7, pc}
	...

0800a464 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a464:	b480      	push	{r7}
 800a466:	b083      	sub	sp, #12
 800a468:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a46a:	4b0c      	ldr	r3, [pc, #48]	; (800a49c <prvResetNextTaskUnblockTime+0x38>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d104      	bne.n	800a47e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a474:	4b0a      	ldr	r3, [pc, #40]	; (800a4a0 <prvResetNextTaskUnblockTime+0x3c>)
 800a476:	f04f 32ff 	mov.w	r2, #4294967295
 800a47a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a47c:	e008      	b.n	800a490 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a47e:	4b07      	ldr	r3, [pc, #28]	; (800a49c <prvResetNextTaskUnblockTime+0x38>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	68db      	ldr	r3, [r3, #12]
 800a484:	68db      	ldr	r3, [r3, #12]
 800a486:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	4a04      	ldr	r2, [pc, #16]	; (800a4a0 <prvResetNextTaskUnblockTime+0x3c>)
 800a48e:	6013      	str	r3, [r2, #0]
}
 800a490:	bf00      	nop
 800a492:	370c      	adds	r7, #12
 800a494:	46bd      	mov	sp, r7
 800a496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49a:	4770      	bx	lr
 800a49c:	20000bf0 	.word	0x20000bf0
 800a4a0:	20000c58 	.word	0x20000c58

0800a4a4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b083      	sub	sp, #12
 800a4a8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a4aa:	4b0b      	ldr	r3, [pc, #44]	; (800a4d8 <xTaskGetSchedulerState+0x34>)
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d102      	bne.n	800a4b8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a4b2:	2301      	movs	r3, #1
 800a4b4:	607b      	str	r3, [r7, #4]
 800a4b6:	e008      	b.n	800a4ca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4b8:	4b08      	ldr	r3, [pc, #32]	; (800a4dc <xTaskGetSchedulerState+0x38>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d102      	bne.n	800a4c6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	607b      	str	r3, [r7, #4]
 800a4c4:	e001      	b.n	800a4ca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a4ca:	687b      	ldr	r3, [r7, #4]
	}
 800a4cc:	4618      	mov	r0, r3
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr
 800a4d8:	20000c44 	.word	0x20000c44
 800a4dc:	20000c60 	.word	0x20000c60

0800a4e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b086      	sub	sp, #24
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d056      	beq.n	800a5a4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a4f6:	4b2e      	ldr	r3, [pc, #184]	; (800a5b0 <xTaskPriorityDisinherit+0xd0>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	693a      	ldr	r2, [r7, #16]
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d00a      	beq.n	800a516 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a504:	f383 8811 	msr	BASEPRI, r3
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	60fb      	str	r3, [r7, #12]
}
 800a512:	bf00      	nop
 800a514:	e7fe      	b.n	800a514 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d10a      	bne.n	800a534 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a51e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a522:	f383 8811 	msr	BASEPRI, r3
 800a526:	f3bf 8f6f 	isb	sy
 800a52a:	f3bf 8f4f 	dsb	sy
 800a52e:	60bb      	str	r3, [r7, #8]
}
 800a530:	bf00      	nop
 800a532:	e7fe      	b.n	800a532 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a534:	693b      	ldr	r3, [r7, #16]
 800a536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a538:	1e5a      	subs	r2, r3, #1
 800a53a:	693b      	ldr	r3, [r7, #16]
 800a53c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a53e:	693b      	ldr	r3, [r7, #16]
 800a540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a546:	429a      	cmp	r2, r3
 800a548:	d02c      	beq.n	800a5a4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d128      	bne.n	800a5a4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	3304      	adds	r3, #4
 800a556:	4618      	mov	r0, r3
 800a558:	f7fe fbf2 	bl	8008d40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a568:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a574:	4b0f      	ldr	r3, [pc, #60]	; (800a5b4 <xTaskPriorityDisinherit+0xd4>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	429a      	cmp	r2, r3
 800a57a:	d903      	bls.n	800a584 <xTaskPriorityDisinherit+0xa4>
 800a57c:	693b      	ldr	r3, [r7, #16]
 800a57e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a580:	4a0c      	ldr	r2, [pc, #48]	; (800a5b4 <xTaskPriorityDisinherit+0xd4>)
 800a582:	6013      	str	r3, [r2, #0]
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a588:	4613      	mov	r3, r2
 800a58a:	009b      	lsls	r3, r3, #2
 800a58c:	4413      	add	r3, r2
 800a58e:	009b      	lsls	r3, r3, #2
 800a590:	4a09      	ldr	r2, [pc, #36]	; (800a5b8 <xTaskPriorityDisinherit+0xd8>)
 800a592:	441a      	add	r2, r3
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	3304      	adds	r3, #4
 800a598:	4619      	mov	r1, r3
 800a59a:	4610      	mov	r0, r2
 800a59c:	f7fe fb73 	bl	8008c86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a5a4:	697b      	ldr	r3, [r7, #20]
	}
 800a5a6:	4618      	mov	r0, r3
 800a5a8:	3718      	adds	r7, #24
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	bd80      	pop	{r7, pc}
 800a5ae:	bf00      	nop
 800a5b0:	20000764 	.word	0x20000764
 800a5b4:	20000c40 	.word	0x20000c40
 800a5b8:	20000768 	.word	0x20000768

0800a5bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
 800a5c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a5c6:	4b21      	ldr	r3, [pc, #132]	; (800a64c <prvAddCurrentTaskToDelayedList+0x90>)
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a5cc:	4b20      	ldr	r3, [pc, #128]	; (800a650 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	3304      	adds	r3, #4
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f7fe fbb4 	bl	8008d40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5de:	d10a      	bne.n	800a5f6 <prvAddCurrentTaskToDelayedList+0x3a>
 800a5e0:	683b      	ldr	r3, [r7, #0]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d007      	beq.n	800a5f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5e6:	4b1a      	ldr	r3, [pc, #104]	; (800a650 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	3304      	adds	r3, #4
 800a5ec:	4619      	mov	r1, r3
 800a5ee:	4819      	ldr	r0, [pc, #100]	; (800a654 <prvAddCurrentTaskToDelayedList+0x98>)
 800a5f0:	f7fe fb49 	bl	8008c86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a5f4:	e026      	b.n	800a644 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	4413      	add	r3, r2
 800a5fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a5fe:	4b14      	ldr	r3, [pc, #80]	; (800a650 <prvAddCurrentTaskToDelayedList+0x94>)
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	68ba      	ldr	r2, [r7, #8]
 800a604:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a606:	68ba      	ldr	r2, [r7, #8]
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d209      	bcs.n	800a622 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a60e:	4b12      	ldr	r3, [pc, #72]	; (800a658 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a610:	681a      	ldr	r2, [r3, #0]
 800a612:	4b0f      	ldr	r3, [pc, #60]	; (800a650 <prvAddCurrentTaskToDelayedList+0x94>)
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	3304      	adds	r3, #4
 800a618:	4619      	mov	r1, r3
 800a61a:	4610      	mov	r0, r2
 800a61c:	f7fe fb57 	bl	8008cce <vListInsert>
}
 800a620:	e010      	b.n	800a644 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a622:	4b0e      	ldr	r3, [pc, #56]	; (800a65c <prvAddCurrentTaskToDelayedList+0xa0>)
 800a624:	681a      	ldr	r2, [r3, #0]
 800a626:	4b0a      	ldr	r3, [pc, #40]	; (800a650 <prvAddCurrentTaskToDelayedList+0x94>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	3304      	adds	r3, #4
 800a62c:	4619      	mov	r1, r3
 800a62e:	4610      	mov	r0, r2
 800a630:	f7fe fb4d 	bl	8008cce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a634:	4b0a      	ldr	r3, [pc, #40]	; (800a660 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	68ba      	ldr	r2, [r7, #8]
 800a63a:	429a      	cmp	r2, r3
 800a63c:	d202      	bcs.n	800a644 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a63e:	4a08      	ldr	r2, [pc, #32]	; (800a660 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	6013      	str	r3, [r2, #0]
}
 800a644:	bf00      	nop
 800a646:	3710      	adds	r7, #16
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}
 800a64c:	20000c3c 	.word	0x20000c3c
 800a650:	20000764 	.word	0x20000764
 800a654:	20000c24 	.word	0x20000c24
 800a658:	20000bf4 	.word	0x20000bf4
 800a65c:	20000bf0 	.word	0x20000bf0
 800a660:	20000c58 	.word	0x20000c58

0800a664 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b08a      	sub	sp, #40	; 0x28
 800a668:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a66a:	2300      	movs	r3, #0
 800a66c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a66e:	f000 fb07 	bl	800ac80 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a672:	4b1c      	ldr	r3, [pc, #112]	; (800a6e4 <xTimerCreateTimerTask+0x80>)
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	2b00      	cmp	r3, #0
 800a678:	d021      	beq.n	800a6be <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a67a:	2300      	movs	r3, #0
 800a67c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a67e:	2300      	movs	r3, #0
 800a680:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a682:	1d3a      	adds	r2, r7, #4
 800a684:	f107 0108 	add.w	r1, r7, #8
 800a688:	f107 030c 	add.w	r3, r7, #12
 800a68c:	4618      	mov	r0, r3
 800a68e:	f7fe fab3 	bl	8008bf8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a692:	6879      	ldr	r1, [r7, #4]
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	68fa      	ldr	r2, [r7, #12]
 800a698:	9202      	str	r2, [sp, #8]
 800a69a:	9301      	str	r3, [sp, #4]
 800a69c:	2302      	movs	r3, #2
 800a69e:	9300      	str	r3, [sp, #0]
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	460a      	mov	r2, r1
 800a6a4:	4910      	ldr	r1, [pc, #64]	; (800a6e8 <xTimerCreateTimerTask+0x84>)
 800a6a6:	4811      	ldr	r0, [pc, #68]	; (800a6ec <xTimerCreateTimerTask+0x88>)
 800a6a8:	f7ff f860 	bl	800976c <xTaskCreateStatic>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	4a10      	ldr	r2, [pc, #64]	; (800a6f0 <xTimerCreateTimerTask+0x8c>)
 800a6b0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a6b2:	4b0f      	ldr	r3, [pc, #60]	; (800a6f0 <xTimerCreateTimerTask+0x8c>)
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d001      	beq.n	800a6be <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a6be:	697b      	ldr	r3, [r7, #20]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d10a      	bne.n	800a6da <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6c8:	f383 8811 	msr	BASEPRI, r3
 800a6cc:	f3bf 8f6f 	isb	sy
 800a6d0:	f3bf 8f4f 	dsb	sy
 800a6d4:	613b      	str	r3, [r7, #16]
}
 800a6d6:	bf00      	nop
 800a6d8:	e7fe      	b.n	800a6d8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a6da:	697b      	ldr	r3, [r7, #20]
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3718      	adds	r7, #24
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}
 800a6e4:	20000c94 	.word	0x20000c94
 800a6e8:	0800c878 	.word	0x0800c878
 800a6ec:	0800a829 	.word	0x0800a829
 800a6f0:	20000c98 	.word	0x20000c98

0800a6f4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a6f4:	b580      	push	{r7, lr}
 800a6f6:	b08a      	sub	sp, #40	; 0x28
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	60f8      	str	r0, [r7, #12]
 800a6fc:	60b9      	str	r1, [r7, #8]
 800a6fe:	607a      	str	r2, [r7, #4]
 800a700:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a702:	2300      	movs	r3, #0
 800a704:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d10a      	bne.n	800a722 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a70c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a710:	f383 8811 	msr	BASEPRI, r3
 800a714:	f3bf 8f6f 	isb	sy
 800a718:	f3bf 8f4f 	dsb	sy
 800a71c:	623b      	str	r3, [r7, #32]
}
 800a71e:	bf00      	nop
 800a720:	e7fe      	b.n	800a720 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a722:	4b1a      	ldr	r3, [pc, #104]	; (800a78c <xTimerGenericCommand+0x98>)
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d02a      	beq.n	800a780 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	2b05      	cmp	r3, #5
 800a73a:	dc18      	bgt.n	800a76e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a73c:	f7ff feb2 	bl	800a4a4 <xTaskGetSchedulerState>
 800a740:	4603      	mov	r3, r0
 800a742:	2b02      	cmp	r3, #2
 800a744:	d109      	bne.n	800a75a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a746:	4b11      	ldr	r3, [pc, #68]	; (800a78c <xTimerGenericCommand+0x98>)
 800a748:	6818      	ldr	r0, [r3, #0]
 800a74a:	f107 0110 	add.w	r1, r7, #16
 800a74e:	2300      	movs	r3, #0
 800a750:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a752:	f7fe fc23 	bl	8008f9c <xQueueGenericSend>
 800a756:	6278      	str	r0, [r7, #36]	; 0x24
 800a758:	e012      	b.n	800a780 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a75a:	4b0c      	ldr	r3, [pc, #48]	; (800a78c <xTimerGenericCommand+0x98>)
 800a75c:	6818      	ldr	r0, [r3, #0]
 800a75e:	f107 0110 	add.w	r1, r7, #16
 800a762:	2300      	movs	r3, #0
 800a764:	2200      	movs	r2, #0
 800a766:	f7fe fc19 	bl	8008f9c <xQueueGenericSend>
 800a76a:	6278      	str	r0, [r7, #36]	; 0x24
 800a76c:	e008      	b.n	800a780 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a76e:	4b07      	ldr	r3, [pc, #28]	; (800a78c <xTimerGenericCommand+0x98>)
 800a770:	6818      	ldr	r0, [r3, #0]
 800a772:	f107 0110 	add.w	r1, r7, #16
 800a776:	2300      	movs	r3, #0
 800a778:	683a      	ldr	r2, [r7, #0]
 800a77a:	f7fe fd0d 	bl	8009198 <xQueueGenericSendFromISR>
 800a77e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a782:	4618      	mov	r0, r3
 800a784:	3728      	adds	r7, #40	; 0x28
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	20000c94 	.word	0x20000c94

0800a790 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a790:	b580      	push	{r7, lr}
 800a792:	b088      	sub	sp, #32
 800a794:	af02      	add	r7, sp, #8
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a79a:	4b22      	ldr	r3, [pc, #136]	; (800a824 <prvProcessExpiredTimer+0x94>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	3304      	adds	r3, #4
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7fe fac9 	bl	8008d40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7b4:	f003 0304 	and.w	r3, r3, #4
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d022      	beq.n	800a802 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	699a      	ldr	r2, [r3, #24]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	18d1      	adds	r1, r2, r3
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	683a      	ldr	r2, [r7, #0]
 800a7c8:	6978      	ldr	r0, [r7, #20]
 800a7ca:	f000 f8d1 	bl	800a970 <prvInsertTimerInActiveList>
 800a7ce:	4603      	mov	r3, r0
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d01f      	beq.n	800a814 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	9300      	str	r3, [sp, #0]
 800a7d8:	2300      	movs	r3, #0
 800a7da:	687a      	ldr	r2, [r7, #4]
 800a7dc:	2100      	movs	r1, #0
 800a7de:	6978      	ldr	r0, [r7, #20]
 800a7e0:	f7ff ff88 	bl	800a6f4 <xTimerGenericCommand>
 800a7e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d113      	bne.n	800a814 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f0:	f383 8811 	msr	BASEPRI, r3
 800a7f4:	f3bf 8f6f 	isb	sy
 800a7f8:	f3bf 8f4f 	dsb	sy
 800a7fc:	60fb      	str	r3, [r7, #12]
}
 800a7fe:	bf00      	nop
 800a800:	e7fe      	b.n	800a800 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a808:	f023 0301 	bic.w	r3, r3, #1
 800a80c:	b2da      	uxtb	r2, r3
 800a80e:	697b      	ldr	r3, [r7, #20]
 800a810:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a814:	697b      	ldr	r3, [r7, #20]
 800a816:	6a1b      	ldr	r3, [r3, #32]
 800a818:	6978      	ldr	r0, [r7, #20]
 800a81a:	4798      	blx	r3
}
 800a81c:	bf00      	nop
 800a81e:	3718      	adds	r7, #24
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	20000c8c 	.word	0x20000c8c

0800a828 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b084      	sub	sp, #16
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a830:	f107 0308 	add.w	r3, r7, #8
 800a834:	4618      	mov	r0, r3
 800a836:	f000 f857 	bl	800a8e8 <prvGetNextExpireTime>
 800a83a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	4619      	mov	r1, r3
 800a840:	68f8      	ldr	r0, [r7, #12]
 800a842:	f000 f803 	bl	800a84c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a846:	f000 f8d5 	bl	800a9f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a84a:	e7f1      	b.n	800a830 <prvTimerTask+0x8>

0800a84c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b084      	sub	sp, #16
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a856:	f7ff fa43 	bl	8009ce0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a85a:	f107 0308 	add.w	r3, r7, #8
 800a85e:	4618      	mov	r0, r3
 800a860:	f000 f866 	bl	800a930 <prvSampleTimeNow>
 800a864:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d130      	bne.n	800a8ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d10a      	bne.n	800a888 <prvProcessTimerOrBlockTask+0x3c>
 800a872:	687a      	ldr	r2, [r7, #4]
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	429a      	cmp	r2, r3
 800a878:	d806      	bhi.n	800a888 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a87a:	f7ff fa3f 	bl	8009cfc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a87e:	68f9      	ldr	r1, [r7, #12]
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f7ff ff85 	bl	800a790 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a886:	e024      	b.n	800a8d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d008      	beq.n	800a8a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a88e:	4b13      	ldr	r3, [pc, #76]	; (800a8dc <prvProcessTimerOrBlockTask+0x90>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d101      	bne.n	800a89c <prvProcessTimerOrBlockTask+0x50>
 800a898:	2301      	movs	r3, #1
 800a89a:	e000      	b.n	800a89e <prvProcessTimerOrBlockTask+0x52>
 800a89c:	2300      	movs	r3, #0
 800a89e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a8a0:	4b0f      	ldr	r3, [pc, #60]	; (800a8e0 <prvProcessTimerOrBlockTask+0x94>)
 800a8a2:	6818      	ldr	r0, [r3, #0]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	1ad3      	subs	r3, r2, r3
 800a8aa:	683a      	ldr	r2, [r7, #0]
 800a8ac:	4619      	mov	r1, r3
 800a8ae:	f7fe ff29 	bl	8009704 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a8b2:	f7ff fa23 	bl	8009cfc <xTaskResumeAll>
 800a8b6:	4603      	mov	r3, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d10a      	bne.n	800a8d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a8bc:	4b09      	ldr	r3, [pc, #36]	; (800a8e4 <prvProcessTimerOrBlockTask+0x98>)
 800a8be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8c2:	601a      	str	r2, [r3, #0]
 800a8c4:	f3bf 8f4f 	dsb	sy
 800a8c8:	f3bf 8f6f 	isb	sy
}
 800a8cc:	e001      	b.n	800a8d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a8ce:	f7ff fa15 	bl	8009cfc <xTaskResumeAll>
}
 800a8d2:	bf00      	nop
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	20000c90 	.word	0x20000c90
 800a8e0:	20000c94 	.word	0x20000c94
 800a8e4:	e000ed04 	.word	0xe000ed04

0800a8e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b085      	sub	sp, #20
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a8f0:	4b0e      	ldr	r3, [pc, #56]	; (800a92c <prvGetNextExpireTime+0x44>)
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d101      	bne.n	800a8fe <prvGetNextExpireTime+0x16>
 800a8fa:	2201      	movs	r2, #1
 800a8fc:	e000      	b.n	800a900 <prvGetNextExpireTime+0x18>
 800a8fe:	2200      	movs	r2, #0
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d105      	bne.n	800a918 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a90c:	4b07      	ldr	r3, [pc, #28]	; (800a92c <prvGetNextExpireTime+0x44>)
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	68db      	ldr	r3, [r3, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	60fb      	str	r3, [r7, #12]
 800a916:	e001      	b.n	800a91c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a918:	2300      	movs	r3, #0
 800a91a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a91c:	68fb      	ldr	r3, [r7, #12]
}
 800a91e:	4618      	mov	r0, r3
 800a920:	3714      	adds	r7, #20
 800a922:	46bd      	mov	sp, r7
 800a924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	20000c8c 	.word	0x20000c8c

0800a930 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a930:	b580      	push	{r7, lr}
 800a932:	b084      	sub	sp, #16
 800a934:	af00      	add	r7, sp, #0
 800a936:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a938:	f7ff fa7e 	bl	8009e38 <xTaskGetTickCount>
 800a93c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a93e:	4b0b      	ldr	r3, [pc, #44]	; (800a96c <prvSampleTimeNow+0x3c>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	429a      	cmp	r2, r3
 800a946:	d205      	bcs.n	800a954 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a948:	f000 f936 	bl	800abb8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	2201      	movs	r2, #1
 800a950:	601a      	str	r2, [r3, #0]
 800a952:	e002      	b.n	800a95a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2200      	movs	r2, #0
 800a958:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a95a:	4a04      	ldr	r2, [pc, #16]	; (800a96c <prvSampleTimeNow+0x3c>)
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a960:	68fb      	ldr	r3, [r7, #12]
}
 800a962:	4618      	mov	r0, r3
 800a964:	3710      	adds	r7, #16
 800a966:	46bd      	mov	sp, r7
 800a968:	bd80      	pop	{r7, pc}
 800a96a:	bf00      	nop
 800a96c:	20000c9c 	.word	0x20000c9c

0800a970 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b086      	sub	sp, #24
 800a974:	af00      	add	r7, sp, #0
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
 800a97c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a97e:	2300      	movs	r3, #0
 800a980:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	68ba      	ldr	r2, [r7, #8]
 800a986:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	68fa      	ldr	r2, [r7, #12]
 800a98c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a98e:	68ba      	ldr	r2, [r7, #8]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	429a      	cmp	r2, r3
 800a994:	d812      	bhi.n	800a9bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	1ad2      	subs	r2, r2, r3
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	699b      	ldr	r3, [r3, #24]
 800a9a0:	429a      	cmp	r2, r3
 800a9a2:	d302      	bcc.n	800a9aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	617b      	str	r3, [r7, #20]
 800a9a8:	e01b      	b.n	800a9e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a9aa:	4b10      	ldr	r3, [pc, #64]	; (800a9ec <prvInsertTimerInActiveList+0x7c>)
 800a9ac:	681a      	ldr	r2, [r3, #0]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	3304      	adds	r3, #4
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	4610      	mov	r0, r2
 800a9b6:	f7fe f98a 	bl	8008cce <vListInsert>
 800a9ba:	e012      	b.n	800a9e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	683b      	ldr	r3, [r7, #0]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d206      	bcs.n	800a9d2 <prvInsertTimerInActiveList+0x62>
 800a9c4:	68ba      	ldr	r2, [r7, #8]
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	429a      	cmp	r2, r3
 800a9ca:	d302      	bcc.n	800a9d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	617b      	str	r3, [r7, #20]
 800a9d0:	e007      	b.n	800a9e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a9d2:	4b07      	ldr	r3, [pc, #28]	; (800a9f0 <prvInsertTimerInActiveList+0x80>)
 800a9d4:	681a      	ldr	r2, [r3, #0]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	3304      	adds	r3, #4
 800a9da:	4619      	mov	r1, r3
 800a9dc:	4610      	mov	r0, r2
 800a9de:	f7fe f976 	bl	8008cce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a9e2:	697b      	ldr	r3, [r7, #20]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	3718      	adds	r7, #24
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	bd80      	pop	{r7, pc}
 800a9ec:	20000c90 	.word	0x20000c90
 800a9f0:	20000c8c 	.word	0x20000c8c

0800a9f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b08e      	sub	sp, #56	; 0x38
 800a9f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a9fa:	e0ca      	b.n	800ab92 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	da18      	bge.n	800aa34 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aa02:	1d3b      	adds	r3, r7, #4
 800aa04:	3304      	adds	r3, #4
 800aa06:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aa08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d10a      	bne.n	800aa24 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800aa0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa12:	f383 8811 	msr	BASEPRI, r3
 800aa16:	f3bf 8f6f 	isb	sy
 800aa1a:	f3bf 8f4f 	dsb	sy
 800aa1e:	61fb      	str	r3, [r7, #28]
}
 800aa20:	bf00      	nop
 800aa22:	e7fe      	b.n	800aa22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aa24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa2a:	6850      	ldr	r0, [r2, #4]
 800aa2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa2e:	6892      	ldr	r2, [r2, #8]
 800aa30:	4611      	mov	r1, r2
 800aa32:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	f2c0 80aa 	blt.w	800ab90 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa42:	695b      	ldr	r3, [r3, #20]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d004      	beq.n	800aa52 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa4a:	3304      	adds	r3, #4
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f7fe f977 	bl	8008d40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa52:	463b      	mov	r3, r7
 800aa54:	4618      	mov	r0, r3
 800aa56:	f7ff ff6b 	bl	800a930 <prvSampleTimeNow>
 800aa5a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	2b09      	cmp	r3, #9
 800aa60:	f200 8097 	bhi.w	800ab92 <prvProcessReceivedCommands+0x19e>
 800aa64:	a201      	add	r2, pc, #4	; (adr r2, 800aa6c <prvProcessReceivedCommands+0x78>)
 800aa66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa6a:	bf00      	nop
 800aa6c:	0800aa95 	.word	0x0800aa95
 800aa70:	0800aa95 	.word	0x0800aa95
 800aa74:	0800aa95 	.word	0x0800aa95
 800aa78:	0800ab09 	.word	0x0800ab09
 800aa7c:	0800ab1d 	.word	0x0800ab1d
 800aa80:	0800ab67 	.word	0x0800ab67
 800aa84:	0800aa95 	.word	0x0800aa95
 800aa88:	0800aa95 	.word	0x0800aa95
 800aa8c:	0800ab09 	.word	0x0800ab09
 800aa90:	0800ab1d 	.word	0x0800ab1d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa96:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa9a:	f043 0301 	orr.w	r3, r3, #1
 800aa9e:	b2da      	uxtb	r2, r3
 800aaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aaa6:	68ba      	ldr	r2, [r7, #8]
 800aaa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaaa:	699b      	ldr	r3, [r3, #24]
 800aaac:	18d1      	adds	r1, r2, r3
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aab2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aab4:	f7ff ff5c 	bl	800a970 <prvInsertTimerInActiveList>
 800aab8:	4603      	mov	r3, r0
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d069      	beq.n	800ab92 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac0:	6a1b      	ldr	r3, [r3, #32]
 800aac2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aac4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aacc:	f003 0304 	and.w	r3, r3, #4
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d05e      	beq.n	800ab92 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aad4:	68ba      	ldr	r2, [r7, #8]
 800aad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad8:	699b      	ldr	r3, [r3, #24]
 800aada:	441a      	add	r2, r3
 800aadc:	2300      	movs	r3, #0
 800aade:	9300      	str	r3, [sp, #0]
 800aae0:	2300      	movs	r3, #0
 800aae2:	2100      	movs	r1, #0
 800aae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aae6:	f7ff fe05 	bl	800a6f4 <xTimerGenericCommand>
 800aaea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aaec:	6a3b      	ldr	r3, [r7, #32]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d14f      	bne.n	800ab92 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aaf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaf6:	f383 8811 	msr	BASEPRI, r3
 800aafa:	f3bf 8f6f 	isb	sy
 800aafe:	f3bf 8f4f 	dsb	sy
 800ab02:	61bb      	str	r3, [r7, #24]
}
 800ab04:	bf00      	nop
 800ab06:	e7fe      	b.n	800ab06 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab0e:	f023 0301 	bic.w	r3, r3, #1
 800ab12:	b2da      	uxtb	r2, r3
 800ab14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab16:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ab1a:	e03a      	b.n	800ab92 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab22:	f043 0301 	orr.w	r3, r3, #1
 800ab26:	b2da      	uxtb	r2, r3
 800ab28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ab2e:	68ba      	ldr	r2, [r7, #8]
 800ab30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab32:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab36:	699b      	ldr	r3, [r3, #24]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d10a      	bne.n	800ab52 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ab3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab40:	f383 8811 	msr	BASEPRI, r3
 800ab44:	f3bf 8f6f 	isb	sy
 800ab48:	f3bf 8f4f 	dsb	sy
 800ab4c:	617b      	str	r3, [r7, #20]
}
 800ab4e:	bf00      	nop
 800ab50:	e7fe      	b.n	800ab50 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ab52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab54:	699a      	ldr	r2, [r3, #24]
 800ab56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab58:	18d1      	adds	r1, r2, r3
 800ab5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab60:	f7ff ff06 	bl	800a970 <prvInsertTimerInActiveList>
					break;
 800ab64:	e015      	b.n	800ab92 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ab66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab6c:	f003 0302 	and.w	r3, r3, #2
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d103      	bne.n	800ab7c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ab74:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab76:	f000 fbdb 	bl	800b330 <vPortFree>
 800ab7a:	e00a      	b.n	800ab92 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab82:	f023 0301 	bic.w	r3, r3, #1
 800ab86:	b2da      	uxtb	r2, r3
 800ab88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ab8e:	e000      	b.n	800ab92 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ab90:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab92:	4b08      	ldr	r3, [pc, #32]	; (800abb4 <prvProcessReceivedCommands+0x1c0>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	1d39      	adds	r1, r7, #4
 800ab98:	2200      	movs	r2, #0
 800ab9a:	4618      	mov	r0, r3
 800ab9c:	f7fe fb98 	bl	80092d0 <xQueueReceive>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	f47f af2a 	bne.w	800a9fc <prvProcessReceivedCommands+0x8>
	}
}
 800aba8:	bf00      	nop
 800abaa:	bf00      	nop
 800abac:	3730      	adds	r7, #48	; 0x30
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}
 800abb2:	bf00      	nop
 800abb4:	20000c94 	.word	0x20000c94

0800abb8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800abb8:	b580      	push	{r7, lr}
 800abba:	b088      	sub	sp, #32
 800abbc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800abbe:	e048      	b.n	800ac52 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800abc0:	4b2d      	ldr	r3, [pc, #180]	; (800ac78 <prvSwitchTimerLists+0xc0>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	68db      	ldr	r3, [r3, #12]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800abca:	4b2b      	ldr	r3, [pc, #172]	; (800ac78 <prvSwitchTimerLists+0xc0>)
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	68db      	ldr	r3, [r3, #12]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	3304      	adds	r3, #4
 800abd8:	4618      	mov	r0, r3
 800abda:	f7fe f8b1 	bl	8008d40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	6a1b      	ldr	r3, [r3, #32]
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abec:	f003 0304 	and.w	r3, r3, #4
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d02e      	beq.n	800ac52 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	699b      	ldr	r3, [r3, #24]
 800abf8:	693a      	ldr	r2, [r7, #16]
 800abfa:	4413      	add	r3, r2
 800abfc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800abfe:	68ba      	ldr	r2, [r7, #8]
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	429a      	cmp	r2, r3
 800ac04:	d90e      	bls.n	800ac24 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	68ba      	ldr	r2, [r7, #8]
 800ac0a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac12:	4b19      	ldr	r3, [pc, #100]	; (800ac78 <prvSwitchTimerLists+0xc0>)
 800ac14:	681a      	ldr	r2, [r3, #0]
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	3304      	adds	r3, #4
 800ac1a:	4619      	mov	r1, r3
 800ac1c:	4610      	mov	r0, r2
 800ac1e:	f7fe f856 	bl	8008cce <vListInsert>
 800ac22:	e016      	b.n	800ac52 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac24:	2300      	movs	r3, #0
 800ac26:	9300      	str	r3, [sp, #0]
 800ac28:	2300      	movs	r3, #0
 800ac2a:	693a      	ldr	r2, [r7, #16]
 800ac2c:	2100      	movs	r1, #0
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f7ff fd60 	bl	800a6f4 <xTimerGenericCommand>
 800ac34:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d10a      	bne.n	800ac52 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ac3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac40:	f383 8811 	msr	BASEPRI, r3
 800ac44:	f3bf 8f6f 	isb	sy
 800ac48:	f3bf 8f4f 	dsb	sy
 800ac4c:	603b      	str	r3, [r7, #0]
}
 800ac4e:	bf00      	nop
 800ac50:	e7fe      	b.n	800ac50 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac52:	4b09      	ldr	r3, [pc, #36]	; (800ac78 <prvSwitchTimerLists+0xc0>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d1b1      	bne.n	800abc0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ac5c:	4b06      	ldr	r3, [pc, #24]	; (800ac78 <prvSwitchTimerLists+0xc0>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ac62:	4b06      	ldr	r3, [pc, #24]	; (800ac7c <prvSwitchTimerLists+0xc4>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4a04      	ldr	r2, [pc, #16]	; (800ac78 <prvSwitchTimerLists+0xc0>)
 800ac68:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ac6a:	4a04      	ldr	r2, [pc, #16]	; (800ac7c <prvSwitchTimerLists+0xc4>)
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	6013      	str	r3, [r2, #0]
}
 800ac70:	bf00      	nop
 800ac72:	3718      	adds	r7, #24
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}
 800ac78:	20000c8c 	.word	0x20000c8c
 800ac7c:	20000c90 	.word	0x20000c90

0800ac80 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ac86:	f000 f965 	bl	800af54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ac8a:	4b15      	ldr	r3, [pc, #84]	; (800ace0 <prvCheckForValidListAndQueue+0x60>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d120      	bne.n	800acd4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ac92:	4814      	ldr	r0, [pc, #80]	; (800ace4 <prvCheckForValidListAndQueue+0x64>)
 800ac94:	f7fd ffca 	bl	8008c2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ac98:	4813      	ldr	r0, [pc, #76]	; (800ace8 <prvCheckForValidListAndQueue+0x68>)
 800ac9a:	f7fd ffc7 	bl	8008c2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ac9e:	4b13      	ldr	r3, [pc, #76]	; (800acec <prvCheckForValidListAndQueue+0x6c>)
 800aca0:	4a10      	ldr	r2, [pc, #64]	; (800ace4 <prvCheckForValidListAndQueue+0x64>)
 800aca2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800aca4:	4b12      	ldr	r3, [pc, #72]	; (800acf0 <prvCheckForValidListAndQueue+0x70>)
 800aca6:	4a10      	ldr	r2, [pc, #64]	; (800ace8 <prvCheckForValidListAndQueue+0x68>)
 800aca8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800acaa:	2300      	movs	r3, #0
 800acac:	9300      	str	r3, [sp, #0]
 800acae:	4b11      	ldr	r3, [pc, #68]	; (800acf4 <prvCheckForValidListAndQueue+0x74>)
 800acb0:	4a11      	ldr	r2, [pc, #68]	; (800acf8 <prvCheckForValidListAndQueue+0x78>)
 800acb2:	2110      	movs	r1, #16
 800acb4:	200a      	movs	r0, #10
 800acb6:	f7fe f8d5 	bl	8008e64 <xQueueGenericCreateStatic>
 800acba:	4603      	mov	r3, r0
 800acbc:	4a08      	ldr	r2, [pc, #32]	; (800ace0 <prvCheckForValidListAndQueue+0x60>)
 800acbe:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800acc0:	4b07      	ldr	r3, [pc, #28]	; (800ace0 <prvCheckForValidListAndQueue+0x60>)
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d005      	beq.n	800acd4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800acc8:	4b05      	ldr	r3, [pc, #20]	; (800ace0 <prvCheckForValidListAndQueue+0x60>)
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	490b      	ldr	r1, [pc, #44]	; (800acfc <prvCheckForValidListAndQueue+0x7c>)
 800acce:	4618      	mov	r0, r3
 800acd0:	f7fe fcee 	bl	80096b0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800acd4:	f000 f96e 	bl	800afb4 <vPortExitCritical>
}
 800acd8:	bf00      	nop
 800acda:	46bd      	mov	sp, r7
 800acdc:	bd80      	pop	{r7, pc}
 800acde:	bf00      	nop
 800ace0:	20000c94 	.word	0x20000c94
 800ace4:	20000c64 	.word	0x20000c64
 800ace8:	20000c78 	.word	0x20000c78
 800acec:	20000c8c 	.word	0x20000c8c
 800acf0:	20000c90 	.word	0x20000c90
 800acf4:	20000d40 	.word	0x20000d40
 800acf8:	20000ca0 	.word	0x20000ca0
 800acfc:	0800c880 	.word	0x0800c880

0800ad00 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ad00:	b480      	push	{r7}
 800ad02:	b085      	sub	sp, #20
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	3b04      	subs	r3, #4
 800ad10:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ad18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	3b04      	subs	r3, #4
 800ad1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	f023 0201 	bic.w	r2, r3, #1
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	3b04      	subs	r3, #4
 800ad2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ad30:	4a0c      	ldr	r2, [pc, #48]	; (800ad64 <pxPortInitialiseStack+0x64>)
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	3b14      	subs	r3, #20
 800ad3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ad3c:	687a      	ldr	r2, [r7, #4]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	3b04      	subs	r3, #4
 800ad46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	f06f 0202 	mvn.w	r2, #2
 800ad4e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	3b20      	subs	r3, #32
 800ad54:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ad56:	68fb      	ldr	r3, [r7, #12]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3714      	adds	r7, #20
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad62:	4770      	bx	lr
 800ad64:	0800ad69 	.word	0x0800ad69

0800ad68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ad68:	b480      	push	{r7}
 800ad6a:	b085      	sub	sp, #20
 800ad6c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ad6e:	2300      	movs	r3, #0
 800ad70:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ad72:	4b12      	ldr	r3, [pc, #72]	; (800adbc <prvTaskExitError+0x54>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad7a:	d00a      	beq.n	800ad92 <prvTaskExitError+0x2a>
	__asm volatile
 800ad7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad80:	f383 8811 	msr	BASEPRI, r3
 800ad84:	f3bf 8f6f 	isb	sy
 800ad88:	f3bf 8f4f 	dsb	sy
 800ad8c:	60fb      	str	r3, [r7, #12]
}
 800ad8e:	bf00      	nop
 800ad90:	e7fe      	b.n	800ad90 <prvTaskExitError+0x28>
	__asm volatile
 800ad92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad96:	f383 8811 	msr	BASEPRI, r3
 800ad9a:	f3bf 8f6f 	isb	sy
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	60bb      	str	r3, [r7, #8]
}
 800ada4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ada6:	bf00      	nop
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d0fc      	beq.n	800ada8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800adae:	bf00      	nop
 800adb0:	bf00      	nop
 800adb2:	3714      	adds	r7, #20
 800adb4:	46bd      	mov	sp, r7
 800adb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adba:	4770      	bx	lr
 800adbc:	2000001c 	.word	0x2000001c

0800adc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800adc0:	4b07      	ldr	r3, [pc, #28]	; (800ade0 <pxCurrentTCBConst2>)
 800adc2:	6819      	ldr	r1, [r3, #0]
 800adc4:	6808      	ldr	r0, [r1, #0]
 800adc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adca:	f380 8809 	msr	PSP, r0
 800adce:	f3bf 8f6f 	isb	sy
 800add2:	f04f 0000 	mov.w	r0, #0
 800add6:	f380 8811 	msr	BASEPRI, r0
 800adda:	4770      	bx	lr
 800addc:	f3af 8000 	nop.w

0800ade0 <pxCurrentTCBConst2>:
 800ade0:	20000764 	.word	0x20000764
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ade4:	bf00      	nop
 800ade6:	bf00      	nop

0800ade8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ade8:	4808      	ldr	r0, [pc, #32]	; (800ae0c <prvPortStartFirstTask+0x24>)
 800adea:	6800      	ldr	r0, [r0, #0]
 800adec:	6800      	ldr	r0, [r0, #0]
 800adee:	f380 8808 	msr	MSP, r0
 800adf2:	f04f 0000 	mov.w	r0, #0
 800adf6:	f380 8814 	msr	CONTROL, r0
 800adfa:	b662      	cpsie	i
 800adfc:	b661      	cpsie	f
 800adfe:	f3bf 8f4f 	dsb	sy
 800ae02:	f3bf 8f6f 	isb	sy
 800ae06:	df00      	svc	0
 800ae08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ae0a:	bf00      	nop
 800ae0c:	e000ed08 	.word	0xe000ed08

0800ae10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ae10:	b580      	push	{r7, lr}
 800ae12:	b086      	sub	sp, #24
 800ae14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ae16:	4b46      	ldr	r3, [pc, #280]	; (800af30 <xPortStartScheduler+0x120>)
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a46      	ldr	r2, [pc, #280]	; (800af34 <xPortStartScheduler+0x124>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d10a      	bne.n	800ae36 <xPortStartScheduler+0x26>
	__asm volatile
 800ae20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae24:	f383 8811 	msr	BASEPRI, r3
 800ae28:	f3bf 8f6f 	isb	sy
 800ae2c:	f3bf 8f4f 	dsb	sy
 800ae30:	613b      	str	r3, [r7, #16]
}
 800ae32:	bf00      	nop
 800ae34:	e7fe      	b.n	800ae34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ae36:	4b3e      	ldr	r3, [pc, #248]	; (800af30 <xPortStartScheduler+0x120>)
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	4a3f      	ldr	r2, [pc, #252]	; (800af38 <xPortStartScheduler+0x128>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d10a      	bne.n	800ae56 <xPortStartScheduler+0x46>
	__asm volatile
 800ae40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	60fb      	str	r3, [r7, #12]
}
 800ae52:	bf00      	nop
 800ae54:	e7fe      	b.n	800ae54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ae56:	4b39      	ldr	r3, [pc, #228]	; (800af3c <xPortStartScheduler+0x12c>)
 800ae58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	781b      	ldrb	r3, [r3, #0]
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	22ff      	movs	r2, #255	; 0xff
 800ae66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ae70:	78fb      	ldrb	r3, [r7, #3]
 800ae72:	b2db      	uxtb	r3, r3
 800ae74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ae78:	b2da      	uxtb	r2, r3
 800ae7a:	4b31      	ldr	r3, [pc, #196]	; (800af40 <xPortStartScheduler+0x130>)
 800ae7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ae7e:	4b31      	ldr	r3, [pc, #196]	; (800af44 <xPortStartScheduler+0x134>)
 800ae80:	2207      	movs	r2, #7
 800ae82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae84:	e009      	b.n	800ae9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ae86:	4b2f      	ldr	r3, [pc, #188]	; (800af44 <xPortStartScheduler+0x134>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	4a2d      	ldr	r2, [pc, #180]	; (800af44 <xPortStartScheduler+0x134>)
 800ae8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae90:	78fb      	ldrb	r3, [r7, #3]
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	005b      	lsls	r3, r3, #1
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae9a:	78fb      	ldrb	r3, [r7, #3]
 800ae9c:	b2db      	uxtb	r3, r3
 800ae9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aea2:	2b80      	cmp	r3, #128	; 0x80
 800aea4:	d0ef      	beq.n	800ae86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aea6:	4b27      	ldr	r3, [pc, #156]	; (800af44 <xPortStartScheduler+0x134>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f1c3 0307 	rsb	r3, r3, #7
 800aeae:	2b04      	cmp	r3, #4
 800aeb0:	d00a      	beq.n	800aec8 <xPortStartScheduler+0xb8>
	__asm volatile
 800aeb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeb6:	f383 8811 	msr	BASEPRI, r3
 800aeba:	f3bf 8f6f 	isb	sy
 800aebe:	f3bf 8f4f 	dsb	sy
 800aec2:	60bb      	str	r3, [r7, #8]
}
 800aec4:	bf00      	nop
 800aec6:	e7fe      	b.n	800aec6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800aec8:	4b1e      	ldr	r3, [pc, #120]	; (800af44 <xPortStartScheduler+0x134>)
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	021b      	lsls	r3, r3, #8
 800aece:	4a1d      	ldr	r2, [pc, #116]	; (800af44 <xPortStartScheduler+0x134>)
 800aed0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aed2:	4b1c      	ldr	r3, [pc, #112]	; (800af44 <xPortStartScheduler+0x134>)
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aeda:	4a1a      	ldr	r2, [pc, #104]	; (800af44 <xPortStartScheduler+0x134>)
 800aedc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	b2da      	uxtb	r2, r3
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aee6:	4b18      	ldr	r3, [pc, #96]	; (800af48 <xPortStartScheduler+0x138>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	4a17      	ldr	r2, [pc, #92]	; (800af48 <xPortStartScheduler+0x138>)
 800aeec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aef0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aef2:	4b15      	ldr	r3, [pc, #84]	; (800af48 <xPortStartScheduler+0x138>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a14      	ldr	r2, [pc, #80]	; (800af48 <xPortStartScheduler+0x138>)
 800aef8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aefc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aefe:	f000 f8dd 	bl	800b0bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800af02:	4b12      	ldr	r3, [pc, #72]	; (800af4c <xPortStartScheduler+0x13c>)
 800af04:	2200      	movs	r2, #0
 800af06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800af08:	f000 f8fc 	bl	800b104 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800af0c:	4b10      	ldr	r3, [pc, #64]	; (800af50 <xPortStartScheduler+0x140>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a0f      	ldr	r2, [pc, #60]	; (800af50 <xPortStartScheduler+0x140>)
 800af12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800af16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800af18:	f7ff ff66 	bl	800ade8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800af1c:	f7ff f856 	bl	8009fcc <vTaskSwitchContext>
	prvTaskExitError();
 800af20:	f7ff ff22 	bl	800ad68 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800af24:	2300      	movs	r3, #0
}
 800af26:	4618      	mov	r0, r3
 800af28:	3718      	adds	r7, #24
 800af2a:	46bd      	mov	sp, r7
 800af2c:	bd80      	pop	{r7, pc}
 800af2e:	bf00      	nop
 800af30:	e000ed00 	.word	0xe000ed00
 800af34:	410fc271 	.word	0x410fc271
 800af38:	410fc270 	.word	0x410fc270
 800af3c:	e000e400 	.word	0xe000e400
 800af40:	20000d90 	.word	0x20000d90
 800af44:	20000d94 	.word	0x20000d94
 800af48:	e000ed20 	.word	0xe000ed20
 800af4c:	2000001c 	.word	0x2000001c
 800af50:	e000ef34 	.word	0xe000ef34

0800af54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
	__asm volatile
 800af5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5e:	f383 8811 	msr	BASEPRI, r3
 800af62:	f3bf 8f6f 	isb	sy
 800af66:	f3bf 8f4f 	dsb	sy
 800af6a:	607b      	str	r3, [r7, #4]
}
 800af6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800af6e:	4b0f      	ldr	r3, [pc, #60]	; (800afac <vPortEnterCritical+0x58>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	3301      	adds	r3, #1
 800af74:	4a0d      	ldr	r2, [pc, #52]	; (800afac <vPortEnterCritical+0x58>)
 800af76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800af78:	4b0c      	ldr	r3, [pc, #48]	; (800afac <vPortEnterCritical+0x58>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	2b01      	cmp	r3, #1
 800af7e:	d10f      	bne.n	800afa0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800af80:	4b0b      	ldr	r3, [pc, #44]	; (800afb0 <vPortEnterCritical+0x5c>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	b2db      	uxtb	r3, r3
 800af86:	2b00      	cmp	r3, #0
 800af88:	d00a      	beq.n	800afa0 <vPortEnterCritical+0x4c>
	__asm volatile
 800af8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af8e:	f383 8811 	msr	BASEPRI, r3
 800af92:	f3bf 8f6f 	isb	sy
 800af96:	f3bf 8f4f 	dsb	sy
 800af9a:	603b      	str	r3, [r7, #0]
}
 800af9c:	bf00      	nop
 800af9e:	e7fe      	b.n	800af9e <vPortEnterCritical+0x4a>
	}
}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr
 800afac:	2000001c 	.word	0x2000001c
 800afb0:	e000ed04 	.word	0xe000ed04

0800afb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800afba:	4b12      	ldr	r3, [pc, #72]	; (800b004 <vPortExitCritical+0x50>)
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d10a      	bne.n	800afd8 <vPortExitCritical+0x24>
	__asm volatile
 800afc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc6:	f383 8811 	msr	BASEPRI, r3
 800afca:	f3bf 8f6f 	isb	sy
 800afce:	f3bf 8f4f 	dsb	sy
 800afd2:	607b      	str	r3, [r7, #4]
}
 800afd4:	bf00      	nop
 800afd6:	e7fe      	b.n	800afd6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800afd8:	4b0a      	ldr	r3, [pc, #40]	; (800b004 <vPortExitCritical+0x50>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	3b01      	subs	r3, #1
 800afde:	4a09      	ldr	r2, [pc, #36]	; (800b004 <vPortExitCritical+0x50>)
 800afe0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800afe2:	4b08      	ldr	r3, [pc, #32]	; (800b004 <vPortExitCritical+0x50>)
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d105      	bne.n	800aff6 <vPortExitCritical+0x42>
 800afea:	2300      	movs	r3, #0
 800afec:	603b      	str	r3, [r7, #0]
	__asm volatile
 800afee:	683b      	ldr	r3, [r7, #0]
 800aff0:	f383 8811 	msr	BASEPRI, r3
}
 800aff4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800aff6:	bf00      	nop
 800aff8:	370c      	adds	r7, #12
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	2000001c 	.word	0x2000001c
	...

0800b010 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b010:	f3ef 8009 	mrs	r0, PSP
 800b014:	f3bf 8f6f 	isb	sy
 800b018:	4b15      	ldr	r3, [pc, #84]	; (800b070 <pxCurrentTCBConst>)
 800b01a:	681a      	ldr	r2, [r3, #0]
 800b01c:	f01e 0f10 	tst.w	lr, #16
 800b020:	bf08      	it	eq
 800b022:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b026:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b02a:	6010      	str	r0, [r2, #0]
 800b02c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b030:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b034:	f380 8811 	msr	BASEPRI, r0
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	f3bf 8f6f 	isb	sy
 800b040:	f7fe ffc4 	bl	8009fcc <vTaskSwitchContext>
 800b044:	f04f 0000 	mov.w	r0, #0
 800b048:	f380 8811 	msr	BASEPRI, r0
 800b04c:	bc09      	pop	{r0, r3}
 800b04e:	6819      	ldr	r1, [r3, #0]
 800b050:	6808      	ldr	r0, [r1, #0]
 800b052:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b056:	f01e 0f10 	tst.w	lr, #16
 800b05a:	bf08      	it	eq
 800b05c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b060:	f380 8809 	msr	PSP, r0
 800b064:	f3bf 8f6f 	isb	sy
 800b068:	4770      	bx	lr
 800b06a:	bf00      	nop
 800b06c:	f3af 8000 	nop.w

0800b070 <pxCurrentTCBConst>:
 800b070:	20000764 	.word	0x20000764
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b074:	bf00      	nop
 800b076:	bf00      	nop

0800b078 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
	__asm volatile
 800b07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b082:	f383 8811 	msr	BASEPRI, r3
 800b086:	f3bf 8f6f 	isb	sy
 800b08a:	f3bf 8f4f 	dsb	sy
 800b08e:	607b      	str	r3, [r7, #4]
}
 800b090:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b092:	f7fe fee1 	bl	8009e58 <xTaskIncrementTick>
 800b096:	4603      	mov	r3, r0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d003      	beq.n	800b0a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b09c:	4b06      	ldr	r3, [pc, #24]	; (800b0b8 <xPortSysTickHandler+0x40>)
 800b09e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0a2:	601a      	str	r2, [r3, #0]
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b0a8:	683b      	ldr	r3, [r7, #0]
 800b0aa:	f383 8811 	msr	BASEPRI, r3
}
 800b0ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b0b0:	bf00      	nop
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}
 800b0b8:	e000ed04 	.word	0xe000ed04

0800b0bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b0bc:	b480      	push	{r7}
 800b0be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b0c0:	4b0b      	ldr	r3, [pc, #44]	; (800b0f0 <vPortSetupTimerInterrupt+0x34>)
 800b0c2:	2200      	movs	r2, #0
 800b0c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b0c6:	4b0b      	ldr	r3, [pc, #44]	; (800b0f4 <vPortSetupTimerInterrupt+0x38>)
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b0cc:	4b0a      	ldr	r3, [pc, #40]	; (800b0f8 <vPortSetupTimerInterrupt+0x3c>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a0a      	ldr	r2, [pc, #40]	; (800b0fc <vPortSetupTimerInterrupt+0x40>)
 800b0d2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0d6:	099b      	lsrs	r3, r3, #6
 800b0d8:	4a09      	ldr	r2, [pc, #36]	; (800b100 <vPortSetupTimerInterrupt+0x44>)
 800b0da:	3b01      	subs	r3, #1
 800b0dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b0de:	4b04      	ldr	r3, [pc, #16]	; (800b0f0 <vPortSetupTimerInterrupt+0x34>)
 800b0e0:	2207      	movs	r2, #7
 800b0e2:	601a      	str	r2, [r3, #0]
}
 800b0e4:	bf00      	nop
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ec:	4770      	bx	lr
 800b0ee:	bf00      	nop
 800b0f0:	e000e010 	.word	0xe000e010
 800b0f4:	e000e018 	.word	0xe000e018
 800b0f8:	20000010 	.word	0x20000010
 800b0fc:	10624dd3 	.word	0x10624dd3
 800b100:	e000e014 	.word	0xe000e014

0800b104 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b104:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b114 <vPortEnableVFP+0x10>
 800b108:	6801      	ldr	r1, [r0, #0]
 800b10a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b10e:	6001      	str	r1, [r0, #0]
 800b110:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b112:	bf00      	nop
 800b114:	e000ed88 	.word	0xe000ed88

0800b118 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b118:	b480      	push	{r7}
 800b11a:	b085      	sub	sp, #20
 800b11c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b11e:	f3ef 8305 	mrs	r3, IPSR
 800b122:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	2b0f      	cmp	r3, #15
 800b128:	d914      	bls.n	800b154 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b12a:	4a17      	ldr	r2, [pc, #92]	; (800b188 <vPortValidateInterruptPriority+0x70>)
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	4413      	add	r3, r2
 800b130:	781b      	ldrb	r3, [r3, #0]
 800b132:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b134:	4b15      	ldr	r3, [pc, #84]	; (800b18c <vPortValidateInterruptPriority+0x74>)
 800b136:	781b      	ldrb	r3, [r3, #0]
 800b138:	7afa      	ldrb	r2, [r7, #11]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d20a      	bcs.n	800b154 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b13e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b142:	f383 8811 	msr	BASEPRI, r3
 800b146:	f3bf 8f6f 	isb	sy
 800b14a:	f3bf 8f4f 	dsb	sy
 800b14e:	607b      	str	r3, [r7, #4]
}
 800b150:	bf00      	nop
 800b152:	e7fe      	b.n	800b152 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b154:	4b0e      	ldr	r3, [pc, #56]	; (800b190 <vPortValidateInterruptPriority+0x78>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b15c:	4b0d      	ldr	r3, [pc, #52]	; (800b194 <vPortValidateInterruptPriority+0x7c>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	429a      	cmp	r2, r3
 800b162:	d90a      	bls.n	800b17a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b164:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b168:	f383 8811 	msr	BASEPRI, r3
 800b16c:	f3bf 8f6f 	isb	sy
 800b170:	f3bf 8f4f 	dsb	sy
 800b174:	603b      	str	r3, [r7, #0]
}
 800b176:	bf00      	nop
 800b178:	e7fe      	b.n	800b178 <vPortValidateInterruptPriority+0x60>
	}
 800b17a:	bf00      	nop
 800b17c:	3714      	adds	r7, #20
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr
 800b186:	bf00      	nop
 800b188:	e000e3f0 	.word	0xe000e3f0
 800b18c:	20000d90 	.word	0x20000d90
 800b190:	e000ed0c 	.word	0xe000ed0c
 800b194:	20000d94 	.word	0x20000d94

0800b198 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b08a      	sub	sp, #40	; 0x28
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b1a4:	f7fe fd9c 	bl	8009ce0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b1a8:	4b5b      	ldr	r3, [pc, #364]	; (800b318 <pvPortMalloc+0x180>)
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d101      	bne.n	800b1b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b1b0:	f000 f920 	bl	800b3f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b1b4:	4b59      	ldr	r3, [pc, #356]	; (800b31c <pvPortMalloc+0x184>)
 800b1b6:	681a      	ldr	r2, [r3, #0]
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	4013      	ands	r3, r2
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f040 8093 	bne.w	800b2e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d01d      	beq.n	800b204 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b1c8:	2208      	movs	r2, #8
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f003 0307 	and.w	r3, r3, #7
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d014      	beq.n	800b204 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f023 0307 	bic.w	r3, r3, #7
 800b1e0:	3308      	adds	r3, #8
 800b1e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f003 0307 	and.w	r3, r3, #7
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d00a      	beq.n	800b204 <pvPortMalloc+0x6c>
	__asm volatile
 800b1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1f2:	f383 8811 	msr	BASEPRI, r3
 800b1f6:	f3bf 8f6f 	isb	sy
 800b1fa:	f3bf 8f4f 	dsb	sy
 800b1fe:	617b      	str	r3, [r7, #20]
}
 800b200:	bf00      	nop
 800b202:	e7fe      	b.n	800b202 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d06e      	beq.n	800b2e8 <pvPortMalloc+0x150>
 800b20a:	4b45      	ldr	r3, [pc, #276]	; (800b320 <pvPortMalloc+0x188>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	687a      	ldr	r2, [r7, #4]
 800b210:	429a      	cmp	r2, r3
 800b212:	d869      	bhi.n	800b2e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b214:	4b43      	ldr	r3, [pc, #268]	; (800b324 <pvPortMalloc+0x18c>)
 800b216:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b218:	4b42      	ldr	r3, [pc, #264]	; (800b324 <pvPortMalloc+0x18c>)
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b21e:	e004      	b.n	800b22a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b222:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22c:	685b      	ldr	r3, [r3, #4]
 800b22e:	687a      	ldr	r2, [r7, #4]
 800b230:	429a      	cmp	r2, r3
 800b232:	d903      	bls.n	800b23c <pvPortMalloc+0xa4>
 800b234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d1f1      	bne.n	800b220 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b23c:	4b36      	ldr	r3, [pc, #216]	; (800b318 <pvPortMalloc+0x180>)
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b242:	429a      	cmp	r2, r3
 800b244:	d050      	beq.n	800b2e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b246:	6a3b      	ldr	r3, [r7, #32]
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	2208      	movs	r2, #8
 800b24c:	4413      	add	r3, r2
 800b24e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b252:	681a      	ldr	r2, [r3, #0]
 800b254:	6a3b      	ldr	r3, [r7, #32]
 800b256:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b25a:	685a      	ldr	r2, [r3, #4]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	1ad2      	subs	r2, r2, r3
 800b260:	2308      	movs	r3, #8
 800b262:	005b      	lsls	r3, r3, #1
 800b264:	429a      	cmp	r2, r3
 800b266:	d91f      	bls.n	800b2a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b268:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	4413      	add	r3, r2
 800b26e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b270:	69bb      	ldr	r3, [r7, #24]
 800b272:	f003 0307 	and.w	r3, r3, #7
 800b276:	2b00      	cmp	r3, #0
 800b278:	d00a      	beq.n	800b290 <pvPortMalloc+0xf8>
	__asm volatile
 800b27a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27e:	f383 8811 	msr	BASEPRI, r3
 800b282:	f3bf 8f6f 	isb	sy
 800b286:	f3bf 8f4f 	dsb	sy
 800b28a:	613b      	str	r3, [r7, #16]
}
 800b28c:	bf00      	nop
 800b28e:	e7fe      	b.n	800b28e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b292:	685a      	ldr	r2, [r3, #4]
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	1ad2      	subs	r2, r2, r3
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29e:	687a      	ldr	r2, [r7, #4]
 800b2a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b2a2:	69b8      	ldr	r0, [r7, #24]
 800b2a4:	f000 f908 	bl	800b4b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b2a8:	4b1d      	ldr	r3, [pc, #116]	; (800b320 <pvPortMalloc+0x188>)
 800b2aa:	681a      	ldr	r2, [r3, #0]
 800b2ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ae:	685b      	ldr	r3, [r3, #4]
 800b2b0:	1ad3      	subs	r3, r2, r3
 800b2b2:	4a1b      	ldr	r2, [pc, #108]	; (800b320 <pvPortMalloc+0x188>)
 800b2b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b2b6:	4b1a      	ldr	r3, [pc, #104]	; (800b320 <pvPortMalloc+0x188>)
 800b2b8:	681a      	ldr	r2, [r3, #0]
 800b2ba:	4b1b      	ldr	r3, [pc, #108]	; (800b328 <pvPortMalloc+0x190>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d203      	bcs.n	800b2ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b2c2:	4b17      	ldr	r3, [pc, #92]	; (800b320 <pvPortMalloc+0x188>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4a18      	ldr	r2, [pc, #96]	; (800b328 <pvPortMalloc+0x190>)
 800b2c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b2ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2cc:	685a      	ldr	r2, [r3, #4]
 800b2ce:	4b13      	ldr	r3, [pc, #76]	; (800b31c <pvPortMalloc+0x184>)
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	431a      	orrs	r2, r3
 800b2d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b2d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2da:	2200      	movs	r2, #0
 800b2dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b2de:	4b13      	ldr	r3, [pc, #76]	; (800b32c <pvPortMalloc+0x194>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	3301      	adds	r3, #1
 800b2e4:	4a11      	ldr	r2, [pc, #68]	; (800b32c <pvPortMalloc+0x194>)
 800b2e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b2e8:	f7fe fd08 	bl	8009cfc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2ec:	69fb      	ldr	r3, [r7, #28]
 800b2ee:	f003 0307 	and.w	r3, r3, #7
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d00a      	beq.n	800b30c <pvPortMalloc+0x174>
	__asm volatile
 800b2f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2fa:	f383 8811 	msr	BASEPRI, r3
 800b2fe:	f3bf 8f6f 	isb	sy
 800b302:	f3bf 8f4f 	dsb	sy
 800b306:	60fb      	str	r3, [r7, #12]
}
 800b308:	bf00      	nop
 800b30a:	e7fe      	b.n	800b30a <pvPortMalloc+0x172>
	return pvReturn;
 800b30c:	69fb      	ldr	r3, [r7, #28]
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3728      	adds	r7, #40	; 0x28
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	20001d40 	.word	0x20001d40
 800b31c:	20001d54 	.word	0x20001d54
 800b320:	20001d44 	.word	0x20001d44
 800b324:	20001d38 	.word	0x20001d38
 800b328:	20001d48 	.word	0x20001d48
 800b32c:	20001d4c 	.word	0x20001d4c

0800b330 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b086      	sub	sp, #24
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d04d      	beq.n	800b3de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b342:	2308      	movs	r3, #8
 800b344:	425b      	negs	r3, r3
 800b346:	697a      	ldr	r2, [r7, #20]
 800b348:	4413      	add	r3, r2
 800b34a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b350:	693b      	ldr	r3, [r7, #16]
 800b352:	685a      	ldr	r2, [r3, #4]
 800b354:	4b24      	ldr	r3, [pc, #144]	; (800b3e8 <vPortFree+0xb8>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	4013      	ands	r3, r2
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d10a      	bne.n	800b374 <vPortFree+0x44>
	__asm volatile
 800b35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b362:	f383 8811 	msr	BASEPRI, r3
 800b366:	f3bf 8f6f 	isb	sy
 800b36a:	f3bf 8f4f 	dsb	sy
 800b36e:	60fb      	str	r3, [r7, #12]
}
 800b370:	bf00      	nop
 800b372:	e7fe      	b.n	800b372 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d00a      	beq.n	800b392 <vPortFree+0x62>
	__asm volatile
 800b37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b380:	f383 8811 	msr	BASEPRI, r3
 800b384:	f3bf 8f6f 	isb	sy
 800b388:	f3bf 8f4f 	dsb	sy
 800b38c:	60bb      	str	r3, [r7, #8]
}
 800b38e:	bf00      	nop
 800b390:	e7fe      	b.n	800b390 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b392:	693b      	ldr	r3, [r7, #16]
 800b394:	685a      	ldr	r2, [r3, #4]
 800b396:	4b14      	ldr	r3, [pc, #80]	; (800b3e8 <vPortFree+0xb8>)
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	4013      	ands	r3, r2
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d01e      	beq.n	800b3de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	2b00      	cmp	r3, #0
 800b3a6:	d11a      	bne.n	800b3de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	685a      	ldr	r2, [r3, #4]
 800b3ac:	4b0e      	ldr	r3, [pc, #56]	; (800b3e8 <vPortFree+0xb8>)
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	43db      	mvns	r3, r3
 800b3b2:	401a      	ands	r2, r3
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b3b8:	f7fe fc92 	bl	8009ce0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b3bc:	693b      	ldr	r3, [r7, #16]
 800b3be:	685a      	ldr	r2, [r3, #4]
 800b3c0:	4b0a      	ldr	r3, [pc, #40]	; (800b3ec <vPortFree+0xbc>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	4413      	add	r3, r2
 800b3c6:	4a09      	ldr	r2, [pc, #36]	; (800b3ec <vPortFree+0xbc>)
 800b3c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b3ca:	6938      	ldr	r0, [r7, #16]
 800b3cc:	f000 f874 	bl	800b4b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b3d0:	4b07      	ldr	r3, [pc, #28]	; (800b3f0 <vPortFree+0xc0>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	4a06      	ldr	r2, [pc, #24]	; (800b3f0 <vPortFree+0xc0>)
 800b3d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b3da:	f7fe fc8f 	bl	8009cfc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b3de:	bf00      	nop
 800b3e0:	3718      	adds	r7, #24
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	20001d54 	.word	0x20001d54
 800b3ec:	20001d44 	.word	0x20001d44
 800b3f0:	20001d50 	.word	0x20001d50

0800b3f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b3f4:	b480      	push	{r7}
 800b3f6:	b085      	sub	sp, #20
 800b3f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b3fa:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800b3fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b400:	4b27      	ldr	r3, [pc, #156]	; (800b4a0 <prvHeapInit+0xac>)
 800b402:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f003 0307 	and.w	r3, r3, #7
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d00c      	beq.n	800b428 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	3307      	adds	r3, #7
 800b412:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	f023 0307 	bic.w	r3, r3, #7
 800b41a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b41c:	68ba      	ldr	r2, [r7, #8]
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	1ad3      	subs	r3, r2, r3
 800b422:	4a1f      	ldr	r2, [pc, #124]	; (800b4a0 <prvHeapInit+0xac>)
 800b424:	4413      	add	r3, r2
 800b426:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b42c:	4a1d      	ldr	r2, [pc, #116]	; (800b4a4 <prvHeapInit+0xb0>)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b432:	4b1c      	ldr	r3, [pc, #112]	; (800b4a4 <prvHeapInit+0xb0>)
 800b434:	2200      	movs	r2, #0
 800b436:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	68ba      	ldr	r2, [r7, #8]
 800b43c:	4413      	add	r3, r2
 800b43e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b440:	2208      	movs	r2, #8
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	1a9b      	subs	r3, r3, r2
 800b446:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f023 0307 	bic.w	r3, r3, #7
 800b44e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	4a15      	ldr	r2, [pc, #84]	; (800b4a8 <prvHeapInit+0xb4>)
 800b454:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b456:	4b14      	ldr	r3, [pc, #80]	; (800b4a8 <prvHeapInit+0xb4>)
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	2200      	movs	r2, #0
 800b45c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b45e:	4b12      	ldr	r3, [pc, #72]	; (800b4a8 <prvHeapInit+0xb4>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	2200      	movs	r2, #0
 800b464:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b46a:	683b      	ldr	r3, [r7, #0]
 800b46c:	68fa      	ldr	r2, [r7, #12]
 800b46e:	1ad2      	subs	r2, r2, r3
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b474:	4b0c      	ldr	r3, [pc, #48]	; (800b4a8 <prvHeapInit+0xb4>)
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	4a0a      	ldr	r2, [pc, #40]	; (800b4ac <prvHeapInit+0xb8>)
 800b482:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	4a09      	ldr	r2, [pc, #36]	; (800b4b0 <prvHeapInit+0xbc>)
 800b48a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b48c:	4b09      	ldr	r3, [pc, #36]	; (800b4b4 <prvHeapInit+0xc0>)
 800b48e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b492:	601a      	str	r2, [r3, #0]
}
 800b494:	bf00      	nop
 800b496:	3714      	adds	r7, #20
 800b498:	46bd      	mov	sp, r7
 800b49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b49e:	4770      	bx	lr
 800b4a0:	20000d98 	.word	0x20000d98
 800b4a4:	20001d38 	.word	0x20001d38
 800b4a8:	20001d40 	.word	0x20001d40
 800b4ac:	20001d48 	.word	0x20001d48
 800b4b0:	20001d44 	.word	0x20001d44
 800b4b4:	20001d54 	.word	0x20001d54

0800b4b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b4b8:	b480      	push	{r7}
 800b4ba:	b085      	sub	sp, #20
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b4c0:	4b28      	ldr	r3, [pc, #160]	; (800b564 <prvInsertBlockIntoFreeList+0xac>)
 800b4c2:	60fb      	str	r3, [r7, #12]
 800b4c4:	e002      	b.n	800b4cc <prvInsertBlockIntoFreeList+0x14>
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	60fb      	str	r3, [r7, #12]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	429a      	cmp	r2, r3
 800b4d4:	d8f7      	bhi.n	800b4c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	68ba      	ldr	r2, [r7, #8]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	687a      	ldr	r2, [r7, #4]
 800b4e4:	429a      	cmp	r2, r3
 800b4e6:	d108      	bne.n	800b4fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	685a      	ldr	r2, [r3, #4]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	441a      	add	r2, r3
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	685b      	ldr	r3, [r3, #4]
 800b502:	68ba      	ldr	r2, [r7, #8]
 800b504:	441a      	add	r2, r3
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d118      	bne.n	800b540 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	681a      	ldr	r2, [r3, #0]
 800b512:	4b15      	ldr	r3, [pc, #84]	; (800b568 <prvInsertBlockIntoFreeList+0xb0>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	429a      	cmp	r2, r3
 800b518:	d00d      	beq.n	800b536 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	685a      	ldr	r2, [r3, #4]
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	441a      	add	r2, r3
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	681a      	ldr	r2, [r3, #0]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	601a      	str	r2, [r3, #0]
 800b534:	e008      	b.n	800b548 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b536:	4b0c      	ldr	r3, [pc, #48]	; (800b568 <prvInsertBlockIntoFreeList+0xb0>)
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	601a      	str	r2, [r3, #0]
 800b53e:	e003      	b.n	800b548 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	681a      	ldr	r2, [r3, #0]
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b548:	68fa      	ldr	r2, [r7, #12]
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	429a      	cmp	r2, r3
 800b54e:	d002      	beq.n	800b556 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	687a      	ldr	r2, [r7, #4]
 800b554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b556:	bf00      	nop
 800b558:	3714      	adds	r7, #20
 800b55a:	46bd      	mov	sp, r7
 800b55c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b560:	4770      	bx	lr
 800b562:	bf00      	nop
 800b564:	20001d38 	.word	0x20001d38
 800b568:	20001d40 	.word	0x20001d40

0800b56c <__errno>:
 800b56c:	4b01      	ldr	r3, [pc, #4]	; (800b574 <__errno+0x8>)
 800b56e:	6818      	ldr	r0, [r3, #0]
 800b570:	4770      	bx	lr
 800b572:	bf00      	nop
 800b574:	20000020 	.word	0x20000020

0800b578 <__libc_init_array>:
 800b578:	b570      	push	{r4, r5, r6, lr}
 800b57a:	4d0d      	ldr	r5, [pc, #52]	; (800b5b0 <__libc_init_array+0x38>)
 800b57c:	4c0d      	ldr	r4, [pc, #52]	; (800b5b4 <__libc_init_array+0x3c>)
 800b57e:	1b64      	subs	r4, r4, r5
 800b580:	10a4      	asrs	r4, r4, #2
 800b582:	2600      	movs	r6, #0
 800b584:	42a6      	cmp	r6, r4
 800b586:	d109      	bne.n	800b59c <__libc_init_array+0x24>
 800b588:	4d0b      	ldr	r5, [pc, #44]	; (800b5b8 <__libc_init_array+0x40>)
 800b58a:	4c0c      	ldr	r4, [pc, #48]	; (800b5bc <__libc_init_array+0x44>)
 800b58c:	f001 f912 	bl	800c7b4 <_init>
 800b590:	1b64      	subs	r4, r4, r5
 800b592:	10a4      	asrs	r4, r4, #2
 800b594:	2600      	movs	r6, #0
 800b596:	42a6      	cmp	r6, r4
 800b598:	d105      	bne.n	800b5a6 <__libc_init_array+0x2e>
 800b59a:	bd70      	pop	{r4, r5, r6, pc}
 800b59c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5a0:	4798      	blx	r3
 800b5a2:	3601      	adds	r6, #1
 800b5a4:	e7ee      	b.n	800b584 <__libc_init_array+0xc>
 800b5a6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5aa:	4798      	blx	r3
 800b5ac:	3601      	adds	r6, #1
 800b5ae:	e7f2      	b.n	800b596 <__libc_init_array+0x1e>
 800b5b0:	0800cb00 	.word	0x0800cb00
 800b5b4:	0800cb00 	.word	0x0800cb00
 800b5b8:	0800cb00 	.word	0x0800cb00
 800b5bc:	0800cb04 	.word	0x0800cb04

0800b5c0 <memcpy>:
 800b5c0:	440a      	add	r2, r1
 800b5c2:	4291      	cmp	r1, r2
 800b5c4:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5c8:	d100      	bne.n	800b5cc <memcpy+0xc>
 800b5ca:	4770      	bx	lr
 800b5cc:	b510      	push	{r4, lr}
 800b5ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5d6:	4291      	cmp	r1, r2
 800b5d8:	d1f9      	bne.n	800b5ce <memcpy+0xe>
 800b5da:	bd10      	pop	{r4, pc}

0800b5dc <memset>:
 800b5dc:	4402      	add	r2, r0
 800b5de:	4603      	mov	r3, r0
 800b5e0:	4293      	cmp	r3, r2
 800b5e2:	d100      	bne.n	800b5e6 <memset+0xa>
 800b5e4:	4770      	bx	lr
 800b5e6:	f803 1b01 	strb.w	r1, [r3], #1
 800b5ea:	e7f9      	b.n	800b5e0 <memset+0x4>

0800b5ec <siprintf>:
 800b5ec:	b40e      	push	{r1, r2, r3}
 800b5ee:	b500      	push	{lr}
 800b5f0:	b09c      	sub	sp, #112	; 0x70
 800b5f2:	ab1d      	add	r3, sp, #116	; 0x74
 800b5f4:	9002      	str	r0, [sp, #8]
 800b5f6:	9006      	str	r0, [sp, #24]
 800b5f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b5fc:	4809      	ldr	r0, [pc, #36]	; (800b624 <siprintf+0x38>)
 800b5fe:	9107      	str	r1, [sp, #28]
 800b600:	9104      	str	r1, [sp, #16]
 800b602:	4909      	ldr	r1, [pc, #36]	; (800b628 <siprintf+0x3c>)
 800b604:	f853 2b04 	ldr.w	r2, [r3], #4
 800b608:	9105      	str	r1, [sp, #20]
 800b60a:	6800      	ldr	r0, [r0, #0]
 800b60c:	9301      	str	r3, [sp, #4]
 800b60e:	a902      	add	r1, sp, #8
 800b610:	f000 f896 	bl	800b740 <_svfiprintf_r>
 800b614:	9b02      	ldr	r3, [sp, #8]
 800b616:	2200      	movs	r2, #0
 800b618:	701a      	strb	r2, [r3, #0]
 800b61a:	b01c      	add	sp, #112	; 0x70
 800b61c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b620:	b003      	add	sp, #12
 800b622:	4770      	bx	lr
 800b624:	20000020 	.word	0x20000020
 800b628:	ffff0208 	.word	0xffff0208

0800b62c <siscanf>:
 800b62c:	b40e      	push	{r1, r2, r3}
 800b62e:	b510      	push	{r4, lr}
 800b630:	b09f      	sub	sp, #124	; 0x7c
 800b632:	ac21      	add	r4, sp, #132	; 0x84
 800b634:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b638:	f854 2b04 	ldr.w	r2, [r4], #4
 800b63c:	9201      	str	r2, [sp, #4]
 800b63e:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b642:	9004      	str	r0, [sp, #16]
 800b644:	9008      	str	r0, [sp, #32]
 800b646:	f7f4 fdc3 	bl	80001d0 <strlen>
 800b64a:	4b0c      	ldr	r3, [pc, #48]	; (800b67c <siscanf+0x50>)
 800b64c:	9005      	str	r0, [sp, #20]
 800b64e:	9009      	str	r0, [sp, #36]	; 0x24
 800b650:	930d      	str	r3, [sp, #52]	; 0x34
 800b652:	480b      	ldr	r0, [pc, #44]	; (800b680 <siscanf+0x54>)
 800b654:	9a01      	ldr	r2, [sp, #4]
 800b656:	6800      	ldr	r0, [r0, #0]
 800b658:	9403      	str	r4, [sp, #12]
 800b65a:	2300      	movs	r3, #0
 800b65c:	9311      	str	r3, [sp, #68]	; 0x44
 800b65e:	9316      	str	r3, [sp, #88]	; 0x58
 800b660:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b664:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b668:	a904      	add	r1, sp, #16
 800b66a:	4623      	mov	r3, r4
 800b66c:	f000 f9c2 	bl	800b9f4 <__ssvfiscanf_r>
 800b670:	b01f      	add	sp, #124	; 0x7c
 800b672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b676:	b003      	add	sp, #12
 800b678:	4770      	bx	lr
 800b67a:	bf00      	nop
 800b67c:	0800b685 	.word	0x0800b685
 800b680:	20000020 	.word	0x20000020

0800b684 <__seofread>:
 800b684:	2000      	movs	r0, #0
 800b686:	4770      	bx	lr

0800b688 <__ssputs_r>:
 800b688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b68c:	688e      	ldr	r6, [r1, #8]
 800b68e:	429e      	cmp	r6, r3
 800b690:	4682      	mov	sl, r0
 800b692:	460c      	mov	r4, r1
 800b694:	4690      	mov	r8, r2
 800b696:	461f      	mov	r7, r3
 800b698:	d838      	bhi.n	800b70c <__ssputs_r+0x84>
 800b69a:	898a      	ldrh	r2, [r1, #12]
 800b69c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b6a0:	d032      	beq.n	800b708 <__ssputs_r+0x80>
 800b6a2:	6825      	ldr	r5, [r4, #0]
 800b6a4:	6909      	ldr	r1, [r1, #16]
 800b6a6:	eba5 0901 	sub.w	r9, r5, r1
 800b6aa:	6965      	ldr	r5, [r4, #20]
 800b6ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b6b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b6b4:	3301      	adds	r3, #1
 800b6b6:	444b      	add	r3, r9
 800b6b8:	106d      	asrs	r5, r5, #1
 800b6ba:	429d      	cmp	r5, r3
 800b6bc:	bf38      	it	cc
 800b6be:	461d      	movcc	r5, r3
 800b6c0:	0553      	lsls	r3, r2, #21
 800b6c2:	d531      	bpl.n	800b728 <__ssputs_r+0xa0>
 800b6c4:	4629      	mov	r1, r5
 800b6c6:	f000 ffd1 	bl	800c66c <_malloc_r>
 800b6ca:	4606      	mov	r6, r0
 800b6cc:	b950      	cbnz	r0, 800b6e4 <__ssputs_r+0x5c>
 800b6ce:	230c      	movs	r3, #12
 800b6d0:	f8ca 3000 	str.w	r3, [sl]
 800b6d4:	89a3      	ldrh	r3, [r4, #12]
 800b6d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6da:	81a3      	strh	r3, [r4, #12]
 800b6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b6e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6e4:	6921      	ldr	r1, [r4, #16]
 800b6e6:	464a      	mov	r2, r9
 800b6e8:	f7ff ff6a 	bl	800b5c0 <memcpy>
 800b6ec:	89a3      	ldrh	r3, [r4, #12]
 800b6ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b6f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6f6:	81a3      	strh	r3, [r4, #12]
 800b6f8:	6126      	str	r6, [r4, #16]
 800b6fa:	6165      	str	r5, [r4, #20]
 800b6fc:	444e      	add	r6, r9
 800b6fe:	eba5 0509 	sub.w	r5, r5, r9
 800b702:	6026      	str	r6, [r4, #0]
 800b704:	60a5      	str	r5, [r4, #8]
 800b706:	463e      	mov	r6, r7
 800b708:	42be      	cmp	r6, r7
 800b70a:	d900      	bls.n	800b70e <__ssputs_r+0x86>
 800b70c:	463e      	mov	r6, r7
 800b70e:	4632      	mov	r2, r6
 800b710:	6820      	ldr	r0, [r4, #0]
 800b712:	4641      	mov	r1, r8
 800b714:	f000 ff40 	bl	800c598 <memmove>
 800b718:	68a3      	ldr	r3, [r4, #8]
 800b71a:	6822      	ldr	r2, [r4, #0]
 800b71c:	1b9b      	subs	r3, r3, r6
 800b71e:	4432      	add	r2, r6
 800b720:	60a3      	str	r3, [r4, #8]
 800b722:	6022      	str	r2, [r4, #0]
 800b724:	2000      	movs	r0, #0
 800b726:	e7db      	b.n	800b6e0 <__ssputs_r+0x58>
 800b728:	462a      	mov	r2, r5
 800b72a:	f000 fff9 	bl	800c720 <_realloc_r>
 800b72e:	4606      	mov	r6, r0
 800b730:	2800      	cmp	r0, #0
 800b732:	d1e1      	bne.n	800b6f8 <__ssputs_r+0x70>
 800b734:	6921      	ldr	r1, [r4, #16]
 800b736:	4650      	mov	r0, sl
 800b738:	f000 ff48 	bl	800c5cc <_free_r>
 800b73c:	e7c7      	b.n	800b6ce <__ssputs_r+0x46>
	...

0800b740 <_svfiprintf_r>:
 800b740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b744:	4698      	mov	r8, r3
 800b746:	898b      	ldrh	r3, [r1, #12]
 800b748:	061b      	lsls	r3, r3, #24
 800b74a:	b09d      	sub	sp, #116	; 0x74
 800b74c:	4607      	mov	r7, r0
 800b74e:	460d      	mov	r5, r1
 800b750:	4614      	mov	r4, r2
 800b752:	d50e      	bpl.n	800b772 <_svfiprintf_r+0x32>
 800b754:	690b      	ldr	r3, [r1, #16]
 800b756:	b963      	cbnz	r3, 800b772 <_svfiprintf_r+0x32>
 800b758:	2140      	movs	r1, #64	; 0x40
 800b75a:	f000 ff87 	bl	800c66c <_malloc_r>
 800b75e:	6028      	str	r0, [r5, #0]
 800b760:	6128      	str	r0, [r5, #16]
 800b762:	b920      	cbnz	r0, 800b76e <_svfiprintf_r+0x2e>
 800b764:	230c      	movs	r3, #12
 800b766:	603b      	str	r3, [r7, #0]
 800b768:	f04f 30ff 	mov.w	r0, #4294967295
 800b76c:	e0d1      	b.n	800b912 <_svfiprintf_r+0x1d2>
 800b76e:	2340      	movs	r3, #64	; 0x40
 800b770:	616b      	str	r3, [r5, #20]
 800b772:	2300      	movs	r3, #0
 800b774:	9309      	str	r3, [sp, #36]	; 0x24
 800b776:	2320      	movs	r3, #32
 800b778:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b77c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b780:	2330      	movs	r3, #48	; 0x30
 800b782:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b92c <_svfiprintf_r+0x1ec>
 800b786:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b78a:	f04f 0901 	mov.w	r9, #1
 800b78e:	4623      	mov	r3, r4
 800b790:	469a      	mov	sl, r3
 800b792:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b796:	b10a      	cbz	r2, 800b79c <_svfiprintf_r+0x5c>
 800b798:	2a25      	cmp	r2, #37	; 0x25
 800b79a:	d1f9      	bne.n	800b790 <_svfiprintf_r+0x50>
 800b79c:	ebba 0b04 	subs.w	fp, sl, r4
 800b7a0:	d00b      	beq.n	800b7ba <_svfiprintf_r+0x7a>
 800b7a2:	465b      	mov	r3, fp
 800b7a4:	4622      	mov	r2, r4
 800b7a6:	4629      	mov	r1, r5
 800b7a8:	4638      	mov	r0, r7
 800b7aa:	f7ff ff6d 	bl	800b688 <__ssputs_r>
 800b7ae:	3001      	adds	r0, #1
 800b7b0:	f000 80aa 	beq.w	800b908 <_svfiprintf_r+0x1c8>
 800b7b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b7b6:	445a      	add	r2, fp
 800b7b8:	9209      	str	r2, [sp, #36]	; 0x24
 800b7ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	f000 80a2 	beq.w	800b908 <_svfiprintf_r+0x1c8>
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	f04f 32ff 	mov.w	r2, #4294967295
 800b7ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b7ce:	f10a 0a01 	add.w	sl, sl, #1
 800b7d2:	9304      	str	r3, [sp, #16]
 800b7d4:	9307      	str	r3, [sp, #28]
 800b7d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b7da:	931a      	str	r3, [sp, #104]	; 0x68
 800b7dc:	4654      	mov	r4, sl
 800b7de:	2205      	movs	r2, #5
 800b7e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b7e4:	4851      	ldr	r0, [pc, #324]	; (800b92c <_svfiprintf_r+0x1ec>)
 800b7e6:	f7f4 fcfb 	bl	80001e0 <memchr>
 800b7ea:	9a04      	ldr	r2, [sp, #16]
 800b7ec:	b9d8      	cbnz	r0, 800b826 <_svfiprintf_r+0xe6>
 800b7ee:	06d0      	lsls	r0, r2, #27
 800b7f0:	bf44      	itt	mi
 800b7f2:	2320      	movmi	r3, #32
 800b7f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b7f8:	0711      	lsls	r1, r2, #28
 800b7fa:	bf44      	itt	mi
 800b7fc:	232b      	movmi	r3, #43	; 0x2b
 800b7fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b802:	f89a 3000 	ldrb.w	r3, [sl]
 800b806:	2b2a      	cmp	r3, #42	; 0x2a
 800b808:	d015      	beq.n	800b836 <_svfiprintf_r+0xf6>
 800b80a:	9a07      	ldr	r2, [sp, #28]
 800b80c:	4654      	mov	r4, sl
 800b80e:	2000      	movs	r0, #0
 800b810:	f04f 0c0a 	mov.w	ip, #10
 800b814:	4621      	mov	r1, r4
 800b816:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b81a:	3b30      	subs	r3, #48	; 0x30
 800b81c:	2b09      	cmp	r3, #9
 800b81e:	d94e      	bls.n	800b8be <_svfiprintf_r+0x17e>
 800b820:	b1b0      	cbz	r0, 800b850 <_svfiprintf_r+0x110>
 800b822:	9207      	str	r2, [sp, #28]
 800b824:	e014      	b.n	800b850 <_svfiprintf_r+0x110>
 800b826:	eba0 0308 	sub.w	r3, r0, r8
 800b82a:	fa09 f303 	lsl.w	r3, r9, r3
 800b82e:	4313      	orrs	r3, r2
 800b830:	9304      	str	r3, [sp, #16]
 800b832:	46a2      	mov	sl, r4
 800b834:	e7d2      	b.n	800b7dc <_svfiprintf_r+0x9c>
 800b836:	9b03      	ldr	r3, [sp, #12]
 800b838:	1d19      	adds	r1, r3, #4
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	9103      	str	r1, [sp, #12]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	bfbb      	ittet	lt
 800b842:	425b      	neglt	r3, r3
 800b844:	f042 0202 	orrlt.w	r2, r2, #2
 800b848:	9307      	strge	r3, [sp, #28]
 800b84a:	9307      	strlt	r3, [sp, #28]
 800b84c:	bfb8      	it	lt
 800b84e:	9204      	strlt	r2, [sp, #16]
 800b850:	7823      	ldrb	r3, [r4, #0]
 800b852:	2b2e      	cmp	r3, #46	; 0x2e
 800b854:	d10c      	bne.n	800b870 <_svfiprintf_r+0x130>
 800b856:	7863      	ldrb	r3, [r4, #1]
 800b858:	2b2a      	cmp	r3, #42	; 0x2a
 800b85a:	d135      	bne.n	800b8c8 <_svfiprintf_r+0x188>
 800b85c:	9b03      	ldr	r3, [sp, #12]
 800b85e:	1d1a      	adds	r2, r3, #4
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	9203      	str	r2, [sp, #12]
 800b864:	2b00      	cmp	r3, #0
 800b866:	bfb8      	it	lt
 800b868:	f04f 33ff 	movlt.w	r3, #4294967295
 800b86c:	3402      	adds	r4, #2
 800b86e:	9305      	str	r3, [sp, #20]
 800b870:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b93c <_svfiprintf_r+0x1fc>
 800b874:	7821      	ldrb	r1, [r4, #0]
 800b876:	2203      	movs	r2, #3
 800b878:	4650      	mov	r0, sl
 800b87a:	f7f4 fcb1 	bl	80001e0 <memchr>
 800b87e:	b140      	cbz	r0, 800b892 <_svfiprintf_r+0x152>
 800b880:	2340      	movs	r3, #64	; 0x40
 800b882:	eba0 000a 	sub.w	r0, r0, sl
 800b886:	fa03 f000 	lsl.w	r0, r3, r0
 800b88a:	9b04      	ldr	r3, [sp, #16]
 800b88c:	4303      	orrs	r3, r0
 800b88e:	3401      	adds	r4, #1
 800b890:	9304      	str	r3, [sp, #16]
 800b892:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b896:	4826      	ldr	r0, [pc, #152]	; (800b930 <_svfiprintf_r+0x1f0>)
 800b898:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b89c:	2206      	movs	r2, #6
 800b89e:	f7f4 fc9f 	bl	80001e0 <memchr>
 800b8a2:	2800      	cmp	r0, #0
 800b8a4:	d038      	beq.n	800b918 <_svfiprintf_r+0x1d8>
 800b8a6:	4b23      	ldr	r3, [pc, #140]	; (800b934 <_svfiprintf_r+0x1f4>)
 800b8a8:	bb1b      	cbnz	r3, 800b8f2 <_svfiprintf_r+0x1b2>
 800b8aa:	9b03      	ldr	r3, [sp, #12]
 800b8ac:	3307      	adds	r3, #7
 800b8ae:	f023 0307 	bic.w	r3, r3, #7
 800b8b2:	3308      	adds	r3, #8
 800b8b4:	9303      	str	r3, [sp, #12]
 800b8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8b8:	4433      	add	r3, r6
 800b8ba:	9309      	str	r3, [sp, #36]	; 0x24
 800b8bc:	e767      	b.n	800b78e <_svfiprintf_r+0x4e>
 800b8be:	fb0c 3202 	mla	r2, ip, r2, r3
 800b8c2:	460c      	mov	r4, r1
 800b8c4:	2001      	movs	r0, #1
 800b8c6:	e7a5      	b.n	800b814 <_svfiprintf_r+0xd4>
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	3401      	adds	r4, #1
 800b8cc:	9305      	str	r3, [sp, #20]
 800b8ce:	4619      	mov	r1, r3
 800b8d0:	f04f 0c0a 	mov.w	ip, #10
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b8da:	3a30      	subs	r2, #48	; 0x30
 800b8dc:	2a09      	cmp	r2, #9
 800b8de:	d903      	bls.n	800b8e8 <_svfiprintf_r+0x1a8>
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d0c5      	beq.n	800b870 <_svfiprintf_r+0x130>
 800b8e4:	9105      	str	r1, [sp, #20]
 800b8e6:	e7c3      	b.n	800b870 <_svfiprintf_r+0x130>
 800b8e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	2301      	movs	r3, #1
 800b8f0:	e7f0      	b.n	800b8d4 <_svfiprintf_r+0x194>
 800b8f2:	ab03      	add	r3, sp, #12
 800b8f4:	9300      	str	r3, [sp, #0]
 800b8f6:	462a      	mov	r2, r5
 800b8f8:	4b0f      	ldr	r3, [pc, #60]	; (800b938 <_svfiprintf_r+0x1f8>)
 800b8fa:	a904      	add	r1, sp, #16
 800b8fc:	4638      	mov	r0, r7
 800b8fe:	f3af 8000 	nop.w
 800b902:	1c42      	adds	r2, r0, #1
 800b904:	4606      	mov	r6, r0
 800b906:	d1d6      	bne.n	800b8b6 <_svfiprintf_r+0x176>
 800b908:	89ab      	ldrh	r3, [r5, #12]
 800b90a:	065b      	lsls	r3, r3, #25
 800b90c:	f53f af2c 	bmi.w	800b768 <_svfiprintf_r+0x28>
 800b910:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b912:	b01d      	add	sp, #116	; 0x74
 800b914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b918:	ab03      	add	r3, sp, #12
 800b91a:	9300      	str	r3, [sp, #0]
 800b91c:	462a      	mov	r2, r5
 800b91e:	4b06      	ldr	r3, [pc, #24]	; (800b938 <_svfiprintf_r+0x1f8>)
 800b920:	a904      	add	r1, sp, #16
 800b922:	4638      	mov	r0, r7
 800b924:	f000 fa4c 	bl	800bdc0 <_printf_i>
 800b928:	e7eb      	b.n	800b902 <_svfiprintf_r+0x1c2>
 800b92a:	bf00      	nop
 800b92c:	0800c948 	.word	0x0800c948
 800b930:	0800c952 	.word	0x0800c952
 800b934:	00000000 	.word	0x00000000
 800b938:	0800b689 	.word	0x0800b689
 800b93c:	0800c94e 	.word	0x0800c94e

0800b940 <_sungetc_r>:
 800b940:	b538      	push	{r3, r4, r5, lr}
 800b942:	1c4b      	adds	r3, r1, #1
 800b944:	4614      	mov	r4, r2
 800b946:	d103      	bne.n	800b950 <_sungetc_r+0x10>
 800b948:	f04f 35ff 	mov.w	r5, #4294967295
 800b94c:	4628      	mov	r0, r5
 800b94e:	bd38      	pop	{r3, r4, r5, pc}
 800b950:	8993      	ldrh	r3, [r2, #12]
 800b952:	f023 0320 	bic.w	r3, r3, #32
 800b956:	8193      	strh	r3, [r2, #12]
 800b958:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b95a:	6852      	ldr	r2, [r2, #4]
 800b95c:	b2cd      	uxtb	r5, r1
 800b95e:	b18b      	cbz	r3, 800b984 <_sungetc_r+0x44>
 800b960:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b962:	4293      	cmp	r3, r2
 800b964:	dd08      	ble.n	800b978 <_sungetc_r+0x38>
 800b966:	6823      	ldr	r3, [r4, #0]
 800b968:	1e5a      	subs	r2, r3, #1
 800b96a:	6022      	str	r2, [r4, #0]
 800b96c:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b970:	6863      	ldr	r3, [r4, #4]
 800b972:	3301      	adds	r3, #1
 800b974:	6063      	str	r3, [r4, #4]
 800b976:	e7e9      	b.n	800b94c <_sungetc_r+0xc>
 800b978:	4621      	mov	r1, r4
 800b97a:	f000 fdd1 	bl	800c520 <__submore>
 800b97e:	2800      	cmp	r0, #0
 800b980:	d0f1      	beq.n	800b966 <_sungetc_r+0x26>
 800b982:	e7e1      	b.n	800b948 <_sungetc_r+0x8>
 800b984:	6921      	ldr	r1, [r4, #16]
 800b986:	6823      	ldr	r3, [r4, #0]
 800b988:	b151      	cbz	r1, 800b9a0 <_sungetc_r+0x60>
 800b98a:	4299      	cmp	r1, r3
 800b98c:	d208      	bcs.n	800b9a0 <_sungetc_r+0x60>
 800b98e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b992:	42a9      	cmp	r1, r5
 800b994:	d104      	bne.n	800b9a0 <_sungetc_r+0x60>
 800b996:	3b01      	subs	r3, #1
 800b998:	3201      	adds	r2, #1
 800b99a:	6023      	str	r3, [r4, #0]
 800b99c:	6062      	str	r2, [r4, #4]
 800b99e:	e7d5      	b.n	800b94c <_sungetc_r+0xc>
 800b9a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b9a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9a8:	6363      	str	r3, [r4, #52]	; 0x34
 800b9aa:	2303      	movs	r3, #3
 800b9ac:	63a3      	str	r3, [r4, #56]	; 0x38
 800b9ae:	4623      	mov	r3, r4
 800b9b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b9b4:	6023      	str	r3, [r4, #0]
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	e7dc      	b.n	800b974 <_sungetc_r+0x34>

0800b9ba <__ssrefill_r>:
 800b9ba:	b510      	push	{r4, lr}
 800b9bc:	460c      	mov	r4, r1
 800b9be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b9c0:	b169      	cbz	r1, 800b9de <__ssrefill_r+0x24>
 800b9c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9c6:	4299      	cmp	r1, r3
 800b9c8:	d001      	beq.n	800b9ce <__ssrefill_r+0x14>
 800b9ca:	f000 fdff 	bl	800c5cc <_free_r>
 800b9ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9d0:	6063      	str	r3, [r4, #4]
 800b9d2:	2000      	movs	r0, #0
 800b9d4:	6360      	str	r0, [r4, #52]	; 0x34
 800b9d6:	b113      	cbz	r3, 800b9de <__ssrefill_r+0x24>
 800b9d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b9da:	6023      	str	r3, [r4, #0]
 800b9dc:	bd10      	pop	{r4, pc}
 800b9de:	6923      	ldr	r3, [r4, #16]
 800b9e0:	6023      	str	r3, [r4, #0]
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	6063      	str	r3, [r4, #4]
 800b9e6:	89a3      	ldrh	r3, [r4, #12]
 800b9e8:	f043 0320 	orr.w	r3, r3, #32
 800b9ec:	81a3      	strh	r3, [r4, #12]
 800b9ee:	f04f 30ff 	mov.w	r0, #4294967295
 800b9f2:	e7f3      	b.n	800b9dc <__ssrefill_r+0x22>

0800b9f4 <__ssvfiscanf_r>:
 800b9f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9f8:	460c      	mov	r4, r1
 800b9fa:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b9fe:	2100      	movs	r1, #0
 800ba00:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800ba04:	49b2      	ldr	r1, [pc, #712]	; (800bcd0 <__ssvfiscanf_r+0x2dc>)
 800ba06:	91a0      	str	r1, [sp, #640]	; 0x280
 800ba08:	f10d 0804 	add.w	r8, sp, #4
 800ba0c:	49b1      	ldr	r1, [pc, #708]	; (800bcd4 <__ssvfiscanf_r+0x2e0>)
 800ba0e:	4fb2      	ldr	r7, [pc, #712]	; (800bcd8 <__ssvfiscanf_r+0x2e4>)
 800ba10:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800bcdc <__ssvfiscanf_r+0x2e8>
 800ba14:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800ba18:	4606      	mov	r6, r0
 800ba1a:	91a1      	str	r1, [sp, #644]	; 0x284
 800ba1c:	9300      	str	r3, [sp, #0]
 800ba1e:	f892 a000 	ldrb.w	sl, [r2]
 800ba22:	f1ba 0f00 	cmp.w	sl, #0
 800ba26:	f000 8151 	beq.w	800bccc <__ssvfiscanf_r+0x2d8>
 800ba2a:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800ba2e:	f013 0308 	ands.w	r3, r3, #8
 800ba32:	f102 0501 	add.w	r5, r2, #1
 800ba36:	d019      	beq.n	800ba6c <__ssvfiscanf_r+0x78>
 800ba38:	6863      	ldr	r3, [r4, #4]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	dd0f      	ble.n	800ba5e <__ssvfiscanf_r+0x6a>
 800ba3e:	6823      	ldr	r3, [r4, #0]
 800ba40:	781a      	ldrb	r2, [r3, #0]
 800ba42:	5cba      	ldrb	r2, [r7, r2]
 800ba44:	0712      	lsls	r2, r2, #28
 800ba46:	d401      	bmi.n	800ba4c <__ssvfiscanf_r+0x58>
 800ba48:	462a      	mov	r2, r5
 800ba4a:	e7e8      	b.n	800ba1e <__ssvfiscanf_r+0x2a>
 800ba4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800ba4e:	3201      	adds	r2, #1
 800ba50:	9245      	str	r2, [sp, #276]	; 0x114
 800ba52:	6862      	ldr	r2, [r4, #4]
 800ba54:	3301      	adds	r3, #1
 800ba56:	3a01      	subs	r2, #1
 800ba58:	6062      	str	r2, [r4, #4]
 800ba5a:	6023      	str	r3, [r4, #0]
 800ba5c:	e7ec      	b.n	800ba38 <__ssvfiscanf_r+0x44>
 800ba5e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800ba60:	4621      	mov	r1, r4
 800ba62:	4630      	mov	r0, r6
 800ba64:	4798      	blx	r3
 800ba66:	2800      	cmp	r0, #0
 800ba68:	d0e9      	beq.n	800ba3e <__ssvfiscanf_r+0x4a>
 800ba6a:	e7ed      	b.n	800ba48 <__ssvfiscanf_r+0x54>
 800ba6c:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800ba70:	f040 8083 	bne.w	800bb7a <__ssvfiscanf_r+0x186>
 800ba74:	9341      	str	r3, [sp, #260]	; 0x104
 800ba76:	9343      	str	r3, [sp, #268]	; 0x10c
 800ba78:	7853      	ldrb	r3, [r2, #1]
 800ba7a:	2b2a      	cmp	r3, #42	; 0x2a
 800ba7c:	bf02      	ittt	eq
 800ba7e:	2310      	moveq	r3, #16
 800ba80:	1c95      	addeq	r5, r2, #2
 800ba82:	9341      	streq	r3, [sp, #260]	; 0x104
 800ba84:	220a      	movs	r2, #10
 800ba86:	46ab      	mov	fp, r5
 800ba88:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800ba8c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800ba90:	2b09      	cmp	r3, #9
 800ba92:	d91d      	bls.n	800bad0 <__ssvfiscanf_r+0xdc>
 800ba94:	4891      	ldr	r0, [pc, #580]	; (800bcdc <__ssvfiscanf_r+0x2e8>)
 800ba96:	2203      	movs	r2, #3
 800ba98:	f7f4 fba2 	bl	80001e0 <memchr>
 800ba9c:	b140      	cbz	r0, 800bab0 <__ssvfiscanf_r+0xbc>
 800ba9e:	2301      	movs	r3, #1
 800baa0:	eba0 0009 	sub.w	r0, r0, r9
 800baa4:	fa03 f000 	lsl.w	r0, r3, r0
 800baa8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800baaa:	4318      	orrs	r0, r3
 800baac:	9041      	str	r0, [sp, #260]	; 0x104
 800baae:	465d      	mov	r5, fp
 800bab0:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bab4:	2b78      	cmp	r3, #120	; 0x78
 800bab6:	d806      	bhi.n	800bac6 <__ssvfiscanf_r+0xd2>
 800bab8:	2b57      	cmp	r3, #87	; 0x57
 800baba:	d810      	bhi.n	800bade <__ssvfiscanf_r+0xea>
 800babc:	2b25      	cmp	r3, #37	; 0x25
 800babe:	d05c      	beq.n	800bb7a <__ssvfiscanf_r+0x186>
 800bac0:	d856      	bhi.n	800bb70 <__ssvfiscanf_r+0x17c>
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d074      	beq.n	800bbb0 <__ssvfiscanf_r+0x1bc>
 800bac6:	2303      	movs	r3, #3
 800bac8:	9347      	str	r3, [sp, #284]	; 0x11c
 800baca:	230a      	movs	r3, #10
 800bacc:	9342      	str	r3, [sp, #264]	; 0x108
 800bace:	e081      	b.n	800bbd4 <__ssvfiscanf_r+0x1e0>
 800bad0:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bad2:	fb02 1303 	mla	r3, r2, r3, r1
 800bad6:	3b30      	subs	r3, #48	; 0x30
 800bad8:	9343      	str	r3, [sp, #268]	; 0x10c
 800bada:	465d      	mov	r5, fp
 800badc:	e7d3      	b.n	800ba86 <__ssvfiscanf_r+0x92>
 800bade:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bae2:	2a20      	cmp	r2, #32
 800bae4:	d8ef      	bhi.n	800bac6 <__ssvfiscanf_r+0xd2>
 800bae6:	a101      	add	r1, pc, #4	; (adr r1, 800baec <__ssvfiscanf_r+0xf8>)
 800bae8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800baec:	0800bbbf 	.word	0x0800bbbf
 800baf0:	0800bac7 	.word	0x0800bac7
 800baf4:	0800bac7 	.word	0x0800bac7
 800baf8:	0800bc1d 	.word	0x0800bc1d
 800bafc:	0800bac7 	.word	0x0800bac7
 800bb00:	0800bac7 	.word	0x0800bac7
 800bb04:	0800bac7 	.word	0x0800bac7
 800bb08:	0800bac7 	.word	0x0800bac7
 800bb0c:	0800bac7 	.word	0x0800bac7
 800bb10:	0800bac7 	.word	0x0800bac7
 800bb14:	0800bac7 	.word	0x0800bac7
 800bb18:	0800bc33 	.word	0x0800bc33
 800bb1c:	0800bc09 	.word	0x0800bc09
 800bb20:	0800bb77 	.word	0x0800bb77
 800bb24:	0800bb77 	.word	0x0800bb77
 800bb28:	0800bb77 	.word	0x0800bb77
 800bb2c:	0800bac7 	.word	0x0800bac7
 800bb30:	0800bc0d 	.word	0x0800bc0d
 800bb34:	0800bac7 	.word	0x0800bac7
 800bb38:	0800bac7 	.word	0x0800bac7
 800bb3c:	0800bac7 	.word	0x0800bac7
 800bb40:	0800bac7 	.word	0x0800bac7
 800bb44:	0800bc43 	.word	0x0800bc43
 800bb48:	0800bc15 	.word	0x0800bc15
 800bb4c:	0800bbb7 	.word	0x0800bbb7
 800bb50:	0800bac7 	.word	0x0800bac7
 800bb54:	0800bac7 	.word	0x0800bac7
 800bb58:	0800bc3f 	.word	0x0800bc3f
 800bb5c:	0800bac7 	.word	0x0800bac7
 800bb60:	0800bc09 	.word	0x0800bc09
 800bb64:	0800bac7 	.word	0x0800bac7
 800bb68:	0800bac7 	.word	0x0800bac7
 800bb6c:	0800bbbf 	.word	0x0800bbbf
 800bb70:	3b45      	subs	r3, #69	; 0x45
 800bb72:	2b02      	cmp	r3, #2
 800bb74:	d8a7      	bhi.n	800bac6 <__ssvfiscanf_r+0xd2>
 800bb76:	2305      	movs	r3, #5
 800bb78:	e02b      	b.n	800bbd2 <__ssvfiscanf_r+0x1de>
 800bb7a:	6863      	ldr	r3, [r4, #4]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	dd0d      	ble.n	800bb9c <__ssvfiscanf_r+0x1a8>
 800bb80:	6823      	ldr	r3, [r4, #0]
 800bb82:	781a      	ldrb	r2, [r3, #0]
 800bb84:	4552      	cmp	r2, sl
 800bb86:	f040 80a1 	bne.w	800bccc <__ssvfiscanf_r+0x2d8>
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	6862      	ldr	r2, [r4, #4]
 800bb8e:	6023      	str	r3, [r4, #0]
 800bb90:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bb92:	3a01      	subs	r2, #1
 800bb94:	3301      	adds	r3, #1
 800bb96:	6062      	str	r2, [r4, #4]
 800bb98:	9345      	str	r3, [sp, #276]	; 0x114
 800bb9a:	e755      	b.n	800ba48 <__ssvfiscanf_r+0x54>
 800bb9c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bb9e:	4621      	mov	r1, r4
 800bba0:	4630      	mov	r0, r6
 800bba2:	4798      	blx	r3
 800bba4:	2800      	cmp	r0, #0
 800bba6:	d0eb      	beq.n	800bb80 <__ssvfiscanf_r+0x18c>
 800bba8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bbaa:	2800      	cmp	r0, #0
 800bbac:	f040 8084 	bne.w	800bcb8 <__ssvfiscanf_r+0x2c4>
 800bbb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb4:	e086      	b.n	800bcc4 <__ssvfiscanf_r+0x2d0>
 800bbb6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bbb8:	f042 0220 	orr.w	r2, r2, #32
 800bbbc:	9241      	str	r2, [sp, #260]	; 0x104
 800bbbe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bbc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bbc4:	9241      	str	r2, [sp, #260]	; 0x104
 800bbc6:	2210      	movs	r2, #16
 800bbc8:	2b6f      	cmp	r3, #111	; 0x6f
 800bbca:	9242      	str	r2, [sp, #264]	; 0x108
 800bbcc:	bf34      	ite	cc
 800bbce:	2303      	movcc	r3, #3
 800bbd0:	2304      	movcs	r3, #4
 800bbd2:	9347      	str	r3, [sp, #284]	; 0x11c
 800bbd4:	6863      	ldr	r3, [r4, #4]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	dd41      	ble.n	800bc5e <__ssvfiscanf_r+0x26a>
 800bbda:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bbdc:	0659      	lsls	r1, r3, #25
 800bbde:	d404      	bmi.n	800bbea <__ssvfiscanf_r+0x1f6>
 800bbe0:	6823      	ldr	r3, [r4, #0]
 800bbe2:	781a      	ldrb	r2, [r3, #0]
 800bbe4:	5cba      	ldrb	r2, [r7, r2]
 800bbe6:	0712      	lsls	r2, r2, #28
 800bbe8:	d440      	bmi.n	800bc6c <__ssvfiscanf_r+0x278>
 800bbea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bbec:	2b02      	cmp	r3, #2
 800bbee:	dc4f      	bgt.n	800bc90 <__ssvfiscanf_r+0x29c>
 800bbf0:	466b      	mov	r3, sp
 800bbf2:	4622      	mov	r2, r4
 800bbf4:	a941      	add	r1, sp, #260	; 0x104
 800bbf6:	4630      	mov	r0, r6
 800bbf8:	f000 fa08 	bl	800c00c <_scanf_chars>
 800bbfc:	2801      	cmp	r0, #1
 800bbfe:	d065      	beq.n	800bccc <__ssvfiscanf_r+0x2d8>
 800bc00:	2802      	cmp	r0, #2
 800bc02:	f47f af21 	bne.w	800ba48 <__ssvfiscanf_r+0x54>
 800bc06:	e7cf      	b.n	800bba8 <__ssvfiscanf_r+0x1b4>
 800bc08:	220a      	movs	r2, #10
 800bc0a:	e7dd      	b.n	800bbc8 <__ssvfiscanf_r+0x1d4>
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	9342      	str	r3, [sp, #264]	; 0x108
 800bc10:	2303      	movs	r3, #3
 800bc12:	e7de      	b.n	800bbd2 <__ssvfiscanf_r+0x1de>
 800bc14:	2308      	movs	r3, #8
 800bc16:	9342      	str	r3, [sp, #264]	; 0x108
 800bc18:	2304      	movs	r3, #4
 800bc1a:	e7da      	b.n	800bbd2 <__ssvfiscanf_r+0x1de>
 800bc1c:	4629      	mov	r1, r5
 800bc1e:	4640      	mov	r0, r8
 800bc20:	f000 fb40 	bl	800c2a4 <__sccl>
 800bc24:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bc26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc2a:	9341      	str	r3, [sp, #260]	; 0x104
 800bc2c:	4605      	mov	r5, r0
 800bc2e:	2301      	movs	r3, #1
 800bc30:	e7cf      	b.n	800bbd2 <__ssvfiscanf_r+0x1de>
 800bc32:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bc34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bc38:	9341      	str	r3, [sp, #260]	; 0x104
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	e7c9      	b.n	800bbd2 <__ssvfiscanf_r+0x1de>
 800bc3e:	2302      	movs	r3, #2
 800bc40:	e7c7      	b.n	800bbd2 <__ssvfiscanf_r+0x1de>
 800bc42:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bc44:	06c3      	lsls	r3, r0, #27
 800bc46:	f53f aeff 	bmi.w	800ba48 <__ssvfiscanf_r+0x54>
 800bc4a:	9b00      	ldr	r3, [sp, #0]
 800bc4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bc4e:	1d19      	adds	r1, r3, #4
 800bc50:	9100      	str	r1, [sp, #0]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	07c0      	lsls	r0, r0, #31
 800bc56:	bf4c      	ite	mi
 800bc58:	801a      	strhmi	r2, [r3, #0]
 800bc5a:	601a      	strpl	r2, [r3, #0]
 800bc5c:	e6f4      	b.n	800ba48 <__ssvfiscanf_r+0x54>
 800bc5e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc60:	4621      	mov	r1, r4
 800bc62:	4630      	mov	r0, r6
 800bc64:	4798      	blx	r3
 800bc66:	2800      	cmp	r0, #0
 800bc68:	d0b7      	beq.n	800bbda <__ssvfiscanf_r+0x1e6>
 800bc6a:	e79d      	b.n	800bba8 <__ssvfiscanf_r+0x1b4>
 800bc6c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bc6e:	3201      	adds	r2, #1
 800bc70:	9245      	str	r2, [sp, #276]	; 0x114
 800bc72:	6862      	ldr	r2, [r4, #4]
 800bc74:	3a01      	subs	r2, #1
 800bc76:	2a00      	cmp	r2, #0
 800bc78:	6062      	str	r2, [r4, #4]
 800bc7a:	dd02      	ble.n	800bc82 <__ssvfiscanf_r+0x28e>
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	6023      	str	r3, [r4, #0]
 800bc80:	e7ae      	b.n	800bbe0 <__ssvfiscanf_r+0x1ec>
 800bc82:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc84:	4621      	mov	r1, r4
 800bc86:	4630      	mov	r0, r6
 800bc88:	4798      	blx	r3
 800bc8a:	2800      	cmp	r0, #0
 800bc8c:	d0a8      	beq.n	800bbe0 <__ssvfiscanf_r+0x1ec>
 800bc8e:	e78b      	b.n	800bba8 <__ssvfiscanf_r+0x1b4>
 800bc90:	2b04      	cmp	r3, #4
 800bc92:	dc06      	bgt.n	800bca2 <__ssvfiscanf_r+0x2ae>
 800bc94:	466b      	mov	r3, sp
 800bc96:	4622      	mov	r2, r4
 800bc98:	a941      	add	r1, sp, #260	; 0x104
 800bc9a:	4630      	mov	r0, r6
 800bc9c:	f000 fa0e 	bl	800c0bc <_scanf_i>
 800bca0:	e7ac      	b.n	800bbfc <__ssvfiscanf_r+0x208>
 800bca2:	4b0f      	ldr	r3, [pc, #60]	; (800bce0 <__ssvfiscanf_r+0x2ec>)
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	f43f aecf 	beq.w	800ba48 <__ssvfiscanf_r+0x54>
 800bcaa:	466b      	mov	r3, sp
 800bcac:	4622      	mov	r2, r4
 800bcae:	a941      	add	r1, sp, #260	; 0x104
 800bcb0:	4630      	mov	r0, r6
 800bcb2:	f3af 8000 	nop.w
 800bcb6:	e7a1      	b.n	800bbfc <__ssvfiscanf_r+0x208>
 800bcb8:	89a3      	ldrh	r3, [r4, #12]
 800bcba:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bcbe:	bf18      	it	ne
 800bcc0:	f04f 30ff 	movne.w	r0, #4294967295
 800bcc4:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800bcc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bccc:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bcce:	e7f9      	b.n	800bcc4 <__ssvfiscanf_r+0x2d0>
 800bcd0:	0800b941 	.word	0x0800b941
 800bcd4:	0800b9bb 	.word	0x0800b9bb
 800bcd8:	0800c997 	.word	0x0800c997
 800bcdc:	0800c94e 	.word	0x0800c94e
 800bce0:	00000000 	.word	0x00000000

0800bce4 <_printf_common>:
 800bce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bce8:	4616      	mov	r6, r2
 800bcea:	4699      	mov	r9, r3
 800bcec:	688a      	ldr	r2, [r1, #8]
 800bcee:	690b      	ldr	r3, [r1, #16]
 800bcf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bcf4:	4293      	cmp	r3, r2
 800bcf6:	bfb8      	it	lt
 800bcf8:	4613      	movlt	r3, r2
 800bcfa:	6033      	str	r3, [r6, #0]
 800bcfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd00:	4607      	mov	r7, r0
 800bd02:	460c      	mov	r4, r1
 800bd04:	b10a      	cbz	r2, 800bd0a <_printf_common+0x26>
 800bd06:	3301      	adds	r3, #1
 800bd08:	6033      	str	r3, [r6, #0]
 800bd0a:	6823      	ldr	r3, [r4, #0]
 800bd0c:	0699      	lsls	r1, r3, #26
 800bd0e:	bf42      	ittt	mi
 800bd10:	6833      	ldrmi	r3, [r6, #0]
 800bd12:	3302      	addmi	r3, #2
 800bd14:	6033      	strmi	r3, [r6, #0]
 800bd16:	6825      	ldr	r5, [r4, #0]
 800bd18:	f015 0506 	ands.w	r5, r5, #6
 800bd1c:	d106      	bne.n	800bd2c <_printf_common+0x48>
 800bd1e:	f104 0a19 	add.w	sl, r4, #25
 800bd22:	68e3      	ldr	r3, [r4, #12]
 800bd24:	6832      	ldr	r2, [r6, #0]
 800bd26:	1a9b      	subs	r3, r3, r2
 800bd28:	42ab      	cmp	r3, r5
 800bd2a:	dc26      	bgt.n	800bd7a <_printf_common+0x96>
 800bd2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bd30:	1e13      	subs	r3, r2, #0
 800bd32:	6822      	ldr	r2, [r4, #0]
 800bd34:	bf18      	it	ne
 800bd36:	2301      	movne	r3, #1
 800bd38:	0692      	lsls	r2, r2, #26
 800bd3a:	d42b      	bmi.n	800bd94 <_printf_common+0xb0>
 800bd3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bd40:	4649      	mov	r1, r9
 800bd42:	4638      	mov	r0, r7
 800bd44:	47c0      	blx	r8
 800bd46:	3001      	adds	r0, #1
 800bd48:	d01e      	beq.n	800bd88 <_printf_common+0xa4>
 800bd4a:	6823      	ldr	r3, [r4, #0]
 800bd4c:	68e5      	ldr	r5, [r4, #12]
 800bd4e:	6832      	ldr	r2, [r6, #0]
 800bd50:	f003 0306 	and.w	r3, r3, #6
 800bd54:	2b04      	cmp	r3, #4
 800bd56:	bf08      	it	eq
 800bd58:	1aad      	subeq	r5, r5, r2
 800bd5a:	68a3      	ldr	r3, [r4, #8]
 800bd5c:	6922      	ldr	r2, [r4, #16]
 800bd5e:	bf0c      	ite	eq
 800bd60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bd64:	2500      	movne	r5, #0
 800bd66:	4293      	cmp	r3, r2
 800bd68:	bfc4      	itt	gt
 800bd6a:	1a9b      	subgt	r3, r3, r2
 800bd6c:	18ed      	addgt	r5, r5, r3
 800bd6e:	2600      	movs	r6, #0
 800bd70:	341a      	adds	r4, #26
 800bd72:	42b5      	cmp	r5, r6
 800bd74:	d11a      	bne.n	800bdac <_printf_common+0xc8>
 800bd76:	2000      	movs	r0, #0
 800bd78:	e008      	b.n	800bd8c <_printf_common+0xa8>
 800bd7a:	2301      	movs	r3, #1
 800bd7c:	4652      	mov	r2, sl
 800bd7e:	4649      	mov	r1, r9
 800bd80:	4638      	mov	r0, r7
 800bd82:	47c0      	blx	r8
 800bd84:	3001      	adds	r0, #1
 800bd86:	d103      	bne.n	800bd90 <_printf_common+0xac>
 800bd88:	f04f 30ff 	mov.w	r0, #4294967295
 800bd8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd90:	3501      	adds	r5, #1
 800bd92:	e7c6      	b.n	800bd22 <_printf_common+0x3e>
 800bd94:	18e1      	adds	r1, r4, r3
 800bd96:	1c5a      	adds	r2, r3, #1
 800bd98:	2030      	movs	r0, #48	; 0x30
 800bd9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bd9e:	4422      	add	r2, r4
 800bda0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bda4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bda8:	3302      	adds	r3, #2
 800bdaa:	e7c7      	b.n	800bd3c <_printf_common+0x58>
 800bdac:	2301      	movs	r3, #1
 800bdae:	4622      	mov	r2, r4
 800bdb0:	4649      	mov	r1, r9
 800bdb2:	4638      	mov	r0, r7
 800bdb4:	47c0      	blx	r8
 800bdb6:	3001      	adds	r0, #1
 800bdb8:	d0e6      	beq.n	800bd88 <_printf_common+0xa4>
 800bdba:	3601      	adds	r6, #1
 800bdbc:	e7d9      	b.n	800bd72 <_printf_common+0x8e>
	...

0800bdc0 <_printf_i>:
 800bdc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bdc4:	460c      	mov	r4, r1
 800bdc6:	4691      	mov	r9, r2
 800bdc8:	7e27      	ldrb	r7, [r4, #24]
 800bdca:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bdcc:	2f78      	cmp	r7, #120	; 0x78
 800bdce:	4680      	mov	r8, r0
 800bdd0:	469a      	mov	sl, r3
 800bdd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bdd6:	d807      	bhi.n	800bde8 <_printf_i+0x28>
 800bdd8:	2f62      	cmp	r7, #98	; 0x62
 800bdda:	d80a      	bhi.n	800bdf2 <_printf_i+0x32>
 800bddc:	2f00      	cmp	r7, #0
 800bdde:	f000 80d8 	beq.w	800bf92 <_printf_i+0x1d2>
 800bde2:	2f58      	cmp	r7, #88	; 0x58
 800bde4:	f000 80a3 	beq.w	800bf2e <_printf_i+0x16e>
 800bde8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bdec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bdf0:	e03a      	b.n	800be68 <_printf_i+0xa8>
 800bdf2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bdf6:	2b15      	cmp	r3, #21
 800bdf8:	d8f6      	bhi.n	800bde8 <_printf_i+0x28>
 800bdfa:	a001      	add	r0, pc, #4	; (adr r0, 800be00 <_printf_i+0x40>)
 800bdfc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800be00:	0800be59 	.word	0x0800be59
 800be04:	0800be6d 	.word	0x0800be6d
 800be08:	0800bde9 	.word	0x0800bde9
 800be0c:	0800bde9 	.word	0x0800bde9
 800be10:	0800bde9 	.word	0x0800bde9
 800be14:	0800bde9 	.word	0x0800bde9
 800be18:	0800be6d 	.word	0x0800be6d
 800be1c:	0800bde9 	.word	0x0800bde9
 800be20:	0800bde9 	.word	0x0800bde9
 800be24:	0800bde9 	.word	0x0800bde9
 800be28:	0800bde9 	.word	0x0800bde9
 800be2c:	0800bf79 	.word	0x0800bf79
 800be30:	0800be9d 	.word	0x0800be9d
 800be34:	0800bf5b 	.word	0x0800bf5b
 800be38:	0800bde9 	.word	0x0800bde9
 800be3c:	0800bde9 	.word	0x0800bde9
 800be40:	0800bf9b 	.word	0x0800bf9b
 800be44:	0800bde9 	.word	0x0800bde9
 800be48:	0800be9d 	.word	0x0800be9d
 800be4c:	0800bde9 	.word	0x0800bde9
 800be50:	0800bde9 	.word	0x0800bde9
 800be54:	0800bf63 	.word	0x0800bf63
 800be58:	680b      	ldr	r3, [r1, #0]
 800be5a:	1d1a      	adds	r2, r3, #4
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	600a      	str	r2, [r1, #0]
 800be60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800be64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800be68:	2301      	movs	r3, #1
 800be6a:	e0a3      	b.n	800bfb4 <_printf_i+0x1f4>
 800be6c:	6825      	ldr	r5, [r4, #0]
 800be6e:	6808      	ldr	r0, [r1, #0]
 800be70:	062e      	lsls	r6, r5, #24
 800be72:	f100 0304 	add.w	r3, r0, #4
 800be76:	d50a      	bpl.n	800be8e <_printf_i+0xce>
 800be78:	6805      	ldr	r5, [r0, #0]
 800be7a:	600b      	str	r3, [r1, #0]
 800be7c:	2d00      	cmp	r5, #0
 800be7e:	da03      	bge.n	800be88 <_printf_i+0xc8>
 800be80:	232d      	movs	r3, #45	; 0x2d
 800be82:	426d      	negs	r5, r5
 800be84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800be88:	485e      	ldr	r0, [pc, #376]	; (800c004 <_printf_i+0x244>)
 800be8a:	230a      	movs	r3, #10
 800be8c:	e019      	b.n	800bec2 <_printf_i+0x102>
 800be8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800be92:	6805      	ldr	r5, [r0, #0]
 800be94:	600b      	str	r3, [r1, #0]
 800be96:	bf18      	it	ne
 800be98:	b22d      	sxthne	r5, r5
 800be9a:	e7ef      	b.n	800be7c <_printf_i+0xbc>
 800be9c:	680b      	ldr	r3, [r1, #0]
 800be9e:	6825      	ldr	r5, [r4, #0]
 800bea0:	1d18      	adds	r0, r3, #4
 800bea2:	6008      	str	r0, [r1, #0]
 800bea4:	0628      	lsls	r0, r5, #24
 800bea6:	d501      	bpl.n	800beac <_printf_i+0xec>
 800bea8:	681d      	ldr	r5, [r3, #0]
 800beaa:	e002      	b.n	800beb2 <_printf_i+0xf2>
 800beac:	0669      	lsls	r1, r5, #25
 800beae:	d5fb      	bpl.n	800bea8 <_printf_i+0xe8>
 800beb0:	881d      	ldrh	r5, [r3, #0]
 800beb2:	4854      	ldr	r0, [pc, #336]	; (800c004 <_printf_i+0x244>)
 800beb4:	2f6f      	cmp	r7, #111	; 0x6f
 800beb6:	bf0c      	ite	eq
 800beb8:	2308      	moveq	r3, #8
 800beba:	230a      	movne	r3, #10
 800bebc:	2100      	movs	r1, #0
 800bebe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bec2:	6866      	ldr	r6, [r4, #4]
 800bec4:	60a6      	str	r6, [r4, #8]
 800bec6:	2e00      	cmp	r6, #0
 800bec8:	bfa2      	ittt	ge
 800beca:	6821      	ldrge	r1, [r4, #0]
 800becc:	f021 0104 	bicge.w	r1, r1, #4
 800bed0:	6021      	strge	r1, [r4, #0]
 800bed2:	b90d      	cbnz	r5, 800bed8 <_printf_i+0x118>
 800bed4:	2e00      	cmp	r6, #0
 800bed6:	d04d      	beq.n	800bf74 <_printf_i+0x1b4>
 800bed8:	4616      	mov	r6, r2
 800beda:	fbb5 f1f3 	udiv	r1, r5, r3
 800bede:	fb03 5711 	mls	r7, r3, r1, r5
 800bee2:	5dc7      	ldrb	r7, [r0, r7]
 800bee4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bee8:	462f      	mov	r7, r5
 800beea:	42bb      	cmp	r3, r7
 800beec:	460d      	mov	r5, r1
 800beee:	d9f4      	bls.n	800beda <_printf_i+0x11a>
 800bef0:	2b08      	cmp	r3, #8
 800bef2:	d10b      	bne.n	800bf0c <_printf_i+0x14c>
 800bef4:	6823      	ldr	r3, [r4, #0]
 800bef6:	07df      	lsls	r7, r3, #31
 800bef8:	d508      	bpl.n	800bf0c <_printf_i+0x14c>
 800befa:	6923      	ldr	r3, [r4, #16]
 800befc:	6861      	ldr	r1, [r4, #4]
 800befe:	4299      	cmp	r1, r3
 800bf00:	bfde      	ittt	le
 800bf02:	2330      	movle	r3, #48	; 0x30
 800bf04:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf08:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bf0c:	1b92      	subs	r2, r2, r6
 800bf0e:	6122      	str	r2, [r4, #16]
 800bf10:	f8cd a000 	str.w	sl, [sp]
 800bf14:	464b      	mov	r3, r9
 800bf16:	aa03      	add	r2, sp, #12
 800bf18:	4621      	mov	r1, r4
 800bf1a:	4640      	mov	r0, r8
 800bf1c:	f7ff fee2 	bl	800bce4 <_printf_common>
 800bf20:	3001      	adds	r0, #1
 800bf22:	d14c      	bne.n	800bfbe <_printf_i+0x1fe>
 800bf24:	f04f 30ff 	mov.w	r0, #4294967295
 800bf28:	b004      	add	sp, #16
 800bf2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf2e:	4835      	ldr	r0, [pc, #212]	; (800c004 <_printf_i+0x244>)
 800bf30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800bf34:	6823      	ldr	r3, [r4, #0]
 800bf36:	680e      	ldr	r6, [r1, #0]
 800bf38:	061f      	lsls	r7, r3, #24
 800bf3a:	f856 5b04 	ldr.w	r5, [r6], #4
 800bf3e:	600e      	str	r6, [r1, #0]
 800bf40:	d514      	bpl.n	800bf6c <_printf_i+0x1ac>
 800bf42:	07d9      	lsls	r1, r3, #31
 800bf44:	bf44      	itt	mi
 800bf46:	f043 0320 	orrmi.w	r3, r3, #32
 800bf4a:	6023      	strmi	r3, [r4, #0]
 800bf4c:	b91d      	cbnz	r5, 800bf56 <_printf_i+0x196>
 800bf4e:	6823      	ldr	r3, [r4, #0]
 800bf50:	f023 0320 	bic.w	r3, r3, #32
 800bf54:	6023      	str	r3, [r4, #0]
 800bf56:	2310      	movs	r3, #16
 800bf58:	e7b0      	b.n	800bebc <_printf_i+0xfc>
 800bf5a:	6823      	ldr	r3, [r4, #0]
 800bf5c:	f043 0320 	orr.w	r3, r3, #32
 800bf60:	6023      	str	r3, [r4, #0]
 800bf62:	2378      	movs	r3, #120	; 0x78
 800bf64:	4828      	ldr	r0, [pc, #160]	; (800c008 <_printf_i+0x248>)
 800bf66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bf6a:	e7e3      	b.n	800bf34 <_printf_i+0x174>
 800bf6c:	065e      	lsls	r6, r3, #25
 800bf6e:	bf48      	it	mi
 800bf70:	b2ad      	uxthmi	r5, r5
 800bf72:	e7e6      	b.n	800bf42 <_printf_i+0x182>
 800bf74:	4616      	mov	r6, r2
 800bf76:	e7bb      	b.n	800bef0 <_printf_i+0x130>
 800bf78:	680b      	ldr	r3, [r1, #0]
 800bf7a:	6826      	ldr	r6, [r4, #0]
 800bf7c:	6960      	ldr	r0, [r4, #20]
 800bf7e:	1d1d      	adds	r5, r3, #4
 800bf80:	600d      	str	r5, [r1, #0]
 800bf82:	0635      	lsls	r5, r6, #24
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	d501      	bpl.n	800bf8c <_printf_i+0x1cc>
 800bf88:	6018      	str	r0, [r3, #0]
 800bf8a:	e002      	b.n	800bf92 <_printf_i+0x1d2>
 800bf8c:	0671      	lsls	r1, r6, #25
 800bf8e:	d5fb      	bpl.n	800bf88 <_printf_i+0x1c8>
 800bf90:	8018      	strh	r0, [r3, #0]
 800bf92:	2300      	movs	r3, #0
 800bf94:	6123      	str	r3, [r4, #16]
 800bf96:	4616      	mov	r6, r2
 800bf98:	e7ba      	b.n	800bf10 <_printf_i+0x150>
 800bf9a:	680b      	ldr	r3, [r1, #0]
 800bf9c:	1d1a      	adds	r2, r3, #4
 800bf9e:	600a      	str	r2, [r1, #0]
 800bfa0:	681e      	ldr	r6, [r3, #0]
 800bfa2:	6862      	ldr	r2, [r4, #4]
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	4630      	mov	r0, r6
 800bfa8:	f7f4 f91a 	bl	80001e0 <memchr>
 800bfac:	b108      	cbz	r0, 800bfb2 <_printf_i+0x1f2>
 800bfae:	1b80      	subs	r0, r0, r6
 800bfb0:	6060      	str	r0, [r4, #4]
 800bfb2:	6863      	ldr	r3, [r4, #4]
 800bfb4:	6123      	str	r3, [r4, #16]
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfbc:	e7a8      	b.n	800bf10 <_printf_i+0x150>
 800bfbe:	6923      	ldr	r3, [r4, #16]
 800bfc0:	4632      	mov	r2, r6
 800bfc2:	4649      	mov	r1, r9
 800bfc4:	4640      	mov	r0, r8
 800bfc6:	47d0      	blx	sl
 800bfc8:	3001      	adds	r0, #1
 800bfca:	d0ab      	beq.n	800bf24 <_printf_i+0x164>
 800bfcc:	6823      	ldr	r3, [r4, #0]
 800bfce:	079b      	lsls	r3, r3, #30
 800bfd0:	d413      	bmi.n	800bffa <_printf_i+0x23a>
 800bfd2:	68e0      	ldr	r0, [r4, #12]
 800bfd4:	9b03      	ldr	r3, [sp, #12]
 800bfd6:	4298      	cmp	r0, r3
 800bfd8:	bfb8      	it	lt
 800bfda:	4618      	movlt	r0, r3
 800bfdc:	e7a4      	b.n	800bf28 <_printf_i+0x168>
 800bfde:	2301      	movs	r3, #1
 800bfe0:	4632      	mov	r2, r6
 800bfe2:	4649      	mov	r1, r9
 800bfe4:	4640      	mov	r0, r8
 800bfe6:	47d0      	blx	sl
 800bfe8:	3001      	adds	r0, #1
 800bfea:	d09b      	beq.n	800bf24 <_printf_i+0x164>
 800bfec:	3501      	adds	r5, #1
 800bfee:	68e3      	ldr	r3, [r4, #12]
 800bff0:	9903      	ldr	r1, [sp, #12]
 800bff2:	1a5b      	subs	r3, r3, r1
 800bff4:	42ab      	cmp	r3, r5
 800bff6:	dcf2      	bgt.n	800bfde <_printf_i+0x21e>
 800bff8:	e7eb      	b.n	800bfd2 <_printf_i+0x212>
 800bffa:	2500      	movs	r5, #0
 800bffc:	f104 0619 	add.w	r6, r4, #25
 800c000:	e7f5      	b.n	800bfee <_printf_i+0x22e>
 800c002:	bf00      	nop
 800c004:	0800c959 	.word	0x0800c959
 800c008:	0800c96a 	.word	0x0800c96a

0800c00c <_scanf_chars>:
 800c00c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c010:	4615      	mov	r5, r2
 800c012:	688a      	ldr	r2, [r1, #8]
 800c014:	4680      	mov	r8, r0
 800c016:	460c      	mov	r4, r1
 800c018:	b932      	cbnz	r2, 800c028 <_scanf_chars+0x1c>
 800c01a:	698a      	ldr	r2, [r1, #24]
 800c01c:	2a00      	cmp	r2, #0
 800c01e:	bf0c      	ite	eq
 800c020:	2201      	moveq	r2, #1
 800c022:	f04f 32ff 	movne.w	r2, #4294967295
 800c026:	608a      	str	r2, [r1, #8]
 800c028:	6822      	ldr	r2, [r4, #0]
 800c02a:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c0b8 <_scanf_chars+0xac>
 800c02e:	06d1      	lsls	r1, r2, #27
 800c030:	bf5f      	itttt	pl
 800c032:	681a      	ldrpl	r2, [r3, #0]
 800c034:	1d11      	addpl	r1, r2, #4
 800c036:	6019      	strpl	r1, [r3, #0]
 800c038:	6816      	ldrpl	r6, [r2, #0]
 800c03a:	2700      	movs	r7, #0
 800c03c:	69a0      	ldr	r0, [r4, #24]
 800c03e:	b188      	cbz	r0, 800c064 <_scanf_chars+0x58>
 800c040:	2801      	cmp	r0, #1
 800c042:	d107      	bne.n	800c054 <_scanf_chars+0x48>
 800c044:	682b      	ldr	r3, [r5, #0]
 800c046:	781a      	ldrb	r2, [r3, #0]
 800c048:	6963      	ldr	r3, [r4, #20]
 800c04a:	5c9b      	ldrb	r3, [r3, r2]
 800c04c:	b953      	cbnz	r3, 800c064 <_scanf_chars+0x58>
 800c04e:	bb27      	cbnz	r7, 800c09a <_scanf_chars+0x8e>
 800c050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c054:	2802      	cmp	r0, #2
 800c056:	d120      	bne.n	800c09a <_scanf_chars+0x8e>
 800c058:	682b      	ldr	r3, [r5, #0]
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c060:	071b      	lsls	r3, r3, #28
 800c062:	d41a      	bmi.n	800c09a <_scanf_chars+0x8e>
 800c064:	6823      	ldr	r3, [r4, #0]
 800c066:	06da      	lsls	r2, r3, #27
 800c068:	bf5e      	ittt	pl
 800c06a:	682b      	ldrpl	r3, [r5, #0]
 800c06c:	781b      	ldrbpl	r3, [r3, #0]
 800c06e:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c072:	682a      	ldr	r2, [r5, #0]
 800c074:	686b      	ldr	r3, [r5, #4]
 800c076:	3201      	adds	r2, #1
 800c078:	602a      	str	r2, [r5, #0]
 800c07a:	68a2      	ldr	r2, [r4, #8]
 800c07c:	3b01      	subs	r3, #1
 800c07e:	3a01      	subs	r2, #1
 800c080:	606b      	str	r3, [r5, #4]
 800c082:	3701      	adds	r7, #1
 800c084:	60a2      	str	r2, [r4, #8]
 800c086:	b142      	cbz	r2, 800c09a <_scanf_chars+0x8e>
 800c088:	2b00      	cmp	r3, #0
 800c08a:	dcd7      	bgt.n	800c03c <_scanf_chars+0x30>
 800c08c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c090:	4629      	mov	r1, r5
 800c092:	4640      	mov	r0, r8
 800c094:	4798      	blx	r3
 800c096:	2800      	cmp	r0, #0
 800c098:	d0d0      	beq.n	800c03c <_scanf_chars+0x30>
 800c09a:	6823      	ldr	r3, [r4, #0]
 800c09c:	f013 0310 	ands.w	r3, r3, #16
 800c0a0:	d105      	bne.n	800c0ae <_scanf_chars+0xa2>
 800c0a2:	68e2      	ldr	r2, [r4, #12]
 800c0a4:	3201      	adds	r2, #1
 800c0a6:	60e2      	str	r2, [r4, #12]
 800c0a8:	69a2      	ldr	r2, [r4, #24]
 800c0aa:	b102      	cbz	r2, 800c0ae <_scanf_chars+0xa2>
 800c0ac:	7033      	strb	r3, [r6, #0]
 800c0ae:	6923      	ldr	r3, [r4, #16]
 800c0b0:	441f      	add	r7, r3
 800c0b2:	6127      	str	r7, [r4, #16]
 800c0b4:	2000      	movs	r0, #0
 800c0b6:	e7cb      	b.n	800c050 <_scanf_chars+0x44>
 800c0b8:	0800c997 	.word	0x0800c997

0800c0bc <_scanf_i>:
 800c0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0c0:	4698      	mov	r8, r3
 800c0c2:	4b74      	ldr	r3, [pc, #464]	; (800c294 <_scanf_i+0x1d8>)
 800c0c4:	460c      	mov	r4, r1
 800c0c6:	4682      	mov	sl, r0
 800c0c8:	4616      	mov	r6, r2
 800c0ca:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c0ce:	b087      	sub	sp, #28
 800c0d0:	ab03      	add	r3, sp, #12
 800c0d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c0d6:	4b70      	ldr	r3, [pc, #448]	; (800c298 <_scanf_i+0x1dc>)
 800c0d8:	69a1      	ldr	r1, [r4, #24]
 800c0da:	4a70      	ldr	r2, [pc, #448]	; (800c29c <_scanf_i+0x1e0>)
 800c0dc:	2903      	cmp	r1, #3
 800c0de:	bf18      	it	ne
 800c0e0:	461a      	movne	r2, r3
 800c0e2:	68a3      	ldr	r3, [r4, #8]
 800c0e4:	9201      	str	r2, [sp, #4]
 800c0e6:	1e5a      	subs	r2, r3, #1
 800c0e8:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c0ec:	bf88      	it	hi
 800c0ee:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c0f2:	4627      	mov	r7, r4
 800c0f4:	bf82      	ittt	hi
 800c0f6:	eb03 0905 	addhi.w	r9, r3, r5
 800c0fa:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c0fe:	60a3      	strhi	r3, [r4, #8]
 800c100:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c104:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c108:	bf98      	it	ls
 800c10a:	f04f 0900 	movls.w	r9, #0
 800c10e:	6023      	str	r3, [r4, #0]
 800c110:	463d      	mov	r5, r7
 800c112:	f04f 0b00 	mov.w	fp, #0
 800c116:	6831      	ldr	r1, [r6, #0]
 800c118:	ab03      	add	r3, sp, #12
 800c11a:	7809      	ldrb	r1, [r1, #0]
 800c11c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c120:	2202      	movs	r2, #2
 800c122:	f7f4 f85d 	bl	80001e0 <memchr>
 800c126:	b328      	cbz	r0, 800c174 <_scanf_i+0xb8>
 800c128:	f1bb 0f01 	cmp.w	fp, #1
 800c12c:	d159      	bne.n	800c1e2 <_scanf_i+0x126>
 800c12e:	6862      	ldr	r2, [r4, #4]
 800c130:	b92a      	cbnz	r2, 800c13e <_scanf_i+0x82>
 800c132:	6822      	ldr	r2, [r4, #0]
 800c134:	2308      	movs	r3, #8
 800c136:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c13a:	6063      	str	r3, [r4, #4]
 800c13c:	6022      	str	r2, [r4, #0]
 800c13e:	6822      	ldr	r2, [r4, #0]
 800c140:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c144:	6022      	str	r2, [r4, #0]
 800c146:	68a2      	ldr	r2, [r4, #8]
 800c148:	1e51      	subs	r1, r2, #1
 800c14a:	60a1      	str	r1, [r4, #8]
 800c14c:	b192      	cbz	r2, 800c174 <_scanf_i+0xb8>
 800c14e:	6832      	ldr	r2, [r6, #0]
 800c150:	1c51      	adds	r1, r2, #1
 800c152:	6031      	str	r1, [r6, #0]
 800c154:	7812      	ldrb	r2, [r2, #0]
 800c156:	f805 2b01 	strb.w	r2, [r5], #1
 800c15a:	6872      	ldr	r2, [r6, #4]
 800c15c:	3a01      	subs	r2, #1
 800c15e:	2a00      	cmp	r2, #0
 800c160:	6072      	str	r2, [r6, #4]
 800c162:	dc07      	bgt.n	800c174 <_scanf_i+0xb8>
 800c164:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c168:	4631      	mov	r1, r6
 800c16a:	4650      	mov	r0, sl
 800c16c:	4790      	blx	r2
 800c16e:	2800      	cmp	r0, #0
 800c170:	f040 8085 	bne.w	800c27e <_scanf_i+0x1c2>
 800c174:	f10b 0b01 	add.w	fp, fp, #1
 800c178:	f1bb 0f03 	cmp.w	fp, #3
 800c17c:	d1cb      	bne.n	800c116 <_scanf_i+0x5a>
 800c17e:	6863      	ldr	r3, [r4, #4]
 800c180:	b90b      	cbnz	r3, 800c186 <_scanf_i+0xca>
 800c182:	230a      	movs	r3, #10
 800c184:	6063      	str	r3, [r4, #4]
 800c186:	6863      	ldr	r3, [r4, #4]
 800c188:	4945      	ldr	r1, [pc, #276]	; (800c2a0 <_scanf_i+0x1e4>)
 800c18a:	6960      	ldr	r0, [r4, #20]
 800c18c:	1ac9      	subs	r1, r1, r3
 800c18e:	f000 f889 	bl	800c2a4 <__sccl>
 800c192:	f04f 0b00 	mov.w	fp, #0
 800c196:	68a3      	ldr	r3, [r4, #8]
 800c198:	6822      	ldr	r2, [r4, #0]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d03d      	beq.n	800c21a <_scanf_i+0x15e>
 800c19e:	6831      	ldr	r1, [r6, #0]
 800c1a0:	6960      	ldr	r0, [r4, #20]
 800c1a2:	f891 c000 	ldrb.w	ip, [r1]
 800c1a6:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	d035      	beq.n	800c21a <_scanf_i+0x15e>
 800c1ae:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c1b2:	d124      	bne.n	800c1fe <_scanf_i+0x142>
 800c1b4:	0510      	lsls	r0, r2, #20
 800c1b6:	d522      	bpl.n	800c1fe <_scanf_i+0x142>
 800c1b8:	f10b 0b01 	add.w	fp, fp, #1
 800c1bc:	f1b9 0f00 	cmp.w	r9, #0
 800c1c0:	d003      	beq.n	800c1ca <_scanf_i+0x10e>
 800c1c2:	3301      	adds	r3, #1
 800c1c4:	f109 39ff 	add.w	r9, r9, #4294967295
 800c1c8:	60a3      	str	r3, [r4, #8]
 800c1ca:	6873      	ldr	r3, [r6, #4]
 800c1cc:	3b01      	subs	r3, #1
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	6073      	str	r3, [r6, #4]
 800c1d2:	dd1b      	ble.n	800c20c <_scanf_i+0x150>
 800c1d4:	6833      	ldr	r3, [r6, #0]
 800c1d6:	3301      	adds	r3, #1
 800c1d8:	6033      	str	r3, [r6, #0]
 800c1da:	68a3      	ldr	r3, [r4, #8]
 800c1dc:	3b01      	subs	r3, #1
 800c1de:	60a3      	str	r3, [r4, #8]
 800c1e0:	e7d9      	b.n	800c196 <_scanf_i+0xda>
 800c1e2:	f1bb 0f02 	cmp.w	fp, #2
 800c1e6:	d1ae      	bne.n	800c146 <_scanf_i+0x8a>
 800c1e8:	6822      	ldr	r2, [r4, #0]
 800c1ea:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c1ee:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c1f2:	d1bf      	bne.n	800c174 <_scanf_i+0xb8>
 800c1f4:	2310      	movs	r3, #16
 800c1f6:	6063      	str	r3, [r4, #4]
 800c1f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c1fc:	e7a2      	b.n	800c144 <_scanf_i+0x88>
 800c1fe:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c202:	6022      	str	r2, [r4, #0]
 800c204:	780b      	ldrb	r3, [r1, #0]
 800c206:	f805 3b01 	strb.w	r3, [r5], #1
 800c20a:	e7de      	b.n	800c1ca <_scanf_i+0x10e>
 800c20c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c210:	4631      	mov	r1, r6
 800c212:	4650      	mov	r0, sl
 800c214:	4798      	blx	r3
 800c216:	2800      	cmp	r0, #0
 800c218:	d0df      	beq.n	800c1da <_scanf_i+0x11e>
 800c21a:	6823      	ldr	r3, [r4, #0]
 800c21c:	05d9      	lsls	r1, r3, #23
 800c21e:	d50d      	bpl.n	800c23c <_scanf_i+0x180>
 800c220:	42bd      	cmp	r5, r7
 800c222:	d909      	bls.n	800c238 <_scanf_i+0x17c>
 800c224:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c228:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c22c:	4632      	mov	r2, r6
 800c22e:	4650      	mov	r0, sl
 800c230:	4798      	blx	r3
 800c232:	f105 39ff 	add.w	r9, r5, #4294967295
 800c236:	464d      	mov	r5, r9
 800c238:	42bd      	cmp	r5, r7
 800c23a:	d028      	beq.n	800c28e <_scanf_i+0x1d2>
 800c23c:	6822      	ldr	r2, [r4, #0]
 800c23e:	f012 0210 	ands.w	r2, r2, #16
 800c242:	d113      	bne.n	800c26c <_scanf_i+0x1b0>
 800c244:	702a      	strb	r2, [r5, #0]
 800c246:	6863      	ldr	r3, [r4, #4]
 800c248:	9e01      	ldr	r6, [sp, #4]
 800c24a:	4639      	mov	r1, r7
 800c24c:	4650      	mov	r0, sl
 800c24e:	47b0      	blx	r6
 800c250:	f8d8 3000 	ldr.w	r3, [r8]
 800c254:	6821      	ldr	r1, [r4, #0]
 800c256:	1d1a      	adds	r2, r3, #4
 800c258:	f8c8 2000 	str.w	r2, [r8]
 800c25c:	f011 0f20 	tst.w	r1, #32
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	d00f      	beq.n	800c284 <_scanf_i+0x1c8>
 800c264:	6018      	str	r0, [r3, #0]
 800c266:	68e3      	ldr	r3, [r4, #12]
 800c268:	3301      	adds	r3, #1
 800c26a:	60e3      	str	r3, [r4, #12]
 800c26c:	1bed      	subs	r5, r5, r7
 800c26e:	44ab      	add	fp, r5
 800c270:	6925      	ldr	r5, [r4, #16]
 800c272:	445d      	add	r5, fp
 800c274:	6125      	str	r5, [r4, #16]
 800c276:	2000      	movs	r0, #0
 800c278:	b007      	add	sp, #28
 800c27a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c27e:	f04f 0b00 	mov.w	fp, #0
 800c282:	e7ca      	b.n	800c21a <_scanf_i+0x15e>
 800c284:	07ca      	lsls	r2, r1, #31
 800c286:	bf4c      	ite	mi
 800c288:	8018      	strhmi	r0, [r3, #0]
 800c28a:	6018      	strpl	r0, [r3, #0]
 800c28c:	e7eb      	b.n	800c266 <_scanf_i+0x1aa>
 800c28e:	2001      	movs	r0, #1
 800c290:	e7f2      	b.n	800c278 <_scanf_i+0x1bc>
 800c292:	bf00      	nop
 800c294:	0800c888 	.word	0x0800c888
 800c298:	0800c51d 	.word	0x0800c51d
 800c29c:	0800c421 	.word	0x0800c421
 800c2a0:	0800c994 	.word	0x0800c994

0800c2a4 <__sccl>:
 800c2a4:	b570      	push	{r4, r5, r6, lr}
 800c2a6:	780b      	ldrb	r3, [r1, #0]
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	2b5e      	cmp	r3, #94	; 0x5e
 800c2ac:	bf0b      	itete	eq
 800c2ae:	784b      	ldrbeq	r3, [r1, #1]
 800c2b0:	1c48      	addne	r0, r1, #1
 800c2b2:	1c88      	addeq	r0, r1, #2
 800c2b4:	2200      	movne	r2, #0
 800c2b6:	bf08      	it	eq
 800c2b8:	2201      	moveq	r2, #1
 800c2ba:	1e61      	subs	r1, r4, #1
 800c2bc:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c2c0:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c2c4:	42a9      	cmp	r1, r5
 800c2c6:	d1fb      	bne.n	800c2c0 <__sccl+0x1c>
 800c2c8:	b90b      	cbnz	r3, 800c2ce <__sccl+0x2a>
 800c2ca:	3801      	subs	r0, #1
 800c2cc:	bd70      	pop	{r4, r5, r6, pc}
 800c2ce:	f082 0101 	eor.w	r1, r2, #1
 800c2d2:	54e1      	strb	r1, [r4, r3]
 800c2d4:	1c42      	adds	r2, r0, #1
 800c2d6:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800c2da:	2d2d      	cmp	r5, #45	; 0x2d
 800c2dc:	f102 36ff 	add.w	r6, r2, #4294967295
 800c2e0:	4610      	mov	r0, r2
 800c2e2:	d006      	beq.n	800c2f2 <__sccl+0x4e>
 800c2e4:	2d5d      	cmp	r5, #93	; 0x5d
 800c2e6:	d0f1      	beq.n	800c2cc <__sccl+0x28>
 800c2e8:	b90d      	cbnz	r5, 800c2ee <__sccl+0x4a>
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	e7ee      	b.n	800c2cc <__sccl+0x28>
 800c2ee:	462b      	mov	r3, r5
 800c2f0:	e7ef      	b.n	800c2d2 <__sccl+0x2e>
 800c2f2:	7816      	ldrb	r6, [r2, #0]
 800c2f4:	2e5d      	cmp	r6, #93	; 0x5d
 800c2f6:	d0fa      	beq.n	800c2ee <__sccl+0x4a>
 800c2f8:	42b3      	cmp	r3, r6
 800c2fa:	dcf8      	bgt.n	800c2ee <__sccl+0x4a>
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3001      	adds	r0, #1
 800c300:	4286      	cmp	r6, r0
 800c302:	5421      	strb	r1, [r4, r0]
 800c304:	dcfb      	bgt.n	800c2fe <__sccl+0x5a>
 800c306:	43d8      	mvns	r0, r3
 800c308:	4430      	add	r0, r6
 800c30a:	1c5d      	adds	r5, r3, #1
 800c30c:	42b3      	cmp	r3, r6
 800c30e:	bfa8      	it	ge
 800c310:	2000      	movge	r0, #0
 800c312:	182b      	adds	r3, r5, r0
 800c314:	3202      	adds	r2, #2
 800c316:	e7de      	b.n	800c2d6 <__sccl+0x32>

0800c318 <_strtol_l.isra.0>:
 800c318:	2b01      	cmp	r3, #1
 800c31a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c31e:	d001      	beq.n	800c324 <_strtol_l.isra.0+0xc>
 800c320:	2b24      	cmp	r3, #36	; 0x24
 800c322:	d906      	bls.n	800c332 <_strtol_l.isra.0+0x1a>
 800c324:	f7ff f922 	bl	800b56c <__errno>
 800c328:	2316      	movs	r3, #22
 800c32a:	6003      	str	r3, [r0, #0]
 800c32c:	2000      	movs	r0, #0
 800c32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c332:	4f3a      	ldr	r7, [pc, #232]	; (800c41c <_strtol_l.isra.0+0x104>)
 800c334:	468e      	mov	lr, r1
 800c336:	4676      	mov	r6, lr
 800c338:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c33c:	5de5      	ldrb	r5, [r4, r7]
 800c33e:	f015 0508 	ands.w	r5, r5, #8
 800c342:	d1f8      	bne.n	800c336 <_strtol_l.isra.0+0x1e>
 800c344:	2c2d      	cmp	r4, #45	; 0x2d
 800c346:	d134      	bne.n	800c3b2 <_strtol_l.isra.0+0x9a>
 800c348:	f89e 4000 	ldrb.w	r4, [lr]
 800c34c:	f04f 0801 	mov.w	r8, #1
 800c350:	f106 0e02 	add.w	lr, r6, #2
 800c354:	2b00      	cmp	r3, #0
 800c356:	d05c      	beq.n	800c412 <_strtol_l.isra.0+0xfa>
 800c358:	2b10      	cmp	r3, #16
 800c35a:	d10c      	bne.n	800c376 <_strtol_l.isra.0+0x5e>
 800c35c:	2c30      	cmp	r4, #48	; 0x30
 800c35e:	d10a      	bne.n	800c376 <_strtol_l.isra.0+0x5e>
 800c360:	f89e 4000 	ldrb.w	r4, [lr]
 800c364:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c368:	2c58      	cmp	r4, #88	; 0x58
 800c36a:	d14d      	bne.n	800c408 <_strtol_l.isra.0+0xf0>
 800c36c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800c370:	2310      	movs	r3, #16
 800c372:	f10e 0e02 	add.w	lr, lr, #2
 800c376:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800c37a:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c37e:	2600      	movs	r6, #0
 800c380:	fbbc f9f3 	udiv	r9, ip, r3
 800c384:	4635      	mov	r5, r6
 800c386:	fb03 ca19 	mls	sl, r3, r9, ip
 800c38a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c38e:	2f09      	cmp	r7, #9
 800c390:	d818      	bhi.n	800c3c4 <_strtol_l.isra.0+0xac>
 800c392:	463c      	mov	r4, r7
 800c394:	42a3      	cmp	r3, r4
 800c396:	dd24      	ble.n	800c3e2 <_strtol_l.isra.0+0xca>
 800c398:	2e00      	cmp	r6, #0
 800c39a:	db1f      	blt.n	800c3dc <_strtol_l.isra.0+0xc4>
 800c39c:	45a9      	cmp	r9, r5
 800c39e:	d31d      	bcc.n	800c3dc <_strtol_l.isra.0+0xc4>
 800c3a0:	d101      	bne.n	800c3a6 <_strtol_l.isra.0+0x8e>
 800c3a2:	45a2      	cmp	sl, r4
 800c3a4:	db1a      	blt.n	800c3dc <_strtol_l.isra.0+0xc4>
 800c3a6:	fb05 4503 	mla	r5, r5, r3, r4
 800c3aa:	2601      	movs	r6, #1
 800c3ac:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c3b0:	e7eb      	b.n	800c38a <_strtol_l.isra.0+0x72>
 800c3b2:	2c2b      	cmp	r4, #43	; 0x2b
 800c3b4:	bf08      	it	eq
 800c3b6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800c3ba:	46a8      	mov	r8, r5
 800c3bc:	bf08      	it	eq
 800c3be:	f106 0e02 	addeq.w	lr, r6, #2
 800c3c2:	e7c7      	b.n	800c354 <_strtol_l.isra.0+0x3c>
 800c3c4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c3c8:	2f19      	cmp	r7, #25
 800c3ca:	d801      	bhi.n	800c3d0 <_strtol_l.isra.0+0xb8>
 800c3cc:	3c37      	subs	r4, #55	; 0x37
 800c3ce:	e7e1      	b.n	800c394 <_strtol_l.isra.0+0x7c>
 800c3d0:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c3d4:	2f19      	cmp	r7, #25
 800c3d6:	d804      	bhi.n	800c3e2 <_strtol_l.isra.0+0xca>
 800c3d8:	3c57      	subs	r4, #87	; 0x57
 800c3da:	e7db      	b.n	800c394 <_strtol_l.isra.0+0x7c>
 800c3dc:	f04f 36ff 	mov.w	r6, #4294967295
 800c3e0:	e7e4      	b.n	800c3ac <_strtol_l.isra.0+0x94>
 800c3e2:	2e00      	cmp	r6, #0
 800c3e4:	da05      	bge.n	800c3f2 <_strtol_l.isra.0+0xda>
 800c3e6:	2322      	movs	r3, #34	; 0x22
 800c3e8:	6003      	str	r3, [r0, #0]
 800c3ea:	4665      	mov	r5, ip
 800c3ec:	b942      	cbnz	r2, 800c400 <_strtol_l.isra.0+0xe8>
 800c3ee:	4628      	mov	r0, r5
 800c3f0:	e79d      	b.n	800c32e <_strtol_l.isra.0+0x16>
 800c3f2:	f1b8 0f00 	cmp.w	r8, #0
 800c3f6:	d000      	beq.n	800c3fa <_strtol_l.isra.0+0xe2>
 800c3f8:	426d      	negs	r5, r5
 800c3fa:	2a00      	cmp	r2, #0
 800c3fc:	d0f7      	beq.n	800c3ee <_strtol_l.isra.0+0xd6>
 800c3fe:	b10e      	cbz	r6, 800c404 <_strtol_l.isra.0+0xec>
 800c400:	f10e 31ff 	add.w	r1, lr, #4294967295
 800c404:	6011      	str	r1, [r2, #0]
 800c406:	e7f2      	b.n	800c3ee <_strtol_l.isra.0+0xd6>
 800c408:	2430      	movs	r4, #48	; 0x30
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1b3      	bne.n	800c376 <_strtol_l.isra.0+0x5e>
 800c40e:	2308      	movs	r3, #8
 800c410:	e7b1      	b.n	800c376 <_strtol_l.isra.0+0x5e>
 800c412:	2c30      	cmp	r4, #48	; 0x30
 800c414:	d0a4      	beq.n	800c360 <_strtol_l.isra.0+0x48>
 800c416:	230a      	movs	r3, #10
 800c418:	e7ad      	b.n	800c376 <_strtol_l.isra.0+0x5e>
 800c41a:	bf00      	nop
 800c41c:	0800c997 	.word	0x0800c997

0800c420 <_strtol_r>:
 800c420:	f7ff bf7a 	b.w	800c318 <_strtol_l.isra.0>

0800c424 <_strtoul_l.isra.0>:
 800c424:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c428:	4e3b      	ldr	r6, [pc, #236]	; (800c518 <_strtoul_l.isra.0+0xf4>)
 800c42a:	4686      	mov	lr, r0
 800c42c:	468c      	mov	ip, r1
 800c42e:	4660      	mov	r0, ip
 800c430:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c434:	5da5      	ldrb	r5, [r4, r6]
 800c436:	f015 0508 	ands.w	r5, r5, #8
 800c43a:	d1f8      	bne.n	800c42e <_strtoul_l.isra.0+0xa>
 800c43c:	2c2d      	cmp	r4, #45	; 0x2d
 800c43e:	d134      	bne.n	800c4aa <_strtoul_l.isra.0+0x86>
 800c440:	f89c 4000 	ldrb.w	r4, [ip]
 800c444:	f04f 0801 	mov.w	r8, #1
 800c448:	f100 0c02 	add.w	ip, r0, #2
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d05e      	beq.n	800c50e <_strtoul_l.isra.0+0xea>
 800c450:	2b10      	cmp	r3, #16
 800c452:	d10c      	bne.n	800c46e <_strtoul_l.isra.0+0x4a>
 800c454:	2c30      	cmp	r4, #48	; 0x30
 800c456:	d10a      	bne.n	800c46e <_strtoul_l.isra.0+0x4a>
 800c458:	f89c 0000 	ldrb.w	r0, [ip]
 800c45c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c460:	2858      	cmp	r0, #88	; 0x58
 800c462:	d14f      	bne.n	800c504 <_strtoul_l.isra.0+0xe0>
 800c464:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c468:	2310      	movs	r3, #16
 800c46a:	f10c 0c02 	add.w	ip, ip, #2
 800c46e:	f04f 37ff 	mov.w	r7, #4294967295
 800c472:	2500      	movs	r5, #0
 800c474:	fbb7 f7f3 	udiv	r7, r7, r3
 800c478:	fb03 f907 	mul.w	r9, r3, r7
 800c47c:	ea6f 0909 	mvn.w	r9, r9
 800c480:	4628      	mov	r0, r5
 800c482:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c486:	2e09      	cmp	r6, #9
 800c488:	d818      	bhi.n	800c4bc <_strtoul_l.isra.0+0x98>
 800c48a:	4634      	mov	r4, r6
 800c48c:	42a3      	cmp	r3, r4
 800c48e:	dd24      	ble.n	800c4da <_strtoul_l.isra.0+0xb6>
 800c490:	2d00      	cmp	r5, #0
 800c492:	db1f      	blt.n	800c4d4 <_strtoul_l.isra.0+0xb0>
 800c494:	4287      	cmp	r7, r0
 800c496:	d31d      	bcc.n	800c4d4 <_strtoul_l.isra.0+0xb0>
 800c498:	d101      	bne.n	800c49e <_strtoul_l.isra.0+0x7a>
 800c49a:	45a1      	cmp	r9, r4
 800c49c:	db1a      	blt.n	800c4d4 <_strtoul_l.isra.0+0xb0>
 800c49e:	fb00 4003 	mla	r0, r0, r3, r4
 800c4a2:	2501      	movs	r5, #1
 800c4a4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c4a8:	e7eb      	b.n	800c482 <_strtoul_l.isra.0+0x5e>
 800c4aa:	2c2b      	cmp	r4, #43	; 0x2b
 800c4ac:	bf08      	it	eq
 800c4ae:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c4b2:	46a8      	mov	r8, r5
 800c4b4:	bf08      	it	eq
 800c4b6:	f100 0c02 	addeq.w	ip, r0, #2
 800c4ba:	e7c7      	b.n	800c44c <_strtoul_l.isra.0+0x28>
 800c4bc:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c4c0:	2e19      	cmp	r6, #25
 800c4c2:	d801      	bhi.n	800c4c8 <_strtoul_l.isra.0+0xa4>
 800c4c4:	3c37      	subs	r4, #55	; 0x37
 800c4c6:	e7e1      	b.n	800c48c <_strtoul_l.isra.0+0x68>
 800c4c8:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c4cc:	2e19      	cmp	r6, #25
 800c4ce:	d804      	bhi.n	800c4da <_strtoul_l.isra.0+0xb6>
 800c4d0:	3c57      	subs	r4, #87	; 0x57
 800c4d2:	e7db      	b.n	800c48c <_strtoul_l.isra.0+0x68>
 800c4d4:	f04f 35ff 	mov.w	r5, #4294967295
 800c4d8:	e7e4      	b.n	800c4a4 <_strtoul_l.isra.0+0x80>
 800c4da:	2d00      	cmp	r5, #0
 800c4dc:	da07      	bge.n	800c4ee <_strtoul_l.isra.0+0xca>
 800c4de:	2322      	movs	r3, #34	; 0x22
 800c4e0:	f8ce 3000 	str.w	r3, [lr]
 800c4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e8:	b942      	cbnz	r2, 800c4fc <_strtoul_l.isra.0+0xd8>
 800c4ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4ee:	f1b8 0f00 	cmp.w	r8, #0
 800c4f2:	d000      	beq.n	800c4f6 <_strtoul_l.isra.0+0xd2>
 800c4f4:	4240      	negs	r0, r0
 800c4f6:	2a00      	cmp	r2, #0
 800c4f8:	d0f7      	beq.n	800c4ea <_strtoul_l.isra.0+0xc6>
 800c4fa:	b10d      	cbz	r5, 800c500 <_strtoul_l.isra.0+0xdc>
 800c4fc:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c500:	6011      	str	r1, [r2, #0]
 800c502:	e7f2      	b.n	800c4ea <_strtoul_l.isra.0+0xc6>
 800c504:	2430      	movs	r4, #48	; 0x30
 800c506:	2b00      	cmp	r3, #0
 800c508:	d1b1      	bne.n	800c46e <_strtoul_l.isra.0+0x4a>
 800c50a:	2308      	movs	r3, #8
 800c50c:	e7af      	b.n	800c46e <_strtoul_l.isra.0+0x4a>
 800c50e:	2c30      	cmp	r4, #48	; 0x30
 800c510:	d0a2      	beq.n	800c458 <_strtoul_l.isra.0+0x34>
 800c512:	230a      	movs	r3, #10
 800c514:	e7ab      	b.n	800c46e <_strtoul_l.isra.0+0x4a>
 800c516:	bf00      	nop
 800c518:	0800c997 	.word	0x0800c997

0800c51c <_strtoul_r>:
 800c51c:	f7ff bf82 	b.w	800c424 <_strtoul_l.isra.0>

0800c520 <__submore>:
 800c520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c524:	460c      	mov	r4, r1
 800c526:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c528:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c52c:	4299      	cmp	r1, r3
 800c52e:	d11d      	bne.n	800c56c <__submore+0x4c>
 800c530:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c534:	f000 f89a 	bl	800c66c <_malloc_r>
 800c538:	b918      	cbnz	r0, 800c542 <__submore+0x22>
 800c53a:	f04f 30ff 	mov.w	r0, #4294967295
 800c53e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c542:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c546:	63a3      	str	r3, [r4, #56]	; 0x38
 800c548:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c54c:	6360      	str	r0, [r4, #52]	; 0x34
 800c54e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c552:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c556:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c55a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c55e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c562:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c566:	6020      	str	r0, [r4, #0]
 800c568:	2000      	movs	r0, #0
 800c56a:	e7e8      	b.n	800c53e <__submore+0x1e>
 800c56c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c56e:	0077      	lsls	r7, r6, #1
 800c570:	463a      	mov	r2, r7
 800c572:	f000 f8d5 	bl	800c720 <_realloc_r>
 800c576:	4605      	mov	r5, r0
 800c578:	2800      	cmp	r0, #0
 800c57a:	d0de      	beq.n	800c53a <__submore+0x1a>
 800c57c:	eb00 0806 	add.w	r8, r0, r6
 800c580:	4601      	mov	r1, r0
 800c582:	4632      	mov	r2, r6
 800c584:	4640      	mov	r0, r8
 800c586:	f7ff f81b 	bl	800b5c0 <memcpy>
 800c58a:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c58e:	f8c4 8000 	str.w	r8, [r4]
 800c592:	e7e9      	b.n	800c568 <__submore+0x48>

0800c594 <__retarget_lock_acquire_recursive>:
 800c594:	4770      	bx	lr

0800c596 <__retarget_lock_release_recursive>:
 800c596:	4770      	bx	lr

0800c598 <memmove>:
 800c598:	4288      	cmp	r0, r1
 800c59a:	b510      	push	{r4, lr}
 800c59c:	eb01 0402 	add.w	r4, r1, r2
 800c5a0:	d902      	bls.n	800c5a8 <memmove+0x10>
 800c5a2:	4284      	cmp	r4, r0
 800c5a4:	4623      	mov	r3, r4
 800c5a6:	d807      	bhi.n	800c5b8 <memmove+0x20>
 800c5a8:	1e43      	subs	r3, r0, #1
 800c5aa:	42a1      	cmp	r1, r4
 800c5ac:	d008      	beq.n	800c5c0 <memmove+0x28>
 800c5ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5b6:	e7f8      	b.n	800c5aa <memmove+0x12>
 800c5b8:	4402      	add	r2, r0
 800c5ba:	4601      	mov	r1, r0
 800c5bc:	428a      	cmp	r2, r1
 800c5be:	d100      	bne.n	800c5c2 <memmove+0x2a>
 800c5c0:	bd10      	pop	{r4, pc}
 800c5c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5ca:	e7f7      	b.n	800c5bc <memmove+0x24>

0800c5cc <_free_r>:
 800c5cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5ce:	2900      	cmp	r1, #0
 800c5d0:	d048      	beq.n	800c664 <_free_r+0x98>
 800c5d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c5d6:	9001      	str	r0, [sp, #4]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	f1a1 0404 	sub.w	r4, r1, #4
 800c5de:	bfb8      	it	lt
 800c5e0:	18e4      	addlt	r4, r4, r3
 800c5e2:	f000 f8d3 	bl	800c78c <__malloc_lock>
 800c5e6:	4a20      	ldr	r2, [pc, #128]	; (800c668 <_free_r+0x9c>)
 800c5e8:	9801      	ldr	r0, [sp, #4]
 800c5ea:	6813      	ldr	r3, [r2, #0]
 800c5ec:	4615      	mov	r5, r2
 800c5ee:	b933      	cbnz	r3, 800c5fe <_free_r+0x32>
 800c5f0:	6063      	str	r3, [r4, #4]
 800c5f2:	6014      	str	r4, [r2, #0]
 800c5f4:	b003      	add	sp, #12
 800c5f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c5fa:	f000 b8cd 	b.w	800c798 <__malloc_unlock>
 800c5fe:	42a3      	cmp	r3, r4
 800c600:	d90b      	bls.n	800c61a <_free_r+0x4e>
 800c602:	6821      	ldr	r1, [r4, #0]
 800c604:	1862      	adds	r2, r4, r1
 800c606:	4293      	cmp	r3, r2
 800c608:	bf04      	itt	eq
 800c60a:	681a      	ldreq	r2, [r3, #0]
 800c60c:	685b      	ldreq	r3, [r3, #4]
 800c60e:	6063      	str	r3, [r4, #4]
 800c610:	bf04      	itt	eq
 800c612:	1852      	addeq	r2, r2, r1
 800c614:	6022      	streq	r2, [r4, #0]
 800c616:	602c      	str	r4, [r5, #0]
 800c618:	e7ec      	b.n	800c5f4 <_free_r+0x28>
 800c61a:	461a      	mov	r2, r3
 800c61c:	685b      	ldr	r3, [r3, #4]
 800c61e:	b10b      	cbz	r3, 800c624 <_free_r+0x58>
 800c620:	42a3      	cmp	r3, r4
 800c622:	d9fa      	bls.n	800c61a <_free_r+0x4e>
 800c624:	6811      	ldr	r1, [r2, #0]
 800c626:	1855      	adds	r5, r2, r1
 800c628:	42a5      	cmp	r5, r4
 800c62a:	d10b      	bne.n	800c644 <_free_r+0x78>
 800c62c:	6824      	ldr	r4, [r4, #0]
 800c62e:	4421      	add	r1, r4
 800c630:	1854      	adds	r4, r2, r1
 800c632:	42a3      	cmp	r3, r4
 800c634:	6011      	str	r1, [r2, #0]
 800c636:	d1dd      	bne.n	800c5f4 <_free_r+0x28>
 800c638:	681c      	ldr	r4, [r3, #0]
 800c63a:	685b      	ldr	r3, [r3, #4]
 800c63c:	6053      	str	r3, [r2, #4]
 800c63e:	4421      	add	r1, r4
 800c640:	6011      	str	r1, [r2, #0]
 800c642:	e7d7      	b.n	800c5f4 <_free_r+0x28>
 800c644:	d902      	bls.n	800c64c <_free_r+0x80>
 800c646:	230c      	movs	r3, #12
 800c648:	6003      	str	r3, [r0, #0]
 800c64a:	e7d3      	b.n	800c5f4 <_free_r+0x28>
 800c64c:	6825      	ldr	r5, [r4, #0]
 800c64e:	1961      	adds	r1, r4, r5
 800c650:	428b      	cmp	r3, r1
 800c652:	bf04      	itt	eq
 800c654:	6819      	ldreq	r1, [r3, #0]
 800c656:	685b      	ldreq	r3, [r3, #4]
 800c658:	6063      	str	r3, [r4, #4]
 800c65a:	bf04      	itt	eq
 800c65c:	1949      	addeq	r1, r1, r5
 800c65e:	6021      	streq	r1, [r4, #0]
 800c660:	6054      	str	r4, [r2, #4]
 800c662:	e7c7      	b.n	800c5f4 <_free_r+0x28>
 800c664:	b003      	add	sp, #12
 800c666:	bd30      	pop	{r4, r5, pc}
 800c668:	20001d58 	.word	0x20001d58

0800c66c <_malloc_r>:
 800c66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c66e:	1ccd      	adds	r5, r1, #3
 800c670:	f025 0503 	bic.w	r5, r5, #3
 800c674:	3508      	adds	r5, #8
 800c676:	2d0c      	cmp	r5, #12
 800c678:	bf38      	it	cc
 800c67a:	250c      	movcc	r5, #12
 800c67c:	2d00      	cmp	r5, #0
 800c67e:	4606      	mov	r6, r0
 800c680:	db01      	blt.n	800c686 <_malloc_r+0x1a>
 800c682:	42a9      	cmp	r1, r5
 800c684:	d903      	bls.n	800c68e <_malloc_r+0x22>
 800c686:	230c      	movs	r3, #12
 800c688:	6033      	str	r3, [r6, #0]
 800c68a:	2000      	movs	r0, #0
 800c68c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c68e:	f000 f87d 	bl	800c78c <__malloc_lock>
 800c692:	4921      	ldr	r1, [pc, #132]	; (800c718 <_malloc_r+0xac>)
 800c694:	680a      	ldr	r2, [r1, #0]
 800c696:	4614      	mov	r4, r2
 800c698:	b99c      	cbnz	r4, 800c6c2 <_malloc_r+0x56>
 800c69a:	4f20      	ldr	r7, [pc, #128]	; (800c71c <_malloc_r+0xb0>)
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	b923      	cbnz	r3, 800c6aa <_malloc_r+0x3e>
 800c6a0:	4621      	mov	r1, r4
 800c6a2:	4630      	mov	r0, r6
 800c6a4:	f000 f862 	bl	800c76c <_sbrk_r>
 800c6a8:	6038      	str	r0, [r7, #0]
 800c6aa:	4629      	mov	r1, r5
 800c6ac:	4630      	mov	r0, r6
 800c6ae:	f000 f85d 	bl	800c76c <_sbrk_r>
 800c6b2:	1c43      	adds	r3, r0, #1
 800c6b4:	d123      	bne.n	800c6fe <_malloc_r+0x92>
 800c6b6:	230c      	movs	r3, #12
 800c6b8:	6033      	str	r3, [r6, #0]
 800c6ba:	4630      	mov	r0, r6
 800c6bc:	f000 f86c 	bl	800c798 <__malloc_unlock>
 800c6c0:	e7e3      	b.n	800c68a <_malloc_r+0x1e>
 800c6c2:	6823      	ldr	r3, [r4, #0]
 800c6c4:	1b5b      	subs	r3, r3, r5
 800c6c6:	d417      	bmi.n	800c6f8 <_malloc_r+0x8c>
 800c6c8:	2b0b      	cmp	r3, #11
 800c6ca:	d903      	bls.n	800c6d4 <_malloc_r+0x68>
 800c6cc:	6023      	str	r3, [r4, #0]
 800c6ce:	441c      	add	r4, r3
 800c6d0:	6025      	str	r5, [r4, #0]
 800c6d2:	e004      	b.n	800c6de <_malloc_r+0x72>
 800c6d4:	6863      	ldr	r3, [r4, #4]
 800c6d6:	42a2      	cmp	r2, r4
 800c6d8:	bf0c      	ite	eq
 800c6da:	600b      	streq	r3, [r1, #0]
 800c6dc:	6053      	strne	r3, [r2, #4]
 800c6de:	4630      	mov	r0, r6
 800c6e0:	f000 f85a 	bl	800c798 <__malloc_unlock>
 800c6e4:	f104 000b 	add.w	r0, r4, #11
 800c6e8:	1d23      	adds	r3, r4, #4
 800c6ea:	f020 0007 	bic.w	r0, r0, #7
 800c6ee:	1ac2      	subs	r2, r0, r3
 800c6f0:	d0cc      	beq.n	800c68c <_malloc_r+0x20>
 800c6f2:	1a1b      	subs	r3, r3, r0
 800c6f4:	50a3      	str	r3, [r4, r2]
 800c6f6:	e7c9      	b.n	800c68c <_malloc_r+0x20>
 800c6f8:	4622      	mov	r2, r4
 800c6fa:	6864      	ldr	r4, [r4, #4]
 800c6fc:	e7cc      	b.n	800c698 <_malloc_r+0x2c>
 800c6fe:	1cc4      	adds	r4, r0, #3
 800c700:	f024 0403 	bic.w	r4, r4, #3
 800c704:	42a0      	cmp	r0, r4
 800c706:	d0e3      	beq.n	800c6d0 <_malloc_r+0x64>
 800c708:	1a21      	subs	r1, r4, r0
 800c70a:	4630      	mov	r0, r6
 800c70c:	f000 f82e 	bl	800c76c <_sbrk_r>
 800c710:	3001      	adds	r0, #1
 800c712:	d1dd      	bne.n	800c6d0 <_malloc_r+0x64>
 800c714:	e7cf      	b.n	800c6b6 <_malloc_r+0x4a>
 800c716:	bf00      	nop
 800c718:	20001d58 	.word	0x20001d58
 800c71c:	20001d5c 	.word	0x20001d5c

0800c720 <_realloc_r>:
 800c720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c722:	4607      	mov	r7, r0
 800c724:	4614      	mov	r4, r2
 800c726:	460e      	mov	r6, r1
 800c728:	b921      	cbnz	r1, 800c734 <_realloc_r+0x14>
 800c72a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c72e:	4611      	mov	r1, r2
 800c730:	f7ff bf9c 	b.w	800c66c <_malloc_r>
 800c734:	b922      	cbnz	r2, 800c740 <_realloc_r+0x20>
 800c736:	f7ff ff49 	bl	800c5cc <_free_r>
 800c73a:	4625      	mov	r5, r4
 800c73c:	4628      	mov	r0, r5
 800c73e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c740:	f000 f830 	bl	800c7a4 <_malloc_usable_size_r>
 800c744:	42a0      	cmp	r0, r4
 800c746:	d20f      	bcs.n	800c768 <_realloc_r+0x48>
 800c748:	4621      	mov	r1, r4
 800c74a:	4638      	mov	r0, r7
 800c74c:	f7ff ff8e 	bl	800c66c <_malloc_r>
 800c750:	4605      	mov	r5, r0
 800c752:	2800      	cmp	r0, #0
 800c754:	d0f2      	beq.n	800c73c <_realloc_r+0x1c>
 800c756:	4631      	mov	r1, r6
 800c758:	4622      	mov	r2, r4
 800c75a:	f7fe ff31 	bl	800b5c0 <memcpy>
 800c75e:	4631      	mov	r1, r6
 800c760:	4638      	mov	r0, r7
 800c762:	f7ff ff33 	bl	800c5cc <_free_r>
 800c766:	e7e9      	b.n	800c73c <_realloc_r+0x1c>
 800c768:	4635      	mov	r5, r6
 800c76a:	e7e7      	b.n	800c73c <_realloc_r+0x1c>

0800c76c <_sbrk_r>:
 800c76c:	b538      	push	{r3, r4, r5, lr}
 800c76e:	4d06      	ldr	r5, [pc, #24]	; (800c788 <_sbrk_r+0x1c>)
 800c770:	2300      	movs	r3, #0
 800c772:	4604      	mov	r4, r0
 800c774:	4608      	mov	r0, r1
 800c776:	602b      	str	r3, [r5, #0]
 800c778:	f7f5 fa32 	bl	8001be0 <_sbrk>
 800c77c:	1c43      	adds	r3, r0, #1
 800c77e:	d102      	bne.n	800c786 <_sbrk_r+0x1a>
 800c780:	682b      	ldr	r3, [r5, #0]
 800c782:	b103      	cbz	r3, 800c786 <_sbrk_r+0x1a>
 800c784:	6023      	str	r3, [r4, #0]
 800c786:	bd38      	pop	{r3, r4, r5, pc}
 800c788:	20001fb8 	.word	0x20001fb8

0800c78c <__malloc_lock>:
 800c78c:	4801      	ldr	r0, [pc, #4]	; (800c794 <__malloc_lock+0x8>)
 800c78e:	f7ff bf01 	b.w	800c594 <__retarget_lock_acquire_recursive>
 800c792:	bf00      	nop
 800c794:	20001fc0 	.word	0x20001fc0

0800c798 <__malloc_unlock>:
 800c798:	4801      	ldr	r0, [pc, #4]	; (800c7a0 <__malloc_unlock+0x8>)
 800c79a:	f7ff befc 	b.w	800c596 <__retarget_lock_release_recursive>
 800c79e:	bf00      	nop
 800c7a0:	20001fc0 	.word	0x20001fc0

0800c7a4 <_malloc_usable_size_r>:
 800c7a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7a8:	1f18      	subs	r0, r3, #4
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	bfbc      	itt	lt
 800c7ae:	580b      	ldrlt	r3, [r1, r0]
 800c7b0:	18c0      	addlt	r0, r0, r3
 800c7b2:	4770      	bx	lr

0800c7b4 <_init>:
 800c7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7b6:	bf00      	nop
 800c7b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ba:	bc08      	pop	{r3}
 800c7bc:	469e      	mov	lr, r3
 800c7be:	4770      	bx	lr

0800c7c0 <_fini>:
 800c7c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7c2:	bf00      	nop
 800c7c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7c6:	bc08      	pop	{r3}
 800c7c8:	469e      	mov	lr, r3
 800c7ca:	4770      	bx	lr
