
IS1300-PROject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c750  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  0800c8e0  0800c8e0  0001c8e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cc0c  0800cc0c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800cc0c  0800cc0c  0001cc0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cc14  0800cc14  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cc14  0800cc14  0001cc14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cc18  0800cc18  0001cc18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800cc1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002004  20000084  0800cca0  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002088  0800cca0  00022088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003286d  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a80  00000000  00000000  00052921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002038  00000000  00000000  000583a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001de0  00000000  00000000  0005a3e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ed2b  00000000  00000000  0005c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028bcc  00000000  00000000  0008aeeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011b1b2  00000000  00000000  000b3ab7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001cec69  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fb4  00000000  00000000  001cecbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c8c8 	.word	0x0800c8c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800c8c8 	.word	0x0800c8c8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
 8000d74:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d76:	4b2f      	ldr	r3, [pc, #188]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d78:	4a2f      	ldr	r2, [pc, #188]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000d7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d7c:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d82:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d88:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d8e:	4b29      	ldr	r3, [pc, #164]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d94:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d96:	2204      	movs	r2, #4
 8000d98:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da0:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000da6:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dac:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd6:	4817      	ldr	r0, [pc, #92]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dd8:	f001 fbf2 	bl	80025c0 <HAL_ADC_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000de2:	f000 fd15 	bl	8001810 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	4619      	mov	r1, r3
 8000df0:	4810      	ldr	r0, [pc, #64]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000df2:	f002 fc3f 	bl	8003674 <HAL_ADCEx_MultiModeConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000dfc:	f000 fd08 	bl	8001810 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_ADC1_Init+0xe8>)
 8000e02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e04:	2306      	movs	r3, #6
 8000e06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e0c:	237f      	movs	r3, #127	; 0x7f
 8000e0e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e10:	2304      	movs	r3, #4
 8000e12:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000e1e:	f001 fec5 	bl	8002bac <HAL_ADC_ConfigChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000e28:	f000 fcf2 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20001e20 	.word	0x20001e20
 8000e38:	50040000 	.word	0x50040000
 8000e3c:	43210000 	.word	0x43210000

08000e40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b0ac      	sub	sp, #176	; 0xb0
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2288      	movs	r2, #136	; 0x88
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f00a fbdd 	bl	800b620 <memset>
  if(adcHandle->Instance==ADC1)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a27      	ldr	r2, [pc, #156]	; (8000f08 <HAL_ADC_MspInit+0xc8>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d146      	bne.n	8000efe <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e74:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e82:	2301      	movs	r3, #1
 8000e84:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e86:	2308      	movs	r3, #8
 8000e88:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e92:	2302      	movs	r3, #2
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f003 fe3d 	bl	8004b20 <HAL_RCCEx_PeriphCLKConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000eac:	f000 fcb0 	bl	8001810 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb4:	4a15      	ldr	r2, [pc, #84]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000eb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ecc:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ee6:	230b      	movs	r3, #11
 8000ee8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <HAL_ADC_MspInit+0xd0>)
 8000efa:	f002 fdcd 	bl	8003a98 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000efe:	bf00      	nop
 8000f00:	37b0      	adds	r7, #176	; 0xb0
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	50040000 	.word	0x50040000
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	48000400 	.word	0x48000400

08000f14 <start_clock>:


/**
 * @brief start the RTC clock
 */
void start_clock (uint8_t hours, uint8_t minutes, uint8_t seconds) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	71bb      	strb	r3, [r7, #6]
 8000f22:	4613      	mov	r3, r2
 8000f24:	717b      	strb	r3, [r7, #5]
    RTC_TimeTypeDef time = {0};
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]
    time.Hours = hours;
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	733b      	strb	r3, [r7, #12]
    time.Minutes = minutes;
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	737b      	strb	r3, [r7, #13]
    time.Seconds = seconds;
 8000f3e:	797b      	ldrb	r3, [r7, #5]
 8000f40:	73bb      	strb	r3, [r7, #14]

    /* date has to be set to start the clock */
    HAL_RTC_SetDate(&hrtc, NULL, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	4807      	ldr	r0, [pc, #28]	; (8000f64 <start_clock+0x50>)
 8000f48:	f004 fc1a 	bl	8005780 <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	2200      	movs	r2, #0
 8000f52:	4619      	mov	r1, r3
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <start_clock+0x50>)
 8000f56:	f004 fb1a 	bl	800558e <HAL_RTC_SetTime>
}
 8000f5a:	bf00      	nop
 8000f5c:	3720      	adds	r7, #32
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20001e90 	.word	0x20001e90

08000f68 <get_time>:
/**
 * @brief Get the current RTC time
 * @param[out] time The current time
 * @return Pointer to the time struct
 */
void get_time (RTC_TimeTypeDef *time) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
    HAL_RTC_GetTime(&hrtc, time, RTC_FORMAT_BIN);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <get_time+0x24>)
 8000f76:	f004 fba7 	bl	80056c8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, NULL, RTC_FORMAT_BIN);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4803      	ldr	r0, [pc, #12]	; (8000f8c <get_time+0x24>)
 8000f80:	f004 fc85 	bl	800588e <HAL_RTC_GetDate>
//        start_clock(0, 0, 0);
//        time->Hours = 0;
//        time->Minutes = 0;
//        time->Seconds = 0;
//    }
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20001e90 	.word	0x20001e90

08000f90 <hardware_reset>:
uint16_t pins[] = {Disp_White_Pin, Disp_Green_Pin};

/**
 * @brief Perform a hardware reset on the display
 */
void hardware_reset () {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
    HAL_Delay(5);
 8000f94:	2005      	movs	r0, #5
 8000f96:	f001 f8e5 	bl	8002164 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa4:	f002 ff22 	bl	8003dec <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000fa8:	200a      	movs	r0, #10
 8000faa:	f001 f8db 	bl	8002164 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f002 ff18 	bl	8003dec <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f001 f8d1 	bl	8002164 <HAL_Delay>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <test_backlight>:


/**
 * @brief Test all backlight colors
 */
void test_backlight () {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
    // TODO add red pwm
    for (int i = 0; i < 3; ++i) {
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	e02c      	b.n	800102e <test_backlight+0x66>
        if (i != 2) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d01b      	beq.n	8001012 <test_backlight+0x4a>
            HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);
 8000fda:	4a1d      	ldr	r2, [pc, #116]	; (8001050 <test_backlight+0x88>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fe2:	4a1c      	ldr	r2, [pc, #112]	; (8001054 <test_backlight+0x8c>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fea:	2201      	movs	r2, #1
 8000fec:	4619      	mov	r1, r3
 8000fee:	f002 fefd 	bl	8003dec <HAL_GPIO_WritePin>
            HAL_Delay(200);
 8000ff2:	20c8      	movs	r0, #200	; 0xc8
 8000ff4:	f001 f8b6 	bl	8002164 <HAL_Delay>
            HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 8000ff8:	4a15      	ldr	r2, [pc, #84]	; (8001050 <test_backlight+0x88>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001000:	4a14      	ldr	r2, [pc, #80]	; (8001054 <test_backlight+0x8c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001008:	2200      	movs	r2, #0
 800100a:	4619      	mov	r1, r3
 800100c:	f002 feee 	bl	8003dec <HAL_GPIO_WritePin>
 8001010:	e00a      	b.n	8001028 <test_backlight+0x60>
        } else {
            set_brightness(1.0);
 8001012:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8001040 <test_backlight+0x78>
 8001016:	f000 fc03 	bl	8001820 <set_brightness>
            HAL_Delay(200);
 800101a:	20c8      	movs	r0, #200	; 0xc8
 800101c:	f001 f8a2 	bl	8002164 <HAL_Delay>
            set_brightness(0.0);
 8001020:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8001048 <test_backlight+0x80>
 8001024:	f000 fbfc 	bl	8001820 <set_brightness>
    for (int i = 0; i < 3; ++i) {
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3301      	adds	r3, #1
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b02      	cmp	r3, #2
 8001032:	ddcf      	ble.n	8000fd4 <test_backlight+0xc>
        }
    }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	00000000 	.word	0x00000000
 8001044:	3ff00000 	.word	0x3ff00000
	...
 8001050:	20000000 	.word	0x20000000
 8001054:	20000008 	.word	0x20000008

08001058 <set_backlight>:


/**
 * @brief Set a backlight color
 */
void set_backlight (uint8_t color, GPIO_PinState state) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	460a      	mov	r2, r1
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	4613      	mov	r3, r2
 8001066:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(ports[color], pins[color], state);
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	4a07      	ldr	r2, [pc, #28]	; (8001088 <set_backlight+0x30>)
 800106c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	4a06      	ldr	r2, [pc, #24]	; (800108c <set_backlight+0x34>)
 8001074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001078:	79ba      	ldrb	r2, [r7, #6]
 800107a:	4619      	mov	r1, r3
 800107c:	f002 feb6 	bl	8003dec <HAL_GPIO_WritePin>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000000 	.word	0x20000000
 800108c:	20000008 	.word	0x20000008

08001090 <split_byte>:
/**
 * @brief Split a byte to send to the display
 * @param[in] byte The byte to split into two
 * @param[out] buffer Where to place the two new bytes
 */
void split_byte (uint8_t byte, uint8_t *buffer) {
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
    buffer[0] = byte & 0x0F;            // lower bits first
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	701a      	strb	r2, [r3, #0]
    buffer[1] = (byte & 0xF0) >> 4;     // upper bits second
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	79fa      	ldrb	r2, [r7, #7]
 80010ae:	0912      	lsrs	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	701a      	strb	r2, [r3, #0]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <display_transmit>:
 * @brief Send the display data or instructions
 * @param[in] startbyte The byte setting that initiates the transmit
 * @param[in] bytes The bytes that will be sent to the display
 * @param[in] length The number of bytes to send
 */
int display_transmit (uint8_t startbyte, uint8_t *bytes, uint16_t length) {
 80010c0:	b5b0      	push	{r4, r5, r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
 80010cc:	4613      	mov	r3, r2
 80010ce:	80bb      	strh	r3, [r7, #4]
 80010d0:	466b      	mov	r3, sp
 80010d2:	461d      	mov	r5, r3
    /* create message to transmit */
    uint16_t mes_length = length*2 +1; // +1 for start byte
 80010d4:	88bb      	ldrh	r3, [r7, #4]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	b29b      	uxth	r3, r3
 80010da:	3301      	adds	r3, #1
 80010dc:	837b      	strh	r3, [r7, #26]
    uint8_t message[mes_length];
 80010de:	8b7c      	ldrh	r4, [r7, #26]
 80010e0:	4623      	mov	r3, r4
 80010e2:	3b01      	subs	r3, #1
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	b2a0      	uxth	r0, r4
 80010e8:	f04f 0100 	mov.w	r1, #0
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	00cb      	lsls	r3, r1, #3
 80010f6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80010fa:	00c2      	lsls	r2, r0, #3
 80010fc:	b2a0      	uxth	r0, r4
 80010fe:	f04f 0100 	mov.w	r1, #0
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	f04f 0300 	mov.w	r3, #0
 800110a:	00cb      	lsls	r3, r1, #3
 800110c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001110:	00c2      	lsls	r2, r0, #3
 8001112:	4623      	mov	r3, r4
 8001114:	3307      	adds	r3, #7
 8001116:	08db      	lsrs	r3, r3, #3
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	ebad 0d03 	sub.w	sp, sp, r3
 800111e:	466b      	mov	r3, sp
 8001120:	3300      	adds	r3, #0
 8001122:	613b      	str	r3, [r7, #16]

    message[0] = startbyte;  // start byte
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	79fa      	ldrb	r2, [r7, #7]
 8001128:	701a      	strb	r2, [r3, #0]

    uint8_t divided[2]; // for splitting a byte into two
    for (int i = 0; i < length; ++i) {
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	e018      	b.n	8001162 <display_transmit+0xa2>
        split_byte(bytes[i], divided);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	4413      	add	r3, r2
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	f107 020c 	add.w	r2, r7, #12
 800113c:	4611      	mov	r1, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ffa6 	bl	8001090 <split_byte>
        message[1 + i*2] = divided[0];
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	3301      	adds	r3, #1
 800114a:	7b39      	ldrb	r1, [r7, #12]
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	54d1      	strb	r1, [r2, r3]
        message[1 + i*2 +1] = divided[1];
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	3301      	adds	r3, #1
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	7b79      	ldrb	r1, [r7, #13]
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < length; ++i) {
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	3301      	adds	r3, #1
 8001160:	61fb      	str	r3, [r7, #28]
 8001162:	88bb      	ldrh	r3, [r7, #4]
 8001164:	69fa      	ldr	r2, [r7, #28]
 8001166:	429a      	cmp	r2, r3
 8001168:	dbe2      	blt.n	8001130 <display_transmit+0x70>
    }

    if (HAL_SPI_Transmit(&hspi2, message, mes_length, 100) != HAL_OK) {
 800116a:	6939      	ldr	r1, [r7, #16]
 800116c:	8b7a      	ldrh	r2, [r7, #26]
 800116e:	2364      	movs	r3, #100	; 0x64
 8001170:	4806      	ldr	r0, [pc, #24]	; (800118c <display_transmit+0xcc>)
 8001172:	f004 fd4e 	bl	8005c12 <HAL_SPI_Transmit>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <display_transmit+0xc0>
        return 1;
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <display_transmit+0xc2>
    }
    return 0;
 8001180:	2300      	movs	r3, #0
 8001182:	46ad      	mov	sp, r5
}
 8001184:	4618      	mov	r0, r3
 8001186:	3720      	adds	r7, #32
 8001188:	46bd      	mov	sp, r7
 800118a:	bdb0      	pop	{r4, r5, r7, pc}
 800118c:	20001eb4 	.word	0x20001eb4

08001190 <display_send_instruction>:
/**
 * @brief Send instruction bytes via spi to the display
 * @param[in] instructions A pointer to the instructions to send to the display
 * @param[in] length The number of instructions
 */
int display_send_instruction (uint8_t *instructions, uint16_t length) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	807b      	strh	r3, [r7, #2]
    return display_transmit(0x1F, instructions, length);
 800119c:	887b      	ldrh	r3, [r7, #2]
 800119e:	461a      	mov	r2, r3
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	201f      	movs	r0, #31
 80011a4:	f7ff ff8c 	bl	80010c0 <display_transmit>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <display_write>:
/**
 * @brief Write characters to the display where the cursor currently are
 * @param characters The characters to write
 * @param length The number of characters
 */
int display_write (char *characters, uint16_t length) {
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	807b      	strh	r3, [r7, #2]
    return display_transmit(0b01011111, (uint8_t*)characters, length);
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	461a      	mov	r2, r3
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	205f      	movs	r0, #95	; 0x5f
 80011c6:	f7ff ff7b 	bl	80010c0 <display_transmit>
 80011ca:	4603      	mov	r3, r0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <set_row>:
uint8_t rows[] = {0b10000000, 0b10100000, 0b11000000, 0b11100000};
/**
 * @brief Set the cursor on the display
 * @param row The row to write to
 */
int set_row (uint8_t row) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
    /* the address range of DDARM is 00H-13H, 20H-33H, 40H53H, 60H-73H */
    return display_send_instruction(&rows[row], 1);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <set_row+0x24>)
 80011e2:	4413      	add	r3, r2
 80011e4:	2101      	movs	r1, #1
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ffd2 	bl	8001190 <display_send_instruction>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000000c 	.word	0x2000000c

080011fc <display_write_row>:
 * @brief Write text to a specific row on the display
 * @param characters The characters to write
 * @param length The number of characters
 * @param row The row to write to
 */
int display_write_row (char *characters, uint16_t length, uint8_t row) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
 8001208:	4613      	mov	r3, r2
 800120a:	707b      	strb	r3, [r7, #1]
    set_row(row);
 800120c:	787b      	ldrb	r3, [r7, #1]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ffe0 	bl	80011d4 <set_row>
    return display_write(characters, length);
 8001214:	887b      	ldrh	r3, [r7, #2]
 8001216:	4619      	mov	r1, r3
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ffca 	bl	80011b2 <display_write>
 800121e:	4603      	mov	r3, r0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <clear_display>:

/**
 * @brief Clears the display
 */
int clear_display () {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
    uint8_t ins = 0x01;
 800122e:	2301      	movs	r3, #1
 8001230:	71fb      	strb	r3, [r7, #7]
    return display_send_instruction(&ins, 1);
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	2101      	movs	r1, #1
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ffaa 	bl	8001190 <display_send_instruction>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <init_display>:

/**
 * @brief Initialise the display
 */
void init_display () {
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
    hardware_reset();
 800124e:	f7ff fe9f 	bl	8000f90 <hardware_reset>

    test_backlight();
 8001252:	f7ff feb9 	bl	8000fc8 <test_backlight>
//    init_backlight();

    uint16_t ins_length = 12;
 8001256:	230c      	movs	r3, #12
 8001258:	827b      	strh	r3, [r7, #18]
    uint8_t instructions[] = {
 800125a:	4a19      	ldr	r2, [pc, #100]	; (80012c0 <init_display+0x78>)
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001260:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0x01,
        0x38,
        0x0C,       // display on
    };

    if (display_send_instruction(instructions, ins_length))
 8001264:	8a7a      	ldrh	r2, [r7, #18]
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ff90 	bl	8001190 <display_send_instruction>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <init_display+0x32>
        handle_error();
 8001276:	f000 f827 	bl	80012c8 <handle_error>

    HAL_Delay(5);
 800127a:	2005      	movs	r0, #5
 800127c:	f000 ff72 	bl	8002164 <HAL_Delay>

    for (int i = 0; i < 4; ++i) {
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	e00b      	b.n	800129e <init_display+0x56>
        set_row(i);
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ffa2 	bl	80011d4 <set_row>
        display_write("0123456789", 10);
 8001290:	210a      	movs	r1, #10
 8001292:	480c      	ldr	r0, [pc, #48]	; (80012c4 <init_display+0x7c>)
 8001294:	f7ff ff8d 	bl	80011b2 <display_write>
    for (int i = 0; i < 4; ++i) {
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	3301      	adds	r3, #1
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	ddf0      	ble.n	8001286 <init_display+0x3e>
    }

    HAL_Delay(500);
 80012a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012a8:	f000 ff5c 	bl	8002164 <HAL_Delay>

    clear_display();
 80012ac:	f7ff ffbc 	bl	8001228 <clear_display>

    HAL_Delay(10);
 80012b0:	200a      	movs	r0, #10
 80012b2:	f000 ff57 	bl	8002164 <HAL_Delay>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	0800c8ec 	.word	0x0800c8ec
 80012c4:	0800c8e0 	.word	0x0800c8e0

080012c8 <handle_error>:
 *      Author: Dell
 */

#include "main.h"

void handle_error( void ) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012cc:	b672      	cpsid	i
}
 80012ce:	bf00      	nop
    __disable_irq();
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80012d0:	2201      	movs	r2, #1
 80012d2:	2120      	movs	r1, #32
 80012d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d8:	f002 fd88 	bl	8003dec <HAL_GPIO_WritePin>
    while (1)
 80012dc:	e7fe      	b.n	80012dc <handle_error+0x14>
	...

080012e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012e4:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <MX_FREERTOS_Init+0x38>)
 80012e6:	2100      	movs	r1, #0
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <MX_FREERTOS_Init+0x3c>)
 80012ea:	f007 fbb1 	bl	8008a50 <osThreadNew>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <MX_FREERTOS_Init+0x40>)
 80012f2:	6013      	str	r3, [r2, #0]

  /* creation of backlightTask */
  backlightTaskHandle = osThreadNew(startBacklightTask, NULL, &backlightTask_attributes);
 80012f4:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <MX_FREERTOS_Init+0x44>)
 80012f6:	2100      	movs	r1, #0
 80012f8:	480b      	ldr	r0, [pc, #44]	; (8001328 <MX_FREERTOS_Init+0x48>)
 80012fa:	f007 fba9 	bl	8008a50 <osThreadNew>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a0a      	ldr	r2, [pc, #40]	; (800132c <MX_FREERTOS_Init+0x4c>)
 8001302:	6013      	str	r3, [r2, #0]

  /* creation of clockTask */
  clockTaskHandle = osThreadNew(startClockTask, NULL, &clockTask_attributes);
 8001304:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <MX_FREERTOS_Init+0x50>)
 8001306:	2100      	movs	r1, #0
 8001308:	480a      	ldr	r0, [pc, #40]	; (8001334 <MX_FREERTOS_Init+0x54>)
 800130a:	f007 fba1 	bl	8008a50 <osThreadNew>
 800130e:	4603      	mov	r3, r0
 8001310:	4a09      	ldr	r2, [pc, #36]	; (8001338 <MX_FREERTOS_Init+0x58>)
 8001312:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	0800c9a8 	.word	0x0800c9a8
 800131c:	0800133d 	.word	0x0800133d
 8001320:	20001e84 	.word	0x20001e84
 8001324:	0800c9cc 	.word	0x0800c9cc
 8001328:	08001351 	.word	0x08001351
 800132c:	20001e8c 	.word	0x20001e8c
 8001330:	0800c9f0 	.word	0x0800c9f0
 8001334:	080013bd 	.word	0x080013bd
 8001338:	20001e88 	.word	0x20001e88

0800133c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001344:	2001      	movs	r0, #1
 8001346:	f007 fc15 	bl	8008b74 <osDelay>
 800134a:	e7fb      	b.n	8001344 <StartDefaultTask+0x8>
 800134c:	0000      	movs	r0, r0
	...

08001350 <startBacklightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBacklightTask */
void startBacklightTask(void *argument)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBacklightTask */
    TickType_t lastWakeTime;
    const TickType_t period = pdMS_TO_TICKS(100);
 8001358:	2364      	movs	r3, #100	; 0x64
 800135a:	617b      	str	r3, [r7, #20]
    lastWakeTime = xTaskGetTickCount();
 800135c:	f008 fd80 	bl	8009e60 <xTaskGetTickCount>
 8001360:	4603      	mov	r3, r0
 8001362:	60fb      	str	r3, [r7, #12]
    uint32_t pot;

  /* Infinite loop */
  for(;;)
  {
    HAL_ADC_Start(&hadc1);
 8001364:	4814      	ldr	r0, [pc, #80]	; (80013b8 <startBacklightTask+0x68>)
 8001366:	f001 fa81 	bl	800286c <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 800136a:	2101      	movs	r1, #1
 800136c:	4812      	ldr	r0, [pc, #72]	; (80013b8 <startBacklightTask+0x68>)
 800136e:	f001 fb37 	bl	80029e0 <HAL_ADC_PollForConversion>
    pot = HAL_ADC_GetValue(&hadc1);
 8001372:	4811      	ldr	r0, [pc, #68]	; (80013b8 <startBacklightTask+0x68>)
 8001374:	f001 fc0c 	bl	8002b90 <HAL_ADC_GetValue>
 8001378:	6138      	str	r0, [r7, #16]
    set_brightness((double)pot/POT_MAX);
 800137a:	6938      	ldr	r0, [r7, #16]
 800137c:	f7ff f8c2 	bl	8000504 <__aeabi_ui2d>
 8001380:	a30b      	add	r3, pc, #44	; (adr r3, 80013b0 <startBacklightTask+0x60>)
 8001382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001386:	f7ff fa61 	bl	800084c <__aeabi_ddiv>
 800138a:	4602      	mov	r2, r0
 800138c:	460b      	mov	r3, r1
 800138e:	ec43 2b17 	vmov	d7, r2, r3
 8001392:	eeb0 0a47 	vmov.f32	s0, s14
 8001396:	eef0 0a67 	vmov.f32	s1, s15
 800139a:	f000 fa41 	bl	8001820 <set_brightness>

    vTaskDelayUntil(&lastWakeTime, period);
 800139e:	f107 030c 	add.w	r3, r7, #12
 80013a2:	6979      	ldr	r1, [r7, #20]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f008 fb8d 	bl	8009ac4 <vTaskDelayUntil>
    HAL_ADC_Start(&hadc1);
 80013aa:	e7db      	b.n	8001364 <startBacklightTask+0x14>
 80013ac:	f3af 8000 	nop.w
 80013b0:	00000000 	.word	0x00000000
 80013b4:	40afc400 	.word	0x40afc400
 80013b8:	20001e20 	.word	0x20001e20

080013bc <startClockTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startClockTask */
void startClockTask(void *argument)
{
 80013bc:	b590      	push	{r4, r7, lr}
 80013be:	b08f      	sub	sp, #60	; 0x3c
 80013c0:	af02      	add	r7, sp, #8
 80013c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startClockTask */
    TickType_t lastWakeTime;
    const TickType_t period = pdMS_TO_TICKS(1000);
 80013c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    lastWakeTime = xTaskGetTickCount();
 80013ca:	f008 fd49 	bl	8009e60 <xTaskGetTickCount>
 80013ce:	4603      	mov	r3, r0
 80013d0:	61fb      	str	r3, [r7, #28]

    RTC_TimeTypeDef time;
    uint8_t buf_len = 8;
 80013d2:	2308      	movs	r3, #8
 80013d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    char buf[buf_len];
 80013d8:	f897 402b 	ldrb.w	r4, [r7, #43]	; 0x2b
 80013dc:	4623      	mov	r3, r4
 80013de:	3b01      	subs	r3, #1
 80013e0:	627b      	str	r3, [r7, #36]	; 0x24
 80013e2:	b2e0      	uxtb	r0, r4
 80013e4:	f04f 0100 	mov.w	r1, #0
 80013e8:	f04f 0200 	mov.w	r2, #0
 80013ec:	f04f 0300 	mov.w	r3, #0
 80013f0:	00cb      	lsls	r3, r1, #3
 80013f2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80013f6:	00c2      	lsls	r2, r0, #3
 80013f8:	b2e0      	uxtb	r0, r4
 80013fa:	f04f 0100 	mov.w	r1, #0
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	f04f 0300 	mov.w	r3, #0
 8001406:	00cb      	lsls	r3, r1, #3
 8001408:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800140c:	00c2      	lsls	r2, r0, #3
 800140e:	4623      	mov	r3, r4
 8001410:	3307      	adds	r3, #7
 8001412:	08db      	lsrs	r3, r3, #3
 8001414:	00db      	lsls	r3, r3, #3
 8001416:	ebad 0d03 	sub.w	sp, sp, r3
 800141a:	ab02      	add	r3, sp, #8
 800141c:	3300      	adds	r3, #0
 800141e:	623b      	str	r3, [r7, #32]

  /* Infinite loop */
  for(;;)
  {
    get_time(&time);
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff fd9f 	bl	8000f68 <get_time>
    sprintf(buf, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 800142a:	6a38      	ldr	r0, [r7, #32]
 800142c:	7a3b      	ldrb	r3, [r7, #8]
 800142e:	461a      	mov	r2, r3
 8001430:	7a7b      	ldrb	r3, [r7, #9]
 8001432:	4619      	mov	r1, r3
 8001434:	7abb      	ldrb	r3, [r7, #10]
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	460b      	mov	r3, r1
 800143a:	490b      	ldr	r1, [pc, #44]	; (8001468 <startClockTask+0xac>)
 800143c:	f00a f9cc 	bl	800b7d8 <siprintf>
    uart_println(buf);
 8001440:	6a3b      	ldr	r3, [r7, #32]
 8001442:	4618      	mov	r0, r3
 8001444:	f000 fd00 	bl	8001e48 <uart_println>
    display_write_row(buf, buf_len, 0);
 8001448:	6a3b      	ldr	r3, [r7, #32]
 800144a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800144e:	b291      	uxth	r1, r2
 8001450:	2200      	movs	r2, #0
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fed2 	bl	80011fc <display_write_row>

    vTaskDelayUntil(&lastWakeTime, period);
 8001458:	f107 031c 	add.w	r3, r7, #28
 800145c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800145e:	4618      	mov	r0, r3
 8001460:	f008 fb30 	bl	8009ac4 <vTaskDelayUntil>
    get_time(&time);
 8001464:	e7dc      	b.n	8001420 <startClockTask+0x64>
 8001466:	bf00      	nop
 8001468:	0800c920 	.word	0x0800c920

0800146c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]
 800147c:	609a      	str	r2, [r3, #8]
 800147e:	60da      	str	r2, [r3, #12]
 8001480:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001482:	4b40      	ldr	r3, [pc, #256]	; (8001584 <MX_GPIO_Init+0x118>)
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	4a3f      	ldr	r2, [pc, #252]	; (8001584 <MX_GPIO_Init+0x118>)
 8001488:	f043 0304 	orr.w	r3, r3, #4
 800148c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800148e:	4b3d      	ldr	r3, [pc, #244]	; (8001584 <MX_GPIO_Init+0x118>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	f003 0304 	and.w	r3, r3, #4
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800149a:	4b3a      	ldr	r3, [pc, #232]	; (8001584 <MX_GPIO_Init+0x118>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	4a39      	ldr	r2, [pc, #228]	; (8001584 <MX_GPIO_Init+0x118>)
 80014a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014a6:	4b37      	ldr	r3, [pc, #220]	; (8001584 <MX_GPIO_Init+0x118>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	4b34      	ldr	r3, [pc, #208]	; (8001584 <MX_GPIO_Init+0x118>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b6:	4a33      	ldr	r2, [pc, #204]	; (8001584 <MX_GPIO_Init+0x118>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014be:	4b31      	ldr	r3, [pc, #196]	; (8001584 <MX_GPIO_Init+0x118>)
 80014c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ca:	4b2e      	ldr	r3, [pc, #184]	; (8001584 <MX_GPIO_Init+0x118>)
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ce:	4a2d      	ldr	r2, [pc, #180]	; (8001584 <MX_GPIO_Init+0x118>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014d6:	4b2b      	ldr	r3, [pc, #172]	; (8001584 <MX_GPIO_Init+0x118>)
 80014d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	607b      	str	r3, [r7, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e2:	4b28      	ldr	r3, [pc, #160]	; (8001584 <MX_GPIO_Init+0x118>)
 80014e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e6:	4a27      	ldr	r2, [pc, #156]	; (8001584 <MX_GPIO_Init+0x118>)
 80014e8:	f043 0308 	orr.w	r3, r3, #8
 80014ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ee:	4b25      	ldr	r3, [pc, #148]	; (8001584 <MX_GPIO_Init+0x118>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	603b      	str	r3, [r7, #0]
 80014f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014fa:	2200      	movs	r2, #0
 80014fc:	2120      	movs	r1, #32
 80014fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001502:	f002 fc73 	bl	8003dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 8001506:	2201      	movs	r2, #1
 8001508:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800150c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001510:	f002 fc6c 	bl	8003dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Disp_Green_Pin|Disp_White_Pin, GPIO_PIN_RESET);
 8001514:	2200      	movs	r2, #0
 8001516:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800151a:	481b      	ldr	r0, [pc, #108]	; (8001588 <MX_GPIO_Init+0x11c>)
 800151c:	f002 fc66 	bl	8003dec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001520:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001526:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800152a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	4619      	mov	r1, r3
 8001536:	4814      	ldr	r0, [pc, #80]	; (8001588 <MX_GPIO_Init+0x11c>)
 8001538:	f002 faae 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Disp_Reset_Pin;
 800153c:	f248 0320 	movw	r3, #32800	; 0x8020
 8001540:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001542:	2301      	movs	r3, #1
 8001544:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001558:	f002 fa9e 	bl	8003a98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Disp_Green_Pin|Disp_White_Pin;
 800155c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001562:	2301      	movs	r3, #1
 8001564:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800156e:	f107 0314 	add.w	r3, r7, #20
 8001572:	4619      	mov	r1, r3
 8001574:	4804      	ldr	r0, [pc, #16]	; (8001588 <MX_GPIO_Init+0x11c>)
 8001576:	f002 fa8f 	bl	8003a98 <HAL_GPIO_Init>

}
 800157a:	bf00      	nop
 800157c:	3728      	adds	r7, #40	; 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40021000 	.word	0x40021000
 8001588:	48000800 	.word	0x48000800
 800158c:	00000000 	.word	0x00000000

08001590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001590:	b590      	push	{r4, r7, lr}
 8001592:	b08f      	sub	sp, #60	; 0x3c
 8001594:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001596:	f000 fda5 	bl	80020e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800159a:	f000 f8c3 	bl	8001724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800159e:	f7ff ff65 	bl	800146c <MX_GPIO_Init>
  MX_UART5_Init();
 80015a2:	f000 fcbb 	bl	8001f1c <MX_UART5_Init>
  MX_SPI2_Init();
 80015a6:	f000 f9c7 	bl	8001938 <MX_SPI2_Init>
  MX_RTC_Init();
 80015aa:	f000 f96b 	bl	8001884 <MX_RTC_Init>
  MX_TIM3_Init();
 80015ae:	f000 fb53 	bl	8001c58 <MX_TIM3_Init>
  MX_ADC1_Init();
 80015b2:	f7ff fbcf 	bl	8000d54 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80015b6:	2104      	movs	r1, #4
 80015b8:	4855      	ldr	r0, [pc, #340]	; (8001710 <main+0x180>)
 80015ba:	f004 ff27 	bl	800640c <HAL_TIM_PWM_Start>
  init_display();
 80015be:	f7ff fe43 	bl	8001248 <init_display>

  /* program variables */
  RTC_TimeTypeDef time;
  uint8_t buf_len = 8;
 80015c2:	2308      	movs	r3, #8
 80015c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  char buf[buf_len];
 80015c8:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 80015cc:	4623      	mov	r3, r4
 80015ce:	3b01      	subs	r3, #1
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80015d2:	b2e0      	uxtb	r0, r4
 80015d4:	f04f 0100 	mov.w	r1, #0
 80015d8:	f04f 0200 	mov.w	r2, #0
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	00cb      	lsls	r3, r1, #3
 80015e2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015e6:	00c2      	lsls	r2, r0, #3
 80015e8:	b2e0      	uxtb	r0, r4
 80015ea:	f04f 0100 	mov.w	r1, #0
 80015ee:	f04f 0200 	mov.w	r2, #0
 80015f2:	f04f 0300 	mov.w	r3, #0
 80015f6:	00cb      	lsls	r3, r1, #3
 80015f8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80015fc:	00c2      	lsls	r2, r0, #3
 80015fe:	4623      	mov	r3, r4
 8001600:	3307      	adds	r3, #7
 8001602:	08db      	lsrs	r3, r3, #3
 8001604:	00db      	lsls	r3, r3, #3
 8001606:	ebad 0d03 	sub.w	sp, sp, r3
 800160a:	ab02      	add	r3, sp, #8
 800160c:	3300      	adds	r3, #0
 800160e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pot;

  /* initialise time */
  set_backlight(WHITE, GPIO_PIN_SET);
 8001610:	2101      	movs	r1, #1
 8001612:	2000      	movs	r0, #0
 8001614:	f7ff fd20 	bl	8001058 <set_backlight>
  int h, m, s;
  display_write_row("Enter time", 10, 0);
 8001618:	2200      	movs	r2, #0
 800161a:	210a      	movs	r1, #10
 800161c:	483d      	ldr	r0, [pc, #244]	; (8001714 <main+0x184>)
 800161e:	f7ff fded 	bl	80011fc <display_write_row>
  uart_get_clock_input(buf);
 8001622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fc3f 	bl	8001ea8 <uart_get_clock_input>
  uart_println("");
 800162a:	483b      	ldr	r0, [pc, #236]	; (8001718 <main+0x188>)
 800162c:	f000 fc0c 	bl	8001e48 <uart_println>
  sscanf(buf, "%02d:%02d:%02d", &h, &m, &s);
 8001630:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001632:	1d39      	adds	r1, r7, #4
 8001634:	f107 0208 	add.w	r2, r7, #8
 8001638:	463b      	mov	r3, r7
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	460b      	mov	r3, r1
 800163e:	4937      	ldr	r1, [pc, #220]	; (800171c <main+0x18c>)
 8001640:	f00a f8ea 	bl	800b818 <siscanf>
  start_clock(h, m, s);
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	b2db      	uxtb	r3, r3
 8001648:	687a      	ldr	r2, [r7, #4]
 800164a:	b2d1      	uxtb	r1, r2
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	b2d2      	uxtb	r2, r2
 8001650:	4618      	mov	r0, r3
 8001652:	f7ff fc5f 	bl	8000f14 <start_clock>
  clear_display();
 8001656:	f7ff fde7 	bl	8001228 <clear_display>
  set_backlight(WHITE, GPIO_PIN_RESET);
 800165a:	2100      	movs	r1, #0
 800165c:	2000      	movs	r0, #0
 800165e:	f7ff fcfb 	bl	8001058 <set_backlight>
  set_brightness(1.0);
 8001662:	ed9f 0b27 	vldr	d0, [pc, #156]	; 8001700 <main+0x170>
 8001666:	f000 f8db 	bl	8001820 <set_brightness>

  /* initialise potentiometer */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800166a:	217f      	movs	r1, #127	; 0x7f
 800166c:	482c      	ldr	r0, [pc, #176]	; (8001720 <main+0x190>)
 800166e:	f001 ffa1 	bl	80035b4 <HAL_ADCEx_Calibration_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001672:	f007 f9a3 	bl	80089bc <osKernelInitialize>
  MX_FREERTOS_Init();
 8001676:	f7ff fe33 	bl	80012e0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 800167a:	f007 f9c3 	bl	8008a04 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//      uart_receive(&c, 1);
      HAL_Delay(100);
 800167e:	2064      	movs	r0, #100	; 0x64
 8001680:	f000 fd70 	bl	8002164 <HAL_Delay>

      /* potentiometer */
      HAL_ADC_Start(&hadc1);
 8001684:	4826      	ldr	r0, [pc, #152]	; (8001720 <main+0x190>)
 8001686:	f001 f8f1 	bl	800286c <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 10);
 800168a:	210a      	movs	r1, #10
 800168c:	4824      	ldr	r0, [pc, #144]	; (8001720 <main+0x190>)
 800168e:	f001 f9a7 	bl	80029e0 <HAL_ADC_PollForConversion>
      pot = HAL_ADC_GetValue(&hadc1);
 8001692:	4823      	ldr	r0, [pc, #140]	; (8001720 <main+0x190>)
 8001694:	f001 fa7c 	bl	8002b90 <HAL_ADC_GetValue>
 8001698:	6238      	str	r0, [r7, #32]
      uart_printnum(pot);
 800169a:	6a38      	ldr	r0, [r7, #32]
 800169c:	f000 fbec 	bl	8001e78 <uart_printnum>
      set_brightness((double)pot/POT_MAX);
 80016a0:	6a38      	ldr	r0, [r7, #32]
 80016a2:	f7fe ff2f 	bl	8000504 <__aeabi_ui2d>
 80016a6:	a318      	add	r3, pc, #96	; (adr r3, 8001708 <main+0x178>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	f7ff f8ce 	bl	800084c <__aeabi_ddiv>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	ec43 2b17 	vmov	d7, r2, r3
 80016b8:	eeb0 0a47 	vmov.f32	s0, s14
 80016bc:	eef0 0a67 	vmov.f32	s1, s15
 80016c0:	f000 f8ae 	bl	8001820 <set_brightness>

      /* get and write time */
      get_time(&time);
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	4618      	mov	r0, r3
 80016ca:	f7ff fc4d 	bl	8000f68 <get_time>
      sprintf(buf, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 80016ce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016d0:	7b3b      	ldrb	r3, [r7, #12]
 80016d2:	461a      	mov	r2, r3
 80016d4:	7b7b      	ldrb	r3, [r7, #13]
 80016d6:	4619      	mov	r1, r3
 80016d8:	7bbb      	ldrb	r3, [r7, #14]
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	460b      	mov	r3, r1
 80016de:	490f      	ldr	r1, [pc, #60]	; (800171c <main+0x18c>)
 80016e0:	f00a f87a 	bl	800b7d8 <siprintf>
      uart_println(buf);
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 fbae 	bl	8001e48 <uart_println>
      display_write_row(buf, buf_len, 0);
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 80016f2:	b291      	uxth	r1, r2
 80016f4:	2200      	movs	r2, #0
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fd80 	bl	80011fc <display_write_row>
      HAL_Delay(100);
 80016fc:	e7bf      	b.n	800167e <main+0xee>
 80016fe:	bf00      	nop
 8001700:	00000000 	.word	0x00000000
 8001704:	3ff00000 	.word	0x3ff00000
 8001708:	00000000 	.word	0x00000000
 800170c:	40afc400 	.word	0x40afc400
 8001710:	20001f64 	.word	0x20001f64
 8001714:	0800c930 	.word	0x0800c930
 8001718:	0800c93c 	.word	0x0800c93c
 800171c:	0800c940 	.word	0x0800c940
 8001720:	20001e20 	.word	0x20001e20

08001724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b096      	sub	sp, #88	; 0x58
 8001728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172a:	f107 0314 	add.w	r3, r7, #20
 800172e:	2244      	movs	r2, #68	; 0x44
 8001730:	2100      	movs	r1, #0
 8001732:	4618      	mov	r0, r3
 8001734:	f009 ff74 	bl	800b620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001738:	463b      	mov	r3, r7
 800173a:	2200      	movs	r2, #0
 800173c:	601a      	str	r2, [r3, #0]
 800173e:	605a      	str	r2, [r3, #4]
 8001740:	609a      	str	r2, [r3, #8]
 8001742:	60da      	str	r2, [r3, #12]
 8001744:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001746:	f44f 7000 	mov.w	r0, #512	; 0x200
 800174a:	f002 fb75 	bl	8003e38 <HAL_PWREx_ControlVoltageScaling>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d001      	beq.n	8001758 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001754:	f000 f85c 	bl	8001810 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001758:	230a      	movs	r3, #10
 800175a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800175c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001760:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001762:	2310      	movs	r3, #16
 8001764:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001766:	2301      	movs	r3, #1
 8001768:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800176a:	2302      	movs	r3, #2
 800176c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800176e:	2302      	movs	r3, #2
 8001770:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001772:	2301      	movs	r3, #1
 8001774:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001776:	230a      	movs	r3, #10
 8001778:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800177a:	2307      	movs	r3, #7
 800177c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800177e:	2302      	movs	r3, #2
 8001780:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001782:	2302      	movs	r3, #2
 8001784:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001786:	f107 0314 	add.w	r3, r7, #20
 800178a:	4618      	mov	r0, r3
 800178c:	f002 fbaa 	bl	8003ee4 <HAL_RCC_OscConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001796:	f000 f83b 	bl	8001810 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800179a:	230f      	movs	r3, #15
 800179c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179e:	2303      	movs	r3, #3
 80017a0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a2:	2300      	movs	r3, #0
 80017a4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80017ae:	463b      	mov	r3, r7
 80017b0:	2104      	movs	r1, #4
 80017b2:	4618      	mov	r0, r3
 80017b4:	f002 ff7c 	bl	80046b0 <HAL_RCC_ClockConfig>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80017be:	f000 f827 	bl	8001810 <Error_Handler>
  }
}
 80017c2:	bf00      	nop
 80017c4:	3758      	adds	r7, #88	; 0x58
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
	...

080017cc <HAL_UART_TxCpltCallback>:
* @note This example shows a simple way to report end of IT Tx transfer, and
* you can add your own implementation.
* @retval None
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
    /* Set transmission flag: transfer complete*/
    uartReady = SET;
 80017d4:	4b04      	ldr	r3, [pc, #16]	; (80017e8 <HAL_UART_TxCpltCallback+0x1c>)
 80017d6:	2201      	movs	r2, #1
 80017d8:	701a      	strb	r2, [r3, #0]
}
 80017da:	bf00      	nop
 80017dc:	370c      	adds	r7, #12
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	200000a0 	.word	0x200000a0

080017ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d101      	bne.n	8001802 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017fe:	f000 fc91 	bl	8002124 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001802:	bf00      	nop
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40012c00 	.word	0x40012c00

08001810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    handle_error();
 8001814:	f7ff fd58 	bl	80012c8 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	0000      	movs	r0, r0
	...

08001820 <set_brightness>:

/**
 * @brief Change the PWM pulse width of the red background light
 * @param[in] brightness The brightness of the backlight from 0 to 1
 */
void set_brightness (double brightness) {
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	ed87 0b00 	vstr	d0, [r7]
    brightness *= brightness * brightness;  // brightness^3
 800182a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800182e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001832:	f7fe fee1 	bl	80005f8 <__aeabi_dmul>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800183e:	f7fe fedb 	bl	80005f8 <__aeabi_dmul>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	e9c7 2300 	strd	r2, r3, [r7]
    uint16_t pulse = (uint16_t) (brightness * (double)0xFFFF);
 800184a:	a30c      	add	r3, pc, #48	; (adr r3, 800187c <set_brightness+0x5c>)
 800184c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001850:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001854:	f7fe fed0 	bl	80005f8 <__aeabi_dmul>
 8001858:	4602      	mov	r2, r0
 800185a:	460b      	mov	r3, r1
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	f7ff f8dc 	bl	8000a1c <__aeabi_d2uiz>
 8001864:	4603      	mov	r3, r0
 8001866:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim3, CHANNEL, pulse);
 8001868:	4b03      	ldr	r3, [pc, #12]	; (8001878 <set_brightness+0x58>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	89fa      	ldrh	r2, [r7, #14]
 800186e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20001f64 	.word	0x20001f64
 800187c:	00000000 	.word	0x00000000
 8001880:	40efffe0 	.word	0x40efffe0

08001884 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001888:	4b10      	ldr	r3, [pc, #64]	; (80018cc <MX_RTC_Init+0x48>)
 800188a:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <MX_RTC_Init+0x4c>)
 800188c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800188e:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <MX_RTC_Init+0x48>)
 8001890:	2200      	movs	r2, #0
 8001892:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001894:	4b0d      	ldr	r3, [pc, #52]	; (80018cc <MX_RTC_Init+0x48>)
 8001896:	227f      	movs	r2, #127	; 0x7f
 8001898:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800189a:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_RTC_Init+0x48>)
 800189c:	22ff      	movs	r2, #255	; 0xff
 800189e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80018a0:	4b0a      	ldr	r3, [pc, #40]	; (80018cc <MX_RTC_Init+0x48>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80018a6:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_RTC_Init+0x48>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80018ac:	4b07      	ldr	r3, [pc, #28]	; (80018cc <MX_RTC_Init+0x48>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_RTC_Init+0x48>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80018b8:	4804      	ldr	r0, [pc, #16]	; (80018cc <MX_RTC_Init+0x48>)
 80018ba:	f003 fded 	bl	8005498 <HAL_RTC_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 80018c4:	f7ff ffa4 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018c8:	bf00      	nop
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20001e90 	.word	0x20001e90
 80018d0:	40002800 	.word	0x40002800

080018d4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b0a4      	sub	sp, #144	; 0x90
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018dc:	f107 0308 	add.w	r3, r7, #8
 80018e0:	2288      	movs	r2, #136	; 0x88
 80018e2:	2100      	movs	r1, #0
 80018e4:	4618      	mov	r0, r3
 80018e6:	f009 fe9b 	bl	800b620 <memset>
  if(rtcHandle->Instance==RTC)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a10      	ldr	r2, [pc, #64]	; (8001930 <HAL_RTC_MspInit+0x5c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d118      	bne.n	8001926 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80018f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80018f8:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80018fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80018fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	4618      	mov	r0, r3
 8001908:	f003 f90a 	bl	8004b20 <HAL_RCCEx_PeriphCLKConfig>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001912:	f7ff ff7d 	bl	8001810 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001916:	4b07      	ldr	r3, [pc, #28]	; (8001934 <HAL_RTC_MspInit+0x60>)
 8001918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191c:	4a05      	ldr	r2, [pc, #20]	; (8001934 <HAL_RTC_MspInit+0x60>)
 800191e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001922:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001926:	bf00      	nop
 8001928:	3790      	adds	r7, #144	; 0x90
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40002800 	.word	0x40002800
 8001934:	40021000 	.word	0x40021000

08001938 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800193c:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <MX_SPI2_Init+0x74>)
 800193e:	4a1c      	ldr	r2, [pc, #112]	; (80019b0 <MX_SPI2_Init+0x78>)
 8001940:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001942:	4b1a      	ldr	r3, [pc, #104]	; (80019ac <MX_SPI2_Init+0x74>)
 8001944:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001948:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <MX_SPI2_Init+0x74>)
 800194c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001950:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001952:	4b16      	ldr	r3, [pc, #88]	; (80019ac <MX_SPI2_Init+0x74>)
 8001954:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001958:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800195a:	4b14      	ldr	r3, [pc, #80]	; (80019ac <MX_SPI2_Init+0x74>)
 800195c:	2202      	movs	r2, #2
 800195e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001960:	4b12      	ldr	r3, [pc, #72]	; (80019ac <MX_SPI2_Init+0x74>)
 8001962:	2201      	movs	r2, #1
 8001964:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001966:	4b11      	ldr	r3, [pc, #68]	; (80019ac <MX_SPI2_Init+0x74>)
 8001968:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800196c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800196e:	4b0f      	ldr	r3, [pc, #60]	; (80019ac <MX_SPI2_Init+0x74>)
 8001970:	2230      	movs	r2, #48	; 0x30
 8001972:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8001974:	4b0d      	ldr	r3, [pc, #52]	; (80019ac <MX_SPI2_Init+0x74>)
 8001976:	2280      	movs	r2, #128	; 0x80
 8001978:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800197a:	4b0c      	ldr	r3, [pc, #48]	; (80019ac <MX_SPI2_Init+0x74>)
 800197c:	2200      	movs	r2, #0
 800197e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <MX_SPI2_Init+0x74>)
 8001982:	2200      	movs	r2, #0
 8001984:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001986:	4b09      	ldr	r3, [pc, #36]	; (80019ac <MX_SPI2_Init+0x74>)
 8001988:	2207      	movs	r2, #7
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800198c:	4b07      	ldr	r3, [pc, #28]	; (80019ac <MX_SPI2_Init+0x74>)
 800198e:	2200      	movs	r2, #0
 8001990:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001992:	4b06      	ldr	r3, [pc, #24]	; (80019ac <MX_SPI2_Init+0x74>)
 8001994:	2200      	movs	r2, #0
 8001996:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001998:	4804      	ldr	r0, [pc, #16]	; (80019ac <MX_SPI2_Init+0x74>)
 800199a:	f004 f897 	bl	8005acc <HAL_SPI_Init>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80019a4:	f7ff ff34 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80019a8:	bf00      	nop
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	20001eb4 	.word	0x20001eb4
 80019b0:	40003800 	.word	0x40003800

080019b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b08a      	sub	sp, #40	; 0x28
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	2200      	movs	r2, #0
 80019c2:	601a      	str	r2, [r3, #0]
 80019c4:	605a      	str	r2, [r3, #4]
 80019c6:	609a      	str	r2, [r3, #8]
 80019c8:	60da      	str	r2, [r3, #12]
 80019ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a25      	ldr	r2, [pc, #148]	; (8001a68 <HAL_SPI_MspInit+0xb4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d144      	bne.n	8001a60 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019d6:	4b25      	ldr	r3, [pc, #148]	; (8001a6c <HAL_SPI_MspInit+0xb8>)
 80019d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019da:	4a24      	ldr	r2, [pc, #144]	; (8001a6c <HAL_SPI_MspInit+0xb8>)
 80019dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019e0:	6593      	str	r3, [r2, #88]	; 0x58
 80019e2:	4b22      	ldr	r3, [pc, #136]	; (8001a6c <HAL_SPI_MspInit+0xb8>)
 80019e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ea:	613b      	str	r3, [r7, #16]
 80019ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ee:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <HAL_SPI_MspInit+0xb8>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	4a1e      	ldr	r2, [pc, #120]	; (8001a6c <HAL_SPI_MspInit+0xb8>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019fa:	4b1c      	ldr	r3, [pc, #112]	; (8001a6c <HAL_SPI_MspInit+0xb8>)
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	60fb      	str	r3, [r7, #12]
 8001a04:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <HAL_SPI_MspInit+0xb8>)
 8001a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0a:	4a18      	ldr	r2, [pc, #96]	; (8001a6c <HAL_SPI_MspInit+0xb8>)
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <HAL_SPI_MspInit+0xb8>)
 8001a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	60bb      	str	r3, [r7, #8]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = Display_OUT_Pin;
 8001a1e:	2308      	movs	r3, #8
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2a:	2303      	movs	r3, #3
 8001a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a2e:	2305      	movs	r3, #5
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Display_OUT_GPIO_Port, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	480d      	ldr	r0, [pc, #52]	; (8001a70 <HAL_SPI_MspInit+0xbc>)
 8001a3a:	f002 f82d 	bl	8003a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Dispay_CLK_Pin|Display_CS_Pin;
 8001a3e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a50:	2305      	movs	r3, #5
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4806      	ldr	r0, [pc, #24]	; (8001a74 <HAL_SPI_MspInit+0xc0>)
 8001a5c:	f002 f81c 	bl	8003a98 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	; 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40003800 	.word	0x40003800
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	48000800 	.word	0x48000800
 8001a74:	48000400 	.word	0x48000400

08001a78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7e:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a82:	4a10      	ldr	r2, [pc, #64]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6613      	str	r3, [r2, #96]	; 0x60
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aa0:	6593      	str	r3, [r2, #88]	; 0x58
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <HAL_MspInit+0x4c>)
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	603b      	str	r3, [r7, #0]
 8001aac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001aae:	2200      	movs	r2, #0
 8001ab0:	210f      	movs	r1, #15
 8001ab2:	f06f 0001 	mvn.w	r0, #1
 8001ab6:	f001 ff45 	bl	8003944 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08c      	sub	sp, #48	; 0x30
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001ad8:	2200      	movs	r2, #0
 8001ada:	6879      	ldr	r1, [r7, #4]
 8001adc:	2019      	movs	r0, #25
 8001ade:	f001 ff31 	bl	8003944 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ae2:	2019      	movs	r0, #25
 8001ae4:	f001 ff4a 	bl	800397c <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <HAL_InitTick+0x9c>)
 8001aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aec:	4a1d      	ldr	r2, [pc, #116]	; (8001b64 <HAL_InitTick+0x9c>)
 8001aee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001af2:	6613      	str	r3, [r2, #96]	; 0x60
 8001af4:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <HAL_InitTick+0x9c>)
 8001af6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b00:	f107 0210 	add.w	r2, r7, #16
 8001b04:	f107 0314 	add.w	r3, r7, #20
 8001b08:	4611      	mov	r1, r2
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f002 ff76 	bl	80049fc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b10:	f002 ff5e 	bl	80049d0 <HAL_RCC_GetPCLK2Freq>
 8001b14:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b18:	4a13      	ldr	r2, [pc, #76]	; (8001b68 <HAL_InitTick+0xa0>)
 8001b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1e:	0c9b      	lsrs	r3, r3, #18
 8001b20:	3b01      	subs	r3, #1
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <HAL_InitTick+0xa4>)
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <HAL_InitTick+0xa8>)
 8001b28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <HAL_InitTick+0xa4>)
 8001b2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b30:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b32:	4a0e      	ldr	r2, [pc, #56]	; (8001b6c <HAL_InitTick+0xa4>)
 8001b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b36:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <HAL_InitTick+0xa4>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_InitTick+0xa4>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001b44:	4809      	ldr	r0, [pc, #36]	; (8001b6c <HAL_InitTick+0xa4>)
 8001b46:	f004 fb37 	bl	80061b8 <HAL_TIM_Base_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d104      	bne.n	8001b5a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001b50:	4806      	ldr	r0, [pc, #24]	; (8001b6c <HAL_InitTick+0xa4>)
 8001b52:	f004 fb89 	bl	8006268 <HAL_TIM_Base_Start_IT>
 8001b56:	4603      	mov	r3, r0
 8001b58:	e000      	b.n	8001b5c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3730      	adds	r7, #48	; 0x30
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40021000 	.word	0x40021000
 8001b68:	431bde83 	.word	0x431bde83
 8001b6c:	20001f18 	.word	0x20001f18
 8001b70:	40012c00 	.word	0x40012c00

08001b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b78:	e7fe      	b.n	8001b78 <NMI_Handler+0x4>

08001b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b7e:	e7fe      	b.n	8001b7e <HardFault_Handler+0x4>

08001b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b80:	b480      	push	{r7}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b84:	e7fe      	b.n	8001b84 <MemManage_Handler+0x4>

08001b86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b86:	b480      	push	{r7}
 8001b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b8a:	e7fe      	b.n	8001b8a <BusFault_Handler+0x4>

08001b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b90:	e7fe      	b.n	8001b90 <UsageFault_Handler+0x4>

08001b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b92:	b480      	push	{r7}
 8001b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ba4:	4802      	ldr	r0, [pc, #8]	; (8001bb0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001ba6:	f004 fd37 	bl	8006618 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	20001f18 	.word	0x20001f18

08001bb4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001bb8:	4802      	ldr	r0, [pc, #8]	; (8001bc4 <UART5_IRQHandler+0x10>)
 8001bba:	f005 fedd 	bl	8007978 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001bbe:	bf00      	nop
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	20001fb0 	.word	0x20001fb0

08001bc8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bd0:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <_sbrk+0x5c>)
 8001bd2:	4b15      	ldr	r3, [pc, #84]	; (8001c28 <_sbrk+0x60>)
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bdc:	4b13      	ldr	r3, [pc, #76]	; (8001c2c <_sbrk+0x64>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d102      	bne.n	8001bea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <_sbrk+0x64>)
 8001be6:	4a12      	ldr	r2, [pc, #72]	; (8001c30 <_sbrk+0x68>)
 8001be8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bea:	4b10      	ldr	r3, [pc, #64]	; (8001c2c <_sbrk+0x64>)
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4413      	add	r3, r2
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d207      	bcs.n	8001c08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf8:	f009 fcd8 	bl	800b5ac <__errno>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	220c      	movs	r2, #12
 8001c00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c02:	f04f 33ff 	mov.w	r3, #4294967295
 8001c06:	e009      	b.n	8001c1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c08:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <_sbrk+0x64>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0e:	4b07      	ldr	r3, [pc, #28]	; (8001c2c <_sbrk+0x64>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4413      	add	r3, r2
 8001c16:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <_sbrk+0x64>)
 8001c18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	20018000 	.word	0x20018000
 8001c28:	00000400 	.word	0x00000400
 8001c2c:	200000a4 	.word	0x200000a4
 8001c30:	20002088 	.word	0x20002088

08001c34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <SystemInit+0x20>)
 8001c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c3e:	4a05      	ldr	r2, [pc, #20]	; (8001c54 <SystemInit+0x20>)
 8001c40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed00 	.word	0xe000ed00

08001c58 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b08e      	sub	sp, #56	; 0x38
 8001c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c62:	2200      	movs	r2, #0
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	605a      	str	r2, [r3, #4]
 8001c68:	609a      	str	r2, [r3, #8]
 8001c6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c6c:	f107 031c 	add.w	r3, r7, #28
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c78:	463b      	mov	r3, r7
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
 8001c82:	60da      	str	r2, [r3, #12]
 8001c84:	611a      	str	r2, [r3, #16]
 8001c86:	615a      	str	r2, [r3, #20]
 8001c88:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c8a:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001c8c:	4a2d      	ldr	r2, [pc, #180]	; (8001d44 <MX_TIM3_Init+0xec>)
 8001c8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c90:	4b2b      	ldr	r3, [pc, #172]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c96:	4b2a      	ldr	r3, [pc, #168]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c9c:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001c9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca4:	4b26      	ldr	r3, [pc, #152]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001caa:	4b25      	ldr	r3, [pc, #148]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001cb0:	4823      	ldr	r0, [pc, #140]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001cb2:	f004 fa81 	bl	80061b8 <HAL_TIM_Base_Init>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001cbc:	f7ff fda8 	bl	8001810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cc4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001cc6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cca:	4619      	mov	r1, r3
 8001ccc:	481c      	ldr	r0, [pc, #112]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001cce:	f004 fed7 	bl	8006a80 <HAL_TIM_ConfigClockSource>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d001      	beq.n	8001cdc <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001cd8:	f7ff fd9a 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001cdc:	4818      	ldr	r0, [pc, #96]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001cde:	f004 fb33 	bl	8006348 <HAL_TIM_PWM_Init>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001ce8:	f7ff fd92 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cf4:	f107 031c 	add.w	r3, r7, #28
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	4811      	ldr	r0, [pc, #68]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001cfc:	f005 fbe2 	bl	80074c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001d06:	f7ff fd83 	bl	8001810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d0a:	2360      	movs	r3, #96	; 0x60
 8001d0c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4807      	ldr	r0, [pc, #28]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001d22:	f004 fd99 	bl	8006858 <HAL_TIM_PWM_ConfigChannel>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001d2c:	f7ff fd70 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001d30:	4803      	ldr	r0, [pc, #12]	; (8001d40 <MX_TIM3_Init+0xe8>)
 8001d32:	f000 f829 	bl	8001d88 <HAL_TIM_MspPostInit>

}
 8001d36:	bf00      	nop
 8001d38:	3738      	adds	r7, #56	; 0x38
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	20001f64 	.word	0x20001f64
 8001d44:	40000400 	.word	0x40000400

08001d48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0a      	ldr	r2, [pc, #40]	; (8001d80 <HAL_TIM_Base_MspInit+0x38>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10b      	bne.n	8001d72 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_TIM_Base_MspInit+0x3c>)
 8001d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <HAL_TIM_Base_MspInit+0x3c>)
 8001d60:	f043 0302 	orr.w	r3, r3, #2
 8001d64:	6593      	str	r3, [r2, #88]	; 0x58
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <HAL_TIM_Base_MspInit+0x3c>)
 8001d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001d72:	bf00      	nop
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	40000400 	.word	0x40000400
 8001d84:	40021000 	.word	0x40021000

08001d88 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b088      	sub	sp, #32
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d90:	f107 030c 	add.w	r3, r7, #12
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
 8001d98:	605a      	str	r2, [r3, #4]
 8001d9a:	609a      	str	r2, [r3, #8]
 8001d9c:	60da      	str	r2, [r3, #12]
 8001d9e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a11      	ldr	r2, [pc, #68]	; (8001dec <HAL_TIM_MspPostInit+0x64>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d11b      	bne.n	8001de2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001daa:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <HAL_TIM_MspPostInit+0x68>)
 8001dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dae:	4a10      	ldr	r2, [pc, #64]	; (8001df0 <HAL_TIM_MspPostInit+0x68>)
 8001db0:	f043 0304 	orr.w	r3, r3, #4
 8001db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001db6:	4b0e      	ldr	r3, [pc, #56]	; (8001df0 <HAL_TIM_MspPostInit+0x68>)
 8001db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Red_PWM_Pin;
 8001dc2:	2380      	movs	r3, #128	; 0x80
 8001dc4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Red_PWM_GPIO_Port, &GPIO_InitStruct);
 8001dd6:	f107 030c 	add.w	r3, r7, #12
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4805      	ldr	r0, [pc, #20]	; (8001df4 <HAL_TIM_MspPostInit+0x6c>)
 8001dde:	f001 fe5b 	bl	8003a98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001de2:	bf00      	nop
 8001de4:	3720      	adds	r7, #32
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40000400 	.word	0x40000400
 8001df0:	40021000 	.word	0x40021000
 8001df4:	48000800 	.word	0x48000800

08001df8 <uart_send>:

/**
 * @brief Send a string over uart
 * @param[in] message The character array to send
 */
int uart_send (char *buffer, uint16_t length) {
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	460b      	mov	r3, r1
 8001e02:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Transmit(&huart5, (uint8_t*)buffer, length, TIMEOUT);
 8001e04:	887a      	ldrh	r2, [r7, #2]
 8001e06:	f04f 33ff 	mov.w	r3, #4294967295
 8001e0a:	6879      	ldr	r1, [r7, #4]
 8001e0c:	4803      	ldr	r0, [pc, #12]	; (8001e1c <uart_send+0x24>)
 8001e0e:	f005 fc4d 	bl	80076ac <HAL_UART_Transmit>
 8001e12:	4603      	mov	r3, r0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3708      	adds	r7, #8
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	20001fb0 	.word	0x20001fb0

08001e20 <uart_receive>:
/**
 * @brief Recieve a string over uart
 * @param[out] buffer The place to write the recieved string
 * @param[in] length The amount of data to read
 */
int uart_receive (char *buffer, uint16_t length) {
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	460b      	mov	r3, r1
 8001e2a:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Receive(&huart5, (uint8_t *)buffer, length, TIMEOUT);
 8001e2c:	887a      	ldrh	r2, [r7, #2]
 8001e2e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	4803      	ldr	r0, [pc, #12]	; (8001e44 <uart_receive+0x24>)
 8001e36:	f005 fccd 	bl	80077d4 <HAL_UART_Receive>
 8001e3a:	4603      	mov	r3, r0
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3708      	adds	r7, #8
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20001fb0 	.word	0x20001fb0

08001e48 <uart_println>:

/**
 * @brief send a string line to uart
 * @param[in] string The string to send
 */
int uart_println (char *string) {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
    uart_send(string, strlen(string));
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7fe f9bd 	bl	80001d0 <strlen>
 8001e56:	4603      	mov	r3, r0
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f7ff ffcb 	bl	8001df8 <uart_send>
    return uart_send("\r\n", 2);
 8001e62:	2102      	movs	r1, #2
 8001e64:	4803      	ldr	r0, [pc, #12]	; (8001e74 <uart_println+0x2c>)
 8001e66:	f7ff ffc7 	bl	8001df8 <uart_send>
 8001e6a:	4603      	mov	r3, r0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3708      	adds	r7, #8
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	0800c950 	.word	0x0800c950

08001e78 <uart_printnum>:

/**
 * @brief Print a number over uart
 */
int uart_printnum (uint32_t num) {
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
    char buf[20];
    sprintf(buf, "%lu", num);
 8001e80:	f107 030c 	add.w	r3, r7, #12
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	4907      	ldr	r1, [pc, #28]	; (8001ea4 <uart_printnum+0x2c>)
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f009 fca5 	bl	800b7d8 <siprintf>
    return uart_println(buf);
 8001e8e:	f107 030c 	add.w	r3, r7, #12
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ffd8 	bl	8001e48 <uart_println>
 8001e98:	4603      	mov	r3, r0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3720      	adds	r7, #32
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	0800c954 	.word	0x0800c954

08001ea8 <uart_get_clock_input>:

/**
 * @brief Let user input the time
 * @param[out] buffer The buffer to write to
 */
void uart_get_clock_input (char *buffer) {
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
    uart_println("Please enter the time in HH:MM:SS format!");
 8001eb0:	4819      	ldr	r0, [pc, #100]	; (8001f18 <uart_get_clock_input+0x70>)
 8001eb2:	f7ff ffc9 	bl	8001e48 <uart_println>

    char c;
    uint8_t i = 0;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	73fb      	strb	r3, [r7, #15]
    while (1) {
        uart_receive(&c, 1);
 8001eba:	f107 030e 	add.w	r3, r7, #14
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff ffad 	bl	8001e20 <uart_receive>
        /* as long as i < 8 and c != \r
         * If a char 127 (backspace) is written
         * move cursor back */

        /* check if done */
        if (i == 8) {
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d105      	bne.n	8001ed8 <uart_get_clock_input+0x30>
            if (c == '\r')
 8001ecc:	7bbb      	ldrb	r3, [r7, #14]
 8001ece:	2b0d      	cmp	r3, #13
 8001ed0:	d01d      	beq.n	8001f0e <uart_get_clock_input+0x66>
                break;
            else if (c != 127)
 8001ed2:	7bbb      	ldrb	r3, [r7, #14]
 8001ed4:	2b7f      	cmp	r3, #127	; 0x7f
 8001ed6:	d118      	bne.n	8001f0a <uart_get_clock_input+0x62>
                continue;
        }

        uart_send(&c, 1);
 8001ed8:	f107 030e 	add.w	r3, r7, #14
 8001edc:	2101      	movs	r1, #1
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff ff8a 	bl	8001df8 <uart_send>

        /* write to buffer */
        if (c == 127) {
 8001ee4:	7bbb      	ldrb	r3, [r7, #14]
 8001ee6:	2b7f      	cmp	r3, #127	; 0x7f
 8001ee8:	d106      	bne.n	8001ef8 <uart_get_clock_input+0x50>
            if (i != 0)
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0e4      	beq.n	8001eba <uart_get_clock_input+0x12>
                --i;
 8001ef0:	7bfb      	ldrb	r3, [r7, #15]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	73fb      	strb	r3, [r7, #15]
 8001ef6:	e7e0      	b.n	8001eba <uart_get_clock_input+0x12>
        }
        else
            buffer[i++] = c;
 8001ef8:	7bfb      	ldrb	r3, [r7, #15]
 8001efa:	1c5a      	adds	r2, r3, #1
 8001efc:	73fa      	strb	r2, [r7, #15]
 8001efe:	461a      	mov	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	4413      	add	r3, r2
 8001f04:	7bba      	ldrb	r2, [r7, #14]
 8001f06:	701a      	strb	r2, [r3, #0]
 8001f08:	e7d7      	b.n	8001eba <uart_get_clock_input+0x12>
                continue;
 8001f0a:	bf00      	nop
        uart_receive(&c, 1);
 8001f0c:	e7d5      	b.n	8001eba <uart_get_clock_input+0x12>
                break;
 8001f0e:	bf00      	nop
    }
}
 8001f10:	bf00      	nop
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	0800c958 	.word	0x0800c958

08001f1c <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001f20:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <MX_UART5_Init+0x58>)
 8001f22:	4a15      	ldr	r2, [pc, #84]	; (8001f78 <MX_UART5_Init+0x5c>)
 8001f24:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001f26:	4b13      	ldr	r3, [pc, #76]	; (8001f74 <MX_UART5_Init+0x58>)
 8001f28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f2c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <MX_UART5_Init+0x58>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <MX_UART5_Init+0x58>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <MX_UART5_Init+0x58>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001f40:	4b0c      	ldr	r3, [pc, #48]	; (8001f74 <MX_UART5_Init+0x58>)
 8001f42:	220c      	movs	r2, #12
 8001f44:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <MX_UART5_Init+0x58>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f4c:	4b09      	ldr	r3, [pc, #36]	; (8001f74 <MX_UART5_Init+0x58>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f52:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <MX_UART5_Init+0x58>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f58:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <MX_UART5_Init+0x58>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f5e:	4805      	ldr	r0, [pc, #20]	; (8001f74 <MX_UART5_Init+0x58>)
 8001f60:	f005 fb56 	bl	8007610 <HAL_UART_Init>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d001      	beq.n	8001f6e <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001f6a:	f7ff fc51 	bl	8001810 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001f6e:	bf00      	nop
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20001fb0 	.word	0x20001fb0
 8001f78:	40005000 	.word	0x40005000

08001f7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b0ac      	sub	sp, #176	; 0xb0
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	605a      	str	r2, [r3, #4]
 8001f8e:	609a      	str	r2, [r3, #8]
 8001f90:	60da      	str	r2, [r3, #12]
 8001f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	2288      	movs	r2, #136	; 0x88
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f009 fb3f 	bl	800b620 <memset>
  if(uartHandle->Instance==UART5)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a36      	ldr	r2, [pc, #216]	; (8002080 <HAL_UART_MspInit+0x104>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d164      	bne.n	8002076 <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001fac:	2310      	movs	r3, #16
 8001fae:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001fb4:	f107 0314 	add.w	r3, r7, #20
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f002 fdb1 	bl	8004b20 <HAL_RCCEx_PeriphCLKConfig>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d001      	beq.n	8001fc8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001fc4:	f7ff fc24 	bl	8001810 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001fc8:	4b2e      	ldr	r3, [pc, #184]	; (8002084 <HAL_UART_MspInit+0x108>)
 8001fca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fcc:	4a2d      	ldr	r2, [pc, #180]	; (8002084 <HAL_UART_MspInit+0x108>)
 8001fce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fd2:	6593      	str	r3, [r2, #88]	; 0x58
 8001fd4:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <HAL_UART_MspInit+0x108>)
 8001fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fe0:	4b28      	ldr	r3, [pc, #160]	; (8002084 <HAL_UART_MspInit+0x108>)
 8001fe2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe4:	4a27      	ldr	r2, [pc, #156]	; (8002084 <HAL_UART_MspInit+0x108>)
 8001fe6:	f043 0304 	orr.w	r3, r3, #4
 8001fea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fec:	4b25      	ldr	r3, [pc, #148]	; (8002084 <HAL_UART_MspInit+0x108>)
 8001fee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ff8:	4b22      	ldr	r3, [pc, #136]	; (8002084 <HAL_UART_MspInit+0x108>)
 8001ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffc:	4a21      	ldr	r2, [pc, #132]	; (8002084 <HAL_UART_MspInit+0x108>)
 8001ffe:	f043 0308 	orr.w	r3, r3, #8
 8002002:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002004:	4b1f      	ldr	r3, [pc, #124]	; (8002084 <HAL_UART_MspInit+0x108>)
 8002006:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002008:	f003 0308 	and.w	r3, r3, #8
 800200c:	60bb      	str	r3, [r7, #8]
 800200e:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002014:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002018:	2302      	movs	r3, #2
 800201a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002024:	2303      	movs	r3, #3
 8002026:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800202a:	2308      	movs	r3, #8
 800202c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002030:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002034:	4619      	mov	r1, r3
 8002036:	4814      	ldr	r0, [pc, #80]	; (8002088 <HAL_UART_MspInit+0x10c>)
 8002038:	f001 fd2e 	bl	8003a98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800203c:	2304      	movs	r3, #4
 800203e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002042:	2302      	movs	r3, #2
 8002044:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800204e:	2303      	movs	r3, #3
 8002050:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002054:	2308      	movs	r3, #8
 8002056:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800205a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800205e:	4619      	mov	r1, r3
 8002060:	480a      	ldr	r0, [pc, #40]	; (800208c <HAL_UART_MspInit+0x110>)
 8002062:	f001 fd19 	bl	8003a98 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	2105      	movs	r1, #5
 800206a:	2035      	movs	r0, #53	; 0x35
 800206c:	f001 fc6a 	bl	8003944 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002070:	2035      	movs	r0, #53	; 0x35
 8002072:	f001 fc83 	bl	800397c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8002076:	bf00      	nop
 8002078:	37b0      	adds	r7, #176	; 0xb0
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40005000 	.word	0x40005000
 8002084:	40021000 	.word	0x40021000
 8002088:	48000800 	.word	0x48000800
 800208c:	48000c00 	.word	0x48000c00

08002090 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002090:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020c8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002094:	f7ff fdce 	bl	8001c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002098:	480c      	ldr	r0, [pc, #48]	; (80020cc <LoopForever+0x6>)
  ldr r1, =_edata
 800209a:	490d      	ldr	r1, [pc, #52]	; (80020d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800209c:	4a0d      	ldr	r2, [pc, #52]	; (80020d4 <LoopForever+0xe>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a0:	e002      	b.n	80020a8 <LoopCopyDataInit>

080020a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020a6:	3304      	adds	r3, #4

080020a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ac:	d3f9      	bcc.n	80020a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ae:	4a0a      	ldr	r2, [pc, #40]	; (80020d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020b0:	4c0a      	ldr	r4, [pc, #40]	; (80020dc <LoopForever+0x16>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b4:	e001      	b.n	80020ba <LoopFillZerobss>

080020b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b8:	3204      	adds	r2, #4

080020ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020bc:	d3fb      	bcc.n	80020b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020be:	f009 fa7b 	bl	800b5b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020c2:	f7ff fa65 	bl	8001590 <main>

080020c6 <LoopForever>:

LoopForever:
    b LoopForever
 80020c6:	e7fe      	b.n	80020c6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80020c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d0:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80020d4:	0800cc1c 	.word	0x0800cc1c
  ldr r2, =_sbss
 80020d8:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80020dc:	20002088 	.word	0x20002088

080020e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80020e0:	e7fe      	b.n	80020e0 <ADC1_2_IRQHandler>
	...

080020e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80020ea:	2300      	movs	r3, #0
 80020ec:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <HAL_Init+0x3c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a0b      	ldr	r2, [pc, #44]	; (8002120 <HAL_Init+0x3c>)
 80020f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020f8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020fa:	2003      	movs	r0, #3
 80020fc:	f001 fc17 	bl	800392e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002100:	200f      	movs	r0, #15
 8002102:	f7ff fce1 	bl	8001ac8 <HAL_InitTick>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d002      	beq.n	8002112 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	71fb      	strb	r3, [r7, #7]
 8002110:	e001      	b.n	8002116 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002112:	f7ff fcb1 	bl	8001a78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002116:	79fb      	ldrb	r3, [r7, #7]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	40022000 	.word	0x40022000

08002124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002128:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_IncTick+0x20>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	461a      	mov	r2, r3
 800212e:	4b06      	ldr	r3, [pc, #24]	; (8002148 <HAL_IncTick+0x24>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4413      	add	r3, r2
 8002134:	4a04      	ldr	r2, [pc, #16]	; (8002148 <HAL_IncTick+0x24>)
 8002136:	6013      	str	r3, [r2, #0]
}
 8002138:	bf00      	nop
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
 8002142:	bf00      	nop
 8002144:	20000018 	.word	0x20000018
 8002148:	20002034 	.word	0x20002034

0800214c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  return uwTick;
 8002150:	4b03      	ldr	r3, [pc, #12]	; (8002160 <HAL_GetTick+0x14>)
 8002152:	681b      	ldr	r3, [r3, #0]
}
 8002154:	4618      	mov	r0, r3
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	20002034 	.word	0x20002034

08002164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800216c:	f7ff ffee 	bl	800214c <HAL_GetTick>
 8002170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800217c:	d005      	beq.n	800218a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800217e:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <HAL_Delay+0x44>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	4413      	add	r3, r2
 8002188:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800218a:	bf00      	nop
 800218c:	f7ff ffde 	bl	800214c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	429a      	cmp	r2, r3
 800219a:	d8f7      	bhi.n	800218c <HAL_Delay+0x28>
  {
  }
}
 800219c:	bf00      	nop
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	20000018 	.word	0x20000018

080021ac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	609a      	str	r2, [r3, #8]
}
 80021c6:	bf00      	nop
 80021c8:	370c      	adds	r7, #12
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	431a      	orrs	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	609a      	str	r2, [r3, #8]
}
 80021ec:	bf00      	nop
 80021ee:	370c      	adds	r7, #12
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002214:	b480      	push	{r7}
 8002216:	b087      	sub	sp, #28
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	3360      	adds	r3, #96	; 0x60
 8002226:	461a      	mov	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	4b08      	ldr	r3, [pc, #32]	; (8002258 <LL_ADC_SetOffset+0x44>)
 8002236:	4013      	ands	r3, r2
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800223e:	683a      	ldr	r2, [r7, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	4313      	orrs	r3, r2
 8002244:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800224c:	bf00      	nop
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	03fff000 	.word	0x03fff000

0800225c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800225c:	b480      	push	{r7}
 800225e:	b085      	sub	sp, #20
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	3360      	adds	r3, #96	; 0x60
 800226a:	461a      	mov	r2, r3
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800227c:	4618      	mov	r0, r3
 800227e:	3714      	adds	r7, #20
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002288:	b480      	push	{r7}
 800228a:	b087      	sub	sp, #28
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	3360      	adds	r3, #96	; 0x60
 8002298:	461a      	mov	r2, r3
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	4413      	add	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	431a      	orrs	r2, r3
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022b2:	bf00      	nop
 80022b4:	371c      	adds	r7, #28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022bc:	4770      	bx	lr

080022be <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80022be:	b480      	push	{r7}
 80022c0:	b083      	sub	sp, #12
 80022c2:	af00      	add	r7, sp, #0
 80022c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80022d2:	2301      	movs	r3, #1
 80022d4:	e000      	b.n	80022d8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b087      	sub	sp, #28
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	60f8      	str	r0, [r7, #12]
 80022ec:	60b9      	str	r1, [r7, #8]
 80022ee:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	3330      	adds	r3, #48	; 0x30
 80022f4:	461a      	mov	r2, r3
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	0a1b      	lsrs	r3, r3, #8
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	f003 030c 	and.w	r3, r3, #12
 8002300:	4413      	add	r3, r2
 8002302:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	f003 031f 	and.w	r3, r3, #31
 800230e:	211f      	movs	r1, #31
 8002310:	fa01 f303 	lsl.w	r3, r1, r3
 8002314:	43db      	mvns	r3, r3
 8002316:	401a      	ands	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	0e9b      	lsrs	r3, r3, #26
 800231c:	f003 011f 	and.w	r1, r3, #31
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	f003 031f 	and.w	r3, r3, #31
 8002326:	fa01 f303 	lsl.w	r3, r1, r3
 800232a:	431a      	orrs	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002330:	bf00      	nop
 8002332:	371c      	adds	r7, #28
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr

0800233c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800233c:	b480      	push	{r7}
 800233e:	b087      	sub	sp, #28
 8002340:	af00      	add	r7, sp, #0
 8002342:	60f8      	str	r0, [r7, #12]
 8002344:	60b9      	str	r1, [r7, #8]
 8002346:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	3314      	adds	r3, #20
 800234c:	461a      	mov	r2, r3
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	0e5b      	lsrs	r3, r3, #25
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	4413      	add	r3, r2
 800235a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	0d1b      	lsrs	r3, r3, #20
 8002364:	f003 031f 	and.w	r3, r3, #31
 8002368:	2107      	movs	r1, #7
 800236a:	fa01 f303 	lsl.w	r3, r1, r3
 800236e:	43db      	mvns	r3, r3
 8002370:	401a      	ands	r2, r3
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	0d1b      	lsrs	r3, r3, #20
 8002376:	f003 031f 	and.w	r3, r3, #31
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	fa01 f303 	lsl.w	r3, r1, r3
 8002380:	431a      	orrs	r2, r3
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002386:	bf00      	nop
 8002388:	371c      	adds	r7, #28
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	60f8      	str	r0, [r7, #12]
 800239c:	60b9      	str	r1, [r7, #8]
 800239e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ac:	43db      	mvns	r3, r3
 80023ae:	401a      	ands	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f003 0318 	and.w	r3, r3, #24
 80023b6:	4908      	ldr	r1, [pc, #32]	; (80023d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023b8:	40d9      	lsrs	r1, r3
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	400b      	ands	r3, r1
 80023be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023c2:	431a      	orrs	r2, r3
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	0007ffff 	.word	0x0007ffff

080023dc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 031f 	and.w	r3, r3, #31
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002424:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002428:	687a      	ldr	r2, [r7, #4]
 800242a:	6093      	str	r3, [r2, #8]
}
 800242c:	bf00      	nop
 800242e:	370c      	adds	r7, #12
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800244c:	d101      	bne.n	8002452 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800244e:	2301      	movs	r3, #1
 8002450:	e000      	b.n	8002454 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	689b      	ldr	r3, [r3, #8]
 800246c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002470:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002474:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002486:	4770      	bx	lr

08002488 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002488:	b480      	push	{r7}
 800248a:	b083      	sub	sp, #12
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002498:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800249c:	d101      	bne.n	80024a2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b083      	sub	sp, #12
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024c4:	f043 0201 	orr.w	r2, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024e8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024ec:	f043 0202 	orr.w	r2, r3, #2
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fe:	4770      	bx	lr

08002500 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002500:	b480      	push	{r7}
 8002502:	b083      	sub	sp, #12
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	689b      	ldr	r3, [r3, #8]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	d101      	bne.n	8002518 <LL_ADC_IsEnabled+0x18>
 8002514:	2301      	movs	r3, #1
 8002516:	e000      	b.n	800251a <LL_ADC_IsEnabled+0x1a>
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	370c      	adds	r7, #12
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002526:	b480      	push	{r7}
 8002528:	b083      	sub	sp, #12
 800252a:	af00      	add	r7, sp, #0
 800252c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b02      	cmp	r3, #2
 8002538:	d101      	bne.n	800253e <LL_ADC_IsDisableOngoing+0x18>
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <LL_ADC_IsDisableOngoing+0x1a>
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800255c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002560:	f043 0204 	orr.w	r2, r3, #4
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b04      	cmp	r3, #4
 8002586:	d101      	bne.n	800258c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002588:	2301      	movs	r3, #1
 800258a:	e000      	b.n	800258e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	370c      	adds	r7, #12
 8002592:	46bd      	mov	sp, r7
 8002594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002598:	4770      	bx	lr

0800259a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800259a:	b480      	push	{r7}
 800259c:	b083      	sub	sp, #12
 800259e:	af00      	add	r7, sp, #0
 80025a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d101      	bne.n	80025b2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025ae:	2301      	movs	r3, #1
 80025b0:	e000      	b.n	80025b4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr

080025c0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b089      	sub	sp, #36	; 0x24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025c8:	2300      	movs	r3, #0
 80025ca:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d101      	bne.n	80025da <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025d6:	2301      	movs	r3, #1
 80025d8:	e136      	b.n	8002848 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d109      	bne.n	80025fc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7fe fc29 	bl	8000e40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7ff ff19 	bl	8002438 <LL_ADC_IsDeepPowerDownEnabled>
 8002606:	4603      	mov	r3, r0
 8002608:	2b00      	cmp	r3, #0
 800260a:	d004      	beq.n	8002616 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff feff 	bl	8002414 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7ff ff34 	bl	8002488 <LL_ADC_IsInternalRegulatorEnabled>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d115      	bne.n	8002652 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f7ff ff18 	bl	8002460 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002630:	4b87      	ldr	r3, [pc, #540]	; (8002850 <HAL_ADC_Init+0x290>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	099b      	lsrs	r3, r3, #6
 8002636:	4a87      	ldr	r2, [pc, #540]	; (8002854 <HAL_ADC_Init+0x294>)
 8002638:	fba2 2303 	umull	r2, r3, r2, r3
 800263c:	099b      	lsrs	r3, r3, #6
 800263e:	3301      	adds	r3, #1
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002644:	e002      	b.n	800264c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	3b01      	subs	r3, #1
 800264a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f9      	bne.n	8002646 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f7ff ff16 	bl	8002488 <LL_ADC_IsInternalRegulatorEnabled>
 800265c:	4603      	mov	r3, r0
 800265e:	2b00      	cmp	r3, #0
 8002660:	d10d      	bne.n	800267e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002666:	f043 0210 	orr.w	r2, r3, #16
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002672:	f043 0201 	orr.w	r2, r3, #1
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7ff ff76 	bl	8002574 <LL_ADC_REG_IsConversionOngoing>
 8002688:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268e:	f003 0310 	and.w	r3, r3, #16
 8002692:	2b00      	cmp	r3, #0
 8002694:	f040 80cf 	bne.w	8002836 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002698:	697b      	ldr	r3, [r7, #20]
 800269a:	2b00      	cmp	r3, #0
 800269c:	f040 80cb 	bne.w	8002836 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80026a8:	f043 0202 	orr.w	r2, r3, #2
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff ff23 	bl	8002500 <LL_ADC_IsEnabled>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d115      	bne.n	80026ec <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026c0:	4865      	ldr	r0, [pc, #404]	; (8002858 <HAL_ADC_Init+0x298>)
 80026c2:	f7ff ff1d 	bl	8002500 <LL_ADC_IsEnabled>
 80026c6:	4604      	mov	r4, r0
 80026c8:	4864      	ldr	r0, [pc, #400]	; (800285c <HAL_ADC_Init+0x29c>)
 80026ca:	f7ff ff19 	bl	8002500 <LL_ADC_IsEnabled>
 80026ce:	4603      	mov	r3, r0
 80026d0:	431c      	orrs	r4, r3
 80026d2:	4863      	ldr	r0, [pc, #396]	; (8002860 <HAL_ADC_Init+0x2a0>)
 80026d4:	f7ff ff14 	bl	8002500 <LL_ADC_IsEnabled>
 80026d8:	4603      	mov	r3, r0
 80026da:	4323      	orrs	r3, r4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d105      	bne.n	80026ec <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4619      	mov	r1, r3
 80026e6:	485f      	ldr	r0, [pc, #380]	; (8002864 <HAL_ADC_Init+0x2a4>)
 80026e8:	f7ff fd60 	bl	80021ac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	7e5b      	ldrb	r3, [r3, #25]
 80026f0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026f6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80026fc:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002702:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 3020 	ldrb.w	r3, [r3, #32]
 800270a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800270c:	4313      	orrs	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002716:	2b01      	cmp	r3, #1
 8002718:	d106      	bne.n	8002728 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	3b01      	subs	r3, #1
 8002720:	045b      	lsls	r3, r3, #17
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272c:	2b00      	cmp	r3, #0
 800272e:	d009      	beq.n	8002744 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800273e:	69ba      	ldr	r2, [r7, #24]
 8002740:	4313      	orrs	r3, r2
 8002742:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	4b47      	ldr	r3, [pc, #284]	; (8002868 <HAL_ADC_Init+0x2a8>)
 800274c:	4013      	ands	r3, r2
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	6812      	ldr	r2, [r2, #0]
 8002752:	69b9      	ldr	r1, [r7, #24]
 8002754:	430b      	orrs	r3, r1
 8002756:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff09 	bl	8002574 <LL_ADC_REG_IsConversionOngoing>
 8002762:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ff16 	bl	800259a <LL_ADC_INJ_IsConversionOngoing>
 800276e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d13d      	bne.n	80027f2 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d13a      	bne.n	80027f2 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002780:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002788:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800278a:	4313      	orrs	r3, r2
 800278c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002798:	f023 0302 	bic.w	r3, r3, #2
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	6812      	ldr	r2, [r2, #0]
 80027a0:	69b9      	ldr	r1, [r7, #24]
 80027a2:	430b      	orrs	r3, r1
 80027a4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d118      	bne.n	80027e2 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027ba:	f023 0304 	bic.w	r3, r3, #4
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027c6:	4311      	orrs	r1, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027cc:	4311      	orrs	r1, r2
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027d2:	430a      	orrs	r2, r1
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f042 0201 	orr.w	r2, r2, #1
 80027de:	611a      	str	r2, [r3, #16]
 80027e0:	e007      	b.n	80027f2 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d10c      	bne.n	8002814 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002800:	f023 010f 	bic.w	r1, r3, #15
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	1e5a      	subs	r2, r3, #1
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	631a      	str	r2, [r3, #48]	; 0x30
 8002812:	e007      	b.n	8002824 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 020f 	bic.w	r2, r2, #15
 8002822:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	f023 0303 	bic.w	r3, r3, #3
 800282c:	f043 0201 	orr.w	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	655a      	str	r2, [r3, #84]	; 0x54
 8002834:	e007      	b.n	8002846 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800283a:	f043 0210 	orr.w	r2, r3, #16
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002846:	7ffb      	ldrb	r3, [r7, #31]
}
 8002848:	4618      	mov	r0, r3
 800284a:	3724      	adds	r7, #36	; 0x24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd90      	pop	{r4, r7, pc}
 8002850:	20000010 	.word	0x20000010
 8002854:	053e2d63 	.word	0x053e2d63
 8002858:	50040000 	.word	0x50040000
 800285c:	50040100 	.word	0x50040100
 8002860:	50040200 	.word	0x50040200
 8002864:	50040300 	.word	0x50040300
 8002868:	fff0c007 	.word	0xfff0c007

0800286c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002874:	4857      	ldr	r0, [pc, #348]	; (80029d4 <HAL_ADC_Start+0x168>)
 8002876:	f7ff fdb1 	bl	80023dc <LL_ADC_GetMultimode>
 800287a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fe77 	bl	8002574 <LL_ADC_REG_IsConversionOngoing>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	f040 809c 	bne.w	80029c6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002894:	2b01      	cmp	r3, #1
 8002896:	d101      	bne.n	800289c <HAL_ADC_Start+0x30>
 8002898:	2302      	movs	r3, #2
 800289a:	e097      	b.n	80029cc <HAL_ADC_Start+0x160>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 fd71 	bl	800338c <ADC_Enable>
 80028aa:	4603      	mov	r3, r0
 80028ac:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80028ae:	7dfb      	ldrb	r3, [r7, #23]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f040 8083 	bne.w	80029bc <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ba:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028be:	f023 0301 	bic.w	r3, r3, #1
 80028c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4a42      	ldr	r2, [pc, #264]	; (80029d8 <HAL_ADC_Start+0x16c>)
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d002      	beq.n	80028da <HAL_ADC_Start+0x6e>
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	e000      	b.n	80028dc <HAL_ADC_Start+0x70>
 80028da:	4b40      	ldr	r3, [pc, #256]	; (80029dc <HAL_ADC_Start+0x170>)
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d002      	beq.n	80028ea <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d105      	bne.n	80028f6 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002902:	d106      	bne.n	8002912 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002908:	f023 0206 	bic.w	r2, r3, #6
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	659a      	str	r2, [r3, #88]	; 0x58
 8002910:	e002      	b.n	8002918 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2200      	movs	r2, #0
 8002916:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	221c      	movs	r2, #28
 800291e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a2a      	ldr	r2, [pc, #168]	; (80029d8 <HAL_ADC_Start+0x16c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d002      	beq.n	8002938 <HAL_ADC_Start+0xcc>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	e000      	b.n	800293a <HAL_ADC_Start+0xce>
 8002938:	4b28      	ldr	r3, [pc, #160]	; (80029dc <HAL_ADC_Start+0x170>)
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	6812      	ldr	r2, [r2, #0]
 800293e:	4293      	cmp	r3, r2
 8002940:	d008      	beq.n	8002954 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	2b05      	cmp	r3, #5
 800294c:	d002      	beq.n	8002954 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	2b09      	cmp	r3, #9
 8002952:	d114      	bne.n	800297e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d007      	beq.n	8002972 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002966:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800296a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7ff fde8 	bl	800254c <LL_ADC_REG_StartConversion>
 800297c:	e025      	b.n	80029ca <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002982:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <HAL_ADC_Start+0x16c>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d002      	beq.n	800299a <HAL_ADC_Start+0x12e>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	e000      	b.n	800299c <HAL_ADC_Start+0x130>
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <HAL_ADC_Start+0x170>)
 800299c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00f      	beq.n	80029ca <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029b2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	655a      	str	r2, [r3, #84]	; 0x54
 80029ba:	e006      	b.n	80029ca <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80029c4:	e001      	b.n	80029ca <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80029c6:	2302      	movs	r3, #2
 80029c8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80029ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	50040300 	.word	0x50040300
 80029d8:	50040100 	.word	0x50040100
 80029dc:	50040000 	.word	0x50040000

080029e0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80029ea:	4866      	ldr	r0, [pc, #408]	; (8002b84 <HAL_ADC_PollForConversion+0x1a4>)
 80029ec:	f7ff fcf6 	bl	80023dc <LL_ADC_GetMultimode>
 80029f0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d102      	bne.n	8002a00 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80029fa:	2308      	movs	r3, #8
 80029fc:	61fb      	str	r3, [r7, #28]
 80029fe:	e02a      	b.n	8002a56 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d005      	beq.n	8002a12 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2b05      	cmp	r3, #5
 8002a0a:	d002      	beq.n	8002a12 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	2b09      	cmp	r3, #9
 8002a10:	d111      	bne.n	8002a36 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	f003 0301 	and.w	r3, r3, #1
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d007      	beq.n	8002a30 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a24:	f043 0220 	orr.w	r2, r3, #32
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e0a4      	b.n	8002b7a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a30:	2304      	movs	r3, #4
 8002a32:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002a34:	e00f      	b.n	8002a56 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002a36:	4853      	ldr	r0, [pc, #332]	; (8002b84 <HAL_ADC_PollForConversion+0x1a4>)
 8002a38:	f7ff fcde 	bl	80023f8 <LL_ADC_GetMultiDMATransfer>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d007      	beq.n	8002a52 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a46:	f043 0220 	orr.w	r2, r3, #32
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	e093      	b.n	8002b7a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a52:	2304      	movs	r3, #4
 8002a54:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a56:	f7ff fb79 	bl	800214c <HAL_GetTick>
 8002a5a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a5c:	e021      	b.n	8002aa2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a64:	d01d      	beq.n	8002aa2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a66:	f7ff fb71 	bl	800214c <HAL_GetTick>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	1ad3      	subs	r3, r2, r3
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	429a      	cmp	r2, r3
 8002a74:	d302      	bcc.n	8002a7c <HAL_ADC_PollForConversion+0x9c>
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d112      	bne.n	8002aa2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	4013      	ands	r3, r2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10b      	bne.n	8002aa2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a8e:	f043 0204 	orr.w	r2, r3, #4
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e06b      	b.n	8002b7a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	4013      	ands	r3, r2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0d6      	beq.n	8002a5e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f7ff fbfc 	bl	80022be <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d01c      	beq.n	8002b06 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	7e5b      	ldrb	r3, [r3, #25]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d118      	bne.n	8002b06 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b08      	cmp	r3, #8
 8002ae0:	d111      	bne.n	8002b06 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ae6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002af2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d105      	bne.n	8002b06 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002afe:	f043 0201 	orr.w	r2, r3, #1
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a1f      	ldr	r2, [pc, #124]	; (8002b88 <HAL_ADC_PollForConversion+0x1a8>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d002      	beq.n	8002b16 <HAL_ADC_PollForConversion+0x136>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	e000      	b.n	8002b18 <HAL_ADC_PollForConversion+0x138>
 8002b16:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <HAL_ADC_PollForConversion+0x1ac>)
 8002b18:	687a      	ldr	r2, [r7, #4]
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d008      	beq.n	8002b32 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d005      	beq.n	8002b32 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2b05      	cmp	r3, #5
 8002b2a:	d002      	beq.n	8002b32 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2b09      	cmp	r3, #9
 8002b30:	d104      	bne.n	8002b3c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	61bb      	str	r3, [r7, #24]
 8002b3a:	e00c      	b.n	8002b56 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a11      	ldr	r2, [pc, #68]	; (8002b88 <HAL_ADC_PollForConversion+0x1a8>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d002      	beq.n	8002b4c <HAL_ADC_PollForConversion+0x16c>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	e000      	b.n	8002b4e <HAL_ADC_PollForConversion+0x16e>
 8002b4c:	4b0f      	ldr	r3, [pc, #60]	; (8002b8c <HAL_ADC_PollForConversion+0x1ac>)
 8002b4e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	2b08      	cmp	r3, #8
 8002b5a:	d104      	bne.n	8002b66 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2208      	movs	r2, #8
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	e008      	b.n	8002b78 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d103      	bne.n	8002b78 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	220c      	movs	r2, #12
 8002b76:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3720      	adds	r7, #32
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	50040300 	.word	0x50040300
 8002b88:	50040100 	.word	0x50040100
 8002b8c:	50040000 	.word	0x50040000

08002b90 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	370c      	adds	r7, #12
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b0b6      	sub	sp, #216	; 0xd8
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d101      	bne.n	8002bce <HAL_ADC_ConfigChannel+0x22>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e3c7      	b.n	800335e <HAL_ADC_ConfigChannel+0x7b2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7ff fcca 	bl	8002574 <LL_ADC_REG_IsConversionOngoing>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f040 83a8 	bne.w	8003338 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b05      	cmp	r3, #5
 8002bee:	d824      	bhi.n	8002c3a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	3b02      	subs	r3, #2
 8002bf6:	2b03      	cmp	r3, #3
 8002bf8:	d81b      	bhi.n	8002c32 <HAL_ADC_ConfigChannel+0x86>
 8002bfa:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <HAL_ADC_ConfigChannel+0x54>)
 8002bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c00:	08002c11 	.word	0x08002c11
 8002c04:	08002c19 	.word	0x08002c19
 8002c08:	08002c21 	.word	0x08002c21
 8002c0c:	08002c29 	.word	0x08002c29
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	220c      	movs	r2, #12
 8002c14:	605a      	str	r2, [r3, #4]
          break;
 8002c16:	e011      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2212      	movs	r2, #18
 8002c1c:	605a      	str	r2, [r3, #4]
          break;
 8002c1e:	e00d      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	2218      	movs	r2, #24
 8002c24:	605a      	str	r2, [r3, #4]
          break;
 8002c26:	e009      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c2e:	605a      	str	r2, [r3, #4]
          break;
 8002c30:	e004      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2206      	movs	r2, #6
 8002c36:	605a      	str	r2, [r3, #4]
          break;
 8002c38:	e000      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002c3a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6818      	ldr	r0, [r3, #0]
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	6859      	ldr	r1, [r3, #4]
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f7ff fb4b 	bl	80022e4 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fc8e 	bl	8002574 <LL_ADC_REG_IsConversionOngoing>
 8002c58:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4618      	mov	r0, r3
 8002c62:	f7ff fc9a 	bl	800259a <LL_ADC_INJ_IsConversionOngoing>
 8002c66:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002c6a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f040 81a6 	bne.w	8002fc0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	f040 81a1 	bne.w	8002fc0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6818      	ldr	r0, [r3, #0]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	6819      	ldr	r1, [r3, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f7ff fb56 	bl	800233c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	695a      	ldr	r2, [r3, #20]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	08db      	lsrs	r3, r3, #3
 8002c9c:	f003 0303 	and.w	r3, r3, #3
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	6919      	ldr	r1, [r3, #16]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002cc2:	f7ff faa7 	bl	8002214 <LL_ADC_SetOffset>
 8002cc6:	e17b      	b.n	8002fc0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2100      	movs	r1, #0
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff fac4 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10a      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x148>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fab9 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002cea:	4603      	mov	r3, r0
 8002cec:	0e9b      	lsrs	r3, r3, #26
 8002cee:	f003 021f 	and.w	r2, r3, #31
 8002cf2:	e01e      	b.n	8002d32 <HAL_ADC_ConfigChannel+0x186>
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2100      	movs	r1, #0
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff faae 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002d00:	4603      	mov	r3, r0
 8002d02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d0a:	fa93 f3a3 	rbit	r3, r3
 8002d0e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d12:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d16:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002d22:	2320      	movs	r3, #32
 8002d24:	e004      	b.n	8002d30 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002d26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d2a:	fab3 f383 	clz	r3, r3
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d105      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x19e>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	0e9b      	lsrs	r3, r3, #26
 8002d44:	f003 031f 	and.w	r3, r3, #31
 8002d48:	e018      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x1d0>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002d5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002d66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002d6e:	2320      	movs	r3, #32
 8002d70:	e004      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002d72:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d76:	fab3 f383 	clz	r3, r3
 8002d7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d106      	bne.n	8002d8e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2200      	movs	r2, #0
 8002d86:	2100      	movs	r1, #0
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f7ff fa7d 	bl	8002288 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2101      	movs	r1, #1
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fa61 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10a      	bne.n	8002dba <HAL_ADC_ConfigChannel+0x20e>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2101      	movs	r1, #1
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7ff fa56 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002db0:	4603      	mov	r3, r0
 8002db2:	0e9b      	lsrs	r3, r3, #26
 8002db4:	f003 021f 	and.w	r2, r3, #31
 8002db8:	e01e      	b.n	8002df8 <HAL_ADC_ConfigChannel+0x24c>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2101      	movs	r1, #1
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7ff fa4b 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002dd0:	fa93 f3a3 	rbit	r3, r3
 8002dd4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002dd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ddc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002de0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d101      	bne.n	8002dec <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002de8:	2320      	movs	r3, #32
 8002dea:	e004      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002dec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002df0:	fab3 f383 	clz	r3, r3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d105      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x264>
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	0e9b      	lsrs	r3, r3, #26
 8002e0a:	f003 031f 	and.w	r3, r3, #31
 8002e0e:	e018      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x296>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e18:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002e24:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002e2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d101      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002e34:	2320      	movs	r3, #32
 8002e36:	e004      	b.n	8002e42 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002e38:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e3c:	fab3 f383 	clz	r3, r3
 8002e40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d106      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff fa1a 	bl	8002288 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	2102      	movs	r1, #2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff f9fe 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002e60:	4603      	mov	r3, r0
 8002e62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10a      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x2d4>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2102      	movs	r1, #2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7ff f9f3 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002e76:	4603      	mov	r3, r0
 8002e78:	0e9b      	lsrs	r3, r3, #26
 8002e7a:	f003 021f 	and.w	r2, r3, #31
 8002e7e:	e01e      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x312>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2102      	movs	r1, #2
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff f9e8 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e96:	fa93 f3a3 	rbit	r3, r3
 8002e9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002e9e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ea2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002ea6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002eae:	2320      	movs	r3, #32
 8002eb0:	e004      	b.n	8002ebc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002eb2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002eb6:	fab3 f383 	clz	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d105      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x32a>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	0e9b      	lsrs	r3, r3, #26
 8002ed0:	f003 031f 	and.w	r3, r3, #31
 8002ed4:	e016      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x358>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ee2:	fa93 f3a3 	rbit	r3, r3
 8002ee6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002ee8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002eea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002eee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002ef6:	2320      	movs	r3, #32
 8002ef8:	e004      	b.n	8002f04 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002efa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002efe:	fab3 f383 	clz	r3, r3
 8002f02:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d106      	bne.n	8002f16 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2102      	movs	r1, #2
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7ff f9b9 	bl	8002288 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2103      	movs	r1, #3
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff f99d 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002f22:	4603      	mov	r3, r0
 8002f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d10a      	bne.n	8002f42 <HAL_ADC_ConfigChannel+0x396>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	2103      	movs	r1, #3
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff f992 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	0e9b      	lsrs	r3, r3, #26
 8002f3c:	f003 021f 	and.w	r2, r3, #31
 8002f40:	e017      	b.n	8002f72 <HAL_ADC_ConfigChannel+0x3c6>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2103      	movs	r1, #3
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7ff f987 	bl	800225c <LL_ADC_GetOffsetChannel>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f54:	fa93 f3a3 	rbit	r3, r3
 8002f58:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f5c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002f5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002f64:	2320      	movs	r3, #32
 8002f66:	e003      	b.n	8002f70 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f6a:	fab3 f383 	clz	r3, r3
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d105      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x3de>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	0e9b      	lsrs	r3, r3, #26
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	e011      	b.n	8002fae <HAL_ADC_ConfigChannel+0x402>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f92:	fa93 f3a3 	rbit	r3, r3
 8002f96:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002f98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f9a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002fa2:	2320      	movs	r3, #32
 8002fa4:	e003      	b.n	8002fae <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa8:	fab3 f383 	clz	r3, r3
 8002fac:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d106      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	2103      	movs	r1, #3
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff f964 	bl	8002288 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f7ff fa9b 	bl	8002500 <LL_ADC_IsEnabled>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f040 813f 	bne.w	8003250 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6818      	ldr	r0, [r3, #0]
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	6819      	ldr	r1, [r3, #0]
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	f7ff f9d8 	bl	8002394 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4a8e      	ldr	r2, [pc, #568]	; (8003224 <HAL_ADC_ConfigChannel+0x678>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	f040 8130 	bne.w	8003250 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d10b      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x46c>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	0e9b      	lsrs	r3, r3, #26
 8003006:	3301      	adds	r3, #1
 8003008:	f003 031f 	and.w	r3, r3, #31
 800300c:	2b09      	cmp	r3, #9
 800300e:	bf94      	ite	ls
 8003010:	2301      	movls	r3, #1
 8003012:	2300      	movhi	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	e019      	b.n	800304c <HAL_ADC_ConfigChannel+0x4a0>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003020:	fa93 f3a3 	rbit	r3, r3
 8003024:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003026:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003028:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800302a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800302c:	2b00      	cmp	r3, #0
 800302e:	d101      	bne.n	8003034 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003030:	2320      	movs	r3, #32
 8003032:	e003      	b.n	800303c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003034:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003036:	fab3 f383 	clz	r3, r3
 800303a:	b2db      	uxtb	r3, r3
 800303c:	3301      	adds	r3, #1
 800303e:	f003 031f 	and.w	r3, r3, #31
 8003042:	2b09      	cmp	r3, #9
 8003044:	bf94      	ite	ls
 8003046:	2301      	movls	r3, #1
 8003048:	2300      	movhi	r3, #0
 800304a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800304c:	2b00      	cmp	r3, #0
 800304e:	d079      	beq.n	8003144 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003058:	2b00      	cmp	r3, #0
 800305a:	d107      	bne.n	800306c <HAL_ADC_ConfigChannel+0x4c0>
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	0e9b      	lsrs	r3, r3, #26
 8003062:	3301      	adds	r3, #1
 8003064:	069b      	lsls	r3, r3, #26
 8003066:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800306a:	e015      	b.n	8003098 <HAL_ADC_ConfigChannel+0x4ec>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003074:	fa93 f3a3 	rbit	r3, r3
 8003078:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800307a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800307c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800307e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003084:	2320      	movs	r3, #32
 8003086:	e003      	b.n	8003090 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	3301      	adds	r3, #1
 8003092:	069b      	lsls	r3, r3, #26
 8003094:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d109      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x50c>
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	0e9b      	lsrs	r3, r3, #26
 80030aa:	3301      	adds	r3, #1
 80030ac:	f003 031f 	and.w	r3, r3, #31
 80030b0:	2101      	movs	r1, #1
 80030b2:	fa01 f303 	lsl.w	r3, r1, r3
 80030b6:	e017      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x53c>
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030c0:	fa93 f3a3 	rbit	r3, r3
 80030c4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80030c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030c8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80030ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d101      	bne.n	80030d4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80030d0:	2320      	movs	r3, #32
 80030d2:	e003      	b.n	80030dc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80030d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030d6:	fab3 f383 	clz	r3, r3
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	3301      	adds	r3, #1
 80030de:	f003 031f 	and.w	r3, r3, #31
 80030e2:	2101      	movs	r1, #1
 80030e4:	fa01 f303 	lsl.w	r3, r1, r3
 80030e8:	ea42 0103 	orr.w	r1, r2, r3
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10a      	bne.n	800310e <HAL_ADC_ConfigChannel+0x562>
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	0e9b      	lsrs	r3, r3, #26
 80030fe:	3301      	adds	r3, #1
 8003100:	f003 021f 	and.w	r2, r3, #31
 8003104:	4613      	mov	r3, r2
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	4413      	add	r3, r2
 800310a:	051b      	lsls	r3, r3, #20
 800310c:	e018      	b.n	8003140 <HAL_ADC_ConfigChannel+0x594>
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003116:	fa93 f3a3 	rbit	r3, r3
 800311a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800311c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800311e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003122:	2b00      	cmp	r3, #0
 8003124:	d101      	bne.n	800312a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003126:	2320      	movs	r3, #32
 8003128:	e003      	b.n	8003132 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800312a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800312c:	fab3 f383 	clz	r3, r3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	3301      	adds	r3, #1
 8003134:	f003 021f 	and.w	r2, r3, #31
 8003138:	4613      	mov	r3, r2
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	4413      	add	r3, r2
 800313e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003140:	430b      	orrs	r3, r1
 8003142:	e080      	b.n	8003246 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800314c:	2b00      	cmp	r3, #0
 800314e:	d107      	bne.n	8003160 <HAL_ADC_ConfigChannel+0x5b4>
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	0e9b      	lsrs	r3, r3, #26
 8003156:	3301      	adds	r3, #1
 8003158:	069b      	lsls	r3, r3, #26
 800315a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800315e:	e015      	b.n	800318c <HAL_ADC_ConfigChannel+0x5e0>
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003168:	fa93 f3a3 	rbit	r3, r3
 800316c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800316e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003170:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003174:	2b00      	cmp	r3, #0
 8003176:	d101      	bne.n	800317c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003178:	2320      	movs	r3, #32
 800317a:	e003      	b.n	8003184 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	fab3 f383 	clz	r3, r3
 8003182:	b2db      	uxtb	r3, r3
 8003184:	3301      	adds	r3, #1
 8003186:	069b      	lsls	r3, r3, #26
 8003188:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003194:	2b00      	cmp	r3, #0
 8003196:	d109      	bne.n	80031ac <HAL_ADC_ConfigChannel+0x600>
 8003198:	683b      	ldr	r3, [r7, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	0e9b      	lsrs	r3, r3, #26
 800319e:	3301      	adds	r3, #1
 80031a0:	f003 031f 	and.w	r3, r3, #31
 80031a4:	2101      	movs	r1, #1
 80031a6:	fa01 f303 	lsl.w	r3, r1, r3
 80031aa:	e017      	b.n	80031dc <HAL_ADC_ConfigChannel+0x630>
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	fa93 f3a3 	rbit	r3, r3
 80031b8:	61fb      	str	r3, [r7, #28]
  return result;
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80031c4:	2320      	movs	r3, #32
 80031c6:	e003      	b.n	80031d0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	fab3 f383 	clz	r3, r3
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	3301      	adds	r3, #1
 80031d2:	f003 031f 	and.w	r3, r3, #31
 80031d6:	2101      	movs	r1, #1
 80031d8:	fa01 f303 	lsl.w	r3, r1, r3
 80031dc:	ea42 0103 	orr.w	r1, r2, r3
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d10d      	bne.n	8003208 <HAL_ADC_ConfigChannel+0x65c>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	0e9b      	lsrs	r3, r3, #26
 80031f2:	3301      	adds	r3, #1
 80031f4:	f003 021f 	and.w	r2, r3, #31
 80031f8:	4613      	mov	r3, r2
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	4413      	add	r3, r2
 80031fe:	3b1e      	subs	r3, #30
 8003200:	051b      	lsls	r3, r3, #20
 8003202:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003206:	e01d      	b.n	8003244 <HAL_ADC_ConfigChannel+0x698>
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	fa93 f3a3 	rbit	r3, r3
 8003214:	613b      	str	r3, [r7, #16]
  return result;
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d103      	bne.n	8003228 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003220:	2320      	movs	r3, #32
 8003222:	e005      	b.n	8003230 <HAL_ADC_ConfigChannel+0x684>
 8003224:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	fab3 f383 	clz	r3, r3
 800322e:	b2db      	uxtb	r3, r3
 8003230:	3301      	adds	r3, #1
 8003232:	f003 021f 	and.w	r2, r3, #31
 8003236:	4613      	mov	r3, r2
 8003238:	005b      	lsls	r3, r3, #1
 800323a:	4413      	add	r3, r2
 800323c:	3b1e      	subs	r3, #30
 800323e:	051b      	lsls	r3, r3, #20
 8003240:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003244:	430b      	orrs	r3, r1
 8003246:	683a      	ldr	r2, [r7, #0]
 8003248:	6892      	ldr	r2, [r2, #8]
 800324a:	4619      	mov	r1, r3
 800324c:	f7ff f876 	bl	800233c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4b44      	ldr	r3, [pc, #272]	; (8003368 <HAL_ADC_ConfigChannel+0x7bc>)
 8003256:	4013      	ands	r3, r2
 8003258:	2b00      	cmp	r3, #0
 800325a:	d07a      	beq.n	8003352 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800325c:	4843      	ldr	r0, [pc, #268]	; (800336c <HAL_ADC_ConfigChannel+0x7c0>)
 800325e:	f7fe ffcb 	bl	80021f8 <LL_ADC_GetCommonPathInternalCh>
 8003262:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a41      	ldr	r2, [pc, #260]	; (8003370 <HAL_ADC_ConfigChannel+0x7c4>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d12c      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003270:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d126      	bne.n	80032ca <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a3c      	ldr	r2, [pc, #240]	; (8003374 <HAL_ADC_ConfigChannel+0x7c8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d004      	beq.n	8003290 <HAL_ADC_ConfigChannel+0x6e4>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a3b      	ldr	r2, [pc, #236]	; (8003378 <HAL_ADC_ConfigChannel+0x7cc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d15d      	bne.n	800334c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003290:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003294:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003298:	4619      	mov	r1, r3
 800329a:	4834      	ldr	r0, [pc, #208]	; (800336c <HAL_ADC_ConfigChannel+0x7c0>)
 800329c:	f7fe ff99 	bl	80021d2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032a0:	4b36      	ldr	r3, [pc, #216]	; (800337c <HAL_ADC_ConfigChannel+0x7d0>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	099b      	lsrs	r3, r3, #6
 80032a6:	4a36      	ldr	r2, [pc, #216]	; (8003380 <HAL_ADC_ConfigChannel+0x7d4>)
 80032a8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ac:	099b      	lsrs	r3, r3, #6
 80032ae:	1c5a      	adds	r2, r3, #1
 80032b0:	4613      	mov	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032ba:	e002      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	3b01      	subs	r3, #1
 80032c0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f9      	bne.n	80032bc <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032c8:	e040      	b.n	800334c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a2d      	ldr	r2, [pc, #180]	; (8003384 <HAL_ADC_ConfigChannel+0x7d8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d118      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x75a>
 80032d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d112      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a23      	ldr	r2, [pc, #140]	; (8003374 <HAL_ADC_ConfigChannel+0x7c8>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d004      	beq.n	80032f4 <HAL_ADC_ConfigChannel+0x748>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a22      	ldr	r2, [pc, #136]	; (8003378 <HAL_ADC_ConfigChannel+0x7cc>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d12d      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032fc:	4619      	mov	r1, r3
 80032fe:	481b      	ldr	r0, [pc, #108]	; (800336c <HAL_ADC_ConfigChannel+0x7c0>)
 8003300:	f7fe ff67 	bl	80021d2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003304:	e024      	b.n	8003350 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a1f      	ldr	r2, [pc, #124]	; (8003388 <HAL_ADC_ConfigChannel+0x7dc>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d120      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003310:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003314:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003318:	2b00      	cmp	r3, #0
 800331a:	d11a      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a14      	ldr	r2, [pc, #80]	; (8003374 <HAL_ADC_ConfigChannel+0x7c8>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d115      	bne.n	8003352 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003326:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800332a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800332e:	4619      	mov	r1, r3
 8003330:	480e      	ldr	r0, [pc, #56]	; (800336c <HAL_ADC_ConfigChannel+0x7c0>)
 8003332:	f7fe ff4e 	bl	80021d2 <LL_ADC_SetCommonPathInternalCh>
 8003336:	e00c      	b.n	8003352 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333c:	f043 0220 	orr.w	r2, r3, #32
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800334a:	e002      	b.n	8003352 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800334c:	bf00      	nop
 800334e:	e000      	b.n	8003352 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003350:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800335a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800335e:	4618      	mov	r0, r3
 8003360:	37d8      	adds	r7, #216	; 0xd8
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	80080000 	.word	0x80080000
 800336c:	50040300 	.word	0x50040300
 8003370:	c7520000 	.word	0xc7520000
 8003374:	50040000 	.word	0x50040000
 8003378:	50040200 	.word	0x50040200
 800337c:	20000010 	.word	0x20000010
 8003380:	053e2d63 	.word	0x053e2d63
 8003384:	cb840000 	.word	0xcb840000
 8003388:	80000001 	.word	0x80000001

0800338c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4618      	mov	r0, r3
 800339a:	f7ff f8b1 	bl	8002500 <LL_ADC_IsEnabled>
 800339e:	4603      	mov	r3, r0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d14d      	bne.n	8003440 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689a      	ldr	r2, [r3, #8]
 80033aa:	4b28      	ldr	r3, [pc, #160]	; (800344c <ADC_Enable+0xc0>)
 80033ac:	4013      	ands	r3, r2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00d      	beq.n	80033ce <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033b6:	f043 0210 	orr.w	r2, r3, #16
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033c2:	f043 0201 	orr.w	r2, r3, #1
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e039      	b.n	8003442 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff f86c 	bl	80024b0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80033d8:	f7fe feb8 	bl	800214c <HAL_GetTick>
 80033dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80033de:	e028      	b.n	8003432 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff f88b 	bl	8002500 <LL_ADC_IsEnabled>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d104      	bne.n	80033fa <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff f85b 	bl	80024b0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80033fa:	f7fe fea7 	bl	800214c <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	2b02      	cmp	r3, #2
 8003406:	d914      	bls.n	8003432 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f003 0301 	and.w	r3, r3, #1
 8003412:	2b01      	cmp	r3, #1
 8003414:	d00d      	beq.n	8003432 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800341a:	f043 0210 	orr.w	r2, r3, #16
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003426:	f043 0201 	orr.w	r2, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e007      	b.n	8003442 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b01      	cmp	r3, #1
 800343e:	d1cf      	bne.n	80033e0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003440:	2300      	movs	r3, #0
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	8000003f 	.word	0x8000003f

08003450 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b084      	sub	sp, #16
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4618      	mov	r0, r3
 800345e:	f7ff f862 	bl	8002526 <LL_ADC_IsDisableOngoing>
 8003462:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7ff f849 	bl	8002500 <LL_ADC_IsEnabled>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d047      	beq.n	8003504 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d144      	bne.n	8003504 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f003 030d 	and.w	r3, r3, #13
 8003484:	2b01      	cmp	r3, #1
 8003486:	d10c      	bne.n	80034a2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4618      	mov	r0, r3
 800348e:	f7ff f823 	bl	80024d8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2203      	movs	r2, #3
 8003498:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800349a:	f7fe fe57 	bl	800214c <HAL_GetTick>
 800349e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034a0:	e029      	b.n	80034f6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a6:	f043 0210 	orr.w	r2, r3, #16
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b2:	f043 0201 	orr.w	r2, r3, #1
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e023      	b.n	8003506 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80034be:	f7fe fe45 	bl	800214c <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	2b02      	cmp	r3, #2
 80034ca:	d914      	bls.n	80034f6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d00d      	beq.n	80034f6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034de:	f043 0210 	orr.w	r2, r3, #16
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034ea:	f043 0201 	orr.w	r2, r3, #1
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e007      	b.n	8003506 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1dc      	bne.n	80034be <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <LL_ADC_IsEnabled>:
{
 800350e:	b480      	push	{r7}
 8003510:	b083      	sub	sp, #12
 8003512:	af00      	add	r7, sp, #0
 8003514:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b01      	cmp	r3, #1
 8003520:	d101      	bne.n	8003526 <LL_ADC_IsEnabled+0x18>
 8003522:	2301      	movs	r3, #1
 8003524:	e000      	b.n	8003528 <LL_ADC_IsEnabled+0x1a>
 8003526:	2300      	movs	r3, #0
}
 8003528:	4618      	mov	r0, r3
 800352a:	370c      	adds	r7, #12
 800352c:	46bd      	mov	sp, r7
 800352e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003532:	4770      	bx	lr

08003534 <LL_ADC_StartCalibration>:
{
 8003534:	b480      	push	{r7}
 8003536:	b083      	sub	sp, #12
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003546:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003550:	4313      	orrs	r3, r2
 8003552:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	609a      	str	r2, [r3, #8]
}
 800355a:	bf00      	nop
 800355c:	370c      	adds	r7, #12
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <LL_ADC_IsCalibrationOnGoing>:
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003576:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800357a:	d101      	bne.n	8003580 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800357c:	2301      	movs	r3, #1
 800357e:	e000      	b.n	8003582 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <LL_ADC_REG_IsConversionOngoing>:
{
 800358e:	b480      	push	{r7}
 8003590:	b083      	sub	sp, #12
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	f003 0304 	and.w	r3, r3, #4
 800359e:	2b04      	cmp	r3, #4
 80035a0:	d101      	bne.n	80035a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80035a2:	2301      	movs	r3, #1
 80035a4:	e000      	b.n	80035a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80035be:	2300      	movs	r3, #0
 80035c0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d101      	bne.n	80035d0 <HAL_ADCEx_Calibration_Start+0x1c>
 80035cc:	2302      	movs	r3, #2
 80035ce:	e04d      	b.n	800366c <HAL_ADCEx_Calibration_Start+0xb8>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80035d8:	6878      	ldr	r0, [r7, #4]
 80035da:	f7ff ff39 	bl	8003450 <ADC_Disable>
 80035de:	4603      	mov	r3, r0
 80035e0:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80035e2:	7bfb      	ldrb	r3, [r7, #15]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d136      	bne.n	8003656 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035f0:	f023 0302 	bic.w	r3, r3, #2
 80035f4:	f043 0202 	orr.w	r2, r3, #2
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	6839      	ldr	r1, [r7, #0]
 8003602:	4618      	mov	r0, r3
 8003604:	f7ff ff96 	bl	8003534 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003608:	e014      	b.n	8003634 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	3301      	adds	r3, #1
 800360e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003616:	d30d      	bcc.n	8003634 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361c:	f023 0312 	bic.w	r3, r3, #18
 8003620:	f043 0210 	orr.w	r2, r3, #16
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003630:	2301      	movs	r3, #1
 8003632:	e01b      	b.n	800366c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f7ff ff94 	bl	8003566 <LL_ADC_IsCalibrationOnGoing>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d1e2      	bne.n	800360a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003648:	f023 0303 	bic.w	r3, r3, #3
 800364c:	f043 0201 	orr.w	r2, r3, #1
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	655a      	str	r2, [r3, #84]	; 0x54
 8003654:	e005      	b.n	8003662 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800365a:	f043 0210 	orr.w	r2, r3, #16
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800366a:	7bfb      	ldrb	r3, [r7, #15]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003674:	b590      	push	{r4, r7, lr}
 8003676:	b09f      	sub	sp, #124	; 0x7c
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800368a:	2b01      	cmp	r3, #1
 800368c:	d101      	bne.n	8003692 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800368e:	2302      	movs	r3, #2
 8003690:	e093      	b.n	80037ba <HAL_ADCEx_MultiModeConfigChannel+0x146>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800369a:	2300      	movs	r3, #0
 800369c:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 800369e:	2300      	movs	r3, #0
 80036a0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a47      	ldr	r2, [pc, #284]	; (80037c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d102      	bne.n	80036b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80036ac:	4b46      	ldr	r3, [pc, #280]	; (80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80036ae:	60bb      	str	r3, [r7, #8]
 80036b0:	e001      	b.n	80036b6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80036b2:	2300      	movs	r3, #0
 80036b4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d10b      	bne.n	80036d4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036c0:	f043 0220 	orr.w	r2, r3, #32
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e072      	b.n	80037ba <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff ff59 	bl	800358e <LL_ADC_REG_IsConversionOngoing>
 80036dc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4618      	mov	r0, r3
 80036e4:	f7ff ff53 	bl	800358e <LL_ADC_REG_IsConversionOngoing>
 80036e8:	4603      	mov	r3, r0
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d154      	bne.n	8003798 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80036ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d151      	bne.n	8003798 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80036f4:	4b35      	ldr	r3, [pc, #212]	; (80037cc <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 80036f6:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d02c      	beq.n	800375a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	6859      	ldr	r1, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003712:	035b      	lsls	r3, r3, #13
 8003714:	430b      	orrs	r3, r1
 8003716:	431a      	orrs	r2, r3
 8003718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800371a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800371c:	4829      	ldr	r0, [pc, #164]	; (80037c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800371e:	f7ff fef6 	bl	800350e <LL_ADC_IsEnabled>
 8003722:	4604      	mov	r4, r0
 8003724:	4828      	ldr	r0, [pc, #160]	; (80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003726:	f7ff fef2 	bl	800350e <LL_ADC_IsEnabled>
 800372a:	4603      	mov	r3, r0
 800372c:	431c      	orrs	r4, r3
 800372e:	4828      	ldr	r0, [pc, #160]	; (80037d0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003730:	f7ff feed 	bl	800350e <LL_ADC_IsEnabled>
 8003734:	4603      	mov	r3, r0
 8003736:	4323      	orrs	r3, r4
 8003738:	2b00      	cmp	r3, #0
 800373a:	d137      	bne.n	80037ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800373c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003744:	f023 030f 	bic.w	r3, r3, #15
 8003748:	683a      	ldr	r2, [r7, #0]
 800374a:	6811      	ldr	r1, [r2, #0]
 800374c:	683a      	ldr	r2, [r7, #0]
 800374e:	6892      	ldr	r2, [r2, #8]
 8003750:	430a      	orrs	r2, r1
 8003752:	431a      	orrs	r2, r3
 8003754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003756:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003758:	e028      	b.n	80037ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800375a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003762:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003764:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003766:	4817      	ldr	r0, [pc, #92]	; (80037c4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003768:	f7ff fed1 	bl	800350e <LL_ADC_IsEnabled>
 800376c:	4604      	mov	r4, r0
 800376e:	4816      	ldr	r0, [pc, #88]	; (80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003770:	f7ff fecd 	bl	800350e <LL_ADC_IsEnabled>
 8003774:	4603      	mov	r3, r0
 8003776:	431c      	orrs	r4, r3
 8003778:	4815      	ldr	r0, [pc, #84]	; (80037d0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800377a:	f7ff fec8 	bl	800350e <LL_ADC_IsEnabled>
 800377e:	4603      	mov	r3, r0
 8003780:	4323      	orrs	r3, r4
 8003782:	2b00      	cmp	r3, #0
 8003784:	d112      	bne.n	80037ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800378e:	f023 030f 	bic.w	r3, r3, #15
 8003792:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003794:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003796:	e009      	b.n	80037ac <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800379c:	f043 0220 	orr.w	r2, r3, #32
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80037aa:	e000      	b.n	80037ae <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80037ac:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80037b6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80037ba:	4618      	mov	r0, r3
 80037bc:	377c      	adds	r7, #124	; 0x7c
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd90      	pop	{r4, r7, pc}
 80037c2:	bf00      	nop
 80037c4:	50040000 	.word	0x50040000
 80037c8:	50040100 	.word	0x50040100
 80037cc:	50040300 	.word	0x50040300
 80037d0:	50040200 	.word	0x50040200

080037d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80037e4:	4b0c      	ldr	r3, [pc, #48]	; (8003818 <__NVIC_SetPriorityGrouping+0x44>)
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80037ea:	68ba      	ldr	r2, [r7, #8]
 80037ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80037f0:	4013      	ands	r3, r2
 80037f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80037fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003800:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003804:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003806:	4a04      	ldr	r2, [pc, #16]	; (8003818 <__NVIC_SetPriorityGrouping+0x44>)
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	60d3      	str	r3, [r2, #12]
}
 800380c:	bf00      	nop
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	e000ed00 	.word	0xe000ed00

0800381c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800381c:	b480      	push	{r7}
 800381e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003820:	4b04      	ldr	r3, [pc, #16]	; (8003834 <__NVIC_GetPriorityGrouping+0x18>)
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	0a1b      	lsrs	r3, r3, #8
 8003826:	f003 0307 	and.w	r3, r3, #7
}
 800382a:	4618      	mov	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr
 8003834:	e000ed00 	.word	0xe000ed00

08003838 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	4603      	mov	r3, r0
 8003840:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003846:	2b00      	cmp	r3, #0
 8003848:	db0b      	blt.n	8003862 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800384a:	79fb      	ldrb	r3, [r7, #7]
 800384c:	f003 021f 	and.w	r2, r3, #31
 8003850:	4907      	ldr	r1, [pc, #28]	; (8003870 <__NVIC_EnableIRQ+0x38>)
 8003852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	2001      	movs	r0, #1
 800385a:	fa00 f202 	lsl.w	r2, r0, r2
 800385e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003862:	bf00      	nop
 8003864:	370c      	adds	r7, #12
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr
 800386e:	bf00      	nop
 8003870:	e000e100 	.word	0xe000e100

08003874 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	6039      	str	r1, [r7, #0]
 800387e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003880:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003884:	2b00      	cmp	r3, #0
 8003886:	db0a      	blt.n	800389e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	b2da      	uxtb	r2, r3
 800388c:	490c      	ldr	r1, [pc, #48]	; (80038c0 <__NVIC_SetPriority+0x4c>)
 800388e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003892:	0112      	lsls	r2, r2, #4
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	440b      	add	r3, r1
 8003898:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800389c:	e00a      	b.n	80038b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	b2da      	uxtb	r2, r3
 80038a2:	4908      	ldr	r1, [pc, #32]	; (80038c4 <__NVIC_SetPriority+0x50>)
 80038a4:	79fb      	ldrb	r3, [r7, #7]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	3b04      	subs	r3, #4
 80038ac:	0112      	lsls	r2, r2, #4
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	440b      	add	r3, r1
 80038b2:	761a      	strb	r2, [r3, #24]
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000e100 	.word	0xe000e100
 80038c4:	e000ed00 	.word	0xe000ed00

080038c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b089      	sub	sp, #36	; 0x24
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f003 0307 	and.w	r3, r3, #7
 80038da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f1c3 0307 	rsb	r3, r3, #7
 80038e2:	2b04      	cmp	r3, #4
 80038e4:	bf28      	it	cs
 80038e6:	2304      	movcs	r3, #4
 80038e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	3304      	adds	r3, #4
 80038ee:	2b06      	cmp	r3, #6
 80038f0:	d902      	bls.n	80038f8 <NVIC_EncodePriority+0x30>
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	3b03      	subs	r3, #3
 80038f6:	e000      	b.n	80038fa <NVIC_EncodePriority+0x32>
 80038f8:	2300      	movs	r3, #0
 80038fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003900:	69bb      	ldr	r3, [r7, #24]
 8003902:	fa02 f303 	lsl.w	r3, r2, r3
 8003906:	43da      	mvns	r2, r3
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	401a      	ands	r2, r3
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003910:	f04f 31ff 	mov.w	r1, #4294967295
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	fa01 f303 	lsl.w	r3, r1, r3
 800391a:	43d9      	mvns	r1, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003920:	4313      	orrs	r3, r2
         );
}
 8003922:	4618      	mov	r0, r3
 8003924:	3724      	adds	r7, #36	; 0x24
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr

0800392e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800392e:	b580      	push	{r7, lr}
 8003930:	b082      	sub	sp, #8
 8003932:	af00      	add	r7, sp, #0
 8003934:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f7ff ff4c 	bl	80037d4 <__NVIC_SetPriorityGrouping>
}
 800393c:	bf00      	nop
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	4603      	mov	r3, r0
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003956:	f7ff ff61 	bl	800381c <__NVIC_GetPriorityGrouping>
 800395a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	68b9      	ldr	r1, [r7, #8]
 8003960:	6978      	ldr	r0, [r7, #20]
 8003962:	f7ff ffb1 	bl	80038c8 <NVIC_EncodePriority>
 8003966:	4602      	mov	r2, r0
 8003968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800396c:	4611      	mov	r1, r2
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff ff80 	bl	8003874 <__NVIC_SetPriority>
}
 8003974:	bf00      	nop
 8003976:	3718      	adds	r7, #24
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}

0800397c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	4603      	mov	r3, r0
 8003984:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	4618      	mov	r0, r3
 800398c:	f7ff ff54 	bl	8003838 <__NVIC_EnableIRQ>
}
 8003990:	bf00      	nop
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a0:	2300      	movs	r3, #0
 80039a2:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b02      	cmp	r3, #2
 80039ae:	d008      	beq.n	80039c2 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2204      	movs	r2, #4
 80039b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e022      	b.n	8003a08 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 020e 	bic.w	r2, r2, #14
 80039d0:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f022 0201 	bic.w	r2, r2, #1
 80039e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	f003 021c 	and.w	r2, r3, #28
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ee:	2101      	movs	r1, #1
 80039f0:	fa01 f202 	lsl.w	r2, r1, r2
 80039f4:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003a06:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d005      	beq.n	8003a38 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2204      	movs	r2, #4
 8003a30:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	73fb      	strb	r3, [r7, #15]
 8003a36:	e029      	b.n	8003a8c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 020e 	bic.w	r2, r2, #14
 8003a46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0201 	bic.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a5c:	f003 021c 	and.w	r2, r3, #28
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a64:	2101      	movs	r1, #1
 8003a66:	fa01 f202 	lsl.w	r2, r1, r2
 8003a6a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d003      	beq.n	8003a8c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	4798      	blx	r3
    }
  }
  return status;
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003aa6:	e17f      	b.n	8003da8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	2101      	movs	r1, #1
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	f000 8171 	beq.w	8003da2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	f003 0303 	and.w	r3, r3, #3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d005      	beq.n	8003ad8 <HAL_GPIO_Init+0x40>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 0303 	and.w	r3, r3, #3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d130      	bne.n	8003b3a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	689b      	ldr	r3, [r3, #8]
 8003adc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	005b      	lsls	r3, r3, #1
 8003ae2:	2203      	movs	r2, #3
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	43db      	mvns	r3, r3
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4013      	ands	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	68da      	ldr	r2, [r3, #12]
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	005b      	lsls	r3, r3, #1
 8003af8:	fa02 f303 	lsl.w	r3, r2, r3
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b0e:	2201      	movs	r2, #1
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43db      	mvns	r3, r3
 8003b18:	693a      	ldr	r2, [r7, #16]
 8003b1a:	4013      	ands	r3, r2
 8003b1c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	091b      	lsrs	r3, r3, #4
 8003b24:	f003 0201 	and.w	r2, r3, #1
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d118      	bne.n	8003b78 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	08db      	lsrs	r3, r3, #3
 8003b62:	f003 0201 	and.w	r2, r3, #1
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	693a      	ldr	r2, [r7, #16]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	693a      	ldr	r2, [r7, #16]
 8003b76:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d017      	beq.n	8003bb4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	2203      	movs	r2, #3
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	693a      	ldr	r2, [r7, #16]
 8003bb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d123      	bne.n	8003c08 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	08da      	lsrs	r2, r3, #3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3208      	adds	r2, #8
 8003bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	220f      	movs	r2, #15
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4013      	ands	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	08da      	lsrs	r2, r3, #3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3208      	adds	r2, #8
 8003c02:	6939      	ldr	r1, [r7, #16]
 8003c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	2203      	movs	r2, #3
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 0203 	and.w	r2, r3, #3
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	693a      	ldr	r2, [r7, #16]
 8003c3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80ac 	beq.w	8003da2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c4a:	4b5f      	ldr	r3, [pc, #380]	; (8003dc8 <HAL_GPIO_Init+0x330>)
 8003c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c4e:	4a5e      	ldr	r2, [pc, #376]	; (8003dc8 <HAL_GPIO_Init+0x330>)
 8003c50:	f043 0301 	orr.w	r3, r3, #1
 8003c54:	6613      	str	r3, [r2, #96]	; 0x60
 8003c56:	4b5c      	ldr	r3, [pc, #368]	; (8003dc8 <HAL_GPIO_Init+0x330>)
 8003c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c5a:	f003 0301 	and.w	r3, r3, #1
 8003c5e:	60bb      	str	r3, [r7, #8]
 8003c60:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003c62:	4a5a      	ldr	r2, [pc, #360]	; (8003dcc <HAL_GPIO_Init+0x334>)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	089b      	lsrs	r3, r3, #2
 8003c68:	3302      	adds	r3, #2
 8003c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	f003 0303 	and.w	r3, r3, #3
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	220f      	movs	r2, #15
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	43db      	mvns	r3, r3
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4013      	ands	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c8c:	d025      	beq.n	8003cda <HAL_GPIO_Init+0x242>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a4f      	ldr	r2, [pc, #316]	; (8003dd0 <HAL_GPIO_Init+0x338>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d01f      	beq.n	8003cd6 <HAL_GPIO_Init+0x23e>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a4e      	ldr	r2, [pc, #312]	; (8003dd4 <HAL_GPIO_Init+0x33c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d019      	beq.n	8003cd2 <HAL_GPIO_Init+0x23a>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a4d      	ldr	r2, [pc, #308]	; (8003dd8 <HAL_GPIO_Init+0x340>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d013      	beq.n	8003cce <HAL_GPIO_Init+0x236>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a4c      	ldr	r2, [pc, #304]	; (8003ddc <HAL_GPIO_Init+0x344>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d00d      	beq.n	8003cca <HAL_GPIO_Init+0x232>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a4b      	ldr	r2, [pc, #300]	; (8003de0 <HAL_GPIO_Init+0x348>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d007      	beq.n	8003cc6 <HAL_GPIO_Init+0x22e>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a4a      	ldr	r2, [pc, #296]	; (8003de4 <HAL_GPIO_Init+0x34c>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d101      	bne.n	8003cc2 <HAL_GPIO_Init+0x22a>
 8003cbe:	2306      	movs	r3, #6
 8003cc0:	e00c      	b.n	8003cdc <HAL_GPIO_Init+0x244>
 8003cc2:	2307      	movs	r3, #7
 8003cc4:	e00a      	b.n	8003cdc <HAL_GPIO_Init+0x244>
 8003cc6:	2305      	movs	r3, #5
 8003cc8:	e008      	b.n	8003cdc <HAL_GPIO_Init+0x244>
 8003cca:	2304      	movs	r3, #4
 8003ccc:	e006      	b.n	8003cdc <HAL_GPIO_Init+0x244>
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e004      	b.n	8003cdc <HAL_GPIO_Init+0x244>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e002      	b.n	8003cdc <HAL_GPIO_Init+0x244>
 8003cd6:	2301      	movs	r3, #1
 8003cd8:	e000      	b.n	8003cdc <HAL_GPIO_Init+0x244>
 8003cda:	2300      	movs	r3, #0
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	f002 0203 	and.w	r2, r2, #3
 8003ce2:	0092      	lsls	r2, r2, #2
 8003ce4:	4093      	lsls	r3, r2
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003cec:	4937      	ldr	r1, [pc, #220]	; (8003dcc <HAL_GPIO_Init+0x334>)
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	089b      	lsrs	r3, r3, #2
 8003cf2:	3302      	adds	r3, #2
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003cfa:	4b3b      	ldr	r3, [pc, #236]	; (8003de8 <HAL_GPIO_Init+0x350>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	43db      	mvns	r3, r3
 8003d04:	693a      	ldr	r2, [r7, #16]
 8003d06:	4013      	ands	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d003      	beq.n	8003d1e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d1e:	4a32      	ldr	r2, [pc, #200]	; (8003de8 <HAL_GPIO_Init+0x350>)
 8003d20:	693b      	ldr	r3, [r7, #16]
 8003d22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d24:	4b30      	ldr	r3, [pc, #192]	; (8003de8 <HAL_GPIO_Init+0x350>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	43db      	mvns	r3, r3
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	4013      	ands	r3, r2
 8003d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d48:	4a27      	ldr	r2, [pc, #156]	; (8003de8 <HAL_GPIO_Init+0x350>)
 8003d4a:	693b      	ldr	r3, [r7, #16]
 8003d4c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d4e:	4b26      	ldr	r3, [pc, #152]	; (8003de8 <HAL_GPIO_Init+0x350>)
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	43db      	mvns	r3, r3
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4013      	ands	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003d72:	4a1d      	ldr	r2, [pc, #116]	; (8003de8 <HAL_GPIO_Init+0x350>)
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003d78:	4b1b      	ldr	r3, [pc, #108]	; (8003de8 <HAL_GPIO_Init+0x350>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	43db      	mvns	r3, r3
 8003d82:	693a      	ldr	r2, [r7, #16]
 8003d84:	4013      	ands	r3, r2
 8003d86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003d94:	693a      	ldr	r2, [r7, #16]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4313      	orrs	r3, r2
 8003d9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d9c:	4a12      	ldr	r2, [pc, #72]	; (8003de8 <HAL_GPIO_Init+0x350>)
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	3301      	adds	r3, #1
 8003da6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	fa22 f303 	lsr.w	r3, r2, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f47f ae78 	bne.w	8003aa8 <HAL_GPIO_Init+0x10>
  }
}
 8003db8:	bf00      	nop
 8003dba:	bf00      	nop
 8003dbc:	371c      	adds	r7, #28
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40021000 	.word	0x40021000
 8003dcc:	40010000 	.word	0x40010000
 8003dd0:	48000400 	.word	0x48000400
 8003dd4:	48000800 	.word	0x48000800
 8003dd8:	48000c00 	.word	0x48000c00
 8003ddc:	48001000 	.word	0x48001000
 8003de0:	48001400 	.word	0x48001400
 8003de4:	48001800 	.word	0x48001800
 8003de8:	40010400 	.word	0x40010400

08003dec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	460b      	mov	r3, r1
 8003df6:	807b      	strh	r3, [r7, #2]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dfc:	787b      	ldrb	r3, [r7, #1]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d003      	beq.n	8003e0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e02:	887a      	ldrh	r2, [r7, #2]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e08:	e002      	b.n	8003e10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e0a:	887a      	ldrh	r2, [r7, #2]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e10:	bf00      	nop
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003e20:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <HAL_PWREx_GetVoltageRange+0x18>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	40007000 	.word	0x40007000

08003e38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e46:	d130      	bne.n	8003eaa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e48:	4b23      	ldr	r3, [pc, #140]	; (8003ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e54:	d038      	beq.n	8003ec8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e56:	4b20      	ldr	r3, [pc, #128]	; (8003ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e5e:	4a1e      	ldr	r2, [pc, #120]	; (8003ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e66:	4b1d      	ldr	r3, [pc, #116]	; (8003edc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	2232      	movs	r2, #50	; 0x32
 8003e6c:	fb02 f303 	mul.w	r3, r2, r3
 8003e70:	4a1b      	ldr	r2, [pc, #108]	; (8003ee0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003e72:	fba2 2303 	umull	r2, r3, r2, r3
 8003e76:	0c9b      	lsrs	r3, r3, #18
 8003e78:	3301      	adds	r3, #1
 8003e7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e7c:	e002      	b.n	8003e84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	3b01      	subs	r3, #1
 8003e82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e84:	4b14      	ldr	r3, [pc, #80]	; (8003ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e90:	d102      	bne.n	8003e98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d1f2      	bne.n	8003e7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e98:	4b0f      	ldr	r3, [pc, #60]	; (8003ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003e9a:	695b      	ldr	r3, [r3, #20]
 8003e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea4:	d110      	bne.n	8003ec8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e00f      	b.n	8003eca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003eaa:	4b0b      	ldr	r3, [pc, #44]	; (8003ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eb6:	d007      	beq.n	8003ec8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003eb8:	4b07      	ldr	r3, [pc, #28]	; (8003ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ec0:	4a05      	ldr	r2, [pc, #20]	; (8003ed8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ec6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3714      	adds	r7, #20
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40007000 	.word	0x40007000
 8003edc:	20000010 	.word	0x20000010
 8003ee0:	431bde83 	.word	0x431bde83

08003ee4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e3d4      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ef6:	4ba1      	ldr	r3, [pc, #644]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	f003 030c 	and.w	r3, r3, #12
 8003efe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f00:	4b9e      	ldr	r3, [pc, #632]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8003f02:	68db      	ldr	r3, [r3, #12]
 8003f04:	f003 0303 	and.w	r3, r3, #3
 8003f08:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 0310 	and.w	r3, r3, #16
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	f000 80e4 	beq.w	80040e0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d007      	beq.n	8003f2e <HAL_RCC_OscConfig+0x4a>
 8003f1e:	69bb      	ldr	r3, [r7, #24]
 8003f20:	2b0c      	cmp	r3, #12
 8003f22:	f040 808b 	bne.w	800403c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003f26:	697b      	ldr	r3, [r7, #20]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	f040 8087 	bne.w	800403c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f2e:	4b93      	ldr	r3, [pc, #588]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d005      	beq.n	8003f46 <HAL_RCC_OscConfig+0x62>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e3ac      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a1a      	ldr	r2, [r3, #32]
 8003f4a:	4b8c      	ldr	r3, [pc, #560]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d004      	beq.n	8003f60 <HAL_RCC_OscConfig+0x7c>
 8003f56:	4b89      	ldr	r3, [pc, #548]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f5e:	e005      	b.n	8003f6c <HAL_RCC_OscConfig+0x88>
 8003f60:	4b86      	ldr	r3, [pc, #536]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8003f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f66:	091b      	lsrs	r3, r3, #4
 8003f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d223      	bcs.n	8003fb8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6a1b      	ldr	r3, [r3, #32]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f000 fd73 	bl	8004a60 <RCC_SetFlashLatencyFromMSIRange>
 8003f7a:	4603      	mov	r3, r0
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003f80:	2301      	movs	r3, #1
 8003f82:	e38d      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f84:	4b7d      	ldr	r3, [pc, #500]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a7c      	ldr	r2, [pc, #496]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8003f8a:	f043 0308 	orr.w	r3, r3, #8
 8003f8e:	6013      	str	r3, [r2, #0]
 8003f90:	4b7a      	ldr	r3, [pc, #488]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a1b      	ldr	r3, [r3, #32]
 8003f9c:	4977      	ldr	r1, [pc, #476]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8003f9e:	4313      	orrs	r3, r2
 8003fa0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fa2:	4b76      	ldr	r3, [pc, #472]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	4972      	ldr	r1, [pc, #456]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	604b      	str	r3, [r1, #4]
 8003fb6:	e025      	b.n	8004004 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003fb8:	4b70      	ldr	r3, [pc, #448]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a6f      	ldr	r2, [pc, #444]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8003fbe:	f043 0308 	orr.w	r3, r3, #8
 8003fc2:	6013      	str	r3, [r2, #0]
 8003fc4:	4b6d      	ldr	r3, [pc, #436]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	496a      	ldr	r1, [pc, #424]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fd6:	4b69      	ldr	r3, [pc, #420]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	021b      	lsls	r3, r3, #8
 8003fe4:	4965      	ldr	r1, [pc, #404]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d109      	bne.n	8004004 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a1b      	ldr	r3, [r3, #32]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f000 fd33 	bl	8004a60 <RCC_SetFlashLatencyFromMSIRange>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e34d      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004004:	f000 fc36 	bl	8004874 <HAL_RCC_GetSysClockFreq>
 8004008:	4602      	mov	r2, r0
 800400a:	4b5c      	ldr	r3, [pc, #368]	; (800417c <HAL_RCC_OscConfig+0x298>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	091b      	lsrs	r3, r3, #4
 8004010:	f003 030f 	and.w	r3, r3, #15
 8004014:	495a      	ldr	r1, [pc, #360]	; (8004180 <HAL_RCC_OscConfig+0x29c>)
 8004016:	5ccb      	ldrb	r3, [r1, r3]
 8004018:	f003 031f 	and.w	r3, r3, #31
 800401c:	fa22 f303 	lsr.w	r3, r2, r3
 8004020:	4a58      	ldr	r2, [pc, #352]	; (8004184 <HAL_RCC_OscConfig+0x2a0>)
 8004022:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004024:	4b58      	ldr	r3, [pc, #352]	; (8004188 <HAL_RCC_OscConfig+0x2a4>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4618      	mov	r0, r3
 800402a:	f7fd fd4d 	bl	8001ac8 <HAL_InitTick>
 800402e:	4603      	mov	r3, r0
 8004030:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004032:	7bfb      	ldrb	r3, [r7, #15]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d052      	beq.n	80040de <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004038:	7bfb      	ldrb	r3, [r7, #15]
 800403a:	e331      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d032      	beq.n	80040aa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004044:	4b4d      	ldr	r3, [pc, #308]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a4c      	ldr	r2, [pc, #304]	; (800417c <HAL_RCC_OscConfig+0x298>)
 800404a:	f043 0301 	orr.w	r3, r3, #1
 800404e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004050:	f7fe f87c 	bl	800214c <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004058:	f7fe f878 	bl	800214c <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e31a      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800406a:	4b44      	ldr	r3, [pc, #272]	; (800417c <HAL_RCC_OscConfig+0x298>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0f0      	beq.n	8004058 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004076:	4b41      	ldr	r3, [pc, #260]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a40      	ldr	r2, [pc, #256]	; (800417c <HAL_RCC_OscConfig+0x298>)
 800407c:	f043 0308 	orr.w	r3, r3, #8
 8004080:	6013      	str	r3, [r2, #0]
 8004082:	4b3e      	ldr	r3, [pc, #248]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	493b      	ldr	r1, [pc, #236]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8004090:	4313      	orrs	r3, r2
 8004092:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004094:	4b39      	ldr	r3, [pc, #228]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	69db      	ldr	r3, [r3, #28]
 80040a0:	021b      	lsls	r3, r3, #8
 80040a2:	4936      	ldr	r1, [pc, #216]	; (800417c <HAL_RCC_OscConfig+0x298>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	604b      	str	r3, [r1, #4]
 80040a8:	e01a      	b.n	80040e0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80040aa:	4b34      	ldr	r3, [pc, #208]	; (800417c <HAL_RCC_OscConfig+0x298>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a33      	ldr	r2, [pc, #204]	; (800417c <HAL_RCC_OscConfig+0x298>)
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80040b6:	f7fe f849 	bl	800214c <HAL_GetTick>
 80040ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040bc:	e008      	b.n	80040d0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80040be:	f7fe f845 	bl	800214c <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	2b02      	cmp	r3, #2
 80040ca:	d901      	bls.n	80040d0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80040cc:	2303      	movs	r3, #3
 80040ce:	e2e7      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80040d0:	4b2a      	ldr	r3, [pc, #168]	; (800417c <HAL_RCC_OscConfig+0x298>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0302 	and.w	r3, r3, #2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1f0      	bne.n	80040be <HAL_RCC_OscConfig+0x1da>
 80040dc:	e000      	b.n	80040e0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040de:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d074      	beq.n	80041d6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	2b08      	cmp	r3, #8
 80040f0:	d005      	beq.n	80040fe <HAL_RCC_OscConfig+0x21a>
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	2b0c      	cmp	r3, #12
 80040f6:	d10e      	bne.n	8004116 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	2b03      	cmp	r3, #3
 80040fc:	d10b      	bne.n	8004116 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040fe:	4b1f      	ldr	r3, [pc, #124]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d064      	beq.n	80041d4 <HAL_RCC_OscConfig+0x2f0>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d160      	bne.n	80041d4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e2c4      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800411e:	d106      	bne.n	800412e <HAL_RCC_OscConfig+0x24a>
 8004120:	4b16      	ldr	r3, [pc, #88]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a15      	ldr	r2, [pc, #84]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8004126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800412a:	6013      	str	r3, [r2, #0]
 800412c:	e01d      	b.n	800416a <HAL_RCC_OscConfig+0x286>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004136:	d10c      	bne.n	8004152 <HAL_RCC_OscConfig+0x26e>
 8004138:	4b10      	ldr	r3, [pc, #64]	; (800417c <HAL_RCC_OscConfig+0x298>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a0f      	ldr	r2, [pc, #60]	; (800417c <HAL_RCC_OscConfig+0x298>)
 800413e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	4b0d      	ldr	r3, [pc, #52]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a0c      	ldr	r2, [pc, #48]	; (800417c <HAL_RCC_OscConfig+0x298>)
 800414a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414e:	6013      	str	r3, [r2, #0]
 8004150:	e00b      	b.n	800416a <HAL_RCC_OscConfig+0x286>
 8004152:	4b0a      	ldr	r3, [pc, #40]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a09      	ldr	r2, [pc, #36]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8004158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	4b07      	ldr	r3, [pc, #28]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4a06      	ldr	r2, [pc, #24]	; (800417c <HAL_RCC_OscConfig+0x298>)
 8004164:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004168:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d01c      	beq.n	80041ac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004172:	f7fd ffeb 	bl	800214c <HAL_GetTick>
 8004176:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004178:	e011      	b.n	800419e <HAL_RCC_OscConfig+0x2ba>
 800417a:	bf00      	nop
 800417c:	40021000 	.word	0x40021000
 8004180:	0800ca14 	.word	0x0800ca14
 8004184:	20000010 	.word	0x20000010
 8004188:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800418c:	f7fd ffde 	bl	800214c <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	2b64      	cmp	r3, #100	; 0x64
 8004198:	d901      	bls.n	800419e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800419a:	2303      	movs	r3, #3
 800419c:	e280      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800419e:	4baf      	ldr	r3, [pc, #700]	; (800445c <HAL_RCC_OscConfig+0x578>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d0f0      	beq.n	800418c <HAL_RCC_OscConfig+0x2a8>
 80041aa:	e014      	b.n	80041d6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ac:	f7fd ffce 	bl	800214c <HAL_GetTick>
 80041b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041b2:	e008      	b.n	80041c6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041b4:	f7fd ffca 	bl	800214c <HAL_GetTick>
 80041b8:	4602      	mov	r2, r0
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	1ad3      	subs	r3, r2, r3
 80041be:	2b64      	cmp	r3, #100	; 0x64
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e26c      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80041c6:	4ba5      	ldr	r3, [pc, #660]	; (800445c <HAL_RCC_OscConfig+0x578>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1f0      	bne.n	80041b4 <HAL_RCC_OscConfig+0x2d0>
 80041d2:	e000      	b.n	80041d6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0302 	and.w	r3, r3, #2
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d060      	beq.n	80042a4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	2b04      	cmp	r3, #4
 80041e6:	d005      	beq.n	80041f4 <HAL_RCC_OscConfig+0x310>
 80041e8:	69bb      	ldr	r3, [r7, #24]
 80041ea:	2b0c      	cmp	r3, #12
 80041ec:	d119      	bne.n	8004222 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d116      	bne.n	8004222 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80041f4:	4b99      	ldr	r3, [pc, #612]	; (800445c <HAL_RCC_OscConfig+0x578>)
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d005      	beq.n	800420c <HAL_RCC_OscConfig+0x328>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d101      	bne.n	800420c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004208:	2301      	movs	r3, #1
 800420a:	e249      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800420c:	4b93      	ldr	r3, [pc, #588]	; (800445c <HAL_RCC_OscConfig+0x578>)
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691b      	ldr	r3, [r3, #16]
 8004218:	061b      	lsls	r3, r3, #24
 800421a:	4990      	ldr	r1, [pc, #576]	; (800445c <HAL_RCC_OscConfig+0x578>)
 800421c:	4313      	orrs	r3, r2
 800421e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004220:	e040      	b.n	80042a4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d023      	beq.n	8004272 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800422a:	4b8c      	ldr	r3, [pc, #560]	; (800445c <HAL_RCC_OscConfig+0x578>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a8b      	ldr	r2, [pc, #556]	; (800445c <HAL_RCC_OscConfig+0x578>)
 8004230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004234:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004236:	f7fd ff89 	bl	800214c <HAL_GetTick>
 800423a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800423c:	e008      	b.n	8004250 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800423e:	f7fd ff85 	bl	800214c <HAL_GetTick>
 8004242:	4602      	mov	r2, r0
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	1ad3      	subs	r3, r2, r3
 8004248:	2b02      	cmp	r3, #2
 800424a:	d901      	bls.n	8004250 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e227      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004250:	4b82      	ldr	r3, [pc, #520]	; (800445c <HAL_RCC_OscConfig+0x578>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004258:	2b00      	cmp	r3, #0
 800425a:	d0f0      	beq.n	800423e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800425c:	4b7f      	ldr	r3, [pc, #508]	; (800445c <HAL_RCC_OscConfig+0x578>)
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	061b      	lsls	r3, r3, #24
 800426a:	497c      	ldr	r1, [pc, #496]	; (800445c <HAL_RCC_OscConfig+0x578>)
 800426c:	4313      	orrs	r3, r2
 800426e:	604b      	str	r3, [r1, #4]
 8004270:	e018      	b.n	80042a4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004272:	4b7a      	ldr	r3, [pc, #488]	; (800445c <HAL_RCC_OscConfig+0x578>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a79      	ldr	r2, [pc, #484]	; (800445c <HAL_RCC_OscConfig+0x578>)
 8004278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800427c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800427e:	f7fd ff65 	bl	800214c <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004286:	f7fd ff61 	bl	800214c <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e203      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004298:	4b70      	ldr	r3, [pc, #448]	; (800445c <HAL_RCC_OscConfig+0x578>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1f0      	bne.n	8004286 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d03c      	beq.n	800432a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	695b      	ldr	r3, [r3, #20]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d01c      	beq.n	80042f2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042b8:	4b68      	ldr	r3, [pc, #416]	; (800445c <HAL_RCC_OscConfig+0x578>)
 80042ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042be:	4a67      	ldr	r2, [pc, #412]	; (800445c <HAL_RCC_OscConfig+0x578>)
 80042c0:	f043 0301 	orr.w	r3, r3, #1
 80042c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042c8:	f7fd ff40 	bl	800214c <HAL_GetTick>
 80042cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042ce:	e008      	b.n	80042e2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80042d0:	f7fd ff3c 	bl	800214c <HAL_GetTick>
 80042d4:	4602      	mov	r2, r0
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	1ad3      	subs	r3, r2, r3
 80042da:	2b02      	cmp	r3, #2
 80042dc:	d901      	bls.n	80042e2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e1de      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80042e2:	4b5e      	ldr	r3, [pc, #376]	; (800445c <HAL_RCC_OscConfig+0x578>)
 80042e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042e8:	f003 0302 	and.w	r3, r3, #2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d0ef      	beq.n	80042d0 <HAL_RCC_OscConfig+0x3ec>
 80042f0:	e01b      	b.n	800432a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042f2:	4b5a      	ldr	r3, [pc, #360]	; (800445c <HAL_RCC_OscConfig+0x578>)
 80042f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042f8:	4a58      	ldr	r2, [pc, #352]	; (800445c <HAL_RCC_OscConfig+0x578>)
 80042fa:	f023 0301 	bic.w	r3, r3, #1
 80042fe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004302:	f7fd ff23 	bl	800214c <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800430a:	f7fd ff1f 	bl	800214c <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e1c1      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800431c:	4b4f      	ldr	r3, [pc, #316]	; (800445c <HAL_RCC_OscConfig+0x578>)
 800431e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004322:	f003 0302 	and.w	r3, r3, #2
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1ef      	bne.n	800430a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 0304 	and.w	r3, r3, #4
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 80a6 	beq.w	8004484 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004338:	2300      	movs	r3, #0
 800433a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800433c:	4b47      	ldr	r3, [pc, #284]	; (800445c <HAL_RCC_OscConfig+0x578>)
 800433e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d10d      	bne.n	8004364 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004348:	4b44      	ldr	r3, [pc, #272]	; (800445c <HAL_RCC_OscConfig+0x578>)
 800434a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800434c:	4a43      	ldr	r2, [pc, #268]	; (800445c <HAL_RCC_OscConfig+0x578>)
 800434e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004352:	6593      	str	r3, [r2, #88]	; 0x58
 8004354:	4b41      	ldr	r3, [pc, #260]	; (800445c <HAL_RCC_OscConfig+0x578>)
 8004356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004358:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435c:	60bb      	str	r3, [r7, #8]
 800435e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004360:	2301      	movs	r3, #1
 8004362:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004364:	4b3e      	ldr	r3, [pc, #248]	; (8004460 <HAL_RCC_OscConfig+0x57c>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436c:	2b00      	cmp	r3, #0
 800436e:	d118      	bne.n	80043a2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004370:	4b3b      	ldr	r3, [pc, #236]	; (8004460 <HAL_RCC_OscConfig+0x57c>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a3a      	ldr	r2, [pc, #232]	; (8004460 <HAL_RCC_OscConfig+0x57c>)
 8004376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800437c:	f7fd fee6 	bl	800214c <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004384:	f7fd fee2 	bl	800214c <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e184      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004396:	4b32      	ldr	r3, [pc, #200]	; (8004460 <HAL_RCC_OscConfig+0x57c>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d108      	bne.n	80043bc <HAL_RCC_OscConfig+0x4d8>
 80043aa:	4b2c      	ldr	r3, [pc, #176]	; (800445c <HAL_RCC_OscConfig+0x578>)
 80043ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b0:	4a2a      	ldr	r2, [pc, #168]	; (800445c <HAL_RCC_OscConfig+0x578>)
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043ba:	e024      	b.n	8004406 <HAL_RCC_OscConfig+0x522>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	2b05      	cmp	r3, #5
 80043c2:	d110      	bne.n	80043e6 <HAL_RCC_OscConfig+0x502>
 80043c4:	4b25      	ldr	r3, [pc, #148]	; (800445c <HAL_RCC_OscConfig+0x578>)
 80043c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ca:	4a24      	ldr	r2, [pc, #144]	; (800445c <HAL_RCC_OscConfig+0x578>)
 80043cc:	f043 0304 	orr.w	r3, r3, #4
 80043d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043d4:	4b21      	ldr	r3, [pc, #132]	; (800445c <HAL_RCC_OscConfig+0x578>)
 80043d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043da:	4a20      	ldr	r2, [pc, #128]	; (800445c <HAL_RCC_OscConfig+0x578>)
 80043dc:	f043 0301 	orr.w	r3, r3, #1
 80043e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043e4:	e00f      	b.n	8004406 <HAL_RCC_OscConfig+0x522>
 80043e6:	4b1d      	ldr	r3, [pc, #116]	; (800445c <HAL_RCC_OscConfig+0x578>)
 80043e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043ec:	4a1b      	ldr	r2, [pc, #108]	; (800445c <HAL_RCC_OscConfig+0x578>)
 80043ee:	f023 0301 	bic.w	r3, r3, #1
 80043f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80043f6:	4b19      	ldr	r3, [pc, #100]	; (800445c <HAL_RCC_OscConfig+0x578>)
 80043f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043fc:	4a17      	ldr	r2, [pc, #92]	; (800445c <HAL_RCC_OscConfig+0x578>)
 80043fe:	f023 0304 	bic.w	r3, r3, #4
 8004402:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d016      	beq.n	800443c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440e:	f7fd fe9d 	bl	800214c <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004414:	e00a      	b.n	800442c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004416:	f7fd fe99 	bl	800214c <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	f241 3288 	movw	r2, #5000	; 0x1388
 8004424:	4293      	cmp	r3, r2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e139      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800442c:	4b0b      	ldr	r3, [pc, #44]	; (800445c <HAL_RCC_OscConfig+0x578>)
 800442e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0ed      	beq.n	8004416 <HAL_RCC_OscConfig+0x532>
 800443a:	e01a      	b.n	8004472 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800443c:	f7fd fe86 	bl	800214c <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004442:	e00f      	b.n	8004464 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004444:	f7fd fe82 	bl	800214c <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004452:	4293      	cmp	r3, r2
 8004454:	d906      	bls.n	8004464 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e122      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
 800445a:	bf00      	nop
 800445c:	40021000 	.word	0x40021000
 8004460:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004464:	4b90      	ldr	r3, [pc, #576]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 8004466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800446a:	f003 0302 	and.w	r3, r3, #2
 800446e:	2b00      	cmp	r3, #0
 8004470:	d1e8      	bne.n	8004444 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004472:	7ffb      	ldrb	r3, [r7, #31]
 8004474:	2b01      	cmp	r3, #1
 8004476:	d105      	bne.n	8004484 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004478:	4b8b      	ldr	r3, [pc, #556]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 800447a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800447c:	4a8a      	ldr	r2, [pc, #552]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 800447e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004482:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004488:	2b00      	cmp	r3, #0
 800448a:	f000 8108 	beq.w	800469e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004492:	2b02      	cmp	r3, #2
 8004494:	f040 80d0 	bne.w	8004638 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004498:	4b83      	ldr	r3, [pc, #524]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800449e:	697b      	ldr	r3, [r7, #20]
 80044a0:	f003 0203 	and.w	r2, r3, #3
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d130      	bne.n	800450e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b6:	3b01      	subs	r3, #1
 80044b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d127      	bne.n	800450e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d11f      	bne.n	800450e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044d8:	2a07      	cmp	r2, #7
 80044da:	bf14      	ite	ne
 80044dc:	2201      	movne	r2, #1
 80044de:	2200      	moveq	r2, #0
 80044e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d113      	bne.n	800450e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80044e6:	697b      	ldr	r3, [r7, #20]
 80044e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044f0:	085b      	lsrs	r3, r3, #1
 80044f2:	3b01      	subs	r3, #1
 80044f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d109      	bne.n	800450e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	085b      	lsrs	r3, r3, #1
 8004506:	3b01      	subs	r3, #1
 8004508:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800450a:	429a      	cmp	r2, r3
 800450c:	d06e      	beq.n	80045ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	2b0c      	cmp	r3, #12
 8004512:	d069      	beq.n	80045e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004514:	4b64      	ldr	r3, [pc, #400]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800451c:	2b00      	cmp	r3, #0
 800451e:	d105      	bne.n	800452c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004520:	4b61      	ldr	r3, [pc, #388]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e0b7      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004530:	4b5d      	ldr	r3, [pc, #372]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a5c      	ldr	r2, [pc, #368]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 8004536:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800453a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800453c:	f7fd fe06 	bl	800214c <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004544:	f7fd fe02 	bl	800214c <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e0a4      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004556:	4b54      	ldr	r3, [pc, #336]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004562:	4b51      	ldr	r3, [pc, #324]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 8004564:	68da      	ldr	r2, [r3, #12]
 8004566:	4b51      	ldr	r3, [pc, #324]	; (80046ac <HAL_RCC_OscConfig+0x7c8>)
 8004568:	4013      	ands	r3, r2
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004572:	3a01      	subs	r2, #1
 8004574:	0112      	lsls	r2, r2, #4
 8004576:	4311      	orrs	r1, r2
 8004578:	687a      	ldr	r2, [r7, #4]
 800457a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800457c:	0212      	lsls	r2, r2, #8
 800457e:	4311      	orrs	r1, r2
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004584:	0852      	lsrs	r2, r2, #1
 8004586:	3a01      	subs	r2, #1
 8004588:	0552      	lsls	r2, r2, #21
 800458a:	4311      	orrs	r1, r2
 800458c:	687a      	ldr	r2, [r7, #4]
 800458e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004590:	0852      	lsrs	r2, r2, #1
 8004592:	3a01      	subs	r2, #1
 8004594:	0652      	lsls	r2, r2, #25
 8004596:	4311      	orrs	r1, r2
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800459c:	0912      	lsrs	r2, r2, #4
 800459e:	0452      	lsls	r2, r2, #17
 80045a0:	430a      	orrs	r2, r1
 80045a2:	4941      	ldr	r1, [pc, #260]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80045a8:	4b3f      	ldr	r3, [pc, #252]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a3e      	ldr	r2, [pc, #248]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 80045ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80045b4:	4b3c      	ldr	r3, [pc, #240]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	4a3b      	ldr	r2, [pc, #236]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 80045ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80045be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80045c0:	f7fd fdc4 	bl	800214c <HAL_GetTick>
 80045c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045c6:	e008      	b.n	80045da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045c8:	f7fd fdc0 	bl	800214c <HAL_GetTick>
 80045cc:	4602      	mov	r2, r0
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	1ad3      	subs	r3, r2, r3
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d901      	bls.n	80045da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e062      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045da:	4b33      	ldr	r3, [pc, #204]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d0f0      	beq.n	80045c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80045e6:	e05a      	b.n	800469e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80045e8:	2301      	movs	r3, #1
 80045ea:	e059      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045ec:	4b2e      	ldr	r3, [pc, #184]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d152      	bne.n	800469e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80045f8:	4b2b      	ldr	r3, [pc, #172]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a2a      	ldr	r2, [pc, #168]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 80045fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004602:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004604:	4b28      	ldr	r3, [pc, #160]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	4a27      	ldr	r2, [pc, #156]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 800460a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800460e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004610:	f7fd fd9c 	bl	800214c <HAL_GetTick>
 8004614:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004616:	e008      	b.n	800462a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004618:	f7fd fd98 	bl	800214c <HAL_GetTick>
 800461c:	4602      	mov	r2, r0
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	1ad3      	subs	r3, r2, r3
 8004622:	2b02      	cmp	r3, #2
 8004624:	d901      	bls.n	800462a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004626:	2303      	movs	r3, #3
 8004628:	e03a      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800462a:	4b1f      	ldr	r3, [pc, #124]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d0f0      	beq.n	8004618 <HAL_RCC_OscConfig+0x734>
 8004636:	e032      	b.n	800469e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004638:	69bb      	ldr	r3, [r7, #24]
 800463a:	2b0c      	cmp	r3, #12
 800463c:	d02d      	beq.n	800469a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800463e:	4b1a      	ldr	r3, [pc, #104]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4a19      	ldr	r2, [pc, #100]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 8004644:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004648:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800464a:	4b17      	ldr	r3, [pc, #92]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d105      	bne.n	8004662 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004656:	4b14      	ldr	r3, [pc, #80]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	4a13      	ldr	r2, [pc, #76]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 800465c:	f023 0303 	bic.w	r3, r3, #3
 8004660:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004662:	4b11      	ldr	r3, [pc, #68]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	4a10      	ldr	r2, [pc, #64]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 8004668:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800466c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004670:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004672:	f7fd fd6b 	bl	800214c <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800467a:	f7fd fd67 	bl	800214c <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e009      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800468c:	4b06      	ldr	r3, [pc, #24]	; (80046a8 <HAL_RCC_OscConfig+0x7c4>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f0      	bne.n	800467a <HAL_RCC_OscConfig+0x796>
 8004698:	e001      	b.n	800469e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3720      	adds	r7, #32
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	40021000 	.word	0x40021000
 80046ac:	f99d808c 	.word	0xf99d808c

080046b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b084      	sub	sp, #16
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d101      	bne.n	80046c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	e0c8      	b.n	8004856 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046c4:	4b66      	ldr	r3, [pc, #408]	; (8004860 <HAL_RCC_ClockConfig+0x1b0>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0307 	and.w	r3, r3, #7
 80046cc:	683a      	ldr	r2, [r7, #0]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d910      	bls.n	80046f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d2:	4b63      	ldr	r3, [pc, #396]	; (8004860 <HAL_RCC_ClockConfig+0x1b0>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f023 0207 	bic.w	r2, r3, #7
 80046da:	4961      	ldr	r1, [pc, #388]	; (8004860 <HAL_RCC_ClockConfig+0x1b0>)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	4313      	orrs	r3, r2
 80046e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046e2:	4b5f      	ldr	r3, [pc, #380]	; (8004860 <HAL_RCC_ClockConfig+0x1b0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 0307 	and.w	r3, r3, #7
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d001      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e0b0      	b.n	8004856 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d04c      	beq.n	800479a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b03      	cmp	r3, #3
 8004706:	d107      	bne.n	8004718 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004708:	4b56      	ldr	r3, [pc, #344]	; (8004864 <HAL_RCC_ClockConfig+0x1b4>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d121      	bne.n	8004758 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e09e      	b.n	8004856 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	2b02      	cmp	r3, #2
 800471e:	d107      	bne.n	8004730 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004720:	4b50      	ldr	r3, [pc, #320]	; (8004864 <HAL_RCC_ClockConfig+0x1b4>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d115      	bne.n	8004758 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	e092      	b.n	8004856 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d107      	bne.n	8004748 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004738:	4b4a      	ldr	r3, [pc, #296]	; (8004864 <HAL_RCC_ClockConfig+0x1b4>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0302 	and.w	r3, r3, #2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d109      	bne.n	8004758 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e086      	b.n	8004856 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004748:	4b46      	ldr	r3, [pc, #280]	; (8004864 <HAL_RCC_ClockConfig+0x1b4>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004750:	2b00      	cmp	r3, #0
 8004752:	d101      	bne.n	8004758 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004754:	2301      	movs	r3, #1
 8004756:	e07e      	b.n	8004856 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004758:	4b42      	ldr	r3, [pc, #264]	; (8004864 <HAL_RCC_ClockConfig+0x1b4>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f023 0203 	bic.w	r2, r3, #3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	493f      	ldr	r1, [pc, #252]	; (8004864 <HAL_RCC_ClockConfig+0x1b4>)
 8004766:	4313      	orrs	r3, r2
 8004768:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800476a:	f7fd fcef 	bl	800214c <HAL_GetTick>
 800476e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004770:	e00a      	b.n	8004788 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004772:	f7fd fceb 	bl	800214c <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004780:	4293      	cmp	r3, r2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e066      	b.n	8004856 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004788:	4b36      	ldr	r3, [pc, #216]	; (8004864 <HAL_RCC_ClockConfig+0x1b4>)
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f003 020c 	and.w	r2, r3, #12
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	009b      	lsls	r3, r3, #2
 8004796:	429a      	cmp	r2, r3
 8004798:	d1eb      	bne.n	8004772 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0302 	and.w	r3, r3, #2
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d008      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047a6:	4b2f      	ldr	r3, [pc, #188]	; (8004864 <HAL_RCC_ClockConfig+0x1b4>)
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	492c      	ldr	r1, [pc, #176]	; (8004864 <HAL_RCC_ClockConfig+0x1b4>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047b8:	4b29      	ldr	r3, [pc, #164]	; (8004860 <HAL_RCC_ClockConfig+0x1b0>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0307 	and.w	r3, r3, #7
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d210      	bcs.n	80047e8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047c6:	4b26      	ldr	r3, [pc, #152]	; (8004860 <HAL_RCC_ClockConfig+0x1b0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f023 0207 	bic.w	r2, r3, #7
 80047ce:	4924      	ldr	r1, [pc, #144]	; (8004860 <HAL_RCC_ClockConfig+0x1b0>)
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047d6:	4b22      	ldr	r3, [pc, #136]	; (8004860 <HAL_RCC_ClockConfig+0x1b0>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f003 0307 	and.w	r3, r3, #7
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d001      	beq.n	80047e8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	e036      	b.n	8004856 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d008      	beq.n	8004806 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047f4:	4b1b      	ldr	r3, [pc, #108]	; (8004864 <HAL_RCC_ClockConfig+0x1b4>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	4918      	ldr	r1, [pc, #96]	; (8004864 <HAL_RCC_ClockConfig+0x1b4>)
 8004802:	4313      	orrs	r3, r2
 8004804:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0308 	and.w	r3, r3, #8
 800480e:	2b00      	cmp	r3, #0
 8004810:	d009      	beq.n	8004826 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004812:	4b14      	ldr	r3, [pc, #80]	; (8004864 <HAL_RCC_ClockConfig+0x1b4>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	691b      	ldr	r3, [r3, #16]
 800481e:	00db      	lsls	r3, r3, #3
 8004820:	4910      	ldr	r1, [pc, #64]	; (8004864 <HAL_RCC_ClockConfig+0x1b4>)
 8004822:	4313      	orrs	r3, r2
 8004824:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004826:	f000 f825 	bl	8004874 <HAL_RCC_GetSysClockFreq>
 800482a:	4602      	mov	r2, r0
 800482c:	4b0d      	ldr	r3, [pc, #52]	; (8004864 <HAL_RCC_ClockConfig+0x1b4>)
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	091b      	lsrs	r3, r3, #4
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	490c      	ldr	r1, [pc, #48]	; (8004868 <HAL_RCC_ClockConfig+0x1b8>)
 8004838:	5ccb      	ldrb	r3, [r1, r3]
 800483a:	f003 031f 	and.w	r3, r3, #31
 800483e:	fa22 f303 	lsr.w	r3, r2, r3
 8004842:	4a0a      	ldr	r2, [pc, #40]	; (800486c <HAL_RCC_ClockConfig+0x1bc>)
 8004844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004846:	4b0a      	ldr	r3, [pc, #40]	; (8004870 <HAL_RCC_ClockConfig+0x1c0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4618      	mov	r0, r3
 800484c:	f7fd f93c 	bl	8001ac8 <HAL_InitTick>
 8004850:	4603      	mov	r3, r0
 8004852:	72fb      	strb	r3, [r7, #11]

  return status;
 8004854:	7afb      	ldrb	r3, [r7, #11]
}
 8004856:	4618      	mov	r0, r3
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	40022000 	.word	0x40022000
 8004864:	40021000 	.word	0x40021000
 8004868:	0800ca14 	.word	0x0800ca14
 800486c:	20000010 	.word	0x20000010
 8004870:	20000014 	.word	0x20000014

08004874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004874:	b480      	push	{r7}
 8004876:	b089      	sub	sp, #36	; 0x24
 8004878:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	61fb      	str	r3, [r7, #28]
 800487e:	2300      	movs	r3, #0
 8004880:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004882:	4b3e      	ldr	r3, [pc, #248]	; (800497c <HAL_RCC_GetSysClockFreq+0x108>)
 8004884:	689b      	ldr	r3, [r3, #8]
 8004886:	f003 030c 	and.w	r3, r3, #12
 800488a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800488c:	4b3b      	ldr	r3, [pc, #236]	; (800497c <HAL_RCC_GetSysClockFreq+0x108>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	f003 0303 	and.w	r3, r3, #3
 8004894:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <HAL_RCC_GetSysClockFreq+0x34>
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	2b0c      	cmp	r3, #12
 80048a0:	d121      	bne.n	80048e6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	d11e      	bne.n	80048e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80048a8:	4b34      	ldr	r3, [pc, #208]	; (800497c <HAL_RCC_GetSysClockFreq+0x108>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d107      	bne.n	80048c4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80048b4:	4b31      	ldr	r3, [pc, #196]	; (800497c <HAL_RCC_GetSysClockFreq+0x108>)
 80048b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ba:	0a1b      	lsrs	r3, r3, #8
 80048bc:	f003 030f 	and.w	r3, r3, #15
 80048c0:	61fb      	str	r3, [r7, #28]
 80048c2:	e005      	b.n	80048d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80048c4:	4b2d      	ldr	r3, [pc, #180]	; (800497c <HAL_RCC_GetSysClockFreq+0x108>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	091b      	lsrs	r3, r3, #4
 80048ca:	f003 030f 	and.w	r3, r3, #15
 80048ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80048d0:	4a2b      	ldr	r2, [pc, #172]	; (8004980 <HAL_RCC_GetSysClockFreq+0x10c>)
 80048d2:	69fb      	ldr	r3, [r7, #28]
 80048d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048d8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048da:	693b      	ldr	r3, [r7, #16]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10d      	bne.n	80048fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80048e0:	69fb      	ldr	r3, [r7, #28]
 80048e2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80048e4:	e00a      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d102      	bne.n	80048f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048ec:	4b25      	ldr	r3, [pc, #148]	; (8004984 <HAL_RCC_GetSysClockFreq+0x110>)
 80048ee:	61bb      	str	r3, [r7, #24]
 80048f0:	e004      	b.n	80048fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d101      	bne.n	80048fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048f8:	4b23      	ldr	r3, [pc, #140]	; (8004988 <HAL_RCC_GetSysClockFreq+0x114>)
 80048fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	2b0c      	cmp	r3, #12
 8004900:	d134      	bne.n	800496c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004902:	4b1e      	ldr	r3, [pc, #120]	; (800497c <HAL_RCC_GetSysClockFreq+0x108>)
 8004904:	68db      	ldr	r3, [r3, #12]
 8004906:	f003 0303 	and.w	r3, r3, #3
 800490a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d003      	beq.n	800491a <HAL_RCC_GetSysClockFreq+0xa6>
 8004912:	68bb      	ldr	r3, [r7, #8]
 8004914:	2b03      	cmp	r3, #3
 8004916:	d003      	beq.n	8004920 <HAL_RCC_GetSysClockFreq+0xac>
 8004918:	e005      	b.n	8004926 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800491a:	4b1a      	ldr	r3, [pc, #104]	; (8004984 <HAL_RCC_GetSysClockFreq+0x110>)
 800491c:	617b      	str	r3, [r7, #20]
      break;
 800491e:	e005      	b.n	800492c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004920:	4b19      	ldr	r3, [pc, #100]	; (8004988 <HAL_RCC_GetSysClockFreq+0x114>)
 8004922:	617b      	str	r3, [r7, #20]
      break;
 8004924:	e002      	b.n	800492c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	617b      	str	r3, [r7, #20]
      break;
 800492a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800492c:	4b13      	ldr	r3, [pc, #76]	; (800497c <HAL_RCC_GetSysClockFreq+0x108>)
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	091b      	lsrs	r3, r3, #4
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	3301      	adds	r3, #1
 8004938:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800493a:	4b10      	ldr	r3, [pc, #64]	; (800497c <HAL_RCC_GetSysClockFreq+0x108>)
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	0a1b      	lsrs	r3, r3, #8
 8004940:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004944:	697a      	ldr	r2, [r7, #20]
 8004946:	fb02 f203 	mul.w	r2, r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004950:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004952:	4b0a      	ldr	r3, [pc, #40]	; (800497c <HAL_RCC_GetSysClockFreq+0x108>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	0e5b      	lsrs	r3, r3, #25
 8004958:	f003 0303 	and.w	r3, r3, #3
 800495c:	3301      	adds	r3, #1
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	fbb2 f3f3 	udiv	r3, r2, r3
 800496a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800496c:	69bb      	ldr	r3, [r7, #24]
}
 800496e:	4618      	mov	r0, r3
 8004970:	3724      	adds	r7, #36	; 0x24
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr
 800497a:	bf00      	nop
 800497c:	40021000 	.word	0x40021000
 8004980:	0800ca2c 	.word	0x0800ca2c
 8004984:	00f42400 	.word	0x00f42400
 8004988:	007a1200 	.word	0x007a1200

0800498c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800498c:	b480      	push	{r7}
 800498e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004990:	4b03      	ldr	r3, [pc, #12]	; (80049a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004992:	681b      	ldr	r3, [r3, #0]
}
 8004994:	4618      	mov	r0, r3
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	20000010 	.word	0x20000010

080049a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80049a8:	f7ff fff0 	bl	800498c <HAL_RCC_GetHCLKFreq>
 80049ac:	4602      	mov	r2, r0
 80049ae:	4b06      	ldr	r3, [pc, #24]	; (80049c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	0a1b      	lsrs	r3, r3, #8
 80049b4:	f003 0307 	and.w	r3, r3, #7
 80049b8:	4904      	ldr	r1, [pc, #16]	; (80049cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80049ba:	5ccb      	ldrb	r3, [r1, r3]
 80049bc:	f003 031f 	and.w	r3, r3, #31
 80049c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40021000 	.word	0x40021000
 80049cc:	0800ca24 	.word	0x0800ca24

080049d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049d4:	f7ff ffda 	bl	800498c <HAL_RCC_GetHCLKFreq>
 80049d8:	4602      	mov	r2, r0
 80049da:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	0adb      	lsrs	r3, r3, #11
 80049e0:	f003 0307 	and.w	r3, r3, #7
 80049e4:	4904      	ldr	r1, [pc, #16]	; (80049f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049e6:	5ccb      	ldrb	r3, [r1, r3]
 80049e8:	f003 031f 	and.w	r3, r3, #31
 80049ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	bd80      	pop	{r7, pc}
 80049f4:	40021000 	.word	0x40021000
 80049f8:	0800ca24 	.word	0x0800ca24

080049fc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	220f      	movs	r2, #15
 8004a0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004a0c:	4b12      	ldr	r3, [pc, #72]	; (8004a58 <HAL_RCC_GetClockConfig+0x5c>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 0203 	and.w	r2, r3, #3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004a18:	4b0f      	ldr	r3, [pc, #60]	; (8004a58 <HAL_RCC_GetClockConfig+0x5c>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004a24:	4b0c      	ldr	r3, [pc, #48]	; (8004a58 <HAL_RCC_GetClockConfig+0x5c>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004a30:	4b09      	ldr	r3, [pc, #36]	; (8004a58 <HAL_RCC_GetClockConfig+0x5c>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	08db      	lsrs	r3, r3, #3
 8004a36:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004a3e:	4b07      	ldr	r3, [pc, #28]	; (8004a5c <HAL_RCC_GetClockConfig+0x60>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 0207 	and.w	r2, r3, #7
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	601a      	str	r2, [r3, #0]
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr
 8004a56:	bf00      	nop
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	40022000 	.word	0x40022000

08004a60 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004a68:	2300      	movs	r3, #0
 8004a6a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004a6c:	4b2a      	ldr	r3, [pc, #168]	; (8004b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d003      	beq.n	8004a80 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004a78:	f7ff f9d0 	bl	8003e1c <HAL_PWREx_GetVoltageRange>
 8004a7c:	6178      	str	r0, [r7, #20]
 8004a7e:	e014      	b.n	8004aaa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004a80:	4b25      	ldr	r3, [pc, #148]	; (8004b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a84:	4a24      	ldr	r2, [pc, #144]	; (8004b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a8c:	4b22      	ldr	r3, [pc, #136]	; (8004b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a94:	60fb      	str	r3, [r7, #12]
 8004a96:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004a98:	f7ff f9c0 	bl	8003e1c <HAL_PWREx_GetVoltageRange>
 8004a9c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004a9e:	4b1e      	ldr	r3, [pc, #120]	; (8004b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa2:	4a1d      	ldr	r2, [pc, #116]	; (8004b18 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab0:	d10b      	bne.n	8004aca <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2b80      	cmp	r3, #128	; 0x80
 8004ab6:	d919      	bls.n	8004aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2ba0      	cmp	r3, #160	; 0xa0
 8004abc:	d902      	bls.n	8004ac4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004abe:	2302      	movs	r3, #2
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	e013      	b.n	8004aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	e010      	b.n	8004aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b80      	cmp	r3, #128	; 0x80
 8004ace:	d902      	bls.n	8004ad6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	613b      	str	r3, [r7, #16]
 8004ad4:	e00a      	b.n	8004aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2b80      	cmp	r3, #128	; 0x80
 8004ada:	d102      	bne.n	8004ae2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004adc:	2302      	movs	r3, #2
 8004ade:	613b      	str	r3, [r7, #16]
 8004ae0:	e004      	b.n	8004aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2b70      	cmp	r3, #112	; 0x70
 8004ae6:	d101      	bne.n	8004aec <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004ae8:	2301      	movs	r3, #1
 8004aea:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004aec:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f023 0207 	bic.w	r2, r3, #7
 8004af4:	4909      	ldr	r1, [pc, #36]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004afc:	4b07      	ldr	r3, [pc, #28]	; (8004b1c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d001      	beq.n	8004b0e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e000      	b.n	8004b10 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3718      	adds	r7, #24
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40021000 	.word	0x40021000
 8004b1c:	40022000 	.word	0x40022000

08004b20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b086      	sub	sp, #24
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b28:	2300      	movs	r3, #0
 8004b2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d041      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b40:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b44:	d02a      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004b46:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004b4a:	d824      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b50:	d008      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004b52:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004b56:	d81e      	bhi.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004b5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b60:	d010      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004b62:	e018      	b.n	8004b96 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b64:	4b86      	ldr	r3, [pc, #536]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	4a85      	ldr	r2, [pc, #532]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b6e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b70:	e015      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	3304      	adds	r3, #4
 8004b76:	2100      	movs	r1, #0
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fabb 	bl	80050f4 <RCCEx_PLLSAI1_Config>
 8004b7e:	4603      	mov	r3, r0
 8004b80:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b82:	e00c      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	3320      	adds	r3, #32
 8004b88:	2100      	movs	r1, #0
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f000 fba6 	bl	80052dc <RCCEx_PLLSAI2_Config>
 8004b90:	4603      	mov	r3, r0
 8004b92:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004b94:	e003      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	74fb      	strb	r3, [r7, #19]
      break;
 8004b9a:	e000      	b.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004b9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b9e:	7cfb      	ldrb	r3, [r7, #19]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10b      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ba4:	4b76      	ldr	r3, [pc, #472]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004baa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bb2:	4973      	ldr	r1, [pc, #460]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004bba:	e001      	b.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bbc:	7cfb      	ldrb	r3, [r7, #19]
 8004bbe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d041      	beq.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004bd0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bd4:	d02a      	beq.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004bd6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004bda:	d824      	bhi.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004bdc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004be0:	d008      	beq.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004be2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004be6:	d81e      	bhi.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00a      	beq.n	8004c02 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004bec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004bf0:	d010      	beq.n	8004c14 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004bf2:	e018      	b.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004bf4:	4b62      	ldr	r3, [pc, #392]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	4a61      	ldr	r2, [pc, #388]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bfe:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c00:	e015      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	3304      	adds	r3, #4
 8004c06:	2100      	movs	r1, #0
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 fa73 	bl	80050f4 <RCCEx_PLLSAI1_Config>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c12:	e00c      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	3320      	adds	r3, #32
 8004c18:	2100      	movs	r1, #0
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fb5e 	bl	80052dc <RCCEx_PLLSAI2_Config>
 8004c20:	4603      	mov	r3, r0
 8004c22:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004c24:	e003      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	74fb      	strb	r3, [r7, #19]
      break;
 8004c2a:	e000      	b.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004c2c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c2e:	7cfb      	ldrb	r3, [r7, #19]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10b      	bne.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c34:	4b52      	ldr	r3, [pc, #328]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c3a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004c42:	494f      	ldr	r1, [pc, #316]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c4a:	e001      	b.n	8004c50 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c4c:	7cfb      	ldrb	r3, [r7, #19]
 8004c4e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 80a0 	beq.w	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c62:	4b47      	ldr	r3, [pc, #284]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e000      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004c72:	2300      	movs	r3, #0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00d      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c78:	4b41      	ldr	r3, [pc, #260]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c7c:	4a40      	ldr	r2, [pc, #256]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c82:	6593      	str	r3, [r2, #88]	; 0x58
 8004c84:	4b3e      	ldr	r3, [pc, #248]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c90:	2301      	movs	r3, #1
 8004c92:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c94:	4b3b      	ldr	r3, [pc, #236]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a3a      	ldr	r2, [pc, #232]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ca0:	f7fd fa54 	bl	800214c <HAL_GetTick>
 8004ca4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ca6:	e009      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ca8:	f7fd fa50 	bl	800214c <HAL_GetTick>
 8004cac:	4602      	mov	r2, r0
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	1ad3      	subs	r3, r2, r3
 8004cb2:	2b02      	cmp	r3, #2
 8004cb4:	d902      	bls.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	74fb      	strb	r3, [r7, #19]
        break;
 8004cba:	e005      	b.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cbc:	4b31      	ldr	r3, [pc, #196]	; (8004d84 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0ef      	beq.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004cc8:	7cfb      	ldrb	r3, [r7, #19]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d15c      	bne.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004cce:	4b2c      	ldr	r3, [pc, #176]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cd8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d01f      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004ce6:	697a      	ldr	r2, [r7, #20]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d019      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004cec:	4b24      	ldr	r3, [pc, #144]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004cf8:	4b21      	ldr	r3, [pc, #132]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004cfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cfe:	4a20      	ldr	r2, [pc, #128]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d08:	4b1d      	ldr	r3, [pc, #116]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0e:	4a1c      	ldr	r2, [pc, #112]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d18:	4a19      	ldr	r2, [pc, #100]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	f003 0301 	and.w	r3, r3, #1
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d016      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2a:	f7fd fa0f 	bl	800214c <HAL_GetTick>
 8004d2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d30:	e00b      	b.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d32:	f7fd fa0b 	bl	800214c <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d902      	bls.n	8004d4a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	74fb      	strb	r3, [r7, #19]
            break;
 8004d48:	e006      	b.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d4a:	4b0d      	ldr	r3, [pc, #52]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0ec      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004d58:	7cfb      	ldrb	r3, [r7, #19]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d10c      	bne.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d5e:	4b08      	ldr	r3, [pc, #32]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d6e:	4904      	ldr	r1, [pc, #16]	; (8004d80 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004d70:	4313      	orrs	r3, r2
 8004d72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004d76:	e009      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d78:	7cfb      	ldrb	r3, [r7, #19]
 8004d7a:	74bb      	strb	r3, [r7, #18]
 8004d7c:	e006      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004d7e:	bf00      	nop
 8004d80:	40021000 	.word	0x40021000
 8004d84:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d88:	7cfb      	ldrb	r3, [r7, #19]
 8004d8a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d8c:	7c7b      	ldrb	r3, [r7, #17]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d105      	bne.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d92:	4b9e      	ldr	r3, [pc, #632]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d96:	4a9d      	ldr	r2, [pc, #628]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d9c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00a      	beq.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004daa:	4b98      	ldr	r3, [pc, #608]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db0:	f023 0203 	bic.w	r2, r3, #3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db8:	4994      	ldr	r1, [pc, #592]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0302 	and.w	r3, r3, #2
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d00a      	beq.n	8004de2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004dcc:	4b8f      	ldr	r3, [pc, #572]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dd2:	f023 020c 	bic.w	r2, r3, #12
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dda:	498c      	ldr	r1, [pc, #560]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0304 	and.w	r3, r3, #4
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d00a      	beq.n	8004e04 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dee:	4b87      	ldr	r3, [pc, #540]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004df4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfc:	4983      	ldr	r1, [pc, #524]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0308 	and.w	r3, r3, #8
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00a      	beq.n	8004e26 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e10:	4b7e      	ldr	r3, [pc, #504]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e1e:	497b      	ldr	r1, [pc, #492]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0310 	and.w	r3, r3, #16
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00a      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004e32:	4b76      	ldr	r3, [pc, #472]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e40:	4972      	ldr	r1, [pc, #456]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 0320 	and.w	r3, r3, #32
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d00a      	beq.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e54:	4b6d      	ldr	r3, [pc, #436]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e62:	496a      	ldr	r1, [pc, #424]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00a      	beq.n	8004e8c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e76:	4b65      	ldr	r3, [pc, #404]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e84:	4961      	ldr	r1, [pc, #388]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00a      	beq.n	8004eae <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e98:	4b5c      	ldr	r3, [pc, #368]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ea6:	4959      	ldr	r1, [pc, #356]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004eba:	4b54      	ldr	r3, [pc, #336]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ec8:	4950      	ldr	r1, [pc, #320]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eca:	4313      	orrs	r3, r2
 8004ecc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d00a      	beq.n	8004ef2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004edc:	4b4b      	ldr	r3, [pc, #300]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ee2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eea:	4948      	ldr	r1, [pc, #288]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eec:	4313      	orrs	r3, r2
 8004eee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d00a      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004efe:	4b43      	ldr	r3, [pc, #268]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f0c:	493f      	ldr	r1, [pc, #252]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d028      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f20:	4b3a      	ldr	r3, [pc, #232]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f2e:	4937      	ldr	r1, [pc, #220]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f3e:	d106      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f40:	4b32      	ldr	r3, [pc, #200]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	4a31      	ldr	r2, [pc, #196]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f4a:	60d3      	str	r3, [r2, #12]
 8004f4c:	e011      	b.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f56:	d10c      	bne.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	3304      	adds	r3, #4
 8004f5c:	2101      	movs	r1, #1
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f000 f8c8 	bl	80050f4 <RCCEx_PLLSAI1_Config>
 8004f64:	4603      	mov	r3, r0
 8004f66:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f68:	7cfb      	ldrb	r3, [r7, #19]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d001      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004f6e:	7cfb      	ldrb	r3, [r7, #19]
 8004f70:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d028      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004f7e:	4b23      	ldr	r3, [pc, #140]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f84:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8c:	491f      	ldr	r1, [pc, #124]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f9c:	d106      	bne.n	8004fac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f9e:	4b1b      	ldr	r3, [pc, #108]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	4a1a      	ldr	r2, [pc, #104]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004fa8:	60d3      	str	r3, [r2, #12]
 8004faa:	e011      	b.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004fb4:	d10c      	bne.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	3304      	adds	r3, #4
 8004fba:	2101      	movs	r1, #1
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f000 f899 	bl	80050f4 <RCCEx_PLLSAI1_Config>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fc6:	7cfb      	ldrb	r3, [r7, #19]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d001      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004fcc:	7cfb      	ldrb	r3, [r7, #19]
 8004fce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d02b      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004fdc:	4b0b      	ldr	r3, [pc, #44]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fe2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fea:	4908      	ldr	r1, [pc, #32]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004fec:	4313      	orrs	r3, r2
 8004fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ff6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ffa:	d109      	bne.n	8005010 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ffc:	4b03      	ldr	r3, [pc, #12]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	4a02      	ldr	r2, [pc, #8]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005006:	60d3      	str	r3, [r2, #12]
 8005008:	e014      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800500a:	bf00      	nop
 800500c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005014:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005018:	d10c      	bne.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	3304      	adds	r3, #4
 800501e:	2101      	movs	r1, #1
 8005020:	4618      	mov	r0, r3
 8005022:	f000 f867 	bl	80050f4 <RCCEx_PLLSAI1_Config>
 8005026:	4603      	mov	r3, r0
 8005028:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800502a:	7cfb      	ldrb	r3, [r7, #19]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d001      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005030:	7cfb      	ldrb	r3, [r7, #19]
 8005032:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d02f      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005040:	4b2b      	ldr	r3, [pc, #172]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005046:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800504e:	4928      	ldr	r1, [pc, #160]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005050:	4313      	orrs	r3, r2
 8005052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800505a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800505e:	d10d      	bne.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3304      	adds	r3, #4
 8005064:	2102      	movs	r1, #2
 8005066:	4618      	mov	r0, r3
 8005068:	f000 f844 	bl	80050f4 <RCCEx_PLLSAI1_Config>
 800506c:	4603      	mov	r3, r0
 800506e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005070:	7cfb      	ldrb	r3, [r7, #19]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d014      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005076:	7cfb      	ldrb	r3, [r7, #19]
 8005078:	74bb      	strb	r3, [r7, #18]
 800507a:	e011      	b.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005080:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005084:	d10c      	bne.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	3320      	adds	r3, #32
 800508a:	2102      	movs	r1, #2
 800508c:	4618      	mov	r0, r3
 800508e:	f000 f925 	bl	80052dc <RCCEx_PLLSAI2_Config>
 8005092:	4603      	mov	r3, r0
 8005094:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005096:	7cfb      	ldrb	r3, [r7, #19]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d001      	beq.n	80050a0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800509c:	7cfb      	ldrb	r3, [r7, #19]
 800509e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00a      	beq.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80050ac:	4b10      	ldr	r3, [pc, #64]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050b2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80050ba:	490d      	ldr	r1, [pc, #52]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050bc:	4313      	orrs	r3, r2
 80050be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00b      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80050ce:	4b08      	ldr	r3, [pc, #32]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050de:	4904      	ldr	r1, [pc, #16]	; (80050f0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80050e6:	7cbb      	ldrb	r3, [r7, #18]
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	40021000 	.word	0x40021000

080050f4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005102:	4b75      	ldr	r3, [pc, #468]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d018      	beq.n	8005140 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800510e:	4b72      	ldr	r3, [pc, #456]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f003 0203 	and.w	r2, r3, #3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d10d      	bne.n	800513a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
       ||
 8005122:	2b00      	cmp	r3, #0
 8005124:	d009      	beq.n	800513a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005126:	4b6c      	ldr	r3, [pc, #432]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	091b      	lsrs	r3, r3, #4
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
       ||
 8005136:	429a      	cmp	r2, r3
 8005138:	d047      	beq.n	80051ca <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
 800513e:	e044      	b.n	80051ca <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b03      	cmp	r3, #3
 8005146:	d018      	beq.n	800517a <RCCEx_PLLSAI1_Config+0x86>
 8005148:	2b03      	cmp	r3, #3
 800514a:	d825      	bhi.n	8005198 <RCCEx_PLLSAI1_Config+0xa4>
 800514c:	2b01      	cmp	r3, #1
 800514e:	d002      	beq.n	8005156 <RCCEx_PLLSAI1_Config+0x62>
 8005150:	2b02      	cmp	r3, #2
 8005152:	d009      	beq.n	8005168 <RCCEx_PLLSAI1_Config+0x74>
 8005154:	e020      	b.n	8005198 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005156:	4b60      	ldr	r3, [pc, #384]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d11d      	bne.n	800519e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005166:	e01a      	b.n	800519e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005168:	4b5b      	ldr	r3, [pc, #364]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005170:	2b00      	cmp	r3, #0
 8005172:	d116      	bne.n	80051a2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005178:	e013      	b.n	80051a2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800517a:	4b57      	ldr	r3, [pc, #348]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10f      	bne.n	80051a6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005186:	4b54      	ldr	r3, [pc, #336]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d109      	bne.n	80051a6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005196:	e006      	b.n	80051a6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	73fb      	strb	r3, [r7, #15]
      break;
 800519c:	e004      	b.n	80051a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800519e:	bf00      	nop
 80051a0:	e002      	b.n	80051a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051a2:	bf00      	nop
 80051a4:	e000      	b.n	80051a8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80051a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10d      	bne.n	80051ca <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051ae:	4b4a      	ldr	r3, [pc, #296]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6819      	ldr	r1, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	3b01      	subs	r3, #1
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	430b      	orrs	r3, r1
 80051c4:	4944      	ldr	r1, [pc, #272]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d17d      	bne.n	80052cc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80051d0:	4b41      	ldr	r3, [pc, #260]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a40      	ldr	r2, [pc, #256]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80051da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051dc:	f7fc ffb6 	bl	800214c <HAL_GetTick>
 80051e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051e2:	e009      	b.n	80051f8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051e4:	f7fc ffb2 	bl	800214c <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d902      	bls.n	80051f8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	73fb      	strb	r3, [r7, #15]
        break;
 80051f6:	e005      	b.n	8005204 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80051f8:	4b37      	ldr	r3, [pc, #220]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1ef      	bne.n	80051e4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d160      	bne.n	80052cc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d111      	bne.n	8005234 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005210:	4b31      	ldr	r3, [pc, #196]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005212:	691b      	ldr	r3, [r3, #16]
 8005214:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6892      	ldr	r2, [r2, #8]
 8005220:	0211      	lsls	r1, r2, #8
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	68d2      	ldr	r2, [r2, #12]
 8005226:	0912      	lsrs	r2, r2, #4
 8005228:	0452      	lsls	r2, r2, #17
 800522a:	430a      	orrs	r2, r1
 800522c:	492a      	ldr	r1, [pc, #168]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800522e:	4313      	orrs	r3, r2
 8005230:	610b      	str	r3, [r1, #16]
 8005232:	e027      	b.n	8005284 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d112      	bne.n	8005260 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800523a:	4b27      	ldr	r3, [pc, #156]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800523c:	691b      	ldr	r3, [r3, #16]
 800523e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005242:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6892      	ldr	r2, [r2, #8]
 800524a:	0211      	lsls	r1, r2, #8
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6912      	ldr	r2, [r2, #16]
 8005250:	0852      	lsrs	r2, r2, #1
 8005252:	3a01      	subs	r2, #1
 8005254:	0552      	lsls	r2, r2, #21
 8005256:	430a      	orrs	r2, r1
 8005258:	491f      	ldr	r1, [pc, #124]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800525a:	4313      	orrs	r3, r2
 800525c:	610b      	str	r3, [r1, #16]
 800525e:	e011      	b.n	8005284 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005260:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005268:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6892      	ldr	r2, [r2, #8]
 8005270:	0211      	lsls	r1, r2, #8
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	6952      	ldr	r2, [r2, #20]
 8005276:	0852      	lsrs	r2, r2, #1
 8005278:	3a01      	subs	r2, #1
 800527a:	0652      	lsls	r2, r2, #25
 800527c:	430a      	orrs	r2, r1
 800527e:	4916      	ldr	r1, [pc, #88]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005280:	4313      	orrs	r3, r2
 8005282:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005284:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a13      	ldr	r2, [pc, #76]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800528a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800528e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005290:	f7fc ff5c 	bl	800214c <HAL_GetTick>
 8005294:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005296:	e009      	b.n	80052ac <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005298:	f7fc ff58 	bl	800214c <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d902      	bls.n	80052ac <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	73fb      	strb	r3, [r7, #15]
          break;
 80052aa:	e005      	b.n	80052b8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0ef      	beq.n	8005298 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052c0:	691a      	ldr	r2, [r3, #16]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	699b      	ldr	r3, [r3, #24]
 80052c6:	4904      	ldr	r1, [pc, #16]	; (80052d8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40021000 	.word	0x40021000

080052dc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052e6:	2300      	movs	r3, #0
 80052e8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052ea:	4b6a      	ldr	r3, [pc, #424]	; (8005494 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	f003 0303 	and.w	r3, r3, #3
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d018      	beq.n	8005328 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80052f6:	4b67      	ldr	r3, [pc, #412]	; (8005494 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0203 	and.w	r2, r3, #3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	429a      	cmp	r2, r3
 8005304:	d10d      	bne.n	8005322 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
       ||
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800530e:	4b61      	ldr	r3, [pc, #388]	; (8005494 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	091b      	lsrs	r3, r3, #4
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	1c5a      	adds	r2, r3, #1
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
       ||
 800531e:	429a      	cmp	r2, r3
 8005320:	d047      	beq.n	80053b2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	73fb      	strb	r3, [r7, #15]
 8005326:	e044      	b.n	80053b2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b03      	cmp	r3, #3
 800532e:	d018      	beq.n	8005362 <RCCEx_PLLSAI2_Config+0x86>
 8005330:	2b03      	cmp	r3, #3
 8005332:	d825      	bhi.n	8005380 <RCCEx_PLLSAI2_Config+0xa4>
 8005334:	2b01      	cmp	r3, #1
 8005336:	d002      	beq.n	800533e <RCCEx_PLLSAI2_Config+0x62>
 8005338:	2b02      	cmp	r3, #2
 800533a:	d009      	beq.n	8005350 <RCCEx_PLLSAI2_Config+0x74>
 800533c:	e020      	b.n	8005380 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800533e:	4b55      	ldr	r3, [pc, #340]	; (8005494 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0302 	and.w	r3, r3, #2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d11d      	bne.n	8005386 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800534a:	2301      	movs	r3, #1
 800534c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800534e:	e01a      	b.n	8005386 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005350:	4b50      	ldr	r3, [pc, #320]	; (8005494 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005358:	2b00      	cmp	r3, #0
 800535a:	d116      	bne.n	800538a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005360:	e013      	b.n	800538a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005362:	4b4c      	ldr	r3, [pc, #304]	; (8005494 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10f      	bne.n	800538e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800536e:	4b49      	ldr	r3, [pc, #292]	; (8005494 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d109      	bne.n	800538e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800537e:	e006      	b.n	800538e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	73fb      	strb	r3, [r7, #15]
      break;
 8005384:	e004      	b.n	8005390 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005386:	bf00      	nop
 8005388:	e002      	b.n	8005390 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800538a:	bf00      	nop
 800538c:	e000      	b.n	8005390 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800538e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005390:	7bfb      	ldrb	r3, [r7, #15]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d10d      	bne.n	80053b2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005396:	4b3f      	ldr	r3, [pc, #252]	; (8005494 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6819      	ldr	r1, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	3b01      	subs	r3, #1
 80053a8:	011b      	lsls	r3, r3, #4
 80053aa:	430b      	orrs	r3, r1
 80053ac:	4939      	ldr	r1, [pc, #228]	; (8005494 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80053b2:	7bfb      	ldrb	r3, [r7, #15]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d167      	bne.n	8005488 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80053b8:	4b36      	ldr	r3, [pc, #216]	; (8005494 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a35      	ldr	r2, [pc, #212]	; (8005494 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053c4:	f7fc fec2 	bl	800214c <HAL_GetTick>
 80053c8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053ca:	e009      	b.n	80053e0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80053cc:	f7fc febe 	bl	800214c <HAL_GetTick>
 80053d0:	4602      	mov	r2, r0
 80053d2:	68bb      	ldr	r3, [r7, #8]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d902      	bls.n	80053e0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	73fb      	strb	r3, [r7, #15]
        break;
 80053de:	e005      	b.n	80053ec <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80053e0:	4b2c      	ldr	r3, [pc, #176]	; (8005494 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d1ef      	bne.n	80053cc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d14a      	bne.n	8005488 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d111      	bne.n	800541c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80053f8:	4b26      	ldr	r3, [pc, #152]	; (8005494 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6892      	ldr	r2, [r2, #8]
 8005408:	0211      	lsls	r1, r2, #8
 800540a:	687a      	ldr	r2, [r7, #4]
 800540c:	68d2      	ldr	r2, [r2, #12]
 800540e:	0912      	lsrs	r2, r2, #4
 8005410:	0452      	lsls	r2, r2, #17
 8005412:	430a      	orrs	r2, r1
 8005414:	491f      	ldr	r1, [pc, #124]	; (8005494 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005416:	4313      	orrs	r3, r2
 8005418:	614b      	str	r3, [r1, #20]
 800541a:	e011      	b.n	8005440 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800541c:	4b1d      	ldr	r3, [pc, #116]	; (8005494 <RCCEx_PLLSAI2_Config+0x1b8>)
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005424:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005428:	687a      	ldr	r2, [r7, #4]
 800542a:	6892      	ldr	r2, [r2, #8]
 800542c:	0211      	lsls	r1, r2, #8
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6912      	ldr	r2, [r2, #16]
 8005432:	0852      	lsrs	r2, r2, #1
 8005434:	3a01      	subs	r2, #1
 8005436:	0652      	lsls	r2, r2, #25
 8005438:	430a      	orrs	r2, r1
 800543a:	4916      	ldr	r1, [pc, #88]	; (8005494 <RCCEx_PLLSAI2_Config+0x1b8>)
 800543c:	4313      	orrs	r3, r2
 800543e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005440:	4b14      	ldr	r3, [pc, #80]	; (8005494 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a13      	ldr	r2, [pc, #76]	; (8005494 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800544a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800544c:	f7fc fe7e 	bl	800214c <HAL_GetTick>
 8005450:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005452:	e009      	b.n	8005468 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005454:	f7fc fe7a 	bl	800214c <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d902      	bls.n	8005468 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	73fb      	strb	r3, [r7, #15]
          break;
 8005466:	e005      	b.n	8005474 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005468:	4b0a      	ldr	r3, [pc, #40]	; (8005494 <RCCEx_PLLSAI2_Config+0x1b8>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d0ef      	beq.n	8005454 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005474:	7bfb      	ldrb	r3, [r7, #15]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d106      	bne.n	8005488 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800547a:	4b06      	ldr	r3, [pc, #24]	; (8005494 <RCCEx_PLLSAI2_Config+0x1b8>)
 800547c:	695a      	ldr	r2, [r3, #20]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	4904      	ldr	r1, [pc, #16]	; (8005494 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005484:	4313      	orrs	r3, r2
 8005486:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005488:	7bfb      	ldrb	r3, [r7, #15]
}
 800548a:	4618      	mov	r0, r3
 800548c:	3710      	adds	r7, #16
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
 8005492:	bf00      	nop
 8005494:	40021000 	.word	0x40021000

08005498 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d06c      	beq.n	8005584 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d106      	bne.n	80054c4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7fc fa08 	bl	80018d4 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	22ca      	movs	r2, #202	; 0xca
 80054d2:	625a      	str	r2, [r3, #36]	; 0x24
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2253      	movs	r2, #83	; 0x53
 80054da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fa49 	bl	8005974 <RTC_EnterInitMode>
 80054e2:	4603      	mov	r3, r0
 80054e4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80054e6:	7bfb      	ldrb	r3, [r7, #15]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d14b      	bne.n	8005584 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	6812      	ldr	r2, [r2, #0]
 80054f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80054fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054fe:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6899      	ldr	r1, [r3, #8]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	691b      	ldr	r3, [r3, #16]
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	430a      	orrs	r2, r1
 800551c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	68d2      	ldr	r2, [r2, #12]
 8005526:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6919      	ldr	r1, [r3, #16]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	041a      	lsls	r2, r3, #16
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	430a      	orrs	r2, r1
 800553a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fa4d 	bl	80059dc <RTC_ExitInitMode>
 8005542:	4603      	mov	r3, r0
 8005544:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005546:	7bfb      	ldrb	r3, [r7, #15]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d11b      	bne.n	8005584 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0203 	bic.w	r2, r2, #3
 800555a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	69da      	ldr	r2, [r3, #28]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	431a      	orrs	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	430a      	orrs	r2, r1
 8005572:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	22ff      	movs	r2, #255	; 0xff
 800557a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2201      	movs	r2, #1
 8005580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8005584:	7bfb      	ldrb	r3, [r7, #15]
}
 8005586:	4618      	mov	r0, r3
 8005588:	3710      	adds	r7, #16
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}

0800558e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800558e:	b590      	push	{r4, r7, lr}
 8005590:	b087      	sub	sp, #28
 8005592:	af00      	add	r7, sp, #0
 8005594:	60f8      	str	r0, [r7, #12]
 8005596:	60b9      	str	r1, [r7, #8]
 8005598:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_RTC_SetTime+0x1a>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e08b      	b.n	80056c0 <HAL_RTC_SetTime+0x132>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	22ca      	movs	r2, #202	; 0xca
 80055be:	625a      	str	r2, [r3, #36]	; 0x24
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2253      	movs	r2, #83	; 0x53
 80055c6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 f9d3 	bl	8005974 <RTC_EnterInitMode>
 80055ce:	4603      	mov	r3, r0
 80055d0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80055d2:	7cfb      	ldrb	r3, [r7, #19]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d163      	bne.n	80056a0 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d126      	bne.n	800562c <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d102      	bne.n	80055f2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	2200      	movs	r2, #0
 80055f0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f000 fa2e 	bl	8005a58 <RTC_ByteToBcd2>
 80055fc:	4603      	mov	r3, r0
 80055fe:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	785b      	ldrb	r3, [r3, #1]
 8005604:	4618      	mov	r0, r3
 8005606:	f000 fa27 	bl	8005a58 <RTC_ByteToBcd2>
 800560a:	4603      	mov	r3, r0
 800560c:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800560e:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005610:	68bb      	ldr	r3, [r7, #8]
 8005612:	789b      	ldrb	r3, [r3, #2]
 8005614:	4618      	mov	r0, r3
 8005616:	f000 fa1f 	bl	8005a58 <RTC_ByteToBcd2>
 800561a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800561c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	78db      	ldrb	r3, [r3, #3]
 8005624:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005626:	4313      	orrs	r3, r2
 8005628:	617b      	str	r3, [r7, #20]
 800562a:	e018      	b.n	800565e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689b      	ldr	r3, [r3, #8]
 8005632:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005636:	2b00      	cmp	r3, #0
 8005638:	d102      	bne.n	8005640 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	2200      	movs	r2, #0
 800563e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	781b      	ldrb	r3, [r3, #0]
 8005644:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	785b      	ldrb	r3, [r3, #1]
 800564a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800564c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005652:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	78db      	ldrb	r3, [r3, #3]
 8005658:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800565a:	4313      	orrs	r3, r2
 800565c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005668:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800566c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	689a      	ldr	r2, [r3, #8]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800567c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6899      	ldr	r1, [r3, #8]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	68da      	ldr	r2, [r3, #12]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	431a      	orrs	r2, r3
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005696:	68f8      	ldr	r0, [r7, #12]
 8005698:	f000 f9a0 	bl	80059dc <RTC_ExitInitMode>
 800569c:	4603      	mov	r3, r0
 800569e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	22ff      	movs	r2, #255	; 0xff
 80056a6:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80056a8:	7cfb      	ldrb	r3, [r7, #19]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d103      	bne.n	80056b6 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2201      	movs	r2, #1
 80056b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80056be:	7cfb      	ldrb	r3, [r7, #19]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	371c      	adds	r7, #28
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd90      	pop	{r4, r7, pc}

080056c8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	691b      	ldr	r3, [r3, #16]
 80056e4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80056f6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80056fa:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	0c1b      	lsrs	r3, r3, #16
 8005700:	b2db      	uxtb	r3, r3
 8005702:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005706:	b2da      	uxtb	r2, r3
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	0a1b      	lsrs	r3, r3, #8
 8005710:	b2db      	uxtb	r3, r3
 8005712:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005716:	b2da      	uxtb	r2, r3
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 800571c:	697b      	ldr	r3, [r7, #20]
 800571e:	b2db      	uxtb	r3, r3
 8005720:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005724:	b2da      	uxtb	r2, r3
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800572a:	697b      	ldr	r3, [r7, #20]
 800572c:	0d9b      	lsrs	r3, r3, #22
 800572e:	b2db      	uxtb	r3, r3
 8005730:	f003 0301 	and.w	r3, r3, #1
 8005734:	b2da      	uxtb	r2, r3
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d11a      	bne.n	8005776 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	781b      	ldrb	r3, [r3, #0]
 8005744:	4618      	mov	r0, r3
 8005746:	f000 f9a7 	bl	8005a98 <RTC_Bcd2ToByte>
 800574a:	4603      	mov	r3, r0
 800574c:	461a      	mov	r2, r3
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	785b      	ldrb	r3, [r3, #1]
 8005756:	4618      	mov	r0, r3
 8005758:	f000 f99e 	bl	8005a98 <RTC_Bcd2ToByte>
 800575c:	4603      	mov	r3, r0
 800575e:	461a      	mov	r2, r3
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	789b      	ldrb	r3, [r3, #2]
 8005768:	4618      	mov	r0, r3
 800576a:	f000 f995 	bl	8005a98 <RTC_Bcd2ToByte>
 800576e:	4603      	mov	r3, r0
 8005770:	461a      	mov	r2, r3
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005776:	2300      	movs	r3, #0
}
 8005778:	4618      	mov	r0, r3
 800577a:	3718      	adds	r7, #24
 800577c:	46bd      	mov	sp, r7
 800577e:	bd80      	pop	{r7, pc}

08005780 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005780:	b590      	push	{r4, r7, lr}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005792:	2b01      	cmp	r3, #1
 8005794:	d101      	bne.n	800579a <HAL_RTC_SetDate+0x1a>
 8005796:	2302      	movs	r3, #2
 8005798:	e075      	b.n	8005886 <HAL_RTC_SetDate+0x106>
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2201      	movs	r2, #1
 800579e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2202      	movs	r2, #2
 80057a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10e      	bne.n	80057ce <HAL_RTC_SetDate+0x4e>
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	785b      	ldrb	r3, [r3, #1]
 80057b4:	f003 0310 	and.w	r3, r3, #16
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d008      	beq.n	80057ce <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	785b      	ldrb	r3, [r3, #1]
 80057c0:	f023 0310 	bic.w	r3, r3, #16
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	330a      	adds	r3, #10
 80057c8:	b2da      	uxtb	r2, r3
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d11c      	bne.n	800580e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	78db      	ldrb	r3, [r3, #3]
 80057d8:	4618      	mov	r0, r3
 80057da:	f000 f93d 	bl	8005a58 <RTC_ByteToBcd2>
 80057de:	4603      	mov	r3, r0
 80057e0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	785b      	ldrb	r3, [r3, #1]
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 f936 	bl	8005a58 <RTC_ByteToBcd2>
 80057ec:	4603      	mov	r3, r0
 80057ee:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80057f0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	789b      	ldrb	r3, [r3, #2]
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 f92e 	bl	8005a58 <RTC_ByteToBcd2>
 80057fc:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80057fe:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	781b      	ldrb	r3, [r3, #0]
 8005806:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]
 800580c:	e00e      	b.n	800582c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	78db      	ldrb	r3, [r3, #3]
 8005812:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	785b      	ldrb	r3, [r3, #1]
 8005818:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800581a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 800581c:	68ba      	ldr	r2, [r7, #8]
 800581e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005820:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005828:	4313      	orrs	r3, r2
 800582a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	22ca      	movs	r2, #202	; 0xca
 8005832:	625a      	str	r2, [r3, #36]	; 0x24
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2253      	movs	r2, #83	; 0x53
 800583a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800583c:	68f8      	ldr	r0, [r7, #12]
 800583e:	f000 f899 	bl	8005974 <RTC_EnterInitMode>
 8005842:	4603      	mov	r3, r0
 8005844:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005846:	7cfb      	ldrb	r3, [r7, #19]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d10c      	bne.n	8005866 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005856:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800585a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 f8bd 	bl	80059dc <RTC_ExitInitMode>
 8005862:	4603      	mov	r3, r0
 8005864:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	22ff      	movs	r2, #255	; 0xff
 800586c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800586e:	7cfb      	ldrb	r3, [r7, #19]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d103      	bne.n	800587c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2201      	movs	r2, #1
 8005878:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005884:	7cfb      	ldrb	r3, [r7, #19]
}
 8005886:	4618      	mov	r0, r3
 8005888:	371c      	adds	r7, #28
 800588a:	46bd      	mov	sp, r7
 800588c:	bd90      	pop	{r4, r7, pc}

0800588e <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800588e:	b580      	push	{r7, lr}
 8005890:	b086      	sub	sp, #24
 8005892:	af00      	add	r7, sp, #0
 8005894:	60f8      	str	r0, [r7, #12]
 8005896:	60b9      	str	r1, [r7, #8]
 8005898:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80058a4:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80058a8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80058aa:	697b      	ldr	r3, [r7, #20]
 80058ac:	0c1b      	lsrs	r3, r3, #16
 80058ae:	b2da      	uxtb	r2, r3
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	0a1b      	lsrs	r3, r3, #8
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	f003 031f 	and.w	r3, r3, #31
 80058be:	b2da      	uxtb	r2, r3
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80058cc:	b2da      	uxtb	r2, r3
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	0b5b      	lsrs	r3, r3, #13
 80058d6:	b2db      	uxtb	r3, r3
 80058d8:	f003 0307 	and.w	r3, r3, #7
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d11a      	bne.n	800591e <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	78db      	ldrb	r3, [r3, #3]
 80058ec:	4618      	mov	r0, r3
 80058ee:	f000 f8d3 	bl	8005a98 <RTC_Bcd2ToByte>
 80058f2:	4603      	mov	r3, r0
 80058f4:	461a      	mov	r2, r3
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	785b      	ldrb	r3, [r3, #1]
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 f8ca 	bl	8005a98 <RTC_Bcd2ToByte>
 8005904:	4603      	mov	r3, r0
 8005906:	461a      	mov	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	789b      	ldrb	r3, [r3, #2]
 8005910:	4618      	mov	r0, r3
 8005912:	f000 f8c1 	bl	8005a98 <RTC_Bcd2ToByte>
 8005916:	4603      	mov	r3, r0
 8005918:	461a      	mov	r2, r3
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800591e:	2300      	movs	r3, #0
}
 8005920:	4618      	mov	r0, r3
 8005922:	3718      	adds	r7, #24
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800593e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005940:	f7fc fc04 	bl	800214c <HAL_GetTick>
 8005944:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005946:	e009      	b.n	800595c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005948:	f7fc fc00 	bl	800214c <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005956:	d901      	bls.n	800595c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e007      	b.n	800596c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68db      	ldr	r3, [r3, #12]
 8005962:	f003 0320 	and.w	r3, r3, #32
 8005966:	2b00      	cmp	r3, #0
 8005968:	d0ee      	beq.n	8005948 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800597c:	2300      	movs	r3, #0
 800597e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800598a:	2b00      	cmp	r3, #0
 800598c:	d120      	bne.n	80059d0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f04f 32ff 	mov.w	r2, #4294967295
 8005996:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8005998:	f7fc fbd8 	bl	800214c <HAL_GetTick>
 800599c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800599e:	e00d      	b.n	80059bc <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80059a0:	f7fc fbd4 	bl	800214c <HAL_GetTick>
 80059a4:	4602      	mov	r2, r0
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	1ad3      	subs	r3, r2, r3
 80059aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059ae:	d905      	bls.n	80059bc <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2203      	movs	r2, #3
 80059b8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	68db      	ldr	r3, [r3, #12]
 80059c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d102      	bne.n	80059d0 <RTC_EnterInitMode+0x5c>
 80059ca:	7bfb      	ldrb	r3, [r7, #15]
 80059cc:	2b03      	cmp	r3, #3
 80059ce:	d1e7      	bne.n	80059a0 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3710      	adds	r7, #16
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80059e4:	2300      	movs	r3, #0
 80059e6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80059e8:	4b1a      	ldr	r3, [pc, #104]	; (8005a54 <RTC_ExitInitMode+0x78>)
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	4a19      	ldr	r2, [pc, #100]	; (8005a54 <RTC_ExitInitMode+0x78>)
 80059ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059f2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80059f4:	4b17      	ldr	r3, [pc, #92]	; (8005a54 <RTC_ExitInitMode+0x78>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	f003 0320 	and.w	r3, r3, #32
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d10c      	bne.n	8005a1a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f7ff ff91 	bl	8005928 <HAL_RTC_WaitForSynchro>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d01e      	beq.n	8005a4a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2203      	movs	r2, #3
 8005a10:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005a14:	2303      	movs	r3, #3
 8005a16:	73fb      	strb	r3, [r7, #15]
 8005a18:	e017      	b.n	8005a4a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005a1a:	4b0e      	ldr	r3, [pc, #56]	; (8005a54 <RTC_ExitInitMode+0x78>)
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	4a0d      	ldr	r2, [pc, #52]	; (8005a54 <RTC_ExitInitMode+0x78>)
 8005a20:	f023 0320 	bic.w	r3, r3, #32
 8005a24:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7ff ff7e 	bl	8005928 <HAL_RTC_WaitForSynchro>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d005      	beq.n	8005a3e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2203      	movs	r2, #3
 8005a36:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005a3a:	2303      	movs	r3, #3
 8005a3c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005a3e:	4b05      	ldr	r3, [pc, #20]	; (8005a54 <RTC_ExitInitMode+0x78>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	4a04      	ldr	r2, [pc, #16]	; (8005a54 <RTC_ExitInitMode+0x78>)
 8005a44:	f043 0320 	orr.w	r3, r3, #32
 8005a48:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40002800 	.word	0x40002800

08005a58 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	4603      	mov	r3, r0
 8005a60:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8005a62:	2300      	movs	r3, #0
 8005a64:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005a66:	79fb      	ldrb	r3, [r7, #7]
 8005a68:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005a6a:	e005      	b.n	8005a78 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8005a72:	7afb      	ldrb	r3, [r7, #11]
 8005a74:	3b0a      	subs	r3, #10
 8005a76:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005a78:	7afb      	ldrb	r3, [r7, #11]
 8005a7a:	2b09      	cmp	r3, #9
 8005a7c:	d8f6      	bhi.n	8005a6c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	011b      	lsls	r3, r3, #4
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	7afb      	ldrb	r3, [r7, #11]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	b2db      	uxtb	r3, r3
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8005aa2:	79fb      	ldrb	r3, [r7, #7]
 8005aa4:	091b      	lsrs	r3, r3, #4
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	0092      	lsls	r2, r2, #2
 8005aac:	4413      	add	r3, r2
 8005aae:	005b      	lsls	r3, r3, #1
 8005ab0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8005ab2:	79fb      	ldrb	r3, [r7, #7]
 8005ab4:	f003 030f 	and.w	r3, r3, #15
 8005ab8:	b2da      	uxtb	r2, r3
 8005aba:	7bfb      	ldrb	r3, [r7, #15]
 8005abc:	4413      	add	r3, r2
 8005abe:	b2db      	uxtb	r3, r3
}
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	3714      	adds	r7, #20
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d101      	bne.n	8005ade <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e095      	b.n	8005c0a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d108      	bne.n	8005af8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005aee:	d009      	beq.n	8005b04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	61da      	str	r2, [r3, #28]
 8005af6:	e005      	b.n	8005b04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2200      	movs	r2, #0
 8005b08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d106      	bne.n	8005b24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005b1e:	6878      	ldr	r0, [r7, #4]
 8005b20:	f7fb ff48 	bl	80019b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2202      	movs	r2, #2
 8005b28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b44:	d902      	bls.n	8005b4c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005b46:	2300      	movs	r3, #0
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	e002      	b.n	8005b52 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005b4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005b50:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b5a:	d007      	beq.n	8005b6c <HAL_SPI_Init+0xa0>
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68db      	ldr	r3, [r3, #12]
 8005b60:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b64:	d002      	beq.n	8005b6c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	685b      	ldr	r3, [r3, #4]
 8005b70:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	689b      	ldr	r3, [r3, #8]
 8005b78:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	691b      	ldr	r3, [r3, #16]
 8005b82:	f003 0302 	and.w	r3, r3, #2
 8005b86:	431a      	orrs	r2, r3
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	431a      	orrs	r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	699b      	ldr	r3, [r3, #24]
 8005b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b9a:	431a      	orrs	r2, r3
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	69db      	ldr	r3, [r3, #28]
 8005ba0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bae:	ea42 0103 	orr.w	r1, r2, r3
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	0c1b      	lsrs	r3, r3, #16
 8005bc8:	f003 0204 	and.w	r2, r3, #4
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bd0:	f003 0310 	and.w	r3, r3, #16
 8005bd4:	431a      	orrs	r2, r3
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bda:	f003 0308 	and.w	r3, r3, #8
 8005bde:	431a      	orrs	r2, r3
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005be8:	ea42 0103 	orr.w	r1, r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2201      	movs	r2, #1
 8005c04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b088      	sub	sp, #32
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	60f8      	str	r0, [r7, #12]
 8005c1a:	60b9      	str	r1, [r7, #8]
 8005c1c:	603b      	str	r3, [r7, #0]
 8005c1e:	4613      	mov	r3, r2
 8005c20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c22:	2300      	movs	r3, #0
 8005c24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_SPI_Transmit+0x22>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e158      	b.n	8005ee6 <HAL_SPI_Transmit+0x2d4>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c3c:	f7fc fa86 	bl	800214c <HAL_GetTick>
 8005c40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005c42:	88fb      	ldrh	r3, [r7, #6]
 8005c44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b01      	cmp	r3, #1
 8005c50:	d002      	beq.n	8005c58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005c52:	2302      	movs	r3, #2
 8005c54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c56:	e13d      	b.n	8005ed4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <HAL_SPI_Transmit+0x52>
 8005c5e:	88fb      	ldrh	r3, [r7, #6]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d102      	bne.n	8005c6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005c64:	2301      	movs	r3, #1
 8005c66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005c68:	e134      	b.n	8005ed4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	2203      	movs	r2, #3
 8005c6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2200      	movs	r2, #0
 8005c76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	88fa      	ldrh	r2, [r7, #6]
 8005c82:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	88fa      	ldrh	r2, [r7, #6]
 8005c88:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cb4:	d10f      	bne.n	8005cd6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	681a      	ldr	r2, [r3, #0]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cd4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ce0:	2b40      	cmp	r3, #64	; 0x40
 8005ce2:	d007      	beq.n	8005cf4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cf2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cfc:	d94b      	bls.n	8005d96 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d002      	beq.n	8005d0c <HAL_SPI_Transmit+0xfa>
 8005d06:	8afb      	ldrh	r3, [r7, #22]
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d13e      	bne.n	8005d8a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d10:	881a      	ldrh	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d1c:	1c9a      	adds	r2, r3, #2
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	b29a      	uxth	r2, r3
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005d30:	e02b      	b.n	8005d8a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f003 0302 	and.w	r3, r3, #2
 8005d3c:	2b02      	cmp	r3, #2
 8005d3e:	d112      	bne.n	8005d66 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d44:	881a      	ldrh	r2, [r3, #0]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d50:	1c9a      	adds	r2, r3, #2
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d64:	e011      	b.n	8005d8a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d66:	f7fc f9f1 	bl	800214c <HAL_GetTick>
 8005d6a:	4602      	mov	r2, r0
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	1ad3      	subs	r3, r2, r3
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	429a      	cmp	r2, r3
 8005d74:	d803      	bhi.n	8005d7e <HAL_SPI_Transmit+0x16c>
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d7c:	d102      	bne.n	8005d84 <HAL_SPI_Transmit+0x172>
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d102      	bne.n	8005d8a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d88:	e0a4      	b.n	8005ed4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d1ce      	bne.n	8005d32 <HAL_SPI_Transmit+0x120>
 8005d94:	e07c      	b.n	8005e90 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d002      	beq.n	8005da4 <HAL_SPI_Transmit+0x192>
 8005d9e:	8afb      	ldrh	r3, [r7, #22]
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	d170      	bne.n	8005e86 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d912      	bls.n	8005dd4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db2:	881a      	ldrh	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbe:	1c9a      	adds	r2, r3, #2
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3b02      	subs	r3, #2
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dd2:	e058      	b.n	8005e86 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	330c      	adds	r3, #12
 8005dde:	7812      	ldrb	r2, [r2, #0]
 8005de0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de6:	1c5a      	adds	r2, r3, #1
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005df0:	b29b      	uxth	r3, r3
 8005df2:	3b01      	subs	r3, #1
 8005df4:	b29a      	uxth	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005dfa:	e044      	b.n	8005e86 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	2b02      	cmp	r3, #2
 8005e08:	d12b      	bne.n	8005e62 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d912      	bls.n	8005e3a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e18:	881a      	ldrh	r2, [r3, #0]
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e24:	1c9a      	adds	r2, r3, #2
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	3b02      	subs	r3, #2
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e38:	e025      	b.n	8005e86 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	330c      	adds	r3, #12
 8005e44:	7812      	ldrb	r2, [r2, #0]
 8005e46:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e4c:	1c5a      	adds	r2, r3, #1
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	3b01      	subs	r3, #1
 8005e5a:	b29a      	uxth	r2, r3
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e60:	e011      	b.n	8005e86 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e62:	f7fc f973 	bl	800214c <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d803      	bhi.n	8005e7a <HAL_SPI_Transmit+0x268>
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e78:	d102      	bne.n	8005e80 <HAL_SPI_Transmit+0x26e>
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d102      	bne.n	8005e86 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005e84:	e026      	b.n	8005ed4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1b5      	bne.n	8005dfc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e90:	69ba      	ldr	r2, [r7, #24]
 8005e92:	6839      	ldr	r1, [r7, #0]
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 f949 	bl	800612c <SPI_EndRxTxTransaction>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d002      	beq.n	8005ea6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2220      	movs	r2, #32
 8005ea4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005eae:	2300      	movs	r3, #0
 8005eb0:	613b      	str	r3, [r7, #16]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68db      	ldr	r3, [r3, #12]
 8005eb8:	613b      	str	r3, [r7, #16]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	613b      	str	r3, [r7, #16]
 8005ec2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d002      	beq.n	8005ed2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	77fb      	strb	r3, [r7, #31]
 8005ed0:	e000      	b.n	8005ed4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005ed2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	2201      	movs	r2, #1
 8005ed8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005ee4:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3720      	adds	r7, #32
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	603b      	str	r3, [r7, #0]
 8005efc:	4613      	mov	r3, r2
 8005efe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005f00:	f7fc f924 	bl	800214c <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f08:	1a9b      	subs	r3, r3, r2
 8005f0a:	683a      	ldr	r2, [r7, #0]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f10:	f7fc f91c 	bl	800214c <HAL_GetTick>
 8005f14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005f16:	4b39      	ldr	r3, [pc, #228]	; (8005ffc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	015b      	lsls	r3, r3, #5
 8005f1c:	0d1b      	lsrs	r3, r3, #20
 8005f1e:	69fa      	ldr	r2, [r7, #28]
 8005f20:	fb02 f303 	mul.w	r3, r2, r3
 8005f24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f26:	e054      	b.n	8005fd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f2e:	d050      	beq.n	8005fd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f30:	f7fc f90c 	bl	800214c <HAL_GetTick>
 8005f34:	4602      	mov	r2, r0
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	1ad3      	subs	r3, r2, r3
 8005f3a:	69fa      	ldr	r2, [r7, #28]
 8005f3c:	429a      	cmp	r2, r3
 8005f3e:	d902      	bls.n	8005f46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d13d      	bne.n	8005fc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005f54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f5e:	d111      	bne.n	8005f84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f68:	d004      	beq.n	8005f74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f72:	d107      	bne.n	8005f84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	681a      	ldr	r2, [r3, #0]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f8c:	d10f      	bne.n	8005fae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f9c:	601a      	str	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005fac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005fbe:	2303      	movs	r3, #3
 8005fc0:	e017      	b.n	8005ff2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d101      	bne.n	8005fcc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689a      	ldr	r2, [r3, #8]
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	4013      	ands	r3, r2
 8005fdc:	68ba      	ldr	r2, [r7, #8]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	bf0c      	ite	eq
 8005fe2:	2301      	moveq	r3, #1
 8005fe4:	2300      	movne	r3, #0
 8005fe6:	b2db      	uxtb	r3, r3
 8005fe8:	461a      	mov	r2, r3
 8005fea:	79fb      	ldrb	r3, [r7, #7]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d19b      	bne.n	8005f28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3720      	adds	r7, #32
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
 8005ffa:	bf00      	nop
 8005ffc:	20000010 	.word	0x20000010

08006000 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b08a      	sub	sp, #40	; 0x28
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800600e:	2300      	movs	r3, #0
 8006010:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006012:	f7fc f89b 	bl	800214c <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	1a9b      	subs	r3, r3, r2
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	4413      	add	r3, r2
 8006020:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006022:	f7fc f893 	bl	800214c <HAL_GetTick>
 8006026:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	330c      	adds	r3, #12
 800602e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006030:	4b3d      	ldr	r3, [pc, #244]	; (8006128 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	4613      	mov	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	00da      	lsls	r2, r3, #3
 800603c:	1ad3      	subs	r3, r2, r3
 800603e:	0d1b      	lsrs	r3, r3, #20
 8006040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006042:	fb02 f303 	mul.w	r3, r2, r3
 8006046:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006048:	e060      	b.n	800610c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800604a:	68bb      	ldr	r3, [r7, #8]
 800604c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006050:	d107      	bne.n	8006062 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d104      	bne.n	8006062 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	781b      	ldrb	r3, [r3, #0]
 800605c:	b2db      	uxtb	r3, r3
 800605e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006060:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006068:	d050      	beq.n	800610c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800606a:	f7fc f86f 	bl	800214c <HAL_GetTick>
 800606e:	4602      	mov	r2, r0
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	1ad3      	subs	r3, r2, r3
 8006074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006076:	429a      	cmp	r2, r3
 8006078:	d902      	bls.n	8006080 <SPI_WaitFifoStateUntilTimeout+0x80>
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	2b00      	cmp	r3, #0
 800607e:	d13d      	bne.n	80060fc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	685a      	ldr	r2, [r3, #4]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800608e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006098:	d111      	bne.n	80060be <SPI_WaitFifoStateUntilTimeout+0xbe>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060a2:	d004      	beq.n	80060ae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060ac:	d107      	bne.n	80060be <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060bc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060c6:	d10f      	bne.n	80060e8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060d6:	601a      	str	r2, [r3, #0]
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060e6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e010      	b.n	800611e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d101      	bne.n	8006106 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006102:	2300      	movs	r3, #0
 8006104:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	3b01      	subs	r3, #1
 800610a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689a      	ldr	r2, [r3, #8]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	4013      	ands	r3, r2
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	429a      	cmp	r2, r3
 800611a:	d196      	bne.n	800604a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800611c:	2300      	movs	r3, #0
}
 800611e:	4618      	mov	r0, r3
 8006120:	3728      	adds	r7, #40	; 0x28
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20000010 	.word	0x20000010

0800612c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af02      	add	r7, sp, #8
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	9300      	str	r3, [sp, #0]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2200      	movs	r2, #0
 8006140:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f7ff ff5b 	bl	8006000 <SPI_WaitFifoStateUntilTimeout>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d007      	beq.n	8006160 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006154:	f043 0220 	orr.w	r2, r3, #32
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e027      	b.n	80061b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	9300      	str	r3, [sp, #0]
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2200      	movs	r2, #0
 8006168:	2180      	movs	r1, #128	; 0x80
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	f7ff fec0 	bl	8005ef0 <SPI_WaitFlagStateUntilTimeout>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d007      	beq.n	8006186 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800617a:	f043 0220 	orr.w	r2, r3, #32
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006182:	2303      	movs	r3, #3
 8006184:	e014      	b.n	80061b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	9300      	str	r3, [sp, #0]
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	2200      	movs	r2, #0
 800618e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f7ff ff34 	bl	8006000 <SPI_WaitFifoStateUntilTimeout>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d007      	beq.n	80061ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a2:	f043 0220 	orr.w	r2, r3, #32
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	e000      	b.n	80061b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3710      	adds	r7, #16
 80061b4:	46bd      	mov	sp, r7
 80061b6:	bd80      	pop	{r7, pc}

080061b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b082      	sub	sp, #8
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061c6:	2301      	movs	r3, #1
 80061c8:	e049      	b.n	800625e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d106      	bne.n	80061e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7fb fdb2 	bl	8001d48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2202      	movs	r2, #2
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	3304      	adds	r3, #4
 80061f4:	4619      	mov	r1, r3
 80061f6:	4610      	mov	r0, r2
 80061f8:	f000 fd34 	bl	8006c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800625c:	2300      	movs	r3, #0
}
 800625e:	4618      	mov	r0, r3
 8006260:	3708      	adds	r7, #8
 8006262:	46bd      	mov	sp, r7
 8006264:	bd80      	pop	{r7, pc}
	...

08006268 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b01      	cmp	r3, #1
 800627a:	d001      	beq.n	8006280 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e04f      	b.n	8006320 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2202      	movs	r2, #2
 8006284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	68da      	ldr	r2, [r3, #12]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a23      	ldr	r2, [pc, #140]	; (800632c <HAL_TIM_Base_Start_IT+0xc4>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d01d      	beq.n	80062de <HAL_TIM_Base_Start_IT+0x76>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062aa:	d018      	beq.n	80062de <HAL_TIM_Base_Start_IT+0x76>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a1f      	ldr	r2, [pc, #124]	; (8006330 <HAL_TIM_Base_Start_IT+0xc8>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d013      	beq.n	80062de <HAL_TIM_Base_Start_IT+0x76>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a1e      	ldr	r2, [pc, #120]	; (8006334 <HAL_TIM_Base_Start_IT+0xcc>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d00e      	beq.n	80062de <HAL_TIM_Base_Start_IT+0x76>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a1c      	ldr	r2, [pc, #112]	; (8006338 <HAL_TIM_Base_Start_IT+0xd0>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d009      	beq.n	80062de <HAL_TIM_Base_Start_IT+0x76>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a1b      	ldr	r2, [pc, #108]	; (800633c <HAL_TIM_Base_Start_IT+0xd4>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d004      	beq.n	80062de <HAL_TIM_Base_Start_IT+0x76>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a19      	ldr	r2, [pc, #100]	; (8006340 <HAL_TIM_Base_Start_IT+0xd8>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d115      	bne.n	800630a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	4b17      	ldr	r3, [pc, #92]	; (8006344 <HAL_TIM_Base_Start_IT+0xdc>)
 80062e6:	4013      	ands	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2b06      	cmp	r3, #6
 80062ee:	d015      	beq.n	800631c <HAL_TIM_Base_Start_IT+0xb4>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f6:	d011      	beq.n	800631c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0201 	orr.w	r2, r2, #1
 8006306:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006308:	e008      	b.n	800631c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f042 0201 	orr.w	r2, r2, #1
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	e000      	b.n	800631e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800631c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3714      	adds	r7, #20
 8006324:	46bd      	mov	sp, r7
 8006326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632a:	4770      	bx	lr
 800632c:	40012c00 	.word	0x40012c00
 8006330:	40000400 	.word	0x40000400
 8006334:	40000800 	.word	0x40000800
 8006338:	40000c00 	.word	0x40000c00
 800633c:	40013400 	.word	0x40013400
 8006340:	40014000 	.word	0x40014000
 8006344:	00010007 	.word	0x00010007

08006348 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d101      	bne.n	800635a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	e049      	b.n	80063ee <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d106      	bne.n	8006374 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f000 f841 	bl	80063f6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2202      	movs	r2, #2
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3304      	adds	r3, #4
 8006384:	4619      	mov	r1, r3
 8006386:	4610      	mov	r0, r2
 8006388:	f000 fc6c 	bl	8006c64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2201      	movs	r2, #1
 8006390:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2201      	movs	r2, #1
 80063a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2201      	movs	r2, #1
 80063b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	2201      	movs	r2, #1
 80063d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2201      	movs	r2, #1
 80063d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2201      	movs	r2, #1
 80063e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063ec:	2300      	movs	r3, #0
}
 80063ee:	4618      	mov	r0, r3
 80063f0:	3708      	adds	r7, #8
 80063f2:	46bd      	mov	sp, r7
 80063f4:	bd80      	pop	{r7, pc}

080063f6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80063f6:	b480      	push	{r7}
 80063f8:	b083      	sub	sp, #12
 80063fa:	af00      	add	r7, sp, #0
 80063fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80063fe:	bf00      	nop
 8006400:	370c      	adds	r7, #12
 8006402:	46bd      	mov	sp, r7
 8006404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006408:	4770      	bx	lr
	...

0800640c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d109      	bne.n	8006430 <HAL_TIM_PWM_Start+0x24>
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006422:	b2db      	uxtb	r3, r3
 8006424:	2b01      	cmp	r3, #1
 8006426:	bf14      	ite	ne
 8006428:	2301      	movne	r3, #1
 800642a:	2300      	moveq	r3, #0
 800642c:	b2db      	uxtb	r3, r3
 800642e:	e03c      	b.n	80064aa <HAL_TIM_PWM_Start+0x9e>
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	2b04      	cmp	r3, #4
 8006434:	d109      	bne.n	800644a <HAL_TIM_PWM_Start+0x3e>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b01      	cmp	r3, #1
 8006440:	bf14      	ite	ne
 8006442:	2301      	movne	r3, #1
 8006444:	2300      	moveq	r3, #0
 8006446:	b2db      	uxtb	r3, r3
 8006448:	e02f      	b.n	80064aa <HAL_TIM_PWM_Start+0x9e>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b08      	cmp	r3, #8
 800644e:	d109      	bne.n	8006464 <HAL_TIM_PWM_Start+0x58>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006456:	b2db      	uxtb	r3, r3
 8006458:	2b01      	cmp	r3, #1
 800645a:	bf14      	ite	ne
 800645c:	2301      	movne	r3, #1
 800645e:	2300      	moveq	r3, #0
 8006460:	b2db      	uxtb	r3, r3
 8006462:	e022      	b.n	80064aa <HAL_TIM_PWM_Start+0x9e>
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	2b0c      	cmp	r3, #12
 8006468:	d109      	bne.n	800647e <HAL_TIM_PWM_Start+0x72>
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006470:	b2db      	uxtb	r3, r3
 8006472:	2b01      	cmp	r3, #1
 8006474:	bf14      	ite	ne
 8006476:	2301      	movne	r3, #1
 8006478:	2300      	moveq	r3, #0
 800647a:	b2db      	uxtb	r3, r3
 800647c:	e015      	b.n	80064aa <HAL_TIM_PWM_Start+0x9e>
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	2b10      	cmp	r3, #16
 8006482:	d109      	bne.n	8006498 <HAL_TIM_PWM_Start+0x8c>
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b01      	cmp	r3, #1
 800648e:	bf14      	ite	ne
 8006490:	2301      	movne	r3, #1
 8006492:	2300      	moveq	r3, #0
 8006494:	b2db      	uxtb	r3, r3
 8006496:	e008      	b.n	80064aa <HAL_TIM_PWM_Start+0x9e>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	bf14      	ite	ne
 80064a4:	2301      	movne	r3, #1
 80064a6:	2300      	moveq	r3, #0
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e09c      	b.n	80065ec <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d104      	bne.n	80064c2 <HAL_TIM_PWM_Start+0xb6>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2202      	movs	r2, #2
 80064bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064c0:	e023      	b.n	800650a <HAL_TIM_PWM_Start+0xfe>
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d104      	bne.n	80064d2 <HAL_TIM_PWM_Start+0xc6>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064d0:	e01b      	b.n	800650a <HAL_TIM_PWM_Start+0xfe>
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	d104      	bne.n	80064e2 <HAL_TIM_PWM_Start+0xd6>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2202      	movs	r2, #2
 80064dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064e0:	e013      	b.n	800650a <HAL_TIM_PWM_Start+0xfe>
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	2b0c      	cmp	r3, #12
 80064e6:	d104      	bne.n	80064f2 <HAL_TIM_PWM_Start+0xe6>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2202      	movs	r2, #2
 80064ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80064f0:	e00b      	b.n	800650a <HAL_TIM_PWM_Start+0xfe>
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	2b10      	cmp	r3, #16
 80064f6:	d104      	bne.n	8006502 <HAL_TIM_PWM_Start+0xf6>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2202      	movs	r2, #2
 80064fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006500:	e003      	b.n	800650a <HAL_TIM_PWM_Start+0xfe>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2202      	movs	r2, #2
 8006506:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2201      	movs	r2, #1
 8006510:	6839      	ldr	r1, [r7, #0]
 8006512:	4618      	mov	r0, r3
 8006514:	f000 ffb0 	bl	8007478 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a35      	ldr	r2, [pc, #212]	; (80065f4 <HAL_TIM_PWM_Start+0x1e8>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d013      	beq.n	800654a <HAL_TIM_PWM_Start+0x13e>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	4a34      	ldr	r2, [pc, #208]	; (80065f8 <HAL_TIM_PWM_Start+0x1ec>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d00e      	beq.n	800654a <HAL_TIM_PWM_Start+0x13e>
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	4a32      	ldr	r2, [pc, #200]	; (80065fc <HAL_TIM_PWM_Start+0x1f0>)
 8006532:	4293      	cmp	r3, r2
 8006534:	d009      	beq.n	800654a <HAL_TIM_PWM_Start+0x13e>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a31      	ldr	r2, [pc, #196]	; (8006600 <HAL_TIM_PWM_Start+0x1f4>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d004      	beq.n	800654a <HAL_TIM_PWM_Start+0x13e>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a2f      	ldr	r2, [pc, #188]	; (8006604 <HAL_TIM_PWM_Start+0x1f8>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d101      	bne.n	800654e <HAL_TIM_PWM_Start+0x142>
 800654a:	2301      	movs	r3, #1
 800654c:	e000      	b.n	8006550 <HAL_TIM_PWM_Start+0x144>
 800654e:	2300      	movs	r3, #0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d007      	beq.n	8006564 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006562:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a22      	ldr	r2, [pc, #136]	; (80065f4 <HAL_TIM_PWM_Start+0x1e8>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d01d      	beq.n	80065aa <HAL_TIM_PWM_Start+0x19e>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006576:	d018      	beq.n	80065aa <HAL_TIM_PWM_Start+0x19e>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a22      	ldr	r2, [pc, #136]	; (8006608 <HAL_TIM_PWM_Start+0x1fc>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d013      	beq.n	80065aa <HAL_TIM_PWM_Start+0x19e>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4a21      	ldr	r2, [pc, #132]	; (800660c <HAL_TIM_PWM_Start+0x200>)
 8006588:	4293      	cmp	r3, r2
 800658a:	d00e      	beq.n	80065aa <HAL_TIM_PWM_Start+0x19e>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	4a1f      	ldr	r2, [pc, #124]	; (8006610 <HAL_TIM_PWM_Start+0x204>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d009      	beq.n	80065aa <HAL_TIM_PWM_Start+0x19e>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	4a17      	ldr	r2, [pc, #92]	; (80065f8 <HAL_TIM_PWM_Start+0x1ec>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d004      	beq.n	80065aa <HAL_TIM_PWM_Start+0x19e>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	4a15      	ldr	r2, [pc, #84]	; (80065fc <HAL_TIM_PWM_Start+0x1f0>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d115      	bne.n	80065d6 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	689a      	ldr	r2, [r3, #8]
 80065b0:	4b18      	ldr	r3, [pc, #96]	; (8006614 <HAL_TIM_PWM_Start+0x208>)
 80065b2:	4013      	ands	r3, r2
 80065b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2b06      	cmp	r3, #6
 80065ba:	d015      	beq.n	80065e8 <HAL_TIM_PWM_Start+0x1dc>
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065c2:	d011      	beq.n	80065e8 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f042 0201 	orr.w	r2, r2, #1
 80065d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065d4:	e008      	b.n	80065e8 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f042 0201 	orr.w	r2, r2, #1
 80065e4:	601a      	str	r2, [r3, #0]
 80065e6:	e000      	b.n	80065ea <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3710      	adds	r7, #16
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	40012c00 	.word	0x40012c00
 80065f8:	40013400 	.word	0x40013400
 80065fc:	40014000 	.word	0x40014000
 8006600:	40014400 	.word	0x40014400
 8006604:	40014800 	.word	0x40014800
 8006608:	40000400 	.word	0x40000400
 800660c:	40000800 	.word	0x40000800
 8006610:	40000c00 	.word	0x40000c00
 8006614:	00010007 	.word	0x00010007

08006618 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	f003 0302 	and.w	r3, r3, #2
 800662a:	2b02      	cmp	r3, #2
 800662c:	d122      	bne.n	8006674 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68db      	ldr	r3, [r3, #12]
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b02      	cmp	r3, #2
 800663a:	d11b      	bne.n	8006674 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f06f 0202 	mvn.w	r2, #2
 8006644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fae3 	bl	8006c26 <HAL_TIM_IC_CaptureCallback>
 8006660:	e005      	b.n	800666e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fad5 	bl	8006c12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fae6 	bl	8006c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	691b      	ldr	r3, [r3, #16]
 800667a:	f003 0304 	and.w	r3, r3, #4
 800667e:	2b04      	cmp	r3, #4
 8006680:	d122      	bne.n	80066c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68db      	ldr	r3, [r3, #12]
 8006688:	f003 0304 	and.w	r3, r3, #4
 800668c:	2b04      	cmp	r3, #4
 800668e:	d11b      	bne.n	80066c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f06f 0204 	mvn.w	r2, #4
 8006698:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2202      	movs	r2, #2
 800669e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 fab9 	bl	8006c26 <HAL_TIM_IC_CaptureCallback>
 80066b4:	e005      	b.n	80066c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 faab 	bl	8006c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f000 fabc 	bl	8006c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2200      	movs	r2, #0
 80066c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	691b      	ldr	r3, [r3, #16]
 80066ce:	f003 0308 	and.w	r3, r3, #8
 80066d2:	2b08      	cmp	r3, #8
 80066d4:	d122      	bne.n	800671c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	f003 0308 	and.w	r3, r3, #8
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d11b      	bne.n	800671c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f06f 0208 	mvn.w	r2, #8
 80066ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2204      	movs	r2, #4
 80066f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	69db      	ldr	r3, [r3, #28]
 80066fa:	f003 0303 	and.w	r3, r3, #3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fa8f 	bl	8006c26 <HAL_TIM_IC_CaptureCallback>
 8006708:	e005      	b.n	8006716 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fa81 	bl	8006c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fa92 	bl	8006c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2200      	movs	r2, #0
 800671a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	f003 0310 	and.w	r3, r3, #16
 8006726:	2b10      	cmp	r3, #16
 8006728:	d122      	bne.n	8006770 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f003 0310 	and.w	r3, r3, #16
 8006734:	2b10      	cmp	r3, #16
 8006736:	d11b      	bne.n	8006770 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f06f 0210 	mvn.w	r2, #16
 8006740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2208      	movs	r2, #8
 8006746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	69db      	ldr	r3, [r3, #28]
 800674e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006752:	2b00      	cmp	r3, #0
 8006754:	d003      	beq.n	800675e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fa65 	bl	8006c26 <HAL_TIM_IC_CaptureCallback>
 800675c:	e005      	b.n	800676a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fa57 	bl	8006c12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fa68 	bl	8006c3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b01      	cmp	r3, #1
 800677c:	d10e      	bne.n	800679c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b01      	cmp	r3, #1
 800678a:	d107      	bne.n	800679c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f06f 0201 	mvn.w	r2, #1
 8006794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7fb f828 	bl	80017ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067a6:	2b80      	cmp	r3, #128	; 0x80
 80067a8:	d10e      	bne.n	80067c8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	68db      	ldr	r3, [r3, #12]
 80067b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b4:	2b80      	cmp	r3, #128	; 0x80
 80067b6:	d107      	bne.n	80067c8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f000 ff10 	bl	80075e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067d6:	d10e      	bne.n	80067f6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067e2:	2b80      	cmp	r3, #128	; 0x80
 80067e4:	d107      	bne.n	80067f6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80067ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 ff03 	bl	80075fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	691b      	ldr	r3, [r3, #16]
 80067fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006800:	2b40      	cmp	r3, #64	; 0x40
 8006802:	d10e      	bne.n	8006822 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68db      	ldr	r3, [r3, #12]
 800680a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800680e:	2b40      	cmp	r3, #64	; 0x40
 8006810:	d107      	bne.n	8006822 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800681a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800681c:	6878      	ldr	r0, [r7, #4]
 800681e:	f000 fa16 	bl	8006c4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	691b      	ldr	r3, [r3, #16]
 8006828:	f003 0320 	and.w	r3, r3, #32
 800682c:	2b20      	cmp	r3, #32
 800682e:	d10e      	bne.n	800684e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	f003 0320 	and.w	r3, r3, #32
 800683a:	2b20      	cmp	r3, #32
 800683c:	d107      	bne.n	800684e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f06f 0220 	mvn.w	r2, #32
 8006846:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fec3 	bl	80075d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800684e:	bf00      	nop
 8006850:	3708      	adds	r7, #8
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}
	...

08006858 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b086      	sub	sp, #24
 800685c:	af00      	add	r7, sp, #0
 800685e:	60f8      	str	r0, [r7, #12]
 8006860:	60b9      	str	r1, [r7, #8]
 8006862:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006864:	2300      	movs	r3, #0
 8006866:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800686e:	2b01      	cmp	r3, #1
 8006870:	d101      	bne.n	8006876 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006872:	2302      	movs	r3, #2
 8006874:	e0ff      	b.n	8006a76 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2201      	movs	r2, #1
 800687a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2b14      	cmp	r3, #20
 8006882:	f200 80f0 	bhi.w	8006a66 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006886:	a201      	add	r2, pc, #4	; (adr r2, 800688c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800688c:	080068e1 	.word	0x080068e1
 8006890:	08006a67 	.word	0x08006a67
 8006894:	08006a67 	.word	0x08006a67
 8006898:	08006a67 	.word	0x08006a67
 800689c:	08006921 	.word	0x08006921
 80068a0:	08006a67 	.word	0x08006a67
 80068a4:	08006a67 	.word	0x08006a67
 80068a8:	08006a67 	.word	0x08006a67
 80068ac:	08006963 	.word	0x08006963
 80068b0:	08006a67 	.word	0x08006a67
 80068b4:	08006a67 	.word	0x08006a67
 80068b8:	08006a67 	.word	0x08006a67
 80068bc:	080069a3 	.word	0x080069a3
 80068c0:	08006a67 	.word	0x08006a67
 80068c4:	08006a67 	.word	0x08006a67
 80068c8:	08006a67 	.word	0x08006a67
 80068cc:	080069e5 	.word	0x080069e5
 80068d0:	08006a67 	.word	0x08006a67
 80068d4:	08006a67 	.word	0x08006a67
 80068d8:	08006a67 	.word	0x08006a67
 80068dc:	08006a25 	.word	0x08006a25
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	68b9      	ldr	r1, [r7, #8]
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 fa56 	bl	8006d98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f042 0208 	orr.w	r2, r2, #8
 80068fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	699a      	ldr	r2, [r3, #24]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f022 0204 	bic.w	r2, r2, #4
 800690a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6999      	ldr	r1, [r3, #24]
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	691a      	ldr	r2, [r3, #16]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	619a      	str	r2, [r3, #24]
      break;
 800691e:	e0a5      	b.n	8006a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68b9      	ldr	r1, [r7, #8]
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fac6 	bl	8006eb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	699a      	ldr	r2, [r3, #24]
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800693a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	699a      	ldr	r2, [r3, #24]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800694a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6999      	ldr	r1, [r3, #24]
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	021a      	lsls	r2, r3, #8
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	430a      	orrs	r2, r1
 800695e:	619a      	str	r2, [r3, #24]
      break;
 8006960:	e084      	b.n	8006a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68b9      	ldr	r1, [r7, #8]
 8006968:	4618      	mov	r0, r3
 800696a:	f000 fb2f 	bl	8006fcc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	69da      	ldr	r2, [r3, #28]
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f042 0208 	orr.w	r2, r2, #8
 800697c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	69da      	ldr	r2, [r3, #28]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	f022 0204 	bic.w	r2, r2, #4
 800698c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	69d9      	ldr	r1, [r3, #28]
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	691a      	ldr	r2, [r3, #16]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	430a      	orrs	r2, r1
 800699e:	61da      	str	r2, [r3, #28]
      break;
 80069a0:	e064      	b.n	8006a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68b9      	ldr	r1, [r7, #8]
 80069a8:	4618      	mov	r0, r3
 80069aa:	f000 fb97 	bl	80070dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	69da      	ldr	r2, [r3, #28]
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80069bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	69da      	ldr	r2, [r3, #28]
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80069cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	69d9      	ldr	r1, [r3, #28]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	691b      	ldr	r3, [r3, #16]
 80069d8:	021a      	lsls	r2, r3, #8
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	430a      	orrs	r2, r1
 80069e0:	61da      	str	r2, [r3, #28]
      break;
 80069e2:	e043      	b.n	8006a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68b9      	ldr	r1, [r7, #8]
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fbe0 	bl	80071b0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	f042 0208 	orr.w	r2, r2, #8
 80069fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f022 0204 	bic.w	r2, r2, #4
 8006a0e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a16:	68bb      	ldr	r3, [r7, #8]
 8006a18:	691a      	ldr	r2, [r3, #16]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	430a      	orrs	r2, r1
 8006a20:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a22:	e023      	b.n	8006a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68b9      	ldr	r1, [r7, #8]
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f000 fc24 	bl	8007278 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a3e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a4e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006a56:	68bb      	ldr	r3, [r7, #8]
 8006a58:	691b      	ldr	r3, [r3, #16]
 8006a5a:	021a      	lsls	r2, r3, #8
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	430a      	orrs	r2, r1
 8006a62:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006a64:	e002      	b.n	8006a6c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	75fb      	strb	r3, [r7, #23]
      break;
 8006a6a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a74:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3718      	adds	r7, #24
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	bd80      	pop	{r7, pc}
 8006a7e:	bf00      	nop

08006a80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b084      	sub	sp, #16
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
 8006a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d101      	bne.n	8006a9c <HAL_TIM_ConfigClockSource+0x1c>
 8006a98:	2302      	movs	r3, #2
 8006a9a:	e0b6      	b.n	8006c0a <HAL_TIM_ConfigClockSource+0x18a>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	689b      	ldr	r3, [r3, #8]
 8006ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006aba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006abe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ac6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ad8:	d03e      	beq.n	8006b58 <HAL_TIM_ConfigClockSource+0xd8>
 8006ada:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ade:	f200 8087 	bhi.w	8006bf0 <HAL_TIM_ConfigClockSource+0x170>
 8006ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ae6:	f000 8086 	beq.w	8006bf6 <HAL_TIM_ConfigClockSource+0x176>
 8006aea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aee:	d87f      	bhi.n	8006bf0 <HAL_TIM_ConfigClockSource+0x170>
 8006af0:	2b70      	cmp	r3, #112	; 0x70
 8006af2:	d01a      	beq.n	8006b2a <HAL_TIM_ConfigClockSource+0xaa>
 8006af4:	2b70      	cmp	r3, #112	; 0x70
 8006af6:	d87b      	bhi.n	8006bf0 <HAL_TIM_ConfigClockSource+0x170>
 8006af8:	2b60      	cmp	r3, #96	; 0x60
 8006afa:	d050      	beq.n	8006b9e <HAL_TIM_ConfigClockSource+0x11e>
 8006afc:	2b60      	cmp	r3, #96	; 0x60
 8006afe:	d877      	bhi.n	8006bf0 <HAL_TIM_ConfigClockSource+0x170>
 8006b00:	2b50      	cmp	r3, #80	; 0x50
 8006b02:	d03c      	beq.n	8006b7e <HAL_TIM_ConfigClockSource+0xfe>
 8006b04:	2b50      	cmp	r3, #80	; 0x50
 8006b06:	d873      	bhi.n	8006bf0 <HAL_TIM_ConfigClockSource+0x170>
 8006b08:	2b40      	cmp	r3, #64	; 0x40
 8006b0a:	d058      	beq.n	8006bbe <HAL_TIM_ConfigClockSource+0x13e>
 8006b0c:	2b40      	cmp	r3, #64	; 0x40
 8006b0e:	d86f      	bhi.n	8006bf0 <HAL_TIM_ConfigClockSource+0x170>
 8006b10:	2b30      	cmp	r3, #48	; 0x30
 8006b12:	d064      	beq.n	8006bde <HAL_TIM_ConfigClockSource+0x15e>
 8006b14:	2b30      	cmp	r3, #48	; 0x30
 8006b16:	d86b      	bhi.n	8006bf0 <HAL_TIM_ConfigClockSource+0x170>
 8006b18:	2b20      	cmp	r3, #32
 8006b1a:	d060      	beq.n	8006bde <HAL_TIM_ConfigClockSource+0x15e>
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	d867      	bhi.n	8006bf0 <HAL_TIM_ConfigClockSource+0x170>
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d05c      	beq.n	8006bde <HAL_TIM_ConfigClockSource+0x15e>
 8006b24:	2b10      	cmp	r3, #16
 8006b26:	d05a      	beq.n	8006bde <HAL_TIM_ConfigClockSource+0x15e>
 8006b28:	e062      	b.n	8006bf0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6818      	ldr	r0, [r3, #0]
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	6899      	ldr	r1, [r3, #8]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	685a      	ldr	r2, [r3, #4]
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	f000 fc7d 	bl	8007438 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	609a      	str	r2, [r3, #8]
      break;
 8006b56:	e04f      	b.n	8006bf8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6818      	ldr	r0, [r3, #0]
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	6899      	ldr	r1, [r3, #8]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	685a      	ldr	r2, [r3, #4]
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	f000 fc66 	bl	8007438 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	689a      	ldr	r2, [r3, #8]
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b7a:	609a      	str	r2, [r3, #8]
      break;
 8006b7c:	e03c      	b.n	8006bf8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6818      	ldr	r0, [r3, #0]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	6859      	ldr	r1, [r3, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	68db      	ldr	r3, [r3, #12]
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	f000 fbda 	bl	8007344 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	2150      	movs	r1, #80	; 0x50
 8006b96:	4618      	mov	r0, r3
 8006b98:	f000 fc33 	bl	8007402 <TIM_ITRx_SetConfig>
      break;
 8006b9c:	e02c      	b.n	8006bf8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6818      	ldr	r0, [r3, #0]
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	6859      	ldr	r1, [r3, #4]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	461a      	mov	r2, r3
 8006bac:	f000 fbf9 	bl	80073a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2160      	movs	r1, #96	; 0x60
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 fc23 	bl	8007402 <TIM_ITRx_SetConfig>
      break;
 8006bbc:	e01c      	b.n	8006bf8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6818      	ldr	r0, [r3, #0]
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	6859      	ldr	r1, [r3, #4]
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	461a      	mov	r2, r3
 8006bcc:	f000 fbba 	bl	8007344 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2140      	movs	r1, #64	; 0x40
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	f000 fc13 	bl	8007402 <TIM_ITRx_SetConfig>
      break;
 8006bdc:	e00c      	b.n	8006bf8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4619      	mov	r1, r3
 8006be8:	4610      	mov	r0, r2
 8006bea:	f000 fc0a 	bl	8007402 <TIM_ITRx_SetConfig>
      break;
 8006bee:	e003      	b.n	8006bf8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	73fb      	strb	r3, [r7, #15]
      break;
 8006bf4:	e000      	b.n	8006bf8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006bf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006c12:	b480      	push	{r7}
 8006c14:	b083      	sub	sp, #12
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006c1a:	bf00      	nop
 8006c1c:	370c      	adds	r7, #12
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c24:	4770      	bx	lr

08006c26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006c26:	b480      	push	{r7}
 8006c28:	b083      	sub	sp, #12
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006c2e:	bf00      	nop
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006c3a:	b480      	push	{r7}
 8006c3c:	b083      	sub	sp, #12
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006c42:	bf00      	nop
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr

08006c4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c4e:	b480      	push	{r7}
 8006c50:	b083      	sub	sp, #12
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c56:	bf00      	nop
 8006c58:	370c      	adds	r7, #12
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c60:	4770      	bx	lr
	...

08006c64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
 8006c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	4a40      	ldr	r2, [pc, #256]	; (8006d78 <TIM_Base_SetConfig+0x114>)
 8006c78:	4293      	cmp	r3, r2
 8006c7a:	d013      	beq.n	8006ca4 <TIM_Base_SetConfig+0x40>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c82:	d00f      	beq.n	8006ca4 <TIM_Base_SetConfig+0x40>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	4a3d      	ldr	r2, [pc, #244]	; (8006d7c <TIM_Base_SetConfig+0x118>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d00b      	beq.n	8006ca4 <TIM_Base_SetConfig+0x40>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a3c      	ldr	r2, [pc, #240]	; (8006d80 <TIM_Base_SetConfig+0x11c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d007      	beq.n	8006ca4 <TIM_Base_SetConfig+0x40>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a3b      	ldr	r2, [pc, #236]	; (8006d84 <TIM_Base_SetConfig+0x120>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d003      	beq.n	8006ca4 <TIM_Base_SetConfig+0x40>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a3a      	ldr	r2, [pc, #232]	; (8006d88 <TIM_Base_SetConfig+0x124>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d108      	bne.n	8006cb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a2f      	ldr	r2, [pc, #188]	; (8006d78 <TIM_Base_SetConfig+0x114>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d01f      	beq.n	8006cfe <TIM_Base_SetConfig+0x9a>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cc4:	d01b      	beq.n	8006cfe <TIM_Base_SetConfig+0x9a>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a2c      	ldr	r2, [pc, #176]	; (8006d7c <TIM_Base_SetConfig+0x118>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d017      	beq.n	8006cfe <TIM_Base_SetConfig+0x9a>
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	4a2b      	ldr	r2, [pc, #172]	; (8006d80 <TIM_Base_SetConfig+0x11c>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d013      	beq.n	8006cfe <TIM_Base_SetConfig+0x9a>
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	4a2a      	ldr	r2, [pc, #168]	; (8006d84 <TIM_Base_SetConfig+0x120>)
 8006cda:	4293      	cmp	r3, r2
 8006cdc:	d00f      	beq.n	8006cfe <TIM_Base_SetConfig+0x9a>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	4a29      	ldr	r2, [pc, #164]	; (8006d88 <TIM_Base_SetConfig+0x124>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d00b      	beq.n	8006cfe <TIM_Base_SetConfig+0x9a>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a28      	ldr	r2, [pc, #160]	; (8006d8c <TIM_Base_SetConfig+0x128>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d007      	beq.n	8006cfe <TIM_Base_SetConfig+0x9a>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a27      	ldr	r2, [pc, #156]	; (8006d90 <TIM_Base_SetConfig+0x12c>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d003      	beq.n	8006cfe <TIM_Base_SetConfig+0x9a>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a26      	ldr	r2, [pc, #152]	; (8006d94 <TIM_Base_SetConfig+0x130>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d108      	bne.n	8006d10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	68fa      	ldr	r2, [r7, #12]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	695b      	ldr	r3, [r3, #20]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a10      	ldr	r2, [pc, #64]	; (8006d78 <TIM_Base_SetConfig+0x114>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d00f      	beq.n	8006d5c <TIM_Base_SetConfig+0xf8>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a12      	ldr	r2, [pc, #72]	; (8006d88 <TIM_Base_SetConfig+0x124>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d00b      	beq.n	8006d5c <TIM_Base_SetConfig+0xf8>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a11      	ldr	r2, [pc, #68]	; (8006d8c <TIM_Base_SetConfig+0x128>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d007      	beq.n	8006d5c <TIM_Base_SetConfig+0xf8>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	4a10      	ldr	r2, [pc, #64]	; (8006d90 <TIM_Base_SetConfig+0x12c>)
 8006d50:	4293      	cmp	r3, r2
 8006d52:	d003      	beq.n	8006d5c <TIM_Base_SetConfig+0xf8>
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4a0f      	ldr	r2, [pc, #60]	; (8006d94 <TIM_Base_SetConfig+0x130>)
 8006d58:	4293      	cmp	r3, r2
 8006d5a:	d103      	bne.n	8006d64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	691a      	ldr	r2, [r3, #16]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	615a      	str	r2, [r3, #20]
}
 8006d6a:	bf00      	nop
 8006d6c:	3714      	adds	r7, #20
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	40012c00 	.word	0x40012c00
 8006d7c:	40000400 	.word	0x40000400
 8006d80:	40000800 	.word	0x40000800
 8006d84:	40000c00 	.word	0x40000c00
 8006d88:	40013400 	.word	0x40013400
 8006d8c:	40014000 	.word	0x40014000
 8006d90:	40014400 	.word	0x40014400
 8006d94:	40014800 	.word	0x40014800

08006d98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b087      	sub	sp, #28
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	f023 0201 	bic.w	r2, r3, #1
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a1b      	ldr	r3, [r3, #32]
 8006db2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f023 0303 	bic.w	r3, r3, #3
 8006dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	4313      	orrs	r3, r2
 8006ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f023 0302 	bic.w	r3, r3, #2
 8006de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	689b      	ldr	r3, [r3, #8]
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	4a2c      	ldr	r2, [pc, #176]	; (8006ea4 <TIM_OC1_SetConfig+0x10c>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d00f      	beq.n	8006e18 <TIM_OC1_SetConfig+0x80>
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	4a2b      	ldr	r2, [pc, #172]	; (8006ea8 <TIM_OC1_SetConfig+0x110>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d00b      	beq.n	8006e18 <TIM_OC1_SetConfig+0x80>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	4a2a      	ldr	r2, [pc, #168]	; (8006eac <TIM_OC1_SetConfig+0x114>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d007      	beq.n	8006e18 <TIM_OC1_SetConfig+0x80>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	4a29      	ldr	r2, [pc, #164]	; (8006eb0 <TIM_OC1_SetConfig+0x118>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d003      	beq.n	8006e18 <TIM_OC1_SetConfig+0x80>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4a28      	ldr	r2, [pc, #160]	; (8006eb4 <TIM_OC1_SetConfig+0x11c>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d10c      	bne.n	8006e32 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	f023 0308 	bic.w	r3, r3, #8
 8006e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006e20:	683b      	ldr	r3, [r7, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	697a      	ldr	r2, [r7, #20]
 8006e26:	4313      	orrs	r3, r2
 8006e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f023 0304 	bic.w	r3, r3, #4
 8006e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	4a1b      	ldr	r2, [pc, #108]	; (8006ea4 <TIM_OC1_SetConfig+0x10c>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d00f      	beq.n	8006e5a <TIM_OC1_SetConfig+0xc2>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	4a1a      	ldr	r2, [pc, #104]	; (8006ea8 <TIM_OC1_SetConfig+0x110>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d00b      	beq.n	8006e5a <TIM_OC1_SetConfig+0xc2>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	4a19      	ldr	r2, [pc, #100]	; (8006eac <TIM_OC1_SetConfig+0x114>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d007      	beq.n	8006e5a <TIM_OC1_SetConfig+0xc2>
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	4a18      	ldr	r2, [pc, #96]	; (8006eb0 <TIM_OC1_SetConfig+0x118>)
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	d003      	beq.n	8006e5a <TIM_OC1_SetConfig+0xc2>
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	4a17      	ldr	r2, [pc, #92]	; (8006eb4 <TIM_OC1_SetConfig+0x11c>)
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d111      	bne.n	8006e7e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006e5a:	693b      	ldr	r3, [r7, #16]
 8006e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006e62:	693b      	ldr	r3, [r7, #16]
 8006e64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	695b      	ldr	r3, [r3, #20]
 8006e6e:	693a      	ldr	r2, [r7, #16]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	699b      	ldr	r3, [r3, #24]
 8006e78:	693a      	ldr	r2, [r7, #16]
 8006e7a:	4313      	orrs	r3, r2
 8006e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	693a      	ldr	r2, [r7, #16]
 8006e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	685a      	ldr	r2, [r3, #4]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	621a      	str	r2, [r3, #32]
}
 8006e98:	bf00      	nop
 8006e9a:	371c      	adds	r7, #28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr
 8006ea4:	40012c00 	.word	0x40012c00
 8006ea8:	40013400 	.word	0x40013400
 8006eac:	40014000 	.word	0x40014000
 8006eb0:	40014400 	.word	0x40014400
 8006eb4:	40014800 	.word	0x40014800

08006eb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b087      	sub	sp, #28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
 8006ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	f023 0210 	bic.w	r2, r3, #16
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	021b      	lsls	r3, r3, #8
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	f023 0320 	bic.w	r3, r3, #32
 8006f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	689b      	ldr	r3, [r3, #8]
 8006f0c:	011b      	lsls	r3, r3, #4
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	4313      	orrs	r3, r2
 8006f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	4a28      	ldr	r2, [pc, #160]	; (8006fb8 <TIM_OC2_SetConfig+0x100>)
 8006f18:	4293      	cmp	r3, r2
 8006f1a:	d003      	beq.n	8006f24 <TIM_OC2_SetConfig+0x6c>
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	4a27      	ldr	r2, [pc, #156]	; (8006fbc <TIM_OC2_SetConfig+0x104>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d10d      	bne.n	8006f40 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	68db      	ldr	r3, [r3, #12]
 8006f30:	011b      	lsls	r3, r3, #4
 8006f32:	697a      	ldr	r2, [r7, #20]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006f3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	4a1d      	ldr	r2, [pc, #116]	; (8006fb8 <TIM_OC2_SetConfig+0x100>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d00f      	beq.n	8006f68 <TIM_OC2_SetConfig+0xb0>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4a1c      	ldr	r2, [pc, #112]	; (8006fbc <TIM_OC2_SetConfig+0x104>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d00b      	beq.n	8006f68 <TIM_OC2_SetConfig+0xb0>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	4a1b      	ldr	r2, [pc, #108]	; (8006fc0 <TIM_OC2_SetConfig+0x108>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d007      	beq.n	8006f68 <TIM_OC2_SetConfig+0xb0>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	4a1a      	ldr	r2, [pc, #104]	; (8006fc4 <TIM_OC2_SetConfig+0x10c>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d003      	beq.n	8006f68 <TIM_OC2_SetConfig+0xb0>
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	4a19      	ldr	r2, [pc, #100]	; (8006fc8 <TIM_OC2_SetConfig+0x110>)
 8006f64:	4293      	cmp	r3, r2
 8006f66:	d113      	bne.n	8006f90 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006f70:	693b      	ldr	r3, [r7, #16]
 8006f72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	695b      	ldr	r3, [r3, #20]
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	693a      	ldr	r2, [r7, #16]
 8006f80:	4313      	orrs	r3, r2
 8006f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	4313      	orrs	r3, r2
 8006f8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	693a      	ldr	r2, [r7, #16]
 8006f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	68fa      	ldr	r2, [r7, #12]
 8006f9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	685a      	ldr	r2, [r3, #4]
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	697a      	ldr	r2, [r7, #20]
 8006fa8:	621a      	str	r2, [r3, #32]
}
 8006faa:	bf00      	nop
 8006fac:	371c      	adds	r7, #28
 8006fae:	46bd      	mov	sp, r7
 8006fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb4:	4770      	bx	lr
 8006fb6:	bf00      	nop
 8006fb8:	40012c00 	.word	0x40012c00
 8006fbc:	40013400 	.word	0x40013400
 8006fc0:	40014000 	.word	0x40014000
 8006fc4:	40014400 	.word	0x40014400
 8006fc8:	40014800 	.word	0x40014800

08006fcc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fcc:	b480      	push	{r7}
 8006fce:	b087      	sub	sp, #28
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
 8006fd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6a1b      	ldr	r3, [r3, #32]
 8006fda:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6a1b      	ldr	r3, [r3, #32]
 8006fe6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	69db      	ldr	r3, [r3, #28]
 8006ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f023 0303 	bic.w	r3, r3, #3
 8007006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	68fa      	ldr	r2, [r7, #12]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	021b      	lsls	r3, r3, #8
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	4313      	orrs	r3, r2
 8007024:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	4a27      	ldr	r2, [pc, #156]	; (80070c8 <TIM_OC3_SetConfig+0xfc>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d003      	beq.n	8007036 <TIM_OC3_SetConfig+0x6a>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a26      	ldr	r2, [pc, #152]	; (80070cc <TIM_OC3_SetConfig+0x100>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d10d      	bne.n	8007052 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800703c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	021b      	lsls	r3, r3, #8
 8007044:	697a      	ldr	r2, [r7, #20]
 8007046:	4313      	orrs	r3, r2
 8007048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800704a:	697b      	ldr	r3, [r7, #20]
 800704c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	4a1c      	ldr	r2, [pc, #112]	; (80070c8 <TIM_OC3_SetConfig+0xfc>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d00f      	beq.n	800707a <TIM_OC3_SetConfig+0xae>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	4a1b      	ldr	r2, [pc, #108]	; (80070cc <TIM_OC3_SetConfig+0x100>)
 800705e:	4293      	cmp	r3, r2
 8007060:	d00b      	beq.n	800707a <TIM_OC3_SetConfig+0xae>
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	4a1a      	ldr	r2, [pc, #104]	; (80070d0 <TIM_OC3_SetConfig+0x104>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d007      	beq.n	800707a <TIM_OC3_SetConfig+0xae>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	4a19      	ldr	r2, [pc, #100]	; (80070d4 <TIM_OC3_SetConfig+0x108>)
 800706e:	4293      	cmp	r3, r2
 8007070:	d003      	beq.n	800707a <TIM_OC3_SetConfig+0xae>
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a18      	ldr	r2, [pc, #96]	; (80070d8 <TIM_OC3_SetConfig+0x10c>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d113      	bne.n	80070a2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	695b      	ldr	r3, [r3, #20]
 800708e:	011b      	lsls	r3, r3, #4
 8007090:	693a      	ldr	r2, [r7, #16]
 8007092:	4313      	orrs	r3, r2
 8007094:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	699b      	ldr	r3, [r3, #24]
 800709a:	011b      	lsls	r3, r3, #4
 800709c:	693a      	ldr	r2, [r7, #16]
 800709e:	4313      	orrs	r3, r2
 80070a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	693a      	ldr	r2, [r7, #16]
 80070a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	685a      	ldr	r2, [r3, #4]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	697a      	ldr	r2, [r7, #20]
 80070ba:	621a      	str	r2, [r3, #32]
}
 80070bc:	bf00      	nop
 80070be:	371c      	adds	r7, #28
 80070c0:	46bd      	mov	sp, r7
 80070c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c6:	4770      	bx	lr
 80070c8:	40012c00 	.word	0x40012c00
 80070cc:	40013400 	.word	0x40013400
 80070d0:	40014000 	.word	0x40014000
 80070d4:	40014400 	.word	0x40014400
 80070d8:	40014800 	.word	0x40014800

080070dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80070dc:	b480      	push	{r7}
 80070de:	b087      	sub	sp, #28
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6a1b      	ldr	r3, [r3, #32]
 80070ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6a1b      	ldr	r3, [r3, #32]
 80070f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	69db      	ldr	r3, [r3, #28]
 8007102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800710a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800710e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	021b      	lsls	r3, r3, #8
 800711e:	68fa      	ldr	r2, [r7, #12]
 8007120:	4313      	orrs	r3, r2
 8007122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007124:	693b      	ldr	r3, [r7, #16]
 8007126:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800712a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	031b      	lsls	r3, r3, #12
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	4313      	orrs	r3, r2
 8007136:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	4a18      	ldr	r2, [pc, #96]	; (800719c <TIM_OC4_SetConfig+0xc0>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d00f      	beq.n	8007160 <TIM_OC4_SetConfig+0x84>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	4a17      	ldr	r2, [pc, #92]	; (80071a0 <TIM_OC4_SetConfig+0xc4>)
 8007144:	4293      	cmp	r3, r2
 8007146:	d00b      	beq.n	8007160 <TIM_OC4_SetConfig+0x84>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	4a16      	ldr	r2, [pc, #88]	; (80071a4 <TIM_OC4_SetConfig+0xc8>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d007      	beq.n	8007160 <TIM_OC4_SetConfig+0x84>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	4a15      	ldr	r2, [pc, #84]	; (80071a8 <TIM_OC4_SetConfig+0xcc>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d003      	beq.n	8007160 <TIM_OC4_SetConfig+0x84>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a14      	ldr	r2, [pc, #80]	; (80071ac <TIM_OC4_SetConfig+0xd0>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d109      	bne.n	8007174 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007166:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	695b      	ldr	r3, [r3, #20]
 800716c:	019b      	lsls	r3, r3, #6
 800716e:	697a      	ldr	r2, [r7, #20]
 8007170:	4313      	orrs	r3, r2
 8007172:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	697a      	ldr	r2, [r7, #20]
 8007178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	68fa      	ldr	r2, [r7, #12]
 800717e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	685a      	ldr	r2, [r3, #4]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	693a      	ldr	r2, [r7, #16]
 800718c:	621a      	str	r2, [r3, #32]
}
 800718e:	bf00      	nop
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	40012c00 	.word	0x40012c00
 80071a0:	40013400 	.word	0x40013400
 80071a4:	40014000 	.word	0x40014000
 80071a8:	40014400 	.word	0x40014400
 80071ac:	40014800 	.word	0x40014800

080071b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b087      	sub	sp, #28
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a1b      	ldr	r3, [r3, #32]
 80071be:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
 80071ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	685b      	ldr	r3, [r3, #4]
 80071d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80071f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	041b      	lsls	r3, r3, #16
 80071fc:	693a      	ldr	r2, [r7, #16]
 80071fe:	4313      	orrs	r3, r2
 8007200:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a17      	ldr	r2, [pc, #92]	; (8007264 <TIM_OC5_SetConfig+0xb4>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d00f      	beq.n	800722a <TIM_OC5_SetConfig+0x7a>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a16      	ldr	r2, [pc, #88]	; (8007268 <TIM_OC5_SetConfig+0xb8>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d00b      	beq.n	800722a <TIM_OC5_SetConfig+0x7a>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a15      	ldr	r2, [pc, #84]	; (800726c <TIM_OC5_SetConfig+0xbc>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d007      	beq.n	800722a <TIM_OC5_SetConfig+0x7a>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	4a14      	ldr	r2, [pc, #80]	; (8007270 <TIM_OC5_SetConfig+0xc0>)
 800721e:	4293      	cmp	r3, r2
 8007220:	d003      	beq.n	800722a <TIM_OC5_SetConfig+0x7a>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	4a13      	ldr	r2, [pc, #76]	; (8007274 <TIM_OC5_SetConfig+0xc4>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d109      	bne.n	800723e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007230:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	021b      	lsls	r3, r3, #8
 8007238:	697a      	ldr	r2, [r7, #20]
 800723a:	4313      	orrs	r3, r2
 800723c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	697a      	ldr	r2, [r7, #20]
 8007242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	685a      	ldr	r2, [r3, #4]
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	693a      	ldr	r2, [r7, #16]
 8007256:	621a      	str	r2, [r3, #32]
}
 8007258:	bf00      	nop
 800725a:	371c      	adds	r7, #28
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr
 8007264:	40012c00 	.word	0x40012c00
 8007268:	40013400 	.word	0x40013400
 800726c:	40014000 	.word	0x40014000
 8007270:	40014400 	.word	0x40014400
 8007274:	40014800 	.word	0x40014800

08007278 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007278:	b480      	push	{r7}
 800727a:	b087      	sub	sp, #28
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	6a1b      	ldr	r3, [r3, #32]
 8007286:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	6a1b      	ldr	r3, [r3, #32]
 8007292:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	685b      	ldr	r3, [r3, #4]
 8007298:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800729e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	021b      	lsls	r3, r3, #8
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	4313      	orrs	r3, r2
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	051b      	lsls	r3, r3, #20
 80072c6:	693a      	ldr	r2, [r7, #16]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a18      	ldr	r2, [pc, #96]	; (8007330 <TIM_OC6_SetConfig+0xb8>)
 80072d0:	4293      	cmp	r3, r2
 80072d2:	d00f      	beq.n	80072f4 <TIM_OC6_SetConfig+0x7c>
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	4a17      	ldr	r2, [pc, #92]	; (8007334 <TIM_OC6_SetConfig+0xbc>)
 80072d8:	4293      	cmp	r3, r2
 80072da:	d00b      	beq.n	80072f4 <TIM_OC6_SetConfig+0x7c>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	4a16      	ldr	r2, [pc, #88]	; (8007338 <TIM_OC6_SetConfig+0xc0>)
 80072e0:	4293      	cmp	r3, r2
 80072e2:	d007      	beq.n	80072f4 <TIM_OC6_SetConfig+0x7c>
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a15      	ldr	r2, [pc, #84]	; (800733c <TIM_OC6_SetConfig+0xc4>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d003      	beq.n	80072f4 <TIM_OC6_SetConfig+0x7c>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a14      	ldr	r2, [pc, #80]	; (8007340 <TIM_OC6_SetConfig+0xc8>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d109      	bne.n	8007308 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	029b      	lsls	r3, r3, #10
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	4313      	orrs	r3, r2
 8007306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	621a      	str	r2, [r3, #32]
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	40012c00 	.word	0x40012c00
 8007334:	40013400 	.word	0x40013400
 8007338:	40014000 	.word	0x40014000
 800733c:	40014400 	.word	0x40014400
 8007340:	40014800 	.word	0x40014800

08007344 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007344:	b480      	push	{r7}
 8007346:	b087      	sub	sp, #28
 8007348:	af00      	add	r7, sp, #0
 800734a:	60f8      	str	r0, [r7, #12]
 800734c:	60b9      	str	r1, [r7, #8]
 800734e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6a1b      	ldr	r3, [r3, #32]
 8007354:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6a1b      	ldr	r3, [r3, #32]
 800735a:	f023 0201 	bic.w	r2, r3, #1
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	699b      	ldr	r3, [r3, #24]
 8007366:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800736e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	011b      	lsls	r3, r3, #4
 8007374:	693a      	ldr	r2, [r7, #16]
 8007376:	4313      	orrs	r3, r2
 8007378:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f023 030a 	bic.w	r3, r3, #10
 8007380:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007382:	697a      	ldr	r2, [r7, #20]
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	4313      	orrs	r3, r2
 8007388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	693a      	ldr	r2, [r7, #16]
 800738e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	621a      	str	r2, [r3, #32]
}
 8007396:	bf00      	nop
 8007398:	371c      	adds	r7, #28
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr

080073a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b087      	sub	sp, #28
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	60f8      	str	r0, [r7, #12]
 80073aa:	60b9      	str	r1, [r7, #8]
 80073ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6a1b      	ldr	r3, [r3, #32]
 80073b2:	f023 0210 	bic.w	r2, r3, #16
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	699b      	ldr	r3, [r3, #24]
 80073be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6a1b      	ldr	r3, [r3, #32]
 80073c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	031b      	lsls	r3, r3, #12
 80073d2:	697a      	ldr	r2, [r7, #20]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	011b      	lsls	r3, r3, #4
 80073e4:	693a      	ldr	r2, [r7, #16]
 80073e6:	4313      	orrs	r3, r2
 80073e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	621a      	str	r2, [r3, #32]
}
 80073f6:	bf00      	nop
 80073f8:	371c      	adds	r7, #28
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr

08007402 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007402:	b480      	push	{r7}
 8007404:	b085      	sub	sp, #20
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
 800740a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007418:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800741a:	683a      	ldr	r2, [r7, #0]
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	4313      	orrs	r3, r2
 8007420:	f043 0307 	orr.w	r3, r3, #7
 8007424:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68fa      	ldr	r2, [r7, #12]
 800742a:	609a      	str	r2, [r3, #8]
}
 800742c:	bf00      	nop
 800742e:	3714      	adds	r7, #20
 8007430:	46bd      	mov	sp, r7
 8007432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007436:	4770      	bx	lr

08007438 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007438:	b480      	push	{r7}
 800743a:	b087      	sub	sp, #28
 800743c:	af00      	add	r7, sp, #0
 800743e:	60f8      	str	r0, [r7, #12]
 8007440:	60b9      	str	r1, [r7, #8]
 8007442:	607a      	str	r2, [r7, #4]
 8007444:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007452:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	021a      	lsls	r2, r3, #8
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	431a      	orrs	r2, r3
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	4313      	orrs	r3, r2
 8007460:	697a      	ldr	r2, [r7, #20]
 8007462:	4313      	orrs	r3, r2
 8007464:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	697a      	ldr	r2, [r7, #20]
 800746a:	609a      	str	r2, [r3, #8]
}
 800746c:	bf00      	nop
 800746e:	371c      	adds	r7, #28
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007478:	b480      	push	{r7}
 800747a:	b087      	sub	sp, #28
 800747c:	af00      	add	r7, sp, #0
 800747e:	60f8      	str	r0, [r7, #12]
 8007480:	60b9      	str	r1, [r7, #8]
 8007482:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	f003 031f 	and.w	r3, r3, #31
 800748a:	2201      	movs	r2, #1
 800748c:	fa02 f303 	lsl.w	r3, r2, r3
 8007490:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6a1a      	ldr	r2, [r3, #32]
 8007496:	697b      	ldr	r3, [r7, #20]
 8007498:	43db      	mvns	r3, r3
 800749a:	401a      	ands	r2, r3
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6a1a      	ldr	r2, [r3, #32]
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f003 031f 	and.w	r3, r3, #31
 80074aa:	6879      	ldr	r1, [r7, #4]
 80074ac:	fa01 f303 	lsl.w	r3, r1, r3
 80074b0:	431a      	orrs	r2, r3
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	621a      	str	r2, [r3, #32]
}
 80074b6:	bf00      	nop
 80074b8:	371c      	adds	r7, #28
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
	...

080074c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80074c4:	b480      	push	{r7}
 80074c6:	b085      	sub	sp, #20
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
 80074cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	d101      	bne.n	80074dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80074d8:	2302      	movs	r3, #2
 80074da:	e068      	b.n	80075ae <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2201      	movs	r2, #1
 80074e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2202      	movs	r2, #2
 80074e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	685b      	ldr	r3, [r3, #4]
 80074f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a2e      	ldr	r2, [pc, #184]	; (80075bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d004      	beq.n	8007510 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a2d      	ldr	r2, [pc, #180]	; (80075c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d108      	bne.n	8007522 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007516:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007518:	683b      	ldr	r3, [r7, #0]
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	4313      	orrs	r3, r2
 8007520:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007528:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	68fa      	ldr	r2, [r7, #12]
 8007530:	4313      	orrs	r3, r2
 8007532:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	4a1e      	ldr	r2, [pc, #120]	; (80075bc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d01d      	beq.n	8007582 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800754e:	d018      	beq.n	8007582 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a1b      	ldr	r2, [pc, #108]	; (80075c4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d013      	beq.n	8007582 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a1a      	ldr	r2, [pc, #104]	; (80075c8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d00e      	beq.n	8007582 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a18      	ldr	r2, [pc, #96]	; (80075cc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d009      	beq.n	8007582 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a13      	ldr	r2, [pc, #76]	; (80075c0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d004      	beq.n	8007582 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a14      	ldr	r2, [pc, #80]	; (80075d0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d10c      	bne.n	800759c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007588:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	4313      	orrs	r3, r2
 8007592:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	68ba      	ldr	r2, [r7, #8]
 800759a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2201      	movs	r2, #1
 80075a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2200      	movs	r2, #0
 80075a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3714      	adds	r7, #20
 80075b2:	46bd      	mov	sp, r7
 80075b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b8:	4770      	bx	lr
 80075ba:	bf00      	nop
 80075bc:	40012c00 	.word	0x40012c00
 80075c0:	40013400 	.word	0x40013400
 80075c4:	40000400 	.word	0x40000400
 80075c8:	40000800 	.word	0x40000800
 80075cc:	40000c00 	.word	0x40000c00
 80075d0:	40014000 	.word	0x40014000

080075d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80075dc:	bf00      	nop
 80075de:	370c      	adds	r7, #12
 80075e0:	46bd      	mov	sp, r7
 80075e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e6:	4770      	bx	lr

080075e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80075e8:	b480      	push	{r7}
 80075ea:	b083      	sub	sp, #12
 80075ec:	af00      	add	r7, sp, #0
 80075ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80075f0:	bf00      	nop
 80075f2:	370c      	adds	r7, #12
 80075f4:	46bd      	mov	sp, r7
 80075f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fa:	4770      	bx	lr

080075fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007604:	bf00      	nop
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b082      	sub	sp, #8
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d101      	bne.n	8007622 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	e040      	b.n	80076a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007626:	2b00      	cmp	r3, #0
 8007628:	d106      	bne.n	8007638 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	2200      	movs	r2, #0
 800762e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f7fa fca2 	bl	8001f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2224      	movs	r2, #36	; 0x24
 800763c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	681a      	ldr	r2, [r3, #0]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f022 0201 	bic.w	r2, r2, #1
 800764c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f000 fc8a 	bl	8007f68 <UART_SetConfig>
 8007654:	4603      	mov	r3, r0
 8007656:	2b01      	cmp	r3, #1
 8007658:	d101      	bne.n	800765e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800765a:	2301      	movs	r3, #1
 800765c:	e022      	b.n	80076a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007662:	2b00      	cmp	r3, #0
 8007664:	d002      	beq.n	800766c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 ff08 	bl	800847c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	685a      	ldr	r2, [r3, #4]
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800767a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689a      	ldr	r2, [r3, #8]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800768a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f042 0201 	orr.w	r2, r2, #1
 800769a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 ff8f 	bl	80085c0 <UART_CheckIdleState>
 80076a2:	4603      	mov	r3, r0
}
 80076a4:	4618      	mov	r0, r3
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	b08a      	sub	sp, #40	; 0x28
 80076b0:	af02      	add	r7, sp, #8
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	603b      	str	r3, [r7, #0]
 80076b8:	4613      	mov	r3, r2
 80076ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80076c0:	2b20      	cmp	r3, #32
 80076c2:	f040 8082 	bne.w	80077ca <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d002      	beq.n	80076d2 <HAL_UART_Transmit+0x26>
 80076cc:	88fb      	ldrh	r3, [r7, #6]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80076d2:	2301      	movs	r3, #1
 80076d4:	e07a      	b.n	80077cc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80076dc:	2b01      	cmp	r3, #1
 80076de:	d101      	bne.n	80076e4 <HAL_UART_Transmit+0x38>
 80076e0:	2302      	movs	r3, #2
 80076e2:	e073      	b.n	80077cc <HAL_UART_Transmit+0x120>
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2201      	movs	r2, #1
 80076e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	2200      	movs	r2, #0
 80076f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2221      	movs	r2, #33	; 0x21
 80076f8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80076fa:	f7fa fd27 	bl	800214c <HAL_GetTick>
 80076fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	88fa      	ldrh	r2, [r7, #6]
 8007704:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	88fa      	ldrh	r2, [r7, #6]
 800770c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	689b      	ldr	r3, [r3, #8]
 8007714:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007718:	d108      	bne.n	800772c <HAL_UART_Transmit+0x80>
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	691b      	ldr	r3, [r3, #16]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d104      	bne.n	800772c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007722:	2300      	movs	r3, #0
 8007724:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	61bb      	str	r3, [r7, #24]
 800772a:	e003      	b.n	8007734 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007730:	2300      	movs	r3, #0
 8007732:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800773c:	e02d      	b.n	800779a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	9300      	str	r3, [sp, #0]
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2200      	movs	r2, #0
 8007746:	2180      	movs	r1, #128	; 0x80
 8007748:	68f8      	ldr	r0, [r7, #12]
 800774a:	f000 ff82 	bl	8008652 <UART_WaitOnFlagUntilTimeout>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d001      	beq.n	8007758 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007754:	2303      	movs	r3, #3
 8007756:	e039      	b.n	80077cc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007758:	69fb      	ldr	r3, [r7, #28]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10b      	bne.n	8007776 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800775e:	69bb      	ldr	r3, [r7, #24]
 8007760:	881a      	ldrh	r2, [r3, #0]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800776a:	b292      	uxth	r2, r2
 800776c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	3302      	adds	r3, #2
 8007772:	61bb      	str	r3, [r7, #24]
 8007774:	e008      	b.n	8007788 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007776:	69fb      	ldr	r3, [r7, #28]
 8007778:	781a      	ldrb	r2, [r3, #0]
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	b292      	uxth	r2, r2
 8007780:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	3301      	adds	r3, #1
 8007786:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800778e:	b29b      	uxth	r3, r3
 8007790:	3b01      	subs	r3, #1
 8007792:	b29a      	uxth	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1cb      	bne.n	800773e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	9300      	str	r3, [sp, #0]
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	2200      	movs	r2, #0
 80077ae:	2140      	movs	r1, #64	; 0x40
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f000 ff4e 	bl	8008652 <UART_WaitOnFlagUntilTimeout>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d001      	beq.n	80077c0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80077bc:	2303      	movs	r3, #3
 80077be:	e005      	b.n	80077cc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2220      	movs	r2, #32
 80077c4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80077c6:	2300      	movs	r3, #0
 80077c8:	e000      	b.n	80077cc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80077ca:	2302      	movs	r3, #2
  }
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3720      	adds	r7, #32
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b08a      	sub	sp, #40	; 0x28
 80077d8:	af02      	add	r7, sp, #8
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	603b      	str	r3, [r7, #0]
 80077e0:	4613      	mov	r3, r2
 80077e2:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077e8:	2b20      	cmp	r3, #32
 80077ea:	f040 80bf 	bne.w	800796c <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d002      	beq.n	80077fa <HAL_UART_Receive+0x26>
 80077f4:	88fb      	ldrh	r3, [r7, #6]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 80077fa:	2301      	movs	r3, #1
 80077fc:	e0b7      	b.n	800796e <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007804:	2b01      	cmp	r3, #1
 8007806:	d101      	bne.n	800780c <HAL_UART_Receive+0x38>
 8007808:	2302      	movs	r3, #2
 800780a:	e0b0      	b.n	800796e <HAL_UART_Receive+0x19a>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2222      	movs	r2, #34	; 0x22
 8007820:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	2200      	movs	r2, #0
 8007826:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007828:	f7fa fc90 	bl	800214c <HAL_GetTick>
 800782c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	88fa      	ldrh	r2, [r7, #6]
 8007832:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	88fa      	ldrh	r2, [r7, #6]
 800783a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007846:	d10e      	bne.n	8007866 <HAL_UART_Receive+0x92>
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	691b      	ldr	r3, [r3, #16]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d105      	bne.n	800785c <HAL_UART_Receive+0x88>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007856:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800785a:	e02d      	b.n	80078b8 <HAL_UART_Receive+0xe4>
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	22ff      	movs	r2, #255	; 0xff
 8007860:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007864:	e028      	b.n	80078b8 <HAL_UART_Receive+0xe4>
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	689b      	ldr	r3, [r3, #8]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10d      	bne.n	800788a <HAL_UART_Receive+0xb6>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d104      	bne.n	8007880 <HAL_UART_Receive+0xac>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	22ff      	movs	r2, #255	; 0xff
 800787a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800787e:	e01b      	b.n	80078b8 <HAL_UART_Receive+0xe4>
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	227f      	movs	r2, #127	; 0x7f
 8007884:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007888:	e016      	b.n	80078b8 <HAL_UART_Receive+0xe4>
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007892:	d10d      	bne.n	80078b0 <HAL_UART_Receive+0xdc>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	691b      	ldr	r3, [r3, #16]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d104      	bne.n	80078a6 <HAL_UART_Receive+0xd2>
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	227f      	movs	r2, #127	; 0x7f
 80078a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80078a4:	e008      	b.n	80078b8 <HAL_UART_Receive+0xe4>
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	223f      	movs	r2, #63	; 0x3f
 80078aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80078ae:	e003      	b.n	80078b8 <HAL_UART_Receive+0xe4>
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	2200      	movs	r2, #0
 80078b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80078be:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078c8:	d108      	bne.n	80078dc <HAL_UART_Receive+0x108>
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	691b      	ldr	r3, [r3, #16]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d104      	bne.n	80078dc <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80078d2:	2300      	movs	r3, #0
 80078d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	61bb      	str	r3, [r7, #24]
 80078da:	e003      	b.n	80078e4 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80078e0:	2300      	movs	r3, #0
 80078e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80078ec:	e033      	b.n	8007956 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2200      	movs	r2, #0
 80078f6:	2120      	movs	r1, #32
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 feaa 	bl	8008652 <UART_WaitOnFlagUntilTimeout>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e032      	b.n	800796e <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8007908:	69fb      	ldr	r3, [r7, #28]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d10c      	bne.n	8007928 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007914:	b29a      	uxth	r2, r3
 8007916:	8a7b      	ldrh	r3, [r7, #18]
 8007918:	4013      	ands	r3, r2
 800791a:	b29a      	uxth	r2, r3
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007920:	69bb      	ldr	r3, [r7, #24]
 8007922:	3302      	adds	r3, #2
 8007924:	61bb      	str	r3, [r7, #24]
 8007926:	e00d      	b.n	8007944 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800792e:	b29b      	uxth	r3, r3
 8007930:	b2da      	uxtb	r2, r3
 8007932:	8a7b      	ldrh	r3, [r7, #18]
 8007934:	b2db      	uxtb	r3, r3
 8007936:	4013      	ands	r3, r2
 8007938:	b2da      	uxtb	r2, r3
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	3301      	adds	r3, #1
 8007942:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800794a:	b29b      	uxth	r3, r3
 800794c:	3b01      	subs	r3, #1
 800794e:	b29a      	uxth	r2, r3
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800795c:	b29b      	uxth	r3, r3
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1c5      	bne.n	80078ee <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	2220      	movs	r2, #32
 8007966:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	e000      	b.n	800796e <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 800796c:	2302      	movs	r3, #2
  }
}
 800796e:	4618      	mov	r0, r3
 8007970:	3720      	adds	r7, #32
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
	...

08007978 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b0ba      	sub	sp, #232	; 0xe8
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	689b      	ldr	r3, [r3, #8]
 800799a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800799e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80079a2:	f640 030f 	movw	r3, #2063	; 0x80f
 80079a6:	4013      	ands	r3, r2
 80079a8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80079ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d115      	bne.n	80079e0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80079b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079b8:	f003 0320 	and.w	r3, r3, #32
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d00f      	beq.n	80079e0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80079c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079c4:	f003 0320 	and.w	r3, r3, #32
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d009      	beq.n	80079e0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	f000 82a6 	beq.w	8007f22 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80079da:	6878      	ldr	r0, [r7, #4]
 80079dc:	4798      	blx	r3
      }
      return;
 80079de:	e2a0      	b.n	8007f22 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80079e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	f000 8117 	beq.w	8007c18 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80079ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d106      	bne.n	8007a04 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80079f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80079fa:	4b85      	ldr	r3, [pc, #532]	; (8007c10 <HAL_UART_IRQHandler+0x298>)
 80079fc:	4013      	ands	r3, r2
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f000 810a 	beq.w	8007c18 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d011      	beq.n	8007a34 <HAL_UART_IRQHandler+0xbc>
 8007a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00b      	beq.n	8007a34 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2201      	movs	r2, #1
 8007a22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a2a:	f043 0201 	orr.w	r2, r3, #1
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a38:	f003 0302 	and.w	r3, r3, #2
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d011      	beq.n	8007a64 <HAL_UART_IRQHandler+0xec>
 8007a40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a44:	f003 0301 	and.w	r3, r3, #1
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00b      	beq.n	8007a64 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2202      	movs	r2, #2
 8007a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a5a:	f043 0204 	orr.w	r2, r3, #4
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a68:	f003 0304 	and.w	r3, r3, #4
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d011      	beq.n	8007a94 <HAL_UART_IRQHandler+0x11c>
 8007a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a74:	f003 0301 	and.w	r3, r3, #1
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00b      	beq.n	8007a94 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2204      	movs	r2, #4
 8007a82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a8a:	f043 0202 	orr.w	r2, r3, #2
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a98:	f003 0308 	and.w	r3, r3, #8
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d017      	beq.n	8007ad0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007aa0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007aa4:	f003 0320 	and.w	r3, r3, #32
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d105      	bne.n	8007ab8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007aac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ab0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d00b      	beq.n	8007ad0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	2208      	movs	r2, #8
 8007abe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ac6:	f043 0208 	orr.w	r2, r3, #8
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007ad0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ad4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d012      	beq.n	8007b02 <HAL_UART_IRQHandler+0x18a>
 8007adc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ae0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d00c      	beq.n	8007b02 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007af0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007af8:	f043 0220 	orr.w	r2, r3, #32
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	f000 820c 	beq.w	8007f26 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007b0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b12:	f003 0320 	and.w	r3, r3, #32
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d00d      	beq.n	8007b36 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007b1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b1e:	f003 0320 	and.w	r3, r3, #32
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d007      	beq.n	8007b36 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007b3c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	689b      	ldr	r3, [r3, #8]
 8007b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b4a:	2b40      	cmp	r3, #64	; 0x40
 8007b4c:	d005      	beq.n	8007b5a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007b4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007b52:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d04f      	beq.n	8007bfa <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b5a:	6878      	ldr	r0, [r7, #4]
 8007b5c:	f000 fe3d 	bl	80087da <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6a:	2b40      	cmp	r3, #64	; 0x40
 8007b6c:	d141      	bne.n	8007bf2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	3308      	adds	r3, #8
 8007b74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b78:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007b7c:	e853 3f00 	ldrex	r3, [r3]
 8007b80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007b84:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007b88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b8c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	3308      	adds	r3, #8
 8007b96:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007b9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007b9e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ba6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007baa:	e841 2300 	strex	r3, r2, [r1]
 8007bae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007bb2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1d9      	bne.n	8007b6e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d013      	beq.n	8007bea <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bc6:	4a13      	ldr	r2, [pc, #76]	; (8007c14 <HAL_UART_IRQHandler+0x29c>)
 8007bc8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bce:	4618      	mov	r0, r3
 8007bd0:	f7fb ff20 	bl	8003a14 <HAL_DMA_Abort_IT>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d017      	beq.n	8007c0a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be0:	687a      	ldr	r2, [r7, #4]
 8007be2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007be4:	4610      	mov	r0, r2
 8007be6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007be8:	e00f      	b.n	8007c0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f9a6 	bl	8007f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf0:	e00b      	b.n	8007c0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 f9a2 	bl	8007f3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf8:	e007      	b.n	8007c0a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f99e 	bl	8007f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007c08:	e18d      	b.n	8007f26 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c0a:	bf00      	nop
    return;
 8007c0c:	e18b      	b.n	8007f26 <HAL_UART_IRQHandler+0x5ae>
 8007c0e:	bf00      	nop
 8007c10:	04000120 	.word	0x04000120
 8007c14:	080088a1 	.word	0x080088a1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	f040 8146 	bne.w	8007eae <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c26:	f003 0310 	and.w	r3, r3, #16
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f000 813f 	beq.w	8007eae <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c34:	f003 0310 	and.w	r3, r3, #16
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 8138 	beq.w	8007eae <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	2210      	movs	r2, #16
 8007c44:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	689b      	ldr	r3, [r3, #8]
 8007c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c50:	2b40      	cmp	r3, #64	; 0x40
 8007c52:	f040 80b4 	bne.w	8007dbe <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007c62:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 815f 	beq.w	8007f2a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007c72:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c76:	429a      	cmp	r2, r3
 8007c78:	f080 8157 	bcs.w	8007f2a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007c82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f003 0320 	and.w	r3, r3, #32
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	f040 8085 	bne.w	8007da2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ca4:	e853 3f00 	ldrex	r3, [r3]
 8007ca8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007cac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007cb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	461a      	mov	r2, r3
 8007cbe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007cc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007cc6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007cce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007cd2:	e841 2300 	strex	r3, r2, [r1]
 8007cd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007cda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1da      	bne.n	8007c98 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3308      	adds	r3, #8
 8007ce8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007cec:	e853 3f00 	ldrex	r3, [r3]
 8007cf0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007cf2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007cf4:	f023 0301 	bic.w	r3, r3, #1
 8007cf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3308      	adds	r3, #8
 8007d02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d12:	e841 2300 	strex	r3, r2, [r1]
 8007d16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d1e1      	bne.n	8007ce2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	3308      	adds	r3, #8
 8007d24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d28:	e853 3f00 	ldrex	r3, [r3]
 8007d2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	3308      	adds	r3, #8
 8007d3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007d42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007d44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007d48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007d4a:	e841 2300 	strex	r3, r2, [r1]
 8007d4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007d50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d1e3      	bne.n	8007d1e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2220      	movs	r2, #32
 8007d5a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2200      	movs	r2, #0
 8007d60:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d6a:	e853 3f00 	ldrex	r3, [r3]
 8007d6e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007d70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d72:	f023 0310 	bic.w	r3, r3, #16
 8007d76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	461a      	mov	r2, r3
 8007d80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007d84:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d86:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007d8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007d8c:	e841 2300 	strex	r3, r2, [r1]
 8007d90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d1e4      	bne.n	8007d62 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d9c:	4618      	mov	r0, r3
 8007d9e:	f7fb fdfb 	bl	8003998 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	4619      	mov	r1, r3
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f000 f8ca 	bl	8007f50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007dbc:	e0b5      	b.n	8007f2a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007dd8:	b29b      	uxth	r3, r3
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	f000 80a7 	beq.w	8007f2e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007de0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f000 80a2 	beq.w	8007f2e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df2:	e853 3f00 	ldrex	r3, [r3]
 8007df6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dfa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007dfe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	461a      	mov	r2, r3
 8007e08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e0c:	647b      	str	r3, [r7, #68]	; 0x44
 8007e0e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e14:	e841 2300 	strex	r3, r2, [r1]
 8007e18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d1e4      	bne.n	8007dea <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	3308      	adds	r3, #8
 8007e26:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	e853 3f00 	ldrex	r3, [r3]
 8007e2e:	623b      	str	r3, [r7, #32]
   return(result);
 8007e30:	6a3b      	ldr	r3, [r7, #32]
 8007e32:	f023 0301 	bic.w	r3, r3, #1
 8007e36:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	3308      	adds	r3, #8
 8007e40:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007e44:	633a      	str	r2, [r7, #48]	; 0x30
 8007e46:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007e4c:	e841 2300 	strex	r3, r2, [r1]
 8007e50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1e3      	bne.n	8007e20 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2220      	movs	r2, #32
 8007e5c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2200      	movs	r2, #0
 8007e62:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2200      	movs	r2, #0
 8007e68:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	e853 3f00 	ldrex	r3, [r3]
 8007e76:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f023 0310 	bic.w	r3, r3, #16
 8007e7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	461a      	mov	r2, r3
 8007e88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007e8c:	61fb      	str	r3, [r7, #28]
 8007e8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e90:	69b9      	ldr	r1, [r7, #24]
 8007e92:	69fa      	ldr	r2, [r7, #28]
 8007e94:	e841 2300 	strex	r3, r2, [r1]
 8007e98:	617b      	str	r3, [r7, #20]
   return(result);
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d1e4      	bne.n	8007e6a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ea0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f000 f852 	bl	8007f50 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007eac:	e03f      	b.n	8007f2e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007eb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00e      	beq.n	8007ed8 <HAL_UART_IRQHandler+0x560>
 8007eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d008      	beq.n	8007ed8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007ece:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fd25 	bl	8008920 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ed6:	e02d      	b.n	8007f34 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007ed8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007edc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d00e      	beq.n	8007f02 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007ee4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ee8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d008      	beq.n	8007f02 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d01c      	beq.n	8007f32 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	4798      	blx	r3
    }
    return;
 8007f00:	e017      	b.n	8007f32 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d012      	beq.n	8007f34 <HAL_UART_IRQHandler+0x5bc>
 8007f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00c      	beq.n	8007f34 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007f1a:	6878      	ldr	r0, [r7, #4]
 8007f1c:	f000 fcd6 	bl	80088cc <UART_EndTransmit_IT>
    return;
 8007f20:	e008      	b.n	8007f34 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007f22:	bf00      	nop
 8007f24:	e006      	b.n	8007f34 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007f26:	bf00      	nop
 8007f28:	e004      	b.n	8007f34 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007f2a:	bf00      	nop
 8007f2c:	e002      	b.n	8007f34 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007f2e:	bf00      	nop
 8007f30:	e000      	b.n	8007f34 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007f32:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007f34:	37e8      	adds	r7, #232	; 0xe8
 8007f36:	46bd      	mov	sp, r7
 8007f38:	bd80      	pop	{r7, pc}
 8007f3a:	bf00      	nop

08007f3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f3c:	b480      	push	{r7}
 8007f3e:	b083      	sub	sp, #12
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f44:	bf00      	nop
 8007f46:	370c      	adds	r7, #12
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4e:	4770      	bx	lr

08007f50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	460b      	mov	r3, r1
 8007f5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f68:	b5b0      	push	{r4, r5, r7, lr}
 8007f6a:	b088      	sub	sp, #32
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	689a      	ldr	r2, [r3, #8]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	691b      	ldr	r3, [r3, #16]
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	695b      	ldr	r3, [r3, #20]
 8007f82:	431a      	orrs	r2, r3
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	69db      	ldr	r3, [r3, #28]
 8007f88:	4313      	orrs	r3, r2
 8007f8a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	681a      	ldr	r2, [r3, #0]
 8007f92:	4bad      	ldr	r3, [pc, #692]	; (8008248 <UART_SetConfig+0x2e0>)
 8007f94:	4013      	ands	r3, r2
 8007f96:	687a      	ldr	r2, [r7, #4]
 8007f98:	6812      	ldr	r2, [r2, #0]
 8007f9a:	69f9      	ldr	r1, [r7, #28]
 8007f9c:	430b      	orrs	r3, r1
 8007f9e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	68da      	ldr	r2, [r3, #12]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	430a      	orrs	r2, r1
 8007fb4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4aa2      	ldr	r2, [pc, #648]	; (800824c <UART_SetConfig+0x2e4>)
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d004      	beq.n	8007fd0 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	69fa      	ldr	r2, [r7, #28]
 8007fcc:	4313      	orrs	r3, r2
 8007fce:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	689b      	ldr	r3, [r3, #8]
 8007fd6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	69fa      	ldr	r2, [r7, #28]
 8007fe0:	430a      	orrs	r2, r1
 8007fe2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	4a99      	ldr	r2, [pc, #612]	; (8008250 <UART_SetConfig+0x2e8>)
 8007fea:	4293      	cmp	r3, r2
 8007fec:	d121      	bne.n	8008032 <UART_SetConfig+0xca>
 8007fee:	4b99      	ldr	r3, [pc, #612]	; (8008254 <UART_SetConfig+0x2ec>)
 8007ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ff4:	f003 0303 	and.w	r3, r3, #3
 8007ff8:	2b03      	cmp	r3, #3
 8007ffa:	d817      	bhi.n	800802c <UART_SetConfig+0xc4>
 8007ffc:	a201      	add	r2, pc, #4	; (adr r2, 8008004 <UART_SetConfig+0x9c>)
 8007ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008002:	bf00      	nop
 8008004:	08008015 	.word	0x08008015
 8008008:	08008021 	.word	0x08008021
 800800c:	0800801b 	.word	0x0800801b
 8008010:	08008027 	.word	0x08008027
 8008014:	2301      	movs	r3, #1
 8008016:	76fb      	strb	r3, [r7, #27]
 8008018:	e0e7      	b.n	80081ea <UART_SetConfig+0x282>
 800801a:	2302      	movs	r3, #2
 800801c:	76fb      	strb	r3, [r7, #27]
 800801e:	e0e4      	b.n	80081ea <UART_SetConfig+0x282>
 8008020:	2304      	movs	r3, #4
 8008022:	76fb      	strb	r3, [r7, #27]
 8008024:	e0e1      	b.n	80081ea <UART_SetConfig+0x282>
 8008026:	2308      	movs	r3, #8
 8008028:	76fb      	strb	r3, [r7, #27]
 800802a:	e0de      	b.n	80081ea <UART_SetConfig+0x282>
 800802c:	2310      	movs	r3, #16
 800802e:	76fb      	strb	r3, [r7, #27]
 8008030:	e0db      	b.n	80081ea <UART_SetConfig+0x282>
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	4a88      	ldr	r2, [pc, #544]	; (8008258 <UART_SetConfig+0x2f0>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d132      	bne.n	80080a2 <UART_SetConfig+0x13a>
 800803c:	4b85      	ldr	r3, [pc, #532]	; (8008254 <UART_SetConfig+0x2ec>)
 800803e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008042:	f003 030c 	and.w	r3, r3, #12
 8008046:	2b0c      	cmp	r3, #12
 8008048:	d828      	bhi.n	800809c <UART_SetConfig+0x134>
 800804a:	a201      	add	r2, pc, #4	; (adr r2, 8008050 <UART_SetConfig+0xe8>)
 800804c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008050:	08008085 	.word	0x08008085
 8008054:	0800809d 	.word	0x0800809d
 8008058:	0800809d 	.word	0x0800809d
 800805c:	0800809d 	.word	0x0800809d
 8008060:	08008091 	.word	0x08008091
 8008064:	0800809d 	.word	0x0800809d
 8008068:	0800809d 	.word	0x0800809d
 800806c:	0800809d 	.word	0x0800809d
 8008070:	0800808b 	.word	0x0800808b
 8008074:	0800809d 	.word	0x0800809d
 8008078:	0800809d 	.word	0x0800809d
 800807c:	0800809d 	.word	0x0800809d
 8008080:	08008097 	.word	0x08008097
 8008084:	2300      	movs	r3, #0
 8008086:	76fb      	strb	r3, [r7, #27]
 8008088:	e0af      	b.n	80081ea <UART_SetConfig+0x282>
 800808a:	2302      	movs	r3, #2
 800808c:	76fb      	strb	r3, [r7, #27]
 800808e:	e0ac      	b.n	80081ea <UART_SetConfig+0x282>
 8008090:	2304      	movs	r3, #4
 8008092:	76fb      	strb	r3, [r7, #27]
 8008094:	e0a9      	b.n	80081ea <UART_SetConfig+0x282>
 8008096:	2308      	movs	r3, #8
 8008098:	76fb      	strb	r3, [r7, #27]
 800809a:	e0a6      	b.n	80081ea <UART_SetConfig+0x282>
 800809c:	2310      	movs	r3, #16
 800809e:	76fb      	strb	r3, [r7, #27]
 80080a0:	e0a3      	b.n	80081ea <UART_SetConfig+0x282>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a6d      	ldr	r2, [pc, #436]	; (800825c <UART_SetConfig+0x2f4>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d120      	bne.n	80080ee <UART_SetConfig+0x186>
 80080ac:	4b69      	ldr	r3, [pc, #420]	; (8008254 <UART_SetConfig+0x2ec>)
 80080ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80080b6:	2b30      	cmp	r3, #48	; 0x30
 80080b8:	d013      	beq.n	80080e2 <UART_SetConfig+0x17a>
 80080ba:	2b30      	cmp	r3, #48	; 0x30
 80080bc:	d814      	bhi.n	80080e8 <UART_SetConfig+0x180>
 80080be:	2b20      	cmp	r3, #32
 80080c0:	d009      	beq.n	80080d6 <UART_SetConfig+0x16e>
 80080c2:	2b20      	cmp	r3, #32
 80080c4:	d810      	bhi.n	80080e8 <UART_SetConfig+0x180>
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d002      	beq.n	80080d0 <UART_SetConfig+0x168>
 80080ca:	2b10      	cmp	r3, #16
 80080cc:	d006      	beq.n	80080dc <UART_SetConfig+0x174>
 80080ce:	e00b      	b.n	80080e8 <UART_SetConfig+0x180>
 80080d0:	2300      	movs	r3, #0
 80080d2:	76fb      	strb	r3, [r7, #27]
 80080d4:	e089      	b.n	80081ea <UART_SetConfig+0x282>
 80080d6:	2302      	movs	r3, #2
 80080d8:	76fb      	strb	r3, [r7, #27]
 80080da:	e086      	b.n	80081ea <UART_SetConfig+0x282>
 80080dc:	2304      	movs	r3, #4
 80080de:	76fb      	strb	r3, [r7, #27]
 80080e0:	e083      	b.n	80081ea <UART_SetConfig+0x282>
 80080e2:	2308      	movs	r3, #8
 80080e4:	76fb      	strb	r3, [r7, #27]
 80080e6:	e080      	b.n	80081ea <UART_SetConfig+0x282>
 80080e8:	2310      	movs	r3, #16
 80080ea:	76fb      	strb	r3, [r7, #27]
 80080ec:	e07d      	b.n	80081ea <UART_SetConfig+0x282>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	4a5b      	ldr	r2, [pc, #364]	; (8008260 <UART_SetConfig+0x2f8>)
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d120      	bne.n	800813a <UART_SetConfig+0x1d2>
 80080f8:	4b56      	ldr	r3, [pc, #344]	; (8008254 <UART_SetConfig+0x2ec>)
 80080fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008102:	2bc0      	cmp	r3, #192	; 0xc0
 8008104:	d013      	beq.n	800812e <UART_SetConfig+0x1c6>
 8008106:	2bc0      	cmp	r3, #192	; 0xc0
 8008108:	d814      	bhi.n	8008134 <UART_SetConfig+0x1cc>
 800810a:	2b80      	cmp	r3, #128	; 0x80
 800810c:	d009      	beq.n	8008122 <UART_SetConfig+0x1ba>
 800810e:	2b80      	cmp	r3, #128	; 0x80
 8008110:	d810      	bhi.n	8008134 <UART_SetConfig+0x1cc>
 8008112:	2b00      	cmp	r3, #0
 8008114:	d002      	beq.n	800811c <UART_SetConfig+0x1b4>
 8008116:	2b40      	cmp	r3, #64	; 0x40
 8008118:	d006      	beq.n	8008128 <UART_SetConfig+0x1c0>
 800811a:	e00b      	b.n	8008134 <UART_SetConfig+0x1cc>
 800811c:	2300      	movs	r3, #0
 800811e:	76fb      	strb	r3, [r7, #27]
 8008120:	e063      	b.n	80081ea <UART_SetConfig+0x282>
 8008122:	2302      	movs	r3, #2
 8008124:	76fb      	strb	r3, [r7, #27]
 8008126:	e060      	b.n	80081ea <UART_SetConfig+0x282>
 8008128:	2304      	movs	r3, #4
 800812a:	76fb      	strb	r3, [r7, #27]
 800812c:	e05d      	b.n	80081ea <UART_SetConfig+0x282>
 800812e:	2308      	movs	r3, #8
 8008130:	76fb      	strb	r3, [r7, #27]
 8008132:	e05a      	b.n	80081ea <UART_SetConfig+0x282>
 8008134:	2310      	movs	r3, #16
 8008136:	76fb      	strb	r3, [r7, #27]
 8008138:	e057      	b.n	80081ea <UART_SetConfig+0x282>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	4a49      	ldr	r2, [pc, #292]	; (8008264 <UART_SetConfig+0x2fc>)
 8008140:	4293      	cmp	r3, r2
 8008142:	d125      	bne.n	8008190 <UART_SetConfig+0x228>
 8008144:	4b43      	ldr	r3, [pc, #268]	; (8008254 <UART_SetConfig+0x2ec>)
 8008146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800814a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800814e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008152:	d017      	beq.n	8008184 <UART_SetConfig+0x21c>
 8008154:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008158:	d817      	bhi.n	800818a <UART_SetConfig+0x222>
 800815a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800815e:	d00b      	beq.n	8008178 <UART_SetConfig+0x210>
 8008160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008164:	d811      	bhi.n	800818a <UART_SetConfig+0x222>
 8008166:	2b00      	cmp	r3, #0
 8008168:	d003      	beq.n	8008172 <UART_SetConfig+0x20a>
 800816a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800816e:	d006      	beq.n	800817e <UART_SetConfig+0x216>
 8008170:	e00b      	b.n	800818a <UART_SetConfig+0x222>
 8008172:	2300      	movs	r3, #0
 8008174:	76fb      	strb	r3, [r7, #27]
 8008176:	e038      	b.n	80081ea <UART_SetConfig+0x282>
 8008178:	2302      	movs	r3, #2
 800817a:	76fb      	strb	r3, [r7, #27]
 800817c:	e035      	b.n	80081ea <UART_SetConfig+0x282>
 800817e:	2304      	movs	r3, #4
 8008180:	76fb      	strb	r3, [r7, #27]
 8008182:	e032      	b.n	80081ea <UART_SetConfig+0x282>
 8008184:	2308      	movs	r3, #8
 8008186:	76fb      	strb	r3, [r7, #27]
 8008188:	e02f      	b.n	80081ea <UART_SetConfig+0x282>
 800818a:	2310      	movs	r3, #16
 800818c:	76fb      	strb	r3, [r7, #27]
 800818e:	e02c      	b.n	80081ea <UART_SetConfig+0x282>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	4a2d      	ldr	r2, [pc, #180]	; (800824c <UART_SetConfig+0x2e4>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d125      	bne.n	80081e6 <UART_SetConfig+0x27e>
 800819a:	4b2e      	ldr	r3, [pc, #184]	; (8008254 <UART_SetConfig+0x2ec>)
 800819c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80081a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081a8:	d017      	beq.n	80081da <UART_SetConfig+0x272>
 80081aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80081ae:	d817      	bhi.n	80081e0 <UART_SetConfig+0x278>
 80081b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081b4:	d00b      	beq.n	80081ce <UART_SetConfig+0x266>
 80081b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081ba:	d811      	bhi.n	80081e0 <UART_SetConfig+0x278>
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d003      	beq.n	80081c8 <UART_SetConfig+0x260>
 80081c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081c4:	d006      	beq.n	80081d4 <UART_SetConfig+0x26c>
 80081c6:	e00b      	b.n	80081e0 <UART_SetConfig+0x278>
 80081c8:	2300      	movs	r3, #0
 80081ca:	76fb      	strb	r3, [r7, #27]
 80081cc:	e00d      	b.n	80081ea <UART_SetConfig+0x282>
 80081ce:	2302      	movs	r3, #2
 80081d0:	76fb      	strb	r3, [r7, #27]
 80081d2:	e00a      	b.n	80081ea <UART_SetConfig+0x282>
 80081d4:	2304      	movs	r3, #4
 80081d6:	76fb      	strb	r3, [r7, #27]
 80081d8:	e007      	b.n	80081ea <UART_SetConfig+0x282>
 80081da:	2308      	movs	r3, #8
 80081dc:	76fb      	strb	r3, [r7, #27]
 80081de:	e004      	b.n	80081ea <UART_SetConfig+0x282>
 80081e0:	2310      	movs	r3, #16
 80081e2:	76fb      	strb	r3, [r7, #27]
 80081e4:	e001      	b.n	80081ea <UART_SetConfig+0x282>
 80081e6:	2310      	movs	r3, #16
 80081e8:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	4a17      	ldr	r2, [pc, #92]	; (800824c <UART_SetConfig+0x2e4>)
 80081f0:	4293      	cmp	r3, r2
 80081f2:	f040 8087 	bne.w	8008304 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081f6:	7efb      	ldrb	r3, [r7, #27]
 80081f8:	2b08      	cmp	r3, #8
 80081fa:	d837      	bhi.n	800826c <UART_SetConfig+0x304>
 80081fc:	a201      	add	r2, pc, #4	; (adr r2, 8008204 <UART_SetConfig+0x29c>)
 80081fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008202:	bf00      	nop
 8008204:	08008229 	.word	0x08008229
 8008208:	0800826d 	.word	0x0800826d
 800820c:	08008231 	.word	0x08008231
 8008210:	0800826d 	.word	0x0800826d
 8008214:	08008237 	.word	0x08008237
 8008218:	0800826d 	.word	0x0800826d
 800821c:	0800826d 	.word	0x0800826d
 8008220:	0800826d 	.word	0x0800826d
 8008224:	0800823f 	.word	0x0800823f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008228:	f7fc fbbc 	bl	80049a4 <HAL_RCC_GetPCLK1Freq>
 800822c:	6178      	str	r0, [r7, #20]
        break;
 800822e:	e022      	b.n	8008276 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008230:	4b0d      	ldr	r3, [pc, #52]	; (8008268 <UART_SetConfig+0x300>)
 8008232:	617b      	str	r3, [r7, #20]
        break;
 8008234:	e01f      	b.n	8008276 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008236:	f7fc fb1d 	bl	8004874 <HAL_RCC_GetSysClockFreq>
 800823a:	6178      	str	r0, [r7, #20]
        break;
 800823c:	e01b      	b.n	8008276 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800823e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008242:	617b      	str	r3, [r7, #20]
        break;
 8008244:	e017      	b.n	8008276 <UART_SetConfig+0x30e>
 8008246:	bf00      	nop
 8008248:	efff69f3 	.word	0xefff69f3
 800824c:	40008000 	.word	0x40008000
 8008250:	40013800 	.word	0x40013800
 8008254:	40021000 	.word	0x40021000
 8008258:	40004400 	.word	0x40004400
 800825c:	40004800 	.word	0x40004800
 8008260:	40004c00 	.word	0x40004c00
 8008264:	40005000 	.word	0x40005000
 8008268:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800826c:	2300      	movs	r3, #0
 800826e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	76bb      	strb	r3, [r7, #26]
        break;
 8008274:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008276:	697b      	ldr	r3, [r7, #20]
 8008278:	2b00      	cmp	r3, #0
 800827a:	f000 80f1 	beq.w	8008460 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	685a      	ldr	r2, [r3, #4]
 8008282:	4613      	mov	r3, r2
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	4413      	add	r3, r2
 8008288:	697a      	ldr	r2, [r7, #20]
 800828a:	429a      	cmp	r2, r3
 800828c:	d305      	bcc.n	800829a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	685b      	ldr	r3, [r3, #4]
 8008292:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008294:	697a      	ldr	r2, [r7, #20]
 8008296:	429a      	cmp	r2, r3
 8008298:	d902      	bls.n	80082a0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	76bb      	strb	r3, [r7, #26]
 800829e:	e0df      	b.n	8008460 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80082a0:	697b      	ldr	r3, [r7, #20]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f04f 0100 	mov.w	r1, #0
 80082a8:	f04f 0200 	mov.w	r2, #0
 80082ac:	f04f 0300 	mov.w	r3, #0
 80082b0:	020b      	lsls	r3, r1, #8
 80082b2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80082b6:	0202      	lsls	r2, r0, #8
 80082b8:	6879      	ldr	r1, [r7, #4]
 80082ba:	6849      	ldr	r1, [r1, #4]
 80082bc:	0849      	lsrs	r1, r1, #1
 80082be:	4608      	mov	r0, r1
 80082c0:	f04f 0100 	mov.w	r1, #0
 80082c4:	1814      	adds	r4, r2, r0
 80082c6:	eb43 0501 	adc.w	r5, r3, r1
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	685b      	ldr	r3, [r3, #4]
 80082ce:	461a      	mov	r2, r3
 80082d0:	f04f 0300 	mov.w	r3, #0
 80082d4:	4620      	mov	r0, r4
 80082d6:	4629      	mov	r1, r5
 80082d8:	f7f8 fbc0 	bl	8000a5c <__aeabi_uldivmod>
 80082dc:	4602      	mov	r2, r0
 80082de:	460b      	mov	r3, r1
 80082e0:	4613      	mov	r3, r2
 80082e2:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80082ea:	d308      	bcc.n	80082fe <UART_SetConfig+0x396>
 80082ec:	693b      	ldr	r3, [r7, #16]
 80082ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80082f2:	d204      	bcs.n	80082fe <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	693a      	ldr	r2, [r7, #16]
 80082fa:	60da      	str	r2, [r3, #12]
 80082fc:	e0b0      	b.n	8008460 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	76bb      	strb	r3, [r7, #26]
 8008302:	e0ad      	b.n	8008460 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	69db      	ldr	r3, [r3, #28]
 8008308:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800830c:	d15b      	bne.n	80083c6 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800830e:	7efb      	ldrb	r3, [r7, #27]
 8008310:	2b08      	cmp	r3, #8
 8008312:	d828      	bhi.n	8008366 <UART_SetConfig+0x3fe>
 8008314:	a201      	add	r2, pc, #4	; (adr r2, 800831c <UART_SetConfig+0x3b4>)
 8008316:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800831a:	bf00      	nop
 800831c:	08008341 	.word	0x08008341
 8008320:	08008349 	.word	0x08008349
 8008324:	08008351 	.word	0x08008351
 8008328:	08008367 	.word	0x08008367
 800832c:	08008357 	.word	0x08008357
 8008330:	08008367 	.word	0x08008367
 8008334:	08008367 	.word	0x08008367
 8008338:	08008367 	.word	0x08008367
 800833c:	0800835f 	.word	0x0800835f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008340:	f7fc fb30 	bl	80049a4 <HAL_RCC_GetPCLK1Freq>
 8008344:	6178      	str	r0, [r7, #20]
        break;
 8008346:	e013      	b.n	8008370 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008348:	f7fc fb42 	bl	80049d0 <HAL_RCC_GetPCLK2Freq>
 800834c:	6178      	str	r0, [r7, #20]
        break;
 800834e:	e00f      	b.n	8008370 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008350:	4b49      	ldr	r3, [pc, #292]	; (8008478 <UART_SetConfig+0x510>)
 8008352:	617b      	str	r3, [r7, #20]
        break;
 8008354:	e00c      	b.n	8008370 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008356:	f7fc fa8d 	bl	8004874 <HAL_RCC_GetSysClockFreq>
 800835a:	6178      	str	r0, [r7, #20]
        break;
 800835c:	e008      	b.n	8008370 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800835e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008362:	617b      	str	r3, [r7, #20]
        break;
 8008364:	e004      	b.n	8008370 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8008366:	2300      	movs	r3, #0
 8008368:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	76bb      	strb	r3, [r7, #26]
        break;
 800836e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008370:	697b      	ldr	r3, [r7, #20]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d074      	beq.n	8008460 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	005a      	lsls	r2, r3, #1
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	085b      	lsrs	r3, r3, #1
 8008380:	441a      	add	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	685b      	ldr	r3, [r3, #4]
 8008386:	fbb2 f3f3 	udiv	r3, r2, r3
 800838a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	2b0f      	cmp	r3, #15
 8008390:	d916      	bls.n	80083c0 <UART_SetConfig+0x458>
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008398:	d212      	bcs.n	80083c0 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800839a:	693b      	ldr	r3, [r7, #16]
 800839c:	b29b      	uxth	r3, r3
 800839e:	f023 030f 	bic.w	r3, r3, #15
 80083a2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	085b      	lsrs	r3, r3, #1
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	f003 0307 	and.w	r3, r3, #7
 80083ae:	b29a      	uxth	r2, r3
 80083b0:	89fb      	ldrh	r3, [r7, #14]
 80083b2:	4313      	orrs	r3, r2
 80083b4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	89fa      	ldrh	r2, [r7, #14]
 80083bc:	60da      	str	r2, [r3, #12]
 80083be:	e04f      	b.n	8008460 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80083c0:	2301      	movs	r3, #1
 80083c2:	76bb      	strb	r3, [r7, #26]
 80083c4:	e04c      	b.n	8008460 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083c6:	7efb      	ldrb	r3, [r7, #27]
 80083c8:	2b08      	cmp	r3, #8
 80083ca:	d828      	bhi.n	800841e <UART_SetConfig+0x4b6>
 80083cc:	a201      	add	r2, pc, #4	; (adr r2, 80083d4 <UART_SetConfig+0x46c>)
 80083ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083d2:	bf00      	nop
 80083d4:	080083f9 	.word	0x080083f9
 80083d8:	08008401 	.word	0x08008401
 80083dc:	08008409 	.word	0x08008409
 80083e0:	0800841f 	.word	0x0800841f
 80083e4:	0800840f 	.word	0x0800840f
 80083e8:	0800841f 	.word	0x0800841f
 80083ec:	0800841f 	.word	0x0800841f
 80083f0:	0800841f 	.word	0x0800841f
 80083f4:	08008417 	.word	0x08008417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083f8:	f7fc fad4 	bl	80049a4 <HAL_RCC_GetPCLK1Freq>
 80083fc:	6178      	str	r0, [r7, #20]
        break;
 80083fe:	e013      	b.n	8008428 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008400:	f7fc fae6 	bl	80049d0 <HAL_RCC_GetPCLK2Freq>
 8008404:	6178      	str	r0, [r7, #20]
        break;
 8008406:	e00f      	b.n	8008428 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008408:	4b1b      	ldr	r3, [pc, #108]	; (8008478 <UART_SetConfig+0x510>)
 800840a:	617b      	str	r3, [r7, #20]
        break;
 800840c:	e00c      	b.n	8008428 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800840e:	f7fc fa31 	bl	8004874 <HAL_RCC_GetSysClockFreq>
 8008412:	6178      	str	r0, [r7, #20]
        break;
 8008414:	e008      	b.n	8008428 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008416:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800841a:	617b      	str	r3, [r7, #20]
        break;
 800841c:	e004      	b.n	8008428 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800841e:	2300      	movs	r3, #0
 8008420:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008422:	2301      	movs	r3, #1
 8008424:	76bb      	strb	r3, [r7, #26]
        break;
 8008426:	bf00      	nop
    }

    if (pclk != 0U)
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d018      	beq.n	8008460 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	085a      	lsrs	r2, r3, #1
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	441a      	add	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008440:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	2b0f      	cmp	r3, #15
 8008446:	d909      	bls.n	800845c <UART_SetConfig+0x4f4>
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800844e:	d205      	bcs.n	800845c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	b29a      	uxth	r2, r3
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	60da      	str	r2, [r3, #12]
 800845a:	e001      	b.n	8008460 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2200      	movs	r2, #0
 8008464:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2200      	movs	r2, #0
 800846a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800846c:	7ebb      	ldrb	r3, [r7, #26]
}
 800846e:	4618      	mov	r0, r3
 8008470:	3720      	adds	r7, #32
 8008472:	46bd      	mov	sp, r7
 8008474:	bdb0      	pop	{r4, r5, r7, pc}
 8008476:	bf00      	nop
 8008478:	00f42400 	.word	0x00f42400

0800847c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008488:	f003 0301 	and.w	r3, r3, #1
 800848c:	2b00      	cmp	r3, #0
 800848e:	d00a      	beq.n	80084a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	685b      	ldr	r3, [r3, #4]
 8008496:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	430a      	orrs	r2, r1
 80084a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084aa:	f003 0302 	and.w	r3, r3, #2
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d00a      	beq.n	80084c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	430a      	orrs	r2, r1
 80084c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084cc:	f003 0304 	and.w	r3, r3, #4
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d00a      	beq.n	80084ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	430a      	orrs	r2, r1
 80084e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ee:	f003 0308 	and.w	r3, r3, #8
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d00a      	beq.n	800850c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	430a      	orrs	r2, r1
 800850a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008510:	f003 0310 	and.w	r3, r3, #16
 8008514:	2b00      	cmp	r3, #0
 8008516:	d00a      	beq.n	800852e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	689b      	ldr	r3, [r3, #8]
 800851e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	430a      	orrs	r2, r1
 800852c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008532:	f003 0320 	and.w	r3, r3, #32
 8008536:	2b00      	cmp	r3, #0
 8008538:	d00a      	beq.n	8008550 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	430a      	orrs	r2, r1
 800854e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008554:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008558:	2b00      	cmp	r3, #0
 800855a:	d01a      	beq.n	8008592 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	430a      	orrs	r2, r1
 8008570:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008576:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800857a:	d10a      	bne.n	8008592 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	430a      	orrs	r2, r1
 8008590:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008596:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800859a:	2b00      	cmp	r3, #0
 800859c:	d00a      	beq.n	80085b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	430a      	orrs	r2, r1
 80085b2:	605a      	str	r2, [r3, #4]
  }
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b086      	sub	sp, #24
 80085c4:	af02      	add	r7, sp, #8
 80085c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085d0:	f7f9 fdbc 	bl	800214c <HAL_GetTick>
 80085d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	f003 0308 	and.w	r3, r3, #8
 80085e0:	2b08      	cmp	r3, #8
 80085e2:	d10e      	bne.n	8008602 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2200      	movs	r2, #0
 80085ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80085f2:	6878      	ldr	r0, [r7, #4]
 80085f4:	f000 f82d 	bl	8008652 <UART_WaitOnFlagUntilTimeout>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085fe:	2303      	movs	r3, #3
 8008600:	e023      	b.n	800864a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f003 0304 	and.w	r3, r3, #4
 800860c:	2b04      	cmp	r3, #4
 800860e:	d10e      	bne.n	800862e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008610:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	2200      	movs	r2, #0
 800861a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f817 	bl	8008652 <UART_WaitOnFlagUntilTimeout>
 8008624:	4603      	mov	r3, r0
 8008626:	2b00      	cmp	r3, #0
 8008628:	d001      	beq.n	800862e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e00d      	b.n	800864a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	2220      	movs	r2, #32
 8008632:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2220      	movs	r2, #32
 8008638:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008648:	2300      	movs	r3, #0
}
 800864a:	4618      	mov	r0, r3
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}

08008652 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008652:	b580      	push	{r7, lr}
 8008654:	b09c      	sub	sp, #112	; 0x70
 8008656:	af00      	add	r7, sp, #0
 8008658:	60f8      	str	r0, [r7, #12]
 800865a:	60b9      	str	r1, [r7, #8]
 800865c:	603b      	str	r3, [r7, #0]
 800865e:	4613      	mov	r3, r2
 8008660:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008662:	e0a5      	b.n	80087b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008666:	f1b3 3fff 	cmp.w	r3, #4294967295
 800866a:	f000 80a1 	beq.w	80087b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800866e:	f7f9 fd6d 	bl	800214c <HAL_GetTick>
 8008672:	4602      	mov	r2, r0
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800867a:	429a      	cmp	r2, r3
 800867c:	d302      	bcc.n	8008684 <UART_WaitOnFlagUntilTimeout+0x32>
 800867e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008680:	2b00      	cmp	r3, #0
 8008682:	d13e      	bne.n	8008702 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800868a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800868c:	e853 3f00 	ldrex	r3, [r3]
 8008690:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008694:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008698:	667b      	str	r3, [r7, #100]	; 0x64
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80086a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086a4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80086a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80086aa:	e841 2300 	strex	r3, r2, [r1]
 80086ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80086b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1e6      	bne.n	8008684 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	3308      	adds	r3, #8
 80086bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086c0:	e853 3f00 	ldrex	r3, [r3]
 80086c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086c8:	f023 0301 	bic.w	r3, r3, #1
 80086cc:	663b      	str	r3, [r7, #96]	; 0x60
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	3308      	adds	r3, #8
 80086d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80086d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80086d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80086dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086de:	e841 2300 	strex	r3, r2, [r1]
 80086e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80086e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d1e5      	bne.n	80086b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2220      	movs	r2, #32
 80086ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	2220      	movs	r2, #32
 80086f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	2200      	movs	r2, #0
 80086fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e067      	b.n	80087d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	f003 0304 	and.w	r3, r3, #4
 800870c:	2b00      	cmp	r3, #0
 800870e:	d04f      	beq.n	80087b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	69db      	ldr	r3, [r3, #28]
 8008716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800871a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800871e:	d147      	bne.n	80087b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008728:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008732:	e853 3f00 	ldrex	r3, [r3]
 8008736:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800873a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800873e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	461a      	mov	r2, r3
 8008746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008748:	637b      	str	r3, [r7, #52]	; 0x34
 800874a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800874e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008750:	e841 2300 	strex	r3, r2, [r1]
 8008754:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008758:	2b00      	cmp	r3, #0
 800875a:	d1e6      	bne.n	800872a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	3308      	adds	r3, #8
 8008762:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	e853 3f00 	ldrex	r3, [r3]
 800876a:	613b      	str	r3, [r7, #16]
   return(result);
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	f023 0301 	bic.w	r3, r3, #1
 8008772:	66bb      	str	r3, [r7, #104]	; 0x68
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	3308      	adds	r3, #8
 800877a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800877c:	623a      	str	r2, [r7, #32]
 800877e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008780:	69f9      	ldr	r1, [r7, #28]
 8008782:	6a3a      	ldr	r2, [r7, #32]
 8008784:	e841 2300 	strex	r3, r2, [r1]
 8008788:	61bb      	str	r3, [r7, #24]
   return(result);
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d1e5      	bne.n	800875c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2220      	movs	r2, #32
 8008794:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	2220      	movs	r2, #32
 800879a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	2220      	movs	r2, #32
 80087a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	2200      	movs	r2, #0
 80087a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80087ac:	2303      	movs	r3, #3
 80087ae:	e010      	b.n	80087d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	69da      	ldr	r2, [r3, #28]
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	4013      	ands	r3, r2
 80087ba:	68ba      	ldr	r2, [r7, #8]
 80087bc:	429a      	cmp	r2, r3
 80087be:	bf0c      	ite	eq
 80087c0:	2301      	moveq	r3, #1
 80087c2:	2300      	movne	r3, #0
 80087c4:	b2db      	uxtb	r3, r3
 80087c6:	461a      	mov	r2, r3
 80087c8:	79fb      	ldrb	r3, [r7, #7]
 80087ca:	429a      	cmp	r2, r3
 80087cc:	f43f af4a 	beq.w	8008664 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087d0:	2300      	movs	r3, #0
}
 80087d2:	4618      	mov	r0, r3
 80087d4:	3770      	adds	r7, #112	; 0x70
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}

080087da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80087da:	b480      	push	{r7}
 80087dc:	b095      	sub	sp, #84	; 0x54
 80087de:	af00      	add	r7, sp, #0
 80087e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ea:	e853 3f00 	ldrex	r3, [r3]
 80087ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80087f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80087f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	461a      	mov	r2, r3
 80087fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008800:	643b      	str	r3, [r7, #64]	; 0x40
 8008802:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008804:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008806:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008808:	e841 2300 	strex	r3, r2, [r1]
 800880c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800880e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008810:	2b00      	cmp	r3, #0
 8008812:	d1e6      	bne.n	80087e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	3308      	adds	r3, #8
 800881a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800881c:	6a3b      	ldr	r3, [r7, #32]
 800881e:	e853 3f00 	ldrex	r3, [r3]
 8008822:	61fb      	str	r3, [r7, #28]
   return(result);
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	f023 0301 	bic.w	r3, r3, #1
 800882a:	64bb      	str	r3, [r7, #72]	; 0x48
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	3308      	adds	r3, #8
 8008832:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008834:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008836:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008838:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800883a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800883c:	e841 2300 	strex	r3, r2, [r1]
 8008840:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008844:	2b00      	cmp	r3, #0
 8008846:	d1e5      	bne.n	8008814 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800884c:	2b01      	cmp	r3, #1
 800884e:	d118      	bne.n	8008882 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	e853 3f00 	ldrex	r3, [r3]
 800885c:	60bb      	str	r3, [r7, #8]
   return(result);
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	f023 0310 	bic.w	r3, r3, #16
 8008864:	647b      	str	r3, [r7, #68]	; 0x44
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	461a      	mov	r2, r3
 800886c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800886e:	61bb      	str	r3, [r7, #24]
 8008870:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008872:	6979      	ldr	r1, [r7, #20]
 8008874:	69ba      	ldr	r2, [r7, #24]
 8008876:	e841 2300 	strex	r3, r2, [r1]
 800887a:	613b      	str	r3, [r7, #16]
   return(result);
 800887c:	693b      	ldr	r3, [r7, #16]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1e6      	bne.n	8008850 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2220      	movs	r2, #32
 8008886:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2200      	movs	r2, #0
 800888c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008894:	bf00      	nop
 8008896:	3754      	adds	r7, #84	; 0x54
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80088be:	68f8      	ldr	r0, [r7, #12]
 80088c0:	f7ff fb3c 	bl	8007f3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80088c4:	bf00      	nop
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b088      	sub	sp, #32
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	e853 3f00 	ldrex	r3, [r3]
 80088e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80088e2:	68bb      	ldr	r3, [r7, #8]
 80088e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80088e8:	61fb      	str	r3, [r7, #28]
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	461a      	mov	r2, r3
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	61bb      	str	r3, [r7, #24]
 80088f4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088f6:	6979      	ldr	r1, [r7, #20]
 80088f8:	69ba      	ldr	r2, [r7, #24]
 80088fa:	e841 2300 	strex	r3, r2, [r1]
 80088fe:	613b      	str	r3, [r7, #16]
   return(result);
 8008900:	693b      	ldr	r3, [r7, #16]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d1e6      	bne.n	80088d4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2220      	movs	r2, #32
 800890a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f7f8 ff5a 	bl	80017cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008918:	bf00      	nop
 800891a:	3720      	adds	r7, #32
 800891c:	46bd      	mov	sp, r7
 800891e:	bd80      	pop	{r7, pc}

08008920 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008928:	bf00      	nop
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <__NVIC_SetPriority>:
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	4603      	mov	r3, r0
 800893c:	6039      	str	r1, [r7, #0]
 800893e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008944:	2b00      	cmp	r3, #0
 8008946:	db0a      	blt.n	800895e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	b2da      	uxtb	r2, r3
 800894c:	490c      	ldr	r1, [pc, #48]	; (8008980 <__NVIC_SetPriority+0x4c>)
 800894e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008952:	0112      	lsls	r2, r2, #4
 8008954:	b2d2      	uxtb	r2, r2
 8008956:	440b      	add	r3, r1
 8008958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800895c:	e00a      	b.n	8008974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	b2da      	uxtb	r2, r3
 8008962:	4908      	ldr	r1, [pc, #32]	; (8008984 <__NVIC_SetPriority+0x50>)
 8008964:	79fb      	ldrb	r3, [r7, #7]
 8008966:	f003 030f 	and.w	r3, r3, #15
 800896a:	3b04      	subs	r3, #4
 800896c:	0112      	lsls	r2, r2, #4
 800896e:	b2d2      	uxtb	r2, r2
 8008970:	440b      	add	r3, r1
 8008972:	761a      	strb	r2, [r3, #24]
}
 8008974:	bf00      	nop
 8008976:	370c      	adds	r7, #12
 8008978:	46bd      	mov	sp, r7
 800897a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897e:	4770      	bx	lr
 8008980:	e000e100 	.word	0xe000e100
 8008984:	e000ed00 	.word	0xe000ed00

08008988 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008988:	b580      	push	{r7, lr}
 800898a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800898c:	4b05      	ldr	r3, [pc, #20]	; (80089a4 <SysTick_Handler+0x1c>)
 800898e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008990:	f001 fda6 	bl	800a4e0 <xTaskGetSchedulerState>
 8008994:	4603      	mov	r3, r0
 8008996:	2b01      	cmp	r3, #1
 8008998:	d001      	beq.n	800899e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800899a:	f002 fb8d 	bl	800b0b8 <xPortSysTickHandler>
  }
}
 800899e:	bf00      	nop
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	e000e010 	.word	0xe000e010

080089a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80089a8:	b580      	push	{r7, lr}
 80089aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80089ac:	2100      	movs	r1, #0
 80089ae:	f06f 0004 	mvn.w	r0, #4
 80089b2:	f7ff ffbf 	bl	8008934 <__NVIC_SetPriority>
#endif
}
 80089b6:	bf00      	nop
 80089b8:	bd80      	pop	{r7, pc}
	...

080089bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089c2:	f3ef 8305 	mrs	r3, IPSR
 80089c6:	603b      	str	r3, [r7, #0]
  return(result);
 80089c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d003      	beq.n	80089d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80089ce:	f06f 0305 	mvn.w	r3, #5
 80089d2:	607b      	str	r3, [r7, #4]
 80089d4:	e00c      	b.n	80089f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80089d6:	4b0a      	ldr	r3, [pc, #40]	; (8008a00 <osKernelInitialize+0x44>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d105      	bne.n	80089ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80089de:	4b08      	ldr	r3, [pc, #32]	; (8008a00 <osKernelInitialize+0x44>)
 80089e0:	2201      	movs	r2, #1
 80089e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80089e4:	2300      	movs	r3, #0
 80089e6:	607b      	str	r3, [r7, #4]
 80089e8:	e002      	b.n	80089f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80089ea:	f04f 33ff 	mov.w	r3, #4294967295
 80089ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80089f0:	687b      	ldr	r3, [r7, #4]
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	370c      	adds	r7, #12
 80089f6:	46bd      	mov	sp, r7
 80089f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fc:	4770      	bx	lr
 80089fe:	bf00      	nop
 8008a00:	200000a8 	.word	0x200000a8

08008a04 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b082      	sub	sp, #8
 8008a08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a0a:	f3ef 8305 	mrs	r3, IPSR
 8008a0e:	603b      	str	r3, [r7, #0]
  return(result);
 8008a10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d003      	beq.n	8008a1e <osKernelStart+0x1a>
    stat = osErrorISR;
 8008a16:	f06f 0305 	mvn.w	r3, #5
 8008a1a:	607b      	str	r3, [r7, #4]
 8008a1c:	e010      	b.n	8008a40 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008a1e:	4b0b      	ldr	r3, [pc, #44]	; (8008a4c <osKernelStart+0x48>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d109      	bne.n	8008a3a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008a26:	f7ff ffbf 	bl	80089a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008a2a:	4b08      	ldr	r3, [pc, #32]	; (8008a4c <osKernelStart+0x48>)
 8008a2c:	2202      	movs	r2, #2
 8008a2e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008a30:	f001 f8fa 	bl	8009c28 <vTaskStartScheduler>
      stat = osOK;
 8008a34:	2300      	movs	r3, #0
 8008a36:	607b      	str	r3, [r7, #4]
 8008a38:	e002      	b.n	8008a40 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008a3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008a3e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008a40:	687b      	ldr	r3, [r7, #4]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3708      	adds	r7, #8
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop
 8008a4c:	200000a8 	.word	0x200000a8

08008a50 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b08e      	sub	sp, #56	; 0x38
 8008a54:	af04      	add	r7, sp, #16
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a60:	f3ef 8305 	mrs	r3, IPSR
 8008a64:	617b      	str	r3, [r7, #20]
  return(result);
 8008a66:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d17e      	bne.n	8008b6a <osThreadNew+0x11a>
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d07b      	beq.n	8008b6a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008a72:	2380      	movs	r3, #128	; 0x80
 8008a74:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008a76:	2318      	movs	r3, #24
 8008a78:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a82:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d045      	beq.n	8008b16 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d002      	beq.n	8008a98 <osThreadNew+0x48>
        name = attr->name;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	699b      	ldr	r3, [r3, #24]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d002      	beq.n	8008aa6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d008      	beq.n	8008abe <osThreadNew+0x6e>
 8008aac:	69fb      	ldr	r3, [r7, #28]
 8008aae:	2b38      	cmp	r3, #56	; 0x38
 8008ab0:	d805      	bhi.n	8008abe <osThreadNew+0x6e>
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f003 0301 	and.w	r3, r3, #1
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d001      	beq.n	8008ac2 <osThreadNew+0x72>
        return (NULL);
 8008abe:	2300      	movs	r3, #0
 8008ac0:	e054      	b.n	8008b6c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	695b      	ldr	r3, [r3, #20]
 8008ace:	089b      	lsrs	r3, r3, #2
 8008ad0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d00e      	beq.n	8008af8 <osThreadNew+0xa8>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	68db      	ldr	r3, [r3, #12]
 8008ade:	2bbb      	cmp	r3, #187	; 0xbb
 8008ae0:	d90a      	bls.n	8008af8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d006      	beq.n	8008af8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d002      	beq.n	8008af8 <osThreadNew+0xa8>
        mem = 1;
 8008af2:	2301      	movs	r3, #1
 8008af4:	61bb      	str	r3, [r7, #24]
 8008af6:	e010      	b.n	8008b1a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	689b      	ldr	r3, [r3, #8]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d10c      	bne.n	8008b1a <osThreadNew+0xca>
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	2b00      	cmp	r3, #0
 8008b06:	d108      	bne.n	8008b1a <osThreadNew+0xca>
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	691b      	ldr	r3, [r3, #16]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d104      	bne.n	8008b1a <osThreadNew+0xca>
          mem = 0;
 8008b10:	2300      	movs	r3, #0
 8008b12:	61bb      	str	r3, [r7, #24]
 8008b14:	e001      	b.n	8008b1a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008b16:	2300      	movs	r3, #0
 8008b18:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008b1a:	69bb      	ldr	r3, [r7, #24]
 8008b1c:	2b01      	cmp	r3, #1
 8008b1e:	d110      	bne.n	8008b42 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008b24:	687a      	ldr	r2, [r7, #4]
 8008b26:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b28:	9202      	str	r2, [sp, #8]
 8008b2a:	9301      	str	r3, [sp, #4]
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	9300      	str	r3, [sp, #0]
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	6a3a      	ldr	r2, [r7, #32]
 8008b34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b36:	68f8      	ldr	r0, [r7, #12]
 8008b38:	f000 fe0c 	bl	8009754 <xTaskCreateStatic>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	613b      	str	r3, [r7, #16]
 8008b40:	e013      	b.n	8008b6a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008b42:	69bb      	ldr	r3, [r7, #24]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d110      	bne.n	8008b6a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008b48:	6a3b      	ldr	r3, [r7, #32]
 8008b4a:	b29a      	uxth	r2, r3
 8008b4c:	f107 0310 	add.w	r3, r7, #16
 8008b50:	9301      	str	r3, [sp, #4]
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	9300      	str	r3, [sp, #0]
 8008b56:	68bb      	ldr	r3, [r7, #8]
 8008b58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b5a:	68f8      	ldr	r0, [r7, #12]
 8008b5c:	f000 fe57 	bl	800980e <xTaskCreate>
 8008b60:	4603      	mov	r3, r0
 8008b62:	2b01      	cmp	r3, #1
 8008b64:	d001      	beq.n	8008b6a <osThreadNew+0x11a>
            hTask = NULL;
 8008b66:	2300      	movs	r3, #0
 8008b68:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008b6a:	693b      	ldr	r3, [r7, #16]
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	3728      	adds	r7, #40	; 0x28
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd80      	pop	{r7, pc}

08008b74 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b084      	sub	sp, #16
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b7c:	f3ef 8305 	mrs	r3, IPSR
 8008b80:	60bb      	str	r3, [r7, #8]
  return(result);
 8008b82:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d003      	beq.n	8008b90 <osDelay+0x1c>
    stat = osErrorISR;
 8008b88:	f06f 0305 	mvn.w	r3, #5
 8008b8c:	60fb      	str	r3, [r7, #12]
 8008b8e:	e007      	b.n	8008ba0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008b90:	2300      	movs	r3, #0
 8008b92:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d002      	beq.n	8008ba0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f001 f810 	bl	8009bc0 <vTaskDelay>
    }
  }

  return (stat);
 8008ba0:	68fb      	ldr	r3, [r7, #12]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3710      	adds	r7, #16
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
	...

08008bac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008bac:	b480      	push	{r7}
 8008bae:	b085      	sub	sp, #20
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	4a07      	ldr	r2, [pc, #28]	; (8008bd8 <vApplicationGetIdleTaskMemory+0x2c>)
 8008bbc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	4a06      	ldr	r2, [pc, #24]	; (8008bdc <vApplicationGetIdleTaskMemory+0x30>)
 8008bc2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2280      	movs	r2, #128	; 0x80
 8008bc8:	601a      	str	r2, [r3, #0]
}
 8008bca:	bf00      	nop
 8008bcc:	3714      	adds	r7, #20
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd4:	4770      	bx	lr
 8008bd6:	bf00      	nop
 8008bd8:	200000ac 	.word	0x200000ac
 8008bdc:	20000168 	.word	0x20000168

08008be0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008be0:	b480      	push	{r7}
 8008be2:	b085      	sub	sp, #20
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	4a07      	ldr	r2, [pc, #28]	; (8008c0c <vApplicationGetTimerTaskMemory+0x2c>)
 8008bf0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008bf2:	68bb      	ldr	r3, [r7, #8]
 8008bf4:	4a06      	ldr	r2, [pc, #24]	; (8008c10 <vApplicationGetTimerTaskMemory+0x30>)
 8008bf6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bfe:	601a      	str	r2, [r3, #0]
}
 8008c00:	bf00      	nop
 8008c02:	3714      	adds	r7, #20
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	20000368 	.word	0x20000368
 8008c10:	20000424 	.word	0x20000424

08008c14 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	f103 0208 	add.w	r2, r3, #8
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f04f 32ff 	mov.w	r2, #4294967295
 8008c2c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	f103 0208 	add.w	r2, r3, #8
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	f103 0208 	add.w	r2, r3, #8
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2200      	movs	r2, #0
 8008c46:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c48:	bf00      	nop
 8008c4a:	370c      	adds	r7, #12
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c54:	b480      	push	{r7}
 8008c56:	b083      	sub	sp, #12
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008c62:	bf00      	nop
 8008c64:	370c      	adds	r7, #12
 8008c66:	46bd      	mov	sp, r7
 8008c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6c:	4770      	bx	lr

08008c6e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c6e:	b480      	push	{r7}
 8008c70:	b085      	sub	sp, #20
 8008c72:	af00      	add	r7, sp, #0
 8008c74:	6078      	str	r0, [r7, #4]
 8008c76:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	685b      	ldr	r3, [r3, #4]
 8008c7c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	689a      	ldr	r2, [r3, #8]
 8008c88:	683b      	ldr	r3, [r7, #0]
 8008c8a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	683a      	ldr	r2, [r7, #0]
 8008c92:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	683a      	ldr	r2, [r7, #0]
 8008c98:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	687a      	ldr	r2, [r7, #4]
 8008c9e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	1c5a      	adds	r2, r3, #1
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	601a      	str	r2, [r3, #0]
}
 8008caa:	bf00      	nop
 8008cac:	3714      	adds	r7, #20
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb4:	4770      	bx	lr

08008cb6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cb6:	b480      	push	{r7}
 8008cb8:	b085      	sub	sp, #20
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ccc:	d103      	bne.n	8008cd6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	60fb      	str	r3, [r7, #12]
 8008cd4:	e00c      	b.n	8008cf0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	3308      	adds	r3, #8
 8008cda:	60fb      	str	r3, [r7, #12]
 8008cdc:	e002      	b.n	8008ce4 <vListInsert+0x2e>
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	60fb      	str	r3, [r7, #12]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68ba      	ldr	r2, [r7, #8]
 8008cec:	429a      	cmp	r2, r3
 8008cee:	d2f6      	bcs.n	8008cde <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	685a      	ldr	r2, [r3, #4]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	685b      	ldr	r3, [r3, #4]
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d00:	683b      	ldr	r3, [r7, #0]
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	683a      	ldr	r2, [r7, #0]
 8008d0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	1c5a      	adds	r2, r3, #1
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	601a      	str	r2, [r3, #0]
}
 8008d1c:	bf00      	nop
 8008d1e:	3714      	adds	r7, #20
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b085      	sub	sp, #20
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	687a      	ldr	r2, [r7, #4]
 8008d3c:	6892      	ldr	r2, [r2, #8]
 8008d3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	6852      	ldr	r2, [r2, #4]
 8008d48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d103      	bne.n	8008d5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	689a      	ldr	r2, [r3, #8]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	1e5a      	subs	r2, r3, #1
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	681b      	ldr	r3, [r3, #0]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3714      	adds	r7, #20
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
 8008d84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d10a      	bne.n	8008da6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d94:	f383 8811 	msr	BASEPRI, r3
 8008d98:	f3bf 8f6f 	isb	sy
 8008d9c:	f3bf 8f4f 	dsb	sy
 8008da0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008da2:	bf00      	nop
 8008da4:	e7fe      	b.n	8008da4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008da6:	f002 f8f5 	bl	800af94 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008db2:	68f9      	ldr	r1, [r7, #12]
 8008db4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008db6:	fb01 f303 	mul.w	r3, r1, r3
 8008dba:	441a      	add	r2, r3
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681a      	ldr	r2, [r3, #0]
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dd6:	3b01      	subs	r3, #1
 8008dd8:	68f9      	ldr	r1, [r7, #12]
 8008dda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008ddc:	fb01 f303 	mul.w	r3, r1, r3
 8008de0:	441a      	add	r2, r3
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	22ff      	movs	r2, #255	; 0xff
 8008dea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	22ff      	movs	r2, #255	; 0xff
 8008df2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d114      	bne.n	8008e26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	691b      	ldr	r3, [r3, #16]
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d01a      	beq.n	8008e3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	3310      	adds	r3, #16
 8008e08:	4618      	mov	r0, r3
 8008e0a:	f001 f9a7 	bl	800a15c <xTaskRemoveFromEventList>
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d012      	beq.n	8008e3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e14:	4b0c      	ldr	r3, [pc, #48]	; (8008e48 <xQueueGenericReset+0xcc>)
 8008e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e1a:	601a      	str	r2, [r3, #0]
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	f3bf 8f6f 	isb	sy
 8008e24:	e009      	b.n	8008e3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	3310      	adds	r3, #16
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7ff fef2 	bl	8008c14 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	3324      	adds	r3, #36	; 0x24
 8008e34:	4618      	mov	r0, r3
 8008e36:	f7ff feed 	bl	8008c14 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e3a:	f002 f8db 	bl	800aff4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e3e:	2301      	movs	r3, #1
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3710      	adds	r7, #16
 8008e44:	46bd      	mov	sp, r7
 8008e46:	bd80      	pop	{r7, pc}
 8008e48:	e000ed04 	.word	0xe000ed04

08008e4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b08e      	sub	sp, #56	; 0x38
 8008e50:	af02      	add	r7, sp, #8
 8008e52:	60f8      	str	r0, [r7, #12]
 8008e54:	60b9      	str	r1, [r7, #8]
 8008e56:	607a      	str	r2, [r7, #4]
 8008e58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d10a      	bne.n	8008e76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e64:	f383 8811 	msr	BASEPRI, r3
 8008e68:	f3bf 8f6f 	isb	sy
 8008e6c:	f3bf 8f4f 	dsb	sy
 8008e70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008e72:	bf00      	nop
 8008e74:	e7fe      	b.n	8008e74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008e76:	683b      	ldr	r3, [r7, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d10a      	bne.n	8008e92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e80:	f383 8811 	msr	BASEPRI, r3
 8008e84:	f3bf 8f6f 	isb	sy
 8008e88:	f3bf 8f4f 	dsb	sy
 8008e8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e8e:	bf00      	nop
 8008e90:	e7fe      	b.n	8008e90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d002      	beq.n	8008e9e <xQueueGenericCreateStatic+0x52>
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d001      	beq.n	8008ea2 <xQueueGenericCreateStatic+0x56>
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e000      	b.n	8008ea4 <xQueueGenericCreateStatic+0x58>
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10a      	bne.n	8008ebe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eac:	f383 8811 	msr	BASEPRI, r3
 8008eb0:	f3bf 8f6f 	isb	sy
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	623b      	str	r3, [r7, #32]
}
 8008eba:	bf00      	nop
 8008ebc:	e7fe      	b.n	8008ebc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d102      	bne.n	8008eca <xQueueGenericCreateStatic+0x7e>
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d101      	bne.n	8008ece <xQueueGenericCreateStatic+0x82>
 8008eca:	2301      	movs	r3, #1
 8008ecc:	e000      	b.n	8008ed0 <xQueueGenericCreateStatic+0x84>
 8008ece:	2300      	movs	r3, #0
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10a      	bne.n	8008eea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	61fb      	str	r3, [r7, #28]
}
 8008ee6:	bf00      	nop
 8008ee8:	e7fe      	b.n	8008ee8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008eea:	2350      	movs	r3, #80	; 0x50
 8008eec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	2b50      	cmp	r3, #80	; 0x50
 8008ef2:	d00a      	beq.n	8008f0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ef8:	f383 8811 	msr	BASEPRI, r3
 8008efc:	f3bf 8f6f 	isb	sy
 8008f00:	f3bf 8f4f 	dsb	sy
 8008f04:	61bb      	str	r3, [r7, #24]
}
 8008f06:	bf00      	nop
 8008f08:	e7fe      	b.n	8008f08 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f0a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008f10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d00d      	beq.n	8008f32 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	4613      	mov	r3, r2
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	68b9      	ldr	r1, [r7, #8]
 8008f2c:	68f8      	ldr	r0, [r7, #12]
 8008f2e:	f000 f805 	bl	8008f3c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008f34:	4618      	mov	r0, r3
 8008f36:	3730      	adds	r7, #48	; 0x30
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	bd80      	pop	{r7, pc}

08008f3c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	607a      	str	r2, [r7, #4]
 8008f48:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d103      	bne.n	8008f58 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	69ba      	ldr	r2, [r7, #24]
 8008f54:	601a      	str	r2, [r3, #0]
 8008f56:	e002      	b.n	8008f5e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008f58:	69bb      	ldr	r3, [r7, #24]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008f5e:	69bb      	ldr	r3, [r7, #24]
 8008f60:	68fa      	ldr	r2, [r7, #12]
 8008f62:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008f64:	69bb      	ldr	r3, [r7, #24]
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008f6a:	2101      	movs	r1, #1
 8008f6c:	69b8      	ldr	r0, [r7, #24]
 8008f6e:	f7ff ff05 	bl	8008d7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008f72:	69bb      	ldr	r3, [r7, #24]
 8008f74:	78fa      	ldrb	r2, [r7, #3]
 8008f76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008f7a:	bf00      	nop
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
	...

08008f84 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b08e      	sub	sp, #56	; 0x38
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	60f8      	str	r0, [r7, #12]
 8008f8c:	60b9      	str	r1, [r7, #8]
 8008f8e:	607a      	str	r2, [r7, #4]
 8008f90:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f92:	2300      	movs	r3, #0
 8008f94:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d10a      	bne.n	8008fb6 <xQueueGenericSend+0x32>
	__asm volatile
 8008fa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa4:	f383 8811 	msr	BASEPRI, r3
 8008fa8:	f3bf 8f6f 	isb	sy
 8008fac:	f3bf 8f4f 	dsb	sy
 8008fb0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008fb2:	bf00      	nop
 8008fb4:	e7fe      	b.n	8008fb4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d103      	bne.n	8008fc4 <xQueueGenericSend+0x40>
 8008fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d101      	bne.n	8008fc8 <xQueueGenericSend+0x44>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e000      	b.n	8008fca <xQueueGenericSend+0x46>
 8008fc8:	2300      	movs	r3, #0
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d10a      	bne.n	8008fe4 <xQueueGenericSend+0x60>
	__asm volatile
 8008fce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fd2:	f383 8811 	msr	BASEPRI, r3
 8008fd6:	f3bf 8f6f 	isb	sy
 8008fda:	f3bf 8f4f 	dsb	sy
 8008fde:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008fe0:	bf00      	nop
 8008fe2:	e7fe      	b.n	8008fe2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	2b02      	cmp	r3, #2
 8008fe8:	d103      	bne.n	8008ff2 <xQueueGenericSend+0x6e>
 8008fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d101      	bne.n	8008ff6 <xQueueGenericSend+0x72>
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	e000      	b.n	8008ff8 <xQueueGenericSend+0x74>
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d10a      	bne.n	8009012 <xQueueGenericSend+0x8e>
	__asm volatile
 8008ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009000:	f383 8811 	msr	BASEPRI, r3
 8009004:	f3bf 8f6f 	isb	sy
 8009008:	f3bf 8f4f 	dsb	sy
 800900c:	623b      	str	r3, [r7, #32]
}
 800900e:	bf00      	nop
 8009010:	e7fe      	b.n	8009010 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009012:	f001 fa65 	bl	800a4e0 <xTaskGetSchedulerState>
 8009016:	4603      	mov	r3, r0
 8009018:	2b00      	cmp	r3, #0
 800901a:	d102      	bne.n	8009022 <xQueueGenericSend+0x9e>
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	2b00      	cmp	r3, #0
 8009020:	d101      	bne.n	8009026 <xQueueGenericSend+0xa2>
 8009022:	2301      	movs	r3, #1
 8009024:	e000      	b.n	8009028 <xQueueGenericSend+0xa4>
 8009026:	2300      	movs	r3, #0
 8009028:	2b00      	cmp	r3, #0
 800902a:	d10a      	bne.n	8009042 <xQueueGenericSend+0xbe>
	__asm volatile
 800902c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009030:	f383 8811 	msr	BASEPRI, r3
 8009034:	f3bf 8f6f 	isb	sy
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	61fb      	str	r3, [r7, #28]
}
 800903e:	bf00      	nop
 8009040:	e7fe      	b.n	8009040 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009042:	f001 ffa7 	bl	800af94 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009048:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800904e:	429a      	cmp	r2, r3
 8009050:	d302      	bcc.n	8009058 <xQueueGenericSend+0xd4>
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	2b02      	cmp	r3, #2
 8009056:	d129      	bne.n	80090ac <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009058:	683a      	ldr	r2, [r7, #0]
 800905a:	68b9      	ldr	r1, [r7, #8]
 800905c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800905e:	f000 fa0b 	bl	8009478 <prvCopyDataToQueue>
 8009062:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009068:	2b00      	cmp	r3, #0
 800906a:	d010      	beq.n	800908e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800906c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800906e:	3324      	adds	r3, #36	; 0x24
 8009070:	4618      	mov	r0, r3
 8009072:	f001 f873 	bl	800a15c <xTaskRemoveFromEventList>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d013      	beq.n	80090a4 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800907c:	4b3f      	ldr	r3, [pc, #252]	; (800917c <xQueueGenericSend+0x1f8>)
 800907e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009082:	601a      	str	r2, [r3, #0]
 8009084:	f3bf 8f4f 	dsb	sy
 8009088:	f3bf 8f6f 	isb	sy
 800908c:	e00a      	b.n	80090a4 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800908e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009090:	2b00      	cmp	r3, #0
 8009092:	d007      	beq.n	80090a4 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009094:	4b39      	ldr	r3, [pc, #228]	; (800917c <xQueueGenericSend+0x1f8>)
 8009096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800909a:	601a      	str	r2, [r3, #0]
 800909c:	f3bf 8f4f 	dsb	sy
 80090a0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80090a4:	f001 ffa6 	bl	800aff4 <vPortExitCritical>
				return pdPASS;
 80090a8:	2301      	movs	r3, #1
 80090aa:	e063      	b.n	8009174 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d103      	bne.n	80090ba <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80090b2:	f001 ff9f 	bl	800aff4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80090b6:	2300      	movs	r3, #0
 80090b8:	e05c      	b.n	8009174 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80090ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d106      	bne.n	80090ce <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80090c0:	f107 0314 	add.w	r3, r7, #20
 80090c4:	4618      	mov	r0, r3
 80090c6:	f001 f8ad 	bl	800a224 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80090ca:	2301      	movs	r3, #1
 80090cc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80090ce:	f001 ff91 	bl	800aff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80090d2:	f000 fe19 	bl	8009d08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80090d6:	f001 ff5d 	bl	800af94 <vPortEnterCritical>
 80090da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80090e0:	b25b      	sxtb	r3, r3
 80090e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e6:	d103      	bne.n	80090f0 <xQueueGenericSend+0x16c>
 80090e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ea:	2200      	movs	r2, #0
 80090ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80090f6:	b25b      	sxtb	r3, r3
 80090f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090fc:	d103      	bne.n	8009106 <xQueueGenericSend+0x182>
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	2200      	movs	r2, #0
 8009102:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009106:	f001 ff75 	bl	800aff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800910a:	1d3a      	adds	r2, r7, #4
 800910c:	f107 0314 	add.w	r3, r7, #20
 8009110:	4611      	mov	r1, r2
 8009112:	4618      	mov	r0, r3
 8009114:	f001 f89c 	bl	800a250 <xTaskCheckForTimeOut>
 8009118:	4603      	mov	r3, r0
 800911a:	2b00      	cmp	r3, #0
 800911c:	d124      	bne.n	8009168 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800911e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009120:	f000 faa2 	bl	8009668 <prvIsQueueFull>
 8009124:	4603      	mov	r3, r0
 8009126:	2b00      	cmp	r3, #0
 8009128:	d018      	beq.n	800915c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	3310      	adds	r3, #16
 800912e:	687a      	ldr	r2, [r7, #4]
 8009130:	4611      	mov	r1, r2
 8009132:	4618      	mov	r0, r3
 8009134:	f000 ffc2 	bl	800a0bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009138:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800913a:	f000 fa2d 	bl	8009598 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800913e:	f000 fdf1 	bl	8009d24 <xTaskResumeAll>
 8009142:	4603      	mov	r3, r0
 8009144:	2b00      	cmp	r3, #0
 8009146:	f47f af7c 	bne.w	8009042 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800914a:	4b0c      	ldr	r3, [pc, #48]	; (800917c <xQueueGenericSend+0x1f8>)
 800914c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009150:	601a      	str	r2, [r3, #0]
 8009152:	f3bf 8f4f 	dsb	sy
 8009156:	f3bf 8f6f 	isb	sy
 800915a:	e772      	b.n	8009042 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800915c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800915e:	f000 fa1b 	bl	8009598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009162:	f000 fddf 	bl	8009d24 <xTaskResumeAll>
 8009166:	e76c      	b.n	8009042 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800916a:	f000 fa15 	bl	8009598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800916e:	f000 fdd9 	bl	8009d24 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009172:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009174:	4618      	mov	r0, r3
 8009176:	3738      	adds	r7, #56	; 0x38
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}
 800917c:	e000ed04 	.word	0xe000ed04

08009180 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b090      	sub	sp, #64	; 0x40
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
 800918c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009194:	2b00      	cmp	r3, #0
 8009196:	d10a      	bne.n	80091ae <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800919c:	f383 8811 	msr	BASEPRI, r3
 80091a0:	f3bf 8f6f 	isb	sy
 80091a4:	f3bf 8f4f 	dsb	sy
 80091a8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80091aa:	bf00      	nop
 80091ac:	e7fe      	b.n	80091ac <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d103      	bne.n	80091bc <xQueueGenericSendFromISR+0x3c>
 80091b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d101      	bne.n	80091c0 <xQueueGenericSendFromISR+0x40>
 80091bc:	2301      	movs	r3, #1
 80091be:	e000      	b.n	80091c2 <xQueueGenericSendFromISR+0x42>
 80091c0:	2300      	movs	r3, #0
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d10a      	bne.n	80091dc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80091c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ca:	f383 8811 	msr	BASEPRI, r3
 80091ce:	f3bf 8f6f 	isb	sy
 80091d2:	f3bf 8f4f 	dsb	sy
 80091d6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80091d8:	bf00      	nop
 80091da:	e7fe      	b.n	80091da <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d103      	bne.n	80091ea <xQueueGenericSendFromISR+0x6a>
 80091e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d101      	bne.n	80091ee <xQueueGenericSendFromISR+0x6e>
 80091ea:	2301      	movs	r3, #1
 80091ec:	e000      	b.n	80091f0 <xQueueGenericSendFromISR+0x70>
 80091ee:	2300      	movs	r3, #0
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d10a      	bne.n	800920a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80091f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f8:	f383 8811 	msr	BASEPRI, r3
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	623b      	str	r3, [r7, #32]
}
 8009206:	bf00      	nop
 8009208:	e7fe      	b.n	8009208 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800920a:	f001 ffa5 	bl	800b158 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800920e:	f3ef 8211 	mrs	r2, BASEPRI
 8009212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009216:	f383 8811 	msr	BASEPRI, r3
 800921a:	f3bf 8f6f 	isb	sy
 800921e:	f3bf 8f4f 	dsb	sy
 8009222:	61fa      	str	r2, [r7, #28]
 8009224:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009226:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009228:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800922a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800922c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800922e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009232:	429a      	cmp	r2, r3
 8009234:	d302      	bcc.n	800923c <xQueueGenericSendFromISR+0xbc>
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	2b02      	cmp	r3, #2
 800923a:	d12f      	bne.n	800929c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800923c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800924a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800924c:	683a      	ldr	r2, [r7, #0]
 800924e:	68b9      	ldr	r1, [r7, #8]
 8009250:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009252:	f000 f911 	bl	8009478 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009256:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800925a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800925e:	d112      	bne.n	8009286 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009264:	2b00      	cmp	r3, #0
 8009266:	d016      	beq.n	8009296 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800926a:	3324      	adds	r3, #36	; 0x24
 800926c:	4618      	mov	r0, r3
 800926e:	f000 ff75 	bl	800a15c <xTaskRemoveFromEventList>
 8009272:	4603      	mov	r3, r0
 8009274:	2b00      	cmp	r3, #0
 8009276:	d00e      	beq.n	8009296 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00b      	beq.n	8009296 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2201      	movs	r2, #1
 8009282:	601a      	str	r2, [r3, #0]
 8009284:	e007      	b.n	8009296 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009286:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800928a:	3301      	adds	r3, #1
 800928c:	b2db      	uxtb	r3, r3
 800928e:	b25a      	sxtb	r2, r3
 8009290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009296:	2301      	movs	r3, #1
 8009298:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800929a:	e001      	b.n	80092a0 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800929c:	2300      	movs	r3, #0
 800929e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092a2:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80092aa:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80092ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3740      	adds	r7, #64	; 0x40
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
	...

080092b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b08c      	sub	sp, #48	; 0x30
 80092bc:	af00      	add	r7, sp, #0
 80092be:	60f8      	str	r0, [r7, #12]
 80092c0:	60b9      	str	r1, [r7, #8]
 80092c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80092c4:	2300      	movs	r3, #0
 80092c6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80092cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d10a      	bne.n	80092e8 <xQueueReceive+0x30>
	__asm volatile
 80092d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d6:	f383 8811 	msr	BASEPRI, r3
 80092da:	f3bf 8f6f 	isb	sy
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	623b      	str	r3, [r7, #32]
}
 80092e4:	bf00      	nop
 80092e6:	e7fe      	b.n	80092e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d103      	bne.n	80092f6 <xQueueReceive+0x3e>
 80092ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d101      	bne.n	80092fa <xQueueReceive+0x42>
 80092f6:	2301      	movs	r3, #1
 80092f8:	e000      	b.n	80092fc <xQueueReceive+0x44>
 80092fa:	2300      	movs	r3, #0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d10a      	bne.n	8009316 <xQueueReceive+0x5e>
	__asm volatile
 8009300:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009304:	f383 8811 	msr	BASEPRI, r3
 8009308:	f3bf 8f6f 	isb	sy
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	61fb      	str	r3, [r7, #28]
}
 8009312:	bf00      	nop
 8009314:	e7fe      	b.n	8009314 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009316:	f001 f8e3 	bl	800a4e0 <xTaskGetSchedulerState>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d102      	bne.n	8009326 <xQueueReceive+0x6e>
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d101      	bne.n	800932a <xQueueReceive+0x72>
 8009326:	2301      	movs	r3, #1
 8009328:	e000      	b.n	800932c <xQueueReceive+0x74>
 800932a:	2300      	movs	r3, #0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d10a      	bne.n	8009346 <xQueueReceive+0x8e>
	__asm volatile
 8009330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009334:	f383 8811 	msr	BASEPRI, r3
 8009338:	f3bf 8f6f 	isb	sy
 800933c:	f3bf 8f4f 	dsb	sy
 8009340:	61bb      	str	r3, [r7, #24]
}
 8009342:	bf00      	nop
 8009344:	e7fe      	b.n	8009344 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009346:	f001 fe25 	bl	800af94 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800934a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800934e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009352:	2b00      	cmp	r3, #0
 8009354:	d01f      	beq.n	8009396 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009356:	68b9      	ldr	r1, [r7, #8]
 8009358:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800935a:	f000 f8f7 	bl	800954c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800935e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009360:	1e5a      	subs	r2, r3, #1
 8009362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009364:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009368:	691b      	ldr	r3, [r3, #16]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00f      	beq.n	800938e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800936e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009370:	3310      	adds	r3, #16
 8009372:	4618      	mov	r0, r3
 8009374:	f000 fef2 	bl	800a15c <xTaskRemoveFromEventList>
 8009378:	4603      	mov	r3, r0
 800937a:	2b00      	cmp	r3, #0
 800937c:	d007      	beq.n	800938e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800937e:	4b3d      	ldr	r3, [pc, #244]	; (8009474 <xQueueReceive+0x1bc>)
 8009380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009384:	601a      	str	r2, [r3, #0]
 8009386:	f3bf 8f4f 	dsb	sy
 800938a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800938e:	f001 fe31 	bl	800aff4 <vPortExitCritical>
				return pdPASS;
 8009392:	2301      	movs	r3, #1
 8009394:	e069      	b.n	800946a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d103      	bne.n	80093a4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800939c:	f001 fe2a 	bl	800aff4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80093a0:	2300      	movs	r3, #0
 80093a2:	e062      	b.n	800946a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d106      	bne.n	80093b8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80093aa:	f107 0310 	add.w	r3, r7, #16
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 ff38 	bl	800a224 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80093b4:	2301      	movs	r3, #1
 80093b6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80093b8:	f001 fe1c 	bl	800aff4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80093bc:	f000 fca4 	bl	8009d08 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80093c0:	f001 fde8 	bl	800af94 <vPortEnterCritical>
 80093c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80093ca:	b25b      	sxtb	r3, r3
 80093cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093d0:	d103      	bne.n	80093da <xQueueReceive+0x122>
 80093d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093d4:	2200      	movs	r2, #0
 80093d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093e0:	b25b      	sxtb	r3, r3
 80093e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093e6:	d103      	bne.n	80093f0 <xQueueReceive+0x138>
 80093e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ea:	2200      	movs	r2, #0
 80093ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093f0:	f001 fe00 	bl	800aff4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80093f4:	1d3a      	adds	r2, r7, #4
 80093f6:	f107 0310 	add.w	r3, r7, #16
 80093fa:	4611      	mov	r1, r2
 80093fc:	4618      	mov	r0, r3
 80093fe:	f000 ff27 	bl	800a250 <xTaskCheckForTimeOut>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	d123      	bne.n	8009450 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009408:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800940a:	f000 f917 	bl	800963c <prvIsQueueEmpty>
 800940e:	4603      	mov	r3, r0
 8009410:	2b00      	cmp	r3, #0
 8009412:	d017      	beq.n	8009444 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009416:	3324      	adds	r3, #36	; 0x24
 8009418:	687a      	ldr	r2, [r7, #4]
 800941a:	4611      	mov	r1, r2
 800941c:	4618      	mov	r0, r3
 800941e:	f000 fe4d 	bl	800a0bc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009424:	f000 f8b8 	bl	8009598 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009428:	f000 fc7c 	bl	8009d24 <xTaskResumeAll>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d189      	bne.n	8009346 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009432:	4b10      	ldr	r3, [pc, #64]	; (8009474 <xQueueReceive+0x1bc>)
 8009434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009438:	601a      	str	r2, [r3, #0]
 800943a:	f3bf 8f4f 	dsb	sy
 800943e:	f3bf 8f6f 	isb	sy
 8009442:	e780      	b.n	8009346 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009444:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009446:	f000 f8a7 	bl	8009598 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800944a:	f000 fc6b 	bl	8009d24 <xTaskResumeAll>
 800944e:	e77a      	b.n	8009346 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009450:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009452:	f000 f8a1 	bl	8009598 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009456:	f000 fc65 	bl	8009d24 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800945a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800945c:	f000 f8ee 	bl	800963c <prvIsQueueEmpty>
 8009460:	4603      	mov	r3, r0
 8009462:	2b00      	cmp	r3, #0
 8009464:	f43f af6f 	beq.w	8009346 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009468:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800946a:	4618      	mov	r0, r3
 800946c:	3730      	adds	r7, #48	; 0x30
 800946e:	46bd      	mov	sp, r7
 8009470:	bd80      	pop	{r7, pc}
 8009472:	bf00      	nop
 8009474:	e000ed04 	.word	0xe000ed04

08009478 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009478:	b580      	push	{r7, lr}
 800947a:	b086      	sub	sp, #24
 800947c:	af00      	add	r7, sp, #0
 800947e:	60f8      	str	r0, [r7, #12]
 8009480:	60b9      	str	r1, [r7, #8]
 8009482:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009484:	2300      	movs	r3, #0
 8009486:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800948c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009492:	2b00      	cmp	r3, #0
 8009494:	d10d      	bne.n	80094b2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d14d      	bne.n	800953a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	4618      	mov	r0, r3
 80094a4:	f001 f83a 	bl	800a51c <xTaskPriorityDisinherit>
 80094a8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2200      	movs	r2, #0
 80094ae:	609a      	str	r2, [r3, #8]
 80094b0:	e043      	b.n	800953a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d119      	bne.n	80094ec <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6858      	ldr	r0, [r3, #4]
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094c0:	461a      	mov	r2, r3
 80094c2:	68b9      	ldr	r1, [r7, #8]
 80094c4:	f002 f89e 	bl	800b604 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	685a      	ldr	r2, [r3, #4]
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094d0:	441a      	add	r2, r3
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	685a      	ldr	r2, [r3, #4]
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	689b      	ldr	r3, [r3, #8]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d32b      	bcc.n	800953a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	605a      	str	r2, [r3, #4]
 80094ea:	e026      	b.n	800953a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	68d8      	ldr	r0, [r3, #12]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094f4:	461a      	mov	r2, r3
 80094f6:	68b9      	ldr	r1, [r7, #8]
 80094f8:	f002 f884 	bl	800b604 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	68da      	ldr	r2, [r3, #12]
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009504:	425b      	negs	r3, r3
 8009506:	441a      	add	r2, r3
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	68da      	ldr	r2, [r3, #12]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	429a      	cmp	r2, r3
 8009516:	d207      	bcs.n	8009528 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	689a      	ldr	r2, [r3, #8]
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009520:	425b      	negs	r3, r3
 8009522:	441a      	add	r2, r3
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2b02      	cmp	r3, #2
 800952c:	d105      	bne.n	800953a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	2b00      	cmp	r3, #0
 8009532:	d002      	beq.n	800953a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009534:	693b      	ldr	r3, [r7, #16]
 8009536:	3b01      	subs	r3, #1
 8009538:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	1c5a      	adds	r2, r3, #1
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009542:	697b      	ldr	r3, [r7, #20]
}
 8009544:	4618      	mov	r0, r3
 8009546:	3718      	adds	r7, #24
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955a:	2b00      	cmp	r3, #0
 800955c:	d018      	beq.n	8009590 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	68da      	ldr	r2, [r3, #12]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009566:	441a      	add	r2, r3
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	68da      	ldr	r2, [r3, #12]
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	689b      	ldr	r3, [r3, #8]
 8009574:	429a      	cmp	r2, r3
 8009576:	d303      	bcc.n	8009580 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681a      	ldr	r2, [r3, #0]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	68d9      	ldr	r1, [r3, #12]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009588:	461a      	mov	r2, r3
 800958a:	6838      	ldr	r0, [r7, #0]
 800958c:	f002 f83a 	bl	800b604 <memcpy>
	}
}
 8009590:	bf00      	nop
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80095a0:	f001 fcf8 	bl	800af94 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80095aa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095ac:	e011      	b.n	80095d2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d012      	beq.n	80095dc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	3324      	adds	r3, #36	; 0x24
 80095ba:	4618      	mov	r0, r3
 80095bc:	f000 fdce 	bl	800a15c <xTaskRemoveFromEventList>
 80095c0:	4603      	mov	r3, r0
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d001      	beq.n	80095ca <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80095c6:	f000 fea5 	bl	800a314 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80095ca:	7bfb      	ldrb	r3, [r7, #15]
 80095cc:	3b01      	subs	r3, #1
 80095ce:	b2db      	uxtb	r3, r3
 80095d0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80095d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	dce9      	bgt.n	80095ae <prvUnlockQueue+0x16>
 80095da:	e000      	b.n	80095de <prvUnlockQueue+0x46>
					break;
 80095dc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	22ff      	movs	r2, #255	; 0xff
 80095e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80095e6:	f001 fd05 	bl	800aff4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80095ea:	f001 fcd3 	bl	800af94 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80095f4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80095f6:	e011      	b.n	800961c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	691b      	ldr	r3, [r3, #16]
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d012      	beq.n	8009626 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	3310      	adds	r3, #16
 8009604:	4618      	mov	r0, r3
 8009606:	f000 fda9 	bl	800a15c <xTaskRemoveFromEventList>
 800960a:	4603      	mov	r3, r0
 800960c:	2b00      	cmp	r3, #0
 800960e:	d001      	beq.n	8009614 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009610:	f000 fe80 	bl	800a314 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009614:	7bbb      	ldrb	r3, [r7, #14]
 8009616:	3b01      	subs	r3, #1
 8009618:	b2db      	uxtb	r3, r3
 800961a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800961c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009620:	2b00      	cmp	r3, #0
 8009622:	dce9      	bgt.n	80095f8 <prvUnlockQueue+0x60>
 8009624:	e000      	b.n	8009628 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009626:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	22ff      	movs	r2, #255	; 0xff
 800962c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009630:	f001 fce0 	bl	800aff4 <vPortExitCritical>
}
 8009634:	bf00      	nop
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b084      	sub	sp, #16
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009644:	f001 fca6 	bl	800af94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964c:	2b00      	cmp	r3, #0
 800964e:	d102      	bne.n	8009656 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009650:	2301      	movs	r3, #1
 8009652:	60fb      	str	r3, [r7, #12]
 8009654:	e001      	b.n	800965a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009656:	2300      	movs	r3, #0
 8009658:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800965a:	f001 fccb 	bl	800aff4 <vPortExitCritical>

	return xReturn;
 800965e:	68fb      	ldr	r3, [r7, #12]
}
 8009660:	4618      	mov	r0, r3
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}

08009668 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b084      	sub	sp, #16
 800966c:	af00      	add	r7, sp, #0
 800966e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009670:	f001 fc90 	bl	800af94 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800967c:	429a      	cmp	r2, r3
 800967e:	d102      	bne.n	8009686 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009680:	2301      	movs	r3, #1
 8009682:	60fb      	str	r3, [r7, #12]
 8009684:	e001      	b.n	800968a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009686:	2300      	movs	r3, #0
 8009688:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800968a:	f001 fcb3 	bl	800aff4 <vPortExitCritical>

	return xReturn;
 800968e:	68fb      	ldr	r3, [r7, #12]
}
 8009690:	4618      	mov	r0, r3
 8009692:	3710      	adds	r7, #16
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}

08009698 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096a2:	2300      	movs	r3, #0
 80096a4:	60fb      	str	r3, [r7, #12]
 80096a6:	e014      	b.n	80096d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80096a8:	4a0f      	ldr	r2, [pc, #60]	; (80096e8 <vQueueAddToRegistry+0x50>)
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d10b      	bne.n	80096cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80096b4:	490c      	ldr	r1, [pc, #48]	; (80096e8 <vQueueAddToRegistry+0x50>)
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	683a      	ldr	r2, [r7, #0]
 80096ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80096be:	4a0a      	ldr	r2, [pc, #40]	; (80096e8 <vQueueAddToRegistry+0x50>)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	00db      	lsls	r3, r3, #3
 80096c4:	4413      	add	r3, r2
 80096c6:	687a      	ldr	r2, [r7, #4]
 80096c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80096ca:	e006      	b.n	80096da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096cc:	68fb      	ldr	r3, [r7, #12]
 80096ce:	3301      	adds	r3, #1
 80096d0:	60fb      	str	r3, [r7, #12]
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	2b07      	cmp	r3, #7
 80096d6:	d9e7      	bls.n	80096a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80096d8:	bf00      	nop
 80096da:	bf00      	nop
 80096dc:	3714      	adds	r7, #20
 80096de:	46bd      	mov	sp, r7
 80096e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e4:	4770      	bx	lr
 80096e6:	bf00      	nop
 80096e8:	20002038 	.word	0x20002038

080096ec <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b086      	sub	sp, #24
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	60f8      	str	r0, [r7, #12]
 80096f4:	60b9      	str	r1, [r7, #8]
 80096f6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80096fc:	f001 fc4a 	bl	800af94 <vPortEnterCritical>
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009706:	b25b      	sxtb	r3, r3
 8009708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800970c:	d103      	bne.n	8009716 <vQueueWaitForMessageRestricted+0x2a>
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	2200      	movs	r2, #0
 8009712:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009716:	697b      	ldr	r3, [r7, #20]
 8009718:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800971c:	b25b      	sxtb	r3, r3
 800971e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009722:	d103      	bne.n	800972c <vQueueWaitForMessageRestricted+0x40>
 8009724:	697b      	ldr	r3, [r7, #20]
 8009726:	2200      	movs	r2, #0
 8009728:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800972c:	f001 fc62 	bl	800aff4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009734:	2b00      	cmp	r3, #0
 8009736:	d106      	bne.n	8009746 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009738:	697b      	ldr	r3, [r7, #20]
 800973a:	3324      	adds	r3, #36	; 0x24
 800973c:	687a      	ldr	r2, [r7, #4]
 800973e:	68b9      	ldr	r1, [r7, #8]
 8009740:	4618      	mov	r0, r3
 8009742:	f000 fcdf 	bl	800a104 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009746:	6978      	ldr	r0, [r7, #20]
 8009748:	f7ff ff26 	bl	8009598 <prvUnlockQueue>
	}
 800974c:	bf00      	nop
 800974e:	3718      	adds	r7, #24
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}

08009754 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009754:	b580      	push	{r7, lr}
 8009756:	b08e      	sub	sp, #56	; 0x38
 8009758:	af04      	add	r7, sp, #16
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
 8009760:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8009762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009764:	2b00      	cmp	r3, #0
 8009766:	d10a      	bne.n	800977e <xTaskCreateStatic+0x2a>
	__asm volatile
 8009768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800976c:	f383 8811 	msr	BASEPRI, r3
 8009770:	f3bf 8f6f 	isb	sy
 8009774:	f3bf 8f4f 	dsb	sy
 8009778:	623b      	str	r3, [r7, #32]
}
 800977a:	bf00      	nop
 800977c:	e7fe      	b.n	800977c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800977e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009780:	2b00      	cmp	r3, #0
 8009782:	d10a      	bne.n	800979a <xTaskCreateStatic+0x46>
	__asm volatile
 8009784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009788:	f383 8811 	msr	BASEPRI, r3
 800978c:	f3bf 8f6f 	isb	sy
 8009790:	f3bf 8f4f 	dsb	sy
 8009794:	61fb      	str	r3, [r7, #28]
}
 8009796:	bf00      	nop
 8009798:	e7fe      	b.n	8009798 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800979a:	23bc      	movs	r3, #188	; 0xbc
 800979c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800979e:	693b      	ldr	r3, [r7, #16]
 80097a0:	2bbc      	cmp	r3, #188	; 0xbc
 80097a2:	d00a      	beq.n	80097ba <xTaskCreateStatic+0x66>
	__asm volatile
 80097a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097a8:	f383 8811 	msr	BASEPRI, r3
 80097ac:	f3bf 8f6f 	isb	sy
 80097b0:	f3bf 8f4f 	dsb	sy
 80097b4:	61bb      	str	r3, [r7, #24]
}
 80097b6:	bf00      	nop
 80097b8:	e7fe      	b.n	80097b8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80097ba:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80097bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d01e      	beq.n	8009800 <xTaskCreateStatic+0xac>
 80097c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d01b      	beq.n	8009800 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80097c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097ca:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097d0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80097d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d4:	2202      	movs	r2, #2
 80097d6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80097da:	2300      	movs	r3, #0
 80097dc:	9303      	str	r3, [sp, #12]
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	9302      	str	r3, [sp, #8]
 80097e2:	f107 0314 	add.w	r3, r7, #20
 80097e6:	9301      	str	r3, [sp, #4]
 80097e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ea:	9300      	str	r3, [sp, #0]
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	68b9      	ldr	r1, [r7, #8]
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f000 f850 	bl	8009898 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80097f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80097fa:	f000 f8f3 	bl	80099e4 <prvAddNewTaskToReadyList>
 80097fe:	e001      	b.n	8009804 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009800:	2300      	movs	r3, #0
 8009802:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009804:	697b      	ldr	r3, [r7, #20]
	}
 8009806:	4618      	mov	r0, r3
 8009808:	3728      	adds	r7, #40	; 0x28
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800980e:	b580      	push	{r7, lr}
 8009810:	b08c      	sub	sp, #48	; 0x30
 8009812:	af04      	add	r7, sp, #16
 8009814:	60f8      	str	r0, [r7, #12]
 8009816:	60b9      	str	r1, [r7, #8]
 8009818:	603b      	str	r3, [r7, #0]
 800981a:	4613      	mov	r3, r2
 800981c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800981e:	88fb      	ldrh	r3, [r7, #6]
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	4618      	mov	r0, r3
 8009824:	f001 fcd8 	bl	800b1d8 <pvPortMalloc>
 8009828:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800982a:	697b      	ldr	r3, [r7, #20]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d00e      	beq.n	800984e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009830:	20bc      	movs	r0, #188	; 0xbc
 8009832:	f001 fcd1 	bl	800b1d8 <pvPortMalloc>
 8009836:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	2b00      	cmp	r3, #0
 800983c:	d003      	beq.n	8009846 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	697a      	ldr	r2, [r7, #20]
 8009842:	631a      	str	r2, [r3, #48]	; 0x30
 8009844:	e005      	b.n	8009852 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009846:	6978      	ldr	r0, [r7, #20]
 8009848:	f001 fd92 	bl	800b370 <vPortFree>
 800984c:	e001      	b.n	8009852 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800984e:	2300      	movs	r3, #0
 8009850:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009852:	69fb      	ldr	r3, [r7, #28]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d017      	beq.n	8009888 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009858:	69fb      	ldr	r3, [r7, #28]
 800985a:	2200      	movs	r2, #0
 800985c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009860:	88fa      	ldrh	r2, [r7, #6]
 8009862:	2300      	movs	r3, #0
 8009864:	9303      	str	r3, [sp, #12]
 8009866:	69fb      	ldr	r3, [r7, #28]
 8009868:	9302      	str	r3, [sp, #8]
 800986a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800986c:	9301      	str	r3, [sp, #4]
 800986e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	68b9      	ldr	r1, [r7, #8]
 8009876:	68f8      	ldr	r0, [r7, #12]
 8009878:	f000 f80e 	bl	8009898 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800987c:	69f8      	ldr	r0, [r7, #28]
 800987e:	f000 f8b1 	bl	80099e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009882:	2301      	movs	r3, #1
 8009884:	61bb      	str	r3, [r7, #24]
 8009886:	e002      	b.n	800988e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009888:	f04f 33ff 	mov.w	r3, #4294967295
 800988c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800988e:	69bb      	ldr	r3, [r7, #24]
	}
 8009890:	4618      	mov	r0, r3
 8009892:	3720      	adds	r7, #32
 8009894:	46bd      	mov	sp, r7
 8009896:	bd80      	pop	{r7, pc}

08009898 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b088      	sub	sp, #32
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]
 80098a4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80098a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	461a      	mov	r2, r3
 80098b0:	21a5      	movs	r1, #165	; 0xa5
 80098b2:	f001 feb5 	bl	800b620 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80098b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80098c0:	3b01      	subs	r3, #1
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	4413      	add	r3, r2
 80098c6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80098c8:	69bb      	ldr	r3, [r7, #24]
 80098ca:	f023 0307 	bic.w	r3, r3, #7
 80098ce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	f003 0307 	and.w	r3, r3, #7
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d00a      	beq.n	80098f0 <prvInitialiseNewTask+0x58>
	__asm volatile
 80098da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	617b      	str	r3, [r7, #20]
}
 80098ec:	bf00      	nop
 80098ee:	e7fe      	b.n	80098ee <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d01f      	beq.n	8009936 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80098f6:	2300      	movs	r3, #0
 80098f8:	61fb      	str	r3, [r7, #28]
 80098fa:	e012      	b.n	8009922 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80098fc:	68ba      	ldr	r2, [r7, #8]
 80098fe:	69fb      	ldr	r3, [r7, #28]
 8009900:	4413      	add	r3, r2
 8009902:	7819      	ldrb	r1, [r3, #0]
 8009904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009906:	69fb      	ldr	r3, [r7, #28]
 8009908:	4413      	add	r3, r2
 800990a:	3334      	adds	r3, #52	; 0x34
 800990c:	460a      	mov	r2, r1
 800990e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009910:	68ba      	ldr	r2, [r7, #8]
 8009912:	69fb      	ldr	r3, [r7, #28]
 8009914:	4413      	add	r3, r2
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d006      	beq.n	800992a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800991c:	69fb      	ldr	r3, [r7, #28]
 800991e:	3301      	adds	r3, #1
 8009920:	61fb      	str	r3, [r7, #28]
 8009922:	69fb      	ldr	r3, [r7, #28]
 8009924:	2b0f      	cmp	r3, #15
 8009926:	d9e9      	bls.n	80098fc <prvInitialiseNewTask+0x64>
 8009928:	e000      	b.n	800992c <prvInitialiseNewTask+0x94>
			{
				break;
 800992a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800992c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800992e:	2200      	movs	r2, #0
 8009930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009934:	e003      	b.n	800993e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009938:	2200      	movs	r2, #0
 800993a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800993e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009940:	2b37      	cmp	r3, #55	; 0x37
 8009942:	d901      	bls.n	8009948 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009944:	2337      	movs	r3, #55	; 0x37
 8009946:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800994a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800994c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800994e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009952:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009956:	2200      	movs	r2, #0
 8009958:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800995a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995c:	3304      	adds	r3, #4
 800995e:	4618      	mov	r0, r3
 8009960:	f7ff f978 	bl	8008c54 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009966:	3318      	adds	r3, #24
 8009968:	4618      	mov	r0, r3
 800996a:	f7ff f973 	bl	8008c54 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800996e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009972:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009976:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800997a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800997e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009982:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009986:	2200      	movs	r2, #0
 8009988:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800998c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998e:	2200      	movs	r2, #0
 8009990:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009996:	3354      	adds	r3, #84	; 0x54
 8009998:	2260      	movs	r2, #96	; 0x60
 800999a:	2100      	movs	r1, #0
 800999c:	4618      	mov	r0, r3
 800999e:	f001 fe3f 	bl	800b620 <memset>
 80099a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a4:	4a0c      	ldr	r2, [pc, #48]	; (80099d8 <prvInitialiseNewTask+0x140>)
 80099a6:	659a      	str	r2, [r3, #88]	; 0x58
 80099a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099aa:	4a0c      	ldr	r2, [pc, #48]	; (80099dc <prvInitialiseNewTask+0x144>)
 80099ac:	65da      	str	r2, [r3, #92]	; 0x5c
 80099ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b0:	4a0b      	ldr	r2, [pc, #44]	; (80099e0 <prvInitialiseNewTask+0x148>)
 80099b2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80099b4:	683a      	ldr	r2, [r7, #0]
 80099b6:	68f9      	ldr	r1, [r7, #12]
 80099b8:	69b8      	ldr	r0, [r7, #24]
 80099ba:	f001 f9bf 	bl	800ad3c <pxPortInitialiseStack>
 80099be:	4602      	mov	r2, r0
 80099c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80099c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d002      	beq.n	80099d0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80099ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80099cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099d0:	bf00      	nop
 80099d2:	3720      	adds	r7, #32
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	0800ca7c 	.word	0x0800ca7c
 80099dc:	0800ca9c 	.word	0x0800ca9c
 80099e0:	0800ca5c 	.word	0x0800ca5c

080099e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b082      	sub	sp, #8
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80099ec:	f001 fad2 	bl	800af94 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80099f0:	4b2d      	ldr	r3, [pc, #180]	; (8009aa8 <prvAddNewTaskToReadyList+0xc4>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	3301      	adds	r3, #1
 80099f6:	4a2c      	ldr	r2, [pc, #176]	; (8009aa8 <prvAddNewTaskToReadyList+0xc4>)
 80099f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80099fa:	4b2c      	ldr	r3, [pc, #176]	; (8009aac <prvAddNewTaskToReadyList+0xc8>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d109      	bne.n	8009a16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a02:	4a2a      	ldr	r2, [pc, #168]	; (8009aac <prvAddNewTaskToReadyList+0xc8>)
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a08:	4b27      	ldr	r3, [pc, #156]	; (8009aa8 <prvAddNewTaskToReadyList+0xc4>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	2b01      	cmp	r3, #1
 8009a0e:	d110      	bne.n	8009a32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a10:	f000 fca4 	bl	800a35c <prvInitialiseTaskLists>
 8009a14:	e00d      	b.n	8009a32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a16:	4b26      	ldr	r3, [pc, #152]	; (8009ab0 <prvAddNewTaskToReadyList+0xcc>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d109      	bne.n	8009a32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a1e:	4b23      	ldr	r3, [pc, #140]	; (8009aac <prvAddNewTaskToReadyList+0xc8>)
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d802      	bhi.n	8009a32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a2c:	4a1f      	ldr	r2, [pc, #124]	; (8009aac <prvAddNewTaskToReadyList+0xc8>)
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a32:	4b20      	ldr	r3, [pc, #128]	; (8009ab4 <prvAddNewTaskToReadyList+0xd0>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	3301      	adds	r3, #1
 8009a38:	4a1e      	ldr	r2, [pc, #120]	; (8009ab4 <prvAddNewTaskToReadyList+0xd0>)
 8009a3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a3c:	4b1d      	ldr	r3, [pc, #116]	; (8009ab4 <prvAddNewTaskToReadyList+0xd0>)
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a48:	4b1b      	ldr	r3, [pc, #108]	; (8009ab8 <prvAddNewTaskToReadyList+0xd4>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	429a      	cmp	r2, r3
 8009a4e:	d903      	bls.n	8009a58 <prvAddNewTaskToReadyList+0x74>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a54:	4a18      	ldr	r2, [pc, #96]	; (8009ab8 <prvAddNewTaskToReadyList+0xd4>)
 8009a56:	6013      	str	r3, [r2, #0]
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	4413      	add	r3, r2
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	4a15      	ldr	r2, [pc, #84]	; (8009abc <prvAddNewTaskToReadyList+0xd8>)
 8009a66:	441a      	add	r2, r3
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	4619      	mov	r1, r3
 8009a6e:	4610      	mov	r0, r2
 8009a70:	f7ff f8fd 	bl	8008c6e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009a74:	f001 fabe 	bl	800aff4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009a78:	4b0d      	ldr	r3, [pc, #52]	; (8009ab0 <prvAddNewTaskToReadyList+0xcc>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d00e      	beq.n	8009a9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009a80:	4b0a      	ldr	r3, [pc, #40]	; (8009aac <prvAddNewTaskToReadyList+0xc8>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d207      	bcs.n	8009a9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009a8e:	4b0c      	ldr	r3, [pc, #48]	; (8009ac0 <prvAddNewTaskToReadyList+0xdc>)
 8009a90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a94:	601a      	str	r2, [r3, #0]
 8009a96:	f3bf 8f4f 	dsb	sy
 8009a9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a9e:	bf00      	nop
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	20000cf8 	.word	0x20000cf8
 8009aac:	20000824 	.word	0x20000824
 8009ab0:	20000d04 	.word	0x20000d04
 8009ab4:	20000d14 	.word	0x20000d14
 8009ab8:	20000d00 	.word	0x20000d00
 8009abc:	20000828 	.word	0x20000828
 8009ac0:	e000ed04 	.word	0xe000ed04

08009ac4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b08a      	sub	sp, #40	; 0x28
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d10a      	bne.n	8009aee <vTaskDelayUntil+0x2a>
	__asm volatile
 8009ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009adc:	f383 8811 	msr	BASEPRI, r3
 8009ae0:	f3bf 8f6f 	isb	sy
 8009ae4:	f3bf 8f4f 	dsb	sy
 8009ae8:	617b      	str	r3, [r7, #20]
}
 8009aea:	bf00      	nop
 8009aec:	e7fe      	b.n	8009aec <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d10a      	bne.n	8009b0a <vTaskDelayUntil+0x46>
	__asm volatile
 8009af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af8:	f383 8811 	msr	BASEPRI, r3
 8009afc:	f3bf 8f6f 	isb	sy
 8009b00:	f3bf 8f4f 	dsb	sy
 8009b04:	613b      	str	r3, [r7, #16]
}
 8009b06:	bf00      	nop
 8009b08:	e7fe      	b.n	8009b08 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8009b0a:	4b2a      	ldr	r3, [pc, #168]	; (8009bb4 <vTaskDelayUntil+0xf0>)
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d00a      	beq.n	8009b28 <vTaskDelayUntil+0x64>
	__asm volatile
 8009b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b16:	f383 8811 	msr	BASEPRI, r3
 8009b1a:	f3bf 8f6f 	isb	sy
 8009b1e:	f3bf 8f4f 	dsb	sy
 8009b22:	60fb      	str	r3, [r7, #12]
}
 8009b24:	bf00      	nop
 8009b26:	e7fe      	b.n	8009b26 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009b28:	f000 f8ee 	bl	8009d08 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009b2c:	4b22      	ldr	r3, [pc, #136]	; (8009bb8 <vTaskDelayUntil+0xf4>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	683a      	ldr	r2, [r7, #0]
 8009b38:	4413      	add	r3, r2
 8009b3a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	6a3a      	ldr	r2, [r7, #32]
 8009b42:	429a      	cmp	r2, r3
 8009b44:	d20b      	bcs.n	8009b5e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	69fa      	ldr	r2, [r7, #28]
 8009b4c:	429a      	cmp	r2, r3
 8009b4e:	d211      	bcs.n	8009b74 <vTaskDelayUntil+0xb0>
 8009b50:	69fa      	ldr	r2, [r7, #28]
 8009b52:	6a3b      	ldr	r3, [r7, #32]
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d90d      	bls.n	8009b74 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b5c:	e00a      	b.n	8009b74 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	69fa      	ldr	r2, [r7, #28]
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d303      	bcc.n	8009b70 <vTaskDelayUntil+0xac>
 8009b68:	69fa      	ldr	r2, [r7, #28]
 8009b6a:	6a3b      	ldr	r3, [r7, #32]
 8009b6c:	429a      	cmp	r2, r3
 8009b6e:	d901      	bls.n	8009b74 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009b70:	2301      	movs	r3, #1
 8009b72:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	69fa      	ldr	r2, [r7, #28]
 8009b78:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d006      	beq.n	8009b8e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009b80:	69fa      	ldr	r2, [r7, #28]
 8009b82:	6a3b      	ldr	r3, [r7, #32]
 8009b84:	1ad3      	subs	r3, r2, r3
 8009b86:	2100      	movs	r1, #0
 8009b88:	4618      	mov	r0, r3
 8009b8a:	f000 fd35 	bl	800a5f8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009b8e:	f000 f8c9 	bl	8009d24 <xTaskResumeAll>
 8009b92:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d107      	bne.n	8009baa <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8009b9a:	4b08      	ldr	r3, [pc, #32]	; (8009bbc <vTaskDelayUntil+0xf8>)
 8009b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	f3bf 8f4f 	dsb	sy
 8009ba6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009baa:	bf00      	nop
 8009bac:	3728      	adds	r7, #40	; 0x28
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}
 8009bb2:	bf00      	nop
 8009bb4:	20000d20 	.word	0x20000d20
 8009bb8:	20000cfc 	.word	0x20000cfc
 8009bbc:	e000ed04 	.word	0xe000ed04

08009bc0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009bc0:	b580      	push	{r7, lr}
 8009bc2:	b084      	sub	sp, #16
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d017      	beq.n	8009c02 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009bd2:	4b13      	ldr	r3, [pc, #76]	; (8009c20 <vTaskDelay+0x60>)
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d00a      	beq.n	8009bf0 <vTaskDelay+0x30>
	__asm volatile
 8009bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bde:	f383 8811 	msr	BASEPRI, r3
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	f3bf 8f4f 	dsb	sy
 8009bea:	60bb      	str	r3, [r7, #8]
}
 8009bec:	bf00      	nop
 8009bee:	e7fe      	b.n	8009bee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009bf0:	f000 f88a 	bl	8009d08 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009bf4:	2100      	movs	r1, #0
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f000 fcfe 	bl	800a5f8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009bfc:	f000 f892 	bl	8009d24 <xTaskResumeAll>
 8009c00:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d107      	bne.n	8009c18 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009c08:	4b06      	ldr	r3, [pc, #24]	; (8009c24 <vTaskDelay+0x64>)
 8009c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c0e:	601a      	str	r2, [r3, #0]
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009c18:	bf00      	nop
 8009c1a:	3710      	adds	r7, #16
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	bd80      	pop	{r7, pc}
 8009c20:	20000d20 	.word	0x20000d20
 8009c24:	e000ed04 	.word	0xe000ed04

08009c28 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b08a      	sub	sp, #40	; 0x28
 8009c2c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009c2e:	2300      	movs	r3, #0
 8009c30:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009c32:	2300      	movs	r3, #0
 8009c34:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009c36:	463a      	mov	r2, r7
 8009c38:	1d39      	adds	r1, r7, #4
 8009c3a:	f107 0308 	add.w	r3, r7, #8
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7fe ffb4 	bl	8008bac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009c44:	6839      	ldr	r1, [r7, #0]
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	68ba      	ldr	r2, [r7, #8]
 8009c4a:	9202      	str	r2, [sp, #8]
 8009c4c:	9301      	str	r3, [sp, #4]
 8009c4e:	2300      	movs	r3, #0
 8009c50:	9300      	str	r3, [sp, #0]
 8009c52:	2300      	movs	r3, #0
 8009c54:	460a      	mov	r2, r1
 8009c56:	4924      	ldr	r1, [pc, #144]	; (8009ce8 <vTaskStartScheduler+0xc0>)
 8009c58:	4824      	ldr	r0, [pc, #144]	; (8009cec <vTaskStartScheduler+0xc4>)
 8009c5a:	f7ff fd7b 	bl	8009754 <xTaskCreateStatic>
 8009c5e:	4603      	mov	r3, r0
 8009c60:	4a23      	ldr	r2, [pc, #140]	; (8009cf0 <vTaskStartScheduler+0xc8>)
 8009c62:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009c64:	4b22      	ldr	r3, [pc, #136]	; (8009cf0 <vTaskStartScheduler+0xc8>)
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d002      	beq.n	8009c72 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	617b      	str	r3, [r7, #20]
 8009c70:	e001      	b.n	8009c76 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009c72:	2300      	movs	r3, #0
 8009c74:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d102      	bne.n	8009c82 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009c7c:	f000 fd10 	bl	800a6a0 <xTimerCreateTimerTask>
 8009c80:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009c82:	697b      	ldr	r3, [r7, #20]
 8009c84:	2b01      	cmp	r3, #1
 8009c86:	d11b      	bne.n	8009cc0 <vTaskStartScheduler+0x98>
	__asm volatile
 8009c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8c:	f383 8811 	msr	BASEPRI, r3
 8009c90:	f3bf 8f6f 	isb	sy
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	613b      	str	r3, [r7, #16]
}
 8009c9a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c9c:	4b15      	ldr	r3, [pc, #84]	; (8009cf4 <vTaskStartScheduler+0xcc>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	3354      	adds	r3, #84	; 0x54
 8009ca2:	4a15      	ldr	r2, [pc, #84]	; (8009cf8 <vTaskStartScheduler+0xd0>)
 8009ca4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009ca6:	4b15      	ldr	r3, [pc, #84]	; (8009cfc <vTaskStartScheduler+0xd4>)
 8009ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8009cac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009cae:	4b14      	ldr	r3, [pc, #80]	; (8009d00 <vTaskStartScheduler+0xd8>)
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009cb4:	4b13      	ldr	r3, [pc, #76]	; (8009d04 <vTaskStartScheduler+0xdc>)
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009cba:	f001 f8c9 	bl	800ae50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009cbe:	e00e      	b.n	8009cde <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009cc0:	697b      	ldr	r3, [r7, #20]
 8009cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc6:	d10a      	bne.n	8009cde <vTaskStartScheduler+0xb6>
	__asm volatile
 8009cc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ccc:	f383 8811 	msr	BASEPRI, r3
 8009cd0:	f3bf 8f6f 	isb	sy
 8009cd4:	f3bf 8f4f 	dsb	sy
 8009cd8:	60fb      	str	r3, [r7, #12]
}
 8009cda:	bf00      	nop
 8009cdc:	e7fe      	b.n	8009cdc <vTaskStartScheduler+0xb4>
}
 8009cde:	bf00      	nop
 8009ce0:	3718      	adds	r7, #24
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	0800c984 	.word	0x0800c984
 8009cec:	0800a32d 	.word	0x0800a32d
 8009cf0:	20000d1c 	.word	0x20000d1c
 8009cf4:	20000824 	.word	0x20000824
 8009cf8:	20000020 	.word	0x20000020
 8009cfc:	20000d18 	.word	0x20000d18
 8009d00:	20000d04 	.word	0x20000d04
 8009d04:	20000cfc 	.word	0x20000cfc

08009d08 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009d08:	b480      	push	{r7}
 8009d0a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009d0c:	4b04      	ldr	r3, [pc, #16]	; (8009d20 <vTaskSuspendAll+0x18>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	3301      	adds	r3, #1
 8009d12:	4a03      	ldr	r2, [pc, #12]	; (8009d20 <vTaskSuspendAll+0x18>)
 8009d14:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009d16:	bf00      	nop
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr
 8009d20:	20000d20 	.word	0x20000d20

08009d24 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b084      	sub	sp, #16
 8009d28:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009d32:	4b42      	ldr	r3, [pc, #264]	; (8009e3c <xTaskResumeAll+0x118>)
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d10a      	bne.n	8009d50 <xTaskResumeAll+0x2c>
	__asm volatile
 8009d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d3e:	f383 8811 	msr	BASEPRI, r3
 8009d42:	f3bf 8f6f 	isb	sy
 8009d46:	f3bf 8f4f 	dsb	sy
 8009d4a:	603b      	str	r3, [r7, #0]
}
 8009d4c:	bf00      	nop
 8009d4e:	e7fe      	b.n	8009d4e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009d50:	f001 f920 	bl	800af94 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009d54:	4b39      	ldr	r3, [pc, #228]	; (8009e3c <xTaskResumeAll+0x118>)
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	3b01      	subs	r3, #1
 8009d5a:	4a38      	ldr	r2, [pc, #224]	; (8009e3c <xTaskResumeAll+0x118>)
 8009d5c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009d5e:	4b37      	ldr	r3, [pc, #220]	; (8009e3c <xTaskResumeAll+0x118>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d162      	bne.n	8009e2c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009d66:	4b36      	ldr	r3, [pc, #216]	; (8009e40 <xTaskResumeAll+0x11c>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d05e      	beq.n	8009e2c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d6e:	e02f      	b.n	8009dd0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d70:	4b34      	ldr	r3, [pc, #208]	; (8009e44 <xTaskResumeAll+0x120>)
 8009d72:	68db      	ldr	r3, [r3, #12]
 8009d74:	68db      	ldr	r3, [r3, #12]
 8009d76:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	3318      	adds	r3, #24
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	f7fe ffd3 	bl	8008d28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	3304      	adds	r3, #4
 8009d86:	4618      	mov	r0, r3
 8009d88:	f7fe ffce 	bl	8008d28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d90:	4b2d      	ldr	r3, [pc, #180]	; (8009e48 <xTaskResumeAll+0x124>)
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	429a      	cmp	r2, r3
 8009d96:	d903      	bls.n	8009da0 <xTaskResumeAll+0x7c>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9c:	4a2a      	ldr	r2, [pc, #168]	; (8009e48 <xTaskResumeAll+0x124>)
 8009d9e:	6013      	str	r3, [r2, #0]
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da4:	4613      	mov	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4413      	add	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4a27      	ldr	r2, [pc, #156]	; (8009e4c <xTaskResumeAll+0x128>)
 8009dae:	441a      	add	r2, r3
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	3304      	adds	r3, #4
 8009db4:	4619      	mov	r1, r3
 8009db6:	4610      	mov	r0, r2
 8009db8:	f7fe ff59 	bl	8008c6e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dc0:	4b23      	ldr	r3, [pc, #140]	; (8009e50 <xTaskResumeAll+0x12c>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc6:	429a      	cmp	r2, r3
 8009dc8:	d302      	bcc.n	8009dd0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009dca:	4b22      	ldr	r3, [pc, #136]	; (8009e54 <xTaskResumeAll+0x130>)
 8009dcc:	2201      	movs	r2, #1
 8009dce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009dd0:	4b1c      	ldr	r3, [pc, #112]	; (8009e44 <xTaskResumeAll+0x120>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1cb      	bne.n	8009d70 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d001      	beq.n	8009de2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009dde:	f000 fb5f 	bl	800a4a0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009de2:	4b1d      	ldr	r3, [pc, #116]	; (8009e58 <xTaskResumeAll+0x134>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d010      	beq.n	8009e10 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009dee:	f000 f847 	bl	8009e80 <xTaskIncrementTick>
 8009df2:	4603      	mov	r3, r0
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d002      	beq.n	8009dfe <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009df8:	4b16      	ldr	r3, [pc, #88]	; (8009e54 <xTaskResumeAll+0x130>)
 8009dfa:	2201      	movs	r2, #1
 8009dfc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	3b01      	subs	r3, #1
 8009e02:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2b00      	cmp	r3, #0
 8009e08:	d1f1      	bne.n	8009dee <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009e0a:	4b13      	ldr	r3, [pc, #76]	; (8009e58 <xTaskResumeAll+0x134>)
 8009e0c:	2200      	movs	r2, #0
 8009e0e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009e10:	4b10      	ldr	r3, [pc, #64]	; (8009e54 <xTaskResumeAll+0x130>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d009      	beq.n	8009e2c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009e1c:	4b0f      	ldr	r3, [pc, #60]	; (8009e5c <xTaskResumeAll+0x138>)
 8009e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e22:	601a      	str	r2, [r3, #0]
 8009e24:	f3bf 8f4f 	dsb	sy
 8009e28:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009e2c:	f001 f8e2 	bl	800aff4 <vPortExitCritical>

	return xAlreadyYielded;
 8009e30:	68bb      	ldr	r3, [r7, #8]
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3710      	adds	r7, #16
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}
 8009e3a:	bf00      	nop
 8009e3c:	20000d20 	.word	0x20000d20
 8009e40:	20000cf8 	.word	0x20000cf8
 8009e44:	20000cb8 	.word	0x20000cb8
 8009e48:	20000d00 	.word	0x20000d00
 8009e4c:	20000828 	.word	0x20000828
 8009e50:	20000824 	.word	0x20000824
 8009e54:	20000d0c 	.word	0x20000d0c
 8009e58:	20000d08 	.word	0x20000d08
 8009e5c:	e000ed04 	.word	0xe000ed04

08009e60 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009e66:	4b05      	ldr	r3, [pc, #20]	; (8009e7c <xTaskGetTickCount+0x1c>)
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009e6c:	687b      	ldr	r3, [r7, #4]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr
 8009e7a:	bf00      	nop
 8009e7c:	20000cfc 	.word	0x20000cfc

08009e80 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b086      	sub	sp, #24
 8009e84:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009e86:	2300      	movs	r3, #0
 8009e88:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e8a:	4b4f      	ldr	r3, [pc, #316]	; (8009fc8 <xTaskIncrementTick+0x148>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	f040 808f 	bne.w	8009fb2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e94:	4b4d      	ldr	r3, [pc, #308]	; (8009fcc <xTaskIncrementTick+0x14c>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	3301      	adds	r3, #1
 8009e9a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e9c:	4a4b      	ldr	r2, [pc, #300]	; (8009fcc <xTaskIncrementTick+0x14c>)
 8009e9e:	693b      	ldr	r3, [r7, #16]
 8009ea0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009ea2:	693b      	ldr	r3, [r7, #16]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d120      	bne.n	8009eea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009ea8:	4b49      	ldr	r3, [pc, #292]	; (8009fd0 <xTaskIncrementTick+0x150>)
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d00a      	beq.n	8009ec8 <xTaskIncrementTick+0x48>
	__asm volatile
 8009eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb6:	f383 8811 	msr	BASEPRI, r3
 8009eba:	f3bf 8f6f 	isb	sy
 8009ebe:	f3bf 8f4f 	dsb	sy
 8009ec2:	603b      	str	r3, [r7, #0]
}
 8009ec4:	bf00      	nop
 8009ec6:	e7fe      	b.n	8009ec6 <xTaskIncrementTick+0x46>
 8009ec8:	4b41      	ldr	r3, [pc, #260]	; (8009fd0 <xTaskIncrementTick+0x150>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	60fb      	str	r3, [r7, #12]
 8009ece:	4b41      	ldr	r3, [pc, #260]	; (8009fd4 <xTaskIncrementTick+0x154>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a3f      	ldr	r2, [pc, #252]	; (8009fd0 <xTaskIncrementTick+0x150>)
 8009ed4:	6013      	str	r3, [r2, #0]
 8009ed6:	4a3f      	ldr	r2, [pc, #252]	; (8009fd4 <xTaskIncrementTick+0x154>)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	6013      	str	r3, [r2, #0]
 8009edc:	4b3e      	ldr	r3, [pc, #248]	; (8009fd8 <xTaskIncrementTick+0x158>)
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	3301      	adds	r3, #1
 8009ee2:	4a3d      	ldr	r2, [pc, #244]	; (8009fd8 <xTaskIncrementTick+0x158>)
 8009ee4:	6013      	str	r3, [r2, #0]
 8009ee6:	f000 fadb 	bl	800a4a0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009eea:	4b3c      	ldr	r3, [pc, #240]	; (8009fdc <xTaskIncrementTick+0x15c>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	693a      	ldr	r2, [r7, #16]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d349      	bcc.n	8009f88 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ef4:	4b36      	ldr	r3, [pc, #216]	; (8009fd0 <xTaskIncrementTick+0x150>)
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d104      	bne.n	8009f08 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009efe:	4b37      	ldr	r3, [pc, #220]	; (8009fdc <xTaskIncrementTick+0x15c>)
 8009f00:	f04f 32ff 	mov.w	r2, #4294967295
 8009f04:	601a      	str	r2, [r3, #0]
					break;
 8009f06:	e03f      	b.n	8009f88 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f08:	4b31      	ldr	r3, [pc, #196]	; (8009fd0 <xTaskIncrementTick+0x150>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	68db      	ldr	r3, [r3, #12]
 8009f0e:	68db      	ldr	r3, [r3, #12]
 8009f10:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009f12:	68bb      	ldr	r3, [r7, #8]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009f18:	693a      	ldr	r2, [r7, #16]
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	429a      	cmp	r2, r3
 8009f1e:	d203      	bcs.n	8009f28 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009f20:	4a2e      	ldr	r2, [pc, #184]	; (8009fdc <xTaskIncrementTick+0x15c>)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009f26:	e02f      	b.n	8009f88 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009f28:	68bb      	ldr	r3, [r7, #8]
 8009f2a:	3304      	adds	r3, #4
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	f7fe fefb 	bl	8008d28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d004      	beq.n	8009f44 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009f3a:	68bb      	ldr	r3, [r7, #8]
 8009f3c:	3318      	adds	r3, #24
 8009f3e:	4618      	mov	r0, r3
 8009f40:	f7fe fef2 	bl	8008d28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009f44:	68bb      	ldr	r3, [r7, #8]
 8009f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f48:	4b25      	ldr	r3, [pc, #148]	; (8009fe0 <xTaskIncrementTick+0x160>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d903      	bls.n	8009f58 <xTaskIncrementTick+0xd8>
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f54:	4a22      	ldr	r2, [pc, #136]	; (8009fe0 <xTaskIncrementTick+0x160>)
 8009f56:	6013      	str	r3, [r2, #0]
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f5c:	4613      	mov	r3, r2
 8009f5e:	009b      	lsls	r3, r3, #2
 8009f60:	4413      	add	r3, r2
 8009f62:	009b      	lsls	r3, r3, #2
 8009f64:	4a1f      	ldr	r2, [pc, #124]	; (8009fe4 <xTaskIncrementTick+0x164>)
 8009f66:	441a      	add	r2, r3
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	3304      	adds	r3, #4
 8009f6c:	4619      	mov	r1, r3
 8009f6e:	4610      	mov	r0, r2
 8009f70:	f7fe fe7d 	bl	8008c6e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f78:	4b1b      	ldr	r3, [pc, #108]	; (8009fe8 <xTaskIncrementTick+0x168>)
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f7e:	429a      	cmp	r2, r3
 8009f80:	d3b8      	bcc.n	8009ef4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009f82:	2301      	movs	r3, #1
 8009f84:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f86:	e7b5      	b.n	8009ef4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f88:	4b17      	ldr	r3, [pc, #92]	; (8009fe8 <xTaskIncrementTick+0x168>)
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f8e:	4915      	ldr	r1, [pc, #84]	; (8009fe4 <xTaskIncrementTick+0x164>)
 8009f90:	4613      	mov	r3, r2
 8009f92:	009b      	lsls	r3, r3, #2
 8009f94:	4413      	add	r3, r2
 8009f96:	009b      	lsls	r3, r3, #2
 8009f98:	440b      	add	r3, r1
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	2b01      	cmp	r3, #1
 8009f9e:	d901      	bls.n	8009fa4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009fa4:	4b11      	ldr	r3, [pc, #68]	; (8009fec <xTaskIncrementTick+0x16c>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d007      	beq.n	8009fbc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009fac:	2301      	movs	r3, #1
 8009fae:	617b      	str	r3, [r7, #20]
 8009fb0:	e004      	b.n	8009fbc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009fb2:	4b0f      	ldr	r3, [pc, #60]	; (8009ff0 <xTaskIncrementTick+0x170>)
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	4a0d      	ldr	r2, [pc, #52]	; (8009ff0 <xTaskIncrementTick+0x170>)
 8009fba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009fbc:	697b      	ldr	r3, [r7, #20]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	3718      	adds	r7, #24
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	bd80      	pop	{r7, pc}
 8009fc6:	bf00      	nop
 8009fc8:	20000d20 	.word	0x20000d20
 8009fcc:	20000cfc 	.word	0x20000cfc
 8009fd0:	20000cb0 	.word	0x20000cb0
 8009fd4:	20000cb4 	.word	0x20000cb4
 8009fd8:	20000d10 	.word	0x20000d10
 8009fdc:	20000d18 	.word	0x20000d18
 8009fe0:	20000d00 	.word	0x20000d00
 8009fe4:	20000828 	.word	0x20000828
 8009fe8:	20000824 	.word	0x20000824
 8009fec:	20000d0c 	.word	0x20000d0c
 8009ff0:	20000d08 	.word	0x20000d08

08009ff4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009ff4:	b480      	push	{r7}
 8009ff6:	b085      	sub	sp, #20
 8009ff8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009ffa:	4b2a      	ldr	r3, [pc, #168]	; (800a0a4 <vTaskSwitchContext+0xb0>)
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d003      	beq.n	800a00a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a002:	4b29      	ldr	r3, [pc, #164]	; (800a0a8 <vTaskSwitchContext+0xb4>)
 800a004:	2201      	movs	r2, #1
 800a006:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a008:	e046      	b.n	800a098 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800a00a:	4b27      	ldr	r3, [pc, #156]	; (800a0a8 <vTaskSwitchContext+0xb4>)
 800a00c:	2200      	movs	r2, #0
 800a00e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a010:	4b26      	ldr	r3, [pc, #152]	; (800a0ac <vTaskSwitchContext+0xb8>)
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	60fb      	str	r3, [r7, #12]
 800a016:	e010      	b.n	800a03a <vTaskSwitchContext+0x46>
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d10a      	bne.n	800a034 <vTaskSwitchContext+0x40>
	__asm volatile
 800a01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a022:	f383 8811 	msr	BASEPRI, r3
 800a026:	f3bf 8f6f 	isb	sy
 800a02a:	f3bf 8f4f 	dsb	sy
 800a02e:	607b      	str	r3, [r7, #4]
}
 800a030:	bf00      	nop
 800a032:	e7fe      	b.n	800a032 <vTaskSwitchContext+0x3e>
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	3b01      	subs	r3, #1
 800a038:	60fb      	str	r3, [r7, #12]
 800a03a:	491d      	ldr	r1, [pc, #116]	; (800a0b0 <vTaskSwitchContext+0xbc>)
 800a03c:	68fa      	ldr	r2, [r7, #12]
 800a03e:	4613      	mov	r3, r2
 800a040:	009b      	lsls	r3, r3, #2
 800a042:	4413      	add	r3, r2
 800a044:	009b      	lsls	r3, r3, #2
 800a046:	440b      	add	r3, r1
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d0e4      	beq.n	800a018 <vTaskSwitchContext+0x24>
 800a04e:	68fa      	ldr	r2, [r7, #12]
 800a050:	4613      	mov	r3, r2
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	4413      	add	r3, r2
 800a056:	009b      	lsls	r3, r3, #2
 800a058:	4a15      	ldr	r2, [pc, #84]	; (800a0b0 <vTaskSwitchContext+0xbc>)
 800a05a:	4413      	add	r3, r2
 800a05c:	60bb      	str	r3, [r7, #8]
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	685b      	ldr	r3, [r3, #4]
 800a062:	685a      	ldr	r2, [r3, #4]
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	605a      	str	r2, [r3, #4]
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	685a      	ldr	r2, [r3, #4]
 800a06c:	68bb      	ldr	r3, [r7, #8]
 800a06e:	3308      	adds	r3, #8
 800a070:	429a      	cmp	r2, r3
 800a072:	d104      	bne.n	800a07e <vTaskSwitchContext+0x8a>
 800a074:	68bb      	ldr	r3, [r7, #8]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	685a      	ldr	r2, [r3, #4]
 800a07a:	68bb      	ldr	r3, [r7, #8]
 800a07c:	605a      	str	r2, [r3, #4]
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	685b      	ldr	r3, [r3, #4]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	4a0b      	ldr	r2, [pc, #44]	; (800a0b4 <vTaskSwitchContext+0xc0>)
 800a086:	6013      	str	r3, [r2, #0]
 800a088:	4a08      	ldr	r2, [pc, #32]	; (800a0ac <vTaskSwitchContext+0xb8>)
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a08e:	4b09      	ldr	r3, [pc, #36]	; (800a0b4 <vTaskSwitchContext+0xc0>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	3354      	adds	r3, #84	; 0x54
 800a094:	4a08      	ldr	r2, [pc, #32]	; (800a0b8 <vTaskSwitchContext+0xc4>)
 800a096:	6013      	str	r3, [r2, #0]
}
 800a098:	bf00      	nop
 800a09a:	3714      	adds	r7, #20
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr
 800a0a4:	20000d20 	.word	0x20000d20
 800a0a8:	20000d0c 	.word	0x20000d0c
 800a0ac:	20000d00 	.word	0x20000d00
 800a0b0:	20000828 	.word	0x20000828
 800a0b4:	20000824 	.word	0x20000824
 800a0b8:	20000020 	.word	0x20000020

0800a0bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b084      	sub	sp, #16
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
 800a0c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d10a      	bne.n	800a0e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d0:	f383 8811 	msr	BASEPRI, r3
 800a0d4:	f3bf 8f6f 	isb	sy
 800a0d8:	f3bf 8f4f 	dsb	sy
 800a0dc:	60fb      	str	r3, [r7, #12]
}
 800a0de:	bf00      	nop
 800a0e0:	e7fe      	b.n	800a0e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a0e2:	4b07      	ldr	r3, [pc, #28]	; (800a100 <vTaskPlaceOnEventList+0x44>)
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3318      	adds	r3, #24
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	6878      	ldr	r0, [r7, #4]
 800a0ec:	f7fe fde3 	bl	8008cb6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a0f0:	2101      	movs	r1, #1
 800a0f2:	6838      	ldr	r0, [r7, #0]
 800a0f4:	f000 fa80 	bl	800a5f8 <prvAddCurrentTaskToDelayedList>
}
 800a0f8:	bf00      	nop
 800a0fa:	3710      	adds	r7, #16
 800a0fc:	46bd      	mov	sp, r7
 800a0fe:	bd80      	pop	{r7, pc}
 800a100:	20000824 	.word	0x20000824

0800a104 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a104:	b580      	push	{r7, lr}
 800a106:	b086      	sub	sp, #24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	2b00      	cmp	r3, #0
 800a114:	d10a      	bne.n	800a12c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11a:	f383 8811 	msr	BASEPRI, r3
 800a11e:	f3bf 8f6f 	isb	sy
 800a122:	f3bf 8f4f 	dsb	sy
 800a126:	617b      	str	r3, [r7, #20]
}
 800a128:	bf00      	nop
 800a12a:	e7fe      	b.n	800a12a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a12c:	4b0a      	ldr	r3, [pc, #40]	; (800a158 <vTaskPlaceOnEventListRestricted+0x54>)
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	3318      	adds	r3, #24
 800a132:	4619      	mov	r1, r3
 800a134:	68f8      	ldr	r0, [r7, #12]
 800a136:	f7fe fd9a 	bl	8008c6e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d002      	beq.n	800a146 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a140:	f04f 33ff 	mov.w	r3, #4294967295
 800a144:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a146:	6879      	ldr	r1, [r7, #4]
 800a148:	68b8      	ldr	r0, [r7, #8]
 800a14a:	f000 fa55 	bl	800a5f8 <prvAddCurrentTaskToDelayedList>
	}
 800a14e:	bf00      	nop
 800a150:	3718      	adds	r7, #24
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}
 800a156:	bf00      	nop
 800a158:	20000824 	.word	0x20000824

0800a15c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a15c:	b580      	push	{r7, lr}
 800a15e:	b086      	sub	sp, #24
 800a160:	af00      	add	r7, sp, #0
 800a162:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	68db      	ldr	r3, [r3, #12]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a16c:	693b      	ldr	r3, [r7, #16]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d10a      	bne.n	800a188 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a172:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a176:	f383 8811 	msr	BASEPRI, r3
 800a17a:	f3bf 8f6f 	isb	sy
 800a17e:	f3bf 8f4f 	dsb	sy
 800a182:	60fb      	str	r3, [r7, #12]
}
 800a184:	bf00      	nop
 800a186:	e7fe      	b.n	800a186 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	3318      	adds	r3, #24
 800a18c:	4618      	mov	r0, r3
 800a18e:	f7fe fdcb 	bl	8008d28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a192:	4b1e      	ldr	r3, [pc, #120]	; (800a20c <xTaskRemoveFromEventList+0xb0>)
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d11d      	bne.n	800a1d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a19a:	693b      	ldr	r3, [r7, #16]
 800a19c:	3304      	adds	r3, #4
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f7fe fdc2 	bl	8008d28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a1a4:	693b      	ldr	r3, [r7, #16]
 800a1a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1a8:	4b19      	ldr	r3, [pc, #100]	; (800a210 <xTaskRemoveFromEventList+0xb4>)
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d903      	bls.n	800a1b8 <xTaskRemoveFromEventList+0x5c>
 800a1b0:	693b      	ldr	r3, [r7, #16]
 800a1b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1b4:	4a16      	ldr	r2, [pc, #88]	; (800a210 <xTaskRemoveFromEventList+0xb4>)
 800a1b6:	6013      	str	r3, [r2, #0]
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1bc:	4613      	mov	r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	4413      	add	r3, r2
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	4a13      	ldr	r2, [pc, #76]	; (800a214 <xTaskRemoveFromEventList+0xb8>)
 800a1c6:	441a      	add	r2, r3
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	3304      	adds	r3, #4
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	4610      	mov	r0, r2
 800a1d0:	f7fe fd4d 	bl	8008c6e <vListInsertEnd>
 800a1d4:	e005      	b.n	800a1e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	3318      	adds	r3, #24
 800a1da:	4619      	mov	r1, r3
 800a1dc:	480e      	ldr	r0, [pc, #56]	; (800a218 <xTaskRemoveFromEventList+0xbc>)
 800a1de:	f7fe fd46 	bl	8008c6e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a1e6:	4b0d      	ldr	r3, [pc, #52]	; (800a21c <xTaskRemoveFromEventList+0xc0>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a1ec:	429a      	cmp	r2, r3
 800a1ee:	d905      	bls.n	800a1fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a1f4:	4b0a      	ldr	r3, [pc, #40]	; (800a220 <xTaskRemoveFromEventList+0xc4>)
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	601a      	str	r2, [r3, #0]
 800a1fa:	e001      	b.n	800a200 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a200:	697b      	ldr	r3, [r7, #20]
}
 800a202:	4618      	mov	r0, r3
 800a204:	3718      	adds	r7, #24
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	20000d20 	.word	0x20000d20
 800a210:	20000d00 	.word	0x20000d00
 800a214:	20000828 	.word	0x20000828
 800a218:	20000cb8 	.word	0x20000cb8
 800a21c:	20000824 	.word	0x20000824
 800a220:	20000d0c 	.word	0x20000d0c

0800a224 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a22c:	4b06      	ldr	r3, [pc, #24]	; (800a248 <vTaskInternalSetTimeOutState+0x24>)
 800a22e:	681a      	ldr	r2, [r3, #0]
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a234:	4b05      	ldr	r3, [pc, #20]	; (800a24c <vTaskInternalSetTimeOutState+0x28>)
 800a236:	681a      	ldr	r2, [r3, #0]
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	605a      	str	r2, [r3, #4]
}
 800a23c:	bf00      	nop
 800a23e:	370c      	adds	r7, #12
 800a240:	46bd      	mov	sp, r7
 800a242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a246:	4770      	bx	lr
 800a248:	20000d10 	.word	0x20000d10
 800a24c:	20000cfc 	.word	0x20000cfc

0800a250 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b088      	sub	sp, #32
 800a254:	af00      	add	r7, sp, #0
 800a256:	6078      	str	r0, [r7, #4]
 800a258:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d10a      	bne.n	800a276 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a264:	f383 8811 	msr	BASEPRI, r3
 800a268:	f3bf 8f6f 	isb	sy
 800a26c:	f3bf 8f4f 	dsb	sy
 800a270:	613b      	str	r3, [r7, #16]
}
 800a272:	bf00      	nop
 800a274:	e7fe      	b.n	800a274 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d10a      	bne.n	800a292 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a27c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a280:	f383 8811 	msr	BASEPRI, r3
 800a284:	f3bf 8f6f 	isb	sy
 800a288:	f3bf 8f4f 	dsb	sy
 800a28c:	60fb      	str	r3, [r7, #12]
}
 800a28e:	bf00      	nop
 800a290:	e7fe      	b.n	800a290 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a292:	f000 fe7f 	bl	800af94 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a296:	4b1d      	ldr	r3, [pc, #116]	; (800a30c <xTaskCheckForTimeOut+0xbc>)
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	685b      	ldr	r3, [r3, #4]
 800a2a0:	69ba      	ldr	r2, [r7, #24]
 800a2a2:	1ad3      	subs	r3, r2, r3
 800a2a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2ae:	d102      	bne.n	800a2b6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	61fb      	str	r3, [r7, #28]
 800a2b4:	e023      	b.n	800a2fe <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	681a      	ldr	r2, [r3, #0]
 800a2ba:	4b15      	ldr	r3, [pc, #84]	; (800a310 <xTaskCheckForTimeOut+0xc0>)
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	429a      	cmp	r2, r3
 800a2c0:	d007      	beq.n	800a2d2 <xTaskCheckForTimeOut+0x82>
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	69ba      	ldr	r2, [r7, #24]
 800a2c8:	429a      	cmp	r2, r3
 800a2ca:	d302      	bcc.n	800a2d2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	61fb      	str	r3, [r7, #28]
 800a2d0:	e015      	b.n	800a2fe <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a2d2:	683b      	ldr	r3, [r7, #0]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	697a      	ldr	r2, [r7, #20]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d20b      	bcs.n	800a2f4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	697b      	ldr	r3, [r7, #20]
 800a2e2:	1ad2      	subs	r2, r2, r3
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a2e8:	6878      	ldr	r0, [r7, #4]
 800a2ea:	f7ff ff9b 	bl	800a224 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a2ee:	2300      	movs	r3, #0
 800a2f0:	61fb      	str	r3, [r7, #28]
 800a2f2:	e004      	b.n	800a2fe <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a2f4:	683b      	ldr	r3, [r7, #0]
 800a2f6:	2200      	movs	r2, #0
 800a2f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a2fe:	f000 fe79 	bl	800aff4 <vPortExitCritical>

	return xReturn;
 800a302:	69fb      	ldr	r3, [r7, #28]
}
 800a304:	4618      	mov	r0, r3
 800a306:	3720      	adds	r7, #32
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}
 800a30c:	20000cfc 	.word	0x20000cfc
 800a310:	20000d10 	.word	0x20000d10

0800a314 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a314:	b480      	push	{r7}
 800a316:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a318:	4b03      	ldr	r3, [pc, #12]	; (800a328 <vTaskMissedYield+0x14>)
 800a31a:	2201      	movs	r2, #1
 800a31c:	601a      	str	r2, [r3, #0]
}
 800a31e:	bf00      	nop
 800a320:	46bd      	mov	sp, r7
 800a322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a326:	4770      	bx	lr
 800a328:	20000d0c 	.word	0x20000d0c

0800a32c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a32c:	b580      	push	{r7, lr}
 800a32e:	b082      	sub	sp, #8
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a334:	f000 f852 	bl	800a3dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a338:	4b06      	ldr	r3, [pc, #24]	; (800a354 <prvIdleTask+0x28>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2b01      	cmp	r3, #1
 800a33e:	d9f9      	bls.n	800a334 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a340:	4b05      	ldr	r3, [pc, #20]	; (800a358 <prvIdleTask+0x2c>)
 800a342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a346:	601a      	str	r2, [r3, #0]
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a350:	e7f0      	b.n	800a334 <prvIdleTask+0x8>
 800a352:	bf00      	nop
 800a354:	20000828 	.word	0x20000828
 800a358:	e000ed04 	.word	0xe000ed04

0800a35c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	b082      	sub	sp, #8
 800a360:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a362:	2300      	movs	r3, #0
 800a364:	607b      	str	r3, [r7, #4]
 800a366:	e00c      	b.n	800a382 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a368:	687a      	ldr	r2, [r7, #4]
 800a36a:	4613      	mov	r3, r2
 800a36c:	009b      	lsls	r3, r3, #2
 800a36e:	4413      	add	r3, r2
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	4a12      	ldr	r2, [pc, #72]	; (800a3bc <prvInitialiseTaskLists+0x60>)
 800a374:	4413      	add	r3, r2
 800a376:	4618      	mov	r0, r3
 800a378:	f7fe fc4c 	bl	8008c14 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	3301      	adds	r3, #1
 800a380:	607b      	str	r3, [r7, #4]
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2b37      	cmp	r3, #55	; 0x37
 800a386:	d9ef      	bls.n	800a368 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a388:	480d      	ldr	r0, [pc, #52]	; (800a3c0 <prvInitialiseTaskLists+0x64>)
 800a38a:	f7fe fc43 	bl	8008c14 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a38e:	480d      	ldr	r0, [pc, #52]	; (800a3c4 <prvInitialiseTaskLists+0x68>)
 800a390:	f7fe fc40 	bl	8008c14 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a394:	480c      	ldr	r0, [pc, #48]	; (800a3c8 <prvInitialiseTaskLists+0x6c>)
 800a396:	f7fe fc3d 	bl	8008c14 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a39a:	480c      	ldr	r0, [pc, #48]	; (800a3cc <prvInitialiseTaskLists+0x70>)
 800a39c:	f7fe fc3a 	bl	8008c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a3a0:	480b      	ldr	r0, [pc, #44]	; (800a3d0 <prvInitialiseTaskLists+0x74>)
 800a3a2:	f7fe fc37 	bl	8008c14 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a3a6:	4b0b      	ldr	r3, [pc, #44]	; (800a3d4 <prvInitialiseTaskLists+0x78>)
 800a3a8:	4a05      	ldr	r2, [pc, #20]	; (800a3c0 <prvInitialiseTaskLists+0x64>)
 800a3aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a3ac:	4b0a      	ldr	r3, [pc, #40]	; (800a3d8 <prvInitialiseTaskLists+0x7c>)
 800a3ae:	4a05      	ldr	r2, [pc, #20]	; (800a3c4 <prvInitialiseTaskLists+0x68>)
 800a3b0:	601a      	str	r2, [r3, #0]
}
 800a3b2:	bf00      	nop
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	20000828 	.word	0x20000828
 800a3c0:	20000c88 	.word	0x20000c88
 800a3c4:	20000c9c 	.word	0x20000c9c
 800a3c8:	20000cb8 	.word	0x20000cb8
 800a3cc:	20000ccc 	.word	0x20000ccc
 800a3d0:	20000ce4 	.word	0x20000ce4
 800a3d4:	20000cb0 	.word	0x20000cb0
 800a3d8:	20000cb4 	.word	0x20000cb4

0800a3dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a3dc:	b580      	push	{r7, lr}
 800a3de:	b082      	sub	sp, #8
 800a3e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3e2:	e019      	b.n	800a418 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a3e4:	f000 fdd6 	bl	800af94 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3e8:	4b10      	ldr	r3, [pc, #64]	; (800a42c <prvCheckTasksWaitingTermination+0x50>)
 800a3ea:	68db      	ldr	r3, [r3, #12]
 800a3ec:	68db      	ldr	r3, [r3, #12]
 800a3ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	3304      	adds	r3, #4
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	f7fe fc97 	bl	8008d28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a3fa:	4b0d      	ldr	r3, [pc, #52]	; (800a430 <prvCheckTasksWaitingTermination+0x54>)
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	3b01      	subs	r3, #1
 800a400:	4a0b      	ldr	r2, [pc, #44]	; (800a430 <prvCheckTasksWaitingTermination+0x54>)
 800a402:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a404:	4b0b      	ldr	r3, [pc, #44]	; (800a434 <prvCheckTasksWaitingTermination+0x58>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	3b01      	subs	r3, #1
 800a40a:	4a0a      	ldr	r2, [pc, #40]	; (800a434 <prvCheckTasksWaitingTermination+0x58>)
 800a40c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a40e:	f000 fdf1 	bl	800aff4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a412:	6878      	ldr	r0, [r7, #4]
 800a414:	f000 f810 	bl	800a438 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a418:	4b06      	ldr	r3, [pc, #24]	; (800a434 <prvCheckTasksWaitingTermination+0x58>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d1e1      	bne.n	800a3e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a420:	bf00      	nop
 800a422:	bf00      	nop
 800a424:	3708      	adds	r7, #8
 800a426:	46bd      	mov	sp, r7
 800a428:	bd80      	pop	{r7, pc}
 800a42a:	bf00      	nop
 800a42c:	20000ccc 	.word	0x20000ccc
 800a430:	20000cf8 	.word	0x20000cf8
 800a434:	20000ce0 	.word	0x20000ce0

0800a438 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	3354      	adds	r3, #84	; 0x54
 800a444:	4618      	mov	r0, r3
 800a446:	f001 f95b 	bl	800b700 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a450:	2b00      	cmp	r3, #0
 800a452:	d108      	bne.n	800a466 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a458:	4618      	mov	r0, r3
 800a45a:	f000 ff89 	bl	800b370 <vPortFree>
				vPortFree( pxTCB );
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f000 ff86 	bl	800b370 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a464:	e018      	b.n	800a498 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d103      	bne.n	800a478 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 ff7d 	bl	800b370 <vPortFree>
	}
 800a476:	e00f      	b.n	800a498 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a47e:	2b02      	cmp	r3, #2
 800a480:	d00a      	beq.n	800a498 <prvDeleteTCB+0x60>
	__asm volatile
 800a482:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a486:	f383 8811 	msr	BASEPRI, r3
 800a48a:	f3bf 8f6f 	isb	sy
 800a48e:	f3bf 8f4f 	dsb	sy
 800a492:	60fb      	str	r3, [r7, #12]
}
 800a494:	bf00      	nop
 800a496:	e7fe      	b.n	800a496 <prvDeleteTCB+0x5e>
	}
 800a498:	bf00      	nop
 800a49a:	3710      	adds	r7, #16
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}

0800a4a0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4a6:	4b0c      	ldr	r3, [pc, #48]	; (800a4d8 <prvResetNextTaskUnblockTime+0x38>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d104      	bne.n	800a4ba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a4b0:	4b0a      	ldr	r3, [pc, #40]	; (800a4dc <prvResetNextTaskUnblockTime+0x3c>)
 800a4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800a4b6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a4b8:	e008      	b.n	800a4cc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4ba:	4b07      	ldr	r3, [pc, #28]	; (800a4d8 <prvResetNextTaskUnblockTime+0x38>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	68db      	ldr	r3, [r3, #12]
 800a4c0:	68db      	ldr	r3, [r3, #12]
 800a4c2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	4a04      	ldr	r2, [pc, #16]	; (800a4dc <prvResetNextTaskUnblockTime+0x3c>)
 800a4ca:	6013      	str	r3, [r2, #0]
}
 800a4cc:	bf00      	nop
 800a4ce:	370c      	adds	r7, #12
 800a4d0:	46bd      	mov	sp, r7
 800a4d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d6:	4770      	bx	lr
 800a4d8:	20000cb0 	.word	0x20000cb0
 800a4dc:	20000d18 	.word	0x20000d18

0800a4e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b083      	sub	sp, #12
 800a4e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a4e6:	4b0b      	ldr	r3, [pc, #44]	; (800a514 <xTaskGetSchedulerState+0x34>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d102      	bne.n	800a4f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	607b      	str	r3, [r7, #4]
 800a4f2:	e008      	b.n	800a506 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a4f4:	4b08      	ldr	r3, [pc, #32]	; (800a518 <xTaskGetSchedulerState+0x38>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d102      	bne.n	800a502 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a4fc:	2302      	movs	r3, #2
 800a4fe:	607b      	str	r3, [r7, #4]
 800a500:	e001      	b.n	800a506 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a502:	2300      	movs	r3, #0
 800a504:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a506:	687b      	ldr	r3, [r7, #4]
	}
 800a508:	4618      	mov	r0, r3
 800a50a:	370c      	adds	r7, #12
 800a50c:	46bd      	mov	sp, r7
 800a50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a512:	4770      	bx	lr
 800a514:	20000d04 	.word	0x20000d04
 800a518:	20000d20 	.word	0x20000d20

0800a51c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b086      	sub	sp, #24
 800a520:	af00      	add	r7, sp, #0
 800a522:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a528:	2300      	movs	r3, #0
 800a52a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d056      	beq.n	800a5e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a532:	4b2e      	ldr	r3, [pc, #184]	; (800a5ec <xTaskPriorityDisinherit+0xd0>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	693a      	ldr	r2, [r7, #16]
 800a538:	429a      	cmp	r2, r3
 800a53a:	d00a      	beq.n	800a552 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a53c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a540:	f383 8811 	msr	BASEPRI, r3
 800a544:	f3bf 8f6f 	isb	sy
 800a548:	f3bf 8f4f 	dsb	sy
 800a54c:	60fb      	str	r3, [r7, #12]
}
 800a54e:	bf00      	nop
 800a550:	e7fe      	b.n	800a550 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a556:	2b00      	cmp	r3, #0
 800a558:	d10a      	bne.n	800a570 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a55e:	f383 8811 	msr	BASEPRI, r3
 800a562:	f3bf 8f6f 	isb	sy
 800a566:	f3bf 8f4f 	dsb	sy
 800a56a:	60bb      	str	r3, [r7, #8]
}
 800a56c:	bf00      	nop
 800a56e:	e7fe      	b.n	800a56e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a570:	693b      	ldr	r3, [r7, #16]
 800a572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a574:	1e5a      	subs	r2, r3, #1
 800a576:	693b      	ldr	r3, [r7, #16]
 800a578:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a57a:	693b      	ldr	r3, [r7, #16]
 800a57c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a582:	429a      	cmp	r2, r3
 800a584:	d02c      	beq.n	800a5e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a586:	693b      	ldr	r3, [r7, #16]
 800a588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d128      	bne.n	800a5e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a58e:	693b      	ldr	r3, [r7, #16]
 800a590:	3304      	adds	r3, #4
 800a592:	4618      	mov	r0, r3
 800a594:	f7fe fbc8 	bl	8008d28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a59c:	693b      	ldr	r3, [r7, #16]
 800a59e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a5a0:	693b      	ldr	r3, [r7, #16]
 800a5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a5a8:	693b      	ldr	r3, [r7, #16]
 800a5aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a5ac:	693b      	ldr	r3, [r7, #16]
 800a5ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5b0:	4b0f      	ldr	r3, [pc, #60]	; (800a5f0 <xTaskPriorityDisinherit+0xd4>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d903      	bls.n	800a5c0 <xTaskPriorityDisinherit+0xa4>
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5bc:	4a0c      	ldr	r2, [pc, #48]	; (800a5f0 <xTaskPriorityDisinherit+0xd4>)
 800a5be:	6013      	str	r3, [r2, #0]
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5c4:	4613      	mov	r3, r2
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	4413      	add	r3, r2
 800a5ca:	009b      	lsls	r3, r3, #2
 800a5cc:	4a09      	ldr	r2, [pc, #36]	; (800a5f4 <xTaskPriorityDisinherit+0xd8>)
 800a5ce:	441a      	add	r2, r3
 800a5d0:	693b      	ldr	r3, [r7, #16]
 800a5d2:	3304      	adds	r3, #4
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	4610      	mov	r0, r2
 800a5d8:	f7fe fb49 	bl	8008c6e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a5e0:	697b      	ldr	r3, [r7, #20]
	}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3718      	adds	r7, #24
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}
 800a5ea:	bf00      	nop
 800a5ec:	20000824 	.word	0x20000824
 800a5f0:	20000d00 	.word	0x20000d00
 800a5f4:	20000828 	.word	0x20000828

0800a5f8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b084      	sub	sp, #16
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	6078      	str	r0, [r7, #4]
 800a600:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a602:	4b21      	ldr	r3, [pc, #132]	; (800a688 <prvAddCurrentTaskToDelayedList+0x90>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a608:	4b20      	ldr	r3, [pc, #128]	; (800a68c <prvAddCurrentTaskToDelayedList+0x94>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	3304      	adds	r3, #4
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fe fb8a 	bl	8008d28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a61a:	d10a      	bne.n	800a632 <prvAddCurrentTaskToDelayedList+0x3a>
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d007      	beq.n	800a632 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a622:	4b1a      	ldr	r3, [pc, #104]	; (800a68c <prvAddCurrentTaskToDelayedList+0x94>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	3304      	adds	r3, #4
 800a628:	4619      	mov	r1, r3
 800a62a:	4819      	ldr	r0, [pc, #100]	; (800a690 <prvAddCurrentTaskToDelayedList+0x98>)
 800a62c:	f7fe fb1f 	bl	8008c6e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a630:	e026      	b.n	800a680 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a632:	68fa      	ldr	r2, [r7, #12]
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	4413      	add	r3, r2
 800a638:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a63a:	4b14      	ldr	r3, [pc, #80]	; (800a68c <prvAddCurrentTaskToDelayedList+0x94>)
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	68ba      	ldr	r2, [r7, #8]
 800a640:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a642:	68ba      	ldr	r2, [r7, #8]
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	429a      	cmp	r2, r3
 800a648:	d209      	bcs.n	800a65e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a64a:	4b12      	ldr	r3, [pc, #72]	; (800a694 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a64c:	681a      	ldr	r2, [r3, #0]
 800a64e:	4b0f      	ldr	r3, [pc, #60]	; (800a68c <prvAddCurrentTaskToDelayedList+0x94>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	3304      	adds	r3, #4
 800a654:	4619      	mov	r1, r3
 800a656:	4610      	mov	r0, r2
 800a658:	f7fe fb2d 	bl	8008cb6 <vListInsert>
}
 800a65c:	e010      	b.n	800a680 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a65e:	4b0e      	ldr	r3, [pc, #56]	; (800a698 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a660:	681a      	ldr	r2, [r3, #0]
 800a662:	4b0a      	ldr	r3, [pc, #40]	; (800a68c <prvAddCurrentTaskToDelayedList+0x94>)
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	3304      	adds	r3, #4
 800a668:	4619      	mov	r1, r3
 800a66a:	4610      	mov	r0, r2
 800a66c:	f7fe fb23 	bl	8008cb6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a670:	4b0a      	ldr	r3, [pc, #40]	; (800a69c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68ba      	ldr	r2, [r7, #8]
 800a676:	429a      	cmp	r2, r3
 800a678:	d202      	bcs.n	800a680 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a67a:	4a08      	ldr	r2, [pc, #32]	; (800a69c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	6013      	str	r3, [r2, #0]
}
 800a680:	bf00      	nop
 800a682:	3710      	adds	r7, #16
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}
 800a688:	20000cfc 	.word	0x20000cfc
 800a68c:	20000824 	.word	0x20000824
 800a690:	20000ce4 	.word	0x20000ce4
 800a694:	20000cb4 	.word	0x20000cb4
 800a698:	20000cb0 	.word	0x20000cb0
 800a69c:	20000d18 	.word	0x20000d18

0800a6a0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b08a      	sub	sp, #40	; 0x28
 800a6a4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a6aa:	f000 fb07 	bl	800acbc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a6ae:	4b1c      	ldr	r3, [pc, #112]	; (800a720 <xTimerCreateTimerTask+0x80>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d021      	beq.n	800a6fa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a6b6:	2300      	movs	r3, #0
 800a6b8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a6be:	1d3a      	adds	r2, r7, #4
 800a6c0:	f107 0108 	add.w	r1, r7, #8
 800a6c4:	f107 030c 	add.w	r3, r7, #12
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f7fe fa89 	bl	8008be0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a6ce:	6879      	ldr	r1, [r7, #4]
 800a6d0:	68bb      	ldr	r3, [r7, #8]
 800a6d2:	68fa      	ldr	r2, [r7, #12]
 800a6d4:	9202      	str	r2, [sp, #8]
 800a6d6:	9301      	str	r3, [sp, #4]
 800a6d8:	2302      	movs	r3, #2
 800a6da:	9300      	str	r3, [sp, #0]
 800a6dc:	2300      	movs	r3, #0
 800a6de:	460a      	mov	r2, r1
 800a6e0:	4910      	ldr	r1, [pc, #64]	; (800a724 <xTimerCreateTimerTask+0x84>)
 800a6e2:	4811      	ldr	r0, [pc, #68]	; (800a728 <xTimerCreateTimerTask+0x88>)
 800a6e4:	f7ff f836 	bl	8009754 <xTaskCreateStatic>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	4a10      	ldr	r2, [pc, #64]	; (800a72c <xTimerCreateTimerTask+0x8c>)
 800a6ec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a6ee:	4b0f      	ldr	r3, [pc, #60]	; (800a72c <xTimerCreateTimerTask+0x8c>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d001      	beq.n	800a6fa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a6f6:	2301      	movs	r3, #1
 800a6f8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d10a      	bne.n	800a716 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a700:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a704:	f383 8811 	msr	BASEPRI, r3
 800a708:	f3bf 8f6f 	isb	sy
 800a70c:	f3bf 8f4f 	dsb	sy
 800a710:	613b      	str	r3, [r7, #16]
}
 800a712:	bf00      	nop
 800a714:	e7fe      	b.n	800a714 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a716:	697b      	ldr	r3, [r7, #20]
}
 800a718:	4618      	mov	r0, r3
 800a71a:	3718      	adds	r7, #24
 800a71c:	46bd      	mov	sp, r7
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	20000d54 	.word	0x20000d54
 800a724:	0800c98c 	.word	0x0800c98c
 800a728:	0800a865 	.word	0x0800a865
 800a72c:	20000d58 	.word	0x20000d58

0800a730 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b08a      	sub	sp, #40	; 0x28
 800a734:	af00      	add	r7, sp, #0
 800a736:	60f8      	str	r0, [r7, #12]
 800a738:	60b9      	str	r1, [r7, #8]
 800a73a:	607a      	str	r2, [r7, #4]
 800a73c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a73e:	2300      	movs	r3, #0
 800a740:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	2b00      	cmp	r3, #0
 800a746:	d10a      	bne.n	800a75e <xTimerGenericCommand+0x2e>
	__asm volatile
 800a748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a74c:	f383 8811 	msr	BASEPRI, r3
 800a750:	f3bf 8f6f 	isb	sy
 800a754:	f3bf 8f4f 	dsb	sy
 800a758:	623b      	str	r3, [r7, #32]
}
 800a75a:	bf00      	nop
 800a75c:	e7fe      	b.n	800a75c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a75e:	4b1a      	ldr	r3, [pc, #104]	; (800a7c8 <xTimerGenericCommand+0x98>)
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	2b00      	cmp	r3, #0
 800a764:	d02a      	beq.n	800a7bc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a772:	68bb      	ldr	r3, [r7, #8]
 800a774:	2b05      	cmp	r3, #5
 800a776:	dc18      	bgt.n	800a7aa <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a778:	f7ff feb2 	bl	800a4e0 <xTaskGetSchedulerState>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b02      	cmp	r3, #2
 800a780:	d109      	bne.n	800a796 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a782:	4b11      	ldr	r3, [pc, #68]	; (800a7c8 <xTimerGenericCommand+0x98>)
 800a784:	6818      	ldr	r0, [r3, #0]
 800a786:	f107 0110 	add.w	r1, r7, #16
 800a78a:	2300      	movs	r3, #0
 800a78c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a78e:	f7fe fbf9 	bl	8008f84 <xQueueGenericSend>
 800a792:	6278      	str	r0, [r7, #36]	; 0x24
 800a794:	e012      	b.n	800a7bc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a796:	4b0c      	ldr	r3, [pc, #48]	; (800a7c8 <xTimerGenericCommand+0x98>)
 800a798:	6818      	ldr	r0, [r3, #0]
 800a79a:	f107 0110 	add.w	r1, r7, #16
 800a79e:	2300      	movs	r3, #0
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f7fe fbef 	bl	8008f84 <xQueueGenericSend>
 800a7a6:	6278      	str	r0, [r7, #36]	; 0x24
 800a7a8:	e008      	b.n	800a7bc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a7aa:	4b07      	ldr	r3, [pc, #28]	; (800a7c8 <xTimerGenericCommand+0x98>)
 800a7ac:	6818      	ldr	r0, [r3, #0]
 800a7ae:	f107 0110 	add.w	r1, r7, #16
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	683a      	ldr	r2, [r7, #0]
 800a7b6:	f7fe fce3 	bl	8009180 <xQueueGenericSendFromISR>
 800a7ba:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a7be:	4618      	mov	r0, r3
 800a7c0:	3728      	adds	r7, #40	; 0x28
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	20000d54 	.word	0x20000d54

0800a7cc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b088      	sub	sp, #32
 800a7d0:	af02      	add	r7, sp, #8
 800a7d2:	6078      	str	r0, [r7, #4]
 800a7d4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a7d6:	4b22      	ldr	r3, [pc, #136]	; (800a860 <prvProcessExpiredTimer+0x94>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	68db      	ldr	r3, [r3, #12]
 800a7de:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	3304      	adds	r3, #4
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f7fe fa9f 	bl	8008d28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a7ea:	697b      	ldr	r3, [r7, #20]
 800a7ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7f0:	f003 0304 	and.w	r3, r3, #4
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d022      	beq.n	800a83e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	699a      	ldr	r2, [r3, #24]
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	18d1      	adds	r1, r2, r3
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	683a      	ldr	r2, [r7, #0]
 800a804:	6978      	ldr	r0, [r7, #20]
 800a806:	f000 f8d1 	bl	800a9ac <prvInsertTimerInActiveList>
 800a80a:	4603      	mov	r3, r0
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d01f      	beq.n	800a850 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a810:	2300      	movs	r3, #0
 800a812:	9300      	str	r3, [sp, #0]
 800a814:	2300      	movs	r3, #0
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	2100      	movs	r1, #0
 800a81a:	6978      	ldr	r0, [r7, #20]
 800a81c:	f7ff ff88 	bl	800a730 <xTimerGenericCommand>
 800a820:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a822:	693b      	ldr	r3, [r7, #16]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d113      	bne.n	800a850 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a82c:	f383 8811 	msr	BASEPRI, r3
 800a830:	f3bf 8f6f 	isb	sy
 800a834:	f3bf 8f4f 	dsb	sy
 800a838:	60fb      	str	r3, [r7, #12]
}
 800a83a:	bf00      	nop
 800a83c:	e7fe      	b.n	800a83c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a83e:	697b      	ldr	r3, [r7, #20]
 800a840:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a844:	f023 0301 	bic.w	r3, r3, #1
 800a848:	b2da      	uxtb	r2, r3
 800a84a:	697b      	ldr	r3, [r7, #20]
 800a84c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	6a1b      	ldr	r3, [r3, #32]
 800a854:	6978      	ldr	r0, [r7, #20]
 800a856:	4798      	blx	r3
}
 800a858:	bf00      	nop
 800a85a:	3718      	adds	r7, #24
 800a85c:	46bd      	mov	sp, r7
 800a85e:	bd80      	pop	{r7, pc}
 800a860:	20000d4c 	.word	0x20000d4c

0800a864 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b084      	sub	sp, #16
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a86c:	f107 0308 	add.w	r3, r7, #8
 800a870:	4618      	mov	r0, r3
 800a872:	f000 f857 	bl	800a924 <prvGetNextExpireTime>
 800a876:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a878:	68bb      	ldr	r3, [r7, #8]
 800a87a:	4619      	mov	r1, r3
 800a87c:	68f8      	ldr	r0, [r7, #12]
 800a87e:	f000 f803 	bl	800a888 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a882:	f000 f8d5 	bl	800aa30 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a886:	e7f1      	b.n	800a86c <prvTimerTask+0x8>

0800a888 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a892:	f7ff fa39 	bl	8009d08 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a896:	f107 0308 	add.w	r3, r7, #8
 800a89a:	4618      	mov	r0, r3
 800a89c:	f000 f866 	bl	800a96c <prvSampleTimeNow>
 800a8a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a8a2:	68bb      	ldr	r3, [r7, #8]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d130      	bne.n	800a90a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a8a8:	683b      	ldr	r3, [r7, #0]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d10a      	bne.n	800a8c4 <prvProcessTimerOrBlockTask+0x3c>
 800a8ae:	687a      	ldr	r2, [r7, #4]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	429a      	cmp	r2, r3
 800a8b4:	d806      	bhi.n	800a8c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a8b6:	f7ff fa35 	bl	8009d24 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a8ba:	68f9      	ldr	r1, [r7, #12]
 800a8bc:	6878      	ldr	r0, [r7, #4]
 800a8be:	f7ff ff85 	bl	800a7cc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a8c2:	e024      	b.n	800a90e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d008      	beq.n	800a8dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a8ca:	4b13      	ldr	r3, [pc, #76]	; (800a918 <prvProcessTimerOrBlockTask+0x90>)
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d101      	bne.n	800a8d8 <prvProcessTimerOrBlockTask+0x50>
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	e000      	b.n	800a8da <prvProcessTimerOrBlockTask+0x52>
 800a8d8:	2300      	movs	r3, #0
 800a8da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a8dc:	4b0f      	ldr	r3, [pc, #60]	; (800a91c <prvProcessTimerOrBlockTask+0x94>)
 800a8de:	6818      	ldr	r0, [r3, #0]
 800a8e0:	687a      	ldr	r2, [r7, #4]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	1ad3      	subs	r3, r2, r3
 800a8e6:	683a      	ldr	r2, [r7, #0]
 800a8e8:	4619      	mov	r1, r3
 800a8ea:	f7fe feff 	bl	80096ec <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a8ee:	f7ff fa19 	bl	8009d24 <xTaskResumeAll>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d10a      	bne.n	800a90e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a8f8:	4b09      	ldr	r3, [pc, #36]	; (800a920 <prvProcessTimerOrBlockTask+0x98>)
 800a8fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8fe:	601a      	str	r2, [r3, #0]
 800a900:	f3bf 8f4f 	dsb	sy
 800a904:	f3bf 8f6f 	isb	sy
}
 800a908:	e001      	b.n	800a90e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a90a:	f7ff fa0b 	bl	8009d24 <xTaskResumeAll>
}
 800a90e:	bf00      	nop
 800a910:	3710      	adds	r7, #16
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	20000d50 	.word	0x20000d50
 800a91c:	20000d54 	.word	0x20000d54
 800a920:	e000ed04 	.word	0xe000ed04

0800a924 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a92c:	4b0e      	ldr	r3, [pc, #56]	; (800a968 <prvGetNextExpireTime+0x44>)
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d101      	bne.n	800a93a <prvGetNextExpireTime+0x16>
 800a936:	2201      	movs	r2, #1
 800a938:	e000      	b.n	800a93c <prvGetNextExpireTime+0x18>
 800a93a:	2200      	movs	r2, #0
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d105      	bne.n	800a954 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a948:	4b07      	ldr	r3, [pc, #28]	; (800a968 <prvGetNextExpireTime+0x44>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	68db      	ldr	r3, [r3, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	60fb      	str	r3, [r7, #12]
 800a952:	e001      	b.n	800a958 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a954:	2300      	movs	r3, #0
 800a956:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a958:	68fb      	ldr	r3, [r7, #12]
}
 800a95a:	4618      	mov	r0, r3
 800a95c:	3714      	adds	r7, #20
 800a95e:	46bd      	mov	sp, r7
 800a960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a964:	4770      	bx	lr
 800a966:	bf00      	nop
 800a968:	20000d4c 	.word	0x20000d4c

0800a96c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a974:	f7ff fa74 	bl	8009e60 <xTaskGetTickCount>
 800a978:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a97a:	4b0b      	ldr	r3, [pc, #44]	; (800a9a8 <prvSampleTimeNow+0x3c>)
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	68fa      	ldr	r2, [r7, #12]
 800a980:	429a      	cmp	r2, r3
 800a982:	d205      	bcs.n	800a990 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a984:	f000 f936 	bl	800abf4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	2201      	movs	r2, #1
 800a98c:	601a      	str	r2, [r3, #0]
 800a98e:	e002      	b.n	800a996 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2200      	movs	r2, #0
 800a994:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a996:	4a04      	ldr	r2, [pc, #16]	; (800a9a8 <prvSampleTimeNow+0x3c>)
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a99c:	68fb      	ldr	r3, [r7, #12]
}
 800a99e:	4618      	mov	r0, r3
 800a9a0:	3710      	adds	r7, #16
 800a9a2:	46bd      	mov	sp, r7
 800a9a4:	bd80      	pop	{r7, pc}
 800a9a6:	bf00      	nop
 800a9a8:	20000d5c 	.word	0x20000d5c

0800a9ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a9ac:	b580      	push	{r7, lr}
 800a9ae:	b086      	sub	sp, #24
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	60f8      	str	r0, [r7, #12]
 800a9b4:	60b9      	str	r1, [r7, #8]
 800a9b6:	607a      	str	r2, [r7, #4]
 800a9b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	68ba      	ldr	r2, [r7, #8]
 800a9c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	68fa      	ldr	r2, [r7, #12]
 800a9c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a9ca:	68ba      	ldr	r2, [r7, #8]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	429a      	cmp	r2, r3
 800a9d0:	d812      	bhi.n	800a9f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	1ad2      	subs	r2, r2, r3
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	699b      	ldr	r3, [r3, #24]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d302      	bcc.n	800a9e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a9e0:	2301      	movs	r3, #1
 800a9e2:	617b      	str	r3, [r7, #20]
 800a9e4:	e01b      	b.n	800aa1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a9e6:	4b10      	ldr	r3, [pc, #64]	; (800aa28 <prvInsertTimerInActiveList+0x7c>)
 800a9e8:	681a      	ldr	r2, [r3, #0]
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	3304      	adds	r3, #4
 800a9ee:	4619      	mov	r1, r3
 800a9f0:	4610      	mov	r0, r2
 800a9f2:	f7fe f960 	bl	8008cb6 <vListInsert>
 800a9f6:	e012      	b.n	800aa1e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a9f8:	687a      	ldr	r2, [r7, #4]
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	429a      	cmp	r2, r3
 800a9fe:	d206      	bcs.n	800aa0e <prvInsertTimerInActiveList+0x62>
 800aa00:	68ba      	ldr	r2, [r7, #8]
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d302      	bcc.n	800aa0e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800aa08:	2301      	movs	r3, #1
 800aa0a:	617b      	str	r3, [r7, #20]
 800aa0c:	e007      	b.n	800aa1e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa0e:	4b07      	ldr	r3, [pc, #28]	; (800aa2c <prvInsertTimerInActiveList+0x80>)
 800aa10:	681a      	ldr	r2, [r3, #0]
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	3304      	adds	r3, #4
 800aa16:	4619      	mov	r1, r3
 800aa18:	4610      	mov	r0, r2
 800aa1a:	f7fe f94c 	bl	8008cb6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800aa1e:	697b      	ldr	r3, [r7, #20]
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3718      	adds	r7, #24
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}
 800aa28:	20000d50 	.word	0x20000d50
 800aa2c:	20000d4c 	.word	0x20000d4c

0800aa30 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b08e      	sub	sp, #56	; 0x38
 800aa34:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa36:	e0ca      	b.n	800abce <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	da18      	bge.n	800aa70 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800aa3e:	1d3b      	adds	r3, r7, #4
 800aa40:	3304      	adds	r3, #4
 800aa42:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800aa44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d10a      	bne.n	800aa60 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800aa4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4e:	f383 8811 	msr	BASEPRI, r3
 800aa52:	f3bf 8f6f 	isb	sy
 800aa56:	f3bf 8f4f 	dsb	sy
 800aa5a:	61fb      	str	r3, [r7, #28]
}
 800aa5c:	bf00      	nop
 800aa5e:	e7fe      	b.n	800aa5e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800aa60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa66:	6850      	ldr	r0, [r2, #4]
 800aa68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa6a:	6892      	ldr	r2, [r2, #8]
 800aa6c:	4611      	mov	r1, r2
 800aa6e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	f2c0 80aa 	blt.w	800abcc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aa7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa7e:	695b      	ldr	r3, [r3, #20]
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d004      	beq.n	800aa8e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa86:	3304      	adds	r3, #4
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f7fe f94d 	bl	8008d28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa8e:	463b      	mov	r3, r7
 800aa90:	4618      	mov	r0, r3
 800aa92:	f7ff ff6b 	bl	800a96c <prvSampleTimeNow>
 800aa96:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2b09      	cmp	r3, #9
 800aa9c:	f200 8097 	bhi.w	800abce <prvProcessReceivedCommands+0x19e>
 800aaa0:	a201      	add	r2, pc, #4	; (adr r2, 800aaa8 <prvProcessReceivedCommands+0x78>)
 800aaa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aaa6:	bf00      	nop
 800aaa8:	0800aad1 	.word	0x0800aad1
 800aaac:	0800aad1 	.word	0x0800aad1
 800aab0:	0800aad1 	.word	0x0800aad1
 800aab4:	0800ab45 	.word	0x0800ab45
 800aab8:	0800ab59 	.word	0x0800ab59
 800aabc:	0800aba3 	.word	0x0800aba3
 800aac0:	0800aad1 	.word	0x0800aad1
 800aac4:	0800aad1 	.word	0x0800aad1
 800aac8:	0800ab45 	.word	0x0800ab45
 800aacc:	0800ab59 	.word	0x0800ab59
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aad6:	f043 0301 	orr.w	r3, r3, #1
 800aada:	b2da      	uxtb	r2, r3
 800aadc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aade:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae6:	699b      	ldr	r3, [r3, #24]
 800aae8:	18d1      	adds	r1, r2, r3
 800aaea:	68bb      	ldr	r3, [r7, #8]
 800aaec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaf0:	f7ff ff5c 	bl	800a9ac <prvInsertTimerInActiveList>
 800aaf4:	4603      	mov	r3, r0
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d069      	beq.n	800abce <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aafa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafc:	6a1b      	ldr	r3, [r3, #32]
 800aafe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab00:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab08:	f003 0304 	and.w	r3, r3, #4
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d05e      	beq.n	800abce <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ab10:	68ba      	ldr	r2, [r7, #8]
 800ab12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab14:	699b      	ldr	r3, [r3, #24]
 800ab16:	441a      	add	r2, r3
 800ab18:	2300      	movs	r3, #0
 800ab1a:	9300      	str	r3, [sp, #0]
 800ab1c:	2300      	movs	r3, #0
 800ab1e:	2100      	movs	r1, #0
 800ab20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab22:	f7ff fe05 	bl	800a730 <xTimerGenericCommand>
 800ab26:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ab28:	6a3b      	ldr	r3, [r7, #32]
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d14f      	bne.n	800abce <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800ab2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab32:	f383 8811 	msr	BASEPRI, r3
 800ab36:	f3bf 8f6f 	isb	sy
 800ab3a:	f3bf 8f4f 	dsb	sy
 800ab3e:	61bb      	str	r3, [r7, #24]
}
 800ab40:	bf00      	nop
 800ab42:	e7fe      	b.n	800ab42 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab4a:	f023 0301 	bic.w	r3, r3, #1
 800ab4e:	b2da      	uxtb	r2, r3
 800ab50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ab56:	e03a      	b.n	800abce <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ab58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab5a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab5e:	f043 0301 	orr.w	r3, r3, #1
 800ab62:	b2da      	uxtb	r2, r3
 800ab64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800ab6a:	68ba      	ldr	r2, [r7, #8]
 800ab6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab6e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab72:	699b      	ldr	r3, [r3, #24]
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	d10a      	bne.n	800ab8e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ab78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab7c:	f383 8811 	msr	BASEPRI, r3
 800ab80:	f3bf 8f6f 	isb	sy
 800ab84:	f3bf 8f4f 	dsb	sy
 800ab88:	617b      	str	r3, [r7, #20]
}
 800ab8a:	bf00      	nop
 800ab8c:	e7fe      	b.n	800ab8c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ab8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab90:	699a      	ldr	r2, [r3, #24]
 800ab92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab94:	18d1      	adds	r1, r2, r3
 800ab96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab9c:	f7ff ff06 	bl	800a9ac <prvInsertTimerInActiveList>
					break;
 800aba0:	e015      	b.n	800abce <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aba2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aba4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aba8:	f003 0302 	and.w	r3, r3, #2
 800abac:	2b00      	cmp	r3, #0
 800abae:	d103      	bne.n	800abb8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800abb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800abb2:	f000 fbdd 	bl	800b370 <vPortFree>
 800abb6:	e00a      	b.n	800abce <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800abb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abbe:	f023 0301 	bic.w	r3, r3, #1
 800abc2:	b2da      	uxtb	r2, r3
 800abc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800abca:	e000      	b.n	800abce <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800abcc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800abce:	4b08      	ldr	r3, [pc, #32]	; (800abf0 <prvProcessReceivedCommands+0x1c0>)
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	1d39      	adds	r1, r7, #4
 800abd4:	2200      	movs	r2, #0
 800abd6:	4618      	mov	r0, r3
 800abd8:	f7fe fb6e 	bl	80092b8 <xQueueReceive>
 800abdc:	4603      	mov	r3, r0
 800abde:	2b00      	cmp	r3, #0
 800abe0:	f47f af2a 	bne.w	800aa38 <prvProcessReceivedCommands+0x8>
	}
}
 800abe4:	bf00      	nop
 800abe6:	bf00      	nop
 800abe8:	3730      	adds	r7, #48	; 0x30
 800abea:	46bd      	mov	sp, r7
 800abec:	bd80      	pop	{r7, pc}
 800abee:	bf00      	nop
 800abf0:	20000d54 	.word	0x20000d54

0800abf4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b088      	sub	sp, #32
 800abf8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800abfa:	e048      	b.n	800ac8e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800abfc:	4b2d      	ldr	r3, [pc, #180]	; (800acb4 <prvSwitchTimerLists+0xc0>)
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	68db      	ldr	r3, [r3, #12]
 800ac02:	681b      	ldr	r3, [r3, #0]
 800ac04:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac06:	4b2b      	ldr	r3, [pc, #172]	; (800acb4 <prvSwitchTimerLists+0xc0>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	68db      	ldr	r3, [r3, #12]
 800ac0c:	68db      	ldr	r3, [r3, #12]
 800ac0e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	3304      	adds	r3, #4
 800ac14:	4618      	mov	r0, r3
 800ac16:	f7fe f887 	bl	8008d28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	6a1b      	ldr	r3, [r3, #32]
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ac28:	f003 0304 	and.w	r3, r3, #4
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d02e      	beq.n	800ac8e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	699b      	ldr	r3, [r3, #24]
 800ac34:	693a      	ldr	r2, [r7, #16]
 800ac36:	4413      	add	r3, r2
 800ac38:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ac3a:	68ba      	ldr	r2, [r7, #8]
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	d90e      	bls.n	800ac60 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	68ba      	ldr	r2, [r7, #8]
 800ac46:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ac4e:	4b19      	ldr	r3, [pc, #100]	; (800acb4 <prvSwitchTimerLists+0xc0>)
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	3304      	adds	r3, #4
 800ac56:	4619      	mov	r1, r3
 800ac58:	4610      	mov	r0, r2
 800ac5a:	f7fe f82c 	bl	8008cb6 <vListInsert>
 800ac5e:	e016      	b.n	800ac8e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ac60:	2300      	movs	r3, #0
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	2300      	movs	r3, #0
 800ac66:	693a      	ldr	r2, [r7, #16]
 800ac68:	2100      	movs	r1, #0
 800ac6a:	68f8      	ldr	r0, [r7, #12]
 800ac6c:	f7ff fd60 	bl	800a730 <xTimerGenericCommand>
 800ac70:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10a      	bne.n	800ac8e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ac78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	603b      	str	r3, [r7, #0]
}
 800ac8a:	bf00      	nop
 800ac8c:	e7fe      	b.n	800ac8c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac8e:	4b09      	ldr	r3, [pc, #36]	; (800acb4 <prvSwitchTimerLists+0xc0>)
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d1b1      	bne.n	800abfc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ac98:	4b06      	ldr	r3, [pc, #24]	; (800acb4 <prvSwitchTimerLists+0xc0>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ac9e:	4b06      	ldr	r3, [pc, #24]	; (800acb8 <prvSwitchTimerLists+0xc4>)
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a04      	ldr	r2, [pc, #16]	; (800acb4 <prvSwitchTimerLists+0xc0>)
 800aca4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aca6:	4a04      	ldr	r2, [pc, #16]	; (800acb8 <prvSwitchTimerLists+0xc4>)
 800aca8:	697b      	ldr	r3, [r7, #20]
 800acaa:	6013      	str	r3, [r2, #0]
}
 800acac:	bf00      	nop
 800acae:	3718      	adds	r7, #24
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	20000d4c 	.word	0x20000d4c
 800acb8:	20000d50 	.word	0x20000d50

0800acbc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800acbc:	b580      	push	{r7, lr}
 800acbe:	b082      	sub	sp, #8
 800acc0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800acc2:	f000 f967 	bl	800af94 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800acc6:	4b15      	ldr	r3, [pc, #84]	; (800ad1c <prvCheckForValidListAndQueue+0x60>)
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d120      	bne.n	800ad10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800acce:	4814      	ldr	r0, [pc, #80]	; (800ad20 <prvCheckForValidListAndQueue+0x64>)
 800acd0:	f7fd ffa0 	bl	8008c14 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800acd4:	4813      	ldr	r0, [pc, #76]	; (800ad24 <prvCheckForValidListAndQueue+0x68>)
 800acd6:	f7fd ff9d 	bl	8008c14 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800acda:	4b13      	ldr	r3, [pc, #76]	; (800ad28 <prvCheckForValidListAndQueue+0x6c>)
 800acdc:	4a10      	ldr	r2, [pc, #64]	; (800ad20 <prvCheckForValidListAndQueue+0x64>)
 800acde:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ace0:	4b12      	ldr	r3, [pc, #72]	; (800ad2c <prvCheckForValidListAndQueue+0x70>)
 800ace2:	4a10      	ldr	r2, [pc, #64]	; (800ad24 <prvCheckForValidListAndQueue+0x68>)
 800ace4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ace6:	2300      	movs	r3, #0
 800ace8:	9300      	str	r3, [sp, #0]
 800acea:	4b11      	ldr	r3, [pc, #68]	; (800ad30 <prvCheckForValidListAndQueue+0x74>)
 800acec:	4a11      	ldr	r2, [pc, #68]	; (800ad34 <prvCheckForValidListAndQueue+0x78>)
 800acee:	2110      	movs	r1, #16
 800acf0:	200a      	movs	r0, #10
 800acf2:	f7fe f8ab 	bl	8008e4c <xQueueGenericCreateStatic>
 800acf6:	4603      	mov	r3, r0
 800acf8:	4a08      	ldr	r2, [pc, #32]	; (800ad1c <prvCheckForValidListAndQueue+0x60>)
 800acfa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800acfc:	4b07      	ldr	r3, [pc, #28]	; (800ad1c <prvCheckForValidListAndQueue+0x60>)
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d005      	beq.n	800ad10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ad04:	4b05      	ldr	r3, [pc, #20]	; (800ad1c <prvCheckForValidListAndQueue+0x60>)
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	490b      	ldr	r1, [pc, #44]	; (800ad38 <prvCheckForValidListAndQueue+0x7c>)
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f7fe fcc4 	bl	8009698 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ad10:	f000 f970 	bl	800aff4 <vPortExitCritical>
}
 800ad14:	bf00      	nop
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	20000d54 	.word	0x20000d54
 800ad20:	20000d24 	.word	0x20000d24
 800ad24:	20000d38 	.word	0x20000d38
 800ad28:	20000d4c 	.word	0x20000d4c
 800ad2c:	20000d50 	.word	0x20000d50
 800ad30:	20000e00 	.word	0x20000e00
 800ad34:	20000d60 	.word	0x20000d60
 800ad38:	0800c994 	.word	0x0800c994

0800ad3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b085      	sub	sp, #20
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	60f8      	str	r0, [r7, #12]
 800ad44:	60b9      	str	r1, [r7, #8]
 800ad46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ad48:	68fb      	ldr	r3, [r7, #12]
 800ad4a:	3b04      	subs	r3, #4
 800ad4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ad54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad56:	68fb      	ldr	r3, [r7, #12]
 800ad58:	3b04      	subs	r3, #4
 800ad5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ad5c:	68bb      	ldr	r3, [r7, #8]
 800ad5e:	f023 0201 	bic.w	r2, r3, #1
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	3b04      	subs	r3, #4
 800ad6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ad6c:	4a0c      	ldr	r2, [pc, #48]	; (800ada0 <pxPortInitialiseStack+0x64>)
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	3b14      	subs	r3, #20
 800ad76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	3b04      	subs	r3, #4
 800ad82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f06f 0202 	mvn.w	r2, #2
 800ad8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	3b20      	subs	r3, #32
 800ad90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ad92:	68fb      	ldr	r3, [r7, #12]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3714      	adds	r7, #20
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9e:	4770      	bx	lr
 800ada0:	0800ada5 	.word	0x0800ada5

0800ada4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ada4:	b480      	push	{r7}
 800ada6:	b085      	sub	sp, #20
 800ada8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800adaa:	2300      	movs	r3, #0
 800adac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800adae:	4b12      	ldr	r3, [pc, #72]	; (800adf8 <prvTaskExitError+0x54>)
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800adb6:	d00a      	beq.n	800adce <prvTaskExitError+0x2a>
	__asm volatile
 800adb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adbc:	f383 8811 	msr	BASEPRI, r3
 800adc0:	f3bf 8f6f 	isb	sy
 800adc4:	f3bf 8f4f 	dsb	sy
 800adc8:	60fb      	str	r3, [r7, #12]
}
 800adca:	bf00      	nop
 800adcc:	e7fe      	b.n	800adcc <prvTaskExitError+0x28>
	__asm volatile
 800adce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800add2:	f383 8811 	msr	BASEPRI, r3
 800add6:	f3bf 8f6f 	isb	sy
 800adda:	f3bf 8f4f 	dsb	sy
 800adde:	60bb      	str	r3, [r7, #8]
}
 800ade0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ade2:	bf00      	nop
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d0fc      	beq.n	800ade4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800adea:	bf00      	nop
 800adec:	bf00      	nop
 800adee:	3714      	adds	r7, #20
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr
 800adf8:	2000001c 	.word	0x2000001c
 800adfc:	00000000 	.word	0x00000000

0800ae00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ae00:	4b07      	ldr	r3, [pc, #28]	; (800ae20 <pxCurrentTCBConst2>)
 800ae02:	6819      	ldr	r1, [r3, #0]
 800ae04:	6808      	ldr	r0, [r1, #0]
 800ae06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae0a:	f380 8809 	msr	PSP, r0
 800ae0e:	f3bf 8f6f 	isb	sy
 800ae12:	f04f 0000 	mov.w	r0, #0
 800ae16:	f380 8811 	msr	BASEPRI, r0
 800ae1a:	4770      	bx	lr
 800ae1c:	f3af 8000 	nop.w

0800ae20 <pxCurrentTCBConst2>:
 800ae20:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ae24:	bf00      	nop
 800ae26:	bf00      	nop

0800ae28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ae28:	4808      	ldr	r0, [pc, #32]	; (800ae4c <prvPortStartFirstTask+0x24>)
 800ae2a:	6800      	ldr	r0, [r0, #0]
 800ae2c:	6800      	ldr	r0, [r0, #0]
 800ae2e:	f380 8808 	msr	MSP, r0
 800ae32:	f04f 0000 	mov.w	r0, #0
 800ae36:	f380 8814 	msr	CONTROL, r0
 800ae3a:	b662      	cpsie	i
 800ae3c:	b661      	cpsie	f
 800ae3e:	f3bf 8f4f 	dsb	sy
 800ae42:	f3bf 8f6f 	isb	sy
 800ae46:	df00      	svc	0
 800ae48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ae4a:	bf00      	nop
 800ae4c:	e000ed08 	.word	0xe000ed08

0800ae50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b086      	sub	sp, #24
 800ae54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ae56:	4b46      	ldr	r3, [pc, #280]	; (800af70 <xPortStartScheduler+0x120>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	4a46      	ldr	r2, [pc, #280]	; (800af74 <xPortStartScheduler+0x124>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d10a      	bne.n	800ae76 <xPortStartScheduler+0x26>
	__asm volatile
 800ae60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae64:	f383 8811 	msr	BASEPRI, r3
 800ae68:	f3bf 8f6f 	isb	sy
 800ae6c:	f3bf 8f4f 	dsb	sy
 800ae70:	613b      	str	r3, [r7, #16]
}
 800ae72:	bf00      	nop
 800ae74:	e7fe      	b.n	800ae74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ae76:	4b3e      	ldr	r3, [pc, #248]	; (800af70 <xPortStartScheduler+0x120>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	4a3f      	ldr	r2, [pc, #252]	; (800af78 <xPortStartScheduler+0x128>)
 800ae7c:	4293      	cmp	r3, r2
 800ae7e:	d10a      	bne.n	800ae96 <xPortStartScheduler+0x46>
	__asm volatile
 800ae80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	60fb      	str	r3, [r7, #12]
}
 800ae92:	bf00      	nop
 800ae94:	e7fe      	b.n	800ae94 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ae96:	4b39      	ldr	r3, [pc, #228]	; (800af7c <xPortStartScheduler+0x12c>)
 800ae98:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ae9a:	697b      	ldr	r3, [r7, #20]
 800ae9c:	781b      	ldrb	r3, [r3, #0]
 800ae9e:	b2db      	uxtb	r3, r3
 800aea0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	22ff      	movs	r2, #255	; 0xff
 800aea6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800aea8:	697b      	ldr	r3, [r7, #20]
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	b2db      	uxtb	r3, r3
 800aeae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800aeb0:	78fb      	ldrb	r3, [r7, #3]
 800aeb2:	b2db      	uxtb	r3, r3
 800aeb4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800aeb8:	b2da      	uxtb	r2, r3
 800aeba:	4b31      	ldr	r3, [pc, #196]	; (800af80 <xPortStartScheduler+0x130>)
 800aebc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800aebe:	4b31      	ldr	r3, [pc, #196]	; (800af84 <xPortStartScheduler+0x134>)
 800aec0:	2207      	movs	r2, #7
 800aec2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aec4:	e009      	b.n	800aeda <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800aec6:	4b2f      	ldr	r3, [pc, #188]	; (800af84 <xPortStartScheduler+0x134>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	3b01      	subs	r3, #1
 800aecc:	4a2d      	ldr	r2, [pc, #180]	; (800af84 <xPortStartScheduler+0x134>)
 800aece:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800aed0:	78fb      	ldrb	r3, [r7, #3]
 800aed2:	b2db      	uxtb	r3, r3
 800aed4:	005b      	lsls	r3, r3, #1
 800aed6:	b2db      	uxtb	r3, r3
 800aed8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800aeda:	78fb      	ldrb	r3, [r7, #3]
 800aedc:	b2db      	uxtb	r3, r3
 800aede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aee2:	2b80      	cmp	r3, #128	; 0x80
 800aee4:	d0ef      	beq.n	800aec6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800aee6:	4b27      	ldr	r3, [pc, #156]	; (800af84 <xPortStartScheduler+0x134>)
 800aee8:	681b      	ldr	r3, [r3, #0]
 800aeea:	f1c3 0307 	rsb	r3, r3, #7
 800aeee:	2b04      	cmp	r3, #4
 800aef0:	d00a      	beq.n	800af08 <xPortStartScheduler+0xb8>
	__asm volatile
 800aef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aef6:	f383 8811 	msr	BASEPRI, r3
 800aefa:	f3bf 8f6f 	isb	sy
 800aefe:	f3bf 8f4f 	dsb	sy
 800af02:	60bb      	str	r3, [r7, #8]
}
 800af04:	bf00      	nop
 800af06:	e7fe      	b.n	800af06 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800af08:	4b1e      	ldr	r3, [pc, #120]	; (800af84 <xPortStartScheduler+0x134>)
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	021b      	lsls	r3, r3, #8
 800af0e:	4a1d      	ldr	r2, [pc, #116]	; (800af84 <xPortStartScheduler+0x134>)
 800af10:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800af12:	4b1c      	ldr	r3, [pc, #112]	; (800af84 <xPortStartScheduler+0x134>)
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800af1a:	4a1a      	ldr	r2, [pc, #104]	; (800af84 <xPortStartScheduler+0x134>)
 800af1c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	b2da      	uxtb	r2, r3
 800af22:	697b      	ldr	r3, [r7, #20]
 800af24:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800af26:	4b18      	ldr	r3, [pc, #96]	; (800af88 <xPortStartScheduler+0x138>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a17      	ldr	r2, [pc, #92]	; (800af88 <xPortStartScheduler+0x138>)
 800af2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800af30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800af32:	4b15      	ldr	r3, [pc, #84]	; (800af88 <xPortStartScheduler+0x138>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a14      	ldr	r2, [pc, #80]	; (800af88 <xPortStartScheduler+0x138>)
 800af38:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800af3c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800af3e:	f000 f8dd 	bl	800b0fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800af42:	4b12      	ldr	r3, [pc, #72]	; (800af8c <xPortStartScheduler+0x13c>)
 800af44:	2200      	movs	r2, #0
 800af46:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800af48:	f000 f8fc 	bl	800b144 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800af4c:	4b10      	ldr	r3, [pc, #64]	; (800af90 <xPortStartScheduler+0x140>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a0f      	ldr	r2, [pc, #60]	; (800af90 <xPortStartScheduler+0x140>)
 800af52:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800af56:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800af58:	f7ff ff66 	bl	800ae28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800af5c:	f7ff f84a 	bl	8009ff4 <vTaskSwitchContext>
	prvTaskExitError();
 800af60:	f7ff ff20 	bl	800ada4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800af64:	2300      	movs	r3, #0
}
 800af66:	4618      	mov	r0, r3
 800af68:	3718      	adds	r7, #24
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	e000ed00 	.word	0xe000ed00
 800af74:	410fc271 	.word	0x410fc271
 800af78:	410fc270 	.word	0x410fc270
 800af7c:	e000e400 	.word	0xe000e400
 800af80:	20000e50 	.word	0x20000e50
 800af84:	20000e54 	.word	0x20000e54
 800af88:	e000ed20 	.word	0xe000ed20
 800af8c:	2000001c 	.word	0x2000001c
 800af90:	e000ef34 	.word	0xe000ef34

0800af94 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800af94:	b480      	push	{r7}
 800af96:	b083      	sub	sp, #12
 800af98:	af00      	add	r7, sp, #0
	__asm volatile
 800af9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af9e:	f383 8811 	msr	BASEPRI, r3
 800afa2:	f3bf 8f6f 	isb	sy
 800afa6:	f3bf 8f4f 	dsb	sy
 800afaa:	607b      	str	r3, [r7, #4]
}
 800afac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800afae:	4b0f      	ldr	r3, [pc, #60]	; (800afec <vPortEnterCritical+0x58>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	3301      	adds	r3, #1
 800afb4:	4a0d      	ldr	r2, [pc, #52]	; (800afec <vPortEnterCritical+0x58>)
 800afb6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800afb8:	4b0c      	ldr	r3, [pc, #48]	; (800afec <vPortEnterCritical+0x58>)
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d10f      	bne.n	800afe0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800afc0:	4b0b      	ldr	r3, [pc, #44]	; (800aff0 <vPortEnterCritical+0x5c>)
 800afc2:	681b      	ldr	r3, [r3, #0]
 800afc4:	b2db      	uxtb	r3, r3
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d00a      	beq.n	800afe0 <vPortEnterCritical+0x4c>
	__asm volatile
 800afca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afce:	f383 8811 	msr	BASEPRI, r3
 800afd2:	f3bf 8f6f 	isb	sy
 800afd6:	f3bf 8f4f 	dsb	sy
 800afda:	603b      	str	r3, [r7, #0]
}
 800afdc:	bf00      	nop
 800afde:	e7fe      	b.n	800afde <vPortEnterCritical+0x4a>
	}
}
 800afe0:	bf00      	nop
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr
 800afec:	2000001c 	.word	0x2000001c
 800aff0:	e000ed04 	.word	0xe000ed04

0800aff4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800affa:	4b12      	ldr	r3, [pc, #72]	; (800b044 <vPortExitCritical+0x50>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d10a      	bne.n	800b018 <vPortExitCritical+0x24>
	__asm volatile
 800b002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b006:	f383 8811 	msr	BASEPRI, r3
 800b00a:	f3bf 8f6f 	isb	sy
 800b00e:	f3bf 8f4f 	dsb	sy
 800b012:	607b      	str	r3, [r7, #4]
}
 800b014:	bf00      	nop
 800b016:	e7fe      	b.n	800b016 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800b018:	4b0a      	ldr	r3, [pc, #40]	; (800b044 <vPortExitCritical+0x50>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	3b01      	subs	r3, #1
 800b01e:	4a09      	ldr	r2, [pc, #36]	; (800b044 <vPortExitCritical+0x50>)
 800b020:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800b022:	4b08      	ldr	r3, [pc, #32]	; (800b044 <vPortExitCritical+0x50>)
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d105      	bne.n	800b036 <vPortExitCritical+0x42>
 800b02a:	2300      	movs	r3, #0
 800b02c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b02e:	683b      	ldr	r3, [r7, #0]
 800b030:	f383 8811 	msr	BASEPRI, r3
}
 800b034:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800b036:	bf00      	nop
 800b038:	370c      	adds	r7, #12
 800b03a:	46bd      	mov	sp, r7
 800b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	2000001c 	.word	0x2000001c
	...

0800b050 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800b050:	f3ef 8009 	mrs	r0, PSP
 800b054:	f3bf 8f6f 	isb	sy
 800b058:	4b15      	ldr	r3, [pc, #84]	; (800b0b0 <pxCurrentTCBConst>)
 800b05a:	681a      	ldr	r2, [r3, #0]
 800b05c:	f01e 0f10 	tst.w	lr, #16
 800b060:	bf08      	it	eq
 800b062:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800b066:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b06a:	6010      	str	r0, [r2, #0]
 800b06c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b070:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b074:	f380 8811 	msr	BASEPRI, r0
 800b078:	f3bf 8f4f 	dsb	sy
 800b07c:	f3bf 8f6f 	isb	sy
 800b080:	f7fe ffb8 	bl	8009ff4 <vTaskSwitchContext>
 800b084:	f04f 0000 	mov.w	r0, #0
 800b088:	f380 8811 	msr	BASEPRI, r0
 800b08c:	bc09      	pop	{r0, r3}
 800b08e:	6819      	ldr	r1, [r3, #0]
 800b090:	6808      	ldr	r0, [r1, #0]
 800b092:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b096:	f01e 0f10 	tst.w	lr, #16
 800b09a:	bf08      	it	eq
 800b09c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b0a0:	f380 8809 	msr	PSP, r0
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	4770      	bx	lr
 800b0aa:	bf00      	nop
 800b0ac:	f3af 8000 	nop.w

0800b0b0 <pxCurrentTCBConst>:
 800b0b0:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b0b4:	bf00      	nop
 800b0b6:	bf00      	nop

0800b0b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
	__asm volatile
 800b0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c2:	f383 8811 	msr	BASEPRI, r3
 800b0c6:	f3bf 8f6f 	isb	sy
 800b0ca:	f3bf 8f4f 	dsb	sy
 800b0ce:	607b      	str	r3, [r7, #4]
}
 800b0d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b0d2:	f7fe fed5 	bl	8009e80 <xTaskIncrementTick>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d003      	beq.n	800b0e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b0dc:	4b06      	ldr	r3, [pc, #24]	; (800b0f8 <xPortSysTickHandler+0x40>)
 800b0de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b0e2:	601a      	str	r2, [r3, #0]
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	f383 8811 	msr	BASEPRI, r3
}
 800b0ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b0f0:	bf00      	nop
 800b0f2:	3708      	adds	r7, #8
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	bd80      	pop	{r7, pc}
 800b0f8:	e000ed04 	.word	0xe000ed04

0800b0fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b100:	4b0b      	ldr	r3, [pc, #44]	; (800b130 <vPortSetupTimerInterrupt+0x34>)
 800b102:	2200      	movs	r2, #0
 800b104:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b106:	4b0b      	ldr	r3, [pc, #44]	; (800b134 <vPortSetupTimerInterrupt+0x38>)
 800b108:	2200      	movs	r2, #0
 800b10a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b10c:	4b0a      	ldr	r3, [pc, #40]	; (800b138 <vPortSetupTimerInterrupt+0x3c>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a0a      	ldr	r2, [pc, #40]	; (800b13c <vPortSetupTimerInterrupt+0x40>)
 800b112:	fba2 2303 	umull	r2, r3, r2, r3
 800b116:	099b      	lsrs	r3, r3, #6
 800b118:	4a09      	ldr	r2, [pc, #36]	; (800b140 <vPortSetupTimerInterrupt+0x44>)
 800b11a:	3b01      	subs	r3, #1
 800b11c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b11e:	4b04      	ldr	r3, [pc, #16]	; (800b130 <vPortSetupTimerInterrupt+0x34>)
 800b120:	2207      	movs	r2, #7
 800b122:	601a      	str	r2, [r3, #0]
}
 800b124:	bf00      	nop
 800b126:	46bd      	mov	sp, r7
 800b128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b12c:	4770      	bx	lr
 800b12e:	bf00      	nop
 800b130:	e000e010 	.word	0xe000e010
 800b134:	e000e018 	.word	0xe000e018
 800b138:	20000010 	.word	0x20000010
 800b13c:	10624dd3 	.word	0x10624dd3
 800b140:	e000e014 	.word	0xe000e014

0800b144 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b144:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b154 <vPortEnableVFP+0x10>
 800b148:	6801      	ldr	r1, [r0, #0]
 800b14a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b14e:	6001      	str	r1, [r0, #0]
 800b150:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b152:	bf00      	nop
 800b154:	e000ed88 	.word	0xe000ed88

0800b158 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b158:	b480      	push	{r7}
 800b15a:	b085      	sub	sp, #20
 800b15c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b15e:	f3ef 8305 	mrs	r3, IPSR
 800b162:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	2b0f      	cmp	r3, #15
 800b168:	d914      	bls.n	800b194 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b16a:	4a17      	ldr	r2, [pc, #92]	; (800b1c8 <vPortValidateInterruptPriority+0x70>)
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	4413      	add	r3, r2
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b174:	4b15      	ldr	r3, [pc, #84]	; (800b1cc <vPortValidateInterruptPriority+0x74>)
 800b176:	781b      	ldrb	r3, [r3, #0]
 800b178:	7afa      	ldrb	r2, [r7, #11]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d20a      	bcs.n	800b194 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b182:	f383 8811 	msr	BASEPRI, r3
 800b186:	f3bf 8f6f 	isb	sy
 800b18a:	f3bf 8f4f 	dsb	sy
 800b18e:	607b      	str	r3, [r7, #4]
}
 800b190:	bf00      	nop
 800b192:	e7fe      	b.n	800b192 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b194:	4b0e      	ldr	r3, [pc, #56]	; (800b1d0 <vPortValidateInterruptPriority+0x78>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b19c:	4b0d      	ldr	r3, [pc, #52]	; (800b1d4 <vPortValidateInterruptPriority+0x7c>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	429a      	cmp	r2, r3
 800b1a2:	d90a      	bls.n	800b1ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1a8:	f383 8811 	msr	BASEPRI, r3
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	f3bf 8f4f 	dsb	sy
 800b1b4:	603b      	str	r3, [r7, #0]
}
 800b1b6:	bf00      	nop
 800b1b8:	e7fe      	b.n	800b1b8 <vPortValidateInterruptPriority+0x60>
	}
 800b1ba:	bf00      	nop
 800b1bc:	3714      	adds	r7, #20
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c4:	4770      	bx	lr
 800b1c6:	bf00      	nop
 800b1c8:	e000e3f0 	.word	0xe000e3f0
 800b1cc:	20000e50 	.word	0x20000e50
 800b1d0:	e000ed0c 	.word	0xe000ed0c
 800b1d4:	20000e54 	.word	0x20000e54

0800b1d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b08a      	sub	sp, #40	; 0x28
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b1e4:	f7fe fd90 	bl	8009d08 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b1e8:	4b5b      	ldr	r3, [pc, #364]	; (800b358 <pvPortMalloc+0x180>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d101      	bne.n	800b1f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b1f0:	f000 f920 	bl	800b434 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b1f4:	4b59      	ldr	r3, [pc, #356]	; (800b35c <pvPortMalloc+0x184>)
 800b1f6:	681a      	ldr	r2, [r3, #0]
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	4013      	ands	r3, r2
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	f040 8093 	bne.w	800b328 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d01d      	beq.n	800b244 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b208:	2208      	movs	r2, #8
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4413      	add	r3, r2
 800b20e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	f003 0307 	and.w	r3, r3, #7
 800b216:	2b00      	cmp	r3, #0
 800b218:	d014      	beq.n	800b244 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	f023 0307 	bic.w	r3, r3, #7
 800b220:	3308      	adds	r3, #8
 800b222:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	f003 0307 	and.w	r3, r3, #7
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00a      	beq.n	800b244 <pvPortMalloc+0x6c>
	__asm volatile
 800b22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b232:	f383 8811 	msr	BASEPRI, r3
 800b236:	f3bf 8f6f 	isb	sy
 800b23a:	f3bf 8f4f 	dsb	sy
 800b23e:	617b      	str	r3, [r7, #20]
}
 800b240:	bf00      	nop
 800b242:	e7fe      	b.n	800b242 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d06e      	beq.n	800b328 <pvPortMalloc+0x150>
 800b24a:	4b45      	ldr	r3, [pc, #276]	; (800b360 <pvPortMalloc+0x188>)
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	687a      	ldr	r2, [r7, #4]
 800b250:	429a      	cmp	r2, r3
 800b252:	d869      	bhi.n	800b328 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b254:	4b43      	ldr	r3, [pc, #268]	; (800b364 <pvPortMalloc+0x18c>)
 800b256:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b258:	4b42      	ldr	r3, [pc, #264]	; (800b364 <pvPortMalloc+0x18c>)
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b25e:	e004      	b.n	800b26a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b262:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	429a      	cmp	r2, r3
 800b272:	d903      	bls.n	800b27c <pvPortMalloc+0xa4>
 800b274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d1f1      	bne.n	800b260 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b27c:	4b36      	ldr	r3, [pc, #216]	; (800b358 <pvPortMalloc+0x180>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b282:	429a      	cmp	r2, r3
 800b284:	d050      	beq.n	800b328 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b286:	6a3b      	ldr	r3, [r7, #32]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2208      	movs	r2, #8
 800b28c:	4413      	add	r3, r2
 800b28e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b292:	681a      	ldr	r2, [r3, #0]
 800b294:	6a3b      	ldr	r3, [r7, #32]
 800b296:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29a:	685a      	ldr	r2, [r3, #4]
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	1ad2      	subs	r2, r2, r3
 800b2a0:	2308      	movs	r3, #8
 800b2a2:	005b      	lsls	r3, r3, #1
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d91f      	bls.n	800b2e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b2a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	4413      	add	r3, r2
 800b2ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	f003 0307 	and.w	r3, r3, #7
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d00a      	beq.n	800b2d0 <pvPortMalloc+0xf8>
	__asm volatile
 800b2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2be:	f383 8811 	msr	BASEPRI, r3
 800b2c2:	f3bf 8f6f 	isb	sy
 800b2c6:	f3bf 8f4f 	dsb	sy
 800b2ca:	613b      	str	r3, [r7, #16]
}
 800b2cc:	bf00      	nop
 800b2ce:	e7fe      	b.n	800b2ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2d2:	685a      	ldr	r2, [r3, #4]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	1ad2      	subs	r2, r2, r3
 800b2d8:	69bb      	ldr	r3, [r7, #24]
 800b2da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2de:	687a      	ldr	r2, [r7, #4]
 800b2e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b2e2:	69b8      	ldr	r0, [r7, #24]
 800b2e4:	f000 f908 	bl	800b4f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b2e8:	4b1d      	ldr	r3, [pc, #116]	; (800b360 <pvPortMalloc+0x188>)
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	1ad3      	subs	r3, r2, r3
 800b2f2:	4a1b      	ldr	r2, [pc, #108]	; (800b360 <pvPortMalloc+0x188>)
 800b2f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b2f6:	4b1a      	ldr	r3, [pc, #104]	; (800b360 <pvPortMalloc+0x188>)
 800b2f8:	681a      	ldr	r2, [r3, #0]
 800b2fa:	4b1b      	ldr	r3, [pc, #108]	; (800b368 <pvPortMalloc+0x190>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d203      	bcs.n	800b30a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b302:	4b17      	ldr	r3, [pc, #92]	; (800b360 <pvPortMalloc+0x188>)
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	4a18      	ldr	r2, [pc, #96]	; (800b368 <pvPortMalloc+0x190>)
 800b308:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b30a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b30c:	685a      	ldr	r2, [r3, #4]
 800b30e:	4b13      	ldr	r3, [pc, #76]	; (800b35c <pvPortMalloc+0x184>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	431a      	orrs	r2, r3
 800b314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b316:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31a:	2200      	movs	r2, #0
 800b31c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b31e:	4b13      	ldr	r3, [pc, #76]	; (800b36c <pvPortMalloc+0x194>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	3301      	adds	r3, #1
 800b324:	4a11      	ldr	r2, [pc, #68]	; (800b36c <pvPortMalloc+0x194>)
 800b326:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b328:	f7fe fcfc 	bl	8009d24 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b32c:	69fb      	ldr	r3, [r7, #28]
 800b32e:	f003 0307 	and.w	r3, r3, #7
 800b332:	2b00      	cmp	r3, #0
 800b334:	d00a      	beq.n	800b34c <pvPortMalloc+0x174>
	__asm volatile
 800b336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b33a:	f383 8811 	msr	BASEPRI, r3
 800b33e:	f3bf 8f6f 	isb	sy
 800b342:	f3bf 8f4f 	dsb	sy
 800b346:	60fb      	str	r3, [r7, #12]
}
 800b348:	bf00      	nop
 800b34a:	e7fe      	b.n	800b34a <pvPortMalloc+0x172>
	return pvReturn;
 800b34c:	69fb      	ldr	r3, [r7, #28]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3728      	adds	r7, #40	; 0x28
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	20001e00 	.word	0x20001e00
 800b35c:	20001e14 	.word	0x20001e14
 800b360:	20001e04 	.word	0x20001e04
 800b364:	20001df8 	.word	0x20001df8
 800b368:	20001e08 	.word	0x20001e08
 800b36c:	20001e0c 	.word	0x20001e0c

0800b370 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b086      	sub	sp, #24
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d04d      	beq.n	800b41e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b382:	2308      	movs	r3, #8
 800b384:	425b      	negs	r3, r3
 800b386:	697a      	ldr	r2, [r7, #20]
 800b388:	4413      	add	r3, r2
 800b38a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	685a      	ldr	r2, [r3, #4]
 800b394:	4b24      	ldr	r3, [pc, #144]	; (800b428 <vPortFree+0xb8>)
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	4013      	ands	r3, r2
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d10a      	bne.n	800b3b4 <vPortFree+0x44>
	__asm volatile
 800b39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3a2:	f383 8811 	msr	BASEPRI, r3
 800b3a6:	f3bf 8f6f 	isb	sy
 800b3aa:	f3bf 8f4f 	dsb	sy
 800b3ae:	60fb      	str	r3, [r7, #12]
}
 800b3b0:	bf00      	nop
 800b3b2:	e7fe      	b.n	800b3b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b3b4:	693b      	ldr	r3, [r7, #16]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d00a      	beq.n	800b3d2 <vPortFree+0x62>
	__asm volatile
 800b3bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3c0:	f383 8811 	msr	BASEPRI, r3
 800b3c4:	f3bf 8f6f 	isb	sy
 800b3c8:	f3bf 8f4f 	dsb	sy
 800b3cc:	60bb      	str	r3, [r7, #8]
}
 800b3ce:	bf00      	nop
 800b3d0:	e7fe      	b.n	800b3d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b3d2:	693b      	ldr	r3, [r7, #16]
 800b3d4:	685a      	ldr	r2, [r3, #4]
 800b3d6:	4b14      	ldr	r3, [pc, #80]	; (800b428 <vPortFree+0xb8>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4013      	ands	r3, r2
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d01e      	beq.n	800b41e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b3e0:	693b      	ldr	r3, [r7, #16]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	2b00      	cmp	r3, #0
 800b3e6:	d11a      	bne.n	800b41e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b3e8:	693b      	ldr	r3, [r7, #16]
 800b3ea:	685a      	ldr	r2, [r3, #4]
 800b3ec:	4b0e      	ldr	r3, [pc, #56]	; (800b428 <vPortFree+0xb8>)
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	43db      	mvns	r3, r3
 800b3f2:	401a      	ands	r2, r3
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b3f8:	f7fe fc86 	bl	8009d08 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	685a      	ldr	r2, [r3, #4]
 800b400:	4b0a      	ldr	r3, [pc, #40]	; (800b42c <vPortFree+0xbc>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	4413      	add	r3, r2
 800b406:	4a09      	ldr	r2, [pc, #36]	; (800b42c <vPortFree+0xbc>)
 800b408:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b40a:	6938      	ldr	r0, [r7, #16]
 800b40c:	f000 f874 	bl	800b4f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b410:	4b07      	ldr	r3, [pc, #28]	; (800b430 <vPortFree+0xc0>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	3301      	adds	r3, #1
 800b416:	4a06      	ldr	r2, [pc, #24]	; (800b430 <vPortFree+0xc0>)
 800b418:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b41a:	f7fe fc83 	bl	8009d24 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b41e:	bf00      	nop
 800b420:	3718      	adds	r7, #24
 800b422:	46bd      	mov	sp, r7
 800b424:	bd80      	pop	{r7, pc}
 800b426:	bf00      	nop
 800b428:	20001e14 	.word	0x20001e14
 800b42c:	20001e04 	.word	0x20001e04
 800b430:	20001e10 	.word	0x20001e10

0800b434 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b434:	b480      	push	{r7}
 800b436:	b085      	sub	sp, #20
 800b438:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b43a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800b43e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b440:	4b27      	ldr	r3, [pc, #156]	; (800b4e0 <prvHeapInit+0xac>)
 800b442:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b444:	68fb      	ldr	r3, [r7, #12]
 800b446:	f003 0307 	and.w	r3, r3, #7
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d00c      	beq.n	800b468 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	3307      	adds	r3, #7
 800b452:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f023 0307 	bic.w	r3, r3, #7
 800b45a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b45c:	68ba      	ldr	r2, [r7, #8]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	1ad3      	subs	r3, r2, r3
 800b462:	4a1f      	ldr	r2, [pc, #124]	; (800b4e0 <prvHeapInit+0xac>)
 800b464:	4413      	add	r3, r2
 800b466:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b46c:	4a1d      	ldr	r2, [pc, #116]	; (800b4e4 <prvHeapInit+0xb0>)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b472:	4b1c      	ldr	r3, [pc, #112]	; (800b4e4 <prvHeapInit+0xb0>)
 800b474:	2200      	movs	r2, #0
 800b476:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	68ba      	ldr	r2, [r7, #8]
 800b47c:	4413      	add	r3, r2
 800b47e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b480:	2208      	movs	r2, #8
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	1a9b      	subs	r3, r3, r2
 800b486:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	f023 0307 	bic.w	r3, r3, #7
 800b48e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	4a15      	ldr	r2, [pc, #84]	; (800b4e8 <prvHeapInit+0xb4>)
 800b494:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b496:	4b14      	ldr	r3, [pc, #80]	; (800b4e8 <prvHeapInit+0xb4>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2200      	movs	r2, #0
 800b49c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b49e:	4b12      	ldr	r3, [pc, #72]	; (800b4e8 <prvHeapInit+0xb4>)
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b4a6:	687b      	ldr	r3, [r7, #4]
 800b4a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b4aa:	683b      	ldr	r3, [r7, #0]
 800b4ac:	68fa      	ldr	r2, [r7, #12]
 800b4ae:	1ad2      	subs	r2, r2, r3
 800b4b0:	683b      	ldr	r3, [r7, #0]
 800b4b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b4b4:	4b0c      	ldr	r3, [pc, #48]	; (800b4e8 <prvHeapInit+0xb4>)
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	4a0a      	ldr	r2, [pc, #40]	; (800b4ec <prvHeapInit+0xb8>)
 800b4c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	4a09      	ldr	r2, [pc, #36]	; (800b4f0 <prvHeapInit+0xbc>)
 800b4ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b4cc:	4b09      	ldr	r3, [pc, #36]	; (800b4f4 <prvHeapInit+0xc0>)
 800b4ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b4d2:	601a      	str	r2, [r3, #0]
}
 800b4d4:	bf00      	nop
 800b4d6:	3714      	adds	r7, #20
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr
 800b4e0:	20000e58 	.word	0x20000e58
 800b4e4:	20001df8 	.word	0x20001df8
 800b4e8:	20001e00 	.word	0x20001e00
 800b4ec:	20001e08 	.word	0x20001e08
 800b4f0:	20001e04 	.word	0x20001e04
 800b4f4:	20001e14 	.word	0x20001e14

0800b4f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b4f8:	b480      	push	{r7}
 800b4fa:	b085      	sub	sp, #20
 800b4fc:	af00      	add	r7, sp, #0
 800b4fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b500:	4b28      	ldr	r3, [pc, #160]	; (800b5a4 <prvInsertBlockIntoFreeList+0xac>)
 800b502:	60fb      	str	r3, [r7, #12]
 800b504:	e002      	b.n	800b50c <prvInsertBlockIntoFreeList+0x14>
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	60fb      	str	r3, [r7, #12]
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	687a      	ldr	r2, [r7, #4]
 800b512:	429a      	cmp	r2, r3
 800b514:	d8f7      	bhi.n	800b506 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	68ba      	ldr	r2, [r7, #8]
 800b520:	4413      	add	r3, r2
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	429a      	cmp	r2, r3
 800b526:	d108      	bne.n	800b53a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	685a      	ldr	r2, [r3, #4]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	441a      	add	r2, r3
 800b532:	68fb      	ldr	r3, [r7, #12]
 800b534:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	68ba      	ldr	r2, [r7, #8]
 800b544:	441a      	add	r2, r3
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d118      	bne.n	800b580 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681a      	ldr	r2, [r3, #0]
 800b552:	4b15      	ldr	r3, [pc, #84]	; (800b5a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	429a      	cmp	r2, r3
 800b558:	d00d      	beq.n	800b576 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	685a      	ldr	r2, [r3, #4]
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	685b      	ldr	r3, [r3, #4]
 800b564:	441a      	add	r2, r3
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	681a      	ldr	r2, [r3, #0]
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	601a      	str	r2, [r3, #0]
 800b574:	e008      	b.n	800b588 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b576:	4b0c      	ldr	r3, [pc, #48]	; (800b5a8 <prvInsertBlockIntoFreeList+0xb0>)
 800b578:	681a      	ldr	r2, [r3, #0]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	601a      	str	r2, [r3, #0]
 800b57e:	e003      	b.n	800b588 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	681a      	ldr	r2, [r3, #0]
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b588:	68fa      	ldr	r2, [r7, #12]
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	429a      	cmp	r2, r3
 800b58e:	d002      	beq.n	800b596 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b596:	bf00      	nop
 800b598:	3714      	adds	r7, #20
 800b59a:	46bd      	mov	sp, r7
 800b59c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a0:	4770      	bx	lr
 800b5a2:	bf00      	nop
 800b5a4:	20001df8 	.word	0x20001df8
 800b5a8:	20001e00 	.word	0x20001e00

0800b5ac <__errno>:
 800b5ac:	4b01      	ldr	r3, [pc, #4]	; (800b5b4 <__errno+0x8>)
 800b5ae:	6818      	ldr	r0, [r3, #0]
 800b5b0:	4770      	bx	lr
 800b5b2:	bf00      	nop
 800b5b4:	20000020 	.word	0x20000020

0800b5b8 <__libc_init_array>:
 800b5b8:	b570      	push	{r4, r5, r6, lr}
 800b5ba:	4d0d      	ldr	r5, [pc, #52]	; (800b5f0 <__libc_init_array+0x38>)
 800b5bc:	4c0d      	ldr	r4, [pc, #52]	; (800b5f4 <__libc_init_array+0x3c>)
 800b5be:	1b64      	subs	r4, r4, r5
 800b5c0:	10a4      	asrs	r4, r4, #2
 800b5c2:	2600      	movs	r6, #0
 800b5c4:	42a6      	cmp	r6, r4
 800b5c6:	d109      	bne.n	800b5dc <__libc_init_array+0x24>
 800b5c8:	4d0b      	ldr	r5, [pc, #44]	; (800b5f8 <__libc_init_array+0x40>)
 800b5ca:	4c0c      	ldr	r4, [pc, #48]	; (800b5fc <__libc_init_array+0x44>)
 800b5cc:	f001 f97c 	bl	800c8c8 <_init>
 800b5d0:	1b64      	subs	r4, r4, r5
 800b5d2:	10a4      	asrs	r4, r4, #2
 800b5d4:	2600      	movs	r6, #0
 800b5d6:	42a6      	cmp	r6, r4
 800b5d8:	d105      	bne.n	800b5e6 <__libc_init_array+0x2e>
 800b5da:	bd70      	pop	{r4, r5, r6, pc}
 800b5dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5e0:	4798      	blx	r3
 800b5e2:	3601      	adds	r6, #1
 800b5e4:	e7ee      	b.n	800b5c4 <__libc_init_array+0xc>
 800b5e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5ea:	4798      	blx	r3
 800b5ec:	3601      	adds	r6, #1
 800b5ee:	e7f2      	b.n	800b5d6 <__libc_init_array+0x1e>
 800b5f0:	0800cc14 	.word	0x0800cc14
 800b5f4:	0800cc14 	.word	0x0800cc14
 800b5f8:	0800cc14 	.word	0x0800cc14
 800b5fc:	0800cc18 	.word	0x0800cc18

0800b600 <__retarget_lock_acquire_recursive>:
 800b600:	4770      	bx	lr

0800b602 <__retarget_lock_release_recursive>:
 800b602:	4770      	bx	lr

0800b604 <memcpy>:
 800b604:	440a      	add	r2, r1
 800b606:	4291      	cmp	r1, r2
 800b608:	f100 33ff 	add.w	r3, r0, #4294967295
 800b60c:	d100      	bne.n	800b610 <memcpy+0xc>
 800b60e:	4770      	bx	lr
 800b610:	b510      	push	{r4, lr}
 800b612:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b616:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b61a:	4291      	cmp	r1, r2
 800b61c:	d1f9      	bne.n	800b612 <memcpy+0xe>
 800b61e:	bd10      	pop	{r4, pc}

0800b620 <memset>:
 800b620:	4402      	add	r2, r0
 800b622:	4603      	mov	r3, r0
 800b624:	4293      	cmp	r3, r2
 800b626:	d100      	bne.n	800b62a <memset+0xa>
 800b628:	4770      	bx	lr
 800b62a:	f803 1b01 	strb.w	r1, [r3], #1
 800b62e:	e7f9      	b.n	800b624 <memset+0x4>

0800b630 <_malloc_r>:
 800b630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b632:	1ccd      	adds	r5, r1, #3
 800b634:	f025 0503 	bic.w	r5, r5, #3
 800b638:	3508      	adds	r5, #8
 800b63a:	2d0c      	cmp	r5, #12
 800b63c:	bf38      	it	cc
 800b63e:	250c      	movcc	r5, #12
 800b640:	2d00      	cmp	r5, #0
 800b642:	4606      	mov	r6, r0
 800b644:	db01      	blt.n	800b64a <_malloc_r+0x1a>
 800b646:	42a9      	cmp	r1, r5
 800b648:	d903      	bls.n	800b652 <_malloc_r+0x22>
 800b64a:	230c      	movs	r3, #12
 800b64c:	6033      	str	r3, [r6, #0]
 800b64e:	2000      	movs	r0, #0
 800b650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b652:	f000 f90f 	bl	800b874 <__malloc_lock>
 800b656:	4921      	ldr	r1, [pc, #132]	; (800b6dc <_malloc_r+0xac>)
 800b658:	680a      	ldr	r2, [r1, #0]
 800b65a:	4614      	mov	r4, r2
 800b65c:	b99c      	cbnz	r4, 800b686 <_malloc_r+0x56>
 800b65e:	4f20      	ldr	r7, [pc, #128]	; (800b6e0 <_malloc_r+0xb0>)
 800b660:	683b      	ldr	r3, [r7, #0]
 800b662:	b923      	cbnz	r3, 800b66e <_malloc_r+0x3e>
 800b664:	4621      	mov	r1, r4
 800b666:	4630      	mov	r0, r6
 800b668:	f000 f8a6 	bl	800b7b8 <_sbrk_r>
 800b66c:	6038      	str	r0, [r7, #0]
 800b66e:	4629      	mov	r1, r5
 800b670:	4630      	mov	r0, r6
 800b672:	f000 f8a1 	bl	800b7b8 <_sbrk_r>
 800b676:	1c43      	adds	r3, r0, #1
 800b678:	d123      	bne.n	800b6c2 <_malloc_r+0x92>
 800b67a:	230c      	movs	r3, #12
 800b67c:	6033      	str	r3, [r6, #0]
 800b67e:	4630      	mov	r0, r6
 800b680:	f000 f8fe 	bl	800b880 <__malloc_unlock>
 800b684:	e7e3      	b.n	800b64e <_malloc_r+0x1e>
 800b686:	6823      	ldr	r3, [r4, #0]
 800b688:	1b5b      	subs	r3, r3, r5
 800b68a:	d417      	bmi.n	800b6bc <_malloc_r+0x8c>
 800b68c:	2b0b      	cmp	r3, #11
 800b68e:	d903      	bls.n	800b698 <_malloc_r+0x68>
 800b690:	6023      	str	r3, [r4, #0]
 800b692:	441c      	add	r4, r3
 800b694:	6025      	str	r5, [r4, #0]
 800b696:	e004      	b.n	800b6a2 <_malloc_r+0x72>
 800b698:	6863      	ldr	r3, [r4, #4]
 800b69a:	42a2      	cmp	r2, r4
 800b69c:	bf0c      	ite	eq
 800b69e:	600b      	streq	r3, [r1, #0]
 800b6a0:	6053      	strne	r3, [r2, #4]
 800b6a2:	4630      	mov	r0, r6
 800b6a4:	f000 f8ec 	bl	800b880 <__malloc_unlock>
 800b6a8:	f104 000b 	add.w	r0, r4, #11
 800b6ac:	1d23      	adds	r3, r4, #4
 800b6ae:	f020 0007 	bic.w	r0, r0, #7
 800b6b2:	1ac2      	subs	r2, r0, r3
 800b6b4:	d0cc      	beq.n	800b650 <_malloc_r+0x20>
 800b6b6:	1a1b      	subs	r3, r3, r0
 800b6b8:	50a3      	str	r3, [r4, r2]
 800b6ba:	e7c9      	b.n	800b650 <_malloc_r+0x20>
 800b6bc:	4622      	mov	r2, r4
 800b6be:	6864      	ldr	r4, [r4, #4]
 800b6c0:	e7cc      	b.n	800b65c <_malloc_r+0x2c>
 800b6c2:	1cc4      	adds	r4, r0, #3
 800b6c4:	f024 0403 	bic.w	r4, r4, #3
 800b6c8:	42a0      	cmp	r0, r4
 800b6ca:	d0e3      	beq.n	800b694 <_malloc_r+0x64>
 800b6cc:	1a21      	subs	r1, r4, r0
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	f000 f872 	bl	800b7b8 <_sbrk_r>
 800b6d4:	3001      	adds	r0, #1
 800b6d6:	d1dd      	bne.n	800b694 <_malloc_r+0x64>
 800b6d8:	e7cf      	b.n	800b67a <_malloc_r+0x4a>
 800b6da:	bf00      	nop
 800b6dc:	20001e18 	.word	0x20001e18
 800b6e0:	20001e1c 	.word	0x20001e1c

0800b6e4 <cleanup_glue>:
 800b6e4:	b538      	push	{r3, r4, r5, lr}
 800b6e6:	460c      	mov	r4, r1
 800b6e8:	6809      	ldr	r1, [r1, #0]
 800b6ea:	4605      	mov	r5, r0
 800b6ec:	b109      	cbz	r1, 800b6f2 <cleanup_glue+0xe>
 800b6ee:	f7ff fff9 	bl	800b6e4 <cleanup_glue>
 800b6f2:	4621      	mov	r1, r4
 800b6f4:	4628      	mov	r0, r5
 800b6f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6fa:	f000 b8c7 	b.w	800b88c <_free_r>
	...

0800b700 <_reclaim_reent>:
 800b700:	4b2c      	ldr	r3, [pc, #176]	; (800b7b4 <_reclaim_reent+0xb4>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	4283      	cmp	r3, r0
 800b706:	b570      	push	{r4, r5, r6, lr}
 800b708:	4604      	mov	r4, r0
 800b70a:	d051      	beq.n	800b7b0 <_reclaim_reent+0xb0>
 800b70c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b70e:	b143      	cbz	r3, 800b722 <_reclaim_reent+0x22>
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d14a      	bne.n	800b7ac <_reclaim_reent+0xac>
 800b716:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b718:	6819      	ldr	r1, [r3, #0]
 800b71a:	b111      	cbz	r1, 800b722 <_reclaim_reent+0x22>
 800b71c:	4620      	mov	r0, r4
 800b71e:	f000 f8b5 	bl	800b88c <_free_r>
 800b722:	6961      	ldr	r1, [r4, #20]
 800b724:	b111      	cbz	r1, 800b72c <_reclaim_reent+0x2c>
 800b726:	4620      	mov	r0, r4
 800b728:	f000 f8b0 	bl	800b88c <_free_r>
 800b72c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b72e:	b111      	cbz	r1, 800b736 <_reclaim_reent+0x36>
 800b730:	4620      	mov	r0, r4
 800b732:	f000 f8ab 	bl	800b88c <_free_r>
 800b736:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b738:	b111      	cbz	r1, 800b740 <_reclaim_reent+0x40>
 800b73a:	4620      	mov	r0, r4
 800b73c:	f000 f8a6 	bl	800b88c <_free_r>
 800b740:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b742:	b111      	cbz	r1, 800b74a <_reclaim_reent+0x4a>
 800b744:	4620      	mov	r0, r4
 800b746:	f000 f8a1 	bl	800b88c <_free_r>
 800b74a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b74c:	b111      	cbz	r1, 800b754 <_reclaim_reent+0x54>
 800b74e:	4620      	mov	r0, r4
 800b750:	f000 f89c 	bl	800b88c <_free_r>
 800b754:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b756:	b111      	cbz	r1, 800b75e <_reclaim_reent+0x5e>
 800b758:	4620      	mov	r0, r4
 800b75a:	f000 f897 	bl	800b88c <_free_r>
 800b75e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b760:	b111      	cbz	r1, 800b768 <_reclaim_reent+0x68>
 800b762:	4620      	mov	r0, r4
 800b764:	f000 f892 	bl	800b88c <_free_r>
 800b768:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b76a:	b111      	cbz	r1, 800b772 <_reclaim_reent+0x72>
 800b76c:	4620      	mov	r0, r4
 800b76e:	f000 f88d 	bl	800b88c <_free_r>
 800b772:	69a3      	ldr	r3, [r4, #24]
 800b774:	b1e3      	cbz	r3, 800b7b0 <_reclaim_reent+0xb0>
 800b776:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b778:	4620      	mov	r0, r4
 800b77a:	4798      	blx	r3
 800b77c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b77e:	b1b9      	cbz	r1, 800b7b0 <_reclaim_reent+0xb0>
 800b780:	4620      	mov	r0, r4
 800b782:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b786:	f7ff bfad 	b.w	800b6e4 <cleanup_glue>
 800b78a:	5949      	ldr	r1, [r1, r5]
 800b78c:	b941      	cbnz	r1, 800b7a0 <_reclaim_reent+0xa0>
 800b78e:	3504      	adds	r5, #4
 800b790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b792:	2d80      	cmp	r5, #128	; 0x80
 800b794:	68d9      	ldr	r1, [r3, #12]
 800b796:	d1f8      	bne.n	800b78a <_reclaim_reent+0x8a>
 800b798:	4620      	mov	r0, r4
 800b79a:	f000 f877 	bl	800b88c <_free_r>
 800b79e:	e7ba      	b.n	800b716 <_reclaim_reent+0x16>
 800b7a0:	680e      	ldr	r6, [r1, #0]
 800b7a2:	4620      	mov	r0, r4
 800b7a4:	f000 f872 	bl	800b88c <_free_r>
 800b7a8:	4631      	mov	r1, r6
 800b7aa:	e7ef      	b.n	800b78c <_reclaim_reent+0x8c>
 800b7ac:	2500      	movs	r5, #0
 800b7ae:	e7ef      	b.n	800b790 <_reclaim_reent+0x90>
 800b7b0:	bd70      	pop	{r4, r5, r6, pc}
 800b7b2:	bf00      	nop
 800b7b4:	20000020 	.word	0x20000020

0800b7b8 <_sbrk_r>:
 800b7b8:	b538      	push	{r3, r4, r5, lr}
 800b7ba:	4d06      	ldr	r5, [pc, #24]	; (800b7d4 <_sbrk_r+0x1c>)
 800b7bc:	2300      	movs	r3, #0
 800b7be:	4604      	mov	r4, r0
 800b7c0:	4608      	mov	r0, r1
 800b7c2:	602b      	str	r3, [r5, #0]
 800b7c4:	f7f6 fa00 	bl	8001bc8 <_sbrk>
 800b7c8:	1c43      	adds	r3, r0, #1
 800b7ca:	d102      	bne.n	800b7d2 <_sbrk_r+0x1a>
 800b7cc:	682b      	ldr	r3, [r5, #0]
 800b7ce:	b103      	cbz	r3, 800b7d2 <_sbrk_r+0x1a>
 800b7d0:	6023      	str	r3, [r4, #0]
 800b7d2:	bd38      	pop	{r3, r4, r5, pc}
 800b7d4:	20002084 	.word	0x20002084

0800b7d8 <siprintf>:
 800b7d8:	b40e      	push	{r1, r2, r3}
 800b7da:	b500      	push	{lr}
 800b7dc:	b09c      	sub	sp, #112	; 0x70
 800b7de:	ab1d      	add	r3, sp, #116	; 0x74
 800b7e0:	9002      	str	r0, [sp, #8]
 800b7e2:	9006      	str	r0, [sp, #24]
 800b7e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b7e8:	4809      	ldr	r0, [pc, #36]	; (800b810 <siprintf+0x38>)
 800b7ea:	9107      	str	r1, [sp, #28]
 800b7ec:	9104      	str	r1, [sp, #16]
 800b7ee:	4909      	ldr	r1, [pc, #36]	; (800b814 <siprintf+0x3c>)
 800b7f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7f4:	9105      	str	r1, [sp, #20]
 800b7f6:	6800      	ldr	r0, [r0, #0]
 800b7f8:	9301      	str	r3, [sp, #4]
 800b7fa:	a902      	add	r1, sp, #8
 800b7fc:	f000 f8f2 	bl	800b9e4 <_svfiprintf_r>
 800b800:	9b02      	ldr	r3, [sp, #8]
 800b802:	2200      	movs	r2, #0
 800b804:	701a      	strb	r2, [r3, #0]
 800b806:	b01c      	add	sp, #112	; 0x70
 800b808:	f85d eb04 	ldr.w	lr, [sp], #4
 800b80c:	b003      	add	sp, #12
 800b80e:	4770      	bx	lr
 800b810:	20000020 	.word	0x20000020
 800b814:	ffff0208 	.word	0xffff0208

0800b818 <siscanf>:
 800b818:	b40e      	push	{r1, r2, r3}
 800b81a:	b510      	push	{r4, lr}
 800b81c:	b09f      	sub	sp, #124	; 0x7c
 800b81e:	ac21      	add	r4, sp, #132	; 0x84
 800b820:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b824:	f854 2b04 	ldr.w	r2, [r4], #4
 800b828:	9201      	str	r2, [sp, #4]
 800b82a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b82e:	9004      	str	r0, [sp, #16]
 800b830:	9008      	str	r0, [sp, #32]
 800b832:	f7f4 fccd 	bl	80001d0 <strlen>
 800b836:	4b0c      	ldr	r3, [pc, #48]	; (800b868 <siscanf+0x50>)
 800b838:	9005      	str	r0, [sp, #20]
 800b83a:	9009      	str	r0, [sp, #36]	; 0x24
 800b83c:	930d      	str	r3, [sp, #52]	; 0x34
 800b83e:	480b      	ldr	r0, [pc, #44]	; (800b86c <siscanf+0x54>)
 800b840:	9a01      	ldr	r2, [sp, #4]
 800b842:	6800      	ldr	r0, [r0, #0]
 800b844:	9403      	str	r4, [sp, #12]
 800b846:	2300      	movs	r3, #0
 800b848:	9311      	str	r3, [sp, #68]	; 0x44
 800b84a:	9316      	str	r3, [sp, #88]	; 0x58
 800b84c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b850:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b854:	a904      	add	r1, sp, #16
 800b856:	4623      	mov	r3, r4
 800b858:	f000 fa1e 	bl	800bc98 <__ssvfiscanf_r>
 800b85c:	b01f      	add	sp, #124	; 0x7c
 800b85e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b862:	b003      	add	sp, #12
 800b864:	4770      	bx	lr
 800b866:	bf00      	nop
 800b868:	0800b871 	.word	0x0800b871
 800b86c:	20000020 	.word	0x20000020

0800b870 <__seofread>:
 800b870:	2000      	movs	r0, #0
 800b872:	4770      	bx	lr

0800b874 <__malloc_lock>:
 800b874:	4801      	ldr	r0, [pc, #4]	; (800b87c <__malloc_lock+0x8>)
 800b876:	f7ff bec3 	b.w	800b600 <__retarget_lock_acquire_recursive>
 800b87a:	bf00      	nop
 800b87c:	2000207c 	.word	0x2000207c

0800b880 <__malloc_unlock>:
 800b880:	4801      	ldr	r0, [pc, #4]	; (800b888 <__malloc_unlock+0x8>)
 800b882:	f7ff bebe 	b.w	800b602 <__retarget_lock_release_recursive>
 800b886:	bf00      	nop
 800b888:	2000207c 	.word	0x2000207c

0800b88c <_free_r>:
 800b88c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b88e:	2900      	cmp	r1, #0
 800b890:	d048      	beq.n	800b924 <_free_r+0x98>
 800b892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b896:	9001      	str	r0, [sp, #4]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	f1a1 0404 	sub.w	r4, r1, #4
 800b89e:	bfb8      	it	lt
 800b8a0:	18e4      	addlt	r4, r4, r3
 800b8a2:	f7ff ffe7 	bl	800b874 <__malloc_lock>
 800b8a6:	4a20      	ldr	r2, [pc, #128]	; (800b928 <_free_r+0x9c>)
 800b8a8:	9801      	ldr	r0, [sp, #4]
 800b8aa:	6813      	ldr	r3, [r2, #0]
 800b8ac:	4615      	mov	r5, r2
 800b8ae:	b933      	cbnz	r3, 800b8be <_free_r+0x32>
 800b8b0:	6063      	str	r3, [r4, #4]
 800b8b2:	6014      	str	r4, [r2, #0]
 800b8b4:	b003      	add	sp, #12
 800b8b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8ba:	f7ff bfe1 	b.w	800b880 <__malloc_unlock>
 800b8be:	42a3      	cmp	r3, r4
 800b8c0:	d90b      	bls.n	800b8da <_free_r+0x4e>
 800b8c2:	6821      	ldr	r1, [r4, #0]
 800b8c4:	1862      	adds	r2, r4, r1
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	bf04      	itt	eq
 800b8ca:	681a      	ldreq	r2, [r3, #0]
 800b8cc:	685b      	ldreq	r3, [r3, #4]
 800b8ce:	6063      	str	r3, [r4, #4]
 800b8d0:	bf04      	itt	eq
 800b8d2:	1852      	addeq	r2, r2, r1
 800b8d4:	6022      	streq	r2, [r4, #0]
 800b8d6:	602c      	str	r4, [r5, #0]
 800b8d8:	e7ec      	b.n	800b8b4 <_free_r+0x28>
 800b8da:	461a      	mov	r2, r3
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	b10b      	cbz	r3, 800b8e4 <_free_r+0x58>
 800b8e0:	42a3      	cmp	r3, r4
 800b8e2:	d9fa      	bls.n	800b8da <_free_r+0x4e>
 800b8e4:	6811      	ldr	r1, [r2, #0]
 800b8e6:	1855      	adds	r5, r2, r1
 800b8e8:	42a5      	cmp	r5, r4
 800b8ea:	d10b      	bne.n	800b904 <_free_r+0x78>
 800b8ec:	6824      	ldr	r4, [r4, #0]
 800b8ee:	4421      	add	r1, r4
 800b8f0:	1854      	adds	r4, r2, r1
 800b8f2:	42a3      	cmp	r3, r4
 800b8f4:	6011      	str	r1, [r2, #0]
 800b8f6:	d1dd      	bne.n	800b8b4 <_free_r+0x28>
 800b8f8:	681c      	ldr	r4, [r3, #0]
 800b8fa:	685b      	ldr	r3, [r3, #4]
 800b8fc:	6053      	str	r3, [r2, #4]
 800b8fe:	4421      	add	r1, r4
 800b900:	6011      	str	r1, [r2, #0]
 800b902:	e7d7      	b.n	800b8b4 <_free_r+0x28>
 800b904:	d902      	bls.n	800b90c <_free_r+0x80>
 800b906:	230c      	movs	r3, #12
 800b908:	6003      	str	r3, [r0, #0]
 800b90a:	e7d3      	b.n	800b8b4 <_free_r+0x28>
 800b90c:	6825      	ldr	r5, [r4, #0]
 800b90e:	1961      	adds	r1, r4, r5
 800b910:	428b      	cmp	r3, r1
 800b912:	bf04      	itt	eq
 800b914:	6819      	ldreq	r1, [r3, #0]
 800b916:	685b      	ldreq	r3, [r3, #4]
 800b918:	6063      	str	r3, [r4, #4]
 800b91a:	bf04      	itt	eq
 800b91c:	1949      	addeq	r1, r1, r5
 800b91e:	6021      	streq	r1, [r4, #0]
 800b920:	6054      	str	r4, [r2, #4]
 800b922:	e7c7      	b.n	800b8b4 <_free_r+0x28>
 800b924:	b003      	add	sp, #12
 800b926:	bd30      	pop	{r4, r5, pc}
 800b928:	20001e18 	.word	0x20001e18

0800b92c <__ssputs_r>:
 800b92c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b930:	688e      	ldr	r6, [r1, #8]
 800b932:	429e      	cmp	r6, r3
 800b934:	4682      	mov	sl, r0
 800b936:	460c      	mov	r4, r1
 800b938:	4690      	mov	r8, r2
 800b93a:	461f      	mov	r7, r3
 800b93c:	d838      	bhi.n	800b9b0 <__ssputs_r+0x84>
 800b93e:	898a      	ldrh	r2, [r1, #12]
 800b940:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b944:	d032      	beq.n	800b9ac <__ssputs_r+0x80>
 800b946:	6825      	ldr	r5, [r4, #0]
 800b948:	6909      	ldr	r1, [r1, #16]
 800b94a:	eba5 0901 	sub.w	r9, r5, r1
 800b94e:	6965      	ldr	r5, [r4, #20]
 800b950:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b954:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b958:	3301      	adds	r3, #1
 800b95a:	444b      	add	r3, r9
 800b95c:	106d      	asrs	r5, r5, #1
 800b95e:	429d      	cmp	r5, r3
 800b960:	bf38      	it	cc
 800b962:	461d      	movcc	r5, r3
 800b964:	0553      	lsls	r3, r2, #21
 800b966:	d531      	bpl.n	800b9cc <__ssputs_r+0xa0>
 800b968:	4629      	mov	r1, r5
 800b96a:	f7ff fe61 	bl	800b630 <_malloc_r>
 800b96e:	4606      	mov	r6, r0
 800b970:	b950      	cbnz	r0, 800b988 <__ssputs_r+0x5c>
 800b972:	230c      	movs	r3, #12
 800b974:	f8ca 3000 	str.w	r3, [sl]
 800b978:	89a3      	ldrh	r3, [r4, #12]
 800b97a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b97e:	81a3      	strh	r3, [r4, #12]
 800b980:	f04f 30ff 	mov.w	r0, #4294967295
 800b984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b988:	6921      	ldr	r1, [r4, #16]
 800b98a:	464a      	mov	r2, r9
 800b98c:	f7ff fe3a 	bl	800b604 <memcpy>
 800b990:	89a3      	ldrh	r3, [r4, #12]
 800b992:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b99a:	81a3      	strh	r3, [r4, #12]
 800b99c:	6126      	str	r6, [r4, #16]
 800b99e:	6165      	str	r5, [r4, #20]
 800b9a0:	444e      	add	r6, r9
 800b9a2:	eba5 0509 	sub.w	r5, r5, r9
 800b9a6:	6026      	str	r6, [r4, #0]
 800b9a8:	60a5      	str	r5, [r4, #8]
 800b9aa:	463e      	mov	r6, r7
 800b9ac:	42be      	cmp	r6, r7
 800b9ae:	d900      	bls.n	800b9b2 <__ssputs_r+0x86>
 800b9b0:	463e      	mov	r6, r7
 800b9b2:	4632      	mov	r2, r6
 800b9b4:	6820      	ldr	r0, [r4, #0]
 800b9b6:	4641      	mov	r1, r8
 800b9b8:	f000 ff3e 	bl	800c838 <memmove>
 800b9bc:	68a3      	ldr	r3, [r4, #8]
 800b9be:	6822      	ldr	r2, [r4, #0]
 800b9c0:	1b9b      	subs	r3, r3, r6
 800b9c2:	4432      	add	r2, r6
 800b9c4:	60a3      	str	r3, [r4, #8]
 800b9c6:	6022      	str	r2, [r4, #0]
 800b9c8:	2000      	movs	r0, #0
 800b9ca:	e7db      	b.n	800b984 <__ssputs_r+0x58>
 800b9cc:	462a      	mov	r2, r5
 800b9ce:	f000 ff4d 	bl	800c86c <_realloc_r>
 800b9d2:	4606      	mov	r6, r0
 800b9d4:	2800      	cmp	r0, #0
 800b9d6:	d1e1      	bne.n	800b99c <__ssputs_r+0x70>
 800b9d8:	6921      	ldr	r1, [r4, #16]
 800b9da:	4650      	mov	r0, sl
 800b9dc:	f7ff ff56 	bl	800b88c <_free_r>
 800b9e0:	e7c7      	b.n	800b972 <__ssputs_r+0x46>
	...

0800b9e4 <_svfiprintf_r>:
 800b9e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9e8:	4698      	mov	r8, r3
 800b9ea:	898b      	ldrh	r3, [r1, #12]
 800b9ec:	061b      	lsls	r3, r3, #24
 800b9ee:	b09d      	sub	sp, #116	; 0x74
 800b9f0:	4607      	mov	r7, r0
 800b9f2:	460d      	mov	r5, r1
 800b9f4:	4614      	mov	r4, r2
 800b9f6:	d50e      	bpl.n	800ba16 <_svfiprintf_r+0x32>
 800b9f8:	690b      	ldr	r3, [r1, #16]
 800b9fa:	b963      	cbnz	r3, 800ba16 <_svfiprintf_r+0x32>
 800b9fc:	2140      	movs	r1, #64	; 0x40
 800b9fe:	f7ff fe17 	bl	800b630 <_malloc_r>
 800ba02:	6028      	str	r0, [r5, #0]
 800ba04:	6128      	str	r0, [r5, #16]
 800ba06:	b920      	cbnz	r0, 800ba12 <_svfiprintf_r+0x2e>
 800ba08:	230c      	movs	r3, #12
 800ba0a:	603b      	str	r3, [r7, #0]
 800ba0c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba10:	e0d1      	b.n	800bbb6 <_svfiprintf_r+0x1d2>
 800ba12:	2340      	movs	r3, #64	; 0x40
 800ba14:	616b      	str	r3, [r5, #20]
 800ba16:	2300      	movs	r3, #0
 800ba18:	9309      	str	r3, [sp, #36]	; 0x24
 800ba1a:	2320      	movs	r3, #32
 800ba1c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba20:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba24:	2330      	movs	r3, #48	; 0x30
 800ba26:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bbd0 <_svfiprintf_r+0x1ec>
 800ba2a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba2e:	f04f 0901 	mov.w	r9, #1
 800ba32:	4623      	mov	r3, r4
 800ba34:	469a      	mov	sl, r3
 800ba36:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba3a:	b10a      	cbz	r2, 800ba40 <_svfiprintf_r+0x5c>
 800ba3c:	2a25      	cmp	r2, #37	; 0x25
 800ba3e:	d1f9      	bne.n	800ba34 <_svfiprintf_r+0x50>
 800ba40:	ebba 0b04 	subs.w	fp, sl, r4
 800ba44:	d00b      	beq.n	800ba5e <_svfiprintf_r+0x7a>
 800ba46:	465b      	mov	r3, fp
 800ba48:	4622      	mov	r2, r4
 800ba4a:	4629      	mov	r1, r5
 800ba4c:	4638      	mov	r0, r7
 800ba4e:	f7ff ff6d 	bl	800b92c <__ssputs_r>
 800ba52:	3001      	adds	r0, #1
 800ba54:	f000 80aa 	beq.w	800bbac <_svfiprintf_r+0x1c8>
 800ba58:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba5a:	445a      	add	r2, fp
 800ba5c:	9209      	str	r2, [sp, #36]	; 0x24
 800ba5e:	f89a 3000 	ldrb.w	r3, [sl]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	f000 80a2 	beq.w	800bbac <_svfiprintf_r+0x1c8>
 800ba68:	2300      	movs	r3, #0
 800ba6a:	f04f 32ff 	mov.w	r2, #4294967295
 800ba6e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ba72:	f10a 0a01 	add.w	sl, sl, #1
 800ba76:	9304      	str	r3, [sp, #16]
 800ba78:	9307      	str	r3, [sp, #28]
 800ba7a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ba7e:	931a      	str	r3, [sp, #104]	; 0x68
 800ba80:	4654      	mov	r4, sl
 800ba82:	2205      	movs	r2, #5
 800ba84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba88:	4851      	ldr	r0, [pc, #324]	; (800bbd0 <_svfiprintf_r+0x1ec>)
 800ba8a:	f7f4 fba9 	bl	80001e0 <memchr>
 800ba8e:	9a04      	ldr	r2, [sp, #16]
 800ba90:	b9d8      	cbnz	r0, 800baca <_svfiprintf_r+0xe6>
 800ba92:	06d0      	lsls	r0, r2, #27
 800ba94:	bf44      	itt	mi
 800ba96:	2320      	movmi	r3, #32
 800ba98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ba9c:	0711      	lsls	r1, r2, #28
 800ba9e:	bf44      	itt	mi
 800baa0:	232b      	movmi	r3, #43	; 0x2b
 800baa2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800baa6:	f89a 3000 	ldrb.w	r3, [sl]
 800baaa:	2b2a      	cmp	r3, #42	; 0x2a
 800baac:	d015      	beq.n	800bada <_svfiprintf_r+0xf6>
 800baae:	9a07      	ldr	r2, [sp, #28]
 800bab0:	4654      	mov	r4, sl
 800bab2:	2000      	movs	r0, #0
 800bab4:	f04f 0c0a 	mov.w	ip, #10
 800bab8:	4621      	mov	r1, r4
 800baba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800babe:	3b30      	subs	r3, #48	; 0x30
 800bac0:	2b09      	cmp	r3, #9
 800bac2:	d94e      	bls.n	800bb62 <_svfiprintf_r+0x17e>
 800bac4:	b1b0      	cbz	r0, 800baf4 <_svfiprintf_r+0x110>
 800bac6:	9207      	str	r2, [sp, #28]
 800bac8:	e014      	b.n	800baf4 <_svfiprintf_r+0x110>
 800baca:	eba0 0308 	sub.w	r3, r0, r8
 800bace:	fa09 f303 	lsl.w	r3, r9, r3
 800bad2:	4313      	orrs	r3, r2
 800bad4:	9304      	str	r3, [sp, #16]
 800bad6:	46a2      	mov	sl, r4
 800bad8:	e7d2      	b.n	800ba80 <_svfiprintf_r+0x9c>
 800bada:	9b03      	ldr	r3, [sp, #12]
 800badc:	1d19      	adds	r1, r3, #4
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	9103      	str	r1, [sp, #12]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	bfbb      	ittet	lt
 800bae6:	425b      	neglt	r3, r3
 800bae8:	f042 0202 	orrlt.w	r2, r2, #2
 800baec:	9307      	strge	r3, [sp, #28]
 800baee:	9307      	strlt	r3, [sp, #28]
 800baf0:	bfb8      	it	lt
 800baf2:	9204      	strlt	r2, [sp, #16]
 800baf4:	7823      	ldrb	r3, [r4, #0]
 800baf6:	2b2e      	cmp	r3, #46	; 0x2e
 800baf8:	d10c      	bne.n	800bb14 <_svfiprintf_r+0x130>
 800bafa:	7863      	ldrb	r3, [r4, #1]
 800bafc:	2b2a      	cmp	r3, #42	; 0x2a
 800bafe:	d135      	bne.n	800bb6c <_svfiprintf_r+0x188>
 800bb00:	9b03      	ldr	r3, [sp, #12]
 800bb02:	1d1a      	adds	r2, r3, #4
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	9203      	str	r2, [sp, #12]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	bfb8      	it	lt
 800bb0c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb10:	3402      	adds	r4, #2
 800bb12:	9305      	str	r3, [sp, #20]
 800bb14:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bbe0 <_svfiprintf_r+0x1fc>
 800bb18:	7821      	ldrb	r1, [r4, #0]
 800bb1a:	2203      	movs	r2, #3
 800bb1c:	4650      	mov	r0, sl
 800bb1e:	f7f4 fb5f 	bl	80001e0 <memchr>
 800bb22:	b140      	cbz	r0, 800bb36 <_svfiprintf_r+0x152>
 800bb24:	2340      	movs	r3, #64	; 0x40
 800bb26:	eba0 000a 	sub.w	r0, r0, sl
 800bb2a:	fa03 f000 	lsl.w	r0, r3, r0
 800bb2e:	9b04      	ldr	r3, [sp, #16]
 800bb30:	4303      	orrs	r3, r0
 800bb32:	3401      	adds	r4, #1
 800bb34:	9304      	str	r3, [sp, #16]
 800bb36:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb3a:	4826      	ldr	r0, [pc, #152]	; (800bbd4 <_svfiprintf_r+0x1f0>)
 800bb3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb40:	2206      	movs	r2, #6
 800bb42:	f7f4 fb4d 	bl	80001e0 <memchr>
 800bb46:	2800      	cmp	r0, #0
 800bb48:	d038      	beq.n	800bbbc <_svfiprintf_r+0x1d8>
 800bb4a:	4b23      	ldr	r3, [pc, #140]	; (800bbd8 <_svfiprintf_r+0x1f4>)
 800bb4c:	bb1b      	cbnz	r3, 800bb96 <_svfiprintf_r+0x1b2>
 800bb4e:	9b03      	ldr	r3, [sp, #12]
 800bb50:	3307      	adds	r3, #7
 800bb52:	f023 0307 	bic.w	r3, r3, #7
 800bb56:	3308      	adds	r3, #8
 800bb58:	9303      	str	r3, [sp, #12]
 800bb5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb5c:	4433      	add	r3, r6
 800bb5e:	9309      	str	r3, [sp, #36]	; 0x24
 800bb60:	e767      	b.n	800ba32 <_svfiprintf_r+0x4e>
 800bb62:	fb0c 3202 	mla	r2, ip, r2, r3
 800bb66:	460c      	mov	r4, r1
 800bb68:	2001      	movs	r0, #1
 800bb6a:	e7a5      	b.n	800bab8 <_svfiprintf_r+0xd4>
 800bb6c:	2300      	movs	r3, #0
 800bb6e:	3401      	adds	r4, #1
 800bb70:	9305      	str	r3, [sp, #20]
 800bb72:	4619      	mov	r1, r3
 800bb74:	f04f 0c0a 	mov.w	ip, #10
 800bb78:	4620      	mov	r0, r4
 800bb7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bb7e:	3a30      	subs	r2, #48	; 0x30
 800bb80:	2a09      	cmp	r2, #9
 800bb82:	d903      	bls.n	800bb8c <_svfiprintf_r+0x1a8>
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d0c5      	beq.n	800bb14 <_svfiprintf_r+0x130>
 800bb88:	9105      	str	r1, [sp, #20]
 800bb8a:	e7c3      	b.n	800bb14 <_svfiprintf_r+0x130>
 800bb8c:	fb0c 2101 	mla	r1, ip, r1, r2
 800bb90:	4604      	mov	r4, r0
 800bb92:	2301      	movs	r3, #1
 800bb94:	e7f0      	b.n	800bb78 <_svfiprintf_r+0x194>
 800bb96:	ab03      	add	r3, sp, #12
 800bb98:	9300      	str	r3, [sp, #0]
 800bb9a:	462a      	mov	r2, r5
 800bb9c:	4b0f      	ldr	r3, [pc, #60]	; (800bbdc <_svfiprintf_r+0x1f8>)
 800bb9e:	a904      	add	r1, sp, #16
 800bba0:	4638      	mov	r0, r7
 800bba2:	f3af 8000 	nop.w
 800bba6:	1c42      	adds	r2, r0, #1
 800bba8:	4606      	mov	r6, r0
 800bbaa:	d1d6      	bne.n	800bb5a <_svfiprintf_r+0x176>
 800bbac:	89ab      	ldrh	r3, [r5, #12]
 800bbae:	065b      	lsls	r3, r3, #25
 800bbb0:	f53f af2c 	bmi.w	800ba0c <_svfiprintf_r+0x28>
 800bbb4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbb6:	b01d      	add	sp, #116	; 0x74
 800bbb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbbc:	ab03      	add	r3, sp, #12
 800bbbe:	9300      	str	r3, [sp, #0]
 800bbc0:	462a      	mov	r2, r5
 800bbc2:	4b06      	ldr	r3, [pc, #24]	; (800bbdc <_svfiprintf_r+0x1f8>)
 800bbc4:	a904      	add	r1, sp, #16
 800bbc6:	4638      	mov	r0, r7
 800bbc8:	f000 fa4c 	bl	800c064 <_printf_i>
 800bbcc:	e7eb      	b.n	800bba6 <_svfiprintf_r+0x1c2>
 800bbce:	bf00      	nop
 800bbd0:	0800cabc 	.word	0x0800cabc
 800bbd4:	0800cac6 	.word	0x0800cac6
 800bbd8:	00000000 	.word	0x00000000
 800bbdc:	0800b92d 	.word	0x0800b92d
 800bbe0:	0800cac2 	.word	0x0800cac2

0800bbe4 <_sungetc_r>:
 800bbe4:	b538      	push	{r3, r4, r5, lr}
 800bbe6:	1c4b      	adds	r3, r1, #1
 800bbe8:	4614      	mov	r4, r2
 800bbea:	d103      	bne.n	800bbf4 <_sungetc_r+0x10>
 800bbec:	f04f 35ff 	mov.w	r5, #4294967295
 800bbf0:	4628      	mov	r0, r5
 800bbf2:	bd38      	pop	{r3, r4, r5, pc}
 800bbf4:	8993      	ldrh	r3, [r2, #12]
 800bbf6:	f023 0320 	bic.w	r3, r3, #32
 800bbfa:	8193      	strh	r3, [r2, #12]
 800bbfc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bbfe:	6852      	ldr	r2, [r2, #4]
 800bc00:	b2cd      	uxtb	r5, r1
 800bc02:	b18b      	cbz	r3, 800bc28 <_sungetc_r+0x44>
 800bc04:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bc06:	4293      	cmp	r3, r2
 800bc08:	dd08      	ble.n	800bc1c <_sungetc_r+0x38>
 800bc0a:	6823      	ldr	r3, [r4, #0]
 800bc0c:	1e5a      	subs	r2, r3, #1
 800bc0e:	6022      	str	r2, [r4, #0]
 800bc10:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bc14:	6863      	ldr	r3, [r4, #4]
 800bc16:	3301      	adds	r3, #1
 800bc18:	6063      	str	r3, [r4, #4]
 800bc1a:	e7e9      	b.n	800bbf0 <_sungetc_r+0xc>
 800bc1c:	4621      	mov	r1, r4
 800bc1e:	f000 fdd1 	bl	800c7c4 <__submore>
 800bc22:	2800      	cmp	r0, #0
 800bc24:	d0f1      	beq.n	800bc0a <_sungetc_r+0x26>
 800bc26:	e7e1      	b.n	800bbec <_sungetc_r+0x8>
 800bc28:	6921      	ldr	r1, [r4, #16]
 800bc2a:	6823      	ldr	r3, [r4, #0]
 800bc2c:	b151      	cbz	r1, 800bc44 <_sungetc_r+0x60>
 800bc2e:	4299      	cmp	r1, r3
 800bc30:	d208      	bcs.n	800bc44 <_sungetc_r+0x60>
 800bc32:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bc36:	42a9      	cmp	r1, r5
 800bc38:	d104      	bne.n	800bc44 <_sungetc_r+0x60>
 800bc3a:	3b01      	subs	r3, #1
 800bc3c:	3201      	adds	r2, #1
 800bc3e:	6023      	str	r3, [r4, #0]
 800bc40:	6062      	str	r2, [r4, #4]
 800bc42:	e7d5      	b.n	800bbf0 <_sungetc_r+0xc>
 800bc44:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800bc48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc4c:	6363      	str	r3, [r4, #52]	; 0x34
 800bc4e:	2303      	movs	r3, #3
 800bc50:	63a3      	str	r3, [r4, #56]	; 0x38
 800bc52:	4623      	mov	r3, r4
 800bc54:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bc58:	6023      	str	r3, [r4, #0]
 800bc5a:	2301      	movs	r3, #1
 800bc5c:	e7dc      	b.n	800bc18 <_sungetc_r+0x34>

0800bc5e <__ssrefill_r>:
 800bc5e:	b510      	push	{r4, lr}
 800bc60:	460c      	mov	r4, r1
 800bc62:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bc64:	b169      	cbz	r1, 800bc82 <__ssrefill_r+0x24>
 800bc66:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bc6a:	4299      	cmp	r1, r3
 800bc6c:	d001      	beq.n	800bc72 <__ssrefill_r+0x14>
 800bc6e:	f7ff fe0d 	bl	800b88c <_free_r>
 800bc72:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc74:	6063      	str	r3, [r4, #4]
 800bc76:	2000      	movs	r0, #0
 800bc78:	6360      	str	r0, [r4, #52]	; 0x34
 800bc7a:	b113      	cbz	r3, 800bc82 <__ssrefill_r+0x24>
 800bc7c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bc7e:	6023      	str	r3, [r4, #0]
 800bc80:	bd10      	pop	{r4, pc}
 800bc82:	6923      	ldr	r3, [r4, #16]
 800bc84:	6023      	str	r3, [r4, #0]
 800bc86:	2300      	movs	r3, #0
 800bc88:	6063      	str	r3, [r4, #4]
 800bc8a:	89a3      	ldrh	r3, [r4, #12]
 800bc8c:	f043 0320 	orr.w	r3, r3, #32
 800bc90:	81a3      	strh	r3, [r4, #12]
 800bc92:	f04f 30ff 	mov.w	r0, #4294967295
 800bc96:	e7f3      	b.n	800bc80 <__ssrefill_r+0x22>

0800bc98 <__ssvfiscanf_r>:
 800bc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9c:	460c      	mov	r4, r1
 800bc9e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800bca2:	2100      	movs	r1, #0
 800bca4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bca8:	49b2      	ldr	r1, [pc, #712]	; (800bf74 <__ssvfiscanf_r+0x2dc>)
 800bcaa:	91a0      	str	r1, [sp, #640]	; 0x280
 800bcac:	f10d 0804 	add.w	r8, sp, #4
 800bcb0:	49b1      	ldr	r1, [pc, #708]	; (800bf78 <__ssvfiscanf_r+0x2e0>)
 800bcb2:	4fb2      	ldr	r7, [pc, #712]	; (800bf7c <__ssvfiscanf_r+0x2e4>)
 800bcb4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800bf80 <__ssvfiscanf_r+0x2e8>
 800bcb8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bcbc:	4606      	mov	r6, r0
 800bcbe:	91a1      	str	r1, [sp, #644]	; 0x284
 800bcc0:	9300      	str	r3, [sp, #0]
 800bcc2:	f892 a000 	ldrb.w	sl, [r2]
 800bcc6:	f1ba 0f00 	cmp.w	sl, #0
 800bcca:	f000 8151 	beq.w	800bf70 <__ssvfiscanf_r+0x2d8>
 800bcce:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800bcd2:	f013 0308 	ands.w	r3, r3, #8
 800bcd6:	f102 0501 	add.w	r5, r2, #1
 800bcda:	d019      	beq.n	800bd10 <__ssvfiscanf_r+0x78>
 800bcdc:	6863      	ldr	r3, [r4, #4]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	dd0f      	ble.n	800bd02 <__ssvfiscanf_r+0x6a>
 800bce2:	6823      	ldr	r3, [r4, #0]
 800bce4:	781a      	ldrb	r2, [r3, #0]
 800bce6:	5cba      	ldrb	r2, [r7, r2]
 800bce8:	0712      	lsls	r2, r2, #28
 800bcea:	d401      	bmi.n	800bcf0 <__ssvfiscanf_r+0x58>
 800bcec:	462a      	mov	r2, r5
 800bcee:	e7e8      	b.n	800bcc2 <__ssvfiscanf_r+0x2a>
 800bcf0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bcf2:	3201      	adds	r2, #1
 800bcf4:	9245      	str	r2, [sp, #276]	; 0x114
 800bcf6:	6862      	ldr	r2, [r4, #4]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	3a01      	subs	r2, #1
 800bcfc:	6062      	str	r2, [r4, #4]
 800bcfe:	6023      	str	r3, [r4, #0]
 800bd00:	e7ec      	b.n	800bcdc <__ssvfiscanf_r+0x44>
 800bd02:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bd04:	4621      	mov	r1, r4
 800bd06:	4630      	mov	r0, r6
 800bd08:	4798      	blx	r3
 800bd0a:	2800      	cmp	r0, #0
 800bd0c:	d0e9      	beq.n	800bce2 <__ssvfiscanf_r+0x4a>
 800bd0e:	e7ed      	b.n	800bcec <__ssvfiscanf_r+0x54>
 800bd10:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800bd14:	f040 8083 	bne.w	800be1e <__ssvfiscanf_r+0x186>
 800bd18:	9341      	str	r3, [sp, #260]	; 0x104
 800bd1a:	9343      	str	r3, [sp, #268]	; 0x10c
 800bd1c:	7853      	ldrb	r3, [r2, #1]
 800bd1e:	2b2a      	cmp	r3, #42	; 0x2a
 800bd20:	bf02      	ittt	eq
 800bd22:	2310      	moveq	r3, #16
 800bd24:	1c95      	addeq	r5, r2, #2
 800bd26:	9341      	streq	r3, [sp, #260]	; 0x104
 800bd28:	220a      	movs	r2, #10
 800bd2a:	46ab      	mov	fp, r5
 800bd2c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800bd30:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800bd34:	2b09      	cmp	r3, #9
 800bd36:	d91d      	bls.n	800bd74 <__ssvfiscanf_r+0xdc>
 800bd38:	4891      	ldr	r0, [pc, #580]	; (800bf80 <__ssvfiscanf_r+0x2e8>)
 800bd3a:	2203      	movs	r2, #3
 800bd3c:	f7f4 fa50 	bl	80001e0 <memchr>
 800bd40:	b140      	cbz	r0, 800bd54 <__ssvfiscanf_r+0xbc>
 800bd42:	2301      	movs	r3, #1
 800bd44:	eba0 0009 	sub.w	r0, r0, r9
 800bd48:	fa03 f000 	lsl.w	r0, r3, r0
 800bd4c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bd4e:	4318      	orrs	r0, r3
 800bd50:	9041      	str	r0, [sp, #260]	; 0x104
 800bd52:	465d      	mov	r5, fp
 800bd54:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bd58:	2b78      	cmp	r3, #120	; 0x78
 800bd5a:	d806      	bhi.n	800bd6a <__ssvfiscanf_r+0xd2>
 800bd5c:	2b57      	cmp	r3, #87	; 0x57
 800bd5e:	d810      	bhi.n	800bd82 <__ssvfiscanf_r+0xea>
 800bd60:	2b25      	cmp	r3, #37	; 0x25
 800bd62:	d05c      	beq.n	800be1e <__ssvfiscanf_r+0x186>
 800bd64:	d856      	bhi.n	800be14 <__ssvfiscanf_r+0x17c>
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d074      	beq.n	800be54 <__ssvfiscanf_r+0x1bc>
 800bd6a:	2303      	movs	r3, #3
 800bd6c:	9347      	str	r3, [sp, #284]	; 0x11c
 800bd6e:	230a      	movs	r3, #10
 800bd70:	9342      	str	r3, [sp, #264]	; 0x108
 800bd72:	e081      	b.n	800be78 <__ssvfiscanf_r+0x1e0>
 800bd74:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bd76:	fb02 1303 	mla	r3, r2, r3, r1
 800bd7a:	3b30      	subs	r3, #48	; 0x30
 800bd7c:	9343      	str	r3, [sp, #268]	; 0x10c
 800bd7e:	465d      	mov	r5, fp
 800bd80:	e7d3      	b.n	800bd2a <__ssvfiscanf_r+0x92>
 800bd82:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bd86:	2a20      	cmp	r2, #32
 800bd88:	d8ef      	bhi.n	800bd6a <__ssvfiscanf_r+0xd2>
 800bd8a:	a101      	add	r1, pc, #4	; (adr r1, 800bd90 <__ssvfiscanf_r+0xf8>)
 800bd8c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bd90:	0800be63 	.word	0x0800be63
 800bd94:	0800bd6b 	.word	0x0800bd6b
 800bd98:	0800bd6b 	.word	0x0800bd6b
 800bd9c:	0800bec1 	.word	0x0800bec1
 800bda0:	0800bd6b 	.word	0x0800bd6b
 800bda4:	0800bd6b 	.word	0x0800bd6b
 800bda8:	0800bd6b 	.word	0x0800bd6b
 800bdac:	0800bd6b 	.word	0x0800bd6b
 800bdb0:	0800bd6b 	.word	0x0800bd6b
 800bdb4:	0800bd6b 	.word	0x0800bd6b
 800bdb8:	0800bd6b 	.word	0x0800bd6b
 800bdbc:	0800bed7 	.word	0x0800bed7
 800bdc0:	0800bead 	.word	0x0800bead
 800bdc4:	0800be1b 	.word	0x0800be1b
 800bdc8:	0800be1b 	.word	0x0800be1b
 800bdcc:	0800be1b 	.word	0x0800be1b
 800bdd0:	0800bd6b 	.word	0x0800bd6b
 800bdd4:	0800beb1 	.word	0x0800beb1
 800bdd8:	0800bd6b 	.word	0x0800bd6b
 800bddc:	0800bd6b 	.word	0x0800bd6b
 800bde0:	0800bd6b 	.word	0x0800bd6b
 800bde4:	0800bd6b 	.word	0x0800bd6b
 800bde8:	0800bee7 	.word	0x0800bee7
 800bdec:	0800beb9 	.word	0x0800beb9
 800bdf0:	0800be5b 	.word	0x0800be5b
 800bdf4:	0800bd6b 	.word	0x0800bd6b
 800bdf8:	0800bd6b 	.word	0x0800bd6b
 800bdfc:	0800bee3 	.word	0x0800bee3
 800be00:	0800bd6b 	.word	0x0800bd6b
 800be04:	0800bead 	.word	0x0800bead
 800be08:	0800bd6b 	.word	0x0800bd6b
 800be0c:	0800bd6b 	.word	0x0800bd6b
 800be10:	0800be63 	.word	0x0800be63
 800be14:	3b45      	subs	r3, #69	; 0x45
 800be16:	2b02      	cmp	r3, #2
 800be18:	d8a7      	bhi.n	800bd6a <__ssvfiscanf_r+0xd2>
 800be1a:	2305      	movs	r3, #5
 800be1c:	e02b      	b.n	800be76 <__ssvfiscanf_r+0x1de>
 800be1e:	6863      	ldr	r3, [r4, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	dd0d      	ble.n	800be40 <__ssvfiscanf_r+0x1a8>
 800be24:	6823      	ldr	r3, [r4, #0]
 800be26:	781a      	ldrb	r2, [r3, #0]
 800be28:	4552      	cmp	r2, sl
 800be2a:	f040 80a1 	bne.w	800bf70 <__ssvfiscanf_r+0x2d8>
 800be2e:	3301      	adds	r3, #1
 800be30:	6862      	ldr	r2, [r4, #4]
 800be32:	6023      	str	r3, [r4, #0]
 800be34:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800be36:	3a01      	subs	r2, #1
 800be38:	3301      	adds	r3, #1
 800be3a:	6062      	str	r2, [r4, #4]
 800be3c:	9345      	str	r3, [sp, #276]	; 0x114
 800be3e:	e755      	b.n	800bcec <__ssvfiscanf_r+0x54>
 800be40:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800be42:	4621      	mov	r1, r4
 800be44:	4630      	mov	r0, r6
 800be46:	4798      	blx	r3
 800be48:	2800      	cmp	r0, #0
 800be4a:	d0eb      	beq.n	800be24 <__ssvfiscanf_r+0x18c>
 800be4c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800be4e:	2800      	cmp	r0, #0
 800be50:	f040 8084 	bne.w	800bf5c <__ssvfiscanf_r+0x2c4>
 800be54:	f04f 30ff 	mov.w	r0, #4294967295
 800be58:	e086      	b.n	800bf68 <__ssvfiscanf_r+0x2d0>
 800be5a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800be5c:	f042 0220 	orr.w	r2, r2, #32
 800be60:	9241      	str	r2, [sp, #260]	; 0x104
 800be62:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800be64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800be68:	9241      	str	r2, [sp, #260]	; 0x104
 800be6a:	2210      	movs	r2, #16
 800be6c:	2b6f      	cmp	r3, #111	; 0x6f
 800be6e:	9242      	str	r2, [sp, #264]	; 0x108
 800be70:	bf34      	ite	cc
 800be72:	2303      	movcc	r3, #3
 800be74:	2304      	movcs	r3, #4
 800be76:	9347      	str	r3, [sp, #284]	; 0x11c
 800be78:	6863      	ldr	r3, [r4, #4]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	dd41      	ble.n	800bf02 <__ssvfiscanf_r+0x26a>
 800be7e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800be80:	0659      	lsls	r1, r3, #25
 800be82:	d404      	bmi.n	800be8e <__ssvfiscanf_r+0x1f6>
 800be84:	6823      	ldr	r3, [r4, #0]
 800be86:	781a      	ldrb	r2, [r3, #0]
 800be88:	5cba      	ldrb	r2, [r7, r2]
 800be8a:	0712      	lsls	r2, r2, #28
 800be8c:	d440      	bmi.n	800bf10 <__ssvfiscanf_r+0x278>
 800be8e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800be90:	2b02      	cmp	r3, #2
 800be92:	dc4f      	bgt.n	800bf34 <__ssvfiscanf_r+0x29c>
 800be94:	466b      	mov	r3, sp
 800be96:	4622      	mov	r2, r4
 800be98:	a941      	add	r1, sp, #260	; 0x104
 800be9a:	4630      	mov	r0, r6
 800be9c:	f000 fa08 	bl	800c2b0 <_scanf_chars>
 800bea0:	2801      	cmp	r0, #1
 800bea2:	d065      	beq.n	800bf70 <__ssvfiscanf_r+0x2d8>
 800bea4:	2802      	cmp	r0, #2
 800bea6:	f47f af21 	bne.w	800bcec <__ssvfiscanf_r+0x54>
 800beaa:	e7cf      	b.n	800be4c <__ssvfiscanf_r+0x1b4>
 800beac:	220a      	movs	r2, #10
 800beae:	e7dd      	b.n	800be6c <__ssvfiscanf_r+0x1d4>
 800beb0:	2300      	movs	r3, #0
 800beb2:	9342      	str	r3, [sp, #264]	; 0x108
 800beb4:	2303      	movs	r3, #3
 800beb6:	e7de      	b.n	800be76 <__ssvfiscanf_r+0x1de>
 800beb8:	2308      	movs	r3, #8
 800beba:	9342      	str	r3, [sp, #264]	; 0x108
 800bebc:	2304      	movs	r3, #4
 800bebe:	e7da      	b.n	800be76 <__ssvfiscanf_r+0x1de>
 800bec0:	4629      	mov	r1, r5
 800bec2:	4640      	mov	r0, r8
 800bec4:	f000 fb40 	bl	800c548 <__sccl>
 800bec8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800beca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bece:	9341      	str	r3, [sp, #260]	; 0x104
 800bed0:	4605      	mov	r5, r0
 800bed2:	2301      	movs	r3, #1
 800bed4:	e7cf      	b.n	800be76 <__ssvfiscanf_r+0x1de>
 800bed6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bedc:	9341      	str	r3, [sp, #260]	; 0x104
 800bede:	2300      	movs	r3, #0
 800bee0:	e7c9      	b.n	800be76 <__ssvfiscanf_r+0x1de>
 800bee2:	2302      	movs	r3, #2
 800bee4:	e7c7      	b.n	800be76 <__ssvfiscanf_r+0x1de>
 800bee6:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bee8:	06c3      	lsls	r3, r0, #27
 800beea:	f53f aeff 	bmi.w	800bcec <__ssvfiscanf_r+0x54>
 800beee:	9b00      	ldr	r3, [sp, #0]
 800bef0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bef2:	1d19      	adds	r1, r3, #4
 800bef4:	9100      	str	r1, [sp, #0]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	07c0      	lsls	r0, r0, #31
 800befa:	bf4c      	ite	mi
 800befc:	801a      	strhmi	r2, [r3, #0]
 800befe:	601a      	strpl	r2, [r3, #0]
 800bf00:	e6f4      	b.n	800bcec <__ssvfiscanf_r+0x54>
 800bf02:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bf04:	4621      	mov	r1, r4
 800bf06:	4630      	mov	r0, r6
 800bf08:	4798      	blx	r3
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	d0b7      	beq.n	800be7e <__ssvfiscanf_r+0x1e6>
 800bf0e:	e79d      	b.n	800be4c <__ssvfiscanf_r+0x1b4>
 800bf10:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bf12:	3201      	adds	r2, #1
 800bf14:	9245      	str	r2, [sp, #276]	; 0x114
 800bf16:	6862      	ldr	r2, [r4, #4]
 800bf18:	3a01      	subs	r2, #1
 800bf1a:	2a00      	cmp	r2, #0
 800bf1c:	6062      	str	r2, [r4, #4]
 800bf1e:	dd02      	ble.n	800bf26 <__ssvfiscanf_r+0x28e>
 800bf20:	3301      	adds	r3, #1
 800bf22:	6023      	str	r3, [r4, #0]
 800bf24:	e7ae      	b.n	800be84 <__ssvfiscanf_r+0x1ec>
 800bf26:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bf28:	4621      	mov	r1, r4
 800bf2a:	4630      	mov	r0, r6
 800bf2c:	4798      	blx	r3
 800bf2e:	2800      	cmp	r0, #0
 800bf30:	d0a8      	beq.n	800be84 <__ssvfiscanf_r+0x1ec>
 800bf32:	e78b      	b.n	800be4c <__ssvfiscanf_r+0x1b4>
 800bf34:	2b04      	cmp	r3, #4
 800bf36:	dc06      	bgt.n	800bf46 <__ssvfiscanf_r+0x2ae>
 800bf38:	466b      	mov	r3, sp
 800bf3a:	4622      	mov	r2, r4
 800bf3c:	a941      	add	r1, sp, #260	; 0x104
 800bf3e:	4630      	mov	r0, r6
 800bf40:	f000 fa0e 	bl	800c360 <_scanf_i>
 800bf44:	e7ac      	b.n	800bea0 <__ssvfiscanf_r+0x208>
 800bf46:	4b0f      	ldr	r3, [pc, #60]	; (800bf84 <__ssvfiscanf_r+0x2ec>)
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f43f aecf 	beq.w	800bcec <__ssvfiscanf_r+0x54>
 800bf4e:	466b      	mov	r3, sp
 800bf50:	4622      	mov	r2, r4
 800bf52:	a941      	add	r1, sp, #260	; 0x104
 800bf54:	4630      	mov	r0, r6
 800bf56:	f3af 8000 	nop.w
 800bf5a:	e7a1      	b.n	800bea0 <__ssvfiscanf_r+0x208>
 800bf5c:	89a3      	ldrh	r3, [r4, #12]
 800bf5e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bf62:	bf18      	it	ne
 800bf64:	f04f 30ff 	movne.w	r0, #4294967295
 800bf68:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800bf6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf70:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bf72:	e7f9      	b.n	800bf68 <__ssvfiscanf_r+0x2d0>
 800bf74:	0800bbe5 	.word	0x0800bbe5
 800bf78:	0800bc5f 	.word	0x0800bc5f
 800bf7c:	0800cb0b 	.word	0x0800cb0b
 800bf80:	0800cac2 	.word	0x0800cac2
 800bf84:	00000000 	.word	0x00000000

0800bf88 <_printf_common>:
 800bf88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf8c:	4616      	mov	r6, r2
 800bf8e:	4699      	mov	r9, r3
 800bf90:	688a      	ldr	r2, [r1, #8]
 800bf92:	690b      	ldr	r3, [r1, #16]
 800bf94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	bfb8      	it	lt
 800bf9c:	4613      	movlt	r3, r2
 800bf9e:	6033      	str	r3, [r6, #0]
 800bfa0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bfa4:	4607      	mov	r7, r0
 800bfa6:	460c      	mov	r4, r1
 800bfa8:	b10a      	cbz	r2, 800bfae <_printf_common+0x26>
 800bfaa:	3301      	adds	r3, #1
 800bfac:	6033      	str	r3, [r6, #0]
 800bfae:	6823      	ldr	r3, [r4, #0]
 800bfb0:	0699      	lsls	r1, r3, #26
 800bfb2:	bf42      	ittt	mi
 800bfb4:	6833      	ldrmi	r3, [r6, #0]
 800bfb6:	3302      	addmi	r3, #2
 800bfb8:	6033      	strmi	r3, [r6, #0]
 800bfba:	6825      	ldr	r5, [r4, #0]
 800bfbc:	f015 0506 	ands.w	r5, r5, #6
 800bfc0:	d106      	bne.n	800bfd0 <_printf_common+0x48>
 800bfc2:	f104 0a19 	add.w	sl, r4, #25
 800bfc6:	68e3      	ldr	r3, [r4, #12]
 800bfc8:	6832      	ldr	r2, [r6, #0]
 800bfca:	1a9b      	subs	r3, r3, r2
 800bfcc:	42ab      	cmp	r3, r5
 800bfce:	dc26      	bgt.n	800c01e <_printf_common+0x96>
 800bfd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bfd4:	1e13      	subs	r3, r2, #0
 800bfd6:	6822      	ldr	r2, [r4, #0]
 800bfd8:	bf18      	it	ne
 800bfda:	2301      	movne	r3, #1
 800bfdc:	0692      	lsls	r2, r2, #26
 800bfde:	d42b      	bmi.n	800c038 <_printf_common+0xb0>
 800bfe0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bfe4:	4649      	mov	r1, r9
 800bfe6:	4638      	mov	r0, r7
 800bfe8:	47c0      	blx	r8
 800bfea:	3001      	adds	r0, #1
 800bfec:	d01e      	beq.n	800c02c <_printf_common+0xa4>
 800bfee:	6823      	ldr	r3, [r4, #0]
 800bff0:	68e5      	ldr	r5, [r4, #12]
 800bff2:	6832      	ldr	r2, [r6, #0]
 800bff4:	f003 0306 	and.w	r3, r3, #6
 800bff8:	2b04      	cmp	r3, #4
 800bffa:	bf08      	it	eq
 800bffc:	1aad      	subeq	r5, r5, r2
 800bffe:	68a3      	ldr	r3, [r4, #8]
 800c000:	6922      	ldr	r2, [r4, #16]
 800c002:	bf0c      	ite	eq
 800c004:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c008:	2500      	movne	r5, #0
 800c00a:	4293      	cmp	r3, r2
 800c00c:	bfc4      	itt	gt
 800c00e:	1a9b      	subgt	r3, r3, r2
 800c010:	18ed      	addgt	r5, r5, r3
 800c012:	2600      	movs	r6, #0
 800c014:	341a      	adds	r4, #26
 800c016:	42b5      	cmp	r5, r6
 800c018:	d11a      	bne.n	800c050 <_printf_common+0xc8>
 800c01a:	2000      	movs	r0, #0
 800c01c:	e008      	b.n	800c030 <_printf_common+0xa8>
 800c01e:	2301      	movs	r3, #1
 800c020:	4652      	mov	r2, sl
 800c022:	4649      	mov	r1, r9
 800c024:	4638      	mov	r0, r7
 800c026:	47c0      	blx	r8
 800c028:	3001      	adds	r0, #1
 800c02a:	d103      	bne.n	800c034 <_printf_common+0xac>
 800c02c:	f04f 30ff 	mov.w	r0, #4294967295
 800c030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c034:	3501      	adds	r5, #1
 800c036:	e7c6      	b.n	800bfc6 <_printf_common+0x3e>
 800c038:	18e1      	adds	r1, r4, r3
 800c03a:	1c5a      	adds	r2, r3, #1
 800c03c:	2030      	movs	r0, #48	; 0x30
 800c03e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c042:	4422      	add	r2, r4
 800c044:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c048:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c04c:	3302      	adds	r3, #2
 800c04e:	e7c7      	b.n	800bfe0 <_printf_common+0x58>
 800c050:	2301      	movs	r3, #1
 800c052:	4622      	mov	r2, r4
 800c054:	4649      	mov	r1, r9
 800c056:	4638      	mov	r0, r7
 800c058:	47c0      	blx	r8
 800c05a:	3001      	adds	r0, #1
 800c05c:	d0e6      	beq.n	800c02c <_printf_common+0xa4>
 800c05e:	3601      	adds	r6, #1
 800c060:	e7d9      	b.n	800c016 <_printf_common+0x8e>
	...

0800c064 <_printf_i>:
 800c064:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c068:	460c      	mov	r4, r1
 800c06a:	4691      	mov	r9, r2
 800c06c:	7e27      	ldrb	r7, [r4, #24]
 800c06e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800c070:	2f78      	cmp	r7, #120	; 0x78
 800c072:	4680      	mov	r8, r0
 800c074:	469a      	mov	sl, r3
 800c076:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c07a:	d807      	bhi.n	800c08c <_printf_i+0x28>
 800c07c:	2f62      	cmp	r7, #98	; 0x62
 800c07e:	d80a      	bhi.n	800c096 <_printf_i+0x32>
 800c080:	2f00      	cmp	r7, #0
 800c082:	f000 80d8 	beq.w	800c236 <_printf_i+0x1d2>
 800c086:	2f58      	cmp	r7, #88	; 0x58
 800c088:	f000 80a3 	beq.w	800c1d2 <_printf_i+0x16e>
 800c08c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c090:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c094:	e03a      	b.n	800c10c <_printf_i+0xa8>
 800c096:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c09a:	2b15      	cmp	r3, #21
 800c09c:	d8f6      	bhi.n	800c08c <_printf_i+0x28>
 800c09e:	a001      	add	r0, pc, #4	; (adr r0, 800c0a4 <_printf_i+0x40>)
 800c0a0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800c0a4:	0800c0fd 	.word	0x0800c0fd
 800c0a8:	0800c111 	.word	0x0800c111
 800c0ac:	0800c08d 	.word	0x0800c08d
 800c0b0:	0800c08d 	.word	0x0800c08d
 800c0b4:	0800c08d 	.word	0x0800c08d
 800c0b8:	0800c08d 	.word	0x0800c08d
 800c0bc:	0800c111 	.word	0x0800c111
 800c0c0:	0800c08d 	.word	0x0800c08d
 800c0c4:	0800c08d 	.word	0x0800c08d
 800c0c8:	0800c08d 	.word	0x0800c08d
 800c0cc:	0800c08d 	.word	0x0800c08d
 800c0d0:	0800c21d 	.word	0x0800c21d
 800c0d4:	0800c141 	.word	0x0800c141
 800c0d8:	0800c1ff 	.word	0x0800c1ff
 800c0dc:	0800c08d 	.word	0x0800c08d
 800c0e0:	0800c08d 	.word	0x0800c08d
 800c0e4:	0800c23f 	.word	0x0800c23f
 800c0e8:	0800c08d 	.word	0x0800c08d
 800c0ec:	0800c141 	.word	0x0800c141
 800c0f0:	0800c08d 	.word	0x0800c08d
 800c0f4:	0800c08d 	.word	0x0800c08d
 800c0f8:	0800c207 	.word	0x0800c207
 800c0fc:	680b      	ldr	r3, [r1, #0]
 800c0fe:	1d1a      	adds	r2, r3, #4
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	600a      	str	r2, [r1, #0]
 800c104:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c108:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c10c:	2301      	movs	r3, #1
 800c10e:	e0a3      	b.n	800c258 <_printf_i+0x1f4>
 800c110:	6825      	ldr	r5, [r4, #0]
 800c112:	6808      	ldr	r0, [r1, #0]
 800c114:	062e      	lsls	r6, r5, #24
 800c116:	f100 0304 	add.w	r3, r0, #4
 800c11a:	d50a      	bpl.n	800c132 <_printf_i+0xce>
 800c11c:	6805      	ldr	r5, [r0, #0]
 800c11e:	600b      	str	r3, [r1, #0]
 800c120:	2d00      	cmp	r5, #0
 800c122:	da03      	bge.n	800c12c <_printf_i+0xc8>
 800c124:	232d      	movs	r3, #45	; 0x2d
 800c126:	426d      	negs	r5, r5
 800c128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c12c:	485e      	ldr	r0, [pc, #376]	; (800c2a8 <_printf_i+0x244>)
 800c12e:	230a      	movs	r3, #10
 800c130:	e019      	b.n	800c166 <_printf_i+0x102>
 800c132:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c136:	6805      	ldr	r5, [r0, #0]
 800c138:	600b      	str	r3, [r1, #0]
 800c13a:	bf18      	it	ne
 800c13c:	b22d      	sxthne	r5, r5
 800c13e:	e7ef      	b.n	800c120 <_printf_i+0xbc>
 800c140:	680b      	ldr	r3, [r1, #0]
 800c142:	6825      	ldr	r5, [r4, #0]
 800c144:	1d18      	adds	r0, r3, #4
 800c146:	6008      	str	r0, [r1, #0]
 800c148:	0628      	lsls	r0, r5, #24
 800c14a:	d501      	bpl.n	800c150 <_printf_i+0xec>
 800c14c:	681d      	ldr	r5, [r3, #0]
 800c14e:	e002      	b.n	800c156 <_printf_i+0xf2>
 800c150:	0669      	lsls	r1, r5, #25
 800c152:	d5fb      	bpl.n	800c14c <_printf_i+0xe8>
 800c154:	881d      	ldrh	r5, [r3, #0]
 800c156:	4854      	ldr	r0, [pc, #336]	; (800c2a8 <_printf_i+0x244>)
 800c158:	2f6f      	cmp	r7, #111	; 0x6f
 800c15a:	bf0c      	ite	eq
 800c15c:	2308      	moveq	r3, #8
 800c15e:	230a      	movne	r3, #10
 800c160:	2100      	movs	r1, #0
 800c162:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c166:	6866      	ldr	r6, [r4, #4]
 800c168:	60a6      	str	r6, [r4, #8]
 800c16a:	2e00      	cmp	r6, #0
 800c16c:	bfa2      	ittt	ge
 800c16e:	6821      	ldrge	r1, [r4, #0]
 800c170:	f021 0104 	bicge.w	r1, r1, #4
 800c174:	6021      	strge	r1, [r4, #0]
 800c176:	b90d      	cbnz	r5, 800c17c <_printf_i+0x118>
 800c178:	2e00      	cmp	r6, #0
 800c17a:	d04d      	beq.n	800c218 <_printf_i+0x1b4>
 800c17c:	4616      	mov	r6, r2
 800c17e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c182:	fb03 5711 	mls	r7, r3, r1, r5
 800c186:	5dc7      	ldrb	r7, [r0, r7]
 800c188:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c18c:	462f      	mov	r7, r5
 800c18e:	42bb      	cmp	r3, r7
 800c190:	460d      	mov	r5, r1
 800c192:	d9f4      	bls.n	800c17e <_printf_i+0x11a>
 800c194:	2b08      	cmp	r3, #8
 800c196:	d10b      	bne.n	800c1b0 <_printf_i+0x14c>
 800c198:	6823      	ldr	r3, [r4, #0]
 800c19a:	07df      	lsls	r7, r3, #31
 800c19c:	d508      	bpl.n	800c1b0 <_printf_i+0x14c>
 800c19e:	6923      	ldr	r3, [r4, #16]
 800c1a0:	6861      	ldr	r1, [r4, #4]
 800c1a2:	4299      	cmp	r1, r3
 800c1a4:	bfde      	ittt	le
 800c1a6:	2330      	movle	r3, #48	; 0x30
 800c1a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c1ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c1b0:	1b92      	subs	r2, r2, r6
 800c1b2:	6122      	str	r2, [r4, #16]
 800c1b4:	f8cd a000 	str.w	sl, [sp]
 800c1b8:	464b      	mov	r3, r9
 800c1ba:	aa03      	add	r2, sp, #12
 800c1bc:	4621      	mov	r1, r4
 800c1be:	4640      	mov	r0, r8
 800c1c0:	f7ff fee2 	bl	800bf88 <_printf_common>
 800c1c4:	3001      	adds	r0, #1
 800c1c6:	d14c      	bne.n	800c262 <_printf_i+0x1fe>
 800c1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c1cc:	b004      	add	sp, #16
 800c1ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1d2:	4835      	ldr	r0, [pc, #212]	; (800c2a8 <_printf_i+0x244>)
 800c1d4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c1d8:	6823      	ldr	r3, [r4, #0]
 800c1da:	680e      	ldr	r6, [r1, #0]
 800c1dc:	061f      	lsls	r7, r3, #24
 800c1de:	f856 5b04 	ldr.w	r5, [r6], #4
 800c1e2:	600e      	str	r6, [r1, #0]
 800c1e4:	d514      	bpl.n	800c210 <_printf_i+0x1ac>
 800c1e6:	07d9      	lsls	r1, r3, #31
 800c1e8:	bf44      	itt	mi
 800c1ea:	f043 0320 	orrmi.w	r3, r3, #32
 800c1ee:	6023      	strmi	r3, [r4, #0]
 800c1f0:	b91d      	cbnz	r5, 800c1fa <_printf_i+0x196>
 800c1f2:	6823      	ldr	r3, [r4, #0]
 800c1f4:	f023 0320 	bic.w	r3, r3, #32
 800c1f8:	6023      	str	r3, [r4, #0]
 800c1fa:	2310      	movs	r3, #16
 800c1fc:	e7b0      	b.n	800c160 <_printf_i+0xfc>
 800c1fe:	6823      	ldr	r3, [r4, #0]
 800c200:	f043 0320 	orr.w	r3, r3, #32
 800c204:	6023      	str	r3, [r4, #0]
 800c206:	2378      	movs	r3, #120	; 0x78
 800c208:	4828      	ldr	r0, [pc, #160]	; (800c2ac <_printf_i+0x248>)
 800c20a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c20e:	e7e3      	b.n	800c1d8 <_printf_i+0x174>
 800c210:	065e      	lsls	r6, r3, #25
 800c212:	bf48      	it	mi
 800c214:	b2ad      	uxthmi	r5, r5
 800c216:	e7e6      	b.n	800c1e6 <_printf_i+0x182>
 800c218:	4616      	mov	r6, r2
 800c21a:	e7bb      	b.n	800c194 <_printf_i+0x130>
 800c21c:	680b      	ldr	r3, [r1, #0]
 800c21e:	6826      	ldr	r6, [r4, #0]
 800c220:	6960      	ldr	r0, [r4, #20]
 800c222:	1d1d      	adds	r5, r3, #4
 800c224:	600d      	str	r5, [r1, #0]
 800c226:	0635      	lsls	r5, r6, #24
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	d501      	bpl.n	800c230 <_printf_i+0x1cc>
 800c22c:	6018      	str	r0, [r3, #0]
 800c22e:	e002      	b.n	800c236 <_printf_i+0x1d2>
 800c230:	0671      	lsls	r1, r6, #25
 800c232:	d5fb      	bpl.n	800c22c <_printf_i+0x1c8>
 800c234:	8018      	strh	r0, [r3, #0]
 800c236:	2300      	movs	r3, #0
 800c238:	6123      	str	r3, [r4, #16]
 800c23a:	4616      	mov	r6, r2
 800c23c:	e7ba      	b.n	800c1b4 <_printf_i+0x150>
 800c23e:	680b      	ldr	r3, [r1, #0]
 800c240:	1d1a      	adds	r2, r3, #4
 800c242:	600a      	str	r2, [r1, #0]
 800c244:	681e      	ldr	r6, [r3, #0]
 800c246:	6862      	ldr	r2, [r4, #4]
 800c248:	2100      	movs	r1, #0
 800c24a:	4630      	mov	r0, r6
 800c24c:	f7f3 ffc8 	bl	80001e0 <memchr>
 800c250:	b108      	cbz	r0, 800c256 <_printf_i+0x1f2>
 800c252:	1b80      	subs	r0, r0, r6
 800c254:	6060      	str	r0, [r4, #4]
 800c256:	6863      	ldr	r3, [r4, #4]
 800c258:	6123      	str	r3, [r4, #16]
 800c25a:	2300      	movs	r3, #0
 800c25c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c260:	e7a8      	b.n	800c1b4 <_printf_i+0x150>
 800c262:	6923      	ldr	r3, [r4, #16]
 800c264:	4632      	mov	r2, r6
 800c266:	4649      	mov	r1, r9
 800c268:	4640      	mov	r0, r8
 800c26a:	47d0      	blx	sl
 800c26c:	3001      	adds	r0, #1
 800c26e:	d0ab      	beq.n	800c1c8 <_printf_i+0x164>
 800c270:	6823      	ldr	r3, [r4, #0]
 800c272:	079b      	lsls	r3, r3, #30
 800c274:	d413      	bmi.n	800c29e <_printf_i+0x23a>
 800c276:	68e0      	ldr	r0, [r4, #12]
 800c278:	9b03      	ldr	r3, [sp, #12]
 800c27a:	4298      	cmp	r0, r3
 800c27c:	bfb8      	it	lt
 800c27e:	4618      	movlt	r0, r3
 800c280:	e7a4      	b.n	800c1cc <_printf_i+0x168>
 800c282:	2301      	movs	r3, #1
 800c284:	4632      	mov	r2, r6
 800c286:	4649      	mov	r1, r9
 800c288:	4640      	mov	r0, r8
 800c28a:	47d0      	blx	sl
 800c28c:	3001      	adds	r0, #1
 800c28e:	d09b      	beq.n	800c1c8 <_printf_i+0x164>
 800c290:	3501      	adds	r5, #1
 800c292:	68e3      	ldr	r3, [r4, #12]
 800c294:	9903      	ldr	r1, [sp, #12]
 800c296:	1a5b      	subs	r3, r3, r1
 800c298:	42ab      	cmp	r3, r5
 800c29a:	dcf2      	bgt.n	800c282 <_printf_i+0x21e>
 800c29c:	e7eb      	b.n	800c276 <_printf_i+0x212>
 800c29e:	2500      	movs	r5, #0
 800c2a0:	f104 0619 	add.w	r6, r4, #25
 800c2a4:	e7f5      	b.n	800c292 <_printf_i+0x22e>
 800c2a6:	bf00      	nop
 800c2a8:	0800cacd 	.word	0x0800cacd
 800c2ac:	0800cade 	.word	0x0800cade

0800c2b0 <_scanf_chars>:
 800c2b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c2b4:	4615      	mov	r5, r2
 800c2b6:	688a      	ldr	r2, [r1, #8]
 800c2b8:	4680      	mov	r8, r0
 800c2ba:	460c      	mov	r4, r1
 800c2bc:	b932      	cbnz	r2, 800c2cc <_scanf_chars+0x1c>
 800c2be:	698a      	ldr	r2, [r1, #24]
 800c2c0:	2a00      	cmp	r2, #0
 800c2c2:	bf0c      	ite	eq
 800c2c4:	2201      	moveq	r2, #1
 800c2c6:	f04f 32ff 	movne.w	r2, #4294967295
 800c2ca:	608a      	str	r2, [r1, #8]
 800c2cc:	6822      	ldr	r2, [r4, #0]
 800c2ce:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c35c <_scanf_chars+0xac>
 800c2d2:	06d1      	lsls	r1, r2, #27
 800c2d4:	bf5f      	itttt	pl
 800c2d6:	681a      	ldrpl	r2, [r3, #0]
 800c2d8:	1d11      	addpl	r1, r2, #4
 800c2da:	6019      	strpl	r1, [r3, #0]
 800c2dc:	6816      	ldrpl	r6, [r2, #0]
 800c2de:	2700      	movs	r7, #0
 800c2e0:	69a0      	ldr	r0, [r4, #24]
 800c2e2:	b188      	cbz	r0, 800c308 <_scanf_chars+0x58>
 800c2e4:	2801      	cmp	r0, #1
 800c2e6:	d107      	bne.n	800c2f8 <_scanf_chars+0x48>
 800c2e8:	682b      	ldr	r3, [r5, #0]
 800c2ea:	781a      	ldrb	r2, [r3, #0]
 800c2ec:	6963      	ldr	r3, [r4, #20]
 800c2ee:	5c9b      	ldrb	r3, [r3, r2]
 800c2f0:	b953      	cbnz	r3, 800c308 <_scanf_chars+0x58>
 800c2f2:	bb27      	cbnz	r7, 800c33e <_scanf_chars+0x8e>
 800c2f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2f8:	2802      	cmp	r0, #2
 800c2fa:	d120      	bne.n	800c33e <_scanf_chars+0x8e>
 800c2fc:	682b      	ldr	r3, [r5, #0]
 800c2fe:	781b      	ldrb	r3, [r3, #0]
 800c300:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c304:	071b      	lsls	r3, r3, #28
 800c306:	d41a      	bmi.n	800c33e <_scanf_chars+0x8e>
 800c308:	6823      	ldr	r3, [r4, #0]
 800c30a:	06da      	lsls	r2, r3, #27
 800c30c:	bf5e      	ittt	pl
 800c30e:	682b      	ldrpl	r3, [r5, #0]
 800c310:	781b      	ldrbpl	r3, [r3, #0]
 800c312:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c316:	682a      	ldr	r2, [r5, #0]
 800c318:	686b      	ldr	r3, [r5, #4]
 800c31a:	3201      	adds	r2, #1
 800c31c:	602a      	str	r2, [r5, #0]
 800c31e:	68a2      	ldr	r2, [r4, #8]
 800c320:	3b01      	subs	r3, #1
 800c322:	3a01      	subs	r2, #1
 800c324:	606b      	str	r3, [r5, #4]
 800c326:	3701      	adds	r7, #1
 800c328:	60a2      	str	r2, [r4, #8]
 800c32a:	b142      	cbz	r2, 800c33e <_scanf_chars+0x8e>
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	dcd7      	bgt.n	800c2e0 <_scanf_chars+0x30>
 800c330:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c334:	4629      	mov	r1, r5
 800c336:	4640      	mov	r0, r8
 800c338:	4798      	blx	r3
 800c33a:	2800      	cmp	r0, #0
 800c33c:	d0d0      	beq.n	800c2e0 <_scanf_chars+0x30>
 800c33e:	6823      	ldr	r3, [r4, #0]
 800c340:	f013 0310 	ands.w	r3, r3, #16
 800c344:	d105      	bne.n	800c352 <_scanf_chars+0xa2>
 800c346:	68e2      	ldr	r2, [r4, #12]
 800c348:	3201      	adds	r2, #1
 800c34a:	60e2      	str	r2, [r4, #12]
 800c34c:	69a2      	ldr	r2, [r4, #24]
 800c34e:	b102      	cbz	r2, 800c352 <_scanf_chars+0xa2>
 800c350:	7033      	strb	r3, [r6, #0]
 800c352:	6923      	ldr	r3, [r4, #16]
 800c354:	441f      	add	r7, r3
 800c356:	6127      	str	r7, [r4, #16]
 800c358:	2000      	movs	r0, #0
 800c35a:	e7cb      	b.n	800c2f4 <_scanf_chars+0x44>
 800c35c:	0800cb0b 	.word	0x0800cb0b

0800c360 <_scanf_i>:
 800c360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c364:	4698      	mov	r8, r3
 800c366:	4b74      	ldr	r3, [pc, #464]	; (800c538 <_scanf_i+0x1d8>)
 800c368:	460c      	mov	r4, r1
 800c36a:	4682      	mov	sl, r0
 800c36c:	4616      	mov	r6, r2
 800c36e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c372:	b087      	sub	sp, #28
 800c374:	ab03      	add	r3, sp, #12
 800c376:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c37a:	4b70      	ldr	r3, [pc, #448]	; (800c53c <_scanf_i+0x1dc>)
 800c37c:	69a1      	ldr	r1, [r4, #24]
 800c37e:	4a70      	ldr	r2, [pc, #448]	; (800c540 <_scanf_i+0x1e0>)
 800c380:	2903      	cmp	r1, #3
 800c382:	bf18      	it	ne
 800c384:	461a      	movne	r2, r3
 800c386:	68a3      	ldr	r3, [r4, #8]
 800c388:	9201      	str	r2, [sp, #4]
 800c38a:	1e5a      	subs	r2, r3, #1
 800c38c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c390:	bf88      	it	hi
 800c392:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c396:	4627      	mov	r7, r4
 800c398:	bf82      	ittt	hi
 800c39a:	eb03 0905 	addhi.w	r9, r3, r5
 800c39e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c3a2:	60a3      	strhi	r3, [r4, #8]
 800c3a4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c3a8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c3ac:	bf98      	it	ls
 800c3ae:	f04f 0900 	movls.w	r9, #0
 800c3b2:	6023      	str	r3, [r4, #0]
 800c3b4:	463d      	mov	r5, r7
 800c3b6:	f04f 0b00 	mov.w	fp, #0
 800c3ba:	6831      	ldr	r1, [r6, #0]
 800c3bc:	ab03      	add	r3, sp, #12
 800c3be:	7809      	ldrb	r1, [r1, #0]
 800c3c0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c3c4:	2202      	movs	r2, #2
 800c3c6:	f7f3 ff0b 	bl	80001e0 <memchr>
 800c3ca:	b328      	cbz	r0, 800c418 <_scanf_i+0xb8>
 800c3cc:	f1bb 0f01 	cmp.w	fp, #1
 800c3d0:	d159      	bne.n	800c486 <_scanf_i+0x126>
 800c3d2:	6862      	ldr	r2, [r4, #4]
 800c3d4:	b92a      	cbnz	r2, 800c3e2 <_scanf_i+0x82>
 800c3d6:	6822      	ldr	r2, [r4, #0]
 800c3d8:	2308      	movs	r3, #8
 800c3da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c3de:	6063      	str	r3, [r4, #4]
 800c3e0:	6022      	str	r2, [r4, #0]
 800c3e2:	6822      	ldr	r2, [r4, #0]
 800c3e4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c3e8:	6022      	str	r2, [r4, #0]
 800c3ea:	68a2      	ldr	r2, [r4, #8]
 800c3ec:	1e51      	subs	r1, r2, #1
 800c3ee:	60a1      	str	r1, [r4, #8]
 800c3f0:	b192      	cbz	r2, 800c418 <_scanf_i+0xb8>
 800c3f2:	6832      	ldr	r2, [r6, #0]
 800c3f4:	1c51      	adds	r1, r2, #1
 800c3f6:	6031      	str	r1, [r6, #0]
 800c3f8:	7812      	ldrb	r2, [r2, #0]
 800c3fa:	f805 2b01 	strb.w	r2, [r5], #1
 800c3fe:	6872      	ldr	r2, [r6, #4]
 800c400:	3a01      	subs	r2, #1
 800c402:	2a00      	cmp	r2, #0
 800c404:	6072      	str	r2, [r6, #4]
 800c406:	dc07      	bgt.n	800c418 <_scanf_i+0xb8>
 800c408:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c40c:	4631      	mov	r1, r6
 800c40e:	4650      	mov	r0, sl
 800c410:	4790      	blx	r2
 800c412:	2800      	cmp	r0, #0
 800c414:	f040 8085 	bne.w	800c522 <_scanf_i+0x1c2>
 800c418:	f10b 0b01 	add.w	fp, fp, #1
 800c41c:	f1bb 0f03 	cmp.w	fp, #3
 800c420:	d1cb      	bne.n	800c3ba <_scanf_i+0x5a>
 800c422:	6863      	ldr	r3, [r4, #4]
 800c424:	b90b      	cbnz	r3, 800c42a <_scanf_i+0xca>
 800c426:	230a      	movs	r3, #10
 800c428:	6063      	str	r3, [r4, #4]
 800c42a:	6863      	ldr	r3, [r4, #4]
 800c42c:	4945      	ldr	r1, [pc, #276]	; (800c544 <_scanf_i+0x1e4>)
 800c42e:	6960      	ldr	r0, [r4, #20]
 800c430:	1ac9      	subs	r1, r1, r3
 800c432:	f000 f889 	bl	800c548 <__sccl>
 800c436:	f04f 0b00 	mov.w	fp, #0
 800c43a:	68a3      	ldr	r3, [r4, #8]
 800c43c:	6822      	ldr	r2, [r4, #0]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d03d      	beq.n	800c4be <_scanf_i+0x15e>
 800c442:	6831      	ldr	r1, [r6, #0]
 800c444:	6960      	ldr	r0, [r4, #20]
 800c446:	f891 c000 	ldrb.w	ip, [r1]
 800c44a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c44e:	2800      	cmp	r0, #0
 800c450:	d035      	beq.n	800c4be <_scanf_i+0x15e>
 800c452:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c456:	d124      	bne.n	800c4a2 <_scanf_i+0x142>
 800c458:	0510      	lsls	r0, r2, #20
 800c45a:	d522      	bpl.n	800c4a2 <_scanf_i+0x142>
 800c45c:	f10b 0b01 	add.w	fp, fp, #1
 800c460:	f1b9 0f00 	cmp.w	r9, #0
 800c464:	d003      	beq.n	800c46e <_scanf_i+0x10e>
 800c466:	3301      	adds	r3, #1
 800c468:	f109 39ff 	add.w	r9, r9, #4294967295
 800c46c:	60a3      	str	r3, [r4, #8]
 800c46e:	6873      	ldr	r3, [r6, #4]
 800c470:	3b01      	subs	r3, #1
 800c472:	2b00      	cmp	r3, #0
 800c474:	6073      	str	r3, [r6, #4]
 800c476:	dd1b      	ble.n	800c4b0 <_scanf_i+0x150>
 800c478:	6833      	ldr	r3, [r6, #0]
 800c47a:	3301      	adds	r3, #1
 800c47c:	6033      	str	r3, [r6, #0]
 800c47e:	68a3      	ldr	r3, [r4, #8]
 800c480:	3b01      	subs	r3, #1
 800c482:	60a3      	str	r3, [r4, #8]
 800c484:	e7d9      	b.n	800c43a <_scanf_i+0xda>
 800c486:	f1bb 0f02 	cmp.w	fp, #2
 800c48a:	d1ae      	bne.n	800c3ea <_scanf_i+0x8a>
 800c48c:	6822      	ldr	r2, [r4, #0]
 800c48e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c492:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c496:	d1bf      	bne.n	800c418 <_scanf_i+0xb8>
 800c498:	2310      	movs	r3, #16
 800c49a:	6063      	str	r3, [r4, #4]
 800c49c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c4a0:	e7a2      	b.n	800c3e8 <_scanf_i+0x88>
 800c4a2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c4a6:	6022      	str	r2, [r4, #0]
 800c4a8:	780b      	ldrb	r3, [r1, #0]
 800c4aa:	f805 3b01 	strb.w	r3, [r5], #1
 800c4ae:	e7de      	b.n	800c46e <_scanf_i+0x10e>
 800c4b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c4b4:	4631      	mov	r1, r6
 800c4b6:	4650      	mov	r0, sl
 800c4b8:	4798      	blx	r3
 800c4ba:	2800      	cmp	r0, #0
 800c4bc:	d0df      	beq.n	800c47e <_scanf_i+0x11e>
 800c4be:	6823      	ldr	r3, [r4, #0]
 800c4c0:	05d9      	lsls	r1, r3, #23
 800c4c2:	d50d      	bpl.n	800c4e0 <_scanf_i+0x180>
 800c4c4:	42bd      	cmp	r5, r7
 800c4c6:	d909      	bls.n	800c4dc <_scanf_i+0x17c>
 800c4c8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c4cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c4d0:	4632      	mov	r2, r6
 800c4d2:	4650      	mov	r0, sl
 800c4d4:	4798      	blx	r3
 800c4d6:	f105 39ff 	add.w	r9, r5, #4294967295
 800c4da:	464d      	mov	r5, r9
 800c4dc:	42bd      	cmp	r5, r7
 800c4de:	d028      	beq.n	800c532 <_scanf_i+0x1d2>
 800c4e0:	6822      	ldr	r2, [r4, #0]
 800c4e2:	f012 0210 	ands.w	r2, r2, #16
 800c4e6:	d113      	bne.n	800c510 <_scanf_i+0x1b0>
 800c4e8:	702a      	strb	r2, [r5, #0]
 800c4ea:	6863      	ldr	r3, [r4, #4]
 800c4ec:	9e01      	ldr	r6, [sp, #4]
 800c4ee:	4639      	mov	r1, r7
 800c4f0:	4650      	mov	r0, sl
 800c4f2:	47b0      	blx	r6
 800c4f4:	f8d8 3000 	ldr.w	r3, [r8]
 800c4f8:	6821      	ldr	r1, [r4, #0]
 800c4fa:	1d1a      	adds	r2, r3, #4
 800c4fc:	f8c8 2000 	str.w	r2, [r8]
 800c500:	f011 0f20 	tst.w	r1, #32
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	d00f      	beq.n	800c528 <_scanf_i+0x1c8>
 800c508:	6018      	str	r0, [r3, #0]
 800c50a:	68e3      	ldr	r3, [r4, #12]
 800c50c:	3301      	adds	r3, #1
 800c50e:	60e3      	str	r3, [r4, #12]
 800c510:	1bed      	subs	r5, r5, r7
 800c512:	44ab      	add	fp, r5
 800c514:	6925      	ldr	r5, [r4, #16]
 800c516:	445d      	add	r5, fp
 800c518:	6125      	str	r5, [r4, #16]
 800c51a:	2000      	movs	r0, #0
 800c51c:	b007      	add	sp, #28
 800c51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c522:	f04f 0b00 	mov.w	fp, #0
 800c526:	e7ca      	b.n	800c4be <_scanf_i+0x15e>
 800c528:	07ca      	lsls	r2, r1, #31
 800c52a:	bf4c      	ite	mi
 800c52c:	8018      	strhmi	r0, [r3, #0]
 800c52e:	6018      	strpl	r0, [r3, #0]
 800c530:	e7eb      	b.n	800c50a <_scanf_i+0x1aa>
 800c532:	2001      	movs	r0, #1
 800c534:	e7f2      	b.n	800c51c <_scanf_i+0x1bc>
 800c536:	bf00      	nop
 800c538:	0800c99c 	.word	0x0800c99c
 800c53c:	0800c7c1 	.word	0x0800c7c1
 800c540:	0800c6c5 	.word	0x0800c6c5
 800c544:	0800cb08 	.word	0x0800cb08

0800c548 <__sccl>:
 800c548:	b570      	push	{r4, r5, r6, lr}
 800c54a:	780b      	ldrb	r3, [r1, #0]
 800c54c:	4604      	mov	r4, r0
 800c54e:	2b5e      	cmp	r3, #94	; 0x5e
 800c550:	bf0b      	itete	eq
 800c552:	784b      	ldrbeq	r3, [r1, #1]
 800c554:	1c48      	addne	r0, r1, #1
 800c556:	1c88      	addeq	r0, r1, #2
 800c558:	2200      	movne	r2, #0
 800c55a:	bf08      	it	eq
 800c55c:	2201      	moveq	r2, #1
 800c55e:	1e61      	subs	r1, r4, #1
 800c560:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c564:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c568:	42a9      	cmp	r1, r5
 800c56a:	d1fb      	bne.n	800c564 <__sccl+0x1c>
 800c56c:	b90b      	cbnz	r3, 800c572 <__sccl+0x2a>
 800c56e:	3801      	subs	r0, #1
 800c570:	bd70      	pop	{r4, r5, r6, pc}
 800c572:	f082 0101 	eor.w	r1, r2, #1
 800c576:	54e1      	strb	r1, [r4, r3]
 800c578:	1c42      	adds	r2, r0, #1
 800c57a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800c57e:	2d2d      	cmp	r5, #45	; 0x2d
 800c580:	f102 36ff 	add.w	r6, r2, #4294967295
 800c584:	4610      	mov	r0, r2
 800c586:	d006      	beq.n	800c596 <__sccl+0x4e>
 800c588:	2d5d      	cmp	r5, #93	; 0x5d
 800c58a:	d0f1      	beq.n	800c570 <__sccl+0x28>
 800c58c:	b90d      	cbnz	r5, 800c592 <__sccl+0x4a>
 800c58e:	4630      	mov	r0, r6
 800c590:	e7ee      	b.n	800c570 <__sccl+0x28>
 800c592:	462b      	mov	r3, r5
 800c594:	e7ef      	b.n	800c576 <__sccl+0x2e>
 800c596:	7816      	ldrb	r6, [r2, #0]
 800c598:	2e5d      	cmp	r6, #93	; 0x5d
 800c59a:	d0fa      	beq.n	800c592 <__sccl+0x4a>
 800c59c:	42b3      	cmp	r3, r6
 800c59e:	dcf8      	bgt.n	800c592 <__sccl+0x4a>
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	3001      	adds	r0, #1
 800c5a4:	4286      	cmp	r6, r0
 800c5a6:	5421      	strb	r1, [r4, r0]
 800c5a8:	dcfb      	bgt.n	800c5a2 <__sccl+0x5a>
 800c5aa:	43d8      	mvns	r0, r3
 800c5ac:	4430      	add	r0, r6
 800c5ae:	1c5d      	adds	r5, r3, #1
 800c5b0:	42b3      	cmp	r3, r6
 800c5b2:	bfa8      	it	ge
 800c5b4:	2000      	movge	r0, #0
 800c5b6:	182b      	adds	r3, r5, r0
 800c5b8:	3202      	adds	r2, #2
 800c5ba:	e7de      	b.n	800c57a <__sccl+0x32>

0800c5bc <_strtol_l.isra.0>:
 800c5bc:	2b01      	cmp	r3, #1
 800c5be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c5c2:	d001      	beq.n	800c5c8 <_strtol_l.isra.0+0xc>
 800c5c4:	2b24      	cmp	r3, #36	; 0x24
 800c5c6:	d906      	bls.n	800c5d6 <_strtol_l.isra.0+0x1a>
 800c5c8:	f7fe fff0 	bl	800b5ac <__errno>
 800c5cc:	2316      	movs	r3, #22
 800c5ce:	6003      	str	r3, [r0, #0]
 800c5d0:	2000      	movs	r0, #0
 800c5d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5d6:	4f3a      	ldr	r7, [pc, #232]	; (800c6c0 <_strtol_l.isra.0+0x104>)
 800c5d8:	468e      	mov	lr, r1
 800c5da:	4676      	mov	r6, lr
 800c5dc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c5e0:	5de5      	ldrb	r5, [r4, r7]
 800c5e2:	f015 0508 	ands.w	r5, r5, #8
 800c5e6:	d1f8      	bne.n	800c5da <_strtol_l.isra.0+0x1e>
 800c5e8:	2c2d      	cmp	r4, #45	; 0x2d
 800c5ea:	d134      	bne.n	800c656 <_strtol_l.isra.0+0x9a>
 800c5ec:	f89e 4000 	ldrb.w	r4, [lr]
 800c5f0:	f04f 0801 	mov.w	r8, #1
 800c5f4:	f106 0e02 	add.w	lr, r6, #2
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d05c      	beq.n	800c6b6 <_strtol_l.isra.0+0xfa>
 800c5fc:	2b10      	cmp	r3, #16
 800c5fe:	d10c      	bne.n	800c61a <_strtol_l.isra.0+0x5e>
 800c600:	2c30      	cmp	r4, #48	; 0x30
 800c602:	d10a      	bne.n	800c61a <_strtol_l.isra.0+0x5e>
 800c604:	f89e 4000 	ldrb.w	r4, [lr]
 800c608:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c60c:	2c58      	cmp	r4, #88	; 0x58
 800c60e:	d14d      	bne.n	800c6ac <_strtol_l.isra.0+0xf0>
 800c610:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800c614:	2310      	movs	r3, #16
 800c616:	f10e 0e02 	add.w	lr, lr, #2
 800c61a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800c61e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c622:	2600      	movs	r6, #0
 800c624:	fbbc f9f3 	udiv	r9, ip, r3
 800c628:	4635      	mov	r5, r6
 800c62a:	fb03 ca19 	mls	sl, r3, r9, ip
 800c62e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c632:	2f09      	cmp	r7, #9
 800c634:	d818      	bhi.n	800c668 <_strtol_l.isra.0+0xac>
 800c636:	463c      	mov	r4, r7
 800c638:	42a3      	cmp	r3, r4
 800c63a:	dd24      	ble.n	800c686 <_strtol_l.isra.0+0xca>
 800c63c:	2e00      	cmp	r6, #0
 800c63e:	db1f      	blt.n	800c680 <_strtol_l.isra.0+0xc4>
 800c640:	45a9      	cmp	r9, r5
 800c642:	d31d      	bcc.n	800c680 <_strtol_l.isra.0+0xc4>
 800c644:	d101      	bne.n	800c64a <_strtol_l.isra.0+0x8e>
 800c646:	45a2      	cmp	sl, r4
 800c648:	db1a      	blt.n	800c680 <_strtol_l.isra.0+0xc4>
 800c64a:	fb05 4503 	mla	r5, r5, r3, r4
 800c64e:	2601      	movs	r6, #1
 800c650:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c654:	e7eb      	b.n	800c62e <_strtol_l.isra.0+0x72>
 800c656:	2c2b      	cmp	r4, #43	; 0x2b
 800c658:	bf08      	it	eq
 800c65a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800c65e:	46a8      	mov	r8, r5
 800c660:	bf08      	it	eq
 800c662:	f106 0e02 	addeq.w	lr, r6, #2
 800c666:	e7c7      	b.n	800c5f8 <_strtol_l.isra.0+0x3c>
 800c668:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c66c:	2f19      	cmp	r7, #25
 800c66e:	d801      	bhi.n	800c674 <_strtol_l.isra.0+0xb8>
 800c670:	3c37      	subs	r4, #55	; 0x37
 800c672:	e7e1      	b.n	800c638 <_strtol_l.isra.0+0x7c>
 800c674:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c678:	2f19      	cmp	r7, #25
 800c67a:	d804      	bhi.n	800c686 <_strtol_l.isra.0+0xca>
 800c67c:	3c57      	subs	r4, #87	; 0x57
 800c67e:	e7db      	b.n	800c638 <_strtol_l.isra.0+0x7c>
 800c680:	f04f 36ff 	mov.w	r6, #4294967295
 800c684:	e7e4      	b.n	800c650 <_strtol_l.isra.0+0x94>
 800c686:	2e00      	cmp	r6, #0
 800c688:	da05      	bge.n	800c696 <_strtol_l.isra.0+0xda>
 800c68a:	2322      	movs	r3, #34	; 0x22
 800c68c:	6003      	str	r3, [r0, #0]
 800c68e:	4665      	mov	r5, ip
 800c690:	b942      	cbnz	r2, 800c6a4 <_strtol_l.isra.0+0xe8>
 800c692:	4628      	mov	r0, r5
 800c694:	e79d      	b.n	800c5d2 <_strtol_l.isra.0+0x16>
 800c696:	f1b8 0f00 	cmp.w	r8, #0
 800c69a:	d000      	beq.n	800c69e <_strtol_l.isra.0+0xe2>
 800c69c:	426d      	negs	r5, r5
 800c69e:	2a00      	cmp	r2, #0
 800c6a0:	d0f7      	beq.n	800c692 <_strtol_l.isra.0+0xd6>
 800c6a2:	b10e      	cbz	r6, 800c6a8 <_strtol_l.isra.0+0xec>
 800c6a4:	f10e 31ff 	add.w	r1, lr, #4294967295
 800c6a8:	6011      	str	r1, [r2, #0]
 800c6aa:	e7f2      	b.n	800c692 <_strtol_l.isra.0+0xd6>
 800c6ac:	2430      	movs	r4, #48	; 0x30
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d1b3      	bne.n	800c61a <_strtol_l.isra.0+0x5e>
 800c6b2:	2308      	movs	r3, #8
 800c6b4:	e7b1      	b.n	800c61a <_strtol_l.isra.0+0x5e>
 800c6b6:	2c30      	cmp	r4, #48	; 0x30
 800c6b8:	d0a4      	beq.n	800c604 <_strtol_l.isra.0+0x48>
 800c6ba:	230a      	movs	r3, #10
 800c6bc:	e7ad      	b.n	800c61a <_strtol_l.isra.0+0x5e>
 800c6be:	bf00      	nop
 800c6c0:	0800cb0b 	.word	0x0800cb0b

0800c6c4 <_strtol_r>:
 800c6c4:	f7ff bf7a 	b.w	800c5bc <_strtol_l.isra.0>

0800c6c8 <_strtoul_l.isra.0>:
 800c6c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c6cc:	4e3b      	ldr	r6, [pc, #236]	; (800c7bc <_strtoul_l.isra.0+0xf4>)
 800c6ce:	4686      	mov	lr, r0
 800c6d0:	468c      	mov	ip, r1
 800c6d2:	4660      	mov	r0, ip
 800c6d4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c6d8:	5da5      	ldrb	r5, [r4, r6]
 800c6da:	f015 0508 	ands.w	r5, r5, #8
 800c6de:	d1f8      	bne.n	800c6d2 <_strtoul_l.isra.0+0xa>
 800c6e0:	2c2d      	cmp	r4, #45	; 0x2d
 800c6e2:	d134      	bne.n	800c74e <_strtoul_l.isra.0+0x86>
 800c6e4:	f89c 4000 	ldrb.w	r4, [ip]
 800c6e8:	f04f 0801 	mov.w	r8, #1
 800c6ec:	f100 0c02 	add.w	ip, r0, #2
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d05e      	beq.n	800c7b2 <_strtoul_l.isra.0+0xea>
 800c6f4:	2b10      	cmp	r3, #16
 800c6f6:	d10c      	bne.n	800c712 <_strtoul_l.isra.0+0x4a>
 800c6f8:	2c30      	cmp	r4, #48	; 0x30
 800c6fa:	d10a      	bne.n	800c712 <_strtoul_l.isra.0+0x4a>
 800c6fc:	f89c 0000 	ldrb.w	r0, [ip]
 800c700:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c704:	2858      	cmp	r0, #88	; 0x58
 800c706:	d14f      	bne.n	800c7a8 <_strtoul_l.isra.0+0xe0>
 800c708:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c70c:	2310      	movs	r3, #16
 800c70e:	f10c 0c02 	add.w	ip, ip, #2
 800c712:	f04f 37ff 	mov.w	r7, #4294967295
 800c716:	2500      	movs	r5, #0
 800c718:	fbb7 f7f3 	udiv	r7, r7, r3
 800c71c:	fb03 f907 	mul.w	r9, r3, r7
 800c720:	ea6f 0909 	mvn.w	r9, r9
 800c724:	4628      	mov	r0, r5
 800c726:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c72a:	2e09      	cmp	r6, #9
 800c72c:	d818      	bhi.n	800c760 <_strtoul_l.isra.0+0x98>
 800c72e:	4634      	mov	r4, r6
 800c730:	42a3      	cmp	r3, r4
 800c732:	dd24      	ble.n	800c77e <_strtoul_l.isra.0+0xb6>
 800c734:	2d00      	cmp	r5, #0
 800c736:	db1f      	blt.n	800c778 <_strtoul_l.isra.0+0xb0>
 800c738:	4287      	cmp	r7, r0
 800c73a:	d31d      	bcc.n	800c778 <_strtoul_l.isra.0+0xb0>
 800c73c:	d101      	bne.n	800c742 <_strtoul_l.isra.0+0x7a>
 800c73e:	45a1      	cmp	r9, r4
 800c740:	db1a      	blt.n	800c778 <_strtoul_l.isra.0+0xb0>
 800c742:	fb00 4003 	mla	r0, r0, r3, r4
 800c746:	2501      	movs	r5, #1
 800c748:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c74c:	e7eb      	b.n	800c726 <_strtoul_l.isra.0+0x5e>
 800c74e:	2c2b      	cmp	r4, #43	; 0x2b
 800c750:	bf08      	it	eq
 800c752:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c756:	46a8      	mov	r8, r5
 800c758:	bf08      	it	eq
 800c75a:	f100 0c02 	addeq.w	ip, r0, #2
 800c75e:	e7c7      	b.n	800c6f0 <_strtoul_l.isra.0+0x28>
 800c760:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c764:	2e19      	cmp	r6, #25
 800c766:	d801      	bhi.n	800c76c <_strtoul_l.isra.0+0xa4>
 800c768:	3c37      	subs	r4, #55	; 0x37
 800c76a:	e7e1      	b.n	800c730 <_strtoul_l.isra.0+0x68>
 800c76c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c770:	2e19      	cmp	r6, #25
 800c772:	d804      	bhi.n	800c77e <_strtoul_l.isra.0+0xb6>
 800c774:	3c57      	subs	r4, #87	; 0x57
 800c776:	e7db      	b.n	800c730 <_strtoul_l.isra.0+0x68>
 800c778:	f04f 35ff 	mov.w	r5, #4294967295
 800c77c:	e7e4      	b.n	800c748 <_strtoul_l.isra.0+0x80>
 800c77e:	2d00      	cmp	r5, #0
 800c780:	da07      	bge.n	800c792 <_strtoul_l.isra.0+0xca>
 800c782:	2322      	movs	r3, #34	; 0x22
 800c784:	f8ce 3000 	str.w	r3, [lr]
 800c788:	f04f 30ff 	mov.w	r0, #4294967295
 800c78c:	b942      	cbnz	r2, 800c7a0 <_strtoul_l.isra.0+0xd8>
 800c78e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c792:	f1b8 0f00 	cmp.w	r8, #0
 800c796:	d000      	beq.n	800c79a <_strtoul_l.isra.0+0xd2>
 800c798:	4240      	negs	r0, r0
 800c79a:	2a00      	cmp	r2, #0
 800c79c:	d0f7      	beq.n	800c78e <_strtoul_l.isra.0+0xc6>
 800c79e:	b10d      	cbz	r5, 800c7a4 <_strtoul_l.isra.0+0xdc>
 800c7a0:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c7a4:	6011      	str	r1, [r2, #0]
 800c7a6:	e7f2      	b.n	800c78e <_strtoul_l.isra.0+0xc6>
 800c7a8:	2430      	movs	r4, #48	; 0x30
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d1b1      	bne.n	800c712 <_strtoul_l.isra.0+0x4a>
 800c7ae:	2308      	movs	r3, #8
 800c7b0:	e7af      	b.n	800c712 <_strtoul_l.isra.0+0x4a>
 800c7b2:	2c30      	cmp	r4, #48	; 0x30
 800c7b4:	d0a2      	beq.n	800c6fc <_strtoul_l.isra.0+0x34>
 800c7b6:	230a      	movs	r3, #10
 800c7b8:	e7ab      	b.n	800c712 <_strtoul_l.isra.0+0x4a>
 800c7ba:	bf00      	nop
 800c7bc:	0800cb0b 	.word	0x0800cb0b

0800c7c0 <_strtoul_r>:
 800c7c0:	f7ff bf82 	b.w	800c6c8 <_strtoul_l.isra.0>

0800c7c4 <__submore>:
 800c7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c8:	460c      	mov	r4, r1
 800c7ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c7cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7d0:	4299      	cmp	r1, r3
 800c7d2:	d11d      	bne.n	800c810 <__submore+0x4c>
 800c7d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c7d8:	f7fe ff2a 	bl	800b630 <_malloc_r>
 800c7dc:	b918      	cbnz	r0, 800c7e6 <__submore+0x22>
 800c7de:	f04f 30ff 	mov.w	r0, #4294967295
 800c7e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c7ea:	63a3      	str	r3, [r4, #56]	; 0x38
 800c7ec:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c7f0:	6360      	str	r0, [r4, #52]	; 0x34
 800c7f2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c7f6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c7fa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c7fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c802:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c806:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c80a:	6020      	str	r0, [r4, #0]
 800c80c:	2000      	movs	r0, #0
 800c80e:	e7e8      	b.n	800c7e2 <__submore+0x1e>
 800c810:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c812:	0077      	lsls	r7, r6, #1
 800c814:	463a      	mov	r2, r7
 800c816:	f000 f829 	bl	800c86c <_realloc_r>
 800c81a:	4605      	mov	r5, r0
 800c81c:	2800      	cmp	r0, #0
 800c81e:	d0de      	beq.n	800c7de <__submore+0x1a>
 800c820:	eb00 0806 	add.w	r8, r0, r6
 800c824:	4601      	mov	r1, r0
 800c826:	4632      	mov	r2, r6
 800c828:	4640      	mov	r0, r8
 800c82a:	f7fe feeb 	bl	800b604 <memcpy>
 800c82e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c832:	f8c4 8000 	str.w	r8, [r4]
 800c836:	e7e9      	b.n	800c80c <__submore+0x48>

0800c838 <memmove>:
 800c838:	4288      	cmp	r0, r1
 800c83a:	b510      	push	{r4, lr}
 800c83c:	eb01 0402 	add.w	r4, r1, r2
 800c840:	d902      	bls.n	800c848 <memmove+0x10>
 800c842:	4284      	cmp	r4, r0
 800c844:	4623      	mov	r3, r4
 800c846:	d807      	bhi.n	800c858 <memmove+0x20>
 800c848:	1e43      	subs	r3, r0, #1
 800c84a:	42a1      	cmp	r1, r4
 800c84c:	d008      	beq.n	800c860 <memmove+0x28>
 800c84e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c852:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c856:	e7f8      	b.n	800c84a <memmove+0x12>
 800c858:	4402      	add	r2, r0
 800c85a:	4601      	mov	r1, r0
 800c85c:	428a      	cmp	r2, r1
 800c85e:	d100      	bne.n	800c862 <memmove+0x2a>
 800c860:	bd10      	pop	{r4, pc}
 800c862:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c866:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c86a:	e7f7      	b.n	800c85c <memmove+0x24>

0800c86c <_realloc_r>:
 800c86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c86e:	4607      	mov	r7, r0
 800c870:	4614      	mov	r4, r2
 800c872:	460e      	mov	r6, r1
 800c874:	b921      	cbnz	r1, 800c880 <_realloc_r+0x14>
 800c876:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c87a:	4611      	mov	r1, r2
 800c87c:	f7fe bed8 	b.w	800b630 <_malloc_r>
 800c880:	b922      	cbnz	r2, 800c88c <_realloc_r+0x20>
 800c882:	f7ff f803 	bl	800b88c <_free_r>
 800c886:	4625      	mov	r5, r4
 800c888:	4628      	mov	r0, r5
 800c88a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c88c:	f000 f814 	bl	800c8b8 <_malloc_usable_size_r>
 800c890:	42a0      	cmp	r0, r4
 800c892:	d20f      	bcs.n	800c8b4 <_realloc_r+0x48>
 800c894:	4621      	mov	r1, r4
 800c896:	4638      	mov	r0, r7
 800c898:	f7fe feca 	bl	800b630 <_malloc_r>
 800c89c:	4605      	mov	r5, r0
 800c89e:	2800      	cmp	r0, #0
 800c8a0:	d0f2      	beq.n	800c888 <_realloc_r+0x1c>
 800c8a2:	4631      	mov	r1, r6
 800c8a4:	4622      	mov	r2, r4
 800c8a6:	f7fe fead 	bl	800b604 <memcpy>
 800c8aa:	4631      	mov	r1, r6
 800c8ac:	4638      	mov	r0, r7
 800c8ae:	f7fe ffed 	bl	800b88c <_free_r>
 800c8b2:	e7e9      	b.n	800c888 <_realloc_r+0x1c>
 800c8b4:	4635      	mov	r5, r6
 800c8b6:	e7e7      	b.n	800c888 <_realloc_r+0x1c>

0800c8b8 <_malloc_usable_size_r>:
 800c8b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c8bc:	1f18      	subs	r0, r3, #4
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	bfbc      	itt	lt
 800c8c2:	580b      	ldrlt	r3, [r1, r0]
 800c8c4:	18c0      	addlt	r0, r0, r3
 800c8c6:	4770      	bx	lr

0800c8c8 <_init>:
 800c8c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8ca:	bf00      	nop
 800c8cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8ce:	bc08      	pop	{r3}
 800c8d0:	469e      	mov	lr, r3
 800c8d2:	4770      	bx	lr

0800c8d4 <_fini>:
 800c8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8d6:	bf00      	nop
 800c8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c8da:	bc08      	pop	{r3}
 800c8dc:	469e      	mov	lr, r3
 800c8de:	4770      	bx	lr
