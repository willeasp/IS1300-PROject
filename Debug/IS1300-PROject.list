
IS1300-PROject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000946c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  080095fc  080095fc  000195fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800986c  0800986c  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800986c  0800986c  0001986c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009874  08009874  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009874  08009874  00019874  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009878  08009878  00019878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800987c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  20000080  080098fc  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  080098fc  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   00022404  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f44  00000000  00000000  000424b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017c0  00000000  00000000  000463f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f8  00000000  00000000  00047bb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c32f  00000000  00000000  000491b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f485  00000000  00000000  000754df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00110989  00000000  00000000  00094964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a52ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c68  00000000  00000000  001a5340  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080095e4 	.word	0x080095e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	080095e4 	.word	0x080095e4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
 8000d74:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d76:	4b2f      	ldr	r3, [pc, #188]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d78:	4a2f      	ldr	r2, [pc, #188]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000d7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d7c:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d82:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d88:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d8e:	4b29      	ldr	r3, [pc, #164]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d94:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d96:	2204      	movs	r2, #4
 8000d98:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da0:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000da6:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dac:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd6:	4817      	ldr	r0, [pc, #92]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dd8:	f001 fb02 	bl	80023e0 <HAL_ADC_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000de2:	f000 fc3b 	bl	800165c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	4619      	mov	r1, r3
 8000df0:	4810      	ldr	r0, [pc, #64]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000df2:	f002 fb4f 	bl	8003494 <HAL_ADCEx_MultiModeConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000dfc:	f000 fc2e 	bl	800165c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_ADC1_Init+0xe8>)
 8000e02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e04:	2306      	movs	r3, #6
 8000e06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e0c:	237f      	movs	r3, #127	; 0x7f
 8000e0e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e10:	2304      	movs	r3, #4
 8000e12:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000e1e:	f001 fdd5 	bl	80029cc <HAL_ADC_ConfigChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000e28:	f000 fc18 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	200000ac 	.word	0x200000ac
 8000e38:	50040000 	.word	0x50040000
 8000e3c:	43210000 	.word	0x43210000

08000e40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b0ac      	sub	sp, #176	; 0xb0
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2288      	movs	r2, #136	; 0x88
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f007 fac5 	bl	80083f0 <memset>
  if(adcHandle->Instance==ADC1)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a27      	ldr	r2, [pc, #156]	; (8000f08 <HAL_ADC_MspInit+0xc8>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d146      	bne.n	8000efe <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e74:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e82:	2301      	movs	r3, #1
 8000e84:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e86:	2308      	movs	r3, #8
 8000e88:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e92:	2302      	movs	r3, #2
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f003 fd49 	bl	8004938 <HAL_RCCEx_PeriphCLKConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000eac:	f000 fbd6 	bl	800165c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb4:	4a15      	ldr	r2, [pc, #84]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000eb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ecc:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ee6:	230b      	movs	r3, #11
 8000ee8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <HAL_ADC_MspInit+0xd0>)
 8000efa:	f002 fd0b 	bl	8003914 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000efe:	bf00      	nop
 8000f00:	37b0      	adds	r7, #176	; 0xb0
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	50040000 	.word	0x50040000
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	48000400 	.word	0x48000400

08000f14 <start_clock>:


/**
 * @brief start the RTC clock
 */
void start_clock (uint8_t hours, uint8_t minutes, uint8_t seconds) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	71bb      	strb	r3, [r7, #6]
 8000f22:	4613      	mov	r3, r2
 8000f24:	717b      	strb	r3, [r7, #5]
    RTC_TimeTypeDef time;
    time.Hours = hours;
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	733b      	strb	r3, [r7, #12]
    time.Minutes = minutes;
 8000f2a:	79bb      	ldrb	r3, [r7, #6]
 8000f2c:	737b      	strb	r3, [r7, #13]
    time.Seconds = seconds;
 8000f2e:	797b      	ldrb	r3, [r7, #5]
 8000f30:	73bb      	strb	r3, [r7, #14]

    /* date has to be set to start the clock */
    HAL_RTC_SetDate(&hrtc, NULL, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	4807      	ldr	r0, [pc, #28]	; (8000f54 <start_clock+0x40>)
 8000f38:	f004 fb2e 	bl	8005598 <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000f3c:	f107 030c 	add.w	r3, r7, #12
 8000f40:	2200      	movs	r2, #0
 8000f42:	4619      	mov	r1, r3
 8000f44:	4803      	ldr	r0, [pc, #12]	; (8000f54 <start_clock+0x40>)
 8000f46:	f004 fa2e 	bl	80053a6 <HAL_RTC_SetTime>
}
 8000f4a:	bf00      	nop
 8000f4c:	3720      	adds	r7, #32
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20000110 	.word	0x20000110

08000f58 <get_time>:

/**
 * @brief Get the current RTC time
 * @return Pointer to the time struct
 */
void get_time (RTC_TimeTypeDef *time) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
    HAL_RTC_GetTime(&hrtc, time, RTC_FORMAT_BIN);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	480b      	ldr	r0, [pc, #44]	; (8000f94 <get_time+0x3c>)
 8000f66:	f004 fabb 	bl	80054e0 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, NULL, RTC_FORMAT_BIN);
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4809      	ldr	r0, [pc, #36]	; (8000f94 <get_time+0x3c>)
 8000f70:	f004 fb99 	bl	80056a6 <HAL_RTC_GetDate>

    /* sad but the RTC started counting beyond :( */
    if (time->Hours == 24) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b18      	cmp	r3, #24
 8000f7a:	d107      	bne.n	8000f8c <get_time+0x34>
        time->Hours = 0;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
        HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8000f82:	2200      	movs	r2, #0
 8000f84:	6879      	ldr	r1, [r7, #4]
 8000f86:	4803      	ldr	r0, [pc, #12]	; (8000f94 <get_time+0x3c>)
 8000f88:	f004 fa0d 	bl	80053a6 <HAL_RTC_SetTime>
    }
}
 8000f8c:	bf00      	nop
 8000f8e:	3708      	adds	r7, #8
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000110 	.word	0x20000110

08000f98 <hardware_reset>:
uint16_t pins[] = {Disp_White_Pin, Disp_Green_Pin};

/**
 * @brief Perform a hardware reset on the display
 */
void hardware_reset () {
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
    HAL_Delay(5);
 8000f9c:	2005      	movs	r0, #5
 8000f9e:	f000 fff1 	bl	8001f84 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_RESET);
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fac:	f002 fe5c 	bl	8003c68 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000fb0:	200a      	movs	r0, #10
 8000fb2:	f000 ffe7 	bl	8001f84 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fbc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc0:	f002 fe52 	bl	8003c68 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f000 ffdd 	bl	8001f84 <HAL_Delay>
}
 8000fca:	bf00      	nop
 8000fcc:	bd80      	pop	{r7, pc}
	...

08000fd0 <test_backlight>:


/**
 * @brief Test all backlight colors
 */
void test_backlight () {
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
    // TODO add red pwm
    for (int i = 0; i < 3; ++i) {
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	607b      	str	r3, [r7, #4]
 8000fda:	e02c      	b.n	8001036 <test_backlight+0x66>
        if (i != 2) {
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d01b      	beq.n	800101a <test_backlight+0x4a>
            HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);
 8000fe2:	4a1d      	ldr	r2, [pc, #116]	; (8001058 <test_backlight+0x88>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fea:	4a1c      	ldr	r2, [pc, #112]	; (800105c <test_backlight+0x8c>)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f002 fe37 	bl	8003c68 <HAL_GPIO_WritePin>
            HAL_Delay(200);
 8000ffa:	20c8      	movs	r0, #200	; 0xc8
 8000ffc:	f000 ffc2 	bl	8001f84 <HAL_Delay>
            HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 8001000:	4a15      	ldr	r2, [pc, #84]	; (8001058 <test_backlight+0x88>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001008:	4a14      	ldr	r2, [pc, #80]	; (800105c <test_backlight+0x8c>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001010:	2200      	movs	r2, #0
 8001012:	4619      	mov	r1, r3
 8001014:	f002 fe28 	bl	8003c68 <HAL_GPIO_WritePin>
 8001018:	e00a      	b.n	8001030 <test_backlight+0x60>
        } else {
            set_brightness(1.0);
 800101a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8001048 <test_backlight+0x78>
 800101e:	f000 fb23 	bl	8001668 <set_brightness>
            HAL_Delay(200);
 8001022:	20c8      	movs	r0, #200	; 0xc8
 8001024:	f000 ffae 	bl	8001f84 <HAL_Delay>
            set_brightness(0.0);
 8001028:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8001050 <test_backlight+0x80>
 800102c:	f000 fb1c 	bl	8001668 <set_brightness>
    for (int i = 0; i < 3; ++i) {
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3301      	adds	r3, #1
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b02      	cmp	r3, #2
 800103a:	ddcf      	ble.n	8000fdc <test_backlight+0xc>
        }
    }
}
 800103c:	bf00      	nop
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	00000000 	.word	0x00000000
 800104c:	3ff00000 	.word	0x3ff00000
	...
 8001058:	20000000 	.word	0x20000000
 800105c:	20000008 	.word	0x20000008

08001060 <set_backlight>:


/**
 * @brief Set a backlight color
 */
void set_backlight (uint8_t color, GPIO_PinState state) {
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	460a      	mov	r2, r1
 800106a:	71fb      	strb	r3, [r7, #7]
 800106c:	4613      	mov	r3, r2
 800106e:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(ports[color], pins[color], state);
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	4a07      	ldr	r2, [pc, #28]	; (8001090 <set_backlight+0x30>)
 8001074:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	4a06      	ldr	r2, [pc, #24]	; (8001094 <set_backlight+0x34>)
 800107c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001080:	79ba      	ldrb	r2, [r7, #6]
 8001082:	4619      	mov	r1, r3
 8001084:	f002 fdf0 	bl	8003c68 <HAL_GPIO_WritePin>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000000 	.word	0x20000000
 8001094:	20000008 	.word	0x20000008

08001098 <split_byte>:
/**
 * @brief Split a byte to send to the display
 * @param[in] byte The byte to split into two
 * @param[out] buffer Where to place the two new bytes
 */
void split_byte (uint8_t byte, uint8_t *buffer) {
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	6039      	str	r1, [r7, #0]
 80010a2:	71fb      	strb	r3, [r7, #7]
    buffer[0] = byte & 0x0F;            // lower bits first
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	701a      	strb	r2, [r3, #0]
    buffer[1] = (byte & 0xF0) >> 4;     // upper bits second
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	79fa      	ldrb	r2, [r7, #7]
 80010b6:	0912      	lsrs	r2, r2, #4
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	701a      	strb	r2, [r3, #0]
}
 80010bc:	bf00      	nop
 80010be:	370c      	adds	r7, #12
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr

080010c8 <display_transmit>:
 * @brief Send the display data or instructions
 * @param[in] startbyte The byte setting that initiates the transmit
 * @param[in] bytes The bytes that will be sent to the display
 * @param[in] length The number of bytes to send
 */
int display_transmit (uint8_t startbyte, uint8_t *bytes, uint16_t length) {
 80010c8:	b5b0      	push	{r4, r5, r7, lr}
 80010ca:	b088      	sub	sp, #32
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	6039      	str	r1, [r7, #0]
 80010d2:	71fb      	strb	r3, [r7, #7]
 80010d4:	4613      	mov	r3, r2
 80010d6:	80bb      	strh	r3, [r7, #4]
 80010d8:	466b      	mov	r3, sp
 80010da:	461d      	mov	r5, r3
    /* create message to transmit */
    uint16_t mes_length = length*2 +1; // +1 for start byte
 80010dc:	88bb      	ldrh	r3, [r7, #4]
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	3301      	adds	r3, #1
 80010e4:	837b      	strh	r3, [r7, #26]
    uint8_t message[mes_length];
 80010e6:	8b7c      	ldrh	r4, [r7, #26]
 80010e8:	4623      	mov	r3, r4
 80010ea:	3b01      	subs	r3, #1
 80010ec:	617b      	str	r3, [r7, #20]
 80010ee:	b2a0      	uxth	r0, r4
 80010f0:	f04f 0100 	mov.w	r1, #0
 80010f4:	f04f 0200 	mov.w	r2, #0
 80010f8:	f04f 0300 	mov.w	r3, #0
 80010fc:	00cb      	lsls	r3, r1, #3
 80010fe:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001102:	00c2      	lsls	r2, r0, #3
 8001104:	b2a0      	uxth	r0, r4
 8001106:	f04f 0100 	mov.w	r1, #0
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	f04f 0300 	mov.w	r3, #0
 8001112:	00cb      	lsls	r3, r1, #3
 8001114:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001118:	00c2      	lsls	r2, r0, #3
 800111a:	4623      	mov	r3, r4
 800111c:	3307      	adds	r3, #7
 800111e:	08db      	lsrs	r3, r3, #3
 8001120:	00db      	lsls	r3, r3, #3
 8001122:	ebad 0d03 	sub.w	sp, sp, r3
 8001126:	466b      	mov	r3, sp
 8001128:	3300      	adds	r3, #0
 800112a:	613b      	str	r3, [r7, #16]

    message[0] = startbyte;  // start byte
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	79fa      	ldrb	r2, [r7, #7]
 8001130:	701a      	strb	r2, [r3, #0]

    uint8_t divided[2]; // for splitting a byte into two
    for (int i = 0; i < length; ++i) {
 8001132:	2300      	movs	r3, #0
 8001134:	61fb      	str	r3, [r7, #28]
 8001136:	e018      	b.n	800116a <display_transmit+0xa2>
        split_byte(bytes[i], divided);
 8001138:	69fb      	ldr	r3, [r7, #28]
 800113a:	683a      	ldr	r2, [r7, #0]
 800113c:	4413      	add	r3, r2
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	f107 020c 	add.w	r2, r7, #12
 8001144:	4611      	mov	r1, r2
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ffa6 	bl	8001098 <split_byte>
        message[1 + i*2] = divided[0];
 800114c:	69fb      	ldr	r3, [r7, #28]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	3301      	adds	r3, #1
 8001152:	7b39      	ldrb	r1, [r7, #12]
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	54d1      	strb	r1, [r2, r3]
        message[1 + i*2 +1] = divided[1];
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	3301      	adds	r3, #1
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	7b79      	ldrb	r1, [r7, #13]
 8001160:	693a      	ldr	r2, [r7, #16]
 8001162:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < length; ++i) {
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	3301      	adds	r3, #1
 8001168:	61fb      	str	r3, [r7, #28]
 800116a:	88bb      	ldrh	r3, [r7, #4]
 800116c:	69fa      	ldr	r2, [r7, #28]
 800116e:	429a      	cmp	r2, r3
 8001170:	dbe2      	blt.n	8001138 <display_transmit+0x70>
    }

    if (HAL_SPI_Transmit(&hspi2, message, mes_length, 100) != HAL_OK) {
 8001172:	6939      	ldr	r1, [r7, #16]
 8001174:	8b7a      	ldrh	r2, [r7, #26]
 8001176:	2364      	movs	r3, #100	; 0x64
 8001178:	4806      	ldr	r0, [pc, #24]	; (8001194 <display_transmit+0xcc>)
 800117a:	f004 fc56 	bl	8005a2a <HAL_SPI_Transmit>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <display_transmit+0xc0>
        return 1;
 8001184:	2301      	movs	r3, #1
 8001186:	e000      	b.n	800118a <display_transmit+0xc2>
    }
    return 0;
 8001188:	2300      	movs	r3, #0
 800118a:	46ad      	mov	sp, r5
}
 800118c:	4618      	mov	r0, r3
 800118e:	3720      	adds	r7, #32
 8001190:	46bd      	mov	sp, r7
 8001192:	bdb0      	pop	{r4, r5, r7, pc}
 8001194:	20000134 	.word	0x20000134

08001198 <display_send_instruction>:
/**
 * @brief Send instruction bytes via spi to the display
 * @param[in] instructions A pointer to the instructions to send to the display
 * @param[in] length The number of instructions
 */
int display_send_instruction (uint8_t *instructions, uint16_t length) {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	460b      	mov	r3, r1
 80011a2:	807b      	strh	r3, [r7, #2]
    return display_transmit(0x1F, instructions, length);
 80011a4:	887b      	ldrh	r3, [r7, #2]
 80011a6:	461a      	mov	r2, r3
 80011a8:	6879      	ldr	r1, [r7, #4]
 80011aa:	201f      	movs	r0, #31
 80011ac:	f7ff ff8c 	bl	80010c8 <display_transmit>
 80011b0:	4603      	mov	r3, r0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3708      	adds	r7, #8
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}

080011ba <display_write>:
/**
 * @brief Write characters to the display where the cursor currently are
 * @param characters The characters to write
 * @param length The number of characters
 */
int display_write (char *characters, uint16_t length) {
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
 80011c2:	460b      	mov	r3, r1
 80011c4:	807b      	strh	r3, [r7, #2]
    return display_transmit(0b01011111, (uint8_t*)characters, length);
 80011c6:	887b      	ldrh	r3, [r7, #2]
 80011c8:	461a      	mov	r2, r3
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	205f      	movs	r0, #95	; 0x5f
 80011ce:	f7ff ff7b 	bl	80010c8 <display_transmit>
 80011d2:	4603      	mov	r3, r0
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	3708      	adds	r7, #8
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <set_row>:
uint8_t rows[] = {0b10000000, 0b10100000, 0b11000000, 0b11100000};
/**
 * @brief Set the cursor on the display
 * @param row The row to write to
 */
int set_row (uint8_t row) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
    /* the address range of DDARM is 00H-13H, 20H-33H, 40H53H, 60H-73H */
    return display_send_instruction(&rows[row], 1);
 80011e6:	79fb      	ldrb	r3, [r7, #7]
 80011e8:	4a05      	ldr	r2, [pc, #20]	; (8001200 <set_row+0x24>)
 80011ea:	4413      	add	r3, r2
 80011ec:	2101      	movs	r1, #1
 80011ee:	4618      	mov	r0, r3
 80011f0:	f7ff ffd2 	bl	8001198 <display_send_instruction>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000000c 	.word	0x2000000c

08001204 <display_write_row>:
 * @brief Write text to a specific row on the display
 * @param characters The characters to write
 * @param length The number of characters
 * @param row The row to write to
 */
int display_write_row (char *characters, uint16_t length, uint8_t row) {
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	460b      	mov	r3, r1
 800120e:	807b      	strh	r3, [r7, #2]
 8001210:	4613      	mov	r3, r2
 8001212:	707b      	strb	r3, [r7, #1]
    set_row(row);
 8001214:	787b      	ldrb	r3, [r7, #1]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff ffe0 	bl	80011dc <set_row>
    return display_write(characters, length);
 800121c:	887b      	ldrh	r3, [r7, #2]
 800121e:	4619      	mov	r1, r3
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff ffca 	bl	80011ba <display_write>
 8001226:	4603      	mov	r3, r0
}
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <clear_display>:

/**
 * @brief Clears the display
 */
int clear_display () {
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
    uint8_t ins = 0x01;
 8001236:	2301      	movs	r3, #1
 8001238:	71fb      	strb	r3, [r7, #7]
    return display_send_instruction(&ins, 1);
 800123a:	1dfb      	adds	r3, r7, #7
 800123c:	2101      	movs	r1, #1
 800123e:	4618      	mov	r0, r3
 8001240:	f7ff ffaa 	bl	8001198 <display_send_instruction>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <init_display>:

/**
 * @brief Initialise the display
 */
void init_display () {
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
    hardware_reset();
 8001256:	f7ff fe9f 	bl	8000f98 <hardware_reset>

    test_backlight();
 800125a:	f7ff feb9 	bl	8000fd0 <test_backlight>
//    init_backlight();

    uint16_t ins_length = 12;
 800125e:	230c      	movs	r3, #12
 8001260:	827b      	strh	r3, [r7, #18]
    uint8_t instructions[] = {
 8001262:	4a19      	ldr	r2, [pc, #100]	; (80012c8 <init_display+0x78>)
 8001264:	1d3b      	adds	r3, r7, #4
 8001266:	ca07      	ldmia	r2, {r0, r1, r2}
 8001268:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0x01,
        0x38,
        0x0F,
    };

    if (display_send_instruction(instructions, ins_length))
 800126c:	8a7a      	ldrh	r2, [r7, #18]
 800126e:	1d3b      	adds	r3, r7, #4
 8001270:	4611      	mov	r1, r2
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff90 	bl	8001198 <display_send_instruction>
 8001278:	4603      	mov	r3, r0
 800127a:	2b00      	cmp	r3, #0
 800127c:	d001      	beq.n	8001282 <init_display+0x32>
        handle_error();
 800127e:	f000 f827 	bl	80012d0 <handle_error>

    HAL_Delay(5);
 8001282:	2005      	movs	r0, #5
 8001284:	f000 fe7e 	bl	8001f84 <HAL_Delay>

    for (int i = 0; i < 4; ++i) {
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
 800128c:	e00b      	b.n	80012a6 <init_display+0x56>
        set_row(i);
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	b2db      	uxtb	r3, r3
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff ffa2 	bl	80011dc <set_row>
        display_write("0123456789", 10);
 8001298:	210a      	movs	r1, #10
 800129a:	480c      	ldr	r0, [pc, #48]	; (80012cc <init_display+0x7c>)
 800129c:	f7ff ff8d 	bl	80011ba <display_write>
    for (int i = 0; i < 4; ++i) {
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	3301      	adds	r3, #1
 80012a4:	617b      	str	r3, [r7, #20]
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	2b03      	cmp	r3, #3
 80012aa:	ddf0      	ble.n	800128e <init_display+0x3e>
    }

    HAL_Delay(500);
 80012ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012b0:	f000 fe68 	bl	8001f84 <HAL_Delay>

    clear_display();
 80012b4:	f7ff ffbc 	bl	8001230 <clear_display>

    HAL_Delay(10);
 80012b8:	200a      	movs	r0, #10
 80012ba:	f000 fe63 	bl	8001f84 <HAL_Delay>
}
 80012be:	bf00      	nop
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	08009608 	.word	0x08009608
 80012cc:	080095fc 	.word	0x080095fc

080012d0 <handle_error>:
 *      Author: Dell
 */

#include "main.h"

void handle_error( void ) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d4:	b672      	cpsid	i
}
 80012d6:	bf00      	nop
    __disable_irq();
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80012d8:	2201      	movs	r2, #1
 80012da:	2120      	movs	r1, #32
 80012dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012e0:	f002 fcc2 	bl	8003c68 <HAL_GPIO_WritePin>
    while (1)
 80012e4:	e7fe      	b.n	80012e4 <handle_error+0x14>
	...

080012e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b08a      	sub	sp, #40	; 0x28
 80012ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ee:	f107 0314 	add.w	r3, r7, #20
 80012f2:	2200      	movs	r2, #0
 80012f4:	601a      	str	r2, [r3, #0]
 80012f6:	605a      	str	r2, [r3, #4]
 80012f8:	609a      	str	r2, [r3, #8]
 80012fa:	60da      	str	r2, [r3, #12]
 80012fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fe:	4b40      	ldr	r3, [pc, #256]	; (8001400 <MX_GPIO_Init+0x118>)
 8001300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001302:	4a3f      	ldr	r2, [pc, #252]	; (8001400 <MX_GPIO_Init+0x118>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800130a:	4b3d      	ldr	r3, [pc, #244]	; (8001400 <MX_GPIO_Init+0x118>)
 800130c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	613b      	str	r3, [r7, #16]
 8001314:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001316:	4b3a      	ldr	r3, [pc, #232]	; (8001400 <MX_GPIO_Init+0x118>)
 8001318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131a:	4a39      	ldr	r2, [pc, #228]	; (8001400 <MX_GPIO_Init+0x118>)
 800131c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001322:	4b37      	ldr	r3, [pc, #220]	; (8001400 <MX_GPIO_Init+0x118>)
 8001324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132e:	4b34      	ldr	r3, [pc, #208]	; (8001400 <MX_GPIO_Init+0x118>)
 8001330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001332:	4a33      	ldr	r2, [pc, #204]	; (8001400 <MX_GPIO_Init+0x118>)
 8001334:	f043 0301 	orr.w	r3, r3, #1
 8001338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800133a:	4b31      	ldr	r3, [pc, #196]	; (8001400 <MX_GPIO_Init+0x118>)
 800133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001346:	4b2e      	ldr	r3, [pc, #184]	; (8001400 <MX_GPIO_Init+0x118>)
 8001348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134a:	4a2d      	ldr	r2, [pc, #180]	; (8001400 <MX_GPIO_Init+0x118>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001352:	4b2b      	ldr	r3, [pc, #172]	; (8001400 <MX_GPIO_Init+0x118>)
 8001354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800135e:	4b28      	ldr	r3, [pc, #160]	; (8001400 <MX_GPIO_Init+0x118>)
 8001360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001362:	4a27      	ldr	r2, [pc, #156]	; (8001400 <MX_GPIO_Init+0x118>)
 8001364:	f043 0308 	orr.w	r3, r3, #8
 8001368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136a:	4b25      	ldr	r3, [pc, #148]	; (8001400 <MX_GPIO_Init+0x118>)
 800136c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001376:	2200      	movs	r2, #0
 8001378:	2120      	movs	r1, #32
 800137a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800137e:	f002 fc73 	bl	8003c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 8001382:	2201      	movs	r2, #1
 8001384:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001388:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800138c:	f002 fc6c 	bl	8003c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Disp_Green_Pin|Disp_White_Pin, GPIO_PIN_RESET);
 8001390:	2200      	movs	r2, #0
 8001392:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001396:	481b      	ldr	r0, [pc, #108]	; (8001404 <MX_GPIO_Init+0x11c>)
 8001398:	f002 fc66 	bl	8003c68 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800139c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013a2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013ac:	f107 0314 	add.w	r3, r7, #20
 80013b0:	4619      	mov	r1, r3
 80013b2:	4814      	ldr	r0, [pc, #80]	; (8001404 <MX_GPIO_Init+0x11c>)
 80013b4:	f002 faae 	bl	8003914 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Disp_Reset_Pin;
 80013b8:	f248 0320 	movw	r3, #32800	; 0x8020
 80013bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2301      	movs	r3, #1
 80013c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d4:	f002 fa9e 	bl	8003914 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Disp_Green_Pin|Disp_White_Pin;
 80013d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	4804      	ldr	r0, [pc, #16]	; (8001404 <MX_GPIO_Init+0x11c>)
 80013f2:	f002 fa8f 	bl	8003914 <HAL_GPIO_Init>

}
 80013f6:	bf00      	nop
 80013f8:	3728      	adds	r7, #40	; 0x28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000
 8001404:	48000800 	.word	0x48000800

08001408 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001408:	b590      	push	{r4, r7, lr}
 800140a:	b08f      	sub	sp, #60	; 0x3c
 800140c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800140e:	f000 fd3d 	bl	8001e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001412:	f000 f8bf 	bl	8001594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001416:	f7ff ff67 	bl	80012e8 <MX_GPIO_Init>
  MX_UART5_Init();
 800141a:	f000 fc53 	bl	8001cc4 <MX_UART5_Init>
  MX_SPI2_Init();
 800141e:	f000 f9af 	bl	8001780 <MX_SPI2_Init>
  MX_RTC_Init();
 8001422:	f000 f953 	bl	80016cc <MX_RTC_Init>
  MX_TIM3_Init();
 8001426:	f000 faeb 	bl	8001a00 <MX_TIM3_Init>
  MX_ADC1_Init();
 800142a:	f7ff fc93 	bl	8000d54 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800142e:	2104      	movs	r1, #4
 8001430:	4853      	ldr	r0, [pc, #332]	; (8001580 <main+0x178>)
 8001432:	f004 fe85 	bl	8006140 <HAL_TIM_PWM_Start>
  init_display();
 8001436:	f7ff ff0b 	bl	8001250 <init_display>

  /* program variables */
  char c;
  RTC_TimeTypeDef time;
  uint8_t buf_len = 8;
 800143a:	2308      	movs	r3, #8
 800143c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  char buf[buf_len];
 8001440:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8001444:	4623      	mov	r3, r4
 8001446:	3b01      	subs	r3, #1
 8001448:	62bb      	str	r3, [r7, #40]	; 0x28
 800144a:	b2e0      	uxtb	r0, r4
 800144c:	f04f 0100 	mov.w	r1, #0
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	f04f 0300 	mov.w	r3, #0
 8001458:	00cb      	lsls	r3, r1, #3
 800145a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800145e:	00c2      	lsls	r2, r0, #3
 8001460:	b2e0      	uxtb	r0, r4
 8001462:	f04f 0100 	mov.w	r1, #0
 8001466:	f04f 0200 	mov.w	r2, #0
 800146a:	f04f 0300 	mov.w	r3, #0
 800146e:	00cb      	lsls	r3, r1, #3
 8001470:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001474:	00c2      	lsls	r2, r0, #3
 8001476:	4623      	mov	r3, r4
 8001478:	3307      	adds	r3, #7
 800147a:	08db      	lsrs	r3, r3, #3
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	ebad 0d03 	sub.w	sp, sp, r3
 8001482:	ab02      	add	r3, sp, #8
 8001484:	3300      	adds	r3, #0
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pot;

  /* initialise time */
  set_backlight(WHITE, GPIO_PIN_SET);
 8001488:	2101      	movs	r1, #1
 800148a:	2000      	movs	r0, #0
 800148c:	f7ff fde8 	bl	8001060 <set_backlight>
  int h, m, s;
  display_write_row("Enter time", 10, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	210a      	movs	r1, #10
 8001494:	483b      	ldr	r0, [pc, #236]	; (8001584 <main+0x17c>)
 8001496:	f7ff feb5 	bl	8001204 <display_write_row>
  uart_get_clock_input(buf);
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	4618      	mov	r0, r3
 800149e:	f000 fbd7 	bl	8001c50 <uart_get_clock_input>
  uart_println("");
 80014a2:	4839      	ldr	r0, [pc, #228]	; (8001588 <main+0x180>)
 80014a4:	f000 fba4 	bl	8001bf0 <uart_println>
  sscanf(buf, "%02d:%02d:%02d", &h, &m, &s);
 80014a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80014aa:	1d39      	adds	r1, r7, #4
 80014ac:	f107 0208 	add.w	r2, r7, #8
 80014b0:	463b      	mov	r3, r7
 80014b2:	9300      	str	r3, [sp, #0]
 80014b4:	460b      	mov	r3, r1
 80014b6:	4935      	ldr	r1, [pc, #212]	; (800158c <main+0x184>)
 80014b8:	f006 ffc2 	bl	8008440 <siscanf>
  start_clock(h, m, s);
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	687a      	ldr	r2, [r7, #4]
 80014c2:	b2d1      	uxtb	r1, r2
 80014c4:	683a      	ldr	r2, [r7, #0]
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff fd23 	bl	8000f14 <start_clock>
  clear_display();
 80014ce:	f7ff feaf 	bl	8001230 <clear_display>
  set_backlight(WHITE, GPIO_PIN_RESET);
 80014d2:	2100      	movs	r1, #0
 80014d4:	2000      	movs	r0, #0
 80014d6:	f7ff fdc3 	bl	8001060 <set_backlight>
  set_brightness(1.0);
 80014da:	ed9f 0b25 	vldr	d0, [pc, #148]	; 8001570 <main+0x168>
 80014de:	f000 f8c3 	bl	8001668 <set_brightness>

  /* initialise potentiometer */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 80014e2:	217f      	movs	r1, #127	; 0x7f
 80014e4:	482a      	ldr	r0, [pc, #168]	; (8001590 <main+0x188>)
 80014e6:	f001 ff75 	bl	80033d4 <HAL_ADCEx_Calibration_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//      uart_receive(&c, 1);
      HAL_Delay(100);
 80014ea:	2064      	movs	r0, #100	; 0x64
 80014ec:	f000 fd4a 	bl	8001f84 <HAL_Delay>

      /* potentiometer */
      HAL_ADC_Start(&hadc1);
 80014f0:	4827      	ldr	r0, [pc, #156]	; (8001590 <main+0x188>)
 80014f2:	f001 f8cb 	bl	800268c <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 10);
 80014f6:	210a      	movs	r1, #10
 80014f8:	4825      	ldr	r0, [pc, #148]	; (8001590 <main+0x188>)
 80014fa:	f001 f981 	bl	8002800 <HAL_ADC_PollForConversion>
      pot = HAL_ADC_GetValue(&hadc1);
 80014fe:	4824      	ldr	r0, [pc, #144]	; (8001590 <main+0x188>)
 8001500:	f001 fa56 	bl	80029b0 <HAL_ADC_GetValue>
 8001504:	6238      	str	r0, [r7, #32]
      uart_printnum(pot);
 8001506:	6a38      	ldr	r0, [r7, #32]
 8001508:	f000 fb8a 	bl	8001c20 <uart_printnum>
      set_brightness((double)pot/POT_MAX);
 800150c:	6a38      	ldr	r0, [r7, #32]
 800150e:	f7fe fff9 	bl	8000504 <__aeabi_ui2d>
 8001512:	a319      	add	r3, pc, #100	; (adr r3, 8001578 <main+0x170>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7ff f998 	bl	800084c <__aeabi_ddiv>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	ec43 2b17 	vmov	d7, r2, r3
 8001524:	eeb0 0a47 	vmov.f32	s0, s14
 8001528:	eef0 0a67 	vmov.f32	s1, s15
 800152c:	f000 f89c 	bl	8001668 <set_brightness>

      /* get and write time */
      get_time(&time);
 8001530:	f107 030c 	add.w	r3, r7, #12
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff fd0f 	bl	8000f58 <get_time>
      sprintf(buf, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 800153a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800153c:	7b3b      	ldrb	r3, [r7, #12]
 800153e:	461a      	mov	r2, r3
 8001540:	7b7b      	ldrb	r3, [r7, #13]
 8001542:	4619      	mov	r1, r3
 8001544:	7bbb      	ldrb	r3, [r7, #14]
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	460b      	mov	r3, r1
 800154a:	4910      	ldr	r1, [pc, #64]	; (800158c <main+0x184>)
 800154c:	f006 ff58 	bl	8008400 <siprintf>
      uart_println(buf);
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	4618      	mov	r0, r3
 8001554:	f000 fb4c 	bl	8001bf0 <uart_println>
      display_write_row(buf, buf_len, 0);
 8001558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155a:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800155e:	b291      	uxth	r1, r2
 8001560:	2200      	movs	r2, #0
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fe4e 	bl	8001204 <display_write_row>
      HAL_Delay(100);
 8001568:	e7bf      	b.n	80014ea <main+0xe2>
 800156a:	bf00      	nop
 800156c:	f3af 8000 	nop.w
 8001570:	00000000 	.word	0x00000000
 8001574:	3ff00000 	.word	0x3ff00000
 8001578:	00000000 	.word	0x00000000
 800157c:	40afc400 	.word	0x40afc400
 8001580:	20000198 	.word	0x20000198
 8001584:	08009614 	.word	0x08009614
 8001588:	08009620 	.word	0x08009620
 800158c:	08009624 	.word	0x08009624
 8001590:	200000ac 	.word	0x200000ac

08001594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b096      	sub	sp, #88	; 0x58
 8001598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800159a:	f107 0314 	add.w	r3, r7, #20
 800159e:	2244      	movs	r2, #68	; 0x44
 80015a0:	2100      	movs	r1, #0
 80015a2:	4618      	mov	r0, r3
 80015a4:	f006 ff24 	bl	80083f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a8:	463b      	mov	r3, r7
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
 80015b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015b6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015ba:	f002 fb7b 	bl	8003cb4 <HAL_PWREx_ControlVoltageScaling>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015c4:	f000 f84a 	bl	800165c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80015c8:	230a      	movs	r3, #10
 80015ca:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015cc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015d2:	2310      	movs	r3, #16
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015d6:	2301      	movs	r3, #1
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015da:	2302      	movs	r3, #2
 80015dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015de:	2302      	movs	r3, #2
 80015e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015e2:	2301      	movs	r3, #1
 80015e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015e6:	230a      	movs	r3, #10
 80015e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015ea:	2307      	movs	r3, #7
 80015ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015ee:	2302      	movs	r3, #2
 80015f0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015f2:	2302      	movs	r3, #2
 80015f4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f6:	f107 0314 	add.w	r3, r7, #20
 80015fa:	4618      	mov	r0, r3
 80015fc:	f002 fbb0 	bl	8003d60 <HAL_RCC_OscConfig>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001606:	f000 f829 	bl	800165c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800160a:	230f      	movs	r3, #15
 800160c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800160e:	2303      	movs	r3, #3
 8001610:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001612:	2300      	movs	r3, #0
 8001614:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800161e:	463b      	mov	r3, r7
 8001620:	2104      	movs	r1, #4
 8001622:	4618      	mov	r0, r3
 8001624:	f002 ff82 	bl	800452c <HAL_RCC_ClockConfig>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d001      	beq.n	8001632 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800162e:	f000 f815 	bl	800165c <Error_Handler>
  }
}
 8001632:	bf00      	nop
 8001634:	3758      	adds	r7, #88	; 0x58
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
	...

0800163c <HAL_UART_TxCpltCallback>:
* @note This example shows a simple way to report end of IT Tx transfer, and
* you can add your own implementation.
* @retval None
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
    /* Set transmission flag: transfer complete*/
    uartReady = SET;
 8001644:	4b04      	ldr	r3, [pc, #16]	; (8001658 <HAL_UART_TxCpltCallback+0x1c>)
 8001646:	2201      	movs	r2, #1
 8001648:	701a      	strb	r2, [r3, #0]
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	2000009c 	.word	0x2000009c

0800165c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    handle_error();
 8001660:	f7ff fe36 	bl	80012d0 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8001664:	bf00      	nop
 8001666:	bd80      	pop	{r7, pc}

08001668 <set_brightness>:

/**
 * @brief Change the PWM pulse width of the red background light
 * @param[in] brightness The brightness of the backlight
 */
void set_brightness (double brightness) {
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	ed87 0b00 	vstr	d0, [r7]
    brightness *= brightness * brightness;
 8001672:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001676:	e9d7 0100 	ldrd	r0, r1, [r7]
 800167a:	f7fe ffbd 	bl	80005f8 <__aeabi_dmul>
 800167e:	4602      	mov	r2, r0
 8001680:	460b      	mov	r3, r1
 8001682:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001686:	f7fe ffb7 	bl	80005f8 <__aeabi_dmul>
 800168a:	4602      	mov	r2, r0
 800168c:	460b      	mov	r3, r1
 800168e:	e9c7 2300 	strd	r2, r3, [r7]
    uint16_t pulse = (uint16_t) (brightness * (double)0xFFFF);
 8001692:	a30c      	add	r3, pc, #48	; (adr r3, 80016c4 <set_brightness+0x5c>)
 8001694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001698:	e9d7 0100 	ldrd	r0, r1, [r7]
 800169c:	f7fe ffac 	bl	80005f8 <__aeabi_dmul>
 80016a0:	4602      	mov	r2, r0
 80016a2:	460b      	mov	r3, r1
 80016a4:	4610      	mov	r0, r2
 80016a6:	4619      	mov	r1, r3
 80016a8:	f7ff f9b8 	bl	8000a1c <__aeabi_d2uiz>
 80016ac:	4603      	mov	r3, r0
 80016ae:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim3, CHANNEL, pulse);
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <set_brightness+0x58>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	89fa      	ldrh	r2, [r7, #14]
 80016b6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016b8:	bf00      	nop
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	20000198 	.word	0x20000198
 80016c4:	00000000 	.word	0x00000000
 80016c8:	40efffe0 	.word	0x40efffe0

080016cc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016d0:	4b10      	ldr	r3, [pc, #64]	; (8001714 <MX_RTC_Init+0x48>)
 80016d2:	4a11      	ldr	r2, [pc, #68]	; (8001718 <MX_RTC_Init+0x4c>)
 80016d4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016d6:	4b0f      	ldr	r3, [pc, #60]	; (8001714 <MX_RTC_Init+0x48>)
 80016d8:	2200      	movs	r2, #0
 80016da:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016dc:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <MX_RTC_Init+0x48>)
 80016de:	227f      	movs	r2, #127	; 0x7f
 80016e0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80016e2:	4b0c      	ldr	r3, [pc, #48]	; (8001714 <MX_RTC_Init+0x48>)
 80016e4:	22ff      	movs	r2, #255	; 0xff
 80016e6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016e8:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <MX_RTC_Init+0x48>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <MX_RTC_Init+0x48>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80016f4:	4b07      	ldr	r3, [pc, #28]	; (8001714 <MX_RTC_Init+0x48>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80016fa:	4b06      	ldr	r3, [pc, #24]	; (8001714 <MX_RTC_Init+0x48>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001700:	4804      	ldr	r0, [pc, #16]	; (8001714 <MX_RTC_Init+0x48>)
 8001702:	f003 fdd5 	bl	80052b0 <HAL_RTC_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800170c:	f7ff ffa6 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001710:	bf00      	nop
 8001712:	bd80      	pop	{r7, pc}
 8001714:	20000110 	.word	0x20000110
 8001718:	40002800 	.word	0x40002800

0800171c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b0a4      	sub	sp, #144	; 0x90
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001724:	f107 0308 	add.w	r3, r7, #8
 8001728:	2288      	movs	r2, #136	; 0x88
 800172a:	2100      	movs	r1, #0
 800172c:	4618      	mov	r0, r3
 800172e:	f006 fe5f 	bl	80083f0 <memset>
  if(rtcHandle->Instance==RTC)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a10      	ldr	r2, [pc, #64]	; (8001778 <HAL_RTC_MspInit+0x5c>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d118      	bne.n	800176e <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800173c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001740:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001742:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001746:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800174a:	f107 0308 	add.w	r3, r7, #8
 800174e:	4618      	mov	r0, r3
 8001750:	f003 f8f2 	bl	8004938 <HAL_RCCEx_PeriphCLKConfig>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800175a:	f7ff ff7f 	bl	800165c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800175e:	4b07      	ldr	r3, [pc, #28]	; (800177c <HAL_RTC_MspInit+0x60>)
 8001760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001764:	4a05      	ldr	r2, [pc, #20]	; (800177c <HAL_RTC_MspInit+0x60>)
 8001766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800176a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800176e:	bf00      	nop
 8001770:	3790      	adds	r7, #144	; 0x90
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	40002800 	.word	0x40002800
 800177c:	40021000 	.word	0x40021000

08001780 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001784:	4b1b      	ldr	r3, [pc, #108]	; (80017f4 <MX_SPI2_Init+0x74>)
 8001786:	4a1c      	ldr	r2, [pc, #112]	; (80017f8 <MX_SPI2_Init+0x78>)
 8001788:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <MX_SPI2_Init+0x74>)
 800178c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001790:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8001792:	4b18      	ldr	r3, [pc, #96]	; (80017f4 <MX_SPI2_Init+0x74>)
 8001794:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001798:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800179a:	4b16      	ldr	r3, [pc, #88]	; (80017f4 <MX_SPI2_Init+0x74>)
 800179c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80017a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_SPI2_Init+0x74>)
 80017a4:	2202      	movs	r2, #2
 80017a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <MX_SPI2_Init+0x74>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_SPI2_Init+0x74>)
 80017b0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_SPI2_Init+0x74>)
 80017b8:	2230      	movs	r2, #48	; 0x30
 80017ba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80017bc:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <MX_SPI2_Init+0x74>)
 80017be:	2280      	movs	r2, #128	; 0x80
 80017c0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017c2:	4b0c      	ldr	r3, [pc, #48]	; (80017f4 <MX_SPI2_Init+0x74>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017c8:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <MX_SPI2_Init+0x74>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80017ce:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <MX_SPI2_Init+0x74>)
 80017d0:	2207      	movs	r2, #7
 80017d2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <MX_SPI2_Init+0x74>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80017da:	4b06      	ldr	r3, [pc, #24]	; (80017f4 <MX_SPI2_Init+0x74>)
 80017dc:	2200      	movs	r2, #0
 80017de:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80017e0:	4804      	ldr	r0, [pc, #16]	; (80017f4 <MX_SPI2_Init+0x74>)
 80017e2:	f004 f87f 	bl	80058e4 <HAL_SPI_Init>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80017ec:	f7ff ff36 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80017f0:	bf00      	nop
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20000134 	.word	0x20000134
 80017f8:	40003800 	.word	0x40003800

080017fc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b08a      	sub	sp, #40	; 0x28
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
 8001812:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a25      	ldr	r2, [pc, #148]	; (80018b0 <HAL_SPI_MspInit+0xb4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d144      	bne.n	80018a8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800181e:	4b25      	ldr	r3, [pc, #148]	; (80018b4 <HAL_SPI_MspInit+0xb8>)
 8001820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001822:	4a24      	ldr	r2, [pc, #144]	; (80018b4 <HAL_SPI_MspInit+0xb8>)
 8001824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001828:	6593      	str	r3, [r2, #88]	; 0x58
 800182a:	4b22      	ldr	r3, [pc, #136]	; (80018b4 <HAL_SPI_MspInit+0xb8>)
 800182c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001836:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <HAL_SPI_MspInit+0xb8>)
 8001838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800183a:	4a1e      	ldr	r2, [pc, #120]	; (80018b4 <HAL_SPI_MspInit+0xb8>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001842:	4b1c      	ldr	r3, [pc, #112]	; (80018b4 <HAL_SPI_MspInit+0xb8>)
 8001844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <HAL_SPI_MspInit+0xb8>)
 8001850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001852:	4a18      	ldr	r2, [pc, #96]	; (80018b4 <HAL_SPI_MspInit+0xb8>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800185a:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <HAL_SPI_MspInit+0xb8>)
 800185c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	60bb      	str	r3, [r7, #8]
 8001864:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = Display_OUT_Pin;
 8001866:	2308      	movs	r3, #8
 8001868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	2302      	movs	r3, #2
 800186c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001872:	2303      	movs	r3, #3
 8001874:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001876:	2305      	movs	r3, #5
 8001878:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Display_OUT_GPIO_Port, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	480d      	ldr	r0, [pc, #52]	; (80018b8 <HAL_SPI_MspInit+0xbc>)
 8001882:	f002 f847 	bl	8003914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Dispay_CLK_Pin|Display_CS_Pin;
 8001886:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800188a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001894:	2303      	movs	r3, #3
 8001896:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001898:	2305      	movs	r3, #5
 800189a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	4619      	mov	r1, r3
 80018a2:	4806      	ldr	r0, [pc, #24]	; (80018bc <HAL_SPI_MspInit+0xc0>)
 80018a4:	f002 f836 	bl	8003914 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80018a8:	bf00      	nop
 80018aa:	3728      	adds	r7, #40	; 0x28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40003800 	.word	0x40003800
 80018b4:	40021000 	.word	0x40021000
 80018b8:	48000800 	.word	0x48000800
 80018bc:	48000400 	.word	0x48000400

080018c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <HAL_MspInit+0x44>)
 80018c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ca:	4a0e      	ldr	r2, [pc, #56]	; (8001904 <HAL_MspInit+0x44>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	6613      	str	r3, [r2, #96]	; 0x60
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <HAL_MspInit+0x44>)
 80018d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <HAL_MspInit+0x44>)
 80018e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e2:	4a08      	ldr	r2, [pc, #32]	; (8001904 <HAL_MspInit+0x44>)
 80018e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018e8:	6593      	str	r3, [r2, #88]	; 0x58
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <HAL_MspInit+0x44>)
 80018ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	603b      	str	r3, [r7, #0]
 80018f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f6:	bf00      	nop
 80018f8:	370c      	adds	r7, #12
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	40021000 	.word	0x40021000

08001908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800190c:	e7fe      	b.n	800190c <NMI_Handler+0x4>

0800190e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190e:	b480      	push	{r7}
 8001910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001912:	e7fe      	b.n	8001912 <HardFault_Handler+0x4>

08001914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001918:	e7fe      	b.n	8001918 <MemManage_Handler+0x4>

0800191a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191a:	b480      	push	{r7}
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800191e:	e7fe      	b.n	800191e <BusFault_Handler+0x4>

08001920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001924:	e7fe      	b.n	8001924 <UsageFault_Handler+0x4>

08001926 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001926:	b480      	push	{r7}
 8001928:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800192a:	bf00      	nop
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr

08001934 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001934:	b480      	push	{r7}
 8001936:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001942:	b480      	push	{r7}
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	46bd      	mov	sp, r7
 800194a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194e:	4770      	bx	lr

08001950 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001954:	f000 faf6 	bl	8001f44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}

0800195c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <UART5_IRQHandler+0x10>)
 8001962:	f005 fd3d 	bl	80073e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	200001e4 	.word	0x200001e4

08001970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001978:	4a14      	ldr	r2, [pc, #80]	; (80019cc <_sbrk+0x5c>)
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <_sbrk+0x60>)
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001984:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <_sbrk+0x64>)
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <_sbrk+0x68>)
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	429a      	cmp	r2, r3
 800199e:	d207      	bcs.n	80019b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a0:	f006 fcfc 	bl	800839c <__errno>
 80019a4:	4603      	mov	r3, r0
 80019a6:	220c      	movs	r2, #12
 80019a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	e009      	b.n	80019c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b0:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b6:	4b07      	ldr	r3, [pc, #28]	; (80019d4 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	4a05      	ldr	r2, [pc, #20]	; (80019d4 <_sbrk+0x64>)
 80019c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20018000 	.word	0x20018000
 80019d0:	00000400 	.word	0x00000400
 80019d4:	200000a0 	.word	0x200000a0
 80019d8:	20000280 	.word	0x20000280

080019dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <SystemInit+0x20>)
 80019e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019e6:	4a05      	ldr	r2, [pc, #20]	; (80019fc <SystemInit+0x20>)
 80019e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08e      	sub	sp, #56	; 0x38
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
 8001a10:	609a      	str	r2, [r3, #8]
 8001a12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a14:	f107 031c 	add.w	r3, r7, #28
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a20:	463b      	mov	r3, r7
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]
 8001a2c:	611a      	str	r2, [r3, #16]
 8001a2e:	615a      	str	r2, [r3, #20]
 8001a30:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001a32:	4b2d      	ldr	r3, [pc, #180]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001a34:	4a2d      	ldr	r2, [pc, #180]	; (8001aec <MX_TIM3_Init+0xec>)
 8001a36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001a38:	4b2b      	ldr	r3, [pc, #172]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3e:	4b2a      	ldr	r3, [pc, #168]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001a44:	4b28      	ldr	r3, [pc, #160]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a4c:	4b26      	ldr	r3, [pc, #152]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a52:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001a58:	4823      	ldr	r0, [pc, #140]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001a5a:	f004 fab9 	bl	8005fd0 <HAL_TIM_Base_Init>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001a64:	f7ff fdfa 	bl	800165c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001a6e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a72:	4619      	mov	r1, r3
 8001a74:	481c      	ldr	r0, [pc, #112]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001a76:	f004 fd7d 	bl	8006574 <HAL_TIM_ConfigClockSource>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001a80:	f7ff fdec 	bl	800165c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001a84:	4818      	ldr	r0, [pc, #96]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001a86:	f004 fafa 	bl	800607e <HAL_TIM_PWM_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001a90:	f7ff fde4 	bl	800165c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a9c:	f107 031c 	add.w	r3, r7, #28
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	4811      	ldr	r0, [pc, #68]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001aa4:	f005 fa60 	bl	8006f68 <HAL_TIMEx_MasterConfigSynchronization>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001aae:	f7ff fdd5 	bl	800165c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ab2:	2360      	movs	r3, #96	; 0x60
 8001ab4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001aba:	2300      	movs	r3, #0
 8001abc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ac2:	463b      	mov	r3, r7
 8001ac4:	2204      	movs	r2, #4
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	4807      	ldr	r0, [pc, #28]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001aca:	f004 fc3f 	bl	800634c <HAL_TIM_PWM_ConfigChannel>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001ad4:	f7ff fdc2 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001ad8:	4803      	ldr	r0, [pc, #12]	; (8001ae8 <MX_TIM3_Init+0xe8>)
 8001ada:	f000 f829 	bl	8001b30 <HAL_TIM_MspPostInit>

}
 8001ade:	bf00      	nop
 8001ae0:	3738      	adds	r7, #56	; 0x38
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	20000198 	.word	0x20000198
 8001aec:	40000400 	.word	0x40000400

08001af0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0a      	ldr	r2, [pc, #40]	; (8001b28 <HAL_TIM_Base_MspInit+0x38>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d10b      	bne.n	8001b1a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b02:	4b0a      	ldr	r3, [pc, #40]	; (8001b2c <HAL_TIM_Base_MspInit+0x3c>)
 8001b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b06:	4a09      	ldr	r2, [pc, #36]	; (8001b2c <HAL_TIM_Base_MspInit+0x3c>)
 8001b08:	f043 0302 	orr.w	r3, r3, #2
 8001b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001b0e:	4b07      	ldr	r3, [pc, #28]	; (8001b2c <HAL_TIM_Base_MspInit+0x3c>)
 8001b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40000400 	.word	0x40000400
 8001b2c:	40021000 	.word	0x40021000

08001b30 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b088      	sub	sp, #32
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b38:	f107 030c 	add.w	r3, r7, #12
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	601a      	str	r2, [r3, #0]
 8001b40:	605a      	str	r2, [r3, #4]
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	60da      	str	r2, [r3, #12]
 8001b46:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a11      	ldr	r2, [pc, #68]	; (8001b94 <HAL_TIM_MspPostInit+0x64>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d11b      	bne.n	8001b8a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b52:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <HAL_TIM_MspPostInit+0x68>)
 8001b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b56:	4a10      	ldr	r2, [pc, #64]	; (8001b98 <HAL_TIM_MspPostInit+0x68>)
 8001b58:	f043 0304 	orr.w	r3, r3, #4
 8001b5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <HAL_TIM_MspPostInit+0x68>)
 8001b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b62:	f003 0304 	and.w	r3, r3, #4
 8001b66:	60bb      	str	r3, [r7, #8]
 8001b68:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Red_PWM_Pin;
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b7a:	2302      	movs	r3, #2
 8001b7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Red_PWM_GPIO_Port, &GPIO_InitStruct);
 8001b7e:	f107 030c 	add.w	r3, r7, #12
 8001b82:	4619      	mov	r1, r3
 8001b84:	4805      	ldr	r0, [pc, #20]	; (8001b9c <HAL_TIM_MspPostInit+0x6c>)
 8001b86:	f001 fec5 	bl	8003914 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b8a:	bf00      	nop
 8001b8c:	3720      	adds	r7, #32
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40000400 	.word	0x40000400
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	48000800 	.word	0x48000800

08001ba0 <uart_send>:

/**
 * @brief Send a string over uart
 * @param[in] message The character array to send
 */
int uart_send (char *buffer, uint16_t length) {
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	460b      	mov	r3, r1
 8001baa:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Transmit(&huart5, (uint8_t*)buffer, length, TIMEOUT);
 8001bac:	887a      	ldrh	r2, [r7, #2]
 8001bae:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <uart_send+0x24>)
 8001bb6:	f005 faad 	bl	8007114 <HAL_UART_Transmit>
 8001bba:	4603      	mov	r3, r0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	3708      	adds	r7, #8
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	200001e4 	.word	0x200001e4

08001bc8 <uart_receive>:
/**
 * @brief Recieve a string over uart
 * @param[out] buffer The place to write the recieved string
 * @param[in] length The amount of data to read
 */
int uart_receive (char *buffer, uint16_t length) {
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	460b      	mov	r3, r1
 8001bd2:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Receive(&huart5, (uint8_t *)buffer, length, TIMEOUT);
 8001bd4:	887a      	ldrh	r2, [r7, #2]
 8001bd6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bda:	6879      	ldr	r1, [r7, #4]
 8001bdc:	4803      	ldr	r0, [pc, #12]	; (8001bec <uart_receive+0x24>)
 8001bde:	f005 fb2d 	bl	800723c <HAL_UART_Receive>
 8001be2:	4603      	mov	r3, r0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200001e4 	.word	0x200001e4

08001bf0 <uart_println>:

/**
 * @brief send a string line to uart
 * @param[in] string The string to send
 */
int uart_println (char *string) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
    uart_send(string, strlen(string));
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7fe fae9 	bl	80001d0 <strlen>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	4619      	mov	r1, r3
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff ffcb 	bl	8001ba0 <uart_send>
    return uart_send("\r\n", 2);
 8001c0a:	2102      	movs	r1, #2
 8001c0c:	4803      	ldr	r0, [pc, #12]	; (8001c1c <uart_println+0x2c>)
 8001c0e:	f7ff ffc7 	bl	8001ba0 <uart_send>
 8001c12:	4603      	mov	r3, r0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	08009634 	.word	0x08009634

08001c20 <uart_printnum>:

/**
 * @brief Print a number over uart
 */
int uart_printnum (uint32_t num) {
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
    char buf[20];
    sprintf(buf, "%lu", num);
 8001c28:	f107 030c 	add.w	r3, r7, #12
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	4907      	ldr	r1, [pc, #28]	; (8001c4c <uart_printnum+0x2c>)
 8001c30:	4618      	mov	r0, r3
 8001c32:	f006 fbe5 	bl	8008400 <siprintf>
    return uart_println(buf);
 8001c36:	f107 030c 	add.w	r3, r7, #12
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff ffd8 	bl	8001bf0 <uart_println>
 8001c40:	4603      	mov	r3, r0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3720      	adds	r7, #32
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	08009638 	.word	0x08009638

08001c50 <uart_get_clock_input>:

/**
 * @brief Let user input the time
 * @param[out] buffer The buffer to write to
 */
void uart_get_clock_input (char *buffer) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
    uart_println("Please enter the time in HH:MM:SS format!");
 8001c58:	4819      	ldr	r0, [pc, #100]	; (8001cc0 <uart_get_clock_input+0x70>)
 8001c5a:	f7ff ffc9 	bl	8001bf0 <uart_println>

    char c;
    uint8_t i = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	73fb      	strb	r3, [r7, #15]
    while (1) {
        uart_receive(&c, 1);
 8001c62:	f107 030e 	add.w	r3, r7, #14
 8001c66:	2101      	movs	r1, #1
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ffad 	bl	8001bc8 <uart_receive>
        /* as long as i < 8 and c != \r
         * If a char 127 (backspace) is written
         * move cursor back */

        /* check if done */
        if (i == 8) {
 8001c6e:	7bfb      	ldrb	r3, [r7, #15]
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	d105      	bne.n	8001c80 <uart_get_clock_input+0x30>
            if (c == '\r')
 8001c74:	7bbb      	ldrb	r3, [r7, #14]
 8001c76:	2b0d      	cmp	r3, #13
 8001c78:	d01d      	beq.n	8001cb6 <uart_get_clock_input+0x66>
                break;
            else if (c != 127)
 8001c7a:	7bbb      	ldrb	r3, [r7, #14]
 8001c7c:	2b7f      	cmp	r3, #127	; 0x7f
 8001c7e:	d118      	bne.n	8001cb2 <uart_get_clock_input+0x62>
                continue;
        }

        uart_send(&c, 1);
 8001c80:	f107 030e 	add.w	r3, r7, #14
 8001c84:	2101      	movs	r1, #1
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff ff8a 	bl	8001ba0 <uart_send>

        /* write to buffer */
        if (c == 127) {
 8001c8c:	7bbb      	ldrb	r3, [r7, #14]
 8001c8e:	2b7f      	cmp	r3, #127	; 0x7f
 8001c90:	d106      	bne.n	8001ca0 <uart_get_clock_input+0x50>
            if (i != 0)
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0e4      	beq.n	8001c62 <uart_get_clock_input+0x12>
                --i;
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	73fb      	strb	r3, [r7, #15]
 8001c9e:	e7e0      	b.n	8001c62 <uart_get_clock_input+0x12>
        }
        else
            buffer[i++] = c;
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	1c5a      	adds	r2, r3, #1
 8001ca4:	73fa      	strb	r2, [r7, #15]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4413      	add	r3, r2
 8001cac:	7bba      	ldrb	r2, [r7, #14]
 8001cae:	701a      	strb	r2, [r3, #0]
 8001cb0:	e7d7      	b.n	8001c62 <uart_get_clock_input+0x12>
                continue;
 8001cb2:	bf00      	nop
        uart_receive(&c, 1);
 8001cb4:	e7d5      	b.n	8001c62 <uart_get_clock_input+0x12>
                break;
 8001cb6:	bf00      	nop
    }
}
 8001cb8:	bf00      	nop
 8001cba:	3710      	adds	r7, #16
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	0800963c 	.word	0x0800963c

08001cc4 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001cc8:	4b14      	ldr	r3, [pc, #80]	; (8001d1c <MX_UART5_Init+0x58>)
 8001cca:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <MX_UART5_Init+0x5c>)
 8001ccc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001cce:	4b13      	ldr	r3, [pc, #76]	; (8001d1c <MX_UART5_Init+0x58>)
 8001cd0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001cd4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001cd6:	4b11      	ldr	r3, [pc, #68]	; (8001d1c <MX_UART5_Init+0x58>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <MX_UART5_Init+0x58>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001ce2:	4b0e      	ldr	r3, [pc, #56]	; (8001d1c <MX_UART5_Init+0x58>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ce8:	4b0c      	ldr	r3, [pc, #48]	; (8001d1c <MX_UART5_Init+0x58>)
 8001cea:	220c      	movs	r2, #12
 8001cec:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cee:	4b0b      	ldr	r3, [pc, #44]	; (8001d1c <MX_UART5_Init+0x58>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf4:	4b09      	ldr	r3, [pc, #36]	; (8001d1c <MX_UART5_Init+0x58>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <MX_UART5_Init+0x58>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <MX_UART5_Init+0x58>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <MX_UART5_Init+0x58>)
 8001d08:	f005 f9b6 	bl	8007078 <HAL_UART_Init>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001d12:	f7ff fca3 	bl	800165c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	200001e4 	.word	0x200001e4
 8001d20:	40005000 	.word	0x40005000

08001d24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b0ac      	sub	sp, #176	; 0xb0
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]
 8001d34:	605a      	str	r2, [r3, #4]
 8001d36:	609a      	str	r2, [r3, #8]
 8001d38:	60da      	str	r2, [r3, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d3c:	f107 0314 	add.w	r3, r7, #20
 8001d40:	2288      	movs	r2, #136	; 0x88
 8001d42:	2100      	movs	r1, #0
 8001d44:	4618      	mov	r0, r3
 8001d46:	f006 fb53 	bl	80083f0 <memset>
  if(uartHandle->Instance==UART5)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a36      	ldr	r2, [pc, #216]	; (8001e28 <HAL_UART_MspInit+0x104>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d164      	bne.n	8001e1e <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001d54:	2310      	movs	r3, #16
 8001d56:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d5c:	f107 0314 	add.w	r3, r7, #20
 8001d60:	4618      	mov	r0, r3
 8001d62:	f002 fde9 	bl	8004938 <HAL_RCCEx_PeriphCLKConfig>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d6c:	f7ff fc76 	bl	800165c <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001d70:	4b2e      	ldr	r3, [pc, #184]	; (8001e2c <HAL_UART_MspInit+0x108>)
 8001d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d74:	4a2d      	ldr	r2, [pc, #180]	; (8001e2c <HAL_UART_MspInit+0x108>)
 8001d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d7c:	4b2b      	ldr	r3, [pc, #172]	; (8001e2c <HAL_UART_MspInit+0x108>)
 8001d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d88:	4b28      	ldr	r3, [pc, #160]	; (8001e2c <HAL_UART_MspInit+0x108>)
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8c:	4a27      	ldr	r2, [pc, #156]	; (8001e2c <HAL_UART_MspInit+0x108>)
 8001d8e:	f043 0304 	orr.w	r3, r3, #4
 8001d92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d94:	4b25      	ldr	r3, [pc, #148]	; (8001e2c <HAL_UART_MspInit+0x108>)
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	60fb      	str	r3, [r7, #12]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da0:	4b22      	ldr	r3, [pc, #136]	; (8001e2c <HAL_UART_MspInit+0x108>)
 8001da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da4:	4a21      	ldr	r2, [pc, #132]	; (8001e2c <HAL_UART_MspInit+0x108>)
 8001da6:	f043 0308 	orr.w	r3, r3, #8
 8001daa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dac:	4b1f      	ldr	r3, [pc, #124]	; (8001e2c <HAL_UART_MspInit+0x108>)
 8001dae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db0:	f003 0308 	and.w	r3, r3, #8
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001db8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001dd2:	2308      	movs	r3, #8
 8001dd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4814      	ldr	r0, [pc, #80]	; (8001e30 <HAL_UART_MspInit+0x10c>)
 8001de0:	f001 fd98 	bl	8003914 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001de4:	2304      	movs	r3, #4
 8001de6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dea:	2302      	movs	r3, #2
 8001dec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df6:	2303      	movs	r3, #3
 8001df8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001dfc:	2308      	movs	r3, #8
 8001dfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e06:	4619      	mov	r1, r3
 8001e08:	480a      	ldr	r0, [pc, #40]	; (8001e34 <HAL_UART_MspInit+0x110>)
 8001e0a:	f001 fd83 	bl	8003914 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001e0e:	2200      	movs	r2, #0
 8001e10:	2100      	movs	r1, #0
 8001e12:	2035      	movs	r0, #53	; 0x35
 8001e14:	f001 fcc9 	bl	80037aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001e18:	2035      	movs	r0, #53	; 0x35
 8001e1a:	f001 fce2 	bl	80037e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001e1e:	bf00      	nop
 8001e20:	37b0      	adds	r7, #176	; 0xb0
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40005000 	.word	0x40005000
 8001e2c:	40021000 	.word	0x40021000
 8001e30:	48000800 	.word	0x48000800
 8001e34:	48000c00 	.word	0x48000c00

08001e38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001e3c:	f7ff fdce 	bl	80019dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001e40:	480c      	ldr	r0, [pc, #48]	; (8001e74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001e42:	490d      	ldr	r1, [pc, #52]	; (8001e78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e44:	4a0d      	ldr	r2, [pc, #52]	; (8001e7c <LoopForever+0xe>)
  movs r3, #0
 8001e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e48:	e002      	b.n	8001e50 <LoopCopyDataInit>

08001e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e4e:	3304      	adds	r3, #4

08001e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e54:	d3f9      	bcc.n	8001e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e56:	4a0a      	ldr	r2, [pc, #40]	; (8001e80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e58:	4c0a      	ldr	r4, [pc, #40]	; (8001e84 <LoopForever+0x16>)
  movs r3, #0
 8001e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e5c:	e001      	b.n	8001e62 <LoopFillZerobss>

08001e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e60:	3204      	adds	r2, #4

08001e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e64:	d3fb      	bcc.n	8001e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e66:	f006 fa9f 	bl	80083a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e6a:	f7ff facd 	bl	8001408 <main>

08001e6e <LoopForever>:

LoopForever:
    b LoopForever
 8001e6e:	e7fe      	b.n	8001e6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001e70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e78:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001e7c:	0800987c 	.word	0x0800987c
  ldr r2, =_sbss
 8001e80:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001e84:	2000027c 	.word	0x2000027c

08001e88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e88:	e7fe      	b.n	8001e88 <ADC1_2_IRQHandler>
	...

08001e8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e92:	2300      	movs	r3, #0
 8001e94:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e96:	4b0c      	ldr	r3, [pc, #48]	; (8001ec8 <HAL_Init+0x3c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a0b      	ldr	r2, [pc, #44]	; (8001ec8 <HAL_Init+0x3c>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ea2:	2003      	movs	r0, #3
 8001ea4:	f001 fc76 	bl	8003794 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f000 f80f 	bl	8001ecc <HAL_InitTick>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d002      	beq.n	8001eba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	71fb      	strb	r3, [r7, #7]
 8001eb8:	e001      	b.n	8001ebe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001eba:	f7ff fd01 	bl	80018c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3708      	adds	r7, #8
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40022000 	.word	0x40022000

08001ecc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001ed8:	4b17      	ldr	r3, [pc, #92]	; (8001f38 <HAL_InitTick+0x6c>)
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d023      	beq.n	8001f28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ee0:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <HAL_InitTick+0x70>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <HAL_InitTick+0x6c>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	4619      	mov	r1, r3
 8001eea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f001 fc81 	bl	80037fe <HAL_SYSTICK_Config>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10f      	bne.n	8001f22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b0f      	cmp	r3, #15
 8001f06:	d809      	bhi.n	8001f1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f08:	2200      	movs	r2, #0
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f10:	f001 fc4b 	bl	80037aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f14:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <HAL_InitTick+0x74>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6013      	str	r3, [r2, #0]
 8001f1a:	e007      	b.n	8001f2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	73fb      	strb	r3, [r7, #15]
 8001f20:	e004      	b.n	8001f2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	73fb      	strb	r3, [r7, #15]
 8001f26:	e001      	b.n	8001f2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3710      	adds	r7, #16
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000018 	.word	0x20000018
 8001f3c:	20000010 	.word	0x20000010
 8001f40:	20000014 	.word	0x20000014

08001f44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f48:	4b06      	ldr	r3, [pc, #24]	; (8001f64 <HAL_IncTick+0x20>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_IncTick+0x24>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4413      	add	r3, r2
 8001f54:	4a04      	ldr	r2, [pc, #16]	; (8001f68 <HAL_IncTick+0x24>)
 8001f56:	6013      	str	r3, [r2, #0]
}
 8001f58:	bf00      	nop
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000018 	.word	0x20000018
 8001f68:	20000268 	.word	0x20000268

08001f6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001f70:	4b03      	ldr	r3, [pc, #12]	; (8001f80 <HAL_GetTick+0x14>)
 8001f72:	681b      	ldr	r3, [r3, #0]
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	20000268 	.word	0x20000268

08001f84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f8c:	f7ff ffee 	bl	8001f6c <HAL_GetTick>
 8001f90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f9c:	d005      	beq.n	8001faa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001f9e:	4b0a      	ldr	r3, [pc, #40]	; (8001fc8 <HAL_Delay+0x44>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001faa:	bf00      	nop
 8001fac:	f7ff ffde 	bl	8001f6c <HAL_GetTick>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	68fa      	ldr	r2, [r7, #12]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d8f7      	bhi.n	8001fac <HAL_Delay+0x28>
  {
  }
}
 8001fbc:	bf00      	nop
 8001fbe:	bf00      	nop
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000018 	.word	0x20000018

08001fcc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	431a      	orrs	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
}
 8001fe6:	bf00      	nop
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	b083      	sub	sp, #12
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
 8001ffa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	609a      	str	r2, [r3, #8]
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002028:	4618      	mov	r0, r3
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002034:	b480      	push	{r7}
 8002036:	b087      	sub	sp, #28
 8002038:	af00      	add	r7, sp, #0
 800203a:	60f8      	str	r0, [r7, #12]
 800203c:	60b9      	str	r1, [r7, #8]
 800203e:	607a      	str	r2, [r7, #4]
 8002040:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	3360      	adds	r3, #96	; 0x60
 8002046:	461a      	mov	r2, r3
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4413      	add	r3, r2
 800204e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b08      	ldr	r3, [pc, #32]	; (8002078 <LL_ADC_SetOffset+0x44>)
 8002056:	4013      	ands	r3, r2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800205e:	683a      	ldr	r2, [r7, #0]
 8002060:	430a      	orrs	r2, r1
 8002062:	4313      	orrs	r3, r2
 8002064:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800206c:	bf00      	nop
 800206e:	371c      	adds	r7, #28
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr
 8002078:	03fff000 	.word	0x03fff000

0800207c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3360      	adds	r3, #96	; 0x60
 800208a:	461a      	mov	r2, r3
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr

080020a8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b087      	sub	sp, #28
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	60b9      	str	r1, [r7, #8]
 80020b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	3360      	adds	r3, #96	; 0x60
 80020b8:	461a      	mov	r2, r3
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	431a      	orrs	r2, r3
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020d2:	bf00      	nop
 80020d4:	371c      	adds	r7, #28
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr

080020de <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80020de:	b480      	push	{r7}
 80020e0:	b083      	sub	sp, #12
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d101      	bne.n	80020f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002104:	b480      	push	{r7}
 8002106:	b087      	sub	sp, #28
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	3330      	adds	r3, #48	; 0x30
 8002114:	461a      	mov	r2, r3
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	0a1b      	lsrs	r3, r3, #8
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	4413      	add	r3, r2
 8002122:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f003 031f 	and.w	r3, r3, #31
 800212e:	211f      	movs	r1, #31
 8002130:	fa01 f303 	lsl.w	r3, r1, r3
 8002134:	43db      	mvns	r3, r3
 8002136:	401a      	ands	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	0e9b      	lsrs	r3, r3, #26
 800213c:	f003 011f 	and.w	r1, r3, #31
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	f003 031f 	and.w	r3, r3, #31
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	431a      	orrs	r2, r3
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002150:	bf00      	nop
 8002152:	371c      	adds	r7, #28
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr

0800215c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800215c:	b480      	push	{r7}
 800215e:	b087      	sub	sp, #28
 8002160:	af00      	add	r7, sp, #0
 8002162:	60f8      	str	r0, [r7, #12]
 8002164:	60b9      	str	r1, [r7, #8]
 8002166:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3314      	adds	r3, #20
 800216c:	461a      	mov	r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	0e5b      	lsrs	r3, r3, #25
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	f003 0304 	and.w	r3, r3, #4
 8002178:	4413      	add	r3, r2
 800217a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	0d1b      	lsrs	r3, r3, #20
 8002184:	f003 031f 	and.w	r3, r3, #31
 8002188:	2107      	movs	r1, #7
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	43db      	mvns	r3, r3
 8002190:	401a      	ands	r2, r3
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	0d1b      	lsrs	r3, r3, #20
 8002196:	f003 031f 	and.w	r3, r3, #31
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	fa01 f303 	lsl.w	r3, r1, r3
 80021a0:	431a      	orrs	r2, r3
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021a6:	bf00      	nop
 80021a8:	371c      	adds	r7, #28
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021c6:	68bb      	ldr	r3, [r7, #8]
 80021c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021cc:	43db      	mvns	r3, r3
 80021ce:	401a      	ands	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f003 0318 	and.w	r3, r3, #24
 80021d6:	4908      	ldr	r1, [pc, #32]	; (80021f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80021d8:	40d9      	lsrs	r1, r3
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	400b      	ands	r3, r1
 80021de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e2:	431a      	orrs	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr
 80021f6:	bf00      	nop
 80021f8:	0007ffff 	.word	0x0007ffff

080021fc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f003 031f 	and.w	r3, r3, #31
}
 800220c:	4618      	mov	r0, r3
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr

08002218 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002228:	4618      	mov	r0, r3
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr

08002234 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	689b      	ldr	r3, [r3, #8]
 8002240:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002244:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6093      	str	r3, [r2, #8]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002268:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800226c:	d101      	bne.n	8002272 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002290:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002294:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022bc:	d101      	bne.n	80022c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80022e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022e4:	f043 0201 	orr.w	r2, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002308:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800230c:	f043 0202 	orr.w	r2, r3, #2
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002314:	bf00      	nop
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f003 0301 	and.w	r3, r3, #1
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <LL_ADC_IsEnabled+0x18>
 8002334:	2301      	movs	r3, #1
 8002336:	e000      	b.n	800233a <LL_ADC_IsEnabled+0x1a>
 8002338:	2300      	movs	r3, #0
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002346:	b480      	push	{r7}
 8002348:	b083      	sub	sp, #12
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b02      	cmp	r3, #2
 8002358:	d101      	bne.n	800235e <LL_ADC_IsDisableOngoing+0x18>
 800235a:	2301      	movs	r3, #1
 800235c:	e000      	b.n	8002360 <LL_ADC_IsDisableOngoing+0x1a>
 800235e:	2300      	movs	r3, #0
}
 8002360:	4618      	mov	r0, r3
 8002362:	370c      	adds	r7, #12
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800236c:	b480      	push	{r7}
 800236e:	b083      	sub	sp, #12
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800237c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002380:	f043 0204 	orr.w	r2, r3, #4
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002388:	bf00      	nop
 800238a:	370c      	adds	r7, #12
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d101      	bne.n	80023ac <LL_ADC_REG_IsConversionOngoing+0x18>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e000      	b.n	80023ae <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b08      	cmp	r3, #8
 80023cc:	d101      	bne.n	80023d2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023d2:	2300      	movs	r3, #0
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023e0:	b590      	push	{r4, r7, lr}
 80023e2:	b089      	sub	sp, #36	; 0x24
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80023ec:	2300      	movs	r3, #0
 80023ee:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e136      	b.n	8002668 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002404:	2b00      	cmp	r3, #0
 8002406:	d109      	bne.n	800241c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7fe fd19 	bl	8000e40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2200      	movs	r2, #0
 8002412:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff19 	bl	8002258 <LL_ADC_IsDeepPowerDownEnabled>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d004      	beq.n	8002436 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff feff 	bl	8002234 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff ff34 	bl	80022a8 <LL_ADC_IsInternalRegulatorEnabled>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d115      	bne.n	8002472 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f7ff ff18 	bl	8002280 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002450:	4b87      	ldr	r3, [pc, #540]	; (8002670 <HAL_ADC_Init+0x290>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	099b      	lsrs	r3, r3, #6
 8002456:	4a87      	ldr	r2, [pc, #540]	; (8002674 <HAL_ADC_Init+0x294>)
 8002458:	fba2 2303 	umull	r2, r3, r2, r3
 800245c:	099b      	lsrs	r3, r3, #6
 800245e:	3301      	adds	r3, #1
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002464:	e002      	b.n	800246c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	3b01      	subs	r3, #1
 800246a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d1f9      	bne.n	8002466 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ff16 	bl	80022a8 <LL_ADC_IsInternalRegulatorEnabled>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d10d      	bne.n	800249e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002486:	f043 0210 	orr.w	r2, r3, #16
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002492:	f043 0201 	orr.w	r2, r3, #1
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff ff76 	bl	8002394 <LL_ADC_REG_IsConversionOngoing>
 80024a8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024ae:	f003 0310 	and.w	r3, r3, #16
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f040 80cf 	bne.w	8002656 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	f040 80cb 	bne.w	8002656 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024c8:	f043 0202 	orr.w	r2, r3, #2
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff23 	bl	8002320 <LL_ADC_IsEnabled>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d115      	bne.n	800250c <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024e0:	4865      	ldr	r0, [pc, #404]	; (8002678 <HAL_ADC_Init+0x298>)
 80024e2:	f7ff ff1d 	bl	8002320 <LL_ADC_IsEnabled>
 80024e6:	4604      	mov	r4, r0
 80024e8:	4864      	ldr	r0, [pc, #400]	; (800267c <HAL_ADC_Init+0x29c>)
 80024ea:	f7ff ff19 	bl	8002320 <LL_ADC_IsEnabled>
 80024ee:	4603      	mov	r3, r0
 80024f0:	431c      	orrs	r4, r3
 80024f2:	4863      	ldr	r0, [pc, #396]	; (8002680 <HAL_ADC_Init+0x2a0>)
 80024f4:	f7ff ff14 	bl	8002320 <LL_ADC_IsEnabled>
 80024f8:	4603      	mov	r3, r0
 80024fa:	4323      	orrs	r3, r4
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d105      	bne.n	800250c <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	4619      	mov	r1, r3
 8002506:	485f      	ldr	r0, [pc, #380]	; (8002684 <HAL_ADC_Init+0x2a4>)
 8002508:	f7ff fd60 	bl	8001fcc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	7e5b      	ldrb	r3, [r3, #25]
 8002510:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002516:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800251c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002522:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f893 3020 	ldrb.w	r3, [r3, #32]
 800252a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800252c:	4313      	orrs	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d106      	bne.n	8002548 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253e:	3b01      	subs	r3, #1
 8002540:	045b      	lsls	r3, r3, #17
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	4313      	orrs	r3, r2
 8002546:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800254c:	2b00      	cmp	r3, #0
 800254e:	d009      	beq.n	8002564 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002554:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	4b47      	ldr	r3, [pc, #284]	; (8002688 <HAL_ADC_Init+0x2a8>)
 800256c:	4013      	ands	r3, r2
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	6812      	ldr	r2, [r2, #0]
 8002572:	69b9      	ldr	r1, [r7, #24]
 8002574:	430b      	orrs	r3, r1
 8002576:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff ff09 	bl	8002394 <LL_ADC_REG_IsConversionOngoing>
 8002582:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff16 	bl	80023ba <LL_ADC_INJ_IsConversionOngoing>
 800258e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d13d      	bne.n	8002612 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d13a      	bne.n	8002612 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025a0:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025a8:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025b8:	f023 0302 	bic.w	r3, r3, #2
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	69b9      	ldr	r1, [r7, #24]
 80025c2:	430b      	orrs	r3, r1
 80025c4:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d118      	bne.n	8002602 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	691b      	ldr	r3, [r3, #16]
 80025d6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025da:	f023 0304 	bic.w	r3, r3, #4
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025e6:	4311      	orrs	r1, r2
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025ec:	4311      	orrs	r1, r2
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025f2:	430a      	orrs	r2, r1
 80025f4:	431a      	orrs	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f042 0201 	orr.w	r2, r2, #1
 80025fe:	611a      	str	r2, [r3, #16]
 8002600:	e007      	b.n	8002612 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	691a      	ldr	r2, [r3, #16]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f022 0201 	bic.w	r2, r2, #1
 8002610:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d10c      	bne.n	8002634 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002620:	f023 010f 	bic.w	r1, r3, #15
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	1e5a      	subs	r2, r3, #1
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	430a      	orrs	r2, r1
 8002630:	631a      	str	r2, [r3, #48]	; 0x30
 8002632:	e007      	b.n	8002644 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 020f 	bic.w	r2, r2, #15
 8002642:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002648:	f023 0303 	bic.w	r3, r3, #3
 800264c:	f043 0201 	orr.w	r2, r3, #1
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	655a      	str	r2, [r3, #84]	; 0x54
 8002654:	e007      	b.n	8002666 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265a:	f043 0210 	orr.w	r2, r3, #16
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002666:	7ffb      	ldrb	r3, [r7, #31]
}
 8002668:	4618      	mov	r0, r3
 800266a:	3724      	adds	r7, #36	; 0x24
 800266c:	46bd      	mov	sp, r7
 800266e:	bd90      	pop	{r4, r7, pc}
 8002670:	20000010 	.word	0x20000010
 8002674:	053e2d63 	.word	0x053e2d63
 8002678:	50040000 	.word	0x50040000
 800267c:	50040100 	.word	0x50040100
 8002680:	50040200 	.word	0x50040200
 8002684:	50040300 	.word	0x50040300
 8002688:	fff0c007 	.word	0xfff0c007

0800268c <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002694:	4857      	ldr	r0, [pc, #348]	; (80027f4 <HAL_ADC_Start+0x168>)
 8002696:	f7ff fdb1 	bl	80021fc <LL_ADC_GetMultimode>
 800269a:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7ff fe77 	bl	8002394 <LL_ADC_REG_IsConversionOngoing>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	f040 809c 	bne.w	80027e6 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026b4:	2b01      	cmp	r3, #1
 80026b6:	d101      	bne.n	80026bc <HAL_ADC_Start+0x30>
 80026b8:	2302      	movs	r3, #2
 80026ba:	e097      	b.n	80027ec <HAL_ADC_Start+0x160>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 fd71 	bl	80031ac <ADC_Enable>
 80026ca:	4603      	mov	r3, r0
 80026cc:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026ce:	7dfb      	ldrb	r3, [r7, #23]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	f040 8083 	bne.w	80027dc <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80026de:	f023 0301 	bic.w	r3, r3, #1
 80026e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a42      	ldr	r2, [pc, #264]	; (80027f8 <HAL_ADC_Start+0x16c>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d002      	beq.n	80026fa <HAL_ADC_Start+0x6e>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	e000      	b.n	80026fc <HAL_ADC_Start+0x70>
 80026fa:	4b40      	ldr	r3, [pc, #256]	; (80027fc <HAL_ADC_Start+0x170>)
 80026fc:	687a      	ldr	r2, [r7, #4]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	4293      	cmp	r3, r2
 8002702:	d002      	beq.n	800270a <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d105      	bne.n	8002716 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800271e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002722:	d106      	bne.n	8002732 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	f023 0206 	bic.w	r2, r3, #6
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	659a      	str	r2, [r3, #88]	; 0x58
 8002730:	e002      	b.n	8002738 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	221c      	movs	r2, #28
 800273e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a2a      	ldr	r2, [pc, #168]	; (80027f8 <HAL_ADC_Start+0x16c>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d002      	beq.n	8002758 <HAL_ADC_Start+0xcc>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	e000      	b.n	800275a <HAL_ADC_Start+0xce>
 8002758:	4b28      	ldr	r3, [pc, #160]	; (80027fc <HAL_ADC_Start+0x170>)
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	6812      	ldr	r2, [r2, #0]
 800275e:	4293      	cmp	r3, r2
 8002760:	d008      	beq.n	8002774 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d005      	beq.n	8002774 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	2b05      	cmp	r3, #5
 800276c:	d002      	beq.n	8002774 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	2b09      	cmp	r3, #9
 8002772:	d114      	bne.n	800279e <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d007      	beq.n	8002792 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002786:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800278a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fde8 	bl	800236c <LL_ADC_REG_StartConversion>
 800279c:	e025      	b.n	80027ea <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a12      	ldr	r2, [pc, #72]	; (80027f8 <HAL_ADC_Start+0x16c>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d002      	beq.n	80027ba <HAL_ADC_Start+0x12e>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	e000      	b.n	80027bc <HAL_ADC_Start+0x130>
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <HAL_ADC_Start+0x170>)
 80027bc:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	68db      	ldr	r3, [r3, #12]
 80027c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d00f      	beq.n	80027ea <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ce:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027d2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	655a      	str	r2, [r3, #84]	; 0x54
 80027da:	e006      	b.n	80027ea <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80027e4:	e001      	b.n	80027ea <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80027e6:	2302      	movs	r3, #2
 80027e8:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80027ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	50040300 	.word	0x50040300
 80027f8:	50040100 	.word	0x50040100
 80027fc:	50040000 	.word	0x50040000

08002800 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800280a:	4866      	ldr	r0, [pc, #408]	; (80029a4 <HAL_ADC_PollForConversion+0x1a4>)
 800280c:	f7ff fcf6 	bl	80021fc <LL_ADC_GetMultimode>
 8002810:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	695b      	ldr	r3, [r3, #20]
 8002816:	2b08      	cmp	r3, #8
 8002818:	d102      	bne.n	8002820 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800281a:	2308      	movs	r3, #8
 800281c:	61fb      	str	r3, [r7, #28]
 800281e:	e02a      	b.n	8002876 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d005      	beq.n	8002832 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2b05      	cmp	r3, #5
 800282a:	d002      	beq.n	8002832 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	2b09      	cmp	r3, #9
 8002830:	d111      	bne.n	8002856 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b00      	cmp	r3, #0
 800283e:	d007      	beq.n	8002850 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002844:	f043 0220 	orr.w	r2, r3, #32
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0a4      	b.n	800299a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002850:	2304      	movs	r3, #4
 8002852:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002854:	e00f      	b.n	8002876 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002856:	4853      	ldr	r0, [pc, #332]	; (80029a4 <HAL_ADC_PollForConversion+0x1a4>)
 8002858:	f7ff fcde 	bl	8002218 <LL_ADC_GetMultiDMATransfer>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002866:	f043 0220 	orr.w	r2, r3, #32
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e093      	b.n	800299a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002872:	2304      	movs	r3, #4
 8002874:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002876:	f7ff fb79 	bl	8001f6c <HAL_GetTick>
 800287a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800287c:	e021      	b.n	80028c2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002884:	d01d      	beq.n	80028c2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002886:	f7ff fb71 	bl	8001f6c <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	683a      	ldr	r2, [r7, #0]
 8002892:	429a      	cmp	r2, r3
 8002894:	d302      	bcc.n	800289c <HAL_ADC_PollForConversion+0x9c>
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d112      	bne.n	80028c2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	4013      	ands	r3, r2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10b      	bne.n	80028c2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ae:	f043 0204 	orr.w	r2, r3, #4
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80028be:	2303      	movs	r3, #3
 80028c0:	e06b      	b.n	800299a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	4013      	ands	r3, r2
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d0d6      	beq.n	800287e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff fbfc 	bl	80020de <LL_ADC_REG_IsTriggerSourceSWStart>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d01c      	beq.n	8002926 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	7e5b      	ldrb	r3, [r3, #25]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d118      	bne.n	8002926 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 0308 	and.w	r3, r3, #8
 80028fe:	2b08      	cmp	r3, #8
 8002900:	d111      	bne.n	8002926 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002906:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d105      	bne.n	8002926 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800291e:	f043 0201 	orr.w	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a1f      	ldr	r2, [pc, #124]	; (80029a8 <HAL_ADC_PollForConversion+0x1a8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d002      	beq.n	8002936 <HAL_ADC_PollForConversion+0x136>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	e000      	b.n	8002938 <HAL_ADC_PollForConversion+0x138>
 8002936:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <HAL_ADC_PollForConversion+0x1ac>)
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6812      	ldr	r2, [r2, #0]
 800293c:	4293      	cmp	r3, r2
 800293e:	d008      	beq.n	8002952 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d005      	beq.n	8002952 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002946:	697b      	ldr	r3, [r7, #20]
 8002948:	2b05      	cmp	r3, #5
 800294a:	d002      	beq.n	8002952 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	2b09      	cmp	r3, #9
 8002950:	d104      	bne.n	800295c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	e00c      	b.n	8002976 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a11      	ldr	r2, [pc, #68]	; (80029a8 <HAL_ADC_PollForConversion+0x1a8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d002      	beq.n	800296c <HAL_ADC_PollForConversion+0x16c>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	e000      	b.n	800296e <HAL_ADC_PollForConversion+0x16e>
 800296c:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <HAL_ADC_PollForConversion+0x1ac>)
 800296e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	2b08      	cmp	r3, #8
 800297a:	d104      	bne.n	8002986 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	2208      	movs	r2, #8
 8002982:	601a      	str	r2, [r3, #0]
 8002984:	e008      	b.n	8002998 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d103      	bne.n	8002998 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	220c      	movs	r2, #12
 8002996:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	3720      	adds	r7, #32
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	50040300 	.word	0x50040300
 80029a8:	50040100 	.word	0x50040100
 80029ac:	50040000 	.word	0x50040000

080029b0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80029be:	4618      	mov	r0, r3
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
	...

080029cc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b0b6      	sub	sp, #216	; 0xd8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029dc:	2300      	movs	r3, #0
 80029de:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d101      	bne.n	80029ee <HAL_ADC_ConfigChannel+0x22>
 80029ea:	2302      	movs	r3, #2
 80029ec:	e3c7      	b.n	800317e <HAL_ADC_ConfigChannel+0x7b2>
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2201      	movs	r2, #1
 80029f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fcca 	bl	8002394 <LL_ADC_REG_IsConversionOngoing>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	f040 83a8 	bne.w	8003158 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d824      	bhi.n	8002a5a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	3b02      	subs	r3, #2
 8002a16:	2b03      	cmp	r3, #3
 8002a18:	d81b      	bhi.n	8002a52 <HAL_ADC_ConfigChannel+0x86>
 8002a1a:	a201      	add	r2, pc, #4	; (adr r2, 8002a20 <HAL_ADC_ConfigChannel+0x54>)
 8002a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a20:	08002a31 	.word	0x08002a31
 8002a24:	08002a39 	.word	0x08002a39
 8002a28:	08002a41 	.word	0x08002a41
 8002a2c:	08002a49 	.word	0x08002a49
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	220c      	movs	r2, #12
 8002a34:	605a      	str	r2, [r3, #4]
          break;
 8002a36:	e011      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	2212      	movs	r2, #18
 8002a3c:	605a      	str	r2, [r3, #4]
          break;
 8002a3e:	e00d      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	2218      	movs	r2, #24
 8002a44:	605a      	str	r2, [r3, #4]
          break;
 8002a46:	e009      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a4e:	605a      	str	r2, [r3, #4]
          break;
 8002a50:	e004      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2206      	movs	r2, #6
 8002a56:	605a      	str	r2, [r3, #4]
          break;
 8002a58:	e000      	b.n	8002a5c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002a5a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	6859      	ldr	r1, [r3, #4]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	f7ff fb4b 	bl	8002104 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f7ff fc8e 	bl	8002394 <LL_ADC_REG_IsConversionOngoing>
 8002a78:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f7ff fc9a 	bl	80023ba <LL_ADC_INJ_IsConversionOngoing>
 8002a86:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	f040 81a6 	bne.w	8002de0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f040 81a1 	bne.w	8002de0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6818      	ldr	r0, [r3, #0]
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	6819      	ldr	r1, [r3, #0]
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	f7ff fb56 	bl	800215c <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	695a      	ldr	r2, [r3, #20]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	08db      	lsrs	r3, r3, #3
 8002abc:	f003 0303 	and.w	r3, r3, #3
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2b04      	cmp	r3, #4
 8002ad0:	d00a      	beq.n	8002ae8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	6919      	ldr	r1, [r3, #16]
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	681a      	ldr	r2, [r3, #0]
 8002ade:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ae2:	f7ff faa7 	bl	8002034 <LL_ADC_SetOffset>
 8002ae6:	e17b      	b.n	8002de0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2100      	movs	r1, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f7ff fac4 	bl	800207c <LL_ADC_GetOffsetChannel>
 8002af4:	4603      	mov	r3, r0
 8002af6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d10a      	bne.n	8002b14 <HAL_ADC_ConfigChannel+0x148>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	2100      	movs	r1, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7ff fab9 	bl	800207c <LL_ADC_GetOffsetChannel>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	0e9b      	lsrs	r3, r3, #26
 8002b0e:	f003 021f 	and.w	r2, r3, #31
 8002b12:	e01e      	b.n	8002b52 <HAL_ADC_ConfigChannel+0x186>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f7ff faae 	bl	800207c <LL_ADC_GetOffsetChannel>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b26:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b2a:	fa93 f3a3 	rbit	r3, r3
 8002b2e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b3a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002b42:	2320      	movs	r3, #32
 8002b44:	e004      	b.n	8002b50 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002b46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b4a:	fab3 f383 	clz	r3, r3
 8002b4e:	b2db      	uxtb	r3, r3
 8002b50:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d105      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x19e>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	0e9b      	lsrs	r3, r3, #26
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	e018      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x1d0>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b72:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b76:	fa93 f3a3 	rbit	r3, r3
 8002b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b82:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002b86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002b8e:	2320      	movs	r3, #32
 8002b90:	e004      	b.n	8002b9c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002b92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b96:	fab3 f383 	clz	r3, r3
 8002b9a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d106      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fa7d 	bl	80020a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fa61 	bl	800207c <LL_ADC_GetOffsetChannel>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d10a      	bne.n	8002bda <HAL_ADC_ConfigChannel+0x20e>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2101      	movs	r1, #1
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7ff fa56 	bl	800207c <LL_ADC_GetOffsetChannel>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	0e9b      	lsrs	r3, r3, #26
 8002bd4:	f003 021f 	and.w	r2, r3, #31
 8002bd8:	e01e      	b.n	8002c18 <HAL_ADC_ConfigChannel+0x24c>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2101      	movs	r1, #1
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff fa4b 	bl	800207c <LL_ADC_GetOffsetChannel>
 8002be6:	4603      	mov	r3, r0
 8002be8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002bf0:	fa93 f3a3 	rbit	r3, r3
 8002bf4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002bf8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bfc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c00:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d101      	bne.n	8002c0c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	e004      	b.n	8002c16 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002c0c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c10:	fab3 f383 	clz	r3, r3
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d105      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x264>
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	0e9b      	lsrs	r3, r3, #26
 8002c2a:	f003 031f 	and.w	r3, r3, #31
 8002c2e:	e018      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x296>
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c3c:	fa93 f3a3 	rbit	r3, r3
 8002c40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002c44:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c48:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002c4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002c54:	2320      	movs	r3, #32
 8002c56:	e004      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002c58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c5c:	fab3 f383 	clz	r3, r3
 8002c60:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c62:	429a      	cmp	r2, r3
 8002c64:	d106      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	4618      	mov	r0, r3
 8002c70:	f7ff fa1a 	bl	80020a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2102      	movs	r1, #2
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7ff f9fe 	bl	800207c <LL_ADC_GetOffsetChannel>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10a      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x2d4>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2102      	movs	r1, #2
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff f9f3 	bl	800207c <LL_ADC_GetOffsetChannel>
 8002c96:	4603      	mov	r3, r0
 8002c98:	0e9b      	lsrs	r3, r3, #26
 8002c9a:	f003 021f 	and.w	r2, r3, #31
 8002c9e:	e01e      	b.n	8002cde <HAL_ADC_ConfigChannel+0x312>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2102      	movs	r1, #2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff f9e8 	bl	800207c <LL_ADC_GetOffsetChannel>
 8002cac:	4603      	mov	r3, r0
 8002cae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cb6:	fa93 f3a3 	rbit	r3, r3
 8002cba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002cbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002cc6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002cce:	2320      	movs	r3, #32
 8002cd0:	e004      	b.n	8002cdc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002cd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cd6:	fab3 f383 	clz	r3, r3
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d105      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x32a>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	0e9b      	lsrs	r3, r3, #26
 8002cf0:	f003 031f 	and.w	r3, r3, #31
 8002cf4:	e016      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x358>
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d08:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d0e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d101      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002d16:	2320      	movs	r3, #32
 8002d18:	e004      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002d1a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d1e:	fab3 f383 	clz	r3, r3
 8002d22:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d106      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	2102      	movs	r1, #2
 8002d30:	4618      	mov	r0, r3
 8002d32:	f7ff f9b9 	bl	80020a8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	2103      	movs	r1, #3
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff f99d 	bl	800207c <LL_ADC_GetOffsetChannel>
 8002d42:	4603      	mov	r3, r0
 8002d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <HAL_ADC_ConfigChannel+0x396>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2103      	movs	r1, #3
 8002d52:	4618      	mov	r0, r3
 8002d54:	f7ff f992 	bl	800207c <LL_ADC_GetOffsetChannel>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	0e9b      	lsrs	r3, r3, #26
 8002d5c:	f003 021f 	and.w	r2, r3, #31
 8002d60:	e017      	b.n	8002d92 <HAL_ADC_ConfigChannel+0x3c6>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2103      	movs	r1, #3
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f7ff f987 	bl	800207c <LL_ADC_GetOffsetChannel>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d74:	fa93 f3a3 	rbit	r3, r3
 8002d78:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002d7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d7c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002d7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d101      	bne.n	8002d88 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002d84:	2320      	movs	r3, #32
 8002d86:	e003      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002d88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d8a:	fab3 f383 	clz	r3, r3
 8002d8e:	b2db      	uxtb	r3, r3
 8002d90:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d105      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x3de>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	0e9b      	lsrs	r3, r3, #26
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	e011      	b.n	8002dce <HAL_ADC_ConfigChannel+0x402>
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002db2:	fa93 f3a3 	rbit	r3, r3
 8002db6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002db8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dba:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002dc2:	2320      	movs	r3, #32
 8002dc4:	e003      	b.n	8002dce <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dc8:	fab3 f383 	clz	r3, r3
 8002dcc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d106      	bne.n	8002de0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	2103      	movs	r1, #3
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff f964 	bl	80020a8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fa9b 	bl	8002320 <LL_ADC_IsEnabled>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	f040 813f 	bne.w	8003070 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6819      	ldr	r1, [r3, #0]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f7ff f9d8 	bl	80021b4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4a8e      	ldr	r2, [pc, #568]	; (8003044 <HAL_ADC_ConfigChannel+0x678>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	f040 8130 	bne.w	8003070 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d10b      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x46c>
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	0e9b      	lsrs	r3, r3, #26
 8002e26:	3301      	adds	r3, #1
 8002e28:	f003 031f 	and.w	r3, r3, #31
 8002e2c:	2b09      	cmp	r3, #9
 8002e2e:	bf94      	ite	ls
 8002e30:	2301      	movls	r3, #1
 8002e32:	2300      	movhi	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	e019      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x4a0>
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e48:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002e4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002e50:	2320      	movs	r3, #32
 8002e52:	e003      	b.n	8002e5c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002e54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e56:	fab3 f383 	clz	r3, r3
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	f003 031f 	and.w	r3, r3, #31
 8002e62:	2b09      	cmp	r3, #9
 8002e64:	bf94      	ite	ls
 8002e66:	2301      	movls	r3, #1
 8002e68:	2300      	movhi	r3, #0
 8002e6a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d079      	beq.n	8002f64 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d107      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x4c0>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	0e9b      	lsrs	r3, r3, #26
 8002e82:	3301      	adds	r3, #1
 8002e84:	069b      	lsls	r3, r3, #26
 8002e86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e8a:	e015      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x4ec>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e9c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002e9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002ea4:	2320      	movs	r3, #32
 8002ea6:	e003      	b.n	8002eb0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002ea8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	3301      	adds	r3, #1
 8002eb2:	069b      	lsls	r3, r3, #26
 8002eb4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d109      	bne.n	8002ed8 <HAL_ADC_ConfigChannel+0x50c>
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	0e9b      	lsrs	r3, r3, #26
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f003 031f 	and.w	r3, r3, #31
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	e017      	b.n	8002f08 <HAL_ADC_ConfigChannel+0x53c>
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ee0:	fa93 f3a3 	rbit	r3, r3
 8002ee4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ee8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002ef0:	2320      	movs	r3, #32
 8002ef2:	e003      	b.n	8002efc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002ef4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	3301      	adds	r3, #1
 8002efe:	f003 031f 	and.w	r3, r3, #31
 8002f02:	2101      	movs	r1, #1
 8002f04:	fa01 f303 	lsl.w	r3, r1, r3
 8002f08:	ea42 0103 	orr.w	r1, r2, r3
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10a      	bne.n	8002f2e <HAL_ADC_ConfigChannel+0x562>
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	0e9b      	lsrs	r3, r3, #26
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f003 021f 	and.w	r2, r3, #31
 8002f24:	4613      	mov	r3, r2
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	4413      	add	r3, r2
 8002f2a:	051b      	lsls	r3, r3, #20
 8002f2c:	e018      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x594>
 8002f2e:	683b      	ldr	r3, [r7, #0]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f36:	fa93 f3a3 	rbit	r3, r3
 8002f3a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d101      	bne.n	8002f4a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002f46:	2320      	movs	r3, #32
 8002f48:	e003      	b.n	8002f52 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002f4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f4c:	fab3 f383 	clz	r3, r3
 8002f50:	b2db      	uxtb	r3, r3
 8002f52:	3301      	adds	r3, #1
 8002f54:	f003 021f 	and.w	r2, r3, #31
 8002f58:	4613      	mov	r3, r2
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	4413      	add	r3, r2
 8002f5e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f60:	430b      	orrs	r3, r1
 8002f62:	e080      	b.n	8003066 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d107      	bne.n	8002f80 <HAL_ADC_ConfigChannel+0x5b4>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	0e9b      	lsrs	r3, r3, #26
 8002f76:	3301      	adds	r3, #1
 8002f78:	069b      	lsls	r3, r3, #26
 8002f7a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f7e:	e015      	b.n	8002fac <HAL_ADC_ConfigChannel+0x5e0>
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f88:	fa93 f3a3 	rbit	r3, r3
 8002f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f90:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002f98:	2320      	movs	r3, #32
 8002f9a:	e003      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f9e:	fab3 f383 	clz	r3, r3
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	3301      	adds	r3, #1
 8002fa6:	069b      	lsls	r3, r3, #26
 8002fa8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d109      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x600>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	0e9b      	lsrs	r3, r3, #26
 8002fbe:	3301      	adds	r3, #1
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	2101      	movs	r1, #1
 8002fc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002fca:	e017      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x630>
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fd2:	6a3b      	ldr	r3, [r7, #32]
 8002fd4:	fa93 f3a3 	rbit	r3, r3
 8002fd8:	61fb      	str	r3, [r7, #28]
  return result;
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8002fe4:	2320      	movs	r3, #32
 8002fe6:	e003      	b.n	8002ff0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8002fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fea:	fab3 f383 	clz	r3, r3
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	3301      	adds	r3, #1
 8002ff2:	f003 031f 	and.w	r3, r3, #31
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffc:	ea42 0103 	orr.w	r1, r2, r3
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10d      	bne.n	8003028 <HAL_ADC_ConfigChannel+0x65c>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	0e9b      	lsrs	r3, r3, #26
 8003012:	3301      	adds	r3, #1
 8003014:	f003 021f 	and.w	r2, r3, #31
 8003018:	4613      	mov	r3, r2
 800301a:	005b      	lsls	r3, r3, #1
 800301c:	4413      	add	r3, r2
 800301e:	3b1e      	subs	r3, #30
 8003020:	051b      	lsls	r3, r3, #20
 8003022:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003026:	e01d      	b.n	8003064 <HAL_ADC_ConfigChannel+0x698>
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	fa93 f3a3 	rbit	r3, r3
 8003034:	613b      	str	r3, [r7, #16]
  return result;
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d103      	bne.n	8003048 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003040:	2320      	movs	r3, #32
 8003042:	e005      	b.n	8003050 <HAL_ADC_ConfigChannel+0x684>
 8003044:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	fab3 f383 	clz	r3, r3
 800304e:	b2db      	uxtb	r3, r3
 8003050:	3301      	adds	r3, #1
 8003052:	f003 021f 	and.w	r2, r3, #31
 8003056:	4613      	mov	r3, r2
 8003058:	005b      	lsls	r3, r3, #1
 800305a:	4413      	add	r3, r2
 800305c:	3b1e      	subs	r3, #30
 800305e:	051b      	lsls	r3, r3, #20
 8003060:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003064:	430b      	orrs	r3, r1
 8003066:	683a      	ldr	r2, [r7, #0]
 8003068:	6892      	ldr	r2, [r2, #8]
 800306a:	4619      	mov	r1, r3
 800306c:	f7ff f876 	bl	800215c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	681a      	ldr	r2, [r3, #0]
 8003074:	4b44      	ldr	r3, [pc, #272]	; (8003188 <HAL_ADC_ConfigChannel+0x7bc>)
 8003076:	4013      	ands	r3, r2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d07a      	beq.n	8003172 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800307c:	4843      	ldr	r0, [pc, #268]	; (800318c <HAL_ADC_ConfigChannel+0x7c0>)
 800307e:	f7fe ffcb 	bl	8002018 <LL_ADC_GetCommonPathInternalCh>
 8003082:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a41      	ldr	r2, [pc, #260]	; (8003190 <HAL_ADC_ConfigChannel+0x7c4>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d12c      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003090:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003094:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d126      	bne.n	80030ea <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a3c      	ldr	r2, [pc, #240]	; (8003194 <HAL_ADC_ConfigChannel+0x7c8>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d004      	beq.n	80030b0 <HAL_ADC_ConfigChannel+0x6e4>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a3b      	ldr	r2, [pc, #236]	; (8003198 <HAL_ADC_ConfigChannel+0x7cc>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d15d      	bne.n	800316c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030b0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030b8:	4619      	mov	r1, r3
 80030ba:	4834      	ldr	r0, [pc, #208]	; (800318c <HAL_ADC_ConfigChannel+0x7c0>)
 80030bc:	f7fe ff99 	bl	8001ff2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030c0:	4b36      	ldr	r3, [pc, #216]	; (800319c <HAL_ADC_ConfigChannel+0x7d0>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	099b      	lsrs	r3, r3, #6
 80030c6:	4a36      	ldr	r2, [pc, #216]	; (80031a0 <HAL_ADC_ConfigChannel+0x7d4>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	099b      	lsrs	r3, r3, #6
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030da:	e002      	b.n	80030e2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	3b01      	subs	r3, #1
 80030e0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f9      	bne.n	80030dc <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030e8:	e040      	b.n	800316c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a2d      	ldr	r2, [pc, #180]	; (80031a4 <HAL_ADC_ConfigChannel+0x7d8>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d118      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x75a>
 80030f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d112      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a23      	ldr	r2, [pc, #140]	; (8003194 <HAL_ADC_ConfigChannel+0x7c8>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d004      	beq.n	8003114 <HAL_ADC_ConfigChannel+0x748>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4a22      	ldr	r2, [pc, #136]	; (8003198 <HAL_ADC_ConfigChannel+0x7cc>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d12d      	bne.n	8003170 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003114:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003118:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800311c:	4619      	mov	r1, r3
 800311e:	481b      	ldr	r0, [pc, #108]	; (800318c <HAL_ADC_ConfigChannel+0x7c0>)
 8003120:	f7fe ff67 	bl	8001ff2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003124:	e024      	b.n	8003170 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1f      	ldr	r2, [pc, #124]	; (80031a8 <HAL_ADC_ConfigChannel+0x7dc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d120      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003130:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003134:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003138:	2b00      	cmp	r3, #0
 800313a:	d11a      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a14      	ldr	r2, [pc, #80]	; (8003194 <HAL_ADC_ConfigChannel+0x7c8>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d115      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003146:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800314a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800314e:	4619      	mov	r1, r3
 8003150:	480e      	ldr	r0, [pc, #56]	; (800318c <HAL_ADC_ConfigChannel+0x7c0>)
 8003152:	f7fe ff4e 	bl	8001ff2 <LL_ADC_SetCommonPathInternalCh>
 8003156:	e00c      	b.n	8003172 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315c:	f043 0220 	orr.w	r2, r3, #32
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800316a:	e002      	b.n	8003172 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800316c:	bf00      	nop
 800316e:	e000      	b.n	8003172 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003170:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800317a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800317e:	4618      	mov	r0, r3
 8003180:	37d8      	adds	r7, #216	; 0xd8
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	80080000 	.word	0x80080000
 800318c:	50040300 	.word	0x50040300
 8003190:	c7520000 	.word	0xc7520000
 8003194:	50040000 	.word	0x50040000
 8003198:	50040200 	.word	0x50040200
 800319c:	20000010 	.word	0x20000010
 80031a0:	053e2d63 	.word	0x053e2d63
 80031a4:	cb840000 	.word	0xcb840000
 80031a8:	80000001 	.word	0x80000001

080031ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b084      	sub	sp, #16
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4618      	mov	r0, r3
 80031ba:	f7ff f8b1 	bl	8002320 <LL_ADC_IsEnabled>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d14d      	bne.n	8003260 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	4b28      	ldr	r3, [pc, #160]	; (800326c <ADC_Enable+0xc0>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00d      	beq.n	80031ee <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031d6:	f043 0210 	orr.w	r2, r3, #16
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031e2:	f043 0201 	orr.w	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
 80031ec:	e039      	b.n	8003262 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff f86c 	bl	80022d0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031f8:	f7fe feb8 	bl	8001f6c <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031fe:	e028      	b.n	8003252 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff f88b 	bl	8002320 <LL_ADC_IsEnabled>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d104      	bne.n	800321a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff f85b 	bl	80022d0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800321a:	f7fe fea7 	bl	8001f6c <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d914      	bls.n	8003252 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d00d      	beq.n	8003252 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323a:	f043 0210 	orr.w	r2, r3, #16
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003246:	f043 0201 	orr.w	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e007      	b.n	8003262 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b01      	cmp	r3, #1
 800325e:	d1cf      	bne.n	8003200 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	8000003f 	.word	0x8000003f

08003270 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff f862 	bl	8002346 <LL_ADC_IsDisableOngoing>
 8003282:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff f849 	bl	8002320 <LL_ADC_IsEnabled>
 800328e:	4603      	mov	r3, r0
 8003290:	2b00      	cmp	r3, #0
 8003292:	d047      	beq.n	8003324 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d144      	bne.n	8003324 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 030d 	and.w	r3, r3, #13
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d10c      	bne.n	80032c2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff f823 	bl	80022f8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	2203      	movs	r2, #3
 80032b8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032ba:	f7fe fe57 	bl	8001f6c <HAL_GetTick>
 80032be:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032c0:	e029      	b.n	8003316 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032c6:	f043 0210 	orr.w	r2, r3, #16
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032d2:	f043 0201 	orr.w	r2, r3, #1
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e023      	b.n	8003326 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80032de:	f7fe fe45 	bl	8001f6c <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b02      	cmp	r3, #2
 80032ea:	d914      	bls.n	8003316 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d00d      	beq.n	8003316 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032fe:	f043 0210 	orr.w	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330a:	f043 0201 	orr.w	r2, r3, #1
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e007      	b.n	8003326 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1dc      	bne.n	80032de <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <LL_ADC_IsEnabled>:
{
 800332e:	b480      	push	{r7}
 8003330:	b083      	sub	sp, #12
 8003332:	af00      	add	r7, sp, #0
 8003334:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b01      	cmp	r3, #1
 8003340:	d101      	bne.n	8003346 <LL_ADC_IsEnabled+0x18>
 8003342:	2301      	movs	r3, #1
 8003344:	e000      	b.n	8003348 <LL_ADC_IsEnabled+0x1a>
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	370c      	adds	r7, #12
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <LL_ADC_StartCalibration>:
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
 800335c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	689b      	ldr	r3, [r3, #8]
 8003362:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003366:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800336a:	683a      	ldr	r2, [r7, #0]
 800336c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003370:	4313      	orrs	r3, r2
 8003372:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	609a      	str	r2, [r3, #8]
}
 800337a:	bf00      	nop
 800337c:	370c      	adds	r7, #12
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <LL_ADC_IsCalibrationOnGoing>:
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003396:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800339a:	d101      	bne.n	80033a0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800339c:	2301      	movs	r3, #1
 800339e:	e000      	b.n	80033a2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80033a0:	2300      	movs	r3, #0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <LL_ADC_REG_IsConversionOngoing>:
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f003 0304 	and.w	r3, r3, #4
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d101      	bne.n	80033c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80033c2:	2301      	movs	r3, #1
 80033c4:	e000      	b.n	80033c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80033de:	2300      	movs	r3, #0
 80033e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_ADCEx_Calibration_Start+0x1c>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e04d      	b.n	800348c <HAL_ADCEx_Calibration_Start+0xb8>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f7ff ff39 	bl	8003270 <ADC_Disable>
 80033fe:	4603      	mov	r3, r0
 8003400:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d136      	bne.n	8003476 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003410:	f023 0302 	bic.w	r3, r3, #2
 8003414:	f043 0202 	orr.w	r2, r3, #2
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6839      	ldr	r1, [r7, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff ff96 	bl	8003354 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003428:	e014      	b.n	8003454 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	3301      	adds	r3, #1
 800342e:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003436:	d30d      	bcc.n	8003454 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343c:	f023 0312 	bic.w	r3, r3, #18
 8003440:	f043 0210 	orr.w	r2, r3, #16
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2200      	movs	r2, #0
 800344c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e01b      	b.n	800348c <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff ff94 	bl	8003386 <LL_ADC_IsCalibrationOnGoing>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e2      	bne.n	800342a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003468:	f023 0303 	bic.w	r3, r3, #3
 800346c:	f043 0201 	orr.w	r2, r3, #1
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	655a      	str	r2, [r3, #84]	; 0x54
 8003474:	e005      	b.n	8003482 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347a:	f043 0210 	orr.w	r2, r3, #16
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800348a:	7bfb      	ldrb	r3, [r7, #15]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3710      	adds	r7, #16
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003494:	b590      	push	{r4, r7, lr}
 8003496:	b09f      	sub	sp, #124	; 0x7c
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800349e:	2300      	movs	r3, #0
 80034a0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034aa:	2b01      	cmp	r3, #1
 80034ac:	d101      	bne.n	80034b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034ae:	2302      	movs	r3, #2
 80034b0:	e093      	b.n	80035da <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80034ba:	2300      	movs	r3, #0
 80034bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80034be:	2300      	movs	r3, #0
 80034c0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a47      	ldr	r2, [pc, #284]	; (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d102      	bne.n	80034d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80034cc:	4b46      	ldr	r3, [pc, #280]	; (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80034ce:	60bb      	str	r3, [r7, #8]
 80034d0:	e001      	b.n	80034d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80034d2:	2300      	movs	r3, #0
 80034d4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10b      	bne.n	80034f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e0:	f043 0220 	orr.w	r2, r3, #32
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e072      	b.n	80035da <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f7ff ff59 	bl	80033ae <LL_ADC_REG_IsConversionOngoing>
 80034fc:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4618      	mov	r0, r3
 8003504:	f7ff ff53 	bl	80033ae <LL_ADC_REG_IsConversionOngoing>
 8003508:	4603      	mov	r3, r0
 800350a:	2b00      	cmp	r3, #0
 800350c:	d154      	bne.n	80035b8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800350e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003510:	2b00      	cmp	r3, #0
 8003512:	d151      	bne.n	80035b8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003514:	4b35      	ldr	r3, [pc, #212]	; (80035ec <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003516:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d02c      	beq.n	800357a <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	6859      	ldr	r1, [r3, #4]
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003532:	035b      	lsls	r3, r3, #13
 8003534:	430b      	orrs	r3, r1
 8003536:	431a      	orrs	r2, r3
 8003538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800353a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800353c:	4829      	ldr	r0, [pc, #164]	; (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800353e:	f7ff fef6 	bl	800332e <LL_ADC_IsEnabled>
 8003542:	4604      	mov	r4, r0
 8003544:	4828      	ldr	r0, [pc, #160]	; (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003546:	f7ff fef2 	bl	800332e <LL_ADC_IsEnabled>
 800354a:	4603      	mov	r3, r0
 800354c:	431c      	orrs	r4, r3
 800354e:	4828      	ldr	r0, [pc, #160]	; (80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003550:	f7ff feed 	bl	800332e <LL_ADC_IsEnabled>
 8003554:	4603      	mov	r3, r0
 8003556:	4323      	orrs	r3, r4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d137      	bne.n	80035cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800355c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003564:	f023 030f 	bic.w	r3, r3, #15
 8003568:	683a      	ldr	r2, [r7, #0]
 800356a:	6811      	ldr	r1, [r2, #0]
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	6892      	ldr	r2, [r2, #8]
 8003570:	430a      	orrs	r2, r1
 8003572:	431a      	orrs	r2, r3
 8003574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003576:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003578:	e028      	b.n	80035cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800357a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003582:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003584:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003586:	4817      	ldr	r0, [pc, #92]	; (80035e4 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003588:	f7ff fed1 	bl	800332e <LL_ADC_IsEnabled>
 800358c:	4604      	mov	r4, r0
 800358e:	4816      	ldr	r0, [pc, #88]	; (80035e8 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003590:	f7ff fecd 	bl	800332e <LL_ADC_IsEnabled>
 8003594:	4603      	mov	r3, r0
 8003596:	431c      	orrs	r4, r3
 8003598:	4815      	ldr	r0, [pc, #84]	; (80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800359a:	f7ff fec8 	bl	800332e <LL_ADC_IsEnabled>
 800359e:	4603      	mov	r3, r0
 80035a0:	4323      	orrs	r3, r4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d112      	bne.n	80035cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a8:	689b      	ldr	r3, [r3, #8]
 80035aa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80035ae:	f023 030f 	bic.w	r3, r3, #15
 80035b2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035b4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035b6:	e009      	b.n	80035cc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	f043 0220 	orr.w	r2, r3, #32
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80035ca:	e000      	b.n	80035ce <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035d6:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80035da:	4618      	mov	r0, r3
 80035dc:	377c      	adds	r7, #124	; 0x7c
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd90      	pop	{r4, r7, pc}
 80035e2:	bf00      	nop
 80035e4:	50040000 	.word	0x50040000
 80035e8:	50040100 	.word	0x50040100
 80035ec:	50040300 	.word	0x50040300
 80035f0:	50040200 	.word	0x50040200

080035f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b085      	sub	sp, #20
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f003 0307 	and.w	r3, r3, #7
 8003602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003604:	4b0c      	ldr	r3, [pc, #48]	; (8003638 <__NVIC_SetPriorityGrouping+0x44>)
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003610:	4013      	ands	r3, r2
 8003612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800361c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003626:	4a04      	ldr	r2, [pc, #16]	; (8003638 <__NVIC_SetPriorityGrouping+0x44>)
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	60d3      	str	r3, [r2, #12]
}
 800362c:	bf00      	nop
 800362e:	3714      	adds	r7, #20
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003640:	4b04      	ldr	r3, [pc, #16]	; (8003654 <__NVIC_GetPriorityGrouping+0x18>)
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	0a1b      	lsrs	r3, r3, #8
 8003646:	f003 0307 	and.w	r3, r3, #7
}
 800364a:	4618      	mov	r0, r3
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr
 8003654:	e000ed00 	.word	0xe000ed00

08003658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	4603      	mov	r3, r0
 8003660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003666:	2b00      	cmp	r3, #0
 8003668:	db0b      	blt.n	8003682 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800366a:	79fb      	ldrb	r3, [r7, #7]
 800366c:	f003 021f 	and.w	r2, r3, #31
 8003670:	4907      	ldr	r1, [pc, #28]	; (8003690 <__NVIC_EnableIRQ+0x38>)
 8003672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003676:	095b      	lsrs	r3, r3, #5
 8003678:	2001      	movs	r0, #1
 800367a:	fa00 f202 	lsl.w	r2, r0, r2
 800367e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	e000e100 	.word	0xe000e100

08003694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	4603      	mov	r3, r0
 800369c:	6039      	str	r1, [r7, #0]
 800369e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	db0a      	blt.n	80036be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	490c      	ldr	r1, [pc, #48]	; (80036e0 <__NVIC_SetPriority+0x4c>)
 80036ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b2:	0112      	lsls	r2, r2, #4
 80036b4:	b2d2      	uxtb	r2, r2
 80036b6:	440b      	add	r3, r1
 80036b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036bc:	e00a      	b.n	80036d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	4908      	ldr	r1, [pc, #32]	; (80036e4 <__NVIC_SetPriority+0x50>)
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	f003 030f 	and.w	r3, r3, #15
 80036ca:	3b04      	subs	r3, #4
 80036cc:	0112      	lsls	r2, r2, #4
 80036ce:	b2d2      	uxtb	r2, r2
 80036d0:	440b      	add	r3, r1
 80036d2:	761a      	strb	r2, [r3, #24]
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr
 80036e0:	e000e100 	.word	0xe000e100
 80036e4:	e000ed00 	.word	0xe000ed00

080036e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b089      	sub	sp, #36	; 0x24
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	60b9      	str	r1, [r7, #8]
 80036f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f003 0307 	and.w	r3, r3, #7
 80036fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f1c3 0307 	rsb	r3, r3, #7
 8003702:	2b04      	cmp	r3, #4
 8003704:	bf28      	it	cs
 8003706:	2304      	movcs	r3, #4
 8003708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	3304      	adds	r3, #4
 800370e:	2b06      	cmp	r3, #6
 8003710:	d902      	bls.n	8003718 <NVIC_EncodePriority+0x30>
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	3b03      	subs	r3, #3
 8003716:	e000      	b.n	800371a <NVIC_EncodePriority+0x32>
 8003718:	2300      	movs	r3, #0
 800371a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800371c:	f04f 32ff 	mov.w	r2, #4294967295
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	fa02 f303 	lsl.w	r3, r2, r3
 8003726:	43da      	mvns	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	401a      	ands	r2, r3
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003730:	f04f 31ff 	mov.w	r1, #4294967295
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	fa01 f303 	lsl.w	r3, r1, r3
 800373a:	43d9      	mvns	r1, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003740:	4313      	orrs	r3, r2
         );
}
 8003742:	4618      	mov	r0, r3
 8003744:	3724      	adds	r7, #36	; 0x24
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr
	...

08003750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	3b01      	subs	r3, #1
 800375c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003760:	d301      	bcc.n	8003766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003762:	2301      	movs	r3, #1
 8003764:	e00f      	b.n	8003786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003766:	4a0a      	ldr	r2, [pc, #40]	; (8003790 <SysTick_Config+0x40>)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	3b01      	subs	r3, #1
 800376c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800376e:	210f      	movs	r1, #15
 8003770:	f04f 30ff 	mov.w	r0, #4294967295
 8003774:	f7ff ff8e 	bl	8003694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003778:	4b05      	ldr	r3, [pc, #20]	; (8003790 <SysTick_Config+0x40>)
 800377a:	2200      	movs	r2, #0
 800377c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800377e:	4b04      	ldr	r3, [pc, #16]	; (8003790 <SysTick_Config+0x40>)
 8003780:	2207      	movs	r2, #7
 8003782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3708      	adds	r7, #8
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	e000e010 	.word	0xe000e010

08003794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f7ff ff29 	bl	80035f4 <__NVIC_SetPriorityGrouping>
}
 80037a2:	bf00      	nop
 80037a4:	3708      	adds	r7, #8
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}

080037aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037aa:	b580      	push	{r7, lr}
 80037ac:	b086      	sub	sp, #24
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	4603      	mov	r3, r0
 80037b2:	60b9      	str	r1, [r7, #8]
 80037b4:	607a      	str	r2, [r7, #4]
 80037b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037bc:	f7ff ff3e 	bl	800363c <__NVIC_GetPriorityGrouping>
 80037c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037c2:	687a      	ldr	r2, [r7, #4]
 80037c4:	68b9      	ldr	r1, [r7, #8]
 80037c6:	6978      	ldr	r0, [r7, #20]
 80037c8:	f7ff ff8e 	bl	80036e8 <NVIC_EncodePriority>
 80037cc:	4602      	mov	r2, r0
 80037ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037d2:	4611      	mov	r1, r2
 80037d4:	4618      	mov	r0, r3
 80037d6:	f7ff ff5d 	bl	8003694 <__NVIC_SetPriority>
}
 80037da:	bf00      	nop
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}

080037e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037e2:	b580      	push	{r7, lr}
 80037e4:	b082      	sub	sp, #8
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	4603      	mov	r3, r0
 80037ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff ff31 	bl	8003658 <__NVIC_EnableIRQ>
}
 80037f6:	bf00      	nop
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b082      	sub	sp, #8
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7ff ffa2 	bl	8003750 <SysTick_Config>
 800380c:	4603      	mov	r3, r0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003816:	b480      	push	{r7}
 8003818:	b085      	sub	sp, #20
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800381e:	2300      	movs	r3, #0
 8003820:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b02      	cmp	r3, #2
 800382c:	d008      	beq.n	8003840 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2204      	movs	r2, #4
 8003832:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e022      	b.n	8003886 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 020e 	bic.w	r2, r2, #14
 800384e:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f022 0201 	bic.w	r2, r2, #1
 800385e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003864:	f003 021c 	and.w	r2, r3, #28
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	2101      	movs	r1, #1
 800386e:	fa01 f202 	lsl.w	r2, r1, r2
 8003872:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2201      	movs	r2, #1
 8003878:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003884:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003886:	4618      	mov	r0, r3
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003892:	b580      	push	{r7, lr}
 8003894:	b084      	sub	sp, #16
 8003896:	af00      	add	r7, sp, #0
 8003898:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d005      	beq.n	80038b6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2204      	movs	r2, #4
 80038ae:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	73fb      	strb	r3, [r7, #15]
 80038b4:	e029      	b.n	800390a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681a      	ldr	r2, [r3, #0]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 020e 	bic.w	r2, r2, #14
 80038c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681a      	ldr	r2, [r3, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f022 0201 	bic.w	r2, r2, #1
 80038d4:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	f003 021c 	and.w	r2, r3, #28
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	2101      	movs	r1, #1
 80038e4:	fa01 f202 	lsl.w	r2, r1, r2
 80038e8:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	4798      	blx	r3
    }
  }
  return status;
 800390a:	7bfb      	ldrb	r3, [r7, #15]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800391e:	2300      	movs	r3, #0
 8003920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003922:	e17f      	b.n	8003c24 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	2101      	movs	r1, #1
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	fa01 f303 	lsl.w	r3, r1, r3
 8003930:	4013      	ands	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 8171 	beq.w	8003c1e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	f003 0303 	and.w	r3, r3, #3
 8003944:	2b01      	cmp	r3, #1
 8003946:	d005      	beq.n	8003954 <HAL_GPIO_Init+0x40>
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	f003 0303 	and.w	r3, r3, #3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d130      	bne.n	80039b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	2203      	movs	r2, #3
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4013      	ands	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	68da      	ldr	r2, [r3, #12]
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	fa02 f303 	lsl.w	r3, r2, r3
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800398a:	2201      	movs	r2, #1
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43db      	mvns	r3, r3
 8003994:	693a      	ldr	r2, [r7, #16]
 8003996:	4013      	ands	r3, r2
 8003998:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	091b      	lsrs	r3, r3, #4
 80039a0:	f003 0201 	and.w	r2, r3, #1
 80039a4:	697b      	ldr	r3, [r7, #20]
 80039a6:	fa02 f303 	lsl.w	r3, r2, r3
 80039aa:	693a      	ldr	r2, [r7, #16]
 80039ac:	4313      	orrs	r3, r2
 80039ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	693a      	ldr	r2, [r7, #16]
 80039b4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f003 0303 	and.w	r3, r3, #3
 80039be:	2b03      	cmp	r3, #3
 80039c0:	d118      	bne.n	80039f4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80039c8:	2201      	movs	r2, #1
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	4013      	ands	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	08db      	lsrs	r3, r3, #3
 80039de:	f003 0201 	and.w	r2, r3, #1
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d017      	beq.n	8003a30 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	68db      	ldr	r3, [r3, #12]
 8003a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	005b      	lsls	r3, r3, #1
 8003a0a:	2203      	movs	r2, #3
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	43db      	mvns	r3, r3
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	4013      	ands	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d123      	bne.n	8003a84 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	08da      	lsrs	r2, r3, #3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3208      	adds	r2, #8
 8003a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a48:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	f003 0307 	and.w	r3, r3, #7
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	220f      	movs	r2, #15
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	43db      	mvns	r3, r3
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	f003 0307 	and.w	r3, r3, #7
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	08da      	lsrs	r2, r3, #3
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	3208      	adds	r2, #8
 8003a7e:	6939      	ldr	r1, [r7, #16]
 8003a80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	2203      	movs	r2, #3
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43db      	mvns	r3, r3
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	4013      	ands	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 0203 	and.w	r2, r3, #3
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	005b      	lsls	r3, r3, #1
 8003aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	f000 80ac 	beq.w	8003c1e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ac6:	4b5f      	ldr	r3, [pc, #380]	; (8003c44 <HAL_GPIO_Init+0x330>)
 8003ac8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aca:	4a5e      	ldr	r2, [pc, #376]	; (8003c44 <HAL_GPIO_Init+0x330>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6613      	str	r3, [r2, #96]	; 0x60
 8003ad2:	4b5c      	ldr	r3, [pc, #368]	; (8003c44 <HAL_GPIO_Init+0x330>)
 8003ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	60bb      	str	r3, [r7, #8]
 8003adc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ade:	4a5a      	ldr	r2, [pc, #360]	; (8003c48 <HAL_GPIO_Init+0x334>)
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	089b      	lsrs	r3, r3, #2
 8003ae4:	3302      	adds	r3, #2
 8003ae6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003aea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f003 0303 	and.w	r3, r3, #3
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	220f      	movs	r2, #15
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43db      	mvns	r3, r3
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	4013      	ands	r3, r2
 8003b00:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b08:	d025      	beq.n	8003b56 <HAL_GPIO_Init+0x242>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a4f      	ldr	r2, [pc, #316]	; (8003c4c <HAL_GPIO_Init+0x338>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d01f      	beq.n	8003b52 <HAL_GPIO_Init+0x23e>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a4e      	ldr	r2, [pc, #312]	; (8003c50 <HAL_GPIO_Init+0x33c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d019      	beq.n	8003b4e <HAL_GPIO_Init+0x23a>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a4d      	ldr	r2, [pc, #308]	; (8003c54 <HAL_GPIO_Init+0x340>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d013      	beq.n	8003b4a <HAL_GPIO_Init+0x236>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a4c      	ldr	r2, [pc, #304]	; (8003c58 <HAL_GPIO_Init+0x344>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00d      	beq.n	8003b46 <HAL_GPIO_Init+0x232>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a4b      	ldr	r2, [pc, #300]	; (8003c5c <HAL_GPIO_Init+0x348>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d007      	beq.n	8003b42 <HAL_GPIO_Init+0x22e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a4a      	ldr	r2, [pc, #296]	; (8003c60 <HAL_GPIO_Init+0x34c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d101      	bne.n	8003b3e <HAL_GPIO_Init+0x22a>
 8003b3a:	2306      	movs	r3, #6
 8003b3c:	e00c      	b.n	8003b58 <HAL_GPIO_Init+0x244>
 8003b3e:	2307      	movs	r3, #7
 8003b40:	e00a      	b.n	8003b58 <HAL_GPIO_Init+0x244>
 8003b42:	2305      	movs	r3, #5
 8003b44:	e008      	b.n	8003b58 <HAL_GPIO_Init+0x244>
 8003b46:	2304      	movs	r3, #4
 8003b48:	e006      	b.n	8003b58 <HAL_GPIO_Init+0x244>
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e004      	b.n	8003b58 <HAL_GPIO_Init+0x244>
 8003b4e:	2302      	movs	r3, #2
 8003b50:	e002      	b.n	8003b58 <HAL_GPIO_Init+0x244>
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <HAL_GPIO_Init+0x244>
 8003b56:	2300      	movs	r3, #0
 8003b58:	697a      	ldr	r2, [r7, #20]
 8003b5a:	f002 0203 	and.w	r2, r2, #3
 8003b5e:	0092      	lsls	r2, r2, #2
 8003b60:	4093      	lsls	r3, r2
 8003b62:	693a      	ldr	r2, [r7, #16]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b68:	4937      	ldr	r1, [pc, #220]	; (8003c48 <HAL_GPIO_Init+0x334>)
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	089b      	lsrs	r3, r3, #2
 8003b6e:	3302      	adds	r3, #2
 8003b70:	693a      	ldr	r2, [r7, #16]
 8003b72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b76:	4b3b      	ldr	r3, [pc, #236]	; (8003c64 <HAL_GPIO_Init+0x350>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	4013      	ands	r3, r2
 8003b84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d003      	beq.n	8003b9a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b9a:	4a32      	ldr	r2, [pc, #200]	; (8003c64 <HAL_GPIO_Init+0x350>)
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ba0:	4b30      	ldr	r3, [pc, #192]	; (8003c64 <HAL_GPIO_Init+0x350>)
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	43db      	mvns	r3, r3
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4013      	ands	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d003      	beq.n	8003bc4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bc4:	4a27      	ldr	r2, [pc, #156]	; (8003c64 <HAL_GPIO_Init+0x350>)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bca:	4b26      	ldr	r3, [pc, #152]	; (8003c64 <HAL_GPIO_Init+0x350>)
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	43db      	mvns	r3, r3
 8003bd4:	693a      	ldr	r2, [r7, #16]
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bee:	4a1d      	ldr	r2, [pc, #116]	; (8003c64 <HAL_GPIO_Init+0x350>)
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003bf4:	4b1b      	ldr	r3, [pc, #108]	; (8003c64 <HAL_GPIO_Init+0x350>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4013      	ands	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c18:	4a12      	ldr	r2, [pc, #72]	; (8003c64 <HAL_GPIO_Init+0x350>)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	3301      	adds	r3, #1
 8003c22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	f47f ae78 	bne.w	8003924 <HAL_GPIO_Init+0x10>
  }
}
 8003c34:	bf00      	nop
 8003c36:	bf00      	nop
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	40021000 	.word	0x40021000
 8003c48:	40010000 	.word	0x40010000
 8003c4c:	48000400 	.word	0x48000400
 8003c50:	48000800 	.word	0x48000800
 8003c54:	48000c00 	.word	0x48000c00
 8003c58:	48001000 	.word	0x48001000
 8003c5c:	48001400 	.word	0x48001400
 8003c60:	48001800 	.word	0x48001800
 8003c64:	40010400 	.word	0x40010400

08003c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	460b      	mov	r3, r1
 8003c72:	807b      	strh	r3, [r7, #2]
 8003c74:	4613      	mov	r3, r2
 8003c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c78:	787b      	ldrb	r3, [r7, #1]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c7e:	887a      	ldrh	r2, [r7, #2]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c84:	e002      	b.n	8003c8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c86:	887a      	ldrh	r2, [r7, #2]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c9c:	4b04      	ldr	r3, [pc, #16]	; (8003cb0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop
 8003cb0:	40007000 	.word	0x40007000

08003cb4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cc2:	d130      	bne.n	8003d26 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003cc4:	4b23      	ldr	r3, [pc, #140]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ccc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cd0:	d038      	beq.n	8003d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cd2:	4b20      	ldr	r3, [pc, #128]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003cda:	4a1e      	ldr	r2, [pc, #120]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cdc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ce0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ce2:	4b1d      	ldr	r3, [pc, #116]	; (8003d58 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	2232      	movs	r2, #50	; 0x32
 8003ce8:	fb02 f303 	mul.w	r3, r2, r3
 8003cec:	4a1b      	ldr	r2, [pc, #108]	; (8003d5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cee:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf2:	0c9b      	lsrs	r3, r3, #18
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cf8:	e002      	b.n	8003d00 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d00:	4b14      	ldr	r3, [pc, #80]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d02:	695b      	ldr	r3, [r3, #20]
 8003d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d0c:	d102      	bne.n	8003d14 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d1f2      	bne.n	8003cfa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d14:	4b0f      	ldr	r3, [pc, #60]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d16:	695b      	ldr	r3, [r3, #20]
 8003d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d20:	d110      	bne.n	8003d44 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	e00f      	b.n	8003d46 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003d26:	4b0b      	ldr	r3, [pc, #44]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d32:	d007      	beq.n	8003d44 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d34:	4b07      	ldr	r3, [pc, #28]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d3c:	4a05      	ldr	r2, [pc, #20]	; (8003d54 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d3e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d42:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d44:	2300      	movs	r3, #0
}
 8003d46:	4618      	mov	r0, r3
 8003d48:	3714      	adds	r7, #20
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	40007000 	.word	0x40007000
 8003d58:	20000010 	.word	0x20000010
 8003d5c:	431bde83 	.word	0x431bde83

08003d60 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b088      	sub	sp, #32
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e3d4      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d72:	4ba1      	ldr	r3, [pc, #644]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
 8003d7a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d7c:	4b9e      	ldr	r3, [pc, #632]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	f003 0303 	and.w	r3, r3, #3
 8003d84:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0310 	and.w	r3, r3, #16
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 80e4 	beq.w	8003f5c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d007      	beq.n	8003daa <HAL_RCC_OscConfig+0x4a>
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	2b0c      	cmp	r3, #12
 8003d9e:	f040 808b 	bne.w	8003eb8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	f040 8087 	bne.w	8003eb8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003daa:	4b93      	ldr	r3, [pc, #588]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d005      	beq.n	8003dc2 <HAL_RCC_OscConfig+0x62>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e3ac      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1a      	ldr	r2, [r3, #32]
 8003dc6:	4b8c      	ldr	r3, [pc, #560]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f003 0308 	and.w	r3, r3, #8
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d004      	beq.n	8003ddc <HAL_RCC_OscConfig+0x7c>
 8003dd2:	4b89      	ldr	r3, [pc, #548]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dda:	e005      	b.n	8003de8 <HAL_RCC_OscConfig+0x88>
 8003ddc:	4b86      	ldr	r3, [pc, #536]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003dde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003de2:	091b      	lsrs	r3, r3, #4
 8003de4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d223      	bcs.n	8003e34 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f000 fd41 	bl	8004878 <RCC_SetFlashLatencyFromMSIRange>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e38d      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e00:	4b7d      	ldr	r3, [pc, #500]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a7c      	ldr	r2, [pc, #496]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e06:	f043 0308 	orr.w	r3, r3, #8
 8003e0a:	6013      	str	r3, [r2, #0]
 8003e0c:	4b7a      	ldr	r3, [pc, #488]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a1b      	ldr	r3, [r3, #32]
 8003e18:	4977      	ldr	r1, [pc, #476]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e1e:	4b76      	ldr	r3, [pc, #472]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e20:	685b      	ldr	r3, [r3, #4]
 8003e22:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	021b      	lsls	r3, r3, #8
 8003e2c:	4972      	ldr	r1, [pc, #456]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	604b      	str	r3, [r1, #4]
 8003e32:	e025      	b.n	8003e80 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e34:	4b70      	ldr	r3, [pc, #448]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a6f      	ldr	r2, [pc, #444]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e3a:	f043 0308 	orr.w	r3, r3, #8
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	4b6d      	ldr	r3, [pc, #436]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	496a      	ldr	r1, [pc, #424]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e52:	4b69      	ldr	r3, [pc, #420]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	021b      	lsls	r3, r3, #8
 8003e60:	4965      	ldr	r1, [pc, #404]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e66:	69bb      	ldr	r3, [r7, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d109      	bne.n	8003e80 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	4618      	mov	r0, r3
 8003e72:	f000 fd01 	bl	8004878 <RCC_SetFlashLatencyFromMSIRange>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	e34d      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e80:	f000 fc36 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8003e84:	4602      	mov	r2, r0
 8003e86:	4b5c      	ldr	r3, [pc, #368]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	091b      	lsrs	r3, r3, #4
 8003e8c:	f003 030f 	and.w	r3, r3, #15
 8003e90:	495a      	ldr	r1, [pc, #360]	; (8003ffc <HAL_RCC_OscConfig+0x29c>)
 8003e92:	5ccb      	ldrb	r3, [r1, r3]
 8003e94:	f003 031f 	and.w	r3, r3, #31
 8003e98:	fa22 f303 	lsr.w	r3, r2, r3
 8003e9c:	4a58      	ldr	r2, [pc, #352]	; (8004000 <HAL_RCC_OscConfig+0x2a0>)
 8003e9e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003ea0:	4b58      	ldr	r3, [pc, #352]	; (8004004 <HAL_RCC_OscConfig+0x2a4>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fe f811 	bl	8001ecc <HAL_InitTick>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003eae:	7bfb      	ldrb	r3, [r7, #15]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d052      	beq.n	8003f5a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003eb4:	7bfb      	ldrb	r3, [r7, #15]
 8003eb6:	e331      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	699b      	ldr	r3, [r3, #24]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d032      	beq.n	8003f26 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003ec0:	4b4d      	ldr	r3, [pc, #308]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a4c      	ldr	r2, [pc, #304]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003ec6:	f043 0301 	orr.w	r3, r3, #1
 8003eca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003ecc:	f7fe f84e 	bl	8001f6c <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003ed4:	f7fe f84a 	bl	8001f6c <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e31a      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003ee6:	4b44      	ldr	r3, [pc, #272]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0302 	and.w	r3, r3, #2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ef2:	4b41      	ldr	r3, [pc, #260]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a40      	ldr	r2, [pc, #256]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003ef8:	f043 0308 	orr.w	r3, r3, #8
 8003efc:	6013      	str	r3, [r2, #0]
 8003efe:	4b3e      	ldr	r3, [pc, #248]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	493b      	ldr	r1, [pc, #236]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003f10:	4b39      	ldr	r3, [pc, #228]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	69db      	ldr	r3, [r3, #28]
 8003f1c:	021b      	lsls	r3, r3, #8
 8003f1e:	4936      	ldr	r1, [pc, #216]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003f20:	4313      	orrs	r3, r2
 8003f22:	604b      	str	r3, [r1, #4]
 8003f24:	e01a      	b.n	8003f5c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003f26:	4b34      	ldr	r3, [pc, #208]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a33      	ldr	r2, [pc, #204]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003f2c:	f023 0301 	bic.w	r3, r3, #1
 8003f30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f32:	f7fe f81b 	bl	8001f6c <HAL_GetTick>
 8003f36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f3a:	f7fe f817 	bl	8001f6c <HAL_GetTick>
 8003f3e:	4602      	mov	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e2e7      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f4c:	4b2a      	ldr	r3, [pc, #168]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1f0      	bne.n	8003f3a <HAL_RCC_OscConfig+0x1da>
 8003f58:	e000      	b.n	8003f5c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f5a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f003 0301 	and.w	r3, r3, #1
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d074      	beq.n	8004052 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d005      	beq.n	8003f7a <HAL_RCC_OscConfig+0x21a>
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	2b0c      	cmp	r3, #12
 8003f72:	d10e      	bne.n	8003f92 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	2b03      	cmp	r3, #3
 8003f78:	d10b      	bne.n	8003f92 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f7a:	4b1f      	ldr	r3, [pc, #124]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d064      	beq.n	8004050 <HAL_RCC_OscConfig+0x2f0>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d160      	bne.n	8004050 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e2c4      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f9a:	d106      	bne.n	8003faa <HAL_RCC_OscConfig+0x24a>
 8003f9c:	4b16      	ldr	r3, [pc, #88]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a15      	ldr	r2, [pc, #84]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fa6:	6013      	str	r3, [r2, #0]
 8003fa8:	e01d      	b.n	8003fe6 <HAL_RCC_OscConfig+0x286>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fb2:	d10c      	bne.n	8003fce <HAL_RCC_OscConfig+0x26e>
 8003fb4:	4b10      	ldr	r3, [pc, #64]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a0f      	ldr	r2, [pc, #60]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003fba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	4b0d      	ldr	r3, [pc, #52]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a0c      	ldr	r2, [pc, #48]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003fc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fca:	6013      	str	r3, [r2, #0]
 8003fcc:	e00b      	b.n	8003fe6 <HAL_RCC_OscConfig+0x286>
 8003fce:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a09      	ldr	r2, [pc, #36]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd8:	6013      	str	r3, [r2, #0]
 8003fda:	4b07      	ldr	r3, [pc, #28]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a06      	ldr	r2, [pc, #24]	; (8003ff8 <HAL_RCC_OscConfig+0x298>)
 8003fe0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fe4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d01c      	beq.n	8004028 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fee:	f7fd ffbd 	bl	8001f6c <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ff4:	e011      	b.n	800401a <HAL_RCC_OscConfig+0x2ba>
 8003ff6:	bf00      	nop
 8003ff8:	40021000 	.word	0x40021000
 8003ffc:	08009674 	.word	0x08009674
 8004000:	20000010 	.word	0x20000010
 8004004:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004008:	f7fd ffb0 	bl	8001f6c <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b64      	cmp	r3, #100	; 0x64
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e280      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800401a:	4baf      	ldr	r3, [pc, #700]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCC_OscConfig+0x2a8>
 8004026:	e014      	b.n	8004052 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004028:	f7fd ffa0 	bl	8001f6c <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004030:	f7fd ff9c 	bl	8001f6c <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b64      	cmp	r3, #100	; 0x64
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e26c      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004042:	4ba5      	ldr	r3, [pc, #660]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0x2d0>
 800404e:	e000      	b.n	8004052 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d060      	beq.n	8004120 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	2b04      	cmp	r3, #4
 8004062:	d005      	beq.n	8004070 <HAL_RCC_OscConfig+0x310>
 8004064:	69bb      	ldr	r3, [r7, #24]
 8004066:	2b0c      	cmp	r3, #12
 8004068:	d119      	bne.n	800409e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800406a:	697b      	ldr	r3, [r7, #20]
 800406c:	2b02      	cmp	r3, #2
 800406e:	d116      	bne.n	800409e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004070:	4b99      	ldr	r3, [pc, #612]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_RCC_OscConfig+0x328>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d101      	bne.n	8004088 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	e249      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004088:	4b93      	ldr	r3, [pc, #588]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	061b      	lsls	r3, r3, #24
 8004096:	4990      	ldr	r1, [pc, #576]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004098:	4313      	orrs	r3, r2
 800409a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800409c:	e040      	b.n	8004120 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68db      	ldr	r3, [r3, #12]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d023      	beq.n	80040ee <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a6:	4b8c      	ldr	r3, [pc, #560]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a8b      	ldr	r2, [pc, #556]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80040ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040b2:	f7fd ff5b 	bl	8001f6c <HAL_GetTick>
 80040b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040b8:	e008      	b.n	80040cc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ba:	f7fd ff57 	bl	8001f6c <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b02      	cmp	r3, #2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e227      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040cc:	4b82      	ldr	r3, [pc, #520]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0f0      	beq.n	80040ba <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d8:	4b7f      	ldr	r3, [pc, #508]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	061b      	lsls	r3, r3, #24
 80040e6:	497c      	ldr	r1, [pc, #496]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	604b      	str	r3, [r1, #4]
 80040ec:	e018      	b.n	8004120 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040ee:	4b7a      	ldr	r3, [pc, #488]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a79      	ldr	r2, [pc, #484]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80040f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040fa:	f7fd ff37 	bl	8001f6c <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004100:	e008      	b.n	8004114 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004102:	f7fd ff33 	bl	8001f6c <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e203      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004114:	4b70      	ldr	r3, [pc, #448]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1f0      	bne.n	8004102 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0308 	and.w	r3, r3, #8
 8004128:	2b00      	cmp	r3, #0
 800412a:	d03c      	beq.n	80041a6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	695b      	ldr	r3, [r3, #20]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d01c      	beq.n	800416e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004134:	4b68      	ldr	r3, [pc, #416]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004136:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413a:	4a67      	ldr	r2, [pc, #412]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 800413c:	f043 0301 	orr.w	r3, r3, #1
 8004140:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004144:	f7fd ff12 	bl	8001f6c <HAL_GetTick>
 8004148:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800414a:	e008      	b.n	800415e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800414c:	f7fd ff0e 	bl	8001f6c <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	2b02      	cmp	r3, #2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e1de      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800415e:	4b5e      	ldr	r3, [pc, #376]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004160:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0ef      	beq.n	800414c <HAL_RCC_OscConfig+0x3ec>
 800416c:	e01b      	b.n	80041a6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800416e:	4b5a      	ldr	r3, [pc, #360]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004174:	4a58      	ldr	r2, [pc, #352]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004176:	f023 0301 	bic.w	r3, r3, #1
 800417a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417e:	f7fd fef5 	bl	8001f6c <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004184:	e008      	b.n	8004198 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004186:	f7fd fef1 	bl	8001f6c <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	2b02      	cmp	r3, #2
 8004192:	d901      	bls.n	8004198 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004194:	2303      	movs	r3, #3
 8004196:	e1c1      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004198:	4b4f      	ldr	r3, [pc, #316]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 800419a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d1ef      	bne.n	8004186 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f000 80a6 	beq.w	8004300 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041b4:	2300      	movs	r3, #0
 80041b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80041b8:	4b47      	ldr	r3, [pc, #284]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80041ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d10d      	bne.n	80041e0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041c4:	4b44      	ldr	r3, [pc, #272]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80041c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c8:	4a43      	ldr	r2, [pc, #268]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80041ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041ce:	6593      	str	r3, [r2, #88]	; 0x58
 80041d0:	4b41      	ldr	r3, [pc, #260]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80041d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041dc:	2301      	movs	r3, #1
 80041de:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041e0:	4b3e      	ldr	r3, [pc, #248]	; (80042dc <HAL_RCC_OscConfig+0x57c>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d118      	bne.n	800421e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041ec:	4b3b      	ldr	r3, [pc, #236]	; (80042dc <HAL_RCC_OscConfig+0x57c>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a3a      	ldr	r2, [pc, #232]	; (80042dc <HAL_RCC_OscConfig+0x57c>)
 80041f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041f8:	f7fd feb8 	bl	8001f6c <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004200:	f7fd feb4 	bl	8001f6c <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e184      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004212:	4b32      	ldr	r3, [pc, #200]	; (80042dc <HAL_RCC_OscConfig+0x57c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421a:	2b00      	cmp	r3, #0
 800421c:	d0f0      	beq.n	8004200 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d108      	bne.n	8004238 <HAL_RCC_OscConfig+0x4d8>
 8004226:	4b2c      	ldr	r3, [pc, #176]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800422c:	4a2a      	ldr	r2, [pc, #168]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 800422e:	f043 0301 	orr.w	r3, r3, #1
 8004232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004236:	e024      	b.n	8004282 <HAL_RCC_OscConfig+0x522>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	689b      	ldr	r3, [r3, #8]
 800423c:	2b05      	cmp	r3, #5
 800423e:	d110      	bne.n	8004262 <HAL_RCC_OscConfig+0x502>
 8004240:	4b25      	ldr	r3, [pc, #148]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004246:	4a24      	ldr	r2, [pc, #144]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004248:	f043 0304 	orr.w	r3, r3, #4
 800424c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004250:	4b21      	ldr	r3, [pc, #132]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004252:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004256:	4a20      	ldr	r2, [pc, #128]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004260:	e00f      	b.n	8004282 <HAL_RCC_OscConfig+0x522>
 8004262:	4b1d      	ldr	r3, [pc, #116]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004268:	4a1b      	ldr	r2, [pc, #108]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 800426a:	f023 0301 	bic.w	r3, r3, #1
 800426e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004272:	4b19      	ldr	r3, [pc, #100]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 8004274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004278:	4a17      	ldr	r2, [pc, #92]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 800427a:	f023 0304 	bic.w	r3, r3, #4
 800427e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d016      	beq.n	80042b8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800428a:	f7fd fe6f 	bl	8001f6c <HAL_GetTick>
 800428e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004290:	e00a      	b.n	80042a8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004292:	f7fd fe6b 	bl	8001f6c <HAL_GetTick>
 8004296:	4602      	mov	r2, r0
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	1ad3      	subs	r3, r2, r3
 800429c:	f241 3288 	movw	r2, #5000	; 0x1388
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d901      	bls.n	80042a8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80042a4:	2303      	movs	r3, #3
 80042a6:	e139      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042a8:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <HAL_RCC_OscConfig+0x578>)
 80042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d0ed      	beq.n	8004292 <HAL_RCC_OscConfig+0x532>
 80042b6:	e01a      	b.n	80042ee <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b8:	f7fd fe58 	bl	8001f6c <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042be:	e00f      	b.n	80042e0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042c0:	f7fd fe54 	bl	8001f6c <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d906      	bls.n	80042e0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80042d2:	2303      	movs	r3, #3
 80042d4:	e122      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
 80042d6:	bf00      	nop
 80042d8:	40021000 	.word	0x40021000
 80042dc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042e0:	4b90      	ldr	r3, [pc, #576]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e6:	f003 0302 	and.w	r3, r3, #2
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d1e8      	bne.n	80042c0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ee:	7ffb      	ldrb	r3, [r7, #31]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d105      	bne.n	8004300 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042f4:	4b8b      	ldr	r3, [pc, #556]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80042f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f8:	4a8a      	ldr	r2, [pc, #552]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80042fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042fe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004304:	2b00      	cmp	r3, #0
 8004306:	f000 8108 	beq.w	800451a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800430e:	2b02      	cmp	r3, #2
 8004310:	f040 80d0 	bne.w	80044b4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004314:	4b83      	ldr	r3, [pc, #524]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f003 0203 	and.w	r2, r3, #3
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004324:	429a      	cmp	r2, r3
 8004326:	d130      	bne.n	800438a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	3b01      	subs	r3, #1
 8004334:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004336:	429a      	cmp	r2, r3
 8004338:	d127      	bne.n	800438a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004344:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004346:	429a      	cmp	r2, r3
 8004348:	d11f      	bne.n	800438a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004354:	2a07      	cmp	r2, #7
 8004356:	bf14      	ite	ne
 8004358:	2201      	movne	r2, #1
 800435a:	2200      	moveq	r2, #0
 800435c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800435e:	4293      	cmp	r3, r2
 8004360:	d113      	bne.n	800438a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436c:	085b      	lsrs	r3, r3, #1
 800436e:	3b01      	subs	r3, #1
 8004370:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004372:	429a      	cmp	r2, r3
 8004374:	d109      	bne.n	800438a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	085b      	lsrs	r3, r3, #1
 8004382:	3b01      	subs	r3, #1
 8004384:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004386:	429a      	cmp	r2, r3
 8004388:	d06e      	beq.n	8004468 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	2b0c      	cmp	r3, #12
 800438e:	d069      	beq.n	8004464 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004390:	4b64      	ldr	r3, [pc, #400]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d105      	bne.n	80043a8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800439c:	4b61      	ldr	r3, [pc, #388]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d001      	beq.n	80043ac <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	e0b7      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80043ac:	4b5d      	ldr	r3, [pc, #372]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a5c      	ldr	r2, [pc, #368]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80043b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043b6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043b8:	f7fd fdd8 	bl	8001f6c <HAL_GetTick>
 80043bc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043be:	e008      	b.n	80043d2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c0:	f7fd fdd4 	bl	8001f6c <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	2b02      	cmp	r3, #2
 80043cc:	d901      	bls.n	80043d2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80043ce:	2303      	movs	r3, #3
 80043d0:	e0a4      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043d2:	4b54      	ldr	r3, [pc, #336]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1f0      	bne.n	80043c0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043de:	4b51      	ldr	r3, [pc, #324]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80043e0:	68da      	ldr	r2, [r3, #12]
 80043e2:	4b51      	ldr	r3, [pc, #324]	; (8004528 <HAL_RCC_OscConfig+0x7c8>)
 80043e4:	4013      	ands	r3, r2
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043ee:	3a01      	subs	r2, #1
 80043f0:	0112      	lsls	r2, r2, #4
 80043f2:	4311      	orrs	r1, r2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043f8:	0212      	lsls	r2, r2, #8
 80043fa:	4311      	orrs	r1, r2
 80043fc:	687a      	ldr	r2, [r7, #4]
 80043fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004400:	0852      	lsrs	r2, r2, #1
 8004402:	3a01      	subs	r2, #1
 8004404:	0552      	lsls	r2, r2, #21
 8004406:	4311      	orrs	r1, r2
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800440c:	0852      	lsrs	r2, r2, #1
 800440e:	3a01      	subs	r2, #1
 8004410:	0652      	lsls	r2, r2, #25
 8004412:	4311      	orrs	r1, r2
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004418:	0912      	lsrs	r2, r2, #4
 800441a:	0452      	lsls	r2, r2, #17
 800441c:	430a      	orrs	r2, r1
 800441e:	4941      	ldr	r1, [pc, #260]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 8004420:	4313      	orrs	r3, r2
 8004422:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004424:	4b3f      	ldr	r3, [pc, #252]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a3e      	ldr	r2, [pc, #248]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 800442a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800442e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004430:	4b3c      	ldr	r3, [pc, #240]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 8004432:	68db      	ldr	r3, [r3, #12]
 8004434:	4a3b      	ldr	r2, [pc, #236]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 8004436:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800443a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800443c:	f7fd fd96 	bl	8001f6c <HAL_GetTick>
 8004440:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004442:	e008      	b.n	8004456 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004444:	f7fd fd92 	bl	8001f6c <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	2b02      	cmp	r3, #2
 8004450:	d901      	bls.n	8004456 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e062      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004456:	4b33      	ldr	r3, [pc, #204]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d0f0      	beq.n	8004444 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004462:	e05a      	b.n	800451a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e059      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004468:	4b2e      	ldr	r3, [pc, #184]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d152      	bne.n	800451a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004474:	4b2b      	ldr	r3, [pc, #172]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	4a2a      	ldr	r2, [pc, #168]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 800447a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800447e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004480:	4b28      	ldr	r3, [pc, #160]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	4a27      	ldr	r2, [pc, #156]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 8004486:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800448a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800448c:	f7fd fd6e 	bl	8001f6c <HAL_GetTick>
 8004490:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004492:	e008      	b.n	80044a6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004494:	f7fd fd6a 	bl	8001f6c <HAL_GetTick>
 8004498:	4602      	mov	r2, r0
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	1ad3      	subs	r3, r2, r3
 800449e:	2b02      	cmp	r3, #2
 80044a0:	d901      	bls.n	80044a6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80044a2:	2303      	movs	r3, #3
 80044a4:	e03a      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044a6:	4b1f      	ldr	r3, [pc, #124]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d0f0      	beq.n	8004494 <HAL_RCC_OscConfig+0x734>
 80044b2:	e032      	b.n	800451a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80044b4:	69bb      	ldr	r3, [r7, #24]
 80044b6:	2b0c      	cmp	r3, #12
 80044b8:	d02d      	beq.n	8004516 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ba:	4b1a      	ldr	r3, [pc, #104]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a19      	ldr	r2, [pc, #100]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80044c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044c4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80044c6:	4b17      	ldr	r3, [pc, #92]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d105      	bne.n	80044de <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80044d2:	4b14      	ldr	r3, [pc, #80]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	4a13      	ldr	r2, [pc, #76]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80044d8:	f023 0303 	bic.w	r3, r3, #3
 80044dc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80044de:	4b11      	ldr	r3, [pc, #68]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	4a10      	ldr	r2, [pc, #64]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 80044e4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80044e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ec:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ee:	f7fd fd3d 	bl	8001f6c <HAL_GetTick>
 80044f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044f4:	e008      	b.n	8004508 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044f6:	f7fd fd39 	bl	8001f6c <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e009      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004508:	4b06      	ldr	r3, [pc, #24]	; (8004524 <HAL_RCC_OscConfig+0x7c4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1f0      	bne.n	80044f6 <HAL_RCC_OscConfig+0x796>
 8004514:	e001      	b.n	800451a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3720      	adds	r7, #32
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40021000 	.word	0x40021000
 8004528:	f99d808c 	.word	0xf99d808c

0800452c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d101      	bne.n	8004540 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0c8      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004540:	4b66      	ldr	r3, [pc, #408]	; (80046dc <HAL_RCC_ClockConfig+0x1b0>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0307 	and.w	r3, r3, #7
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d910      	bls.n	8004570 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800454e:	4b63      	ldr	r3, [pc, #396]	; (80046dc <HAL_RCC_ClockConfig+0x1b0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f023 0207 	bic.w	r2, r3, #7
 8004556:	4961      	ldr	r1, [pc, #388]	; (80046dc <HAL_RCC_ClockConfig+0x1b0>)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	4313      	orrs	r3, r2
 800455c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800455e:	4b5f      	ldr	r3, [pc, #380]	; (80046dc <HAL_RCC_ClockConfig+0x1b0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	683a      	ldr	r2, [r7, #0]
 8004568:	429a      	cmp	r2, r3
 800456a:	d001      	beq.n	8004570 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e0b0      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d04c      	beq.n	8004616 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	2b03      	cmp	r3, #3
 8004582:	d107      	bne.n	8004594 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004584:	4b56      	ldr	r3, [pc, #344]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d121      	bne.n	80045d4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e09e      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2b02      	cmp	r3, #2
 800459a:	d107      	bne.n	80045ac <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800459c:	4b50      	ldr	r3, [pc, #320]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d115      	bne.n	80045d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e092      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d107      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80045b4:	4b4a      	ldr	r3, [pc, #296]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 0302 	and.w	r3, r3, #2
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d109      	bne.n	80045d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e086      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045c4:	4b46      	ldr	r3, [pc, #280]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d101      	bne.n	80045d4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e07e      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80045d4:	4b42      	ldr	r3, [pc, #264]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f023 0203 	bic.w	r2, r3, #3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	493f      	ldr	r1, [pc, #252]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045e6:	f7fd fcc1 	bl	8001f6c <HAL_GetTick>
 80045ea:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ec:	e00a      	b.n	8004604 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045ee:	f7fd fcbd 	bl	8001f6c <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e066      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004604:	4b36      	ldr	r3, [pc, #216]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	f003 020c 	and.w	r2, r3, #12
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	429a      	cmp	r2, r3
 8004614:	d1eb      	bne.n	80045ee <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	2b00      	cmp	r3, #0
 8004620:	d008      	beq.n	8004634 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004622:	4b2f      	ldr	r3, [pc, #188]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	492c      	ldr	r1, [pc, #176]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004630:	4313      	orrs	r3, r2
 8004632:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004634:	4b29      	ldr	r3, [pc, #164]	; (80046dc <HAL_RCC_ClockConfig+0x1b0>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f003 0307 	and.w	r3, r3, #7
 800463c:	683a      	ldr	r2, [r7, #0]
 800463e:	429a      	cmp	r2, r3
 8004640:	d210      	bcs.n	8004664 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004642:	4b26      	ldr	r3, [pc, #152]	; (80046dc <HAL_RCC_ClockConfig+0x1b0>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 0207 	bic.w	r2, r3, #7
 800464a:	4924      	ldr	r1, [pc, #144]	; (80046dc <HAL_RCC_ClockConfig+0x1b0>)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	4313      	orrs	r3, r2
 8004650:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004652:	4b22      	ldr	r3, [pc, #136]	; (80046dc <HAL_RCC_ClockConfig+0x1b0>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0307 	and.w	r3, r3, #7
 800465a:	683a      	ldr	r2, [r7, #0]
 800465c:	429a      	cmp	r2, r3
 800465e:	d001      	beq.n	8004664 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e036      	b.n	80046d2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0304 	and.w	r3, r3, #4
 800466c:	2b00      	cmp	r3, #0
 800466e:	d008      	beq.n	8004682 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004670:	4b1b      	ldr	r3, [pc, #108]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
 800467c:	4918      	ldr	r1, [pc, #96]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 800467e:	4313      	orrs	r3, r2
 8004680:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0308 	and.w	r3, r3, #8
 800468a:	2b00      	cmp	r3, #0
 800468c:	d009      	beq.n	80046a2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800468e:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	00db      	lsls	r3, r3, #3
 800469c:	4910      	ldr	r1, [pc, #64]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 800469e:	4313      	orrs	r3, r2
 80046a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80046a2:	f000 f825 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 80046a6:	4602      	mov	r2, r0
 80046a8:	4b0d      	ldr	r3, [pc, #52]	; (80046e0 <HAL_RCC_ClockConfig+0x1b4>)
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	091b      	lsrs	r3, r3, #4
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	490c      	ldr	r1, [pc, #48]	; (80046e4 <HAL_RCC_ClockConfig+0x1b8>)
 80046b4:	5ccb      	ldrb	r3, [r1, r3]
 80046b6:	f003 031f 	and.w	r3, r3, #31
 80046ba:	fa22 f303 	lsr.w	r3, r2, r3
 80046be:	4a0a      	ldr	r2, [pc, #40]	; (80046e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80046c2:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <HAL_RCC_ClockConfig+0x1c0>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fd fc00 	bl	8001ecc <HAL_InitTick>
 80046cc:	4603      	mov	r3, r0
 80046ce:	72fb      	strb	r3, [r7, #11]

  return status;
 80046d0:	7afb      	ldrb	r3, [r7, #11]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3710      	adds	r7, #16
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	40022000 	.word	0x40022000
 80046e0:	40021000 	.word	0x40021000
 80046e4:	08009674 	.word	0x08009674
 80046e8:	20000010 	.word	0x20000010
 80046ec:	20000014 	.word	0x20000014

080046f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b089      	sub	sp, #36	; 0x24
 80046f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61fb      	str	r3, [r7, #28]
 80046fa:	2300      	movs	r3, #0
 80046fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046fe:	4b3e      	ldr	r3, [pc, #248]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 030c 	and.w	r3, r3, #12
 8004706:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004708:	4b3b      	ldr	r3, [pc, #236]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800470a:	68db      	ldr	r3, [r3, #12]
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d005      	beq.n	8004724 <HAL_RCC_GetSysClockFreq+0x34>
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	2b0c      	cmp	r3, #12
 800471c:	d121      	bne.n	8004762 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2b01      	cmp	r3, #1
 8004722:	d11e      	bne.n	8004762 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004724:	4b34      	ldr	r3, [pc, #208]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	2b00      	cmp	r3, #0
 800472e:	d107      	bne.n	8004740 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004730:	4b31      	ldr	r3, [pc, #196]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004732:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004736:	0a1b      	lsrs	r3, r3, #8
 8004738:	f003 030f 	and.w	r3, r3, #15
 800473c:	61fb      	str	r3, [r7, #28]
 800473e:	e005      	b.n	800474c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004740:	4b2d      	ldr	r3, [pc, #180]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	091b      	lsrs	r3, r3, #4
 8004746:	f003 030f 	and.w	r3, r3, #15
 800474a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800474c:	4a2b      	ldr	r2, [pc, #172]	; (80047fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800474e:	69fb      	ldr	r3, [r7, #28]
 8004750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004754:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d10d      	bne.n	8004778 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004760:	e00a      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	2b04      	cmp	r3, #4
 8004766:	d102      	bne.n	800476e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004768:	4b25      	ldr	r3, [pc, #148]	; (8004800 <HAL_RCC_GetSysClockFreq+0x110>)
 800476a:	61bb      	str	r3, [r7, #24]
 800476c:	e004      	b.n	8004778 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	2b08      	cmp	r3, #8
 8004772:	d101      	bne.n	8004778 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004774:	4b23      	ldr	r3, [pc, #140]	; (8004804 <HAL_RCC_GetSysClockFreq+0x114>)
 8004776:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	2b0c      	cmp	r3, #12
 800477c:	d134      	bne.n	80047e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800477e:	4b1e      	ldr	r3, [pc, #120]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	f003 0303 	and.w	r3, r3, #3
 8004786:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004788:	68bb      	ldr	r3, [r7, #8]
 800478a:	2b02      	cmp	r3, #2
 800478c:	d003      	beq.n	8004796 <HAL_RCC_GetSysClockFreq+0xa6>
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	2b03      	cmp	r3, #3
 8004792:	d003      	beq.n	800479c <HAL_RCC_GetSysClockFreq+0xac>
 8004794:	e005      	b.n	80047a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004796:	4b1a      	ldr	r3, [pc, #104]	; (8004800 <HAL_RCC_GetSysClockFreq+0x110>)
 8004798:	617b      	str	r3, [r7, #20]
      break;
 800479a:	e005      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800479c:	4b19      	ldr	r3, [pc, #100]	; (8004804 <HAL_RCC_GetSysClockFreq+0x114>)
 800479e:	617b      	str	r3, [r7, #20]
      break;
 80047a0:	e002      	b.n	80047a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	617b      	str	r3, [r7, #20]
      break;
 80047a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047a8:	4b13      	ldr	r3, [pc, #76]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	091b      	lsrs	r3, r3, #4
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	3301      	adds	r3, #1
 80047b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80047b6:	4b10      	ldr	r3, [pc, #64]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	0a1b      	lsrs	r3, r3, #8
 80047bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	fb02 f203 	mul.w	r2, r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80047ce:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	0e5b      	lsrs	r3, r3, #25
 80047d4:	f003 0303 	and.w	r3, r3, #3
 80047d8:	3301      	adds	r3, #1
 80047da:	005b      	lsls	r3, r3, #1
 80047dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047e8:	69bb      	ldr	r3, [r7, #24]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3724      	adds	r7, #36	; 0x24
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40021000 	.word	0x40021000
 80047fc:	0800968c 	.word	0x0800968c
 8004800:	00f42400 	.word	0x00f42400
 8004804:	007a1200 	.word	0x007a1200

08004808 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800480c:	4b03      	ldr	r3, [pc, #12]	; (800481c <HAL_RCC_GetHCLKFreq+0x14>)
 800480e:	681b      	ldr	r3, [r3, #0]
}
 8004810:	4618      	mov	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	20000010 	.word	0x20000010

08004820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004824:	f7ff fff0 	bl	8004808 <HAL_RCC_GetHCLKFreq>
 8004828:	4602      	mov	r2, r0
 800482a:	4b06      	ldr	r3, [pc, #24]	; (8004844 <HAL_RCC_GetPCLK1Freq+0x24>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	0a1b      	lsrs	r3, r3, #8
 8004830:	f003 0307 	and.w	r3, r3, #7
 8004834:	4904      	ldr	r1, [pc, #16]	; (8004848 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004836:	5ccb      	ldrb	r3, [r1, r3]
 8004838:	f003 031f 	and.w	r3, r3, #31
 800483c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004840:	4618      	mov	r0, r3
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40021000 	.word	0x40021000
 8004848:	08009684 	.word	0x08009684

0800484c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004850:	f7ff ffda 	bl	8004808 <HAL_RCC_GetHCLKFreq>
 8004854:	4602      	mov	r2, r0
 8004856:	4b06      	ldr	r3, [pc, #24]	; (8004870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	0adb      	lsrs	r3, r3, #11
 800485c:	f003 0307 	and.w	r3, r3, #7
 8004860:	4904      	ldr	r1, [pc, #16]	; (8004874 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004862:	5ccb      	ldrb	r3, [r1, r3]
 8004864:	f003 031f 	and.w	r3, r3, #31
 8004868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800486c:	4618      	mov	r0, r3
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40021000 	.word	0x40021000
 8004874:	08009684 	.word	0x08009684

08004878 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b086      	sub	sp, #24
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004880:	2300      	movs	r3, #0
 8004882:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004884:	4b2a      	ldr	r3, [pc, #168]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004888:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004890:	f7ff fa02 	bl	8003c98 <HAL_PWREx_GetVoltageRange>
 8004894:	6178      	str	r0, [r7, #20]
 8004896:	e014      	b.n	80048c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004898:	4b25      	ldr	r3, [pc, #148]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800489a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800489c:	4a24      	ldr	r2, [pc, #144]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800489e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048a2:	6593      	str	r3, [r2, #88]	; 0x58
 80048a4:	4b22      	ldr	r3, [pc, #136]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ac:	60fb      	str	r3, [r7, #12]
 80048ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048b0:	f7ff f9f2 	bl	8003c98 <HAL_PWREx_GetVoltageRange>
 80048b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048b6:	4b1e      	ldr	r3, [pc, #120]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048ba:	4a1d      	ldr	r2, [pc, #116]	; (8004930 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048c0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048c2:	697b      	ldr	r3, [r7, #20]
 80048c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048c8:	d10b      	bne.n	80048e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2b80      	cmp	r3, #128	; 0x80
 80048ce:	d919      	bls.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2ba0      	cmp	r3, #160	; 0xa0
 80048d4:	d902      	bls.n	80048dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048d6:	2302      	movs	r3, #2
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	e013      	b.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048dc:	2301      	movs	r3, #1
 80048de:	613b      	str	r3, [r7, #16]
 80048e0:	e010      	b.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2b80      	cmp	r3, #128	; 0x80
 80048e6:	d902      	bls.n	80048ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80048e8:	2303      	movs	r3, #3
 80048ea:	613b      	str	r3, [r7, #16]
 80048ec:	e00a      	b.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b80      	cmp	r3, #128	; 0x80
 80048f2:	d102      	bne.n	80048fa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048f4:	2302      	movs	r3, #2
 80048f6:	613b      	str	r3, [r7, #16]
 80048f8:	e004      	b.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2b70      	cmp	r3, #112	; 0x70
 80048fe:	d101      	bne.n	8004904 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004900:	2301      	movs	r3, #1
 8004902:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004904:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f023 0207 	bic.w	r2, r3, #7
 800490c:	4909      	ldr	r1, [pc, #36]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	4313      	orrs	r3, r2
 8004912:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004914:	4b07      	ldr	r3, [pc, #28]	; (8004934 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f003 0307 	and.w	r3, r3, #7
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	429a      	cmp	r2, r3
 8004920:	d001      	beq.n	8004926 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3718      	adds	r7, #24
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40021000 	.word	0x40021000
 8004934:	40022000 	.word	0x40022000

08004938 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004940:	2300      	movs	r3, #0
 8004942:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004944:	2300      	movs	r3, #0
 8004946:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004950:	2b00      	cmp	r3, #0
 8004952:	d041      	beq.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004958:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800495c:	d02a      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800495e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004962:	d824      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004964:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004968:	d008      	beq.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800496a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800496e:	d81e      	bhi.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004970:	2b00      	cmp	r3, #0
 8004972:	d00a      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004974:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004978:	d010      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800497a:	e018      	b.n	80049ae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800497c:	4b86      	ldr	r3, [pc, #536]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	4a85      	ldr	r2, [pc, #532]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004986:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004988:	e015      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3304      	adds	r3, #4
 800498e:	2100      	movs	r1, #0
 8004990:	4618      	mov	r0, r3
 8004992:	f000 fabb 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004996:	4603      	mov	r3, r0
 8004998:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800499a:	e00c      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	3320      	adds	r3, #32
 80049a0:	2100      	movs	r1, #0
 80049a2:	4618      	mov	r0, r3
 80049a4:	f000 fba6 	bl	80050f4 <RCCEx_PLLSAI2_Config>
 80049a8:	4603      	mov	r3, r0
 80049aa:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049ac:	e003      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049ae:	2301      	movs	r3, #1
 80049b0:	74fb      	strb	r3, [r7, #19]
      break;
 80049b2:	e000      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049b6:	7cfb      	ldrb	r3, [r7, #19]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10b      	bne.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049bc:	4b76      	ldr	r3, [pc, #472]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049ca:	4973      	ldr	r1, [pc, #460]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049d2:	e001      	b.n	80049d8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049d4:	7cfb      	ldrb	r3, [r7, #19]
 80049d6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d041      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049e8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049ec:	d02a      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80049ee:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049f2:	d824      	bhi.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 80049f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049f8:	d008      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80049fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80049fe:	d81e      	bhi.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a08:	d010      	beq.n	8004a2c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a0a:	e018      	b.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a0c:	4b62      	ldr	r3, [pc, #392]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a0e:	68db      	ldr	r3, [r3, #12]
 8004a10:	4a61      	ldr	r2, [pc, #388]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a16:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a18:	e015      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3304      	adds	r3, #4
 8004a1e:	2100      	movs	r1, #0
 8004a20:	4618      	mov	r0, r3
 8004a22:	f000 fa73 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004a26:	4603      	mov	r3, r0
 8004a28:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a2a:	e00c      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3320      	adds	r3, #32
 8004a30:	2100      	movs	r1, #0
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fb5e 	bl	80050f4 <RCCEx_PLLSAI2_Config>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a3c:	e003      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	74fb      	strb	r3, [r7, #19]
      break;
 8004a42:	e000      	b.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004a44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a46:	7cfb      	ldrb	r3, [r7, #19]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10b      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a4c:	4b52      	ldr	r3, [pc, #328]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a52:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a5a:	494f      	ldr	r1, [pc, #316]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a62:	e001      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a64:	7cfb      	ldrb	r3, [r7, #19]
 8004a66:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 80a0 	beq.w	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a76:	2300      	movs	r3, #0
 8004a78:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004a7a:	4b47      	ldr	r3, [pc, #284]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d101      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004a86:	2301      	movs	r3, #1
 8004a88:	e000      	b.n	8004a8c <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00d      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a90:	4b41      	ldr	r3, [pc, #260]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a94:	4a40      	ldr	r2, [pc, #256]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a9a:	6593      	str	r3, [r2, #88]	; 0x58
 8004a9c:	4b3e      	ldr	r3, [pc, #248]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aa4:	60bb      	str	r3, [r7, #8]
 8004aa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004aac:	4b3b      	ldr	r3, [pc, #236]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a3a      	ldr	r2, [pc, #232]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ab8:	f7fd fa58 	bl	8001f6c <HAL_GetTick>
 8004abc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004abe:	e009      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac0:	f7fd fa54 	bl	8001f6c <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d902      	bls.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	74fb      	strb	r3, [r7, #19]
        break;
 8004ad2:	e005      	b.n	8004ae0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ad4:	4b31      	ldr	r3, [pc, #196]	; (8004b9c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0ef      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004ae0:	7cfb      	ldrb	r3, [r7, #19]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d15c      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004ae6:	4b2c      	ldr	r3, [pc, #176]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004af0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d01f      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d019      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b04:	4b24      	ldr	r3, [pc, #144]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b10:	4b21      	ldr	r3, [pc, #132]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b16:	4a20      	ldr	r2, [pc, #128]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b20:	4b1d      	ldr	r3, [pc, #116]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b26:	4a1c      	ldr	r2, [pc, #112]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b30:	4a19      	ldr	r2, [pc, #100]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d016      	beq.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b42:	f7fd fa13 	bl	8001f6c <HAL_GetTick>
 8004b46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b48:	e00b      	b.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b4a:	f7fd fa0f 	bl	8001f6c <HAL_GetTick>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d902      	bls.n	8004b62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	74fb      	strb	r3, [r7, #19]
            break;
 8004b60:	e006      	b.n	8004b70 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b62:	4b0d      	ldr	r3, [pc, #52]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d0ec      	beq.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004b70:	7cfb      	ldrb	r3, [r7, #19]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d10c      	bne.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004b76:	4b08      	ldr	r3, [pc, #32]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b86:	4904      	ldr	r1, [pc, #16]	; (8004b98 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004b8e:	e009      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004b90:	7cfb      	ldrb	r3, [r7, #19]
 8004b92:	74bb      	strb	r3, [r7, #18]
 8004b94:	e006      	b.n	8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004b96:	bf00      	nop
 8004b98:	40021000 	.word	0x40021000
 8004b9c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ba0:	7cfb      	ldrb	r3, [r7, #19]
 8004ba2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ba4:	7c7b      	ldrb	r3, [r7, #17]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d105      	bne.n	8004bb6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004baa:	4b9e      	ldr	r3, [pc, #632]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bae:	4a9d      	ldr	r2, [pc, #628]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f003 0301 	and.w	r3, r3, #1
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bc2:	4b98      	ldr	r3, [pc, #608]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bc8:	f023 0203 	bic.w	r2, r3, #3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	4994      	ldr	r1, [pc, #592]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d00a      	beq.n	8004bfa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004be4:	4b8f      	ldr	r3, [pc, #572]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bea:	f023 020c 	bic.w	r2, r3, #12
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf2:	498c      	ldr	r1, [pc, #560]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f003 0304 	and.w	r3, r3, #4
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00a      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c06:	4b87      	ldr	r3, [pc, #540]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c0c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c14:	4983      	ldr	r1, [pc, #524]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c28:	4b7e      	ldr	r3, [pc, #504]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c2e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c36:	497b      	ldr	r1, [pc, #492]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0310 	and.w	r3, r3, #16
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c4a:	4b76      	ldr	r3, [pc, #472]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c58:	4972      	ldr	r1, [pc, #456]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0320 	and.w	r3, r3, #32
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d00a      	beq.n	8004c82 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c6c:	4b6d      	ldr	r3, [pc, #436]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c7a:	496a      	ldr	r1, [pc, #424]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d00a      	beq.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c8e:	4b65      	ldr	r3, [pc, #404]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c9c:	4961      	ldr	r1, [pc, #388]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00a      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cb0:	4b5c      	ldr	r3, [pc, #368]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cbe:	4959      	ldr	r1, [pc, #356]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc0:	4313      	orrs	r3, r2
 8004cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d00a      	beq.n	8004ce8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cd2:	4b54      	ldr	r3, [pc, #336]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce0:	4950      	ldr	r1, [pc, #320]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004cf4:	4b4b      	ldr	r3, [pc, #300]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cfa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d02:	4948      	ldr	r1, [pc, #288]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00a      	beq.n	8004d2c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d16:	4b43      	ldr	r3, [pc, #268]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d24:	493f      	ldr	r1, [pc, #252]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d26:	4313      	orrs	r3, r2
 8004d28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d028      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d38:	4b3a      	ldr	r3, [pc, #232]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d46:	4937      	ldr	r1, [pc, #220]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d56:	d106      	bne.n	8004d66 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d58:	4b32      	ldr	r3, [pc, #200]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	4a31      	ldr	r2, [pc, #196]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d62:	60d3      	str	r3, [r2, #12]
 8004d64:	e011      	b.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d6e:	d10c      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	3304      	adds	r3, #4
 8004d74:	2101      	movs	r1, #1
 8004d76:	4618      	mov	r0, r3
 8004d78:	f000 f8c8 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004d80:	7cfb      	ldrb	r3, [r7, #19]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004d86:	7cfb      	ldrb	r3, [r7, #19]
 8004d88:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d028      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004d96:	4b23      	ldr	r3, [pc, #140]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d9c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da4:	491f      	ldr	r1, [pc, #124]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004db4:	d106      	bne.n	8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004db6:	4b1b      	ldr	r3, [pc, #108]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	4a1a      	ldr	r2, [pc, #104]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dbc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dc0:	60d3      	str	r3, [r2, #12]
 8004dc2:	e011      	b.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004dcc:	d10c      	bne.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	3304      	adds	r3, #4
 8004dd2:	2101      	movs	r1, #1
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	f000 f899 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004dda:	4603      	mov	r3, r0
 8004ddc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004dde:	7cfb      	ldrb	r3, [r7, #19]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d001      	beq.n	8004de8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004de4:	7cfb      	ldrb	r3, [r7, #19]
 8004de6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d02b      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004df4:	4b0b      	ldr	r3, [pc, #44]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004df6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e02:	4908      	ldr	r1, [pc, #32]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e04:	4313      	orrs	r3, r2
 8004e06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e12:	d109      	bne.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e14:	4b03      	ldr	r3, [pc, #12]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	4a02      	ldr	r2, [pc, #8]	; (8004e24 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e1e:	60d3      	str	r3, [r2, #12]
 8004e20:	e014      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e22:	bf00      	nop
 8004e24:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e30:	d10c      	bne.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	3304      	adds	r3, #4
 8004e36:	2101      	movs	r1, #1
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f000 f867 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e42:	7cfb      	ldrb	r3, [r7, #19]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d001      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004e48:	7cfb      	ldrb	r3, [r7, #19]
 8004e4a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d02f      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e58:	4b2b      	ldr	r3, [pc, #172]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e5e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e66:	4928      	ldr	r1, [pc, #160]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e76:	d10d      	bne.n	8004e94 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	2102      	movs	r1, #2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 f844 	bl	8004f0c <RCCEx_PLLSAI1_Config>
 8004e84:	4603      	mov	r3, r0
 8004e86:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e88:	7cfb      	ldrb	r3, [r7, #19]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d014      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004e8e:	7cfb      	ldrb	r3, [r7, #19]
 8004e90:	74bb      	strb	r3, [r7, #18]
 8004e92:	e011      	b.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004e9c:	d10c      	bne.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	3320      	adds	r3, #32
 8004ea2:	2102      	movs	r1, #2
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	f000 f925 	bl	80050f4 <RCCEx_PLLSAI2_Config>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eae:	7cfb      	ldrb	r3, [r7, #19]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d001      	beq.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004eb4:	7cfb      	ldrb	r3, [r7, #19]
 8004eb6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00a      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ec4:	4b10      	ldr	r3, [pc, #64]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eca:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ed2:	490d      	ldr	r1, [pc, #52]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d00b      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004ee6:	4b08      	ldr	r3, [pc, #32]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ef6:	4904      	ldr	r1, [pc, #16]	; (8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004efe:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3718      	adds	r7, #24
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	40021000 	.word	0x40021000

08004f0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b084      	sub	sp, #16
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f16:	2300      	movs	r3, #0
 8004f18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f1a:	4b75      	ldr	r3, [pc, #468]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f1c:	68db      	ldr	r3, [r3, #12]
 8004f1e:	f003 0303 	and.w	r3, r3, #3
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d018      	beq.n	8004f58 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f26:	4b72      	ldr	r3, [pc, #456]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	f003 0203 	and.w	r2, r3, #3
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d10d      	bne.n	8004f52 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
       ||
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d009      	beq.n	8004f52 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f3e:	4b6c      	ldr	r3, [pc, #432]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	091b      	lsrs	r3, r3, #4
 8004f44:	f003 0307 	and.w	r3, r3, #7
 8004f48:	1c5a      	adds	r2, r3, #1
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
       ||
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d047      	beq.n	8004fe2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	73fb      	strb	r3, [r7, #15]
 8004f56:	e044      	b.n	8004fe2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b03      	cmp	r3, #3
 8004f5e:	d018      	beq.n	8004f92 <RCCEx_PLLSAI1_Config+0x86>
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d825      	bhi.n	8004fb0 <RCCEx_PLLSAI1_Config+0xa4>
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d002      	beq.n	8004f6e <RCCEx_PLLSAI1_Config+0x62>
 8004f68:	2b02      	cmp	r3, #2
 8004f6a:	d009      	beq.n	8004f80 <RCCEx_PLLSAI1_Config+0x74>
 8004f6c:	e020      	b.n	8004fb0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f6e:	4b60      	ldr	r3, [pc, #384]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f003 0302 	and.w	r3, r3, #2
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d11d      	bne.n	8004fb6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f7e:	e01a      	b.n	8004fb6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004f80:	4b5b      	ldr	r3, [pc, #364]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d116      	bne.n	8004fba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004f90:	e013      	b.n	8004fba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004f92:	4b57      	ldr	r3, [pc, #348]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10f      	bne.n	8004fbe <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004f9e:	4b54      	ldr	r3, [pc, #336]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d109      	bne.n	8004fbe <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fae:	e006      	b.n	8004fbe <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	73fb      	strb	r3, [r7, #15]
      break;
 8004fb4:	e004      	b.n	8004fc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fb6:	bf00      	nop
 8004fb8:	e002      	b.n	8004fc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fba:	bf00      	nop
 8004fbc:	e000      	b.n	8004fc0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fbe:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d10d      	bne.n	8004fe2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004fc6:	4b4a      	ldr	r3, [pc, #296]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6819      	ldr	r1, [r3, #0]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	011b      	lsls	r3, r3, #4
 8004fda:	430b      	orrs	r3, r1
 8004fdc:	4944      	ldr	r1, [pc, #272]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d17d      	bne.n	80050e4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004fe8:	4b41      	ldr	r3, [pc, #260]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a40      	ldr	r2, [pc, #256]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ff4:	f7fc ffba 	bl	8001f6c <HAL_GetTick>
 8004ff8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ffa:	e009      	b.n	8005010 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ffc:	f7fc ffb6 	bl	8001f6c <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	2b02      	cmp	r3, #2
 8005008:	d902      	bls.n	8005010 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800500a:	2303      	movs	r3, #3
 800500c:	73fb      	strb	r3, [r7, #15]
        break;
 800500e:	e005      	b.n	800501c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005010:	4b37      	ldr	r3, [pc, #220]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005018:	2b00      	cmp	r3, #0
 800501a:	d1ef      	bne.n	8004ffc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800501c:	7bfb      	ldrb	r3, [r7, #15]
 800501e:	2b00      	cmp	r3, #0
 8005020:	d160      	bne.n	80050e4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d111      	bne.n	800504c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005028:	4b31      	ldr	r3, [pc, #196]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800502a:	691b      	ldr	r3, [r3, #16]
 800502c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005034:	687a      	ldr	r2, [r7, #4]
 8005036:	6892      	ldr	r2, [r2, #8]
 8005038:	0211      	lsls	r1, r2, #8
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	68d2      	ldr	r2, [r2, #12]
 800503e:	0912      	lsrs	r2, r2, #4
 8005040:	0452      	lsls	r2, r2, #17
 8005042:	430a      	orrs	r2, r1
 8005044:	492a      	ldr	r1, [pc, #168]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005046:	4313      	orrs	r3, r2
 8005048:	610b      	str	r3, [r1, #16]
 800504a:	e027      	b.n	800509c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	2b01      	cmp	r3, #1
 8005050:	d112      	bne.n	8005078 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005052:	4b27      	ldr	r3, [pc, #156]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800505a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6892      	ldr	r2, [r2, #8]
 8005062:	0211      	lsls	r1, r2, #8
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	6912      	ldr	r2, [r2, #16]
 8005068:	0852      	lsrs	r2, r2, #1
 800506a:	3a01      	subs	r2, #1
 800506c:	0552      	lsls	r2, r2, #21
 800506e:	430a      	orrs	r2, r1
 8005070:	491f      	ldr	r1, [pc, #124]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005072:	4313      	orrs	r3, r2
 8005074:	610b      	str	r3, [r1, #16]
 8005076:	e011      	b.n	800509c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005078:	4b1d      	ldr	r3, [pc, #116]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005080:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6892      	ldr	r2, [r2, #8]
 8005088:	0211      	lsls	r1, r2, #8
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6952      	ldr	r2, [r2, #20]
 800508e:	0852      	lsrs	r2, r2, #1
 8005090:	3a01      	subs	r2, #1
 8005092:	0652      	lsls	r2, r2, #25
 8005094:	430a      	orrs	r2, r1
 8005096:	4916      	ldr	r1, [pc, #88]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005098:	4313      	orrs	r3, r2
 800509a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800509c:	4b14      	ldr	r3, [pc, #80]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a13      	ldr	r2, [pc, #76]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a8:	f7fc ff60 	bl	8001f6c <HAL_GetTick>
 80050ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050ae:	e009      	b.n	80050c4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050b0:	f7fc ff5c 	bl	8001f6c <HAL_GetTick>
 80050b4:	4602      	mov	r2, r0
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	1ad3      	subs	r3, r2, r3
 80050ba:	2b02      	cmp	r3, #2
 80050bc:	d902      	bls.n	80050c4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80050be:	2303      	movs	r3, #3
 80050c0:	73fb      	strb	r3, [r7, #15]
          break;
 80050c2:	e005      	b.n	80050d0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050c4:	4b0a      	ldr	r3, [pc, #40]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d0ef      	beq.n	80050b0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80050d0:	7bfb      	ldrb	r3, [r7, #15]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d106      	bne.n	80050e4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80050d6:	4b06      	ldr	r3, [pc, #24]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050d8:	691a      	ldr	r2, [r3, #16]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	4904      	ldr	r1, [pc, #16]	; (80050f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80050e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40021000 	.word	0x40021000

080050f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b084      	sub	sp, #16
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
 80050fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005102:	4b6a      	ldr	r3, [pc, #424]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	f003 0303 	and.w	r3, r3, #3
 800510a:	2b00      	cmp	r3, #0
 800510c:	d018      	beq.n	8005140 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800510e:	4b67      	ldr	r3, [pc, #412]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	f003 0203 	and.w	r2, r3, #3
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	429a      	cmp	r2, r3
 800511c:	d10d      	bne.n	800513a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
       ||
 8005122:	2b00      	cmp	r3, #0
 8005124:	d009      	beq.n	800513a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005126:	4b61      	ldr	r3, [pc, #388]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005128:	68db      	ldr	r3, [r3, #12]
 800512a:	091b      	lsrs	r3, r3, #4
 800512c:	f003 0307 	and.w	r3, r3, #7
 8005130:	1c5a      	adds	r2, r3, #1
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	685b      	ldr	r3, [r3, #4]
       ||
 8005136:	429a      	cmp	r2, r3
 8005138:	d047      	beq.n	80051ca <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	73fb      	strb	r3, [r7, #15]
 800513e:	e044      	b.n	80051ca <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	2b03      	cmp	r3, #3
 8005146:	d018      	beq.n	800517a <RCCEx_PLLSAI2_Config+0x86>
 8005148:	2b03      	cmp	r3, #3
 800514a:	d825      	bhi.n	8005198 <RCCEx_PLLSAI2_Config+0xa4>
 800514c:	2b01      	cmp	r3, #1
 800514e:	d002      	beq.n	8005156 <RCCEx_PLLSAI2_Config+0x62>
 8005150:	2b02      	cmp	r3, #2
 8005152:	d009      	beq.n	8005168 <RCCEx_PLLSAI2_Config+0x74>
 8005154:	e020      	b.n	8005198 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005156:	4b55      	ldr	r3, [pc, #340]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b00      	cmp	r3, #0
 8005160:	d11d      	bne.n	800519e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005166:	e01a      	b.n	800519e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005168:	4b50      	ldr	r3, [pc, #320]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005170:	2b00      	cmp	r3, #0
 8005172:	d116      	bne.n	80051a2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005178:	e013      	b.n	80051a2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800517a:	4b4c      	ldr	r3, [pc, #304]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10f      	bne.n	80051a6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005186:	4b49      	ldr	r3, [pc, #292]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d109      	bne.n	80051a6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005196:	e006      	b.n	80051a6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	73fb      	strb	r3, [r7, #15]
      break;
 800519c:	e004      	b.n	80051a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800519e:	bf00      	nop
 80051a0:	e002      	b.n	80051a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051a2:	bf00      	nop
 80051a4:	e000      	b.n	80051a8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051a6:	bf00      	nop
    }

    if(status == HAL_OK)
 80051a8:	7bfb      	ldrb	r3, [r7, #15]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d10d      	bne.n	80051ca <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051ae:	4b3f      	ldr	r3, [pc, #252]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6819      	ldr	r1, [r3, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	3b01      	subs	r3, #1
 80051c0:	011b      	lsls	r3, r3, #4
 80051c2:	430b      	orrs	r3, r1
 80051c4:	4939      	ldr	r1, [pc, #228]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051ca:	7bfb      	ldrb	r3, [r7, #15]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d167      	bne.n	80052a0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80051d0:	4b36      	ldr	r3, [pc, #216]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4a35      	ldr	r2, [pc, #212]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80051d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051dc:	f7fc fec6 	bl	8001f6c <HAL_GetTick>
 80051e0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051e2:	e009      	b.n	80051f8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80051e4:	f7fc fec2 	bl	8001f6c <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d902      	bls.n	80051f8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	73fb      	strb	r3, [r7, #15]
        break;
 80051f6:	e005      	b.n	8005204 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80051f8:	4b2c      	ldr	r3, [pc, #176]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d1ef      	bne.n	80051e4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d14a      	bne.n	80052a0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d111      	bne.n	8005234 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005210:	4b26      	ldr	r3, [pc, #152]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005212:	695b      	ldr	r3, [r3, #20]
 8005214:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	6892      	ldr	r2, [r2, #8]
 8005220:	0211      	lsls	r1, r2, #8
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	68d2      	ldr	r2, [r2, #12]
 8005226:	0912      	lsrs	r2, r2, #4
 8005228:	0452      	lsls	r2, r2, #17
 800522a:	430a      	orrs	r2, r1
 800522c:	491f      	ldr	r1, [pc, #124]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800522e:	4313      	orrs	r3, r2
 8005230:	614b      	str	r3, [r1, #20]
 8005232:	e011      	b.n	8005258 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005234:	4b1d      	ldr	r3, [pc, #116]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005236:	695b      	ldr	r3, [r3, #20]
 8005238:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800523c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	6892      	ldr	r2, [r2, #8]
 8005244:	0211      	lsls	r1, r2, #8
 8005246:	687a      	ldr	r2, [r7, #4]
 8005248:	6912      	ldr	r2, [r2, #16]
 800524a:	0852      	lsrs	r2, r2, #1
 800524c:	3a01      	subs	r2, #1
 800524e:	0652      	lsls	r2, r2, #25
 8005250:	430a      	orrs	r2, r1
 8005252:	4916      	ldr	r1, [pc, #88]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005254:	4313      	orrs	r3, r2
 8005256:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005258:	4b14      	ldr	r3, [pc, #80]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a13      	ldr	r2, [pc, #76]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800525e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005262:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005264:	f7fc fe82 	bl	8001f6c <HAL_GetTick>
 8005268:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800526a:	e009      	b.n	8005280 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800526c:	f7fc fe7e 	bl	8001f6c <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	2b02      	cmp	r3, #2
 8005278:	d902      	bls.n	8005280 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800527a:	2303      	movs	r3, #3
 800527c:	73fb      	strb	r3, [r7, #15]
          break;
 800527e:	e005      	b.n	800528c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005280:	4b0a      	ldr	r3, [pc, #40]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0ef      	beq.n	800526c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800528c:	7bfb      	ldrb	r3, [r7, #15]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d106      	bne.n	80052a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005292:	4b06      	ldr	r3, [pc, #24]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 8005294:	695a      	ldr	r2, [r3, #20]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	4904      	ldr	r1, [pc, #16]	; (80052ac <RCCEx_PLLSAI2_Config+0x1b8>)
 800529c:	4313      	orrs	r3, r2
 800529e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a2:	4618      	mov	r0, r3
 80052a4:	3710      	adds	r7, #16
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40021000 	.word	0x40021000

080052b0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d06c      	beq.n	800539c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80052c8:	b2db      	uxtb	r3, r3
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d106      	bne.n	80052dc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f7fc fa20 	bl	800171c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2202      	movs	r2, #2
 80052e0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	22ca      	movs	r2, #202	; 0xca
 80052ea:	625a      	str	r2, [r3, #36]	; 0x24
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2253      	movs	r2, #83	; 0x53
 80052f2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f000 fa49 	bl	800578c <RTC_EnterInitMode>
 80052fa:	4603      	mov	r3, r0
 80052fc:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d14b      	bne.n	800539c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	6812      	ldr	r2, [r2, #0]
 800530e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005316:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6899      	ldr	r1, [r3, #8]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	431a      	orrs	r2, r3
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	430a      	orrs	r2, r1
 8005334:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	687a      	ldr	r2, [r7, #4]
 800533c:	68d2      	ldr	r2, [r2, #12]
 800533e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6919      	ldr	r1, [r3, #16]
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	041a      	lsls	r2, r3, #16
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	430a      	orrs	r2, r1
 8005352:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fa4d 	bl	80057f4 <RTC_ExitInitMode>
 800535a:	4603      	mov	r3, r0
 800535c:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800535e:	7bfb      	ldrb	r3, [r7, #15]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d11b      	bne.n	800539c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f022 0203 	bic.w	r2, r2, #3
 8005372:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	69da      	ldr	r2, [r3, #28]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	22ff      	movs	r2, #255	; 0xff
 8005392:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800539c:	7bfb      	ldrb	r3, [r7, #15]
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3710      	adds	r7, #16
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}

080053a6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80053a6:	b590      	push	{r4, r7, lr}
 80053a8:	b087      	sub	sp, #28
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	60f8      	str	r0, [r7, #12]
 80053ae:	60b9      	str	r1, [r7, #8]
 80053b0:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_RTC_SetTime+0x1a>
 80053bc:	2302      	movs	r3, #2
 80053be:	e08b      	b.n	80054d8 <HAL_RTC_SetTime+0x132>
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2202      	movs	r2, #2
 80053cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	22ca      	movs	r2, #202	; 0xca
 80053d6:	625a      	str	r2, [r3, #36]	; 0x24
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	2253      	movs	r2, #83	; 0x53
 80053de:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 f9d3 	bl	800578c <RTC_EnterInitMode>
 80053e6:	4603      	mov	r3, r0
 80053e8:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80053ea:	7cfb      	ldrb	r3, [r7, #19]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d163      	bne.n	80054b8 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d126      	bne.n	8005444 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d102      	bne.n	800540a <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005404:	68bb      	ldr	r3, [r7, #8]
 8005406:	2200      	movs	r2, #0
 8005408:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f000 fa2e 	bl	8005870 <RTC_ByteToBcd2>
 8005414:	4603      	mov	r3, r0
 8005416:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	785b      	ldrb	r3, [r3, #1]
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fa27 	bl	8005870 <RTC_ByteToBcd2>
 8005422:	4603      	mov	r3, r0
 8005424:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005426:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	789b      	ldrb	r3, [r3, #2]
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fa1f 	bl	8005870 <RTC_ByteToBcd2>
 8005432:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005434:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	78db      	ldrb	r3, [r3, #3]
 800543c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800543e:	4313      	orrs	r3, r2
 8005440:	617b      	str	r3, [r7, #20]
 8005442:	e018      	b.n	8005476 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800544e:	2b00      	cmp	r3, #0
 8005450:	d102      	bne.n	8005458 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	2200      	movs	r2, #0
 8005456:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	785b      	ldrb	r3, [r3, #1]
 8005462:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005464:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005466:	68ba      	ldr	r2, [r7, #8]
 8005468:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800546a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	78db      	ldrb	r3, [r3, #3]
 8005470:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005472:	4313      	orrs	r3, r2
 8005474:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681a      	ldr	r2, [r3, #0]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005480:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005484:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689a      	ldr	r2, [r3, #8]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005494:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	6899      	ldr	r1, [r3, #8]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	68da      	ldr	r2, [r3, #12]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	431a      	orrs	r2, r3
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	430a      	orrs	r2, r1
 80054ac:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80054ae:	68f8      	ldr	r0, [r7, #12]
 80054b0:	f000 f9a0 	bl	80057f4 <RTC_ExitInitMode>
 80054b4:	4603      	mov	r3, r0
 80054b6:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	22ff      	movs	r2, #255	; 0xff
 80054be:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80054c0:	7cfb      	ldrb	r3, [r7, #19]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d103      	bne.n	80054ce <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	2201      	movs	r2, #1
 80054ca:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80054d6:	7cfb      	ldrb	r3, [r7, #19]
}
 80054d8:	4618      	mov	r0, r3
 80054da:	371c      	adds	r7, #28
 80054dc:	46bd      	mov	sp, r7
 80054de:	bd90      	pop	{r4, r7, pc}

080054e0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b086      	sub	sp, #24
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	691b      	ldr	r3, [r3, #16]
 80054fc:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800550e:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005512:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	0c1b      	lsrs	r3, r3, #16
 8005518:	b2db      	uxtb	r3, r3
 800551a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800551e:	b2da      	uxtb	r2, r3
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005524:	697b      	ldr	r3, [r7, #20]
 8005526:	0a1b      	lsrs	r3, r3, #8
 8005528:	b2db      	uxtb	r3, r3
 800552a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800552e:	b2da      	uxtb	r2, r3
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	b2db      	uxtb	r3, r3
 8005538:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800553c:	b2da      	uxtb	r2, r3
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	0d9b      	lsrs	r3, r3, #22
 8005546:	b2db      	uxtb	r3, r3
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	b2da      	uxtb	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d11a      	bne.n	800558e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	4618      	mov	r0, r3
 800555e:	f000 f9a7 	bl	80058b0 <RTC_Bcd2ToByte>
 8005562:	4603      	mov	r3, r0
 8005564:	461a      	mov	r2, r3
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	785b      	ldrb	r3, [r3, #1]
 800556e:	4618      	mov	r0, r3
 8005570:	f000 f99e 	bl	80058b0 <RTC_Bcd2ToByte>
 8005574:	4603      	mov	r3, r0
 8005576:	461a      	mov	r2, r3
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	789b      	ldrb	r3, [r3, #2]
 8005580:	4618      	mov	r0, r3
 8005582:	f000 f995 	bl	80058b0 <RTC_Bcd2ToByte>
 8005586:	4603      	mov	r3, r0
 8005588:	461a      	mov	r2, r3
 800558a:	68bb      	ldr	r3, [r7, #8]
 800558c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3718      	adds	r7, #24
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}

08005598 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8005598:	b590      	push	{r4, r7, lr}
 800559a:	b087      	sub	sp, #28
 800559c:	af00      	add	r7, sp, #0
 800559e:	60f8      	str	r0, [r7, #12]
 80055a0:	60b9      	str	r1, [r7, #8]
 80055a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d101      	bne.n	80055b2 <HAL_RTC_SetDate+0x1a>
 80055ae:	2302      	movs	r3, #2
 80055b0:	e075      	b.n	800569e <HAL_RTC_SetDate+0x106>
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	2201      	movs	r2, #1
 80055b6:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2202      	movs	r2, #2
 80055be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10e      	bne.n	80055e6 <HAL_RTC_SetDate+0x4e>
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	785b      	ldrb	r3, [r3, #1]
 80055cc:	f003 0310 	and.w	r3, r3, #16
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d008      	beq.n	80055e6 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	785b      	ldrb	r3, [r3, #1]
 80055d8:	f023 0310 	bic.w	r3, r3, #16
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	330a      	adds	r3, #10
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d11c      	bne.n	8005626 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	78db      	ldrb	r3, [r3, #3]
 80055f0:	4618      	mov	r0, r3
 80055f2:	f000 f93d 	bl	8005870 <RTC_ByteToBcd2>
 80055f6:	4603      	mov	r3, r0
 80055f8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	785b      	ldrb	r3, [r3, #1]
 80055fe:	4618      	mov	r0, r3
 8005600:	f000 f936 	bl	8005870 <RTC_ByteToBcd2>
 8005604:	4603      	mov	r3, r0
 8005606:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005608:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	789b      	ldrb	r3, [r3, #2]
 800560e:	4618      	mov	r0, r3
 8005610:	f000 f92e 	bl	8005870 <RTC_ByteToBcd2>
 8005614:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005616:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	e00e      	b.n	8005644 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	78db      	ldrb	r3, [r3, #3]
 800562a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	785b      	ldrb	r3, [r3, #1]
 8005630:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005632:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005634:	68ba      	ldr	r2, [r7, #8]
 8005636:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005638:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005640:	4313      	orrs	r3, r2
 8005642:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	22ca      	movs	r2, #202	; 0xca
 800564a:	625a      	str	r2, [r3, #36]	; 0x24
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2253      	movs	r2, #83	; 0x53
 8005652:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 f899 	bl	800578c <RTC_EnterInitMode>
 800565a:	4603      	mov	r3, r0
 800565c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800565e:	7cfb      	ldrb	r3, [r7, #19]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d10c      	bne.n	800567e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800566e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005672:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 f8bd 	bl	80057f4 <RTC_ExitInitMode>
 800567a:	4603      	mov	r3, r0
 800567c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	22ff      	movs	r2, #255	; 0xff
 8005684:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8005686:	7cfb      	ldrb	r3, [r7, #19]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d103      	bne.n	8005694 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800569c:	7cfb      	ldrb	r3, [r7, #19]
}
 800569e:	4618      	mov	r0, r3
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd90      	pop	{r4, r7, pc}

080056a6 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80056a6:	b580      	push	{r7, lr}
 80056a8:	b086      	sub	sp, #24
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	60f8      	str	r0, [r7, #12]
 80056ae:	60b9      	str	r1, [r7, #8]
 80056b0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80056bc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80056c0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	0c1b      	lsrs	r3, r3, #16
 80056c6:	b2da      	uxtb	r2, r3
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	0a1b      	lsrs	r3, r3, #8
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	f003 031f 	and.w	r3, r3, #31
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	0b5b      	lsrs	r3, r3, #13
 80056ee:	b2db      	uxtb	r3, r3
 80056f0:	f003 0307 	and.w	r3, r3, #7
 80056f4:	b2da      	uxtb	r2, r3
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d11a      	bne.n	8005736 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	78db      	ldrb	r3, [r3, #3]
 8005704:	4618      	mov	r0, r3
 8005706:	f000 f8d3 	bl	80058b0 <RTC_Bcd2ToByte>
 800570a:	4603      	mov	r3, r0
 800570c:	461a      	mov	r2, r3
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	785b      	ldrb	r3, [r3, #1]
 8005716:	4618      	mov	r0, r3
 8005718:	f000 f8ca 	bl	80058b0 <RTC_Bcd2ToByte>
 800571c:	4603      	mov	r3, r0
 800571e:	461a      	mov	r2, r3
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	789b      	ldrb	r3, [r3, #2]
 8005728:	4618      	mov	r0, r3
 800572a:	f000 f8c1 	bl	80058b0 <RTC_Bcd2ToByte>
 800572e:	4603      	mov	r3, r0
 8005730:	461a      	mov	r2, r3
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}

08005740 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005756:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005758:	f7fc fc08 	bl	8001f6c <HAL_GetTick>
 800575c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800575e:	e009      	b.n	8005774 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005760:	f7fc fc04 	bl	8001f6c <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800576e:	d901      	bls.n	8005774 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e007      	b.n	8005784 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	f003 0320 	and.w	r3, r3, #32
 800577e:	2b00      	cmp	r3, #0
 8005780:	d0ee      	beq.n	8005760 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005782:	2300      	movs	r3, #0
}
 8005784:	4618      	mov	r0, r3
 8005786:	3710      	adds	r7, #16
 8005788:	46bd      	mov	sp, r7
 800578a:	bd80      	pop	{r7, pc}

0800578c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005794:	2300      	movs	r3, #0
 8005796:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	68db      	ldr	r3, [r3, #12]
 800579e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d120      	bne.n	80057e8 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f04f 32ff 	mov.w	r2, #4294967295
 80057ae:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80057b0:	f7fc fbdc 	bl	8001f6c <HAL_GetTick>
 80057b4:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80057b6:	e00d      	b.n	80057d4 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80057b8:	f7fc fbd8 	bl	8001f6c <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057c6:	d905      	bls.n	80057d4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2203      	movs	r2, #3
 80057d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d102      	bne.n	80057e8 <RTC_EnterInitMode+0x5c>
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
 80057e4:	2b03      	cmp	r3, #3
 80057e6:	d1e7      	bne.n	80057b8 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
	...

080057f4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005800:	4b1a      	ldr	r3, [pc, #104]	; (800586c <RTC_ExitInitMode+0x78>)
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	4a19      	ldr	r2, [pc, #100]	; (800586c <RTC_ExitInitMode+0x78>)
 8005806:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800580a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800580c:	4b17      	ldr	r3, [pc, #92]	; (800586c <RTC_ExitInitMode+0x78>)
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	f003 0320 	and.w	r3, r3, #32
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10c      	bne.n	8005832 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f7ff ff91 	bl	8005740 <HAL_RTC_WaitForSynchro>
 800581e:	4603      	mov	r3, r0
 8005820:	2b00      	cmp	r3, #0
 8005822:	d01e      	beq.n	8005862 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2203      	movs	r2, #3
 8005828:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800582c:	2303      	movs	r3, #3
 800582e:	73fb      	strb	r3, [r7, #15]
 8005830:	e017      	b.n	8005862 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005832:	4b0e      	ldr	r3, [pc, #56]	; (800586c <RTC_ExitInitMode+0x78>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	4a0d      	ldr	r2, [pc, #52]	; (800586c <RTC_ExitInitMode+0x78>)
 8005838:	f023 0320 	bic.w	r3, r3, #32
 800583c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f7ff ff7e 	bl	8005740 <HAL_RTC_WaitForSynchro>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d005      	beq.n	8005856 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2203      	movs	r2, #3
 800584e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005852:	2303      	movs	r3, #3
 8005854:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005856:	4b05      	ldr	r3, [pc, #20]	; (800586c <RTC_ExitInitMode+0x78>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	4a04      	ldr	r2, [pc, #16]	; (800586c <RTC_ExitInitMode+0x78>)
 800585c:	f043 0320 	orr.w	r3, r3, #32
 8005860:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005862:	7bfb      	ldrb	r3, [r7, #15]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}
 800586c:	40002800 	.word	0x40002800

08005870 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	4603      	mov	r3, r0
 8005878:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800587a:	2300      	movs	r3, #0
 800587c:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 800587e:	79fb      	ldrb	r3, [r7, #7]
 8005880:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005882:	e005      	b.n	8005890 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3301      	adds	r3, #1
 8005888:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800588a:	7afb      	ldrb	r3, [r7, #11]
 800588c:	3b0a      	subs	r3, #10
 800588e:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005890:	7afb      	ldrb	r3, [r7, #11]
 8005892:	2b09      	cmp	r3, #9
 8005894:	d8f6      	bhi.n	8005884 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	b2db      	uxtb	r3, r3
 800589a:	011b      	lsls	r3, r3, #4
 800589c:	b2da      	uxtb	r2, r3
 800589e:	7afb      	ldrb	r3, [r7, #11]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	b2db      	uxtb	r3, r3
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr

080058b0 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80058b0:	b480      	push	{r7}
 80058b2:	b085      	sub	sp, #20
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	4603      	mov	r3, r0
 80058b8:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80058ba:	79fb      	ldrb	r3, [r7, #7]
 80058bc:	091b      	lsrs	r3, r3, #4
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	461a      	mov	r2, r3
 80058c2:	0092      	lsls	r2, r2, #2
 80058c4:	4413      	add	r3, r2
 80058c6:	005b      	lsls	r3, r3, #1
 80058c8:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80058ca:	79fb      	ldrb	r3, [r7, #7]
 80058cc:	f003 030f 	and.w	r3, r3, #15
 80058d0:	b2da      	uxtb	r2, r3
 80058d2:	7bfb      	ldrb	r3, [r7, #15]
 80058d4:	4413      	add	r3, r2
 80058d6:	b2db      	uxtb	r3, r3
}
 80058d8:	4618      	mov	r0, r3
 80058da:	3714      	adds	r7, #20
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e095      	b.n	8005a22 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d108      	bne.n	8005910 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005906:	d009      	beq.n	800591c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2200      	movs	r2, #0
 800590c:	61da      	str	r2, [r3, #28]
 800590e:	e005      	b.n	800591c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005928:	b2db      	uxtb	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d106      	bne.n	800593c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	f7fb ff60 	bl	80017fc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	681a      	ldr	r2, [r3, #0]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005952:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800595c:	d902      	bls.n	8005964 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800595e:	2300      	movs	r3, #0
 8005960:	60fb      	str	r3, [r7, #12]
 8005962:	e002      	b.n	800596a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005964:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005968:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005972:	d007      	beq.n	8005984 <HAL_SPI_Init+0xa0>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	68db      	ldr	r3, [r3, #12]
 8005978:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800597c:	d002      	beq.n	8005984 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005994:	431a      	orrs	r2, r3
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	691b      	ldr	r3, [r3, #16]
 800599a:	f003 0302 	and.w	r3, r3, #2
 800599e:	431a      	orrs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	695b      	ldr	r3, [r3, #20]
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	431a      	orrs	r2, r3
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059b2:	431a      	orrs	r2, r3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	69db      	ldr	r3, [r3, #28]
 80059b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059bc:	431a      	orrs	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059c6:	ea42 0103 	orr.w	r1, r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	0c1b      	lsrs	r3, r3, #16
 80059e0:	f003 0204 	and.w	r2, r3, #4
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	f003 0310 	and.w	r3, r3, #16
 80059ec:	431a      	orrs	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f2:	f003 0308 	and.w	r3, r3, #8
 80059f6:	431a      	orrs	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a00:	ea42 0103 	orr.w	r1, r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a20:	2300      	movs	r3, #0
}
 8005a22:	4618      	mov	r0, r3
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b088      	sub	sp, #32
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	60f8      	str	r0, [r7, #12]
 8005a32:	60b9      	str	r1, [r7, #8]
 8005a34:	603b      	str	r3, [r7, #0]
 8005a36:	4613      	mov	r3, r2
 8005a38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_SPI_Transmit+0x22>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e158      	b.n	8005cfe <HAL_SPI_Transmit+0x2d4>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a54:	f7fc fa8a 	bl	8001f6c <HAL_GetTick>
 8005a58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a5a:	88fb      	ldrh	r3, [r7, #6]
 8005a5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d002      	beq.n	8005a70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a6a:	2302      	movs	r3, #2
 8005a6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a6e:	e13d      	b.n	8005cec <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d002      	beq.n	8005a7c <HAL_SPI_Transmit+0x52>
 8005a76:	88fb      	ldrh	r3, [r7, #6]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d102      	bne.n	8005a82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a80:	e134      	b.n	8005cec <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2203      	movs	r2, #3
 8005a86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	68ba      	ldr	r2, [r7, #8]
 8005a94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	88fa      	ldrh	r2, [r7, #6]
 8005a9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	88fa      	ldrh	r2, [r7, #6]
 8005aa0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005acc:	d10f      	bne.n	8005aee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005adc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005aec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005af8:	2b40      	cmp	r3, #64	; 0x40
 8005afa:	d007      	beq.n	8005b0c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b14:	d94b      	bls.n	8005bae <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d002      	beq.n	8005b24 <HAL_SPI_Transmit+0xfa>
 8005b1e:	8afb      	ldrh	r3, [r7, #22]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d13e      	bne.n	8005ba2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b28:	881a      	ldrh	r2, [r3, #0]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b34:	1c9a      	adds	r2, r3, #2
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b48:	e02b      	b.n	8005ba2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f003 0302 	and.w	r3, r3, #2
 8005b54:	2b02      	cmp	r3, #2
 8005b56:	d112      	bne.n	8005b7e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	881a      	ldrh	r2, [r3, #0]
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b68:	1c9a      	adds	r2, r3, #2
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b72:	b29b      	uxth	r3, r3
 8005b74:	3b01      	subs	r3, #1
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b7c:	e011      	b.n	8005ba2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b7e:	f7fc f9f5 	bl	8001f6c <HAL_GetTick>
 8005b82:	4602      	mov	r2, r0
 8005b84:	69bb      	ldr	r3, [r7, #24]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	683a      	ldr	r2, [r7, #0]
 8005b8a:	429a      	cmp	r2, r3
 8005b8c:	d803      	bhi.n	8005b96 <HAL_SPI_Transmit+0x16c>
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b94:	d102      	bne.n	8005b9c <HAL_SPI_Transmit+0x172>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d102      	bne.n	8005ba2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005b9c:	2303      	movs	r3, #3
 8005b9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ba0:	e0a4      	b.n	8005cec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1ce      	bne.n	8005b4a <HAL_SPI_Transmit+0x120>
 8005bac:	e07c      	b.n	8005ca8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d002      	beq.n	8005bbc <HAL_SPI_Transmit+0x192>
 8005bb6:	8afb      	ldrh	r3, [r7, #22]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d170      	bne.n	8005c9e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d912      	bls.n	8005bec <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bca:	881a      	ldrh	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd6:	1c9a      	adds	r2, r3, #2
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	3b02      	subs	r3, #2
 8005be4:	b29a      	uxth	r2, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005bea:	e058      	b.n	8005c9e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	330c      	adds	r3, #12
 8005bf6:	7812      	ldrb	r2, [r2, #0]
 8005bf8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bfe:	1c5a      	adds	r2, r3, #1
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c08:	b29b      	uxth	r3, r3
 8005c0a:	3b01      	subs	r3, #1
 8005c0c:	b29a      	uxth	r2, r3
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005c12:	e044      	b.n	8005c9e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
 8005c1e:	2b02      	cmp	r3, #2
 8005c20:	d12b      	bne.n	8005c7a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d912      	bls.n	8005c52 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c30:	881a      	ldrh	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c3c:	1c9a      	adds	r2, r3, #2
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	3b02      	subs	r3, #2
 8005c4a:	b29a      	uxth	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c50:	e025      	b.n	8005c9e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	330c      	adds	r3, #12
 8005c5c:	7812      	ldrb	r2, [r2, #0]
 8005c5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c64:	1c5a      	adds	r2, r3, #1
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	3b01      	subs	r3, #1
 8005c72:	b29a      	uxth	r2, r3
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c78:	e011      	b.n	8005c9e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c7a:	f7fc f977 	bl	8001f6c <HAL_GetTick>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	1ad3      	subs	r3, r2, r3
 8005c84:	683a      	ldr	r2, [r7, #0]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d803      	bhi.n	8005c92 <HAL_SPI_Transmit+0x268>
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c90:	d102      	bne.n	8005c98 <HAL_SPI_Transmit+0x26e>
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d102      	bne.n	8005c9e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c9c:	e026      	b.n	8005cec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1b5      	bne.n	8005c14 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ca8:	69ba      	ldr	r2, [r7, #24]
 8005caa:	6839      	ldr	r1, [r7, #0]
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 f949 	bl	8005f44 <SPI_EndRxTxTransaction>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d002      	beq.n	8005cbe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2220      	movs	r2, #32
 8005cbc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d10a      	bne.n	8005cdc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	613b      	str	r3, [r7, #16]
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68db      	ldr	r3, [r3, #12]
 8005cd0:	613b      	str	r3, [r7, #16]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	613b      	str	r3, [r7, #16]
 8005cda:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	77fb      	strb	r3, [r7, #31]
 8005ce8:	e000      	b.n	8005cec <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005cea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005cfc:	7ffb      	ldrb	r3, [r7, #31]
}
 8005cfe:	4618      	mov	r0, r3
 8005d00:	3720      	adds	r7, #32
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}
	...

08005d08 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b088      	sub	sp, #32
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	603b      	str	r3, [r7, #0]
 8005d14:	4613      	mov	r3, r2
 8005d16:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d18:	f7fc f928 	bl	8001f6c <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d20:	1a9b      	subs	r3, r3, r2
 8005d22:	683a      	ldr	r2, [r7, #0]
 8005d24:	4413      	add	r3, r2
 8005d26:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d28:	f7fc f920 	bl	8001f6c <HAL_GetTick>
 8005d2c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d2e:	4b39      	ldr	r3, [pc, #228]	; (8005e14 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	015b      	lsls	r3, r3, #5
 8005d34:	0d1b      	lsrs	r3, r3, #20
 8005d36:	69fa      	ldr	r2, [r7, #28]
 8005d38:	fb02 f303 	mul.w	r3, r2, r3
 8005d3c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d3e:	e054      	b.n	8005dea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d46:	d050      	beq.n	8005dea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d48:	f7fc f910 	bl	8001f6c <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	69fa      	ldr	r2, [r7, #28]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d902      	bls.n	8005d5e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d13d      	bne.n	8005dda <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	685a      	ldr	r2, [r3, #4]
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d6c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	685b      	ldr	r3, [r3, #4]
 8005d72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d76:	d111      	bne.n	8005d9c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d80:	d004      	beq.n	8005d8c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005d8a:	d107      	bne.n	8005d9c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d9a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005da4:	d10f      	bne.n	8005dc6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005db4:	601a      	str	r2, [r3, #0]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dc4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e017      	b.n	8005e0a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005dda:	697b      	ldr	r3, [r7, #20]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d101      	bne.n	8005de4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	4013      	ands	r3, r2
 8005df4:	68ba      	ldr	r2, [r7, #8]
 8005df6:	429a      	cmp	r2, r3
 8005df8:	bf0c      	ite	eq
 8005dfa:	2301      	moveq	r3, #1
 8005dfc:	2300      	movne	r3, #0
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	461a      	mov	r2, r3
 8005e02:	79fb      	ldrb	r3, [r7, #7]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	d19b      	bne.n	8005d40 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3720      	adds	r7, #32
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	20000010 	.word	0x20000010

08005e18 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b08a      	sub	sp, #40	; 0x28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005e26:	2300      	movs	r3, #0
 8005e28:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005e2a:	f7fc f89f 	bl	8001f6c <HAL_GetTick>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e32:	1a9b      	subs	r3, r3, r2
 8005e34:	683a      	ldr	r2, [r7, #0]
 8005e36:	4413      	add	r3, r2
 8005e38:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005e3a:	f7fc f897 	bl	8001f6c <HAL_GetTick>
 8005e3e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	330c      	adds	r3, #12
 8005e46:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005e48:	4b3d      	ldr	r3, [pc, #244]	; (8005f40 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005e4a:	681a      	ldr	r2, [r3, #0]
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	009b      	lsls	r3, r3, #2
 8005e50:	4413      	add	r3, r2
 8005e52:	00da      	lsls	r2, r3, #3
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	0d1b      	lsrs	r3, r3, #20
 8005e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5a:	fb02 f303 	mul.w	r3, r2, r3
 8005e5e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005e60:	e060      	b.n	8005f24 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e68:	d107      	bne.n	8005e7a <SPI_WaitFifoStateUntilTimeout+0x62>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d104      	bne.n	8005e7a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	781b      	ldrb	r3, [r3, #0]
 8005e74:	b2db      	uxtb	r3, r3
 8005e76:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005e78:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e80:	d050      	beq.n	8005f24 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e82:	f7fc f873 	bl	8001f6c <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d902      	bls.n	8005e98 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d13d      	bne.n	8005f14 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ea6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	685b      	ldr	r3, [r3, #4]
 8005eac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005eb0:	d111      	bne.n	8005ed6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005eba:	d004      	beq.n	8005ec6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	689b      	ldr	r3, [r3, #8]
 8005ec0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ec4:	d107      	bne.n	8005ed6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ed4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ede:	d10f      	bne.n	8005f00 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eee:	601a      	str	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005efe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2201      	movs	r2, #1
 8005f04:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f10:	2303      	movs	r3, #3
 8005f12:	e010      	b.n	8005f36 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f14:	69bb      	ldr	r3, [r7, #24]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d101      	bne.n	8005f1e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	3b01      	subs	r3, #1
 8005f22:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d196      	bne.n	8005e62 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3728      	adds	r7, #40	; 0x28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	20000010 	.word	0x20000010

08005f44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af02      	add	r7, sp, #8
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	f7ff ff5b 	bl	8005e18 <SPI_WaitFifoStateUntilTimeout>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d007      	beq.n	8005f78 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f6c:	f043 0220 	orr.w	r2, r3, #32
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e027      	b.n	8005fc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	9300      	str	r3, [sp, #0]
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	2180      	movs	r1, #128	; 0x80
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f7ff fec0 	bl	8005d08 <SPI_WaitFlagStateUntilTimeout>
 8005f88:	4603      	mov	r3, r0
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d007      	beq.n	8005f9e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f92:	f043 0220 	orr.w	r2, r3, #32
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005f9a:	2303      	movs	r3, #3
 8005f9c:	e014      	b.n	8005fc8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	9300      	str	r3, [sp, #0]
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f7ff ff34 	bl	8005e18 <SPI_WaitFifoStateUntilTimeout>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d007      	beq.n	8005fc6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fba:	f043 0220 	orr.w	r2, r3, #32
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e000      	b.n	8005fc8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005fc6:	2300      	movs	r3, #0
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b082      	sub	sp, #8
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d101      	bne.n	8005fe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	e049      	b.n	8006076 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d106      	bne.n	8005ffc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f7fb fd7a 	bl	8001af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2202      	movs	r2, #2
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681a      	ldr	r2, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	3304      	adds	r3, #4
 800600c:	4619      	mov	r1, r3
 800600e:	4610      	mov	r0, r2
 8006010:	f000 fb7a 	bl	8006708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2201      	movs	r2, #1
 8006040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2201      	movs	r2, #1
 8006060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006074:	2300      	movs	r3, #0
}
 8006076:	4618      	mov	r0, r3
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}

0800607e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800607e:	b580      	push	{r7, lr}
 8006080:	b082      	sub	sp, #8
 8006082:	af00      	add	r7, sp, #0
 8006084:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d101      	bne.n	8006090 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	e049      	b.n	8006124 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006096:	b2db      	uxtb	r3, r3
 8006098:	2b00      	cmp	r3, #0
 800609a:	d106      	bne.n	80060aa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80060a4:	6878      	ldr	r0, [r7, #4]
 80060a6:	f000 f841 	bl	800612c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2202      	movs	r2, #2
 80060ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	3304      	adds	r3, #4
 80060ba:	4619      	mov	r1, r3
 80060bc:	4610      	mov	r0, r2
 80060be:	f000 fb23 	bl	8006708 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2201      	movs	r2, #1
 80060c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2201      	movs	r2, #1
 80060ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006122:	2300      	movs	r3, #0
}
 8006124:	4618      	mov	r0, r3
 8006126:	3708      	adds	r7, #8
 8006128:	46bd      	mov	sp, r7
 800612a:	bd80      	pop	{r7, pc}

0800612c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b084      	sub	sp, #16
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d109      	bne.n	8006164 <HAL_TIM_PWM_Start+0x24>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b01      	cmp	r3, #1
 800615a:	bf14      	ite	ne
 800615c:	2301      	movne	r3, #1
 800615e:	2300      	moveq	r3, #0
 8006160:	b2db      	uxtb	r3, r3
 8006162:	e03c      	b.n	80061de <HAL_TIM_PWM_Start+0x9e>
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	2b04      	cmp	r3, #4
 8006168:	d109      	bne.n	800617e <HAL_TIM_PWM_Start+0x3e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006170:	b2db      	uxtb	r3, r3
 8006172:	2b01      	cmp	r3, #1
 8006174:	bf14      	ite	ne
 8006176:	2301      	movne	r3, #1
 8006178:	2300      	moveq	r3, #0
 800617a:	b2db      	uxtb	r3, r3
 800617c:	e02f      	b.n	80061de <HAL_TIM_PWM_Start+0x9e>
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	2b08      	cmp	r3, #8
 8006182:	d109      	bne.n	8006198 <HAL_TIM_PWM_Start+0x58>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800618a:	b2db      	uxtb	r3, r3
 800618c:	2b01      	cmp	r3, #1
 800618e:	bf14      	ite	ne
 8006190:	2301      	movne	r3, #1
 8006192:	2300      	moveq	r3, #0
 8006194:	b2db      	uxtb	r3, r3
 8006196:	e022      	b.n	80061de <HAL_TIM_PWM_Start+0x9e>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	2b0c      	cmp	r3, #12
 800619c:	d109      	bne.n	80061b2 <HAL_TIM_PWM_Start+0x72>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	bf14      	ite	ne
 80061aa:	2301      	movne	r3, #1
 80061ac:	2300      	moveq	r3, #0
 80061ae:	b2db      	uxtb	r3, r3
 80061b0:	e015      	b.n	80061de <HAL_TIM_PWM_Start+0x9e>
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	2b10      	cmp	r3, #16
 80061b6:	d109      	bne.n	80061cc <HAL_TIM_PWM_Start+0x8c>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80061be:	b2db      	uxtb	r3, r3
 80061c0:	2b01      	cmp	r3, #1
 80061c2:	bf14      	ite	ne
 80061c4:	2301      	movne	r3, #1
 80061c6:	2300      	moveq	r3, #0
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	e008      	b.n	80061de <HAL_TIM_PWM_Start+0x9e>
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	bf14      	ite	ne
 80061d8:	2301      	movne	r3, #1
 80061da:	2300      	moveq	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e09c      	b.n	8006320 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d104      	bne.n	80061f6 <HAL_TIM_PWM_Start+0xb6>
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061f4:	e023      	b.n	800623e <HAL_TIM_PWM_Start+0xfe>
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	2b04      	cmp	r3, #4
 80061fa:	d104      	bne.n	8006206 <HAL_TIM_PWM_Start+0xc6>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006204:	e01b      	b.n	800623e <HAL_TIM_PWM_Start+0xfe>
 8006206:	683b      	ldr	r3, [r7, #0]
 8006208:	2b08      	cmp	r3, #8
 800620a:	d104      	bne.n	8006216 <HAL_TIM_PWM_Start+0xd6>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006214:	e013      	b.n	800623e <HAL_TIM_PWM_Start+0xfe>
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b0c      	cmp	r3, #12
 800621a:	d104      	bne.n	8006226 <HAL_TIM_PWM_Start+0xe6>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2202      	movs	r2, #2
 8006220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006224:	e00b      	b.n	800623e <HAL_TIM_PWM_Start+0xfe>
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	2b10      	cmp	r3, #16
 800622a:	d104      	bne.n	8006236 <HAL_TIM_PWM_Start+0xf6>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2202      	movs	r2, #2
 8006230:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006234:	e003      	b.n	800623e <HAL_TIM_PWM_Start+0xfe>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2202      	movs	r2, #2
 800623a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2201      	movs	r2, #1
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fe68 	bl	8006f1c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a35      	ldr	r2, [pc, #212]	; (8006328 <HAL_TIM_PWM_Start+0x1e8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d013      	beq.n	800627e <HAL_TIM_PWM_Start+0x13e>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a34      	ldr	r2, [pc, #208]	; (800632c <HAL_TIM_PWM_Start+0x1ec>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d00e      	beq.n	800627e <HAL_TIM_PWM_Start+0x13e>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a32      	ldr	r2, [pc, #200]	; (8006330 <HAL_TIM_PWM_Start+0x1f0>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d009      	beq.n	800627e <HAL_TIM_PWM_Start+0x13e>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a31      	ldr	r2, [pc, #196]	; (8006334 <HAL_TIM_PWM_Start+0x1f4>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d004      	beq.n	800627e <HAL_TIM_PWM_Start+0x13e>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a2f      	ldr	r2, [pc, #188]	; (8006338 <HAL_TIM_PWM_Start+0x1f8>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d101      	bne.n	8006282 <HAL_TIM_PWM_Start+0x142>
 800627e:	2301      	movs	r3, #1
 8006280:	e000      	b.n	8006284 <HAL_TIM_PWM_Start+0x144>
 8006282:	2300      	movs	r3, #0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d007      	beq.n	8006298 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006296:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a22      	ldr	r2, [pc, #136]	; (8006328 <HAL_TIM_PWM_Start+0x1e8>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d01d      	beq.n	80062de <HAL_TIM_PWM_Start+0x19e>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062aa:	d018      	beq.n	80062de <HAL_TIM_PWM_Start+0x19e>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a22      	ldr	r2, [pc, #136]	; (800633c <HAL_TIM_PWM_Start+0x1fc>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d013      	beq.n	80062de <HAL_TIM_PWM_Start+0x19e>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a21      	ldr	r2, [pc, #132]	; (8006340 <HAL_TIM_PWM_Start+0x200>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d00e      	beq.n	80062de <HAL_TIM_PWM_Start+0x19e>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a1f      	ldr	r2, [pc, #124]	; (8006344 <HAL_TIM_PWM_Start+0x204>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d009      	beq.n	80062de <HAL_TIM_PWM_Start+0x19e>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a17      	ldr	r2, [pc, #92]	; (800632c <HAL_TIM_PWM_Start+0x1ec>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d004      	beq.n	80062de <HAL_TIM_PWM_Start+0x19e>
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	4a15      	ldr	r2, [pc, #84]	; (8006330 <HAL_TIM_PWM_Start+0x1f0>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d115      	bne.n	800630a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689a      	ldr	r2, [r3, #8]
 80062e4:	4b18      	ldr	r3, [pc, #96]	; (8006348 <HAL_TIM_PWM_Start+0x208>)
 80062e6:	4013      	ands	r3, r2
 80062e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2b06      	cmp	r3, #6
 80062ee:	d015      	beq.n	800631c <HAL_TIM_PWM_Start+0x1dc>
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062f6:	d011      	beq.n	800631c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f042 0201 	orr.w	r2, r2, #1
 8006306:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006308:	e008      	b.n	800631c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f042 0201 	orr.w	r2, r2, #1
 8006318:	601a      	str	r2, [r3, #0]
 800631a:	e000      	b.n	800631e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800631c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800631e:	2300      	movs	r3, #0
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	40012c00 	.word	0x40012c00
 800632c:	40013400 	.word	0x40013400
 8006330:	40014000 	.word	0x40014000
 8006334:	40014400 	.word	0x40014400
 8006338:	40014800 	.word	0x40014800
 800633c:	40000400 	.word	0x40000400
 8006340:	40000800 	.word	0x40000800
 8006344:	40000c00 	.word	0x40000c00
 8006348:	00010007 	.word	0x00010007

0800634c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b086      	sub	sp, #24
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006358:	2300      	movs	r3, #0
 800635a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006362:	2b01      	cmp	r3, #1
 8006364:	d101      	bne.n	800636a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006366:	2302      	movs	r3, #2
 8006368:	e0ff      	b.n	800656a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2201      	movs	r2, #1
 800636e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b14      	cmp	r3, #20
 8006376:	f200 80f0 	bhi.w	800655a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800637a:	a201      	add	r2, pc, #4	; (adr r2, 8006380 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800637c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006380:	080063d5 	.word	0x080063d5
 8006384:	0800655b 	.word	0x0800655b
 8006388:	0800655b 	.word	0x0800655b
 800638c:	0800655b 	.word	0x0800655b
 8006390:	08006415 	.word	0x08006415
 8006394:	0800655b 	.word	0x0800655b
 8006398:	0800655b 	.word	0x0800655b
 800639c:	0800655b 	.word	0x0800655b
 80063a0:	08006457 	.word	0x08006457
 80063a4:	0800655b 	.word	0x0800655b
 80063a8:	0800655b 	.word	0x0800655b
 80063ac:	0800655b 	.word	0x0800655b
 80063b0:	08006497 	.word	0x08006497
 80063b4:	0800655b 	.word	0x0800655b
 80063b8:	0800655b 	.word	0x0800655b
 80063bc:	0800655b 	.word	0x0800655b
 80063c0:	080064d9 	.word	0x080064d9
 80063c4:	0800655b 	.word	0x0800655b
 80063c8:	0800655b 	.word	0x0800655b
 80063cc:	0800655b 	.word	0x0800655b
 80063d0:	08006519 	.word	0x08006519
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	68b9      	ldr	r1, [r7, #8]
 80063da:	4618      	mov	r0, r3
 80063dc:	f000 fa2e 	bl	800683c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	699a      	ldr	r2, [r3, #24]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f042 0208 	orr.w	r2, r2, #8
 80063ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	699a      	ldr	r2, [r3, #24]
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f022 0204 	bic.w	r2, r2, #4
 80063fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	6999      	ldr	r1, [r3, #24]
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	691a      	ldr	r2, [r3, #16]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	430a      	orrs	r2, r1
 8006410:	619a      	str	r2, [r3, #24]
      break;
 8006412:	e0a5      	b.n	8006560 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	68b9      	ldr	r1, [r7, #8]
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fa9e 	bl	800695c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	699a      	ldr	r2, [r3, #24]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800642e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	699a      	ldr	r2, [r3, #24]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800643e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	6999      	ldr	r1, [r3, #24]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	021a      	lsls	r2, r3, #8
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	430a      	orrs	r2, r1
 8006452:	619a      	str	r2, [r3, #24]
      break;
 8006454:	e084      	b.n	8006560 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	68b9      	ldr	r1, [r7, #8]
 800645c:	4618      	mov	r0, r3
 800645e:	f000 fb07 	bl	8006a70 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	69da      	ldr	r2, [r3, #28]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f042 0208 	orr.w	r2, r2, #8
 8006470:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	69da      	ldr	r2, [r3, #28]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f022 0204 	bic.w	r2, r2, #4
 8006480:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	69d9      	ldr	r1, [r3, #28]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	691a      	ldr	r2, [r3, #16]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	430a      	orrs	r2, r1
 8006492:	61da      	str	r2, [r3, #28]
      break;
 8006494:	e064      	b.n	8006560 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68b9      	ldr	r1, [r7, #8]
 800649c:	4618      	mov	r0, r3
 800649e:	f000 fb6f 	bl	8006b80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	69da      	ldr	r2, [r3, #28]
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	69da      	ldr	r2, [r3, #28]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69d9      	ldr	r1, [r3, #28]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	691b      	ldr	r3, [r3, #16]
 80064cc:	021a      	lsls	r2, r3, #8
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	430a      	orrs	r2, r1
 80064d4:	61da      	str	r2, [r3, #28]
      break;
 80064d6:	e043      	b.n	8006560 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68b9      	ldr	r1, [r7, #8]
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 fbb8 	bl	8006c54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f042 0208 	orr.w	r2, r2, #8
 80064f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f022 0204 	bic.w	r2, r2, #4
 8006502:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800650a:	68bb      	ldr	r3, [r7, #8]
 800650c:	691a      	ldr	r2, [r3, #16]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	430a      	orrs	r2, r1
 8006514:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006516:	e023      	b.n	8006560 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	68b9      	ldr	r1, [r7, #8]
 800651e:	4618      	mov	r0, r3
 8006520:	f000 fbfc 	bl	8006d1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006532:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006542:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	691b      	ldr	r3, [r3, #16]
 800654e:	021a      	lsls	r2, r3, #8
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	430a      	orrs	r2, r1
 8006556:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006558:	e002      	b.n	8006560 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	75fb      	strb	r3, [r7, #23]
      break;
 800655e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006568:	7dfb      	ldrb	r3, [r7, #23]
}
 800656a:	4618      	mov	r0, r3
 800656c:	3718      	adds	r7, #24
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop

08006574 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
 800657c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800657e:	2300      	movs	r3, #0
 8006580:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006588:	2b01      	cmp	r3, #1
 800658a:	d101      	bne.n	8006590 <HAL_TIM_ConfigClockSource+0x1c>
 800658c:	2302      	movs	r3, #2
 800658e:	e0b6      	b.n	80066fe <HAL_TIM_ConfigClockSource+0x18a>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2201      	movs	r2, #1
 8006594:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2202      	movs	r2, #2
 800659c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80065ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80065b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80065ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065cc:	d03e      	beq.n	800664c <HAL_TIM_ConfigClockSource+0xd8>
 80065ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065d2:	f200 8087 	bhi.w	80066e4 <HAL_TIM_ConfigClockSource+0x170>
 80065d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065da:	f000 8086 	beq.w	80066ea <HAL_TIM_ConfigClockSource+0x176>
 80065de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e2:	d87f      	bhi.n	80066e4 <HAL_TIM_ConfigClockSource+0x170>
 80065e4:	2b70      	cmp	r3, #112	; 0x70
 80065e6:	d01a      	beq.n	800661e <HAL_TIM_ConfigClockSource+0xaa>
 80065e8:	2b70      	cmp	r3, #112	; 0x70
 80065ea:	d87b      	bhi.n	80066e4 <HAL_TIM_ConfigClockSource+0x170>
 80065ec:	2b60      	cmp	r3, #96	; 0x60
 80065ee:	d050      	beq.n	8006692 <HAL_TIM_ConfigClockSource+0x11e>
 80065f0:	2b60      	cmp	r3, #96	; 0x60
 80065f2:	d877      	bhi.n	80066e4 <HAL_TIM_ConfigClockSource+0x170>
 80065f4:	2b50      	cmp	r3, #80	; 0x50
 80065f6:	d03c      	beq.n	8006672 <HAL_TIM_ConfigClockSource+0xfe>
 80065f8:	2b50      	cmp	r3, #80	; 0x50
 80065fa:	d873      	bhi.n	80066e4 <HAL_TIM_ConfigClockSource+0x170>
 80065fc:	2b40      	cmp	r3, #64	; 0x40
 80065fe:	d058      	beq.n	80066b2 <HAL_TIM_ConfigClockSource+0x13e>
 8006600:	2b40      	cmp	r3, #64	; 0x40
 8006602:	d86f      	bhi.n	80066e4 <HAL_TIM_ConfigClockSource+0x170>
 8006604:	2b30      	cmp	r3, #48	; 0x30
 8006606:	d064      	beq.n	80066d2 <HAL_TIM_ConfigClockSource+0x15e>
 8006608:	2b30      	cmp	r3, #48	; 0x30
 800660a:	d86b      	bhi.n	80066e4 <HAL_TIM_ConfigClockSource+0x170>
 800660c:	2b20      	cmp	r3, #32
 800660e:	d060      	beq.n	80066d2 <HAL_TIM_ConfigClockSource+0x15e>
 8006610:	2b20      	cmp	r3, #32
 8006612:	d867      	bhi.n	80066e4 <HAL_TIM_ConfigClockSource+0x170>
 8006614:	2b00      	cmp	r3, #0
 8006616:	d05c      	beq.n	80066d2 <HAL_TIM_ConfigClockSource+0x15e>
 8006618:	2b10      	cmp	r3, #16
 800661a:	d05a      	beq.n	80066d2 <HAL_TIM_ConfigClockSource+0x15e>
 800661c:	e062      	b.n	80066e4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6818      	ldr	r0, [r3, #0]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	6899      	ldr	r1, [r3, #8]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	f000 fc55 	bl	8006edc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800663a:	68bb      	ldr	r3, [r7, #8]
 800663c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006640:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68ba      	ldr	r2, [r7, #8]
 8006648:	609a      	str	r2, [r3, #8]
      break;
 800664a:	e04f      	b.n	80066ec <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6818      	ldr	r0, [r3, #0]
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	6899      	ldr	r1, [r3, #8]
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	f000 fc3e 	bl	8006edc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	689a      	ldr	r2, [r3, #8]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800666e:	609a      	str	r2, [r3, #8]
      break;
 8006670:	e03c      	b.n	80066ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6818      	ldr	r0, [r3, #0]
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	6859      	ldr	r1, [r3, #4]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	461a      	mov	r2, r3
 8006680:	f000 fbb2 	bl	8006de8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	2150      	movs	r1, #80	; 0x50
 800668a:	4618      	mov	r0, r3
 800668c:	f000 fc0b 	bl	8006ea6 <TIM_ITRx_SetConfig>
      break;
 8006690:	e02c      	b.n	80066ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6818      	ldr	r0, [r3, #0]
 8006696:	683b      	ldr	r3, [r7, #0]
 8006698:	6859      	ldr	r1, [r3, #4]
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	461a      	mov	r2, r3
 80066a0:	f000 fbd1 	bl	8006e46 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	2160      	movs	r1, #96	; 0x60
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 fbfb 	bl	8006ea6 <TIM_ITRx_SetConfig>
      break;
 80066b0:	e01c      	b.n	80066ec <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6818      	ldr	r0, [r3, #0]
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	6859      	ldr	r1, [r3, #4]
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	68db      	ldr	r3, [r3, #12]
 80066be:	461a      	mov	r2, r3
 80066c0:	f000 fb92 	bl	8006de8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2140      	movs	r1, #64	; 0x40
 80066ca:	4618      	mov	r0, r3
 80066cc:	f000 fbeb 	bl	8006ea6 <TIM_ITRx_SetConfig>
      break;
 80066d0:	e00c      	b.n	80066ec <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4619      	mov	r1, r3
 80066dc:	4610      	mov	r0, r2
 80066de:	f000 fbe2 	bl	8006ea6 <TIM_ITRx_SetConfig>
      break;
 80066e2:	e003      	b.n	80066ec <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	73fb      	strb	r3, [r7, #15]
      break;
 80066e8:	e000      	b.n	80066ec <HAL_TIM_ConfigClockSource+0x178>
      break;
 80066ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2201      	movs	r2, #1
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066fe:	4618      	mov	r0, r3
 8006700:	3710      	adds	r7, #16
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
	...

08006708 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	4a40      	ldr	r2, [pc, #256]	; (800681c <TIM_Base_SetConfig+0x114>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d013      	beq.n	8006748 <TIM_Base_SetConfig+0x40>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006726:	d00f      	beq.n	8006748 <TIM_Base_SetConfig+0x40>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	4a3d      	ldr	r2, [pc, #244]	; (8006820 <TIM_Base_SetConfig+0x118>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d00b      	beq.n	8006748 <TIM_Base_SetConfig+0x40>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a3c      	ldr	r2, [pc, #240]	; (8006824 <TIM_Base_SetConfig+0x11c>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d007      	beq.n	8006748 <TIM_Base_SetConfig+0x40>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a3b      	ldr	r2, [pc, #236]	; (8006828 <TIM_Base_SetConfig+0x120>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d003      	beq.n	8006748 <TIM_Base_SetConfig+0x40>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a3a      	ldr	r2, [pc, #232]	; (800682c <TIM_Base_SetConfig+0x124>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d108      	bne.n	800675a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	685b      	ldr	r3, [r3, #4]
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4313      	orrs	r3, r2
 8006758:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a2f      	ldr	r2, [pc, #188]	; (800681c <TIM_Base_SetConfig+0x114>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d01f      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006768:	d01b      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a2c      	ldr	r2, [pc, #176]	; (8006820 <TIM_Base_SetConfig+0x118>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d017      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a2b      	ldr	r2, [pc, #172]	; (8006824 <TIM_Base_SetConfig+0x11c>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d013      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	4a2a      	ldr	r2, [pc, #168]	; (8006828 <TIM_Base_SetConfig+0x120>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d00f      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4a29      	ldr	r2, [pc, #164]	; (800682c <TIM_Base_SetConfig+0x124>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d00b      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	4a28      	ldr	r2, [pc, #160]	; (8006830 <TIM_Base_SetConfig+0x128>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d007      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	4a27      	ldr	r2, [pc, #156]	; (8006834 <TIM_Base_SetConfig+0x12c>)
 8006796:	4293      	cmp	r3, r2
 8006798:	d003      	beq.n	80067a2 <TIM_Base_SetConfig+0x9a>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	4a26      	ldr	r2, [pc, #152]	; (8006838 <TIM_Base_SetConfig+0x130>)
 800679e:	4293      	cmp	r3, r2
 80067a0:	d108      	bne.n	80067b4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80067aa:	683b      	ldr	r3, [r7, #0]
 80067ac:	68db      	ldr	r3, [r3, #12]
 80067ae:	68fa      	ldr	r2, [r7, #12]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	695b      	ldr	r3, [r3, #20]
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	68fa      	ldr	r2, [r7, #12]
 80067c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	689a      	ldr	r2, [r3, #8]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	4a10      	ldr	r2, [pc, #64]	; (800681c <TIM_Base_SetConfig+0x114>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d00f      	beq.n	8006800 <TIM_Base_SetConfig+0xf8>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a12      	ldr	r2, [pc, #72]	; (800682c <TIM_Base_SetConfig+0x124>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d00b      	beq.n	8006800 <TIM_Base_SetConfig+0xf8>
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	4a11      	ldr	r2, [pc, #68]	; (8006830 <TIM_Base_SetConfig+0x128>)
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d007      	beq.n	8006800 <TIM_Base_SetConfig+0xf8>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	4a10      	ldr	r2, [pc, #64]	; (8006834 <TIM_Base_SetConfig+0x12c>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d003      	beq.n	8006800 <TIM_Base_SetConfig+0xf8>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a0f      	ldr	r2, [pc, #60]	; (8006838 <TIM_Base_SetConfig+0x130>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d103      	bne.n	8006808 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	691a      	ldr	r2, [r3, #16]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	615a      	str	r2, [r3, #20]
}
 800680e:	bf00      	nop
 8006810:	3714      	adds	r7, #20
 8006812:	46bd      	mov	sp, r7
 8006814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006818:	4770      	bx	lr
 800681a:	bf00      	nop
 800681c:	40012c00 	.word	0x40012c00
 8006820:	40000400 	.word	0x40000400
 8006824:	40000800 	.word	0x40000800
 8006828:	40000c00 	.word	0x40000c00
 800682c:	40013400 	.word	0x40013400
 8006830:	40014000 	.word	0x40014000
 8006834:	40014400 	.word	0x40014400
 8006838:	40014800 	.word	0x40014800

0800683c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800683c:	b480      	push	{r7}
 800683e:	b087      	sub	sp, #28
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	f023 0201 	bic.w	r2, r3, #1
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800686a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800686e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f023 0303 	bic.w	r3, r3, #3
 8006876:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	68fa      	ldr	r2, [r7, #12]
 800687e:	4313      	orrs	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f023 0302 	bic.w	r3, r3, #2
 8006888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	689b      	ldr	r3, [r3, #8]
 800688e:	697a      	ldr	r2, [r7, #20]
 8006890:	4313      	orrs	r3, r2
 8006892:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a2c      	ldr	r2, [pc, #176]	; (8006948 <TIM_OC1_SetConfig+0x10c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d00f      	beq.n	80068bc <TIM_OC1_SetConfig+0x80>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	4a2b      	ldr	r2, [pc, #172]	; (800694c <TIM_OC1_SetConfig+0x110>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d00b      	beq.n	80068bc <TIM_OC1_SetConfig+0x80>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a2a      	ldr	r2, [pc, #168]	; (8006950 <TIM_OC1_SetConfig+0x114>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d007      	beq.n	80068bc <TIM_OC1_SetConfig+0x80>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a29      	ldr	r2, [pc, #164]	; (8006954 <TIM_OC1_SetConfig+0x118>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d003      	beq.n	80068bc <TIM_OC1_SetConfig+0x80>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a28      	ldr	r2, [pc, #160]	; (8006958 <TIM_OC1_SetConfig+0x11c>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d10c      	bne.n	80068d6 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	f023 0308 	bic.w	r3, r3, #8
 80068c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	697a      	ldr	r2, [r7, #20]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	f023 0304 	bic.w	r3, r3, #4
 80068d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a1b      	ldr	r2, [pc, #108]	; (8006948 <TIM_OC1_SetConfig+0x10c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d00f      	beq.n	80068fe <TIM_OC1_SetConfig+0xc2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a1a      	ldr	r2, [pc, #104]	; (800694c <TIM_OC1_SetConfig+0x110>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d00b      	beq.n	80068fe <TIM_OC1_SetConfig+0xc2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a19      	ldr	r2, [pc, #100]	; (8006950 <TIM_OC1_SetConfig+0x114>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d007      	beq.n	80068fe <TIM_OC1_SetConfig+0xc2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a18      	ldr	r2, [pc, #96]	; (8006954 <TIM_OC1_SetConfig+0x118>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d003      	beq.n	80068fe <TIM_OC1_SetConfig+0xc2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a17      	ldr	r2, [pc, #92]	; (8006958 <TIM_OC1_SetConfig+0x11c>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d111      	bne.n	8006922 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006904:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800690c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	695b      	ldr	r3, [r3, #20]
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	4313      	orrs	r3, r2
 8006916:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006918:	683b      	ldr	r3, [r7, #0]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	693a      	ldr	r2, [r7, #16]
 800691e:	4313      	orrs	r3, r2
 8006920:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	693a      	ldr	r2, [r7, #16]
 8006926:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68fa      	ldr	r2, [r7, #12]
 800692c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	685a      	ldr	r2, [r3, #4]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	621a      	str	r2, [r3, #32]
}
 800693c:	bf00      	nop
 800693e:	371c      	adds	r7, #28
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr
 8006948:	40012c00 	.word	0x40012c00
 800694c:	40013400 	.word	0x40013400
 8006950:	40014000 	.word	0x40014000
 8006954:	40014400 	.word	0x40014400
 8006958:	40014800 	.word	0x40014800

0800695c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6a1b      	ldr	r3, [r3, #32]
 800696a:	f023 0210 	bic.w	r2, r3, #16
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a1b      	ldr	r3, [r3, #32]
 8006976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	699b      	ldr	r3, [r3, #24]
 8006982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800698a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800698e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	021b      	lsls	r3, r3, #8
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	f023 0320 	bic.w	r3, r3, #32
 80069aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	011b      	lsls	r3, r3, #4
 80069b2:	697a      	ldr	r2, [r7, #20]
 80069b4:	4313      	orrs	r3, r2
 80069b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a28      	ldr	r2, [pc, #160]	; (8006a5c <TIM_OC2_SetConfig+0x100>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d003      	beq.n	80069c8 <TIM_OC2_SetConfig+0x6c>
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	4a27      	ldr	r2, [pc, #156]	; (8006a60 <TIM_OC2_SetConfig+0x104>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d10d      	bne.n	80069e4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80069ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	68db      	ldr	r3, [r3, #12]
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	4313      	orrs	r3, r2
 80069da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80069dc:	697b      	ldr	r3, [r7, #20]
 80069de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4a1d      	ldr	r2, [pc, #116]	; (8006a5c <TIM_OC2_SetConfig+0x100>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	d00f      	beq.n	8006a0c <TIM_OC2_SetConfig+0xb0>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a1c      	ldr	r2, [pc, #112]	; (8006a60 <TIM_OC2_SetConfig+0x104>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d00b      	beq.n	8006a0c <TIM_OC2_SetConfig+0xb0>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a1b      	ldr	r2, [pc, #108]	; (8006a64 <TIM_OC2_SetConfig+0x108>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d007      	beq.n	8006a0c <TIM_OC2_SetConfig+0xb0>
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	4a1a      	ldr	r2, [pc, #104]	; (8006a68 <TIM_OC2_SetConfig+0x10c>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d003      	beq.n	8006a0c <TIM_OC2_SetConfig+0xb0>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4a19      	ldr	r2, [pc, #100]	; (8006a6c <TIM_OC2_SetConfig+0x110>)
 8006a08:	4293      	cmp	r3, r2
 8006a0a:	d113      	bne.n	8006a34 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006a12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006a1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	695b      	ldr	r3, [r3, #20]
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	693a      	ldr	r2, [r7, #16]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	693a      	ldr	r2, [r7, #16]
 8006a38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	685a      	ldr	r2, [r3, #4]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	697a      	ldr	r2, [r7, #20]
 8006a4c:	621a      	str	r2, [r3, #32]
}
 8006a4e:	bf00      	nop
 8006a50:	371c      	adds	r7, #28
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	40012c00 	.word	0x40012c00
 8006a60:	40013400 	.word	0x40013400
 8006a64:	40014000 	.word	0x40014000
 8006a68:	40014400 	.word	0x40014400
 8006a6c:	40014800 	.word	0x40014800

08006a70 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a70:	b480      	push	{r7}
 8006a72:	b087      	sub	sp, #28
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
 8006a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a1b      	ldr	r3, [r3, #32]
 8006a7e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6a1b      	ldr	r3, [r3, #32]
 8006a8a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	685b      	ldr	r3, [r3, #4]
 8006a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	69db      	ldr	r3, [r3, #28]
 8006a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0303 	bic.w	r3, r3, #3
 8006aaa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68fa      	ldr	r2, [r7, #12]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006abc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	021b      	lsls	r3, r3, #8
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a27      	ldr	r2, [pc, #156]	; (8006b6c <TIM_OC3_SetConfig+0xfc>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d003      	beq.n	8006ada <TIM_OC3_SetConfig+0x6a>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a26      	ldr	r2, [pc, #152]	; (8006b70 <TIM_OC3_SetConfig+0x100>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d10d      	bne.n	8006af6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ae0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	021b      	lsls	r3, r3, #8
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	4313      	orrs	r3, r2
 8006aec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006af4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a1c      	ldr	r2, [pc, #112]	; (8006b6c <TIM_OC3_SetConfig+0xfc>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d00f      	beq.n	8006b1e <TIM_OC3_SetConfig+0xae>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	4a1b      	ldr	r2, [pc, #108]	; (8006b70 <TIM_OC3_SetConfig+0x100>)
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d00b      	beq.n	8006b1e <TIM_OC3_SetConfig+0xae>
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	4a1a      	ldr	r2, [pc, #104]	; (8006b74 <TIM_OC3_SetConfig+0x104>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d007      	beq.n	8006b1e <TIM_OC3_SetConfig+0xae>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	4a19      	ldr	r2, [pc, #100]	; (8006b78 <TIM_OC3_SetConfig+0x108>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d003      	beq.n	8006b1e <TIM_OC3_SetConfig+0xae>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	4a18      	ldr	r2, [pc, #96]	; (8006b7c <TIM_OC3_SetConfig+0x10c>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d113      	bne.n	8006b46 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006b24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006b2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	695b      	ldr	r3, [r3, #20]
 8006b32:	011b      	lsls	r3, r3, #4
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	699b      	ldr	r3, [r3, #24]
 8006b3e:	011b      	lsls	r3, r3, #4
 8006b40:	693a      	ldr	r2, [r7, #16]
 8006b42:	4313      	orrs	r3, r2
 8006b44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	693a      	ldr	r2, [r7, #16]
 8006b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	621a      	str	r2, [r3, #32]
}
 8006b60:	bf00      	nop
 8006b62:	371c      	adds	r7, #28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	40012c00 	.word	0x40012c00
 8006b70:	40013400 	.word	0x40013400
 8006b74:	40014000 	.word	0x40014000
 8006b78:	40014400 	.word	0x40014400
 8006b7c:	40014800 	.word	0x40014800

08006b80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b087      	sub	sp, #28
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6a1b      	ldr	r3, [r3, #32]
 8006b8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	021b      	lsls	r3, r3, #8
 8006bc2:	68fa      	ldr	r2, [r7, #12]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	031b      	lsls	r3, r3, #12
 8006bd6:	693a      	ldr	r2, [r7, #16]
 8006bd8:	4313      	orrs	r3, r2
 8006bda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	4a18      	ldr	r2, [pc, #96]	; (8006c40 <TIM_OC4_SetConfig+0xc0>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d00f      	beq.n	8006c04 <TIM_OC4_SetConfig+0x84>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	4a17      	ldr	r2, [pc, #92]	; (8006c44 <TIM_OC4_SetConfig+0xc4>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d00b      	beq.n	8006c04 <TIM_OC4_SetConfig+0x84>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	4a16      	ldr	r2, [pc, #88]	; (8006c48 <TIM_OC4_SetConfig+0xc8>)
 8006bf0:	4293      	cmp	r3, r2
 8006bf2:	d007      	beq.n	8006c04 <TIM_OC4_SetConfig+0x84>
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	4a15      	ldr	r2, [pc, #84]	; (8006c4c <TIM_OC4_SetConfig+0xcc>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d003      	beq.n	8006c04 <TIM_OC4_SetConfig+0x84>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	4a14      	ldr	r2, [pc, #80]	; (8006c50 <TIM_OC4_SetConfig+0xd0>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d109      	bne.n	8006c18 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	695b      	ldr	r3, [r3, #20]
 8006c10:	019b      	lsls	r3, r3, #6
 8006c12:	697a      	ldr	r2, [r7, #20]
 8006c14:	4313      	orrs	r3, r2
 8006c16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	697a      	ldr	r2, [r7, #20]
 8006c1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	685a      	ldr	r2, [r3, #4]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	621a      	str	r2, [r3, #32]
}
 8006c32:	bf00      	nop
 8006c34:	371c      	adds	r7, #28
 8006c36:	46bd      	mov	sp, r7
 8006c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	40012c00 	.word	0x40012c00
 8006c44:	40013400 	.word	0x40013400
 8006c48:	40014000 	.word	0x40014000
 8006c4c:	40014400 	.word	0x40014400
 8006c50:	40014800 	.word	0x40014800

08006c54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006c54:	b480      	push	{r7}
 8006c56:	b087      	sub	sp, #28
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
 8006c62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	689b      	ldr	r3, [r3, #8]
 8006c9e:	041b      	lsls	r3, r3, #16
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	4a17      	ldr	r2, [pc, #92]	; (8006d08 <TIM_OC5_SetConfig+0xb4>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d00f      	beq.n	8006cce <TIM_OC5_SetConfig+0x7a>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	4a16      	ldr	r2, [pc, #88]	; (8006d0c <TIM_OC5_SetConfig+0xb8>)
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d00b      	beq.n	8006cce <TIM_OC5_SetConfig+0x7a>
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	4a15      	ldr	r2, [pc, #84]	; (8006d10 <TIM_OC5_SetConfig+0xbc>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d007      	beq.n	8006cce <TIM_OC5_SetConfig+0x7a>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	4a14      	ldr	r2, [pc, #80]	; (8006d14 <TIM_OC5_SetConfig+0xc0>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d003      	beq.n	8006cce <TIM_OC5_SetConfig+0x7a>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	4a13      	ldr	r2, [pc, #76]	; (8006d18 <TIM_OC5_SetConfig+0xc4>)
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d109      	bne.n	8006ce2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006cd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	695b      	ldr	r3, [r3, #20]
 8006cda:	021b      	lsls	r3, r3, #8
 8006cdc:	697a      	ldr	r2, [r7, #20]
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	697a      	ldr	r2, [r7, #20]
 8006ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	68fa      	ldr	r2, [r7, #12]
 8006cec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	685a      	ldr	r2, [r3, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	621a      	str	r2, [r3, #32]
}
 8006cfc:	bf00      	nop
 8006cfe:	371c      	adds	r7, #28
 8006d00:	46bd      	mov	sp, r7
 8006d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d06:	4770      	bx	lr
 8006d08:	40012c00 	.word	0x40012c00
 8006d0c:	40013400 	.word	0x40013400
 8006d10:	40014000 	.word	0x40014000
 8006d14:	40014400 	.word	0x40014400
 8006d18:	40014800 	.word	0x40014800

08006d1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b087      	sub	sp, #28
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
 8006d24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	6a1b      	ldr	r3, [r3, #32]
 8006d2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	021b      	lsls	r3, r3, #8
 8006d56:	68fa      	ldr	r2, [r7, #12]
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	051b      	lsls	r3, r3, #20
 8006d6a:	693a      	ldr	r2, [r7, #16]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	4a18      	ldr	r2, [pc, #96]	; (8006dd4 <TIM_OC6_SetConfig+0xb8>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d00f      	beq.n	8006d98 <TIM_OC6_SetConfig+0x7c>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4a17      	ldr	r2, [pc, #92]	; (8006dd8 <TIM_OC6_SetConfig+0xbc>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d00b      	beq.n	8006d98 <TIM_OC6_SetConfig+0x7c>
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a16      	ldr	r2, [pc, #88]	; (8006ddc <TIM_OC6_SetConfig+0xc0>)
 8006d84:	4293      	cmp	r3, r2
 8006d86:	d007      	beq.n	8006d98 <TIM_OC6_SetConfig+0x7c>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	4a15      	ldr	r2, [pc, #84]	; (8006de0 <TIM_OC6_SetConfig+0xc4>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d003      	beq.n	8006d98 <TIM_OC6_SetConfig+0x7c>
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	4a14      	ldr	r2, [pc, #80]	; (8006de4 <TIM_OC6_SetConfig+0xc8>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d109      	bne.n	8006dac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006d9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	695b      	ldr	r3, [r3, #20]
 8006da4:	029b      	lsls	r3, r3, #10
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	621a      	str	r2, [r3, #32]
}
 8006dc6:	bf00      	nop
 8006dc8:	371c      	adds	r7, #28
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	40012c00 	.word	0x40012c00
 8006dd8:	40013400 	.word	0x40013400
 8006ddc:	40014000 	.word	0x40014000
 8006de0:	40014400 	.word	0x40014400
 8006de4:	40014800 	.word	0x40014800

08006de8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b087      	sub	sp, #28
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	60f8      	str	r0, [r7, #12]
 8006df0:	60b9      	str	r1, [r7, #8]
 8006df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6a1b      	ldr	r3, [r3, #32]
 8006df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	f023 0201 	bic.w	r2, r3, #1
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	011b      	lsls	r3, r3, #4
 8006e18:	693a      	ldr	r2, [r7, #16]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	f023 030a 	bic.w	r3, r3, #10
 8006e24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	693a      	ldr	r2, [r7, #16]
 8006e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	621a      	str	r2, [r3, #32]
}
 8006e3a:	bf00      	nop
 8006e3c:	371c      	adds	r7, #28
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e44:	4770      	bx	lr

08006e46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b087      	sub	sp, #28
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	60b9      	str	r1, [r7, #8]
 8006e50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	f023 0210 	bic.w	r2, r3, #16
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	699b      	ldr	r3, [r3, #24]
 8006e62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e6a:	697b      	ldr	r3, [r7, #20]
 8006e6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	031b      	lsls	r3, r3, #12
 8006e76:	697a      	ldr	r2, [r7, #20]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	011b      	lsls	r3, r3, #4
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	693a      	ldr	r2, [r7, #16]
 8006e98:	621a      	str	r2, [r3, #32]
}
 8006e9a:	bf00      	nop
 8006e9c:	371c      	adds	r7, #28
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea4:	4770      	bx	lr

08006ea6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006ea6:	b480      	push	{r7}
 8006ea8:	b085      	sub	sp, #20
 8006eaa:	af00      	add	r7, sp, #0
 8006eac:	6078      	str	r0, [r7, #4]
 8006eae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ebc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ebe:	683a      	ldr	r2, [r7, #0]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	f043 0307 	orr.w	r3, r3, #7
 8006ec8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	609a      	str	r2, [r3, #8]
}
 8006ed0:	bf00      	nop
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
 8006ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	689b      	ldr	r3, [r3, #8]
 8006eee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ef6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	021a      	lsls	r2, r3, #8
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	431a      	orrs	r2, r3
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	697a      	ldr	r2, [r7, #20]
 8006f06:	4313      	orrs	r3, r2
 8006f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	609a      	str	r2, [r3, #8]
}
 8006f10:	bf00      	nop
 8006f12:	371c      	adds	r7, #28
 8006f14:	46bd      	mov	sp, r7
 8006f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1a:	4770      	bx	lr

08006f1c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b087      	sub	sp, #28
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	f003 031f 	and.w	r3, r3, #31
 8006f2e:	2201      	movs	r2, #1
 8006f30:	fa02 f303 	lsl.w	r3, r2, r3
 8006f34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	6a1a      	ldr	r2, [r3, #32]
 8006f3a:	697b      	ldr	r3, [r7, #20]
 8006f3c:	43db      	mvns	r3, r3
 8006f3e:	401a      	ands	r2, r3
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6a1a      	ldr	r2, [r3, #32]
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f003 031f 	and.w	r3, r3, #31
 8006f4e:	6879      	ldr	r1, [r7, #4]
 8006f50:	fa01 f303 	lsl.w	r3, r1, r3
 8006f54:	431a      	orrs	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	621a      	str	r2, [r3, #32]
}
 8006f5a:	bf00      	nop
 8006f5c:	371c      	adds	r7, #28
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f64:	4770      	bx	lr
	...

08006f68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
 8006f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d101      	bne.n	8006f80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f7c:	2302      	movs	r3, #2
 8006f7e:	e068      	b.n	8007052 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2202      	movs	r2, #2
 8006f8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a2e      	ldr	r2, [pc, #184]	; (8007060 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d004      	beq.n	8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a2d      	ldr	r2, [pc, #180]	; (8007064 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d108      	bne.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006fba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fcc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68fa      	ldr	r2, [r7, #12]
 8006fde:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	4a1e      	ldr	r2, [pc, #120]	; (8007060 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d01d      	beq.n	8007026 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ff2:	d018      	beq.n	8007026 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	4a1b      	ldr	r2, [pc, #108]	; (8007068 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d013      	beq.n	8007026 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a1a      	ldr	r2, [pc, #104]	; (800706c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d00e      	beq.n	8007026 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	4a18      	ldr	r2, [pc, #96]	; (8007070 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d009      	beq.n	8007026 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	4a13      	ldr	r2, [pc, #76]	; (8007064 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007018:	4293      	cmp	r3, r2
 800701a:	d004      	beq.n	8007026 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a14      	ldr	r2, [pc, #80]	; (8007074 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d10c      	bne.n	8007040 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800702c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	68ba      	ldr	r2, [r7, #8]
 8007034:	4313      	orrs	r3, r2
 8007036:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	68ba      	ldr	r2, [r7, #8]
 800703e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3714      	adds	r7, #20
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	40012c00 	.word	0x40012c00
 8007064:	40013400 	.word	0x40013400
 8007068:	40000400 	.word	0x40000400
 800706c:	40000800 	.word	0x40000800
 8007070:	40000c00 	.word	0x40000c00
 8007074:	40014000 	.word	0x40014000

08007078 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d101      	bne.n	800708a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e040      	b.n	800710c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800708e:	2b00      	cmp	r3, #0
 8007090:	d106      	bne.n	80070a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f7fa fe42 	bl	8001d24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2224      	movs	r2, #36	; 0x24
 80070a4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f022 0201 	bic.w	r2, r2, #1
 80070b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fc8a 	bl	80079d0 <UART_SetConfig>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b01      	cmp	r3, #1
 80070c0:	d101      	bne.n	80070c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e022      	b.n	800710c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d002      	beq.n	80070d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80070ce:	6878      	ldr	r0, [r7, #4]
 80070d0:	f000 ff08 	bl	8007ee4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689a      	ldr	r2, [r3, #8]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80070f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f042 0201 	orr.w	r2, r2, #1
 8007102:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 ff8f 	bl	8008028 <UART_CheckIdleState>
 800710a:	4603      	mov	r3, r0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b08a      	sub	sp, #40	; 0x28
 8007118:	af02      	add	r7, sp, #8
 800711a:	60f8      	str	r0, [r7, #12]
 800711c:	60b9      	str	r1, [r7, #8]
 800711e:	603b      	str	r3, [r7, #0]
 8007120:	4613      	mov	r3, r2
 8007122:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007128:	2b20      	cmp	r3, #32
 800712a:	f040 8082 	bne.w	8007232 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d002      	beq.n	800713a <HAL_UART_Transmit+0x26>
 8007134:	88fb      	ldrh	r3, [r7, #6]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d101      	bne.n	800713e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e07a      	b.n	8007234 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007144:	2b01      	cmp	r3, #1
 8007146:	d101      	bne.n	800714c <HAL_UART_Transmit+0x38>
 8007148:	2302      	movs	r3, #2
 800714a:	e073      	b.n	8007234 <HAL_UART_Transmit+0x120>
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2201      	movs	r2, #1
 8007150:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	2200      	movs	r2, #0
 8007158:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2221      	movs	r2, #33	; 0x21
 8007160:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007162:	f7fa ff03 	bl	8001f6c <HAL_GetTick>
 8007166:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	88fa      	ldrh	r2, [r7, #6]
 800716c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	88fa      	ldrh	r2, [r7, #6]
 8007174:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007180:	d108      	bne.n	8007194 <HAL_UART_Transmit+0x80>
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d104      	bne.n	8007194 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800718a:	2300      	movs	r3, #0
 800718c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	61bb      	str	r3, [r7, #24]
 8007192:	e003      	b.n	800719c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007198:	2300      	movs	r3, #0
 800719a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2200      	movs	r2, #0
 80071a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80071a4:	e02d      	b.n	8007202 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	2200      	movs	r2, #0
 80071ae:	2180      	movs	r1, #128	; 0x80
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f000 ff82 	bl	80080ba <UART_WaitOnFlagUntilTimeout>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d001      	beq.n	80071c0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e039      	b.n	8007234 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d10b      	bne.n	80071de <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071c6:	69bb      	ldr	r3, [r7, #24]
 80071c8:	881a      	ldrh	r2, [r3, #0]
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071d2:	b292      	uxth	r2, r2
 80071d4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	3302      	adds	r3, #2
 80071da:	61bb      	str	r3, [r7, #24]
 80071dc:	e008      	b.n	80071f0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80071de:	69fb      	ldr	r3, [r7, #28]
 80071e0:	781a      	ldrb	r2, [r3, #0]
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	b292      	uxth	r2, r2
 80071e8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	3301      	adds	r3, #1
 80071ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80071f6:	b29b      	uxth	r3, r3
 80071f8:	3b01      	subs	r3, #1
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007208:	b29b      	uxth	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1cb      	bne.n	80071a6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	9300      	str	r3, [sp, #0]
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2200      	movs	r2, #0
 8007216:	2140      	movs	r1, #64	; 0x40
 8007218:	68f8      	ldr	r0, [r7, #12]
 800721a:	f000 ff4e 	bl	80080ba <UART_WaitOnFlagUntilTimeout>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d001      	beq.n	8007228 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e005      	b.n	8007234 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2220      	movs	r2, #32
 800722c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800722e:	2300      	movs	r3, #0
 8007230:	e000      	b.n	8007234 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8007232:	2302      	movs	r3, #2
  }
}
 8007234:	4618      	mov	r0, r3
 8007236:	3720      	adds	r7, #32
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b08a      	sub	sp, #40	; 0x28
 8007240:	af02      	add	r7, sp, #8
 8007242:	60f8      	str	r0, [r7, #12]
 8007244:	60b9      	str	r1, [r7, #8]
 8007246:	603b      	str	r3, [r7, #0]
 8007248:	4613      	mov	r3, r2
 800724a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007250:	2b20      	cmp	r3, #32
 8007252:	f040 80bf 	bne.w	80073d4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <HAL_UART_Receive+0x26>
 800725c:	88fb      	ldrh	r3, [r7, #6]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d101      	bne.n	8007266 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8007262:	2301      	movs	r3, #1
 8007264:	e0b7      	b.n	80073d6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800726c:	2b01      	cmp	r3, #1
 800726e:	d101      	bne.n	8007274 <HAL_UART_Receive+0x38>
 8007270:	2302      	movs	r3, #2
 8007272:	e0b0      	b.n	80073d6 <HAL_UART_Receive+0x19a>
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	2201      	movs	r2, #1
 8007278:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	2200      	movs	r2, #0
 8007280:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	2222      	movs	r2, #34	; 0x22
 8007288:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	2200      	movs	r2, #0
 800728e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007290:	f7fa fe6c 	bl	8001f6c <HAL_GetTick>
 8007294:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	88fa      	ldrh	r2, [r7, #6]
 800729a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	88fa      	ldrh	r2, [r7, #6]
 80072a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ae:	d10e      	bne.n	80072ce <HAL_UART_Receive+0x92>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d105      	bne.n	80072c4 <HAL_UART_Receive+0x88>
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80072be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072c2:	e02d      	b.n	8007320 <HAL_UART_Receive+0xe4>
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	22ff      	movs	r2, #255	; 0xff
 80072c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072cc:	e028      	b.n	8007320 <HAL_UART_Receive+0xe4>
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10d      	bne.n	80072f2 <HAL_UART_Receive+0xb6>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	691b      	ldr	r3, [r3, #16]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d104      	bne.n	80072e8 <HAL_UART_Receive+0xac>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	22ff      	movs	r2, #255	; 0xff
 80072e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072e6:	e01b      	b.n	8007320 <HAL_UART_Receive+0xe4>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	227f      	movs	r2, #127	; 0x7f
 80072ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80072f0:	e016      	b.n	8007320 <HAL_UART_Receive+0xe4>
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	689b      	ldr	r3, [r3, #8]
 80072f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072fa:	d10d      	bne.n	8007318 <HAL_UART_Receive+0xdc>
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	691b      	ldr	r3, [r3, #16]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d104      	bne.n	800730e <HAL_UART_Receive+0xd2>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	227f      	movs	r2, #127	; 0x7f
 8007308:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800730c:	e008      	b.n	8007320 <HAL_UART_Receive+0xe4>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	223f      	movs	r2, #63	; 0x3f
 8007312:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007316:	e003      	b.n	8007320 <HAL_UART_Receive+0xe4>
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007326:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007330:	d108      	bne.n	8007344 <HAL_UART_Receive+0x108>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	691b      	ldr	r3, [r3, #16]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d104      	bne.n	8007344 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 800733a:	2300      	movs	r3, #0
 800733c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	61bb      	str	r3, [r7, #24]
 8007342:	e003      	b.n	800734c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007348:	2300      	movs	r3, #0
 800734a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007354:	e033      	b.n	80073be <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	9300      	str	r3, [sp, #0]
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	2200      	movs	r2, #0
 800735e:	2120      	movs	r1, #32
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f000 feaa 	bl	80080ba <UART_WaitOnFlagUntilTimeout>
 8007366:	4603      	mov	r3, r0
 8007368:	2b00      	cmp	r3, #0
 800736a:	d001      	beq.n	8007370 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e032      	b.n	80073d6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d10c      	bne.n	8007390 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800737c:	b29a      	uxth	r2, r3
 800737e:	8a7b      	ldrh	r3, [r7, #18]
 8007380:	4013      	ands	r3, r2
 8007382:	b29a      	uxth	r2, r3
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007388:	69bb      	ldr	r3, [r7, #24]
 800738a:	3302      	adds	r3, #2
 800738c:	61bb      	str	r3, [r7, #24]
 800738e:	e00d      	b.n	80073ac <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007396:	b29b      	uxth	r3, r3
 8007398:	b2da      	uxtb	r2, r3
 800739a:	8a7b      	ldrh	r3, [r7, #18]
 800739c:	b2db      	uxtb	r3, r3
 800739e:	4013      	ands	r3, r2
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	3301      	adds	r3, #1
 80073aa:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	3b01      	subs	r3, #1
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1c5      	bne.n	8007356 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2220      	movs	r2, #32
 80073ce:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80073d0:	2300      	movs	r3, #0
 80073d2:	e000      	b.n	80073d6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80073d4:	2302      	movs	r3, #2
  }
}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3720      	adds	r7, #32
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}
	...

080073e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b0ba      	sub	sp, #232	; 0xe8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	69db      	ldr	r3, [r3, #28]
 80073ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007406:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800740a:	f640 030f 	movw	r3, #2063	; 0x80f
 800740e:	4013      	ands	r3, r2
 8007410:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007414:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007418:	2b00      	cmp	r3, #0
 800741a:	d115      	bne.n	8007448 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800741c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007420:	f003 0320 	and.w	r3, r3, #32
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00f      	beq.n	8007448 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800742c:	f003 0320 	and.w	r3, r3, #32
 8007430:	2b00      	cmp	r3, #0
 8007432:	d009      	beq.n	8007448 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007438:	2b00      	cmp	r3, #0
 800743a:	f000 82a6 	beq.w	800798a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	4798      	blx	r3
      }
      return;
 8007446:	e2a0      	b.n	800798a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007448:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 8117 	beq.w	8007680 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d106      	bne.n	800746c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800745e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007462:	4b85      	ldr	r3, [pc, #532]	; (8007678 <HAL_UART_IRQHandler+0x298>)
 8007464:	4013      	ands	r3, r2
 8007466:	2b00      	cmp	r3, #0
 8007468:	f000 810a 	beq.w	8007680 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800746c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	d011      	beq.n	800749c <HAL_UART_IRQHandler+0xbc>
 8007478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800747c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007480:	2b00      	cmp	r3, #0
 8007482:	d00b      	beq.n	800749c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2201      	movs	r2, #1
 800748a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007492:	f043 0201 	orr.w	r2, r3, #1
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800749c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074a0:	f003 0302 	and.w	r3, r3, #2
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d011      	beq.n	80074cc <HAL_UART_IRQHandler+0xec>
 80074a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d00b      	beq.n	80074cc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	2202      	movs	r2, #2
 80074ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074c2:	f043 0204 	orr.w	r2, r3, #4
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074d0:	f003 0304 	and.w	r3, r3, #4
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d011      	beq.n	80074fc <HAL_UART_IRQHandler+0x11c>
 80074d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00b      	beq.n	80074fc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	2204      	movs	r2, #4
 80074ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80074f2:	f043 0202 	orr.w	r2, r3, #2
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007500:	f003 0308 	and.w	r3, r3, #8
 8007504:	2b00      	cmp	r3, #0
 8007506:	d017      	beq.n	8007538 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800750c:	f003 0320 	and.w	r3, r3, #32
 8007510:	2b00      	cmp	r3, #0
 8007512:	d105      	bne.n	8007520 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007514:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007518:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800751c:	2b00      	cmp	r3, #0
 800751e:	d00b      	beq.n	8007538 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	2208      	movs	r2, #8
 8007526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800752e:	f043 0208 	orr.w	r2, r3, #8
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800753c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007540:	2b00      	cmp	r3, #0
 8007542:	d012      	beq.n	800756a <HAL_UART_IRQHandler+0x18a>
 8007544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007548:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00c      	beq.n	800756a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007558:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007560:	f043 0220 	orr.w	r2, r3, #32
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 820c 	beq.w	800798e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800757a:	f003 0320 	and.w	r3, r3, #32
 800757e:	2b00      	cmp	r3, #0
 8007580:	d00d      	beq.n	800759e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007586:	f003 0320 	and.w	r3, r3, #32
 800758a:	2b00      	cmp	r3, #0
 800758c:	d007      	beq.n	800759e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007592:	2b00      	cmp	r3, #0
 8007594:	d003      	beq.n	800759e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800759a:	6878      	ldr	r0, [r7, #4]
 800759c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80075a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075b2:	2b40      	cmp	r3, #64	; 0x40
 80075b4:	d005      	beq.n	80075c2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80075b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075ba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d04f      	beq.n	8007662 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fe3d 	bl	8008242 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	689b      	ldr	r3, [r3, #8]
 80075ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075d2:	2b40      	cmp	r3, #64	; 0x40
 80075d4:	d141      	bne.n	800765a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	3308      	adds	r3, #8
 80075dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	3308      	adds	r3, #8
 80075fe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007602:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007606:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800760e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007612:	e841 2300 	strex	r3, r2, [r1]
 8007616:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800761a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1d9      	bne.n	80075d6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007626:	2b00      	cmp	r3, #0
 8007628:	d013      	beq.n	8007652 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800762e:	4a13      	ldr	r2, [pc, #76]	; (800767c <HAL_UART_IRQHandler+0x29c>)
 8007630:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007636:	4618      	mov	r0, r3
 8007638:	f7fc f92b 	bl	8003892 <HAL_DMA_Abort_IT>
 800763c:	4603      	mov	r3, r0
 800763e:	2b00      	cmp	r3, #0
 8007640:	d017      	beq.n	8007672 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800764c:	4610      	mov	r0, r2
 800764e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007650:	e00f      	b.n	8007672 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 f9a6 	bl	80079a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007658:	e00b      	b.n	8007672 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800765a:	6878      	ldr	r0, [r7, #4]
 800765c:	f000 f9a2 	bl	80079a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007660:	e007      	b.n	8007672 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f000 f99e 	bl	80079a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	2200      	movs	r2, #0
 800766c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007670:	e18d      	b.n	800798e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007672:	bf00      	nop
    return;
 8007674:	e18b      	b.n	800798e <HAL_UART_IRQHandler+0x5ae>
 8007676:	bf00      	nop
 8007678:	04000120 	.word	0x04000120
 800767c:	08008309 	.word	0x08008309

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007684:	2b01      	cmp	r3, #1
 8007686:	f040 8146 	bne.w	8007916 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800768a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800768e:	f003 0310 	and.w	r3, r3, #16
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 813f 	beq.w	8007916 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007698:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800769c:	f003 0310 	and.w	r3, r3, #16
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 8138 	beq.w	8007916 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	2210      	movs	r2, #16
 80076ac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076b8:	2b40      	cmp	r3, #64	; 0x40
 80076ba:	f040 80b4 	bne.w	8007826 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80076ca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 815f 	beq.w	8007992 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80076da:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076de:	429a      	cmp	r2, r3
 80076e0:	f080 8157 	bcs.w	8007992 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0320 	and.w	r3, r3, #32
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	f040 8085 	bne.w	800780a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007708:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800770c:	e853 3f00 	ldrex	r3, [r3]
 8007710:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007714:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800771c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	461a      	mov	r2, r3
 8007726:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800772a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800772e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007732:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007736:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800773a:	e841 2300 	strex	r3, r2, [r1]
 800773e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007742:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1da      	bne.n	8007700 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	3308      	adds	r3, #8
 8007750:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007754:	e853 3f00 	ldrex	r3, [r3]
 8007758:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800775a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800775c:	f023 0301 	bic.w	r3, r3, #1
 8007760:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3308      	adds	r3, #8
 800776a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800776e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007772:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007774:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007776:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800777a:	e841 2300 	strex	r3, r2, [r1]
 800777e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007780:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007782:	2b00      	cmp	r3, #0
 8007784:	d1e1      	bne.n	800774a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	3308      	adds	r3, #8
 800778c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800778e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007790:	e853 3f00 	ldrex	r3, [r3]
 8007794:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007796:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007798:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800779c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	3308      	adds	r3, #8
 80077a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80077aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80077ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80077b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80077b2:	e841 2300 	strex	r3, r2, [r1]
 80077b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80077b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1e3      	bne.n	8007786 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2220      	movs	r2, #32
 80077c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2200      	movs	r2, #0
 80077c8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077d2:	e853 3f00 	ldrex	r3, [r3]
 80077d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80077d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80077da:	f023 0310 	bic.w	r3, r3, #16
 80077de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	461a      	mov	r2, r3
 80077e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80077ee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077f4:	e841 2300 	strex	r3, r2, [r1]
 80077f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d1e4      	bne.n	80077ca <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007804:	4618      	mov	r0, r3
 8007806:	f7fc f806 	bl	8003816 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007816:	b29b      	uxth	r3, r3
 8007818:	1ad3      	subs	r3, r2, r3
 800781a:	b29b      	uxth	r3, r3
 800781c:	4619      	mov	r1, r3
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f000 f8ca 	bl	80079b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007824:	e0b5      	b.n	8007992 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007832:	b29b      	uxth	r3, r3
 8007834:	1ad3      	subs	r3, r2, r3
 8007836:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007840:	b29b      	uxth	r3, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 80a7 	beq.w	8007996 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007848:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800784c:	2b00      	cmp	r3, #0
 800784e:	f000 80a2 	beq.w	8007996 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785a:	e853 3f00 	ldrex	r3, [r3]
 800785e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007862:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007866:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	461a      	mov	r2, r3
 8007870:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007874:	647b      	str	r3, [r7, #68]	; 0x44
 8007876:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007878:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800787a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800787c:	e841 2300 	strex	r3, r2, [r1]
 8007880:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007884:	2b00      	cmp	r3, #0
 8007886:	d1e4      	bne.n	8007852 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	3308      	adds	r3, #8
 800788e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007892:	e853 3f00 	ldrex	r3, [r3]
 8007896:	623b      	str	r3, [r7, #32]
   return(result);
 8007898:	6a3b      	ldr	r3, [r7, #32]
 800789a:	f023 0301 	bic.w	r3, r3, #1
 800789e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	3308      	adds	r3, #8
 80078a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80078ac:	633a      	str	r2, [r7, #48]	; 0x30
 80078ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80078b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078b4:	e841 2300 	strex	r3, r2, [r1]
 80078b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80078ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d1e3      	bne.n	8007888 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	2220      	movs	r2, #32
 80078c4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	2200      	movs	r2, #0
 80078d0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078d8:	693b      	ldr	r3, [r7, #16]
 80078da:	e853 3f00 	ldrex	r3, [r3]
 80078de:	60fb      	str	r3, [r7, #12]
   return(result);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f023 0310 	bic.w	r3, r3, #16
 80078e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	461a      	mov	r2, r3
 80078f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078f4:	61fb      	str	r3, [r7, #28]
 80078f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078f8:	69b9      	ldr	r1, [r7, #24]
 80078fa:	69fa      	ldr	r2, [r7, #28]
 80078fc:	e841 2300 	strex	r3, r2, [r1]
 8007900:	617b      	str	r3, [r7, #20]
   return(result);
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1e4      	bne.n	80078d2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007908:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800790c:	4619      	mov	r1, r3
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f000 f852 	bl	80079b8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007914:	e03f      	b.n	8007996 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800791a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00e      	beq.n	8007940 <HAL_UART_IRQHandler+0x560>
 8007922:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800792a:	2b00      	cmp	r3, #0
 800792c:	d008      	beq.n	8007940 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007936:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f000 fd25 	bl	8008388 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800793e:	e02d      	b.n	800799c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007940:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00e      	beq.n	800796a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800794c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007954:	2b00      	cmp	r3, #0
 8007956:	d008      	beq.n	800796a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800795c:	2b00      	cmp	r3, #0
 800795e:	d01c      	beq.n	800799a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	4798      	blx	r3
    }
    return;
 8007968:	e017      	b.n	800799a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800796a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800796e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007972:	2b00      	cmp	r3, #0
 8007974:	d012      	beq.n	800799c <HAL_UART_IRQHandler+0x5bc>
 8007976:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800797a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00c      	beq.n	800799c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 fcd6 	bl	8008334 <UART_EndTransmit_IT>
    return;
 8007988:	e008      	b.n	800799c <HAL_UART_IRQHandler+0x5bc>
      return;
 800798a:	bf00      	nop
 800798c:	e006      	b.n	800799c <HAL_UART_IRQHandler+0x5bc>
    return;
 800798e:	bf00      	nop
 8007990:	e004      	b.n	800799c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007992:	bf00      	nop
 8007994:	e002      	b.n	800799c <HAL_UART_IRQHandler+0x5bc>
      return;
 8007996:	bf00      	nop
 8007998:	e000      	b.n	800799c <HAL_UART_IRQHandler+0x5bc>
    return;
 800799a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800799c:	37e8      	adds	r7, #232	; 0xe8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop

080079a4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80079ac:	bf00      	nop
 80079ae:	370c      	adds	r7, #12
 80079b0:	46bd      	mov	sp, r7
 80079b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b6:	4770      	bx	lr

080079b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b083      	sub	sp, #12
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
 80079c0:	460b      	mov	r3, r1
 80079c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079d0:	b5b0      	push	{r4, r5, r7, lr}
 80079d2:	b088      	sub	sp, #32
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80079d8:	2300      	movs	r3, #0
 80079da:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	689a      	ldr	r2, [r3, #8]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	431a      	orrs	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	695b      	ldr	r3, [r3, #20]
 80079ea:	431a      	orrs	r2, r3
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	69db      	ldr	r3, [r3, #28]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	4bad      	ldr	r3, [pc, #692]	; (8007cb0 <UART_SetConfig+0x2e0>)
 80079fc:	4013      	ands	r3, r2
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	6812      	ldr	r2, [r2, #0]
 8007a02:	69f9      	ldr	r1, [r7, #28]
 8007a04:	430b      	orrs	r3, r1
 8007a06:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	68da      	ldr	r2, [r3, #12]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	699b      	ldr	r3, [r3, #24]
 8007a22:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	4aa2      	ldr	r2, [pc, #648]	; (8007cb4 <UART_SetConfig+0x2e4>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d004      	beq.n	8007a38 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6a1b      	ldr	r3, [r3, #32]
 8007a32:	69fa      	ldr	r2, [r7, #28]
 8007a34:	4313      	orrs	r3, r2
 8007a36:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	69fa      	ldr	r2, [r7, #28]
 8007a48:	430a      	orrs	r2, r1
 8007a4a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4a99      	ldr	r2, [pc, #612]	; (8007cb8 <UART_SetConfig+0x2e8>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	d121      	bne.n	8007a9a <UART_SetConfig+0xca>
 8007a56:	4b99      	ldr	r3, [pc, #612]	; (8007cbc <UART_SetConfig+0x2ec>)
 8007a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a5c:	f003 0303 	and.w	r3, r3, #3
 8007a60:	2b03      	cmp	r3, #3
 8007a62:	d817      	bhi.n	8007a94 <UART_SetConfig+0xc4>
 8007a64:	a201      	add	r2, pc, #4	; (adr r2, 8007a6c <UART_SetConfig+0x9c>)
 8007a66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6a:	bf00      	nop
 8007a6c:	08007a7d 	.word	0x08007a7d
 8007a70:	08007a89 	.word	0x08007a89
 8007a74:	08007a83 	.word	0x08007a83
 8007a78:	08007a8f 	.word	0x08007a8f
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	76fb      	strb	r3, [r7, #27]
 8007a80:	e0e7      	b.n	8007c52 <UART_SetConfig+0x282>
 8007a82:	2302      	movs	r3, #2
 8007a84:	76fb      	strb	r3, [r7, #27]
 8007a86:	e0e4      	b.n	8007c52 <UART_SetConfig+0x282>
 8007a88:	2304      	movs	r3, #4
 8007a8a:	76fb      	strb	r3, [r7, #27]
 8007a8c:	e0e1      	b.n	8007c52 <UART_SetConfig+0x282>
 8007a8e:	2308      	movs	r3, #8
 8007a90:	76fb      	strb	r3, [r7, #27]
 8007a92:	e0de      	b.n	8007c52 <UART_SetConfig+0x282>
 8007a94:	2310      	movs	r3, #16
 8007a96:	76fb      	strb	r3, [r7, #27]
 8007a98:	e0db      	b.n	8007c52 <UART_SetConfig+0x282>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a88      	ldr	r2, [pc, #544]	; (8007cc0 <UART_SetConfig+0x2f0>)
 8007aa0:	4293      	cmp	r3, r2
 8007aa2:	d132      	bne.n	8007b0a <UART_SetConfig+0x13a>
 8007aa4:	4b85      	ldr	r3, [pc, #532]	; (8007cbc <UART_SetConfig+0x2ec>)
 8007aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aaa:	f003 030c 	and.w	r3, r3, #12
 8007aae:	2b0c      	cmp	r3, #12
 8007ab0:	d828      	bhi.n	8007b04 <UART_SetConfig+0x134>
 8007ab2:	a201      	add	r2, pc, #4	; (adr r2, 8007ab8 <UART_SetConfig+0xe8>)
 8007ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ab8:	08007aed 	.word	0x08007aed
 8007abc:	08007b05 	.word	0x08007b05
 8007ac0:	08007b05 	.word	0x08007b05
 8007ac4:	08007b05 	.word	0x08007b05
 8007ac8:	08007af9 	.word	0x08007af9
 8007acc:	08007b05 	.word	0x08007b05
 8007ad0:	08007b05 	.word	0x08007b05
 8007ad4:	08007b05 	.word	0x08007b05
 8007ad8:	08007af3 	.word	0x08007af3
 8007adc:	08007b05 	.word	0x08007b05
 8007ae0:	08007b05 	.word	0x08007b05
 8007ae4:	08007b05 	.word	0x08007b05
 8007ae8:	08007aff 	.word	0x08007aff
 8007aec:	2300      	movs	r3, #0
 8007aee:	76fb      	strb	r3, [r7, #27]
 8007af0:	e0af      	b.n	8007c52 <UART_SetConfig+0x282>
 8007af2:	2302      	movs	r3, #2
 8007af4:	76fb      	strb	r3, [r7, #27]
 8007af6:	e0ac      	b.n	8007c52 <UART_SetConfig+0x282>
 8007af8:	2304      	movs	r3, #4
 8007afa:	76fb      	strb	r3, [r7, #27]
 8007afc:	e0a9      	b.n	8007c52 <UART_SetConfig+0x282>
 8007afe:	2308      	movs	r3, #8
 8007b00:	76fb      	strb	r3, [r7, #27]
 8007b02:	e0a6      	b.n	8007c52 <UART_SetConfig+0x282>
 8007b04:	2310      	movs	r3, #16
 8007b06:	76fb      	strb	r3, [r7, #27]
 8007b08:	e0a3      	b.n	8007c52 <UART_SetConfig+0x282>
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a6d      	ldr	r2, [pc, #436]	; (8007cc4 <UART_SetConfig+0x2f4>)
 8007b10:	4293      	cmp	r3, r2
 8007b12:	d120      	bne.n	8007b56 <UART_SetConfig+0x186>
 8007b14:	4b69      	ldr	r3, [pc, #420]	; (8007cbc <UART_SetConfig+0x2ec>)
 8007b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b1a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007b1e:	2b30      	cmp	r3, #48	; 0x30
 8007b20:	d013      	beq.n	8007b4a <UART_SetConfig+0x17a>
 8007b22:	2b30      	cmp	r3, #48	; 0x30
 8007b24:	d814      	bhi.n	8007b50 <UART_SetConfig+0x180>
 8007b26:	2b20      	cmp	r3, #32
 8007b28:	d009      	beq.n	8007b3e <UART_SetConfig+0x16e>
 8007b2a:	2b20      	cmp	r3, #32
 8007b2c:	d810      	bhi.n	8007b50 <UART_SetConfig+0x180>
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d002      	beq.n	8007b38 <UART_SetConfig+0x168>
 8007b32:	2b10      	cmp	r3, #16
 8007b34:	d006      	beq.n	8007b44 <UART_SetConfig+0x174>
 8007b36:	e00b      	b.n	8007b50 <UART_SetConfig+0x180>
 8007b38:	2300      	movs	r3, #0
 8007b3a:	76fb      	strb	r3, [r7, #27]
 8007b3c:	e089      	b.n	8007c52 <UART_SetConfig+0x282>
 8007b3e:	2302      	movs	r3, #2
 8007b40:	76fb      	strb	r3, [r7, #27]
 8007b42:	e086      	b.n	8007c52 <UART_SetConfig+0x282>
 8007b44:	2304      	movs	r3, #4
 8007b46:	76fb      	strb	r3, [r7, #27]
 8007b48:	e083      	b.n	8007c52 <UART_SetConfig+0x282>
 8007b4a:	2308      	movs	r3, #8
 8007b4c:	76fb      	strb	r3, [r7, #27]
 8007b4e:	e080      	b.n	8007c52 <UART_SetConfig+0x282>
 8007b50:	2310      	movs	r3, #16
 8007b52:	76fb      	strb	r3, [r7, #27]
 8007b54:	e07d      	b.n	8007c52 <UART_SetConfig+0x282>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a5b      	ldr	r2, [pc, #364]	; (8007cc8 <UART_SetConfig+0x2f8>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d120      	bne.n	8007ba2 <UART_SetConfig+0x1d2>
 8007b60:	4b56      	ldr	r3, [pc, #344]	; (8007cbc <UART_SetConfig+0x2ec>)
 8007b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b66:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b6a:	2bc0      	cmp	r3, #192	; 0xc0
 8007b6c:	d013      	beq.n	8007b96 <UART_SetConfig+0x1c6>
 8007b6e:	2bc0      	cmp	r3, #192	; 0xc0
 8007b70:	d814      	bhi.n	8007b9c <UART_SetConfig+0x1cc>
 8007b72:	2b80      	cmp	r3, #128	; 0x80
 8007b74:	d009      	beq.n	8007b8a <UART_SetConfig+0x1ba>
 8007b76:	2b80      	cmp	r3, #128	; 0x80
 8007b78:	d810      	bhi.n	8007b9c <UART_SetConfig+0x1cc>
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d002      	beq.n	8007b84 <UART_SetConfig+0x1b4>
 8007b7e:	2b40      	cmp	r3, #64	; 0x40
 8007b80:	d006      	beq.n	8007b90 <UART_SetConfig+0x1c0>
 8007b82:	e00b      	b.n	8007b9c <UART_SetConfig+0x1cc>
 8007b84:	2300      	movs	r3, #0
 8007b86:	76fb      	strb	r3, [r7, #27]
 8007b88:	e063      	b.n	8007c52 <UART_SetConfig+0x282>
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	76fb      	strb	r3, [r7, #27]
 8007b8e:	e060      	b.n	8007c52 <UART_SetConfig+0x282>
 8007b90:	2304      	movs	r3, #4
 8007b92:	76fb      	strb	r3, [r7, #27]
 8007b94:	e05d      	b.n	8007c52 <UART_SetConfig+0x282>
 8007b96:	2308      	movs	r3, #8
 8007b98:	76fb      	strb	r3, [r7, #27]
 8007b9a:	e05a      	b.n	8007c52 <UART_SetConfig+0x282>
 8007b9c:	2310      	movs	r3, #16
 8007b9e:	76fb      	strb	r3, [r7, #27]
 8007ba0:	e057      	b.n	8007c52 <UART_SetConfig+0x282>
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a49      	ldr	r2, [pc, #292]	; (8007ccc <UART_SetConfig+0x2fc>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d125      	bne.n	8007bf8 <UART_SetConfig+0x228>
 8007bac:	4b43      	ldr	r3, [pc, #268]	; (8007cbc <UART_SetConfig+0x2ec>)
 8007bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bba:	d017      	beq.n	8007bec <UART_SetConfig+0x21c>
 8007bbc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007bc0:	d817      	bhi.n	8007bf2 <UART_SetConfig+0x222>
 8007bc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bc6:	d00b      	beq.n	8007be0 <UART_SetConfig+0x210>
 8007bc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007bcc:	d811      	bhi.n	8007bf2 <UART_SetConfig+0x222>
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d003      	beq.n	8007bda <UART_SetConfig+0x20a>
 8007bd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bd6:	d006      	beq.n	8007be6 <UART_SetConfig+0x216>
 8007bd8:	e00b      	b.n	8007bf2 <UART_SetConfig+0x222>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	76fb      	strb	r3, [r7, #27]
 8007bde:	e038      	b.n	8007c52 <UART_SetConfig+0x282>
 8007be0:	2302      	movs	r3, #2
 8007be2:	76fb      	strb	r3, [r7, #27]
 8007be4:	e035      	b.n	8007c52 <UART_SetConfig+0x282>
 8007be6:	2304      	movs	r3, #4
 8007be8:	76fb      	strb	r3, [r7, #27]
 8007bea:	e032      	b.n	8007c52 <UART_SetConfig+0x282>
 8007bec:	2308      	movs	r3, #8
 8007bee:	76fb      	strb	r3, [r7, #27]
 8007bf0:	e02f      	b.n	8007c52 <UART_SetConfig+0x282>
 8007bf2:	2310      	movs	r3, #16
 8007bf4:	76fb      	strb	r3, [r7, #27]
 8007bf6:	e02c      	b.n	8007c52 <UART_SetConfig+0x282>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	4a2d      	ldr	r2, [pc, #180]	; (8007cb4 <UART_SetConfig+0x2e4>)
 8007bfe:	4293      	cmp	r3, r2
 8007c00:	d125      	bne.n	8007c4e <UART_SetConfig+0x27e>
 8007c02:	4b2e      	ldr	r3, [pc, #184]	; (8007cbc <UART_SetConfig+0x2ec>)
 8007c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007c0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c10:	d017      	beq.n	8007c42 <UART_SetConfig+0x272>
 8007c12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007c16:	d817      	bhi.n	8007c48 <UART_SetConfig+0x278>
 8007c18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c1c:	d00b      	beq.n	8007c36 <UART_SetConfig+0x266>
 8007c1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c22:	d811      	bhi.n	8007c48 <UART_SetConfig+0x278>
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d003      	beq.n	8007c30 <UART_SetConfig+0x260>
 8007c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007c2c:	d006      	beq.n	8007c3c <UART_SetConfig+0x26c>
 8007c2e:	e00b      	b.n	8007c48 <UART_SetConfig+0x278>
 8007c30:	2300      	movs	r3, #0
 8007c32:	76fb      	strb	r3, [r7, #27]
 8007c34:	e00d      	b.n	8007c52 <UART_SetConfig+0x282>
 8007c36:	2302      	movs	r3, #2
 8007c38:	76fb      	strb	r3, [r7, #27]
 8007c3a:	e00a      	b.n	8007c52 <UART_SetConfig+0x282>
 8007c3c:	2304      	movs	r3, #4
 8007c3e:	76fb      	strb	r3, [r7, #27]
 8007c40:	e007      	b.n	8007c52 <UART_SetConfig+0x282>
 8007c42:	2308      	movs	r3, #8
 8007c44:	76fb      	strb	r3, [r7, #27]
 8007c46:	e004      	b.n	8007c52 <UART_SetConfig+0x282>
 8007c48:	2310      	movs	r3, #16
 8007c4a:	76fb      	strb	r3, [r7, #27]
 8007c4c:	e001      	b.n	8007c52 <UART_SetConfig+0x282>
 8007c4e:	2310      	movs	r3, #16
 8007c50:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	4a17      	ldr	r2, [pc, #92]	; (8007cb4 <UART_SetConfig+0x2e4>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	f040 8087 	bne.w	8007d6c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007c5e:	7efb      	ldrb	r3, [r7, #27]
 8007c60:	2b08      	cmp	r3, #8
 8007c62:	d837      	bhi.n	8007cd4 <UART_SetConfig+0x304>
 8007c64:	a201      	add	r2, pc, #4	; (adr r2, 8007c6c <UART_SetConfig+0x29c>)
 8007c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c6a:	bf00      	nop
 8007c6c:	08007c91 	.word	0x08007c91
 8007c70:	08007cd5 	.word	0x08007cd5
 8007c74:	08007c99 	.word	0x08007c99
 8007c78:	08007cd5 	.word	0x08007cd5
 8007c7c:	08007c9f 	.word	0x08007c9f
 8007c80:	08007cd5 	.word	0x08007cd5
 8007c84:	08007cd5 	.word	0x08007cd5
 8007c88:	08007cd5 	.word	0x08007cd5
 8007c8c:	08007ca7 	.word	0x08007ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c90:	f7fc fdc6 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 8007c94:	6178      	str	r0, [r7, #20]
        break;
 8007c96:	e022      	b.n	8007cde <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c98:	4b0d      	ldr	r3, [pc, #52]	; (8007cd0 <UART_SetConfig+0x300>)
 8007c9a:	617b      	str	r3, [r7, #20]
        break;
 8007c9c:	e01f      	b.n	8007cde <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c9e:	f7fc fd27 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8007ca2:	6178      	str	r0, [r7, #20]
        break;
 8007ca4:	e01b      	b.n	8007cde <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007caa:	617b      	str	r3, [r7, #20]
        break;
 8007cac:	e017      	b.n	8007cde <UART_SetConfig+0x30e>
 8007cae:	bf00      	nop
 8007cb0:	efff69f3 	.word	0xefff69f3
 8007cb4:	40008000 	.word	0x40008000
 8007cb8:	40013800 	.word	0x40013800
 8007cbc:	40021000 	.word	0x40021000
 8007cc0:	40004400 	.word	0x40004400
 8007cc4:	40004800 	.word	0x40004800
 8007cc8:	40004c00 	.word	0x40004c00
 8007ccc:	40005000 	.word	0x40005000
 8007cd0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	76bb      	strb	r3, [r7, #26]
        break;
 8007cdc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	f000 80f1 	beq.w	8007ec8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685a      	ldr	r2, [r3, #4]
 8007cea:	4613      	mov	r3, r2
 8007cec:	005b      	lsls	r3, r3, #1
 8007cee:	4413      	add	r3, r2
 8007cf0:	697a      	ldr	r2, [r7, #20]
 8007cf2:	429a      	cmp	r2, r3
 8007cf4:	d305      	bcc.n	8007d02 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007cfc:	697a      	ldr	r2, [r7, #20]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	d902      	bls.n	8007d08 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	76bb      	strb	r3, [r7, #26]
 8007d06:	e0df      	b.n	8007ec8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f04f 0100 	mov.w	r1, #0
 8007d10:	f04f 0200 	mov.w	r2, #0
 8007d14:	f04f 0300 	mov.w	r3, #0
 8007d18:	020b      	lsls	r3, r1, #8
 8007d1a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007d1e:	0202      	lsls	r2, r0, #8
 8007d20:	6879      	ldr	r1, [r7, #4]
 8007d22:	6849      	ldr	r1, [r1, #4]
 8007d24:	0849      	lsrs	r1, r1, #1
 8007d26:	4608      	mov	r0, r1
 8007d28:	f04f 0100 	mov.w	r1, #0
 8007d2c:	1814      	adds	r4, r2, r0
 8007d2e:	eb43 0501 	adc.w	r5, r3, r1
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	685b      	ldr	r3, [r3, #4]
 8007d36:	461a      	mov	r2, r3
 8007d38:	f04f 0300 	mov.w	r3, #0
 8007d3c:	4620      	mov	r0, r4
 8007d3e:	4629      	mov	r1, r5
 8007d40:	f7f8 fe8c 	bl	8000a5c <__aeabi_uldivmod>
 8007d44:	4602      	mov	r2, r0
 8007d46:	460b      	mov	r3, r1
 8007d48:	4613      	mov	r3, r2
 8007d4a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d52:	d308      	bcc.n	8007d66 <UART_SetConfig+0x396>
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007d5a:	d204      	bcs.n	8007d66 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	693a      	ldr	r2, [r7, #16]
 8007d62:	60da      	str	r2, [r3, #12]
 8007d64:	e0b0      	b.n	8007ec8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	76bb      	strb	r3, [r7, #26]
 8007d6a:	e0ad      	b.n	8007ec8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	69db      	ldr	r3, [r3, #28]
 8007d70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007d74:	d15b      	bne.n	8007e2e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8007d76:	7efb      	ldrb	r3, [r7, #27]
 8007d78:	2b08      	cmp	r3, #8
 8007d7a:	d828      	bhi.n	8007dce <UART_SetConfig+0x3fe>
 8007d7c:	a201      	add	r2, pc, #4	; (adr r2, 8007d84 <UART_SetConfig+0x3b4>)
 8007d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d82:	bf00      	nop
 8007d84:	08007da9 	.word	0x08007da9
 8007d88:	08007db1 	.word	0x08007db1
 8007d8c:	08007db9 	.word	0x08007db9
 8007d90:	08007dcf 	.word	0x08007dcf
 8007d94:	08007dbf 	.word	0x08007dbf
 8007d98:	08007dcf 	.word	0x08007dcf
 8007d9c:	08007dcf 	.word	0x08007dcf
 8007da0:	08007dcf 	.word	0x08007dcf
 8007da4:	08007dc7 	.word	0x08007dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007da8:	f7fc fd3a 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 8007dac:	6178      	str	r0, [r7, #20]
        break;
 8007dae:	e013      	b.n	8007dd8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007db0:	f7fc fd4c 	bl	800484c <HAL_RCC_GetPCLK2Freq>
 8007db4:	6178      	str	r0, [r7, #20]
        break;
 8007db6:	e00f      	b.n	8007dd8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007db8:	4b49      	ldr	r3, [pc, #292]	; (8007ee0 <UART_SetConfig+0x510>)
 8007dba:	617b      	str	r3, [r7, #20]
        break;
 8007dbc:	e00c      	b.n	8007dd8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dbe:	f7fc fc97 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8007dc2:	6178      	str	r0, [r7, #20]
        break;
 8007dc4:	e008      	b.n	8007dd8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dca:	617b      	str	r3, [r7, #20]
        break;
 8007dcc:	e004      	b.n	8007dd8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8007dce:	2300      	movs	r3, #0
 8007dd0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	76bb      	strb	r3, [r7, #26]
        break;
 8007dd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007dd8:	697b      	ldr	r3, [r7, #20]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d074      	beq.n	8007ec8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	005a      	lsls	r2, r3, #1
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	085b      	lsrs	r3, r3, #1
 8007de8:	441a      	add	r2, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	685b      	ldr	r3, [r3, #4]
 8007dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df2:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	2b0f      	cmp	r3, #15
 8007df8:	d916      	bls.n	8007e28 <UART_SetConfig+0x458>
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e00:	d212      	bcs.n	8007e28 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	b29b      	uxth	r3, r3
 8007e06:	f023 030f 	bic.w	r3, r3, #15
 8007e0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	085b      	lsrs	r3, r3, #1
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	f003 0307 	and.w	r3, r3, #7
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	89fb      	ldrh	r3, [r7, #14]
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	89fa      	ldrh	r2, [r7, #14]
 8007e24:	60da      	str	r2, [r3, #12]
 8007e26:	e04f      	b.n	8007ec8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	76bb      	strb	r3, [r7, #26]
 8007e2c:	e04c      	b.n	8007ec8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007e2e:	7efb      	ldrb	r3, [r7, #27]
 8007e30:	2b08      	cmp	r3, #8
 8007e32:	d828      	bhi.n	8007e86 <UART_SetConfig+0x4b6>
 8007e34:	a201      	add	r2, pc, #4	; (adr r2, 8007e3c <UART_SetConfig+0x46c>)
 8007e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e3a:	bf00      	nop
 8007e3c:	08007e61 	.word	0x08007e61
 8007e40:	08007e69 	.word	0x08007e69
 8007e44:	08007e71 	.word	0x08007e71
 8007e48:	08007e87 	.word	0x08007e87
 8007e4c:	08007e77 	.word	0x08007e77
 8007e50:	08007e87 	.word	0x08007e87
 8007e54:	08007e87 	.word	0x08007e87
 8007e58:	08007e87 	.word	0x08007e87
 8007e5c:	08007e7f 	.word	0x08007e7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007e60:	f7fc fcde 	bl	8004820 <HAL_RCC_GetPCLK1Freq>
 8007e64:	6178      	str	r0, [r7, #20]
        break;
 8007e66:	e013      	b.n	8007e90 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007e68:	f7fc fcf0 	bl	800484c <HAL_RCC_GetPCLK2Freq>
 8007e6c:	6178      	str	r0, [r7, #20]
        break;
 8007e6e:	e00f      	b.n	8007e90 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007e70:	4b1b      	ldr	r3, [pc, #108]	; (8007ee0 <UART_SetConfig+0x510>)
 8007e72:	617b      	str	r3, [r7, #20]
        break;
 8007e74:	e00c      	b.n	8007e90 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007e76:	f7fc fc3b 	bl	80046f0 <HAL_RCC_GetSysClockFreq>
 8007e7a:	6178      	str	r0, [r7, #20]
        break;
 8007e7c:	e008      	b.n	8007e90 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007e82:	617b      	str	r3, [r7, #20]
        break;
 8007e84:	e004      	b.n	8007e90 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8007e86:	2300      	movs	r3, #0
 8007e88:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	76bb      	strb	r3, [r7, #26]
        break;
 8007e8e:	bf00      	nop
    }

    if (pclk != 0U)
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d018      	beq.n	8007ec8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	085a      	lsrs	r2, r3, #1
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	441a      	add	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ea8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007eaa:	693b      	ldr	r3, [r7, #16]
 8007eac:	2b0f      	cmp	r3, #15
 8007eae:	d909      	bls.n	8007ec4 <UART_SetConfig+0x4f4>
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007eb6:	d205      	bcs.n	8007ec4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	60da      	str	r2, [r3, #12]
 8007ec2:	e001      	b.n	8007ec8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007ed4:	7ebb      	ldrb	r3, [r7, #26]
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3720      	adds	r7, #32
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bdb0      	pop	{r4, r5, r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	00f42400 	.word	0x00f42400

08007ee4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef0:	f003 0301 	and.w	r3, r3, #1
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d00a      	beq.n	8007f0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	685b      	ldr	r3, [r3, #4]
 8007efe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	f003 0302 	and.w	r3, r3, #2
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d00a      	beq.n	8007f30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	430a      	orrs	r2, r1
 8007f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f34:	f003 0304 	and.w	r3, r3, #4
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d00a      	beq.n	8007f52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	685b      	ldr	r3, [r3, #4]
 8007f42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f56:	f003 0308 	and.w	r3, r3, #8
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d00a      	beq.n	8007f74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	430a      	orrs	r2, r1
 8007f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f78:	f003 0310 	and.w	r3, r3, #16
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d00a      	beq.n	8007f96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689b      	ldr	r3, [r3, #8]
 8007f86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	430a      	orrs	r2, r1
 8007f94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9a:	f003 0320 	and.w	r3, r3, #32
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d00a      	beq.n	8007fb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	689b      	ldr	r3, [r3, #8]
 8007fa8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d01a      	beq.n	8007ffa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	685b      	ldr	r3, [r3, #4]
 8007fca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	430a      	orrs	r2, r1
 8007fd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007fe2:	d10a      	bne.n	8007ffa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	430a      	orrs	r2, r1
 8007ff8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008002:	2b00      	cmp	r3, #0
 8008004:	d00a      	beq.n	800801c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	430a      	orrs	r2, r1
 800801a:	605a      	str	r2, [r3, #4]
  }
}
 800801c:	bf00      	nop
 800801e:	370c      	adds	r7, #12
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af02      	add	r7, sp, #8
 800802e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008038:	f7f9 ff98 	bl	8001f6c <HAL_GetTick>
 800803c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f003 0308 	and.w	r3, r3, #8
 8008048:	2b08      	cmp	r3, #8
 800804a:	d10e      	bne.n	800806a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800804c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008050:	9300      	str	r3, [sp, #0]
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	2200      	movs	r2, #0
 8008056:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800805a:	6878      	ldr	r0, [r7, #4]
 800805c:	f000 f82d 	bl	80080ba <UART_WaitOnFlagUntilTimeout>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d001      	beq.n	800806a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e023      	b.n	80080b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f003 0304 	and.w	r3, r3, #4
 8008074:	2b04      	cmp	r3, #4
 8008076:	d10e      	bne.n	8008096 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008078:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800807c:	9300      	str	r3, [sp, #0]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	2200      	movs	r2, #0
 8008082:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f000 f817 	bl	80080ba <UART_WaitOnFlagUntilTimeout>
 800808c:	4603      	mov	r3, r0
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008092:	2303      	movs	r3, #3
 8008094:	e00d      	b.n	80080b2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2220      	movs	r2, #32
 800809a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2220      	movs	r2, #32
 80080a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2200      	movs	r2, #0
 80080a6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2200      	movs	r2, #0
 80080ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}

080080ba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80080ba:	b580      	push	{r7, lr}
 80080bc:	b09c      	sub	sp, #112	; 0x70
 80080be:	af00      	add	r7, sp, #0
 80080c0:	60f8      	str	r0, [r7, #12]
 80080c2:	60b9      	str	r1, [r7, #8]
 80080c4:	603b      	str	r3, [r7, #0]
 80080c6:	4613      	mov	r3, r2
 80080c8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080ca:	e0a5      	b.n	8008218 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80080cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080d2:	f000 80a1 	beq.w	8008218 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80080d6:	f7f9 ff49 	bl	8001f6c <HAL_GetTick>
 80080da:	4602      	mov	r2, r0
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	1ad3      	subs	r3, r2, r3
 80080e0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d302      	bcc.n	80080ec <UART_WaitOnFlagUntilTimeout+0x32>
 80080e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d13e      	bne.n	800816a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080f4:	e853 3f00 	ldrex	r3, [r3]
 80080f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80080fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080fc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008100:	667b      	str	r3, [r7, #100]	; 0x64
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800810a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800810c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800810e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008110:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008112:	e841 2300 	strex	r3, r2, [r1]
 8008116:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008118:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800811a:	2b00      	cmp	r3, #0
 800811c:	d1e6      	bne.n	80080ec <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	3308      	adds	r3, #8
 8008124:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008128:	e853 3f00 	ldrex	r3, [r3]
 800812c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800812e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008130:	f023 0301 	bic.w	r3, r3, #1
 8008134:	663b      	str	r3, [r7, #96]	; 0x60
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	3308      	adds	r3, #8
 800813c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800813e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008140:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008142:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008144:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008146:	e841 2300 	strex	r3, r2, [r1]
 800814a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800814c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1e5      	bne.n	800811e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	2220      	movs	r2, #32
 8008156:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	2220      	movs	r2, #32
 800815c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	2200      	movs	r2, #0
 8008162:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e067      	b.n	800823a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 0304 	and.w	r3, r3, #4
 8008174:	2b00      	cmp	r3, #0
 8008176:	d04f      	beq.n	8008218 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	69db      	ldr	r3, [r3, #28]
 800817e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008182:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008186:	d147      	bne.n	8008218 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008190:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800819a:	e853 3f00 	ldrex	r3, [r3]
 800819e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	461a      	mov	r2, r3
 80081ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80081b0:	637b      	str	r3, [r7, #52]	; 0x34
 80081b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081b8:	e841 2300 	strex	r3, r2, [r1]
 80081bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80081be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1e6      	bne.n	8008192 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	3308      	adds	r3, #8
 80081ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	e853 3f00 	ldrex	r3, [r3]
 80081d2:	613b      	str	r3, [r7, #16]
   return(result);
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	f023 0301 	bic.w	r3, r3, #1
 80081da:	66bb      	str	r3, [r7, #104]	; 0x68
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	3308      	adds	r3, #8
 80081e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80081e4:	623a      	str	r2, [r7, #32]
 80081e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e8:	69f9      	ldr	r1, [r7, #28]
 80081ea:	6a3a      	ldr	r2, [r7, #32]
 80081ec:	e841 2300 	strex	r3, r2, [r1]
 80081f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1e5      	bne.n	80081c4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2220      	movs	r2, #32
 80081fc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	2220      	movs	r2, #32
 8008202:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2220      	movs	r2, #32
 8008208:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	2200      	movs	r2, #0
 8008210:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008214:	2303      	movs	r3, #3
 8008216:	e010      	b.n	800823a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	69da      	ldr	r2, [r3, #28]
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	4013      	ands	r3, r2
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	429a      	cmp	r2, r3
 8008226:	bf0c      	ite	eq
 8008228:	2301      	moveq	r3, #1
 800822a:	2300      	movne	r3, #0
 800822c:	b2db      	uxtb	r3, r3
 800822e:	461a      	mov	r2, r3
 8008230:	79fb      	ldrb	r3, [r7, #7]
 8008232:	429a      	cmp	r2, r3
 8008234:	f43f af4a 	beq.w	80080cc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008238:	2300      	movs	r3, #0
}
 800823a:	4618      	mov	r0, r3
 800823c:	3770      	adds	r7, #112	; 0x70
 800823e:	46bd      	mov	sp, r7
 8008240:	bd80      	pop	{r7, pc}

08008242 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008242:	b480      	push	{r7}
 8008244:	b095      	sub	sp, #84	; 0x54
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008250:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008252:	e853 3f00 	ldrex	r3, [r3]
 8008256:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800825e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	461a      	mov	r2, r3
 8008266:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008268:	643b      	str	r3, [r7, #64]	; 0x40
 800826a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800826c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800826e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008270:	e841 2300 	strex	r3, r2, [r1]
 8008274:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008278:	2b00      	cmp	r3, #0
 800827a:	d1e6      	bne.n	800824a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	3308      	adds	r3, #8
 8008282:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008284:	6a3b      	ldr	r3, [r7, #32]
 8008286:	e853 3f00 	ldrex	r3, [r3]
 800828a:	61fb      	str	r3, [r7, #28]
   return(result);
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	f023 0301 	bic.w	r3, r3, #1
 8008292:	64bb      	str	r3, [r7, #72]	; 0x48
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	3308      	adds	r3, #8
 800829a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800829c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800829e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082a4:	e841 2300 	strex	r3, r2, [r1]
 80082a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d1e5      	bne.n	800827c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d118      	bne.n	80082ea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	e853 3f00 	ldrex	r3, [r3]
 80082c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	f023 0310 	bic.w	r3, r3, #16
 80082cc:	647b      	str	r3, [r7, #68]	; 0x44
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	461a      	mov	r2, r3
 80082d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082d6:	61bb      	str	r3, [r7, #24]
 80082d8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082da:	6979      	ldr	r1, [r7, #20]
 80082dc:	69ba      	ldr	r2, [r7, #24]
 80082de:	e841 2300 	strex	r3, r2, [r1]
 80082e2:	613b      	str	r3, [r7, #16]
   return(result);
 80082e4:	693b      	ldr	r3, [r7, #16]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e6      	bne.n	80082b8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2220      	movs	r2, #32
 80082ee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	665a      	str	r2, [r3, #100]	; 0x64
}
 80082fc:	bf00      	nop
 80082fe:	3754      	adds	r7, #84	; 0x54
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008314:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2200      	movs	r2, #0
 800831a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	2200      	movs	r2, #0
 8008322:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008326:	68f8      	ldr	r0, [r7, #12]
 8008328:	f7ff fb3c 	bl	80079a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800832c:	bf00      	nop
 800832e:	3710      	adds	r7, #16
 8008330:	46bd      	mov	sp, r7
 8008332:	bd80      	pop	{r7, pc}

08008334 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b088      	sub	sp, #32
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	e853 3f00 	ldrex	r3, [r3]
 8008348:	60bb      	str	r3, [r7, #8]
   return(result);
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008350:	61fb      	str	r3, [r7, #28]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	461a      	mov	r2, r3
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	61bb      	str	r3, [r7, #24]
 800835c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835e:	6979      	ldr	r1, [r7, #20]
 8008360:	69ba      	ldr	r2, [r7, #24]
 8008362:	e841 2300 	strex	r3, r2, [r1]
 8008366:	613b      	str	r3, [r7, #16]
   return(result);
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d1e6      	bne.n	800833c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2220      	movs	r2, #32
 8008372:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2200      	movs	r2, #0
 8008378:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f7f9 f95e 	bl	800163c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008380:	bf00      	nop
 8008382:	3720      	adds	r7, #32
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008388:	b480      	push	{r7}
 800838a:	b083      	sub	sp, #12
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008390:	bf00      	nop
 8008392:	370c      	adds	r7, #12
 8008394:	46bd      	mov	sp, r7
 8008396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839a:	4770      	bx	lr

0800839c <__errno>:
 800839c:	4b01      	ldr	r3, [pc, #4]	; (80083a4 <__errno+0x8>)
 800839e:	6818      	ldr	r0, [r3, #0]
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	2000001c 	.word	0x2000001c

080083a8 <__libc_init_array>:
 80083a8:	b570      	push	{r4, r5, r6, lr}
 80083aa:	4d0d      	ldr	r5, [pc, #52]	; (80083e0 <__libc_init_array+0x38>)
 80083ac:	4c0d      	ldr	r4, [pc, #52]	; (80083e4 <__libc_init_array+0x3c>)
 80083ae:	1b64      	subs	r4, r4, r5
 80083b0:	10a4      	asrs	r4, r4, #2
 80083b2:	2600      	movs	r6, #0
 80083b4:	42a6      	cmp	r6, r4
 80083b6:	d109      	bne.n	80083cc <__libc_init_array+0x24>
 80083b8:	4d0b      	ldr	r5, [pc, #44]	; (80083e8 <__libc_init_array+0x40>)
 80083ba:	4c0c      	ldr	r4, [pc, #48]	; (80083ec <__libc_init_array+0x44>)
 80083bc:	f001 f912 	bl	80095e4 <_init>
 80083c0:	1b64      	subs	r4, r4, r5
 80083c2:	10a4      	asrs	r4, r4, #2
 80083c4:	2600      	movs	r6, #0
 80083c6:	42a6      	cmp	r6, r4
 80083c8:	d105      	bne.n	80083d6 <__libc_init_array+0x2e>
 80083ca:	bd70      	pop	{r4, r5, r6, pc}
 80083cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80083d0:	4798      	blx	r3
 80083d2:	3601      	adds	r6, #1
 80083d4:	e7ee      	b.n	80083b4 <__libc_init_array+0xc>
 80083d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80083da:	4798      	blx	r3
 80083dc:	3601      	adds	r6, #1
 80083de:	e7f2      	b.n	80083c6 <__libc_init_array+0x1e>
 80083e0:	08009874 	.word	0x08009874
 80083e4:	08009874 	.word	0x08009874
 80083e8:	08009874 	.word	0x08009874
 80083ec:	08009878 	.word	0x08009878

080083f0 <memset>:
 80083f0:	4402      	add	r2, r0
 80083f2:	4603      	mov	r3, r0
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d100      	bne.n	80083fa <memset+0xa>
 80083f8:	4770      	bx	lr
 80083fa:	f803 1b01 	strb.w	r1, [r3], #1
 80083fe:	e7f9      	b.n	80083f4 <memset+0x4>

08008400 <siprintf>:
 8008400:	b40e      	push	{r1, r2, r3}
 8008402:	b500      	push	{lr}
 8008404:	b09c      	sub	sp, #112	; 0x70
 8008406:	ab1d      	add	r3, sp, #116	; 0x74
 8008408:	9002      	str	r0, [sp, #8]
 800840a:	9006      	str	r0, [sp, #24]
 800840c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008410:	4809      	ldr	r0, [pc, #36]	; (8008438 <siprintf+0x38>)
 8008412:	9107      	str	r1, [sp, #28]
 8008414:	9104      	str	r1, [sp, #16]
 8008416:	4909      	ldr	r1, [pc, #36]	; (800843c <siprintf+0x3c>)
 8008418:	f853 2b04 	ldr.w	r2, [r3], #4
 800841c:	9105      	str	r1, [sp, #20]
 800841e:	6800      	ldr	r0, [r0, #0]
 8008420:	9301      	str	r3, [sp, #4]
 8008422:	a902      	add	r1, sp, #8
 8008424:	f000 f896 	bl	8008554 <_svfiprintf_r>
 8008428:	9b02      	ldr	r3, [sp, #8]
 800842a:	2200      	movs	r2, #0
 800842c:	701a      	strb	r2, [r3, #0]
 800842e:	b01c      	add	sp, #112	; 0x70
 8008430:	f85d eb04 	ldr.w	lr, [sp], #4
 8008434:	b003      	add	sp, #12
 8008436:	4770      	bx	lr
 8008438:	2000001c 	.word	0x2000001c
 800843c:	ffff0208 	.word	0xffff0208

08008440 <siscanf>:
 8008440:	b40e      	push	{r1, r2, r3}
 8008442:	b510      	push	{r4, lr}
 8008444:	b09f      	sub	sp, #124	; 0x7c
 8008446:	ac21      	add	r4, sp, #132	; 0x84
 8008448:	f44f 7101 	mov.w	r1, #516	; 0x204
 800844c:	f854 2b04 	ldr.w	r2, [r4], #4
 8008450:	9201      	str	r2, [sp, #4]
 8008452:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008456:	9004      	str	r0, [sp, #16]
 8008458:	9008      	str	r0, [sp, #32]
 800845a:	f7f7 feb9 	bl	80001d0 <strlen>
 800845e:	4b0c      	ldr	r3, [pc, #48]	; (8008490 <siscanf+0x50>)
 8008460:	9005      	str	r0, [sp, #20]
 8008462:	9009      	str	r0, [sp, #36]	; 0x24
 8008464:	930d      	str	r3, [sp, #52]	; 0x34
 8008466:	480b      	ldr	r0, [pc, #44]	; (8008494 <siscanf+0x54>)
 8008468:	9a01      	ldr	r2, [sp, #4]
 800846a:	6800      	ldr	r0, [r0, #0]
 800846c:	9403      	str	r4, [sp, #12]
 800846e:	2300      	movs	r3, #0
 8008470:	9311      	str	r3, [sp, #68]	; 0x44
 8008472:	9316      	str	r3, [sp, #88]	; 0x58
 8008474:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008478:	f8ad 301e 	strh.w	r3, [sp, #30]
 800847c:	a904      	add	r1, sp, #16
 800847e:	4623      	mov	r3, r4
 8008480:	f000 f9c2 	bl	8008808 <__ssvfiscanf_r>
 8008484:	b01f      	add	sp, #124	; 0x7c
 8008486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800848a:	b003      	add	sp, #12
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	08008499 	.word	0x08008499
 8008494:	2000001c 	.word	0x2000001c

08008498 <__seofread>:
 8008498:	2000      	movs	r0, #0
 800849a:	4770      	bx	lr

0800849c <__ssputs_r>:
 800849c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084a0:	688e      	ldr	r6, [r1, #8]
 80084a2:	429e      	cmp	r6, r3
 80084a4:	4682      	mov	sl, r0
 80084a6:	460c      	mov	r4, r1
 80084a8:	4690      	mov	r8, r2
 80084aa:	461f      	mov	r7, r3
 80084ac:	d838      	bhi.n	8008520 <__ssputs_r+0x84>
 80084ae:	898a      	ldrh	r2, [r1, #12]
 80084b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80084b4:	d032      	beq.n	800851c <__ssputs_r+0x80>
 80084b6:	6825      	ldr	r5, [r4, #0]
 80084b8:	6909      	ldr	r1, [r1, #16]
 80084ba:	eba5 0901 	sub.w	r9, r5, r1
 80084be:	6965      	ldr	r5, [r4, #20]
 80084c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80084c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80084c8:	3301      	adds	r3, #1
 80084ca:	444b      	add	r3, r9
 80084cc:	106d      	asrs	r5, r5, #1
 80084ce:	429d      	cmp	r5, r3
 80084d0:	bf38      	it	cc
 80084d2:	461d      	movcc	r5, r3
 80084d4:	0553      	lsls	r3, r2, #21
 80084d6:	d531      	bpl.n	800853c <__ssputs_r+0xa0>
 80084d8:	4629      	mov	r1, r5
 80084da:	f000 ffdf 	bl	800949c <_malloc_r>
 80084de:	4606      	mov	r6, r0
 80084e0:	b950      	cbnz	r0, 80084f8 <__ssputs_r+0x5c>
 80084e2:	230c      	movs	r3, #12
 80084e4:	f8ca 3000 	str.w	r3, [sl]
 80084e8:	89a3      	ldrh	r3, [r4, #12]
 80084ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ee:	81a3      	strh	r3, [r4, #12]
 80084f0:	f04f 30ff 	mov.w	r0, #4294967295
 80084f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084f8:	6921      	ldr	r1, [r4, #16]
 80084fa:	464a      	mov	r2, r9
 80084fc:	f000 ff56 	bl	80093ac <memcpy>
 8008500:	89a3      	ldrh	r3, [r4, #12]
 8008502:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008506:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800850a:	81a3      	strh	r3, [r4, #12]
 800850c:	6126      	str	r6, [r4, #16]
 800850e:	6165      	str	r5, [r4, #20]
 8008510:	444e      	add	r6, r9
 8008512:	eba5 0509 	sub.w	r5, r5, r9
 8008516:	6026      	str	r6, [r4, #0]
 8008518:	60a5      	str	r5, [r4, #8]
 800851a:	463e      	mov	r6, r7
 800851c:	42be      	cmp	r6, r7
 800851e:	d900      	bls.n	8008522 <__ssputs_r+0x86>
 8008520:	463e      	mov	r6, r7
 8008522:	4632      	mov	r2, r6
 8008524:	6820      	ldr	r0, [r4, #0]
 8008526:	4641      	mov	r1, r8
 8008528:	f000 ff4e 	bl	80093c8 <memmove>
 800852c:	68a3      	ldr	r3, [r4, #8]
 800852e:	6822      	ldr	r2, [r4, #0]
 8008530:	1b9b      	subs	r3, r3, r6
 8008532:	4432      	add	r2, r6
 8008534:	60a3      	str	r3, [r4, #8]
 8008536:	6022      	str	r2, [r4, #0]
 8008538:	2000      	movs	r0, #0
 800853a:	e7db      	b.n	80084f4 <__ssputs_r+0x58>
 800853c:	462a      	mov	r2, r5
 800853e:	f001 f807 	bl	8009550 <_realloc_r>
 8008542:	4606      	mov	r6, r0
 8008544:	2800      	cmp	r0, #0
 8008546:	d1e1      	bne.n	800850c <__ssputs_r+0x70>
 8008548:	6921      	ldr	r1, [r4, #16]
 800854a:	4650      	mov	r0, sl
 800854c:	f000 ff56 	bl	80093fc <_free_r>
 8008550:	e7c7      	b.n	80084e2 <__ssputs_r+0x46>
	...

08008554 <_svfiprintf_r>:
 8008554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008558:	4698      	mov	r8, r3
 800855a:	898b      	ldrh	r3, [r1, #12]
 800855c:	061b      	lsls	r3, r3, #24
 800855e:	b09d      	sub	sp, #116	; 0x74
 8008560:	4607      	mov	r7, r0
 8008562:	460d      	mov	r5, r1
 8008564:	4614      	mov	r4, r2
 8008566:	d50e      	bpl.n	8008586 <_svfiprintf_r+0x32>
 8008568:	690b      	ldr	r3, [r1, #16]
 800856a:	b963      	cbnz	r3, 8008586 <_svfiprintf_r+0x32>
 800856c:	2140      	movs	r1, #64	; 0x40
 800856e:	f000 ff95 	bl	800949c <_malloc_r>
 8008572:	6028      	str	r0, [r5, #0]
 8008574:	6128      	str	r0, [r5, #16]
 8008576:	b920      	cbnz	r0, 8008582 <_svfiprintf_r+0x2e>
 8008578:	230c      	movs	r3, #12
 800857a:	603b      	str	r3, [r7, #0]
 800857c:	f04f 30ff 	mov.w	r0, #4294967295
 8008580:	e0d1      	b.n	8008726 <_svfiprintf_r+0x1d2>
 8008582:	2340      	movs	r3, #64	; 0x40
 8008584:	616b      	str	r3, [r5, #20]
 8008586:	2300      	movs	r3, #0
 8008588:	9309      	str	r3, [sp, #36]	; 0x24
 800858a:	2320      	movs	r3, #32
 800858c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008590:	f8cd 800c 	str.w	r8, [sp, #12]
 8008594:	2330      	movs	r3, #48	; 0x30
 8008596:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008740 <_svfiprintf_r+0x1ec>
 800859a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800859e:	f04f 0901 	mov.w	r9, #1
 80085a2:	4623      	mov	r3, r4
 80085a4:	469a      	mov	sl, r3
 80085a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80085aa:	b10a      	cbz	r2, 80085b0 <_svfiprintf_r+0x5c>
 80085ac:	2a25      	cmp	r2, #37	; 0x25
 80085ae:	d1f9      	bne.n	80085a4 <_svfiprintf_r+0x50>
 80085b0:	ebba 0b04 	subs.w	fp, sl, r4
 80085b4:	d00b      	beq.n	80085ce <_svfiprintf_r+0x7a>
 80085b6:	465b      	mov	r3, fp
 80085b8:	4622      	mov	r2, r4
 80085ba:	4629      	mov	r1, r5
 80085bc:	4638      	mov	r0, r7
 80085be:	f7ff ff6d 	bl	800849c <__ssputs_r>
 80085c2:	3001      	adds	r0, #1
 80085c4:	f000 80aa 	beq.w	800871c <_svfiprintf_r+0x1c8>
 80085c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80085ca:	445a      	add	r2, fp
 80085cc:	9209      	str	r2, [sp, #36]	; 0x24
 80085ce:	f89a 3000 	ldrb.w	r3, [sl]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 80a2 	beq.w	800871c <_svfiprintf_r+0x1c8>
 80085d8:	2300      	movs	r3, #0
 80085da:	f04f 32ff 	mov.w	r2, #4294967295
 80085de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085e2:	f10a 0a01 	add.w	sl, sl, #1
 80085e6:	9304      	str	r3, [sp, #16]
 80085e8:	9307      	str	r3, [sp, #28]
 80085ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085ee:	931a      	str	r3, [sp, #104]	; 0x68
 80085f0:	4654      	mov	r4, sl
 80085f2:	2205      	movs	r2, #5
 80085f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085f8:	4851      	ldr	r0, [pc, #324]	; (8008740 <_svfiprintf_r+0x1ec>)
 80085fa:	f7f7 fdf1 	bl	80001e0 <memchr>
 80085fe:	9a04      	ldr	r2, [sp, #16]
 8008600:	b9d8      	cbnz	r0, 800863a <_svfiprintf_r+0xe6>
 8008602:	06d0      	lsls	r0, r2, #27
 8008604:	bf44      	itt	mi
 8008606:	2320      	movmi	r3, #32
 8008608:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800860c:	0711      	lsls	r1, r2, #28
 800860e:	bf44      	itt	mi
 8008610:	232b      	movmi	r3, #43	; 0x2b
 8008612:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008616:	f89a 3000 	ldrb.w	r3, [sl]
 800861a:	2b2a      	cmp	r3, #42	; 0x2a
 800861c:	d015      	beq.n	800864a <_svfiprintf_r+0xf6>
 800861e:	9a07      	ldr	r2, [sp, #28]
 8008620:	4654      	mov	r4, sl
 8008622:	2000      	movs	r0, #0
 8008624:	f04f 0c0a 	mov.w	ip, #10
 8008628:	4621      	mov	r1, r4
 800862a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800862e:	3b30      	subs	r3, #48	; 0x30
 8008630:	2b09      	cmp	r3, #9
 8008632:	d94e      	bls.n	80086d2 <_svfiprintf_r+0x17e>
 8008634:	b1b0      	cbz	r0, 8008664 <_svfiprintf_r+0x110>
 8008636:	9207      	str	r2, [sp, #28]
 8008638:	e014      	b.n	8008664 <_svfiprintf_r+0x110>
 800863a:	eba0 0308 	sub.w	r3, r0, r8
 800863e:	fa09 f303 	lsl.w	r3, r9, r3
 8008642:	4313      	orrs	r3, r2
 8008644:	9304      	str	r3, [sp, #16]
 8008646:	46a2      	mov	sl, r4
 8008648:	e7d2      	b.n	80085f0 <_svfiprintf_r+0x9c>
 800864a:	9b03      	ldr	r3, [sp, #12]
 800864c:	1d19      	adds	r1, r3, #4
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	9103      	str	r1, [sp, #12]
 8008652:	2b00      	cmp	r3, #0
 8008654:	bfbb      	ittet	lt
 8008656:	425b      	neglt	r3, r3
 8008658:	f042 0202 	orrlt.w	r2, r2, #2
 800865c:	9307      	strge	r3, [sp, #28]
 800865e:	9307      	strlt	r3, [sp, #28]
 8008660:	bfb8      	it	lt
 8008662:	9204      	strlt	r2, [sp, #16]
 8008664:	7823      	ldrb	r3, [r4, #0]
 8008666:	2b2e      	cmp	r3, #46	; 0x2e
 8008668:	d10c      	bne.n	8008684 <_svfiprintf_r+0x130>
 800866a:	7863      	ldrb	r3, [r4, #1]
 800866c:	2b2a      	cmp	r3, #42	; 0x2a
 800866e:	d135      	bne.n	80086dc <_svfiprintf_r+0x188>
 8008670:	9b03      	ldr	r3, [sp, #12]
 8008672:	1d1a      	adds	r2, r3, #4
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	9203      	str	r2, [sp, #12]
 8008678:	2b00      	cmp	r3, #0
 800867a:	bfb8      	it	lt
 800867c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008680:	3402      	adds	r4, #2
 8008682:	9305      	str	r3, [sp, #20]
 8008684:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008750 <_svfiprintf_r+0x1fc>
 8008688:	7821      	ldrb	r1, [r4, #0]
 800868a:	2203      	movs	r2, #3
 800868c:	4650      	mov	r0, sl
 800868e:	f7f7 fda7 	bl	80001e0 <memchr>
 8008692:	b140      	cbz	r0, 80086a6 <_svfiprintf_r+0x152>
 8008694:	2340      	movs	r3, #64	; 0x40
 8008696:	eba0 000a 	sub.w	r0, r0, sl
 800869a:	fa03 f000 	lsl.w	r0, r3, r0
 800869e:	9b04      	ldr	r3, [sp, #16]
 80086a0:	4303      	orrs	r3, r0
 80086a2:	3401      	adds	r4, #1
 80086a4:	9304      	str	r3, [sp, #16]
 80086a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086aa:	4826      	ldr	r0, [pc, #152]	; (8008744 <_svfiprintf_r+0x1f0>)
 80086ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80086b0:	2206      	movs	r2, #6
 80086b2:	f7f7 fd95 	bl	80001e0 <memchr>
 80086b6:	2800      	cmp	r0, #0
 80086b8:	d038      	beq.n	800872c <_svfiprintf_r+0x1d8>
 80086ba:	4b23      	ldr	r3, [pc, #140]	; (8008748 <_svfiprintf_r+0x1f4>)
 80086bc:	bb1b      	cbnz	r3, 8008706 <_svfiprintf_r+0x1b2>
 80086be:	9b03      	ldr	r3, [sp, #12]
 80086c0:	3307      	adds	r3, #7
 80086c2:	f023 0307 	bic.w	r3, r3, #7
 80086c6:	3308      	adds	r3, #8
 80086c8:	9303      	str	r3, [sp, #12]
 80086ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086cc:	4433      	add	r3, r6
 80086ce:	9309      	str	r3, [sp, #36]	; 0x24
 80086d0:	e767      	b.n	80085a2 <_svfiprintf_r+0x4e>
 80086d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80086d6:	460c      	mov	r4, r1
 80086d8:	2001      	movs	r0, #1
 80086da:	e7a5      	b.n	8008628 <_svfiprintf_r+0xd4>
 80086dc:	2300      	movs	r3, #0
 80086de:	3401      	adds	r4, #1
 80086e0:	9305      	str	r3, [sp, #20]
 80086e2:	4619      	mov	r1, r3
 80086e4:	f04f 0c0a 	mov.w	ip, #10
 80086e8:	4620      	mov	r0, r4
 80086ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086ee:	3a30      	subs	r2, #48	; 0x30
 80086f0:	2a09      	cmp	r2, #9
 80086f2:	d903      	bls.n	80086fc <_svfiprintf_r+0x1a8>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d0c5      	beq.n	8008684 <_svfiprintf_r+0x130>
 80086f8:	9105      	str	r1, [sp, #20]
 80086fa:	e7c3      	b.n	8008684 <_svfiprintf_r+0x130>
 80086fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008700:	4604      	mov	r4, r0
 8008702:	2301      	movs	r3, #1
 8008704:	e7f0      	b.n	80086e8 <_svfiprintf_r+0x194>
 8008706:	ab03      	add	r3, sp, #12
 8008708:	9300      	str	r3, [sp, #0]
 800870a:	462a      	mov	r2, r5
 800870c:	4b0f      	ldr	r3, [pc, #60]	; (800874c <_svfiprintf_r+0x1f8>)
 800870e:	a904      	add	r1, sp, #16
 8008710:	4638      	mov	r0, r7
 8008712:	f3af 8000 	nop.w
 8008716:	1c42      	adds	r2, r0, #1
 8008718:	4606      	mov	r6, r0
 800871a:	d1d6      	bne.n	80086ca <_svfiprintf_r+0x176>
 800871c:	89ab      	ldrh	r3, [r5, #12]
 800871e:	065b      	lsls	r3, r3, #25
 8008720:	f53f af2c 	bmi.w	800857c <_svfiprintf_r+0x28>
 8008724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008726:	b01d      	add	sp, #116	; 0x74
 8008728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800872c:	ab03      	add	r3, sp, #12
 800872e:	9300      	str	r3, [sp, #0]
 8008730:	462a      	mov	r2, r5
 8008732:	4b06      	ldr	r3, [pc, #24]	; (800874c <_svfiprintf_r+0x1f8>)
 8008734:	a904      	add	r1, sp, #16
 8008736:	4638      	mov	r0, r7
 8008738:	f000 fa4c 	bl	8008bd4 <_printf_i>
 800873c:	e7eb      	b.n	8008716 <_svfiprintf_r+0x1c2>
 800873e:	bf00      	nop
 8008740:	080096bc 	.word	0x080096bc
 8008744:	080096c6 	.word	0x080096c6
 8008748:	00000000 	.word	0x00000000
 800874c:	0800849d 	.word	0x0800849d
 8008750:	080096c2 	.word	0x080096c2

08008754 <_sungetc_r>:
 8008754:	b538      	push	{r3, r4, r5, lr}
 8008756:	1c4b      	adds	r3, r1, #1
 8008758:	4614      	mov	r4, r2
 800875a:	d103      	bne.n	8008764 <_sungetc_r+0x10>
 800875c:	f04f 35ff 	mov.w	r5, #4294967295
 8008760:	4628      	mov	r0, r5
 8008762:	bd38      	pop	{r3, r4, r5, pc}
 8008764:	8993      	ldrh	r3, [r2, #12]
 8008766:	f023 0320 	bic.w	r3, r3, #32
 800876a:	8193      	strh	r3, [r2, #12]
 800876c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800876e:	6852      	ldr	r2, [r2, #4]
 8008770:	b2cd      	uxtb	r5, r1
 8008772:	b18b      	cbz	r3, 8008798 <_sungetc_r+0x44>
 8008774:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008776:	4293      	cmp	r3, r2
 8008778:	dd08      	ble.n	800878c <_sungetc_r+0x38>
 800877a:	6823      	ldr	r3, [r4, #0]
 800877c:	1e5a      	subs	r2, r3, #1
 800877e:	6022      	str	r2, [r4, #0]
 8008780:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008784:	6863      	ldr	r3, [r4, #4]
 8008786:	3301      	adds	r3, #1
 8008788:	6063      	str	r3, [r4, #4]
 800878a:	e7e9      	b.n	8008760 <_sungetc_r+0xc>
 800878c:	4621      	mov	r1, r4
 800878e:	f000 fdd1 	bl	8009334 <__submore>
 8008792:	2800      	cmp	r0, #0
 8008794:	d0f1      	beq.n	800877a <_sungetc_r+0x26>
 8008796:	e7e1      	b.n	800875c <_sungetc_r+0x8>
 8008798:	6921      	ldr	r1, [r4, #16]
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	b151      	cbz	r1, 80087b4 <_sungetc_r+0x60>
 800879e:	4299      	cmp	r1, r3
 80087a0:	d208      	bcs.n	80087b4 <_sungetc_r+0x60>
 80087a2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80087a6:	42a9      	cmp	r1, r5
 80087a8:	d104      	bne.n	80087b4 <_sungetc_r+0x60>
 80087aa:	3b01      	subs	r3, #1
 80087ac:	3201      	adds	r2, #1
 80087ae:	6023      	str	r3, [r4, #0]
 80087b0:	6062      	str	r2, [r4, #4]
 80087b2:	e7d5      	b.n	8008760 <_sungetc_r+0xc>
 80087b4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80087b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087bc:	6363      	str	r3, [r4, #52]	; 0x34
 80087be:	2303      	movs	r3, #3
 80087c0:	63a3      	str	r3, [r4, #56]	; 0x38
 80087c2:	4623      	mov	r3, r4
 80087c4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80087c8:	6023      	str	r3, [r4, #0]
 80087ca:	2301      	movs	r3, #1
 80087cc:	e7dc      	b.n	8008788 <_sungetc_r+0x34>

080087ce <__ssrefill_r>:
 80087ce:	b510      	push	{r4, lr}
 80087d0:	460c      	mov	r4, r1
 80087d2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80087d4:	b169      	cbz	r1, 80087f2 <__ssrefill_r+0x24>
 80087d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087da:	4299      	cmp	r1, r3
 80087dc:	d001      	beq.n	80087e2 <__ssrefill_r+0x14>
 80087de:	f000 fe0d 	bl	80093fc <_free_r>
 80087e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80087e4:	6063      	str	r3, [r4, #4]
 80087e6:	2000      	movs	r0, #0
 80087e8:	6360      	str	r0, [r4, #52]	; 0x34
 80087ea:	b113      	cbz	r3, 80087f2 <__ssrefill_r+0x24>
 80087ec:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80087ee:	6023      	str	r3, [r4, #0]
 80087f0:	bd10      	pop	{r4, pc}
 80087f2:	6923      	ldr	r3, [r4, #16]
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	2300      	movs	r3, #0
 80087f8:	6063      	str	r3, [r4, #4]
 80087fa:	89a3      	ldrh	r3, [r4, #12]
 80087fc:	f043 0320 	orr.w	r3, r3, #32
 8008800:	81a3      	strh	r3, [r4, #12]
 8008802:	f04f 30ff 	mov.w	r0, #4294967295
 8008806:	e7f3      	b.n	80087f0 <__ssrefill_r+0x22>

08008808 <__ssvfiscanf_r>:
 8008808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800880c:	460c      	mov	r4, r1
 800880e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8008812:	2100      	movs	r1, #0
 8008814:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008818:	49b2      	ldr	r1, [pc, #712]	; (8008ae4 <__ssvfiscanf_r+0x2dc>)
 800881a:	91a0      	str	r1, [sp, #640]	; 0x280
 800881c:	f10d 0804 	add.w	r8, sp, #4
 8008820:	49b1      	ldr	r1, [pc, #708]	; (8008ae8 <__ssvfiscanf_r+0x2e0>)
 8008822:	4fb2      	ldr	r7, [pc, #712]	; (8008aec <__ssvfiscanf_r+0x2e4>)
 8008824:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8008af0 <__ssvfiscanf_r+0x2e8>
 8008828:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800882c:	4606      	mov	r6, r0
 800882e:	91a1      	str	r1, [sp, #644]	; 0x284
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	f892 a000 	ldrb.w	sl, [r2]
 8008836:	f1ba 0f00 	cmp.w	sl, #0
 800883a:	f000 8151 	beq.w	8008ae0 <__ssvfiscanf_r+0x2d8>
 800883e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8008842:	f013 0308 	ands.w	r3, r3, #8
 8008846:	f102 0501 	add.w	r5, r2, #1
 800884a:	d019      	beq.n	8008880 <__ssvfiscanf_r+0x78>
 800884c:	6863      	ldr	r3, [r4, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	dd0f      	ble.n	8008872 <__ssvfiscanf_r+0x6a>
 8008852:	6823      	ldr	r3, [r4, #0]
 8008854:	781a      	ldrb	r2, [r3, #0]
 8008856:	5cba      	ldrb	r2, [r7, r2]
 8008858:	0712      	lsls	r2, r2, #28
 800885a:	d401      	bmi.n	8008860 <__ssvfiscanf_r+0x58>
 800885c:	462a      	mov	r2, r5
 800885e:	e7e8      	b.n	8008832 <__ssvfiscanf_r+0x2a>
 8008860:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008862:	3201      	adds	r2, #1
 8008864:	9245      	str	r2, [sp, #276]	; 0x114
 8008866:	6862      	ldr	r2, [r4, #4]
 8008868:	3301      	adds	r3, #1
 800886a:	3a01      	subs	r2, #1
 800886c:	6062      	str	r2, [r4, #4]
 800886e:	6023      	str	r3, [r4, #0]
 8008870:	e7ec      	b.n	800884c <__ssvfiscanf_r+0x44>
 8008872:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008874:	4621      	mov	r1, r4
 8008876:	4630      	mov	r0, r6
 8008878:	4798      	blx	r3
 800887a:	2800      	cmp	r0, #0
 800887c:	d0e9      	beq.n	8008852 <__ssvfiscanf_r+0x4a>
 800887e:	e7ed      	b.n	800885c <__ssvfiscanf_r+0x54>
 8008880:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8008884:	f040 8083 	bne.w	800898e <__ssvfiscanf_r+0x186>
 8008888:	9341      	str	r3, [sp, #260]	; 0x104
 800888a:	9343      	str	r3, [sp, #268]	; 0x10c
 800888c:	7853      	ldrb	r3, [r2, #1]
 800888e:	2b2a      	cmp	r3, #42	; 0x2a
 8008890:	bf02      	ittt	eq
 8008892:	2310      	moveq	r3, #16
 8008894:	1c95      	addeq	r5, r2, #2
 8008896:	9341      	streq	r3, [sp, #260]	; 0x104
 8008898:	220a      	movs	r2, #10
 800889a:	46ab      	mov	fp, r5
 800889c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80088a0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80088a4:	2b09      	cmp	r3, #9
 80088a6:	d91d      	bls.n	80088e4 <__ssvfiscanf_r+0xdc>
 80088a8:	4891      	ldr	r0, [pc, #580]	; (8008af0 <__ssvfiscanf_r+0x2e8>)
 80088aa:	2203      	movs	r2, #3
 80088ac:	f7f7 fc98 	bl	80001e0 <memchr>
 80088b0:	b140      	cbz	r0, 80088c4 <__ssvfiscanf_r+0xbc>
 80088b2:	2301      	movs	r3, #1
 80088b4:	eba0 0009 	sub.w	r0, r0, r9
 80088b8:	fa03 f000 	lsl.w	r0, r3, r0
 80088bc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80088be:	4318      	orrs	r0, r3
 80088c0:	9041      	str	r0, [sp, #260]	; 0x104
 80088c2:	465d      	mov	r5, fp
 80088c4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80088c8:	2b78      	cmp	r3, #120	; 0x78
 80088ca:	d806      	bhi.n	80088da <__ssvfiscanf_r+0xd2>
 80088cc:	2b57      	cmp	r3, #87	; 0x57
 80088ce:	d810      	bhi.n	80088f2 <__ssvfiscanf_r+0xea>
 80088d0:	2b25      	cmp	r3, #37	; 0x25
 80088d2:	d05c      	beq.n	800898e <__ssvfiscanf_r+0x186>
 80088d4:	d856      	bhi.n	8008984 <__ssvfiscanf_r+0x17c>
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d074      	beq.n	80089c4 <__ssvfiscanf_r+0x1bc>
 80088da:	2303      	movs	r3, #3
 80088dc:	9347      	str	r3, [sp, #284]	; 0x11c
 80088de:	230a      	movs	r3, #10
 80088e0:	9342      	str	r3, [sp, #264]	; 0x108
 80088e2:	e081      	b.n	80089e8 <__ssvfiscanf_r+0x1e0>
 80088e4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80088e6:	fb02 1303 	mla	r3, r2, r3, r1
 80088ea:	3b30      	subs	r3, #48	; 0x30
 80088ec:	9343      	str	r3, [sp, #268]	; 0x10c
 80088ee:	465d      	mov	r5, fp
 80088f0:	e7d3      	b.n	800889a <__ssvfiscanf_r+0x92>
 80088f2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80088f6:	2a20      	cmp	r2, #32
 80088f8:	d8ef      	bhi.n	80088da <__ssvfiscanf_r+0xd2>
 80088fa:	a101      	add	r1, pc, #4	; (adr r1, 8008900 <__ssvfiscanf_r+0xf8>)
 80088fc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008900:	080089d3 	.word	0x080089d3
 8008904:	080088db 	.word	0x080088db
 8008908:	080088db 	.word	0x080088db
 800890c:	08008a31 	.word	0x08008a31
 8008910:	080088db 	.word	0x080088db
 8008914:	080088db 	.word	0x080088db
 8008918:	080088db 	.word	0x080088db
 800891c:	080088db 	.word	0x080088db
 8008920:	080088db 	.word	0x080088db
 8008924:	080088db 	.word	0x080088db
 8008928:	080088db 	.word	0x080088db
 800892c:	08008a47 	.word	0x08008a47
 8008930:	08008a1d 	.word	0x08008a1d
 8008934:	0800898b 	.word	0x0800898b
 8008938:	0800898b 	.word	0x0800898b
 800893c:	0800898b 	.word	0x0800898b
 8008940:	080088db 	.word	0x080088db
 8008944:	08008a21 	.word	0x08008a21
 8008948:	080088db 	.word	0x080088db
 800894c:	080088db 	.word	0x080088db
 8008950:	080088db 	.word	0x080088db
 8008954:	080088db 	.word	0x080088db
 8008958:	08008a57 	.word	0x08008a57
 800895c:	08008a29 	.word	0x08008a29
 8008960:	080089cb 	.word	0x080089cb
 8008964:	080088db 	.word	0x080088db
 8008968:	080088db 	.word	0x080088db
 800896c:	08008a53 	.word	0x08008a53
 8008970:	080088db 	.word	0x080088db
 8008974:	08008a1d 	.word	0x08008a1d
 8008978:	080088db 	.word	0x080088db
 800897c:	080088db 	.word	0x080088db
 8008980:	080089d3 	.word	0x080089d3
 8008984:	3b45      	subs	r3, #69	; 0x45
 8008986:	2b02      	cmp	r3, #2
 8008988:	d8a7      	bhi.n	80088da <__ssvfiscanf_r+0xd2>
 800898a:	2305      	movs	r3, #5
 800898c:	e02b      	b.n	80089e6 <__ssvfiscanf_r+0x1de>
 800898e:	6863      	ldr	r3, [r4, #4]
 8008990:	2b00      	cmp	r3, #0
 8008992:	dd0d      	ble.n	80089b0 <__ssvfiscanf_r+0x1a8>
 8008994:	6823      	ldr	r3, [r4, #0]
 8008996:	781a      	ldrb	r2, [r3, #0]
 8008998:	4552      	cmp	r2, sl
 800899a:	f040 80a1 	bne.w	8008ae0 <__ssvfiscanf_r+0x2d8>
 800899e:	3301      	adds	r3, #1
 80089a0:	6862      	ldr	r2, [r4, #4]
 80089a2:	6023      	str	r3, [r4, #0]
 80089a4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80089a6:	3a01      	subs	r2, #1
 80089a8:	3301      	adds	r3, #1
 80089aa:	6062      	str	r2, [r4, #4]
 80089ac:	9345      	str	r3, [sp, #276]	; 0x114
 80089ae:	e755      	b.n	800885c <__ssvfiscanf_r+0x54>
 80089b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80089b2:	4621      	mov	r1, r4
 80089b4:	4630      	mov	r0, r6
 80089b6:	4798      	blx	r3
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d0eb      	beq.n	8008994 <__ssvfiscanf_r+0x18c>
 80089bc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80089be:	2800      	cmp	r0, #0
 80089c0:	f040 8084 	bne.w	8008acc <__ssvfiscanf_r+0x2c4>
 80089c4:	f04f 30ff 	mov.w	r0, #4294967295
 80089c8:	e086      	b.n	8008ad8 <__ssvfiscanf_r+0x2d0>
 80089ca:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80089cc:	f042 0220 	orr.w	r2, r2, #32
 80089d0:	9241      	str	r2, [sp, #260]	; 0x104
 80089d2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80089d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089d8:	9241      	str	r2, [sp, #260]	; 0x104
 80089da:	2210      	movs	r2, #16
 80089dc:	2b6f      	cmp	r3, #111	; 0x6f
 80089de:	9242      	str	r2, [sp, #264]	; 0x108
 80089e0:	bf34      	ite	cc
 80089e2:	2303      	movcc	r3, #3
 80089e4:	2304      	movcs	r3, #4
 80089e6:	9347      	str	r3, [sp, #284]	; 0x11c
 80089e8:	6863      	ldr	r3, [r4, #4]
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	dd41      	ble.n	8008a72 <__ssvfiscanf_r+0x26a>
 80089ee:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80089f0:	0659      	lsls	r1, r3, #25
 80089f2:	d404      	bmi.n	80089fe <__ssvfiscanf_r+0x1f6>
 80089f4:	6823      	ldr	r3, [r4, #0]
 80089f6:	781a      	ldrb	r2, [r3, #0]
 80089f8:	5cba      	ldrb	r2, [r7, r2]
 80089fa:	0712      	lsls	r2, r2, #28
 80089fc:	d440      	bmi.n	8008a80 <__ssvfiscanf_r+0x278>
 80089fe:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008a00:	2b02      	cmp	r3, #2
 8008a02:	dc4f      	bgt.n	8008aa4 <__ssvfiscanf_r+0x29c>
 8008a04:	466b      	mov	r3, sp
 8008a06:	4622      	mov	r2, r4
 8008a08:	a941      	add	r1, sp, #260	; 0x104
 8008a0a:	4630      	mov	r0, r6
 8008a0c:	f000 fa08 	bl	8008e20 <_scanf_chars>
 8008a10:	2801      	cmp	r0, #1
 8008a12:	d065      	beq.n	8008ae0 <__ssvfiscanf_r+0x2d8>
 8008a14:	2802      	cmp	r0, #2
 8008a16:	f47f af21 	bne.w	800885c <__ssvfiscanf_r+0x54>
 8008a1a:	e7cf      	b.n	80089bc <__ssvfiscanf_r+0x1b4>
 8008a1c:	220a      	movs	r2, #10
 8008a1e:	e7dd      	b.n	80089dc <__ssvfiscanf_r+0x1d4>
 8008a20:	2300      	movs	r3, #0
 8008a22:	9342      	str	r3, [sp, #264]	; 0x108
 8008a24:	2303      	movs	r3, #3
 8008a26:	e7de      	b.n	80089e6 <__ssvfiscanf_r+0x1de>
 8008a28:	2308      	movs	r3, #8
 8008a2a:	9342      	str	r3, [sp, #264]	; 0x108
 8008a2c:	2304      	movs	r3, #4
 8008a2e:	e7da      	b.n	80089e6 <__ssvfiscanf_r+0x1de>
 8008a30:	4629      	mov	r1, r5
 8008a32:	4640      	mov	r0, r8
 8008a34:	f000 fb40 	bl	80090b8 <__sccl>
 8008a38:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a3e:	9341      	str	r3, [sp, #260]	; 0x104
 8008a40:	4605      	mov	r5, r0
 8008a42:	2301      	movs	r3, #1
 8008a44:	e7cf      	b.n	80089e6 <__ssvfiscanf_r+0x1de>
 8008a46:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008a48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a4c:	9341      	str	r3, [sp, #260]	; 0x104
 8008a4e:	2300      	movs	r3, #0
 8008a50:	e7c9      	b.n	80089e6 <__ssvfiscanf_r+0x1de>
 8008a52:	2302      	movs	r3, #2
 8008a54:	e7c7      	b.n	80089e6 <__ssvfiscanf_r+0x1de>
 8008a56:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008a58:	06c3      	lsls	r3, r0, #27
 8008a5a:	f53f aeff 	bmi.w	800885c <__ssvfiscanf_r+0x54>
 8008a5e:	9b00      	ldr	r3, [sp, #0]
 8008a60:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008a62:	1d19      	adds	r1, r3, #4
 8008a64:	9100      	str	r1, [sp, #0]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	07c0      	lsls	r0, r0, #31
 8008a6a:	bf4c      	ite	mi
 8008a6c:	801a      	strhmi	r2, [r3, #0]
 8008a6e:	601a      	strpl	r2, [r3, #0]
 8008a70:	e6f4      	b.n	800885c <__ssvfiscanf_r+0x54>
 8008a72:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a74:	4621      	mov	r1, r4
 8008a76:	4630      	mov	r0, r6
 8008a78:	4798      	blx	r3
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	d0b7      	beq.n	80089ee <__ssvfiscanf_r+0x1e6>
 8008a7e:	e79d      	b.n	80089bc <__ssvfiscanf_r+0x1b4>
 8008a80:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008a82:	3201      	adds	r2, #1
 8008a84:	9245      	str	r2, [sp, #276]	; 0x114
 8008a86:	6862      	ldr	r2, [r4, #4]
 8008a88:	3a01      	subs	r2, #1
 8008a8a:	2a00      	cmp	r2, #0
 8008a8c:	6062      	str	r2, [r4, #4]
 8008a8e:	dd02      	ble.n	8008a96 <__ssvfiscanf_r+0x28e>
 8008a90:	3301      	adds	r3, #1
 8008a92:	6023      	str	r3, [r4, #0]
 8008a94:	e7ae      	b.n	80089f4 <__ssvfiscanf_r+0x1ec>
 8008a96:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008a98:	4621      	mov	r1, r4
 8008a9a:	4630      	mov	r0, r6
 8008a9c:	4798      	blx	r3
 8008a9e:	2800      	cmp	r0, #0
 8008aa0:	d0a8      	beq.n	80089f4 <__ssvfiscanf_r+0x1ec>
 8008aa2:	e78b      	b.n	80089bc <__ssvfiscanf_r+0x1b4>
 8008aa4:	2b04      	cmp	r3, #4
 8008aa6:	dc06      	bgt.n	8008ab6 <__ssvfiscanf_r+0x2ae>
 8008aa8:	466b      	mov	r3, sp
 8008aaa:	4622      	mov	r2, r4
 8008aac:	a941      	add	r1, sp, #260	; 0x104
 8008aae:	4630      	mov	r0, r6
 8008ab0:	f000 fa0e 	bl	8008ed0 <_scanf_i>
 8008ab4:	e7ac      	b.n	8008a10 <__ssvfiscanf_r+0x208>
 8008ab6:	4b0f      	ldr	r3, [pc, #60]	; (8008af4 <__ssvfiscanf_r+0x2ec>)
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f43f aecf 	beq.w	800885c <__ssvfiscanf_r+0x54>
 8008abe:	466b      	mov	r3, sp
 8008ac0:	4622      	mov	r2, r4
 8008ac2:	a941      	add	r1, sp, #260	; 0x104
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	f3af 8000 	nop.w
 8008aca:	e7a1      	b.n	8008a10 <__ssvfiscanf_r+0x208>
 8008acc:	89a3      	ldrh	r3, [r4, #12]
 8008ace:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008ad2:	bf18      	it	ne
 8008ad4:	f04f 30ff 	movne.w	r0, #4294967295
 8008ad8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8008adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ae0:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008ae2:	e7f9      	b.n	8008ad8 <__ssvfiscanf_r+0x2d0>
 8008ae4:	08008755 	.word	0x08008755
 8008ae8:	080087cf 	.word	0x080087cf
 8008aec:	0800970b 	.word	0x0800970b
 8008af0:	080096c2 	.word	0x080096c2
 8008af4:	00000000 	.word	0x00000000

08008af8 <_printf_common>:
 8008af8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008afc:	4616      	mov	r6, r2
 8008afe:	4699      	mov	r9, r3
 8008b00:	688a      	ldr	r2, [r1, #8]
 8008b02:	690b      	ldr	r3, [r1, #16]
 8008b04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	bfb8      	it	lt
 8008b0c:	4613      	movlt	r3, r2
 8008b0e:	6033      	str	r3, [r6, #0]
 8008b10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b14:	4607      	mov	r7, r0
 8008b16:	460c      	mov	r4, r1
 8008b18:	b10a      	cbz	r2, 8008b1e <_printf_common+0x26>
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	6033      	str	r3, [r6, #0]
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	0699      	lsls	r1, r3, #26
 8008b22:	bf42      	ittt	mi
 8008b24:	6833      	ldrmi	r3, [r6, #0]
 8008b26:	3302      	addmi	r3, #2
 8008b28:	6033      	strmi	r3, [r6, #0]
 8008b2a:	6825      	ldr	r5, [r4, #0]
 8008b2c:	f015 0506 	ands.w	r5, r5, #6
 8008b30:	d106      	bne.n	8008b40 <_printf_common+0x48>
 8008b32:	f104 0a19 	add.w	sl, r4, #25
 8008b36:	68e3      	ldr	r3, [r4, #12]
 8008b38:	6832      	ldr	r2, [r6, #0]
 8008b3a:	1a9b      	subs	r3, r3, r2
 8008b3c:	42ab      	cmp	r3, r5
 8008b3e:	dc26      	bgt.n	8008b8e <_printf_common+0x96>
 8008b40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b44:	1e13      	subs	r3, r2, #0
 8008b46:	6822      	ldr	r2, [r4, #0]
 8008b48:	bf18      	it	ne
 8008b4a:	2301      	movne	r3, #1
 8008b4c:	0692      	lsls	r2, r2, #26
 8008b4e:	d42b      	bmi.n	8008ba8 <_printf_common+0xb0>
 8008b50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b54:	4649      	mov	r1, r9
 8008b56:	4638      	mov	r0, r7
 8008b58:	47c0      	blx	r8
 8008b5a:	3001      	adds	r0, #1
 8008b5c:	d01e      	beq.n	8008b9c <_printf_common+0xa4>
 8008b5e:	6823      	ldr	r3, [r4, #0]
 8008b60:	68e5      	ldr	r5, [r4, #12]
 8008b62:	6832      	ldr	r2, [r6, #0]
 8008b64:	f003 0306 	and.w	r3, r3, #6
 8008b68:	2b04      	cmp	r3, #4
 8008b6a:	bf08      	it	eq
 8008b6c:	1aad      	subeq	r5, r5, r2
 8008b6e:	68a3      	ldr	r3, [r4, #8]
 8008b70:	6922      	ldr	r2, [r4, #16]
 8008b72:	bf0c      	ite	eq
 8008b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b78:	2500      	movne	r5, #0
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	bfc4      	itt	gt
 8008b7e:	1a9b      	subgt	r3, r3, r2
 8008b80:	18ed      	addgt	r5, r5, r3
 8008b82:	2600      	movs	r6, #0
 8008b84:	341a      	adds	r4, #26
 8008b86:	42b5      	cmp	r5, r6
 8008b88:	d11a      	bne.n	8008bc0 <_printf_common+0xc8>
 8008b8a:	2000      	movs	r0, #0
 8008b8c:	e008      	b.n	8008ba0 <_printf_common+0xa8>
 8008b8e:	2301      	movs	r3, #1
 8008b90:	4652      	mov	r2, sl
 8008b92:	4649      	mov	r1, r9
 8008b94:	4638      	mov	r0, r7
 8008b96:	47c0      	blx	r8
 8008b98:	3001      	adds	r0, #1
 8008b9a:	d103      	bne.n	8008ba4 <_printf_common+0xac>
 8008b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ba4:	3501      	adds	r5, #1
 8008ba6:	e7c6      	b.n	8008b36 <_printf_common+0x3e>
 8008ba8:	18e1      	adds	r1, r4, r3
 8008baa:	1c5a      	adds	r2, r3, #1
 8008bac:	2030      	movs	r0, #48	; 0x30
 8008bae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bb2:	4422      	add	r2, r4
 8008bb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008bbc:	3302      	adds	r3, #2
 8008bbe:	e7c7      	b.n	8008b50 <_printf_common+0x58>
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	4622      	mov	r2, r4
 8008bc4:	4649      	mov	r1, r9
 8008bc6:	4638      	mov	r0, r7
 8008bc8:	47c0      	blx	r8
 8008bca:	3001      	adds	r0, #1
 8008bcc:	d0e6      	beq.n	8008b9c <_printf_common+0xa4>
 8008bce:	3601      	adds	r6, #1
 8008bd0:	e7d9      	b.n	8008b86 <_printf_common+0x8e>
	...

08008bd4 <_printf_i>:
 8008bd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bd8:	460c      	mov	r4, r1
 8008bda:	4691      	mov	r9, r2
 8008bdc:	7e27      	ldrb	r7, [r4, #24]
 8008bde:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008be0:	2f78      	cmp	r7, #120	; 0x78
 8008be2:	4680      	mov	r8, r0
 8008be4:	469a      	mov	sl, r3
 8008be6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bea:	d807      	bhi.n	8008bfc <_printf_i+0x28>
 8008bec:	2f62      	cmp	r7, #98	; 0x62
 8008bee:	d80a      	bhi.n	8008c06 <_printf_i+0x32>
 8008bf0:	2f00      	cmp	r7, #0
 8008bf2:	f000 80d8 	beq.w	8008da6 <_printf_i+0x1d2>
 8008bf6:	2f58      	cmp	r7, #88	; 0x58
 8008bf8:	f000 80a3 	beq.w	8008d42 <_printf_i+0x16e>
 8008bfc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c04:	e03a      	b.n	8008c7c <_printf_i+0xa8>
 8008c06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c0a:	2b15      	cmp	r3, #21
 8008c0c:	d8f6      	bhi.n	8008bfc <_printf_i+0x28>
 8008c0e:	a001      	add	r0, pc, #4	; (adr r0, 8008c14 <_printf_i+0x40>)
 8008c10:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8008c14:	08008c6d 	.word	0x08008c6d
 8008c18:	08008c81 	.word	0x08008c81
 8008c1c:	08008bfd 	.word	0x08008bfd
 8008c20:	08008bfd 	.word	0x08008bfd
 8008c24:	08008bfd 	.word	0x08008bfd
 8008c28:	08008bfd 	.word	0x08008bfd
 8008c2c:	08008c81 	.word	0x08008c81
 8008c30:	08008bfd 	.word	0x08008bfd
 8008c34:	08008bfd 	.word	0x08008bfd
 8008c38:	08008bfd 	.word	0x08008bfd
 8008c3c:	08008bfd 	.word	0x08008bfd
 8008c40:	08008d8d 	.word	0x08008d8d
 8008c44:	08008cb1 	.word	0x08008cb1
 8008c48:	08008d6f 	.word	0x08008d6f
 8008c4c:	08008bfd 	.word	0x08008bfd
 8008c50:	08008bfd 	.word	0x08008bfd
 8008c54:	08008daf 	.word	0x08008daf
 8008c58:	08008bfd 	.word	0x08008bfd
 8008c5c:	08008cb1 	.word	0x08008cb1
 8008c60:	08008bfd 	.word	0x08008bfd
 8008c64:	08008bfd 	.word	0x08008bfd
 8008c68:	08008d77 	.word	0x08008d77
 8008c6c:	680b      	ldr	r3, [r1, #0]
 8008c6e:	1d1a      	adds	r2, r3, #4
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	600a      	str	r2, [r1, #0]
 8008c74:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008c78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e0a3      	b.n	8008dc8 <_printf_i+0x1f4>
 8008c80:	6825      	ldr	r5, [r4, #0]
 8008c82:	6808      	ldr	r0, [r1, #0]
 8008c84:	062e      	lsls	r6, r5, #24
 8008c86:	f100 0304 	add.w	r3, r0, #4
 8008c8a:	d50a      	bpl.n	8008ca2 <_printf_i+0xce>
 8008c8c:	6805      	ldr	r5, [r0, #0]
 8008c8e:	600b      	str	r3, [r1, #0]
 8008c90:	2d00      	cmp	r5, #0
 8008c92:	da03      	bge.n	8008c9c <_printf_i+0xc8>
 8008c94:	232d      	movs	r3, #45	; 0x2d
 8008c96:	426d      	negs	r5, r5
 8008c98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c9c:	485e      	ldr	r0, [pc, #376]	; (8008e18 <_printf_i+0x244>)
 8008c9e:	230a      	movs	r3, #10
 8008ca0:	e019      	b.n	8008cd6 <_printf_i+0x102>
 8008ca2:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008ca6:	6805      	ldr	r5, [r0, #0]
 8008ca8:	600b      	str	r3, [r1, #0]
 8008caa:	bf18      	it	ne
 8008cac:	b22d      	sxthne	r5, r5
 8008cae:	e7ef      	b.n	8008c90 <_printf_i+0xbc>
 8008cb0:	680b      	ldr	r3, [r1, #0]
 8008cb2:	6825      	ldr	r5, [r4, #0]
 8008cb4:	1d18      	adds	r0, r3, #4
 8008cb6:	6008      	str	r0, [r1, #0]
 8008cb8:	0628      	lsls	r0, r5, #24
 8008cba:	d501      	bpl.n	8008cc0 <_printf_i+0xec>
 8008cbc:	681d      	ldr	r5, [r3, #0]
 8008cbe:	e002      	b.n	8008cc6 <_printf_i+0xf2>
 8008cc0:	0669      	lsls	r1, r5, #25
 8008cc2:	d5fb      	bpl.n	8008cbc <_printf_i+0xe8>
 8008cc4:	881d      	ldrh	r5, [r3, #0]
 8008cc6:	4854      	ldr	r0, [pc, #336]	; (8008e18 <_printf_i+0x244>)
 8008cc8:	2f6f      	cmp	r7, #111	; 0x6f
 8008cca:	bf0c      	ite	eq
 8008ccc:	2308      	moveq	r3, #8
 8008cce:	230a      	movne	r3, #10
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cd6:	6866      	ldr	r6, [r4, #4]
 8008cd8:	60a6      	str	r6, [r4, #8]
 8008cda:	2e00      	cmp	r6, #0
 8008cdc:	bfa2      	ittt	ge
 8008cde:	6821      	ldrge	r1, [r4, #0]
 8008ce0:	f021 0104 	bicge.w	r1, r1, #4
 8008ce4:	6021      	strge	r1, [r4, #0]
 8008ce6:	b90d      	cbnz	r5, 8008cec <_printf_i+0x118>
 8008ce8:	2e00      	cmp	r6, #0
 8008cea:	d04d      	beq.n	8008d88 <_printf_i+0x1b4>
 8008cec:	4616      	mov	r6, r2
 8008cee:	fbb5 f1f3 	udiv	r1, r5, r3
 8008cf2:	fb03 5711 	mls	r7, r3, r1, r5
 8008cf6:	5dc7      	ldrb	r7, [r0, r7]
 8008cf8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008cfc:	462f      	mov	r7, r5
 8008cfe:	42bb      	cmp	r3, r7
 8008d00:	460d      	mov	r5, r1
 8008d02:	d9f4      	bls.n	8008cee <_printf_i+0x11a>
 8008d04:	2b08      	cmp	r3, #8
 8008d06:	d10b      	bne.n	8008d20 <_printf_i+0x14c>
 8008d08:	6823      	ldr	r3, [r4, #0]
 8008d0a:	07df      	lsls	r7, r3, #31
 8008d0c:	d508      	bpl.n	8008d20 <_printf_i+0x14c>
 8008d0e:	6923      	ldr	r3, [r4, #16]
 8008d10:	6861      	ldr	r1, [r4, #4]
 8008d12:	4299      	cmp	r1, r3
 8008d14:	bfde      	ittt	le
 8008d16:	2330      	movle	r3, #48	; 0x30
 8008d18:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008d1c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008d20:	1b92      	subs	r2, r2, r6
 8008d22:	6122      	str	r2, [r4, #16]
 8008d24:	f8cd a000 	str.w	sl, [sp]
 8008d28:	464b      	mov	r3, r9
 8008d2a:	aa03      	add	r2, sp, #12
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	4640      	mov	r0, r8
 8008d30:	f7ff fee2 	bl	8008af8 <_printf_common>
 8008d34:	3001      	adds	r0, #1
 8008d36:	d14c      	bne.n	8008dd2 <_printf_i+0x1fe>
 8008d38:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3c:	b004      	add	sp, #16
 8008d3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d42:	4835      	ldr	r0, [pc, #212]	; (8008e18 <_printf_i+0x244>)
 8008d44:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	680e      	ldr	r6, [r1, #0]
 8008d4c:	061f      	lsls	r7, r3, #24
 8008d4e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008d52:	600e      	str	r6, [r1, #0]
 8008d54:	d514      	bpl.n	8008d80 <_printf_i+0x1ac>
 8008d56:	07d9      	lsls	r1, r3, #31
 8008d58:	bf44      	itt	mi
 8008d5a:	f043 0320 	orrmi.w	r3, r3, #32
 8008d5e:	6023      	strmi	r3, [r4, #0]
 8008d60:	b91d      	cbnz	r5, 8008d6a <_printf_i+0x196>
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	f023 0320 	bic.w	r3, r3, #32
 8008d68:	6023      	str	r3, [r4, #0]
 8008d6a:	2310      	movs	r3, #16
 8008d6c:	e7b0      	b.n	8008cd0 <_printf_i+0xfc>
 8008d6e:	6823      	ldr	r3, [r4, #0]
 8008d70:	f043 0320 	orr.w	r3, r3, #32
 8008d74:	6023      	str	r3, [r4, #0]
 8008d76:	2378      	movs	r3, #120	; 0x78
 8008d78:	4828      	ldr	r0, [pc, #160]	; (8008e1c <_printf_i+0x248>)
 8008d7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d7e:	e7e3      	b.n	8008d48 <_printf_i+0x174>
 8008d80:	065e      	lsls	r6, r3, #25
 8008d82:	bf48      	it	mi
 8008d84:	b2ad      	uxthmi	r5, r5
 8008d86:	e7e6      	b.n	8008d56 <_printf_i+0x182>
 8008d88:	4616      	mov	r6, r2
 8008d8a:	e7bb      	b.n	8008d04 <_printf_i+0x130>
 8008d8c:	680b      	ldr	r3, [r1, #0]
 8008d8e:	6826      	ldr	r6, [r4, #0]
 8008d90:	6960      	ldr	r0, [r4, #20]
 8008d92:	1d1d      	adds	r5, r3, #4
 8008d94:	600d      	str	r5, [r1, #0]
 8008d96:	0635      	lsls	r5, r6, #24
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	d501      	bpl.n	8008da0 <_printf_i+0x1cc>
 8008d9c:	6018      	str	r0, [r3, #0]
 8008d9e:	e002      	b.n	8008da6 <_printf_i+0x1d2>
 8008da0:	0671      	lsls	r1, r6, #25
 8008da2:	d5fb      	bpl.n	8008d9c <_printf_i+0x1c8>
 8008da4:	8018      	strh	r0, [r3, #0]
 8008da6:	2300      	movs	r3, #0
 8008da8:	6123      	str	r3, [r4, #16]
 8008daa:	4616      	mov	r6, r2
 8008dac:	e7ba      	b.n	8008d24 <_printf_i+0x150>
 8008dae:	680b      	ldr	r3, [r1, #0]
 8008db0:	1d1a      	adds	r2, r3, #4
 8008db2:	600a      	str	r2, [r1, #0]
 8008db4:	681e      	ldr	r6, [r3, #0]
 8008db6:	6862      	ldr	r2, [r4, #4]
 8008db8:	2100      	movs	r1, #0
 8008dba:	4630      	mov	r0, r6
 8008dbc:	f7f7 fa10 	bl	80001e0 <memchr>
 8008dc0:	b108      	cbz	r0, 8008dc6 <_printf_i+0x1f2>
 8008dc2:	1b80      	subs	r0, r0, r6
 8008dc4:	6060      	str	r0, [r4, #4]
 8008dc6:	6863      	ldr	r3, [r4, #4]
 8008dc8:	6123      	str	r3, [r4, #16]
 8008dca:	2300      	movs	r3, #0
 8008dcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dd0:	e7a8      	b.n	8008d24 <_printf_i+0x150>
 8008dd2:	6923      	ldr	r3, [r4, #16]
 8008dd4:	4632      	mov	r2, r6
 8008dd6:	4649      	mov	r1, r9
 8008dd8:	4640      	mov	r0, r8
 8008dda:	47d0      	blx	sl
 8008ddc:	3001      	adds	r0, #1
 8008dde:	d0ab      	beq.n	8008d38 <_printf_i+0x164>
 8008de0:	6823      	ldr	r3, [r4, #0]
 8008de2:	079b      	lsls	r3, r3, #30
 8008de4:	d413      	bmi.n	8008e0e <_printf_i+0x23a>
 8008de6:	68e0      	ldr	r0, [r4, #12]
 8008de8:	9b03      	ldr	r3, [sp, #12]
 8008dea:	4298      	cmp	r0, r3
 8008dec:	bfb8      	it	lt
 8008dee:	4618      	movlt	r0, r3
 8008df0:	e7a4      	b.n	8008d3c <_printf_i+0x168>
 8008df2:	2301      	movs	r3, #1
 8008df4:	4632      	mov	r2, r6
 8008df6:	4649      	mov	r1, r9
 8008df8:	4640      	mov	r0, r8
 8008dfa:	47d0      	blx	sl
 8008dfc:	3001      	adds	r0, #1
 8008dfe:	d09b      	beq.n	8008d38 <_printf_i+0x164>
 8008e00:	3501      	adds	r5, #1
 8008e02:	68e3      	ldr	r3, [r4, #12]
 8008e04:	9903      	ldr	r1, [sp, #12]
 8008e06:	1a5b      	subs	r3, r3, r1
 8008e08:	42ab      	cmp	r3, r5
 8008e0a:	dcf2      	bgt.n	8008df2 <_printf_i+0x21e>
 8008e0c:	e7eb      	b.n	8008de6 <_printf_i+0x212>
 8008e0e:	2500      	movs	r5, #0
 8008e10:	f104 0619 	add.w	r6, r4, #25
 8008e14:	e7f5      	b.n	8008e02 <_printf_i+0x22e>
 8008e16:	bf00      	nop
 8008e18:	080096cd 	.word	0x080096cd
 8008e1c:	080096de 	.word	0x080096de

08008e20 <_scanf_chars>:
 8008e20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e24:	4615      	mov	r5, r2
 8008e26:	688a      	ldr	r2, [r1, #8]
 8008e28:	4680      	mov	r8, r0
 8008e2a:	460c      	mov	r4, r1
 8008e2c:	b932      	cbnz	r2, 8008e3c <_scanf_chars+0x1c>
 8008e2e:	698a      	ldr	r2, [r1, #24]
 8008e30:	2a00      	cmp	r2, #0
 8008e32:	bf0c      	ite	eq
 8008e34:	2201      	moveq	r2, #1
 8008e36:	f04f 32ff 	movne.w	r2, #4294967295
 8008e3a:	608a      	str	r2, [r1, #8]
 8008e3c:	6822      	ldr	r2, [r4, #0]
 8008e3e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8008ecc <_scanf_chars+0xac>
 8008e42:	06d1      	lsls	r1, r2, #27
 8008e44:	bf5f      	itttt	pl
 8008e46:	681a      	ldrpl	r2, [r3, #0]
 8008e48:	1d11      	addpl	r1, r2, #4
 8008e4a:	6019      	strpl	r1, [r3, #0]
 8008e4c:	6816      	ldrpl	r6, [r2, #0]
 8008e4e:	2700      	movs	r7, #0
 8008e50:	69a0      	ldr	r0, [r4, #24]
 8008e52:	b188      	cbz	r0, 8008e78 <_scanf_chars+0x58>
 8008e54:	2801      	cmp	r0, #1
 8008e56:	d107      	bne.n	8008e68 <_scanf_chars+0x48>
 8008e58:	682b      	ldr	r3, [r5, #0]
 8008e5a:	781a      	ldrb	r2, [r3, #0]
 8008e5c:	6963      	ldr	r3, [r4, #20]
 8008e5e:	5c9b      	ldrb	r3, [r3, r2]
 8008e60:	b953      	cbnz	r3, 8008e78 <_scanf_chars+0x58>
 8008e62:	bb27      	cbnz	r7, 8008eae <_scanf_chars+0x8e>
 8008e64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e68:	2802      	cmp	r0, #2
 8008e6a:	d120      	bne.n	8008eae <_scanf_chars+0x8e>
 8008e6c:	682b      	ldr	r3, [r5, #0]
 8008e6e:	781b      	ldrb	r3, [r3, #0]
 8008e70:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008e74:	071b      	lsls	r3, r3, #28
 8008e76:	d41a      	bmi.n	8008eae <_scanf_chars+0x8e>
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	06da      	lsls	r2, r3, #27
 8008e7c:	bf5e      	ittt	pl
 8008e7e:	682b      	ldrpl	r3, [r5, #0]
 8008e80:	781b      	ldrbpl	r3, [r3, #0]
 8008e82:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008e86:	682a      	ldr	r2, [r5, #0]
 8008e88:	686b      	ldr	r3, [r5, #4]
 8008e8a:	3201      	adds	r2, #1
 8008e8c:	602a      	str	r2, [r5, #0]
 8008e8e:	68a2      	ldr	r2, [r4, #8]
 8008e90:	3b01      	subs	r3, #1
 8008e92:	3a01      	subs	r2, #1
 8008e94:	606b      	str	r3, [r5, #4]
 8008e96:	3701      	adds	r7, #1
 8008e98:	60a2      	str	r2, [r4, #8]
 8008e9a:	b142      	cbz	r2, 8008eae <_scanf_chars+0x8e>
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	dcd7      	bgt.n	8008e50 <_scanf_chars+0x30>
 8008ea0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008ea4:	4629      	mov	r1, r5
 8008ea6:	4640      	mov	r0, r8
 8008ea8:	4798      	blx	r3
 8008eaa:	2800      	cmp	r0, #0
 8008eac:	d0d0      	beq.n	8008e50 <_scanf_chars+0x30>
 8008eae:	6823      	ldr	r3, [r4, #0]
 8008eb0:	f013 0310 	ands.w	r3, r3, #16
 8008eb4:	d105      	bne.n	8008ec2 <_scanf_chars+0xa2>
 8008eb6:	68e2      	ldr	r2, [r4, #12]
 8008eb8:	3201      	adds	r2, #1
 8008eba:	60e2      	str	r2, [r4, #12]
 8008ebc:	69a2      	ldr	r2, [r4, #24]
 8008ebe:	b102      	cbz	r2, 8008ec2 <_scanf_chars+0xa2>
 8008ec0:	7033      	strb	r3, [r6, #0]
 8008ec2:	6923      	ldr	r3, [r4, #16]
 8008ec4:	441f      	add	r7, r3
 8008ec6:	6127      	str	r7, [r4, #16]
 8008ec8:	2000      	movs	r0, #0
 8008eca:	e7cb      	b.n	8008e64 <_scanf_chars+0x44>
 8008ecc:	0800970b 	.word	0x0800970b

08008ed0 <_scanf_i>:
 8008ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ed4:	4698      	mov	r8, r3
 8008ed6:	4b74      	ldr	r3, [pc, #464]	; (80090a8 <_scanf_i+0x1d8>)
 8008ed8:	460c      	mov	r4, r1
 8008eda:	4682      	mov	sl, r0
 8008edc:	4616      	mov	r6, r2
 8008ede:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008ee2:	b087      	sub	sp, #28
 8008ee4:	ab03      	add	r3, sp, #12
 8008ee6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008eea:	4b70      	ldr	r3, [pc, #448]	; (80090ac <_scanf_i+0x1dc>)
 8008eec:	69a1      	ldr	r1, [r4, #24]
 8008eee:	4a70      	ldr	r2, [pc, #448]	; (80090b0 <_scanf_i+0x1e0>)
 8008ef0:	2903      	cmp	r1, #3
 8008ef2:	bf18      	it	ne
 8008ef4:	461a      	movne	r2, r3
 8008ef6:	68a3      	ldr	r3, [r4, #8]
 8008ef8:	9201      	str	r2, [sp, #4]
 8008efa:	1e5a      	subs	r2, r3, #1
 8008efc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008f00:	bf88      	it	hi
 8008f02:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008f06:	4627      	mov	r7, r4
 8008f08:	bf82      	ittt	hi
 8008f0a:	eb03 0905 	addhi.w	r9, r3, r5
 8008f0e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008f12:	60a3      	strhi	r3, [r4, #8]
 8008f14:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008f18:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008f1c:	bf98      	it	ls
 8008f1e:	f04f 0900 	movls.w	r9, #0
 8008f22:	6023      	str	r3, [r4, #0]
 8008f24:	463d      	mov	r5, r7
 8008f26:	f04f 0b00 	mov.w	fp, #0
 8008f2a:	6831      	ldr	r1, [r6, #0]
 8008f2c:	ab03      	add	r3, sp, #12
 8008f2e:	7809      	ldrb	r1, [r1, #0]
 8008f30:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008f34:	2202      	movs	r2, #2
 8008f36:	f7f7 f953 	bl	80001e0 <memchr>
 8008f3a:	b328      	cbz	r0, 8008f88 <_scanf_i+0xb8>
 8008f3c:	f1bb 0f01 	cmp.w	fp, #1
 8008f40:	d159      	bne.n	8008ff6 <_scanf_i+0x126>
 8008f42:	6862      	ldr	r2, [r4, #4]
 8008f44:	b92a      	cbnz	r2, 8008f52 <_scanf_i+0x82>
 8008f46:	6822      	ldr	r2, [r4, #0]
 8008f48:	2308      	movs	r3, #8
 8008f4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f4e:	6063      	str	r3, [r4, #4]
 8008f50:	6022      	str	r2, [r4, #0]
 8008f52:	6822      	ldr	r2, [r4, #0]
 8008f54:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008f58:	6022      	str	r2, [r4, #0]
 8008f5a:	68a2      	ldr	r2, [r4, #8]
 8008f5c:	1e51      	subs	r1, r2, #1
 8008f5e:	60a1      	str	r1, [r4, #8]
 8008f60:	b192      	cbz	r2, 8008f88 <_scanf_i+0xb8>
 8008f62:	6832      	ldr	r2, [r6, #0]
 8008f64:	1c51      	adds	r1, r2, #1
 8008f66:	6031      	str	r1, [r6, #0]
 8008f68:	7812      	ldrb	r2, [r2, #0]
 8008f6a:	f805 2b01 	strb.w	r2, [r5], #1
 8008f6e:	6872      	ldr	r2, [r6, #4]
 8008f70:	3a01      	subs	r2, #1
 8008f72:	2a00      	cmp	r2, #0
 8008f74:	6072      	str	r2, [r6, #4]
 8008f76:	dc07      	bgt.n	8008f88 <_scanf_i+0xb8>
 8008f78:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008f7c:	4631      	mov	r1, r6
 8008f7e:	4650      	mov	r0, sl
 8008f80:	4790      	blx	r2
 8008f82:	2800      	cmp	r0, #0
 8008f84:	f040 8085 	bne.w	8009092 <_scanf_i+0x1c2>
 8008f88:	f10b 0b01 	add.w	fp, fp, #1
 8008f8c:	f1bb 0f03 	cmp.w	fp, #3
 8008f90:	d1cb      	bne.n	8008f2a <_scanf_i+0x5a>
 8008f92:	6863      	ldr	r3, [r4, #4]
 8008f94:	b90b      	cbnz	r3, 8008f9a <_scanf_i+0xca>
 8008f96:	230a      	movs	r3, #10
 8008f98:	6063      	str	r3, [r4, #4]
 8008f9a:	6863      	ldr	r3, [r4, #4]
 8008f9c:	4945      	ldr	r1, [pc, #276]	; (80090b4 <_scanf_i+0x1e4>)
 8008f9e:	6960      	ldr	r0, [r4, #20]
 8008fa0:	1ac9      	subs	r1, r1, r3
 8008fa2:	f000 f889 	bl	80090b8 <__sccl>
 8008fa6:	f04f 0b00 	mov.w	fp, #0
 8008faa:	68a3      	ldr	r3, [r4, #8]
 8008fac:	6822      	ldr	r2, [r4, #0]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d03d      	beq.n	800902e <_scanf_i+0x15e>
 8008fb2:	6831      	ldr	r1, [r6, #0]
 8008fb4:	6960      	ldr	r0, [r4, #20]
 8008fb6:	f891 c000 	ldrb.w	ip, [r1]
 8008fba:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008fbe:	2800      	cmp	r0, #0
 8008fc0:	d035      	beq.n	800902e <_scanf_i+0x15e>
 8008fc2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008fc6:	d124      	bne.n	8009012 <_scanf_i+0x142>
 8008fc8:	0510      	lsls	r0, r2, #20
 8008fca:	d522      	bpl.n	8009012 <_scanf_i+0x142>
 8008fcc:	f10b 0b01 	add.w	fp, fp, #1
 8008fd0:	f1b9 0f00 	cmp.w	r9, #0
 8008fd4:	d003      	beq.n	8008fde <_scanf_i+0x10e>
 8008fd6:	3301      	adds	r3, #1
 8008fd8:	f109 39ff 	add.w	r9, r9, #4294967295
 8008fdc:	60a3      	str	r3, [r4, #8]
 8008fde:	6873      	ldr	r3, [r6, #4]
 8008fe0:	3b01      	subs	r3, #1
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	6073      	str	r3, [r6, #4]
 8008fe6:	dd1b      	ble.n	8009020 <_scanf_i+0x150>
 8008fe8:	6833      	ldr	r3, [r6, #0]
 8008fea:	3301      	adds	r3, #1
 8008fec:	6033      	str	r3, [r6, #0]
 8008fee:	68a3      	ldr	r3, [r4, #8]
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	60a3      	str	r3, [r4, #8]
 8008ff4:	e7d9      	b.n	8008faa <_scanf_i+0xda>
 8008ff6:	f1bb 0f02 	cmp.w	fp, #2
 8008ffa:	d1ae      	bne.n	8008f5a <_scanf_i+0x8a>
 8008ffc:	6822      	ldr	r2, [r4, #0]
 8008ffe:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8009002:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8009006:	d1bf      	bne.n	8008f88 <_scanf_i+0xb8>
 8009008:	2310      	movs	r3, #16
 800900a:	6063      	str	r3, [r4, #4]
 800900c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009010:	e7a2      	b.n	8008f58 <_scanf_i+0x88>
 8009012:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8009016:	6022      	str	r2, [r4, #0]
 8009018:	780b      	ldrb	r3, [r1, #0]
 800901a:	f805 3b01 	strb.w	r3, [r5], #1
 800901e:	e7de      	b.n	8008fde <_scanf_i+0x10e>
 8009020:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009024:	4631      	mov	r1, r6
 8009026:	4650      	mov	r0, sl
 8009028:	4798      	blx	r3
 800902a:	2800      	cmp	r0, #0
 800902c:	d0df      	beq.n	8008fee <_scanf_i+0x11e>
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	05d9      	lsls	r1, r3, #23
 8009032:	d50d      	bpl.n	8009050 <_scanf_i+0x180>
 8009034:	42bd      	cmp	r5, r7
 8009036:	d909      	bls.n	800904c <_scanf_i+0x17c>
 8009038:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800903c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009040:	4632      	mov	r2, r6
 8009042:	4650      	mov	r0, sl
 8009044:	4798      	blx	r3
 8009046:	f105 39ff 	add.w	r9, r5, #4294967295
 800904a:	464d      	mov	r5, r9
 800904c:	42bd      	cmp	r5, r7
 800904e:	d028      	beq.n	80090a2 <_scanf_i+0x1d2>
 8009050:	6822      	ldr	r2, [r4, #0]
 8009052:	f012 0210 	ands.w	r2, r2, #16
 8009056:	d113      	bne.n	8009080 <_scanf_i+0x1b0>
 8009058:	702a      	strb	r2, [r5, #0]
 800905a:	6863      	ldr	r3, [r4, #4]
 800905c:	9e01      	ldr	r6, [sp, #4]
 800905e:	4639      	mov	r1, r7
 8009060:	4650      	mov	r0, sl
 8009062:	47b0      	blx	r6
 8009064:	f8d8 3000 	ldr.w	r3, [r8]
 8009068:	6821      	ldr	r1, [r4, #0]
 800906a:	1d1a      	adds	r2, r3, #4
 800906c:	f8c8 2000 	str.w	r2, [r8]
 8009070:	f011 0f20 	tst.w	r1, #32
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	d00f      	beq.n	8009098 <_scanf_i+0x1c8>
 8009078:	6018      	str	r0, [r3, #0]
 800907a:	68e3      	ldr	r3, [r4, #12]
 800907c:	3301      	adds	r3, #1
 800907e:	60e3      	str	r3, [r4, #12]
 8009080:	1bed      	subs	r5, r5, r7
 8009082:	44ab      	add	fp, r5
 8009084:	6925      	ldr	r5, [r4, #16]
 8009086:	445d      	add	r5, fp
 8009088:	6125      	str	r5, [r4, #16]
 800908a:	2000      	movs	r0, #0
 800908c:	b007      	add	sp, #28
 800908e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009092:	f04f 0b00 	mov.w	fp, #0
 8009096:	e7ca      	b.n	800902e <_scanf_i+0x15e>
 8009098:	07ca      	lsls	r2, r1, #31
 800909a:	bf4c      	ite	mi
 800909c:	8018      	strhmi	r0, [r3, #0]
 800909e:	6018      	strpl	r0, [r3, #0]
 80090a0:	e7eb      	b.n	800907a <_scanf_i+0x1aa>
 80090a2:	2001      	movs	r0, #1
 80090a4:	e7f2      	b.n	800908c <_scanf_i+0x1bc>
 80090a6:	bf00      	nop
 80090a8:	08009668 	.word	0x08009668
 80090ac:	08009331 	.word	0x08009331
 80090b0:	08009235 	.word	0x08009235
 80090b4:	08009708 	.word	0x08009708

080090b8 <__sccl>:
 80090b8:	b570      	push	{r4, r5, r6, lr}
 80090ba:	780b      	ldrb	r3, [r1, #0]
 80090bc:	4604      	mov	r4, r0
 80090be:	2b5e      	cmp	r3, #94	; 0x5e
 80090c0:	bf0b      	itete	eq
 80090c2:	784b      	ldrbeq	r3, [r1, #1]
 80090c4:	1c48      	addne	r0, r1, #1
 80090c6:	1c88      	addeq	r0, r1, #2
 80090c8:	2200      	movne	r2, #0
 80090ca:	bf08      	it	eq
 80090cc:	2201      	moveq	r2, #1
 80090ce:	1e61      	subs	r1, r4, #1
 80090d0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80090d4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80090d8:	42a9      	cmp	r1, r5
 80090da:	d1fb      	bne.n	80090d4 <__sccl+0x1c>
 80090dc:	b90b      	cbnz	r3, 80090e2 <__sccl+0x2a>
 80090de:	3801      	subs	r0, #1
 80090e0:	bd70      	pop	{r4, r5, r6, pc}
 80090e2:	f082 0101 	eor.w	r1, r2, #1
 80090e6:	54e1      	strb	r1, [r4, r3]
 80090e8:	1c42      	adds	r2, r0, #1
 80090ea:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80090ee:	2d2d      	cmp	r5, #45	; 0x2d
 80090f0:	f102 36ff 	add.w	r6, r2, #4294967295
 80090f4:	4610      	mov	r0, r2
 80090f6:	d006      	beq.n	8009106 <__sccl+0x4e>
 80090f8:	2d5d      	cmp	r5, #93	; 0x5d
 80090fa:	d0f1      	beq.n	80090e0 <__sccl+0x28>
 80090fc:	b90d      	cbnz	r5, 8009102 <__sccl+0x4a>
 80090fe:	4630      	mov	r0, r6
 8009100:	e7ee      	b.n	80090e0 <__sccl+0x28>
 8009102:	462b      	mov	r3, r5
 8009104:	e7ef      	b.n	80090e6 <__sccl+0x2e>
 8009106:	7816      	ldrb	r6, [r2, #0]
 8009108:	2e5d      	cmp	r6, #93	; 0x5d
 800910a:	d0fa      	beq.n	8009102 <__sccl+0x4a>
 800910c:	42b3      	cmp	r3, r6
 800910e:	dcf8      	bgt.n	8009102 <__sccl+0x4a>
 8009110:	4618      	mov	r0, r3
 8009112:	3001      	adds	r0, #1
 8009114:	4286      	cmp	r6, r0
 8009116:	5421      	strb	r1, [r4, r0]
 8009118:	dcfb      	bgt.n	8009112 <__sccl+0x5a>
 800911a:	43d8      	mvns	r0, r3
 800911c:	4430      	add	r0, r6
 800911e:	1c5d      	adds	r5, r3, #1
 8009120:	42b3      	cmp	r3, r6
 8009122:	bfa8      	it	ge
 8009124:	2000      	movge	r0, #0
 8009126:	182b      	adds	r3, r5, r0
 8009128:	3202      	adds	r2, #2
 800912a:	e7de      	b.n	80090ea <__sccl+0x32>

0800912c <_strtol_l.isra.0>:
 800912c:	2b01      	cmp	r3, #1
 800912e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009132:	d001      	beq.n	8009138 <_strtol_l.isra.0+0xc>
 8009134:	2b24      	cmp	r3, #36	; 0x24
 8009136:	d906      	bls.n	8009146 <_strtol_l.isra.0+0x1a>
 8009138:	f7ff f930 	bl	800839c <__errno>
 800913c:	2316      	movs	r3, #22
 800913e:	6003      	str	r3, [r0, #0]
 8009140:	2000      	movs	r0, #0
 8009142:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009146:	4f3a      	ldr	r7, [pc, #232]	; (8009230 <_strtol_l.isra.0+0x104>)
 8009148:	468e      	mov	lr, r1
 800914a:	4676      	mov	r6, lr
 800914c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009150:	5de5      	ldrb	r5, [r4, r7]
 8009152:	f015 0508 	ands.w	r5, r5, #8
 8009156:	d1f8      	bne.n	800914a <_strtol_l.isra.0+0x1e>
 8009158:	2c2d      	cmp	r4, #45	; 0x2d
 800915a:	d134      	bne.n	80091c6 <_strtol_l.isra.0+0x9a>
 800915c:	f89e 4000 	ldrb.w	r4, [lr]
 8009160:	f04f 0801 	mov.w	r8, #1
 8009164:	f106 0e02 	add.w	lr, r6, #2
 8009168:	2b00      	cmp	r3, #0
 800916a:	d05c      	beq.n	8009226 <_strtol_l.isra.0+0xfa>
 800916c:	2b10      	cmp	r3, #16
 800916e:	d10c      	bne.n	800918a <_strtol_l.isra.0+0x5e>
 8009170:	2c30      	cmp	r4, #48	; 0x30
 8009172:	d10a      	bne.n	800918a <_strtol_l.isra.0+0x5e>
 8009174:	f89e 4000 	ldrb.w	r4, [lr]
 8009178:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800917c:	2c58      	cmp	r4, #88	; 0x58
 800917e:	d14d      	bne.n	800921c <_strtol_l.isra.0+0xf0>
 8009180:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009184:	2310      	movs	r3, #16
 8009186:	f10e 0e02 	add.w	lr, lr, #2
 800918a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800918e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009192:	2600      	movs	r6, #0
 8009194:	fbbc f9f3 	udiv	r9, ip, r3
 8009198:	4635      	mov	r5, r6
 800919a:	fb03 ca19 	mls	sl, r3, r9, ip
 800919e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80091a2:	2f09      	cmp	r7, #9
 80091a4:	d818      	bhi.n	80091d8 <_strtol_l.isra.0+0xac>
 80091a6:	463c      	mov	r4, r7
 80091a8:	42a3      	cmp	r3, r4
 80091aa:	dd24      	ble.n	80091f6 <_strtol_l.isra.0+0xca>
 80091ac:	2e00      	cmp	r6, #0
 80091ae:	db1f      	blt.n	80091f0 <_strtol_l.isra.0+0xc4>
 80091b0:	45a9      	cmp	r9, r5
 80091b2:	d31d      	bcc.n	80091f0 <_strtol_l.isra.0+0xc4>
 80091b4:	d101      	bne.n	80091ba <_strtol_l.isra.0+0x8e>
 80091b6:	45a2      	cmp	sl, r4
 80091b8:	db1a      	blt.n	80091f0 <_strtol_l.isra.0+0xc4>
 80091ba:	fb05 4503 	mla	r5, r5, r3, r4
 80091be:	2601      	movs	r6, #1
 80091c0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80091c4:	e7eb      	b.n	800919e <_strtol_l.isra.0+0x72>
 80091c6:	2c2b      	cmp	r4, #43	; 0x2b
 80091c8:	bf08      	it	eq
 80091ca:	f89e 4000 	ldrbeq.w	r4, [lr]
 80091ce:	46a8      	mov	r8, r5
 80091d0:	bf08      	it	eq
 80091d2:	f106 0e02 	addeq.w	lr, r6, #2
 80091d6:	e7c7      	b.n	8009168 <_strtol_l.isra.0+0x3c>
 80091d8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80091dc:	2f19      	cmp	r7, #25
 80091de:	d801      	bhi.n	80091e4 <_strtol_l.isra.0+0xb8>
 80091e0:	3c37      	subs	r4, #55	; 0x37
 80091e2:	e7e1      	b.n	80091a8 <_strtol_l.isra.0+0x7c>
 80091e4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80091e8:	2f19      	cmp	r7, #25
 80091ea:	d804      	bhi.n	80091f6 <_strtol_l.isra.0+0xca>
 80091ec:	3c57      	subs	r4, #87	; 0x57
 80091ee:	e7db      	b.n	80091a8 <_strtol_l.isra.0+0x7c>
 80091f0:	f04f 36ff 	mov.w	r6, #4294967295
 80091f4:	e7e4      	b.n	80091c0 <_strtol_l.isra.0+0x94>
 80091f6:	2e00      	cmp	r6, #0
 80091f8:	da05      	bge.n	8009206 <_strtol_l.isra.0+0xda>
 80091fa:	2322      	movs	r3, #34	; 0x22
 80091fc:	6003      	str	r3, [r0, #0]
 80091fe:	4665      	mov	r5, ip
 8009200:	b942      	cbnz	r2, 8009214 <_strtol_l.isra.0+0xe8>
 8009202:	4628      	mov	r0, r5
 8009204:	e79d      	b.n	8009142 <_strtol_l.isra.0+0x16>
 8009206:	f1b8 0f00 	cmp.w	r8, #0
 800920a:	d000      	beq.n	800920e <_strtol_l.isra.0+0xe2>
 800920c:	426d      	negs	r5, r5
 800920e:	2a00      	cmp	r2, #0
 8009210:	d0f7      	beq.n	8009202 <_strtol_l.isra.0+0xd6>
 8009212:	b10e      	cbz	r6, 8009218 <_strtol_l.isra.0+0xec>
 8009214:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009218:	6011      	str	r1, [r2, #0]
 800921a:	e7f2      	b.n	8009202 <_strtol_l.isra.0+0xd6>
 800921c:	2430      	movs	r4, #48	; 0x30
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1b3      	bne.n	800918a <_strtol_l.isra.0+0x5e>
 8009222:	2308      	movs	r3, #8
 8009224:	e7b1      	b.n	800918a <_strtol_l.isra.0+0x5e>
 8009226:	2c30      	cmp	r4, #48	; 0x30
 8009228:	d0a4      	beq.n	8009174 <_strtol_l.isra.0+0x48>
 800922a:	230a      	movs	r3, #10
 800922c:	e7ad      	b.n	800918a <_strtol_l.isra.0+0x5e>
 800922e:	bf00      	nop
 8009230:	0800970b 	.word	0x0800970b

08009234 <_strtol_r>:
 8009234:	f7ff bf7a 	b.w	800912c <_strtol_l.isra.0>

08009238 <_strtoul_l.isra.0>:
 8009238:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800923c:	4e3b      	ldr	r6, [pc, #236]	; (800932c <_strtoul_l.isra.0+0xf4>)
 800923e:	4686      	mov	lr, r0
 8009240:	468c      	mov	ip, r1
 8009242:	4660      	mov	r0, ip
 8009244:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8009248:	5da5      	ldrb	r5, [r4, r6]
 800924a:	f015 0508 	ands.w	r5, r5, #8
 800924e:	d1f8      	bne.n	8009242 <_strtoul_l.isra.0+0xa>
 8009250:	2c2d      	cmp	r4, #45	; 0x2d
 8009252:	d134      	bne.n	80092be <_strtoul_l.isra.0+0x86>
 8009254:	f89c 4000 	ldrb.w	r4, [ip]
 8009258:	f04f 0801 	mov.w	r8, #1
 800925c:	f100 0c02 	add.w	ip, r0, #2
 8009260:	2b00      	cmp	r3, #0
 8009262:	d05e      	beq.n	8009322 <_strtoul_l.isra.0+0xea>
 8009264:	2b10      	cmp	r3, #16
 8009266:	d10c      	bne.n	8009282 <_strtoul_l.isra.0+0x4a>
 8009268:	2c30      	cmp	r4, #48	; 0x30
 800926a:	d10a      	bne.n	8009282 <_strtoul_l.isra.0+0x4a>
 800926c:	f89c 0000 	ldrb.w	r0, [ip]
 8009270:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8009274:	2858      	cmp	r0, #88	; 0x58
 8009276:	d14f      	bne.n	8009318 <_strtoul_l.isra.0+0xe0>
 8009278:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800927c:	2310      	movs	r3, #16
 800927e:	f10c 0c02 	add.w	ip, ip, #2
 8009282:	f04f 37ff 	mov.w	r7, #4294967295
 8009286:	2500      	movs	r5, #0
 8009288:	fbb7 f7f3 	udiv	r7, r7, r3
 800928c:	fb03 f907 	mul.w	r9, r3, r7
 8009290:	ea6f 0909 	mvn.w	r9, r9
 8009294:	4628      	mov	r0, r5
 8009296:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800929a:	2e09      	cmp	r6, #9
 800929c:	d818      	bhi.n	80092d0 <_strtoul_l.isra.0+0x98>
 800929e:	4634      	mov	r4, r6
 80092a0:	42a3      	cmp	r3, r4
 80092a2:	dd24      	ble.n	80092ee <_strtoul_l.isra.0+0xb6>
 80092a4:	2d00      	cmp	r5, #0
 80092a6:	db1f      	blt.n	80092e8 <_strtoul_l.isra.0+0xb0>
 80092a8:	4287      	cmp	r7, r0
 80092aa:	d31d      	bcc.n	80092e8 <_strtoul_l.isra.0+0xb0>
 80092ac:	d101      	bne.n	80092b2 <_strtoul_l.isra.0+0x7a>
 80092ae:	45a1      	cmp	r9, r4
 80092b0:	db1a      	blt.n	80092e8 <_strtoul_l.isra.0+0xb0>
 80092b2:	fb00 4003 	mla	r0, r0, r3, r4
 80092b6:	2501      	movs	r5, #1
 80092b8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 80092bc:	e7eb      	b.n	8009296 <_strtoul_l.isra.0+0x5e>
 80092be:	2c2b      	cmp	r4, #43	; 0x2b
 80092c0:	bf08      	it	eq
 80092c2:	f89c 4000 	ldrbeq.w	r4, [ip]
 80092c6:	46a8      	mov	r8, r5
 80092c8:	bf08      	it	eq
 80092ca:	f100 0c02 	addeq.w	ip, r0, #2
 80092ce:	e7c7      	b.n	8009260 <_strtoul_l.isra.0+0x28>
 80092d0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 80092d4:	2e19      	cmp	r6, #25
 80092d6:	d801      	bhi.n	80092dc <_strtoul_l.isra.0+0xa4>
 80092d8:	3c37      	subs	r4, #55	; 0x37
 80092da:	e7e1      	b.n	80092a0 <_strtoul_l.isra.0+0x68>
 80092dc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 80092e0:	2e19      	cmp	r6, #25
 80092e2:	d804      	bhi.n	80092ee <_strtoul_l.isra.0+0xb6>
 80092e4:	3c57      	subs	r4, #87	; 0x57
 80092e6:	e7db      	b.n	80092a0 <_strtoul_l.isra.0+0x68>
 80092e8:	f04f 35ff 	mov.w	r5, #4294967295
 80092ec:	e7e4      	b.n	80092b8 <_strtoul_l.isra.0+0x80>
 80092ee:	2d00      	cmp	r5, #0
 80092f0:	da07      	bge.n	8009302 <_strtoul_l.isra.0+0xca>
 80092f2:	2322      	movs	r3, #34	; 0x22
 80092f4:	f8ce 3000 	str.w	r3, [lr]
 80092f8:	f04f 30ff 	mov.w	r0, #4294967295
 80092fc:	b942      	cbnz	r2, 8009310 <_strtoul_l.isra.0+0xd8>
 80092fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009302:	f1b8 0f00 	cmp.w	r8, #0
 8009306:	d000      	beq.n	800930a <_strtoul_l.isra.0+0xd2>
 8009308:	4240      	negs	r0, r0
 800930a:	2a00      	cmp	r2, #0
 800930c:	d0f7      	beq.n	80092fe <_strtoul_l.isra.0+0xc6>
 800930e:	b10d      	cbz	r5, 8009314 <_strtoul_l.isra.0+0xdc>
 8009310:	f10c 31ff 	add.w	r1, ip, #4294967295
 8009314:	6011      	str	r1, [r2, #0]
 8009316:	e7f2      	b.n	80092fe <_strtoul_l.isra.0+0xc6>
 8009318:	2430      	movs	r4, #48	; 0x30
 800931a:	2b00      	cmp	r3, #0
 800931c:	d1b1      	bne.n	8009282 <_strtoul_l.isra.0+0x4a>
 800931e:	2308      	movs	r3, #8
 8009320:	e7af      	b.n	8009282 <_strtoul_l.isra.0+0x4a>
 8009322:	2c30      	cmp	r4, #48	; 0x30
 8009324:	d0a2      	beq.n	800926c <_strtoul_l.isra.0+0x34>
 8009326:	230a      	movs	r3, #10
 8009328:	e7ab      	b.n	8009282 <_strtoul_l.isra.0+0x4a>
 800932a:	bf00      	nop
 800932c:	0800970b 	.word	0x0800970b

08009330 <_strtoul_r>:
 8009330:	f7ff bf82 	b.w	8009238 <_strtoul_l.isra.0>

08009334 <__submore>:
 8009334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009338:	460c      	mov	r4, r1
 800933a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800933c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009340:	4299      	cmp	r1, r3
 8009342:	d11d      	bne.n	8009380 <__submore+0x4c>
 8009344:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009348:	f000 f8a8 	bl	800949c <_malloc_r>
 800934c:	b918      	cbnz	r0, 8009356 <__submore+0x22>
 800934e:	f04f 30ff 	mov.w	r0, #4294967295
 8009352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800935a:	63a3      	str	r3, [r4, #56]	; 0x38
 800935c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009360:	6360      	str	r0, [r4, #52]	; 0x34
 8009362:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8009366:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800936a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800936e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8009372:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8009376:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800937a:	6020      	str	r0, [r4, #0]
 800937c:	2000      	movs	r0, #0
 800937e:	e7e8      	b.n	8009352 <__submore+0x1e>
 8009380:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8009382:	0077      	lsls	r7, r6, #1
 8009384:	463a      	mov	r2, r7
 8009386:	f000 f8e3 	bl	8009550 <_realloc_r>
 800938a:	4605      	mov	r5, r0
 800938c:	2800      	cmp	r0, #0
 800938e:	d0de      	beq.n	800934e <__submore+0x1a>
 8009390:	eb00 0806 	add.w	r8, r0, r6
 8009394:	4601      	mov	r1, r0
 8009396:	4632      	mov	r2, r6
 8009398:	4640      	mov	r0, r8
 800939a:	f000 f807 	bl	80093ac <memcpy>
 800939e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80093a2:	f8c4 8000 	str.w	r8, [r4]
 80093a6:	e7e9      	b.n	800937c <__submore+0x48>

080093a8 <__retarget_lock_acquire_recursive>:
 80093a8:	4770      	bx	lr

080093aa <__retarget_lock_release_recursive>:
 80093aa:	4770      	bx	lr

080093ac <memcpy>:
 80093ac:	440a      	add	r2, r1
 80093ae:	4291      	cmp	r1, r2
 80093b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80093b4:	d100      	bne.n	80093b8 <memcpy+0xc>
 80093b6:	4770      	bx	lr
 80093b8:	b510      	push	{r4, lr}
 80093ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80093be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80093c2:	4291      	cmp	r1, r2
 80093c4:	d1f9      	bne.n	80093ba <memcpy+0xe>
 80093c6:	bd10      	pop	{r4, pc}

080093c8 <memmove>:
 80093c8:	4288      	cmp	r0, r1
 80093ca:	b510      	push	{r4, lr}
 80093cc:	eb01 0402 	add.w	r4, r1, r2
 80093d0:	d902      	bls.n	80093d8 <memmove+0x10>
 80093d2:	4284      	cmp	r4, r0
 80093d4:	4623      	mov	r3, r4
 80093d6:	d807      	bhi.n	80093e8 <memmove+0x20>
 80093d8:	1e43      	subs	r3, r0, #1
 80093da:	42a1      	cmp	r1, r4
 80093dc:	d008      	beq.n	80093f0 <memmove+0x28>
 80093de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80093e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80093e6:	e7f8      	b.n	80093da <memmove+0x12>
 80093e8:	4402      	add	r2, r0
 80093ea:	4601      	mov	r1, r0
 80093ec:	428a      	cmp	r2, r1
 80093ee:	d100      	bne.n	80093f2 <memmove+0x2a>
 80093f0:	bd10      	pop	{r4, pc}
 80093f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80093f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80093fa:	e7f7      	b.n	80093ec <memmove+0x24>

080093fc <_free_r>:
 80093fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093fe:	2900      	cmp	r1, #0
 8009400:	d048      	beq.n	8009494 <_free_r+0x98>
 8009402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009406:	9001      	str	r0, [sp, #4]
 8009408:	2b00      	cmp	r3, #0
 800940a:	f1a1 0404 	sub.w	r4, r1, #4
 800940e:	bfb8      	it	lt
 8009410:	18e4      	addlt	r4, r4, r3
 8009412:	f000 f8d3 	bl	80095bc <__malloc_lock>
 8009416:	4a20      	ldr	r2, [pc, #128]	; (8009498 <_free_r+0x9c>)
 8009418:	9801      	ldr	r0, [sp, #4]
 800941a:	6813      	ldr	r3, [r2, #0]
 800941c:	4615      	mov	r5, r2
 800941e:	b933      	cbnz	r3, 800942e <_free_r+0x32>
 8009420:	6063      	str	r3, [r4, #4]
 8009422:	6014      	str	r4, [r2, #0]
 8009424:	b003      	add	sp, #12
 8009426:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800942a:	f000 b8cd 	b.w	80095c8 <__malloc_unlock>
 800942e:	42a3      	cmp	r3, r4
 8009430:	d90b      	bls.n	800944a <_free_r+0x4e>
 8009432:	6821      	ldr	r1, [r4, #0]
 8009434:	1862      	adds	r2, r4, r1
 8009436:	4293      	cmp	r3, r2
 8009438:	bf04      	itt	eq
 800943a:	681a      	ldreq	r2, [r3, #0]
 800943c:	685b      	ldreq	r3, [r3, #4]
 800943e:	6063      	str	r3, [r4, #4]
 8009440:	bf04      	itt	eq
 8009442:	1852      	addeq	r2, r2, r1
 8009444:	6022      	streq	r2, [r4, #0]
 8009446:	602c      	str	r4, [r5, #0]
 8009448:	e7ec      	b.n	8009424 <_free_r+0x28>
 800944a:	461a      	mov	r2, r3
 800944c:	685b      	ldr	r3, [r3, #4]
 800944e:	b10b      	cbz	r3, 8009454 <_free_r+0x58>
 8009450:	42a3      	cmp	r3, r4
 8009452:	d9fa      	bls.n	800944a <_free_r+0x4e>
 8009454:	6811      	ldr	r1, [r2, #0]
 8009456:	1855      	adds	r5, r2, r1
 8009458:	42a5      	cmp	r5, r4
 800945a:	d10b      	bne.n	8009474 <_free_r+0x78>
 800945c:	6824      	ldr	r4, [r4, #0]
 800945e:	4421      	add	r1, r4
 8009460:	1854      	adds	r4, r2, r1
 8009462:	42a3      	cmp	r3, r4
 8009464:	6011      	str	r1, [r2, #0]
 8009466:	d1dd      	bne.n	8009424 <_free_r+0x28>
 8009468:	681c      	ldr	r4, [r3, #0]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	6053      	str	r3, [r2, #4]
 800946e:	4421      	add	r1, r4
 8009470:	6011      	str	r1, [r2, #0]
 8009472:	e7d7      	b.n	8009424 <_free_r+0x28>
 8009474:	d902      	bls.n	800947c <_free_r+0x80>
 8009476:	230c      	movs	r3, #12
 8009478:	6003      	str	r3, [r0, #0]
 800947a:	e7d3      	b.n	8009424 <_free_r+0x28>
 800947c:	6825      	ldr	r5, [r4, #0]
 800947e:	1961      	adds	r1, r4, r5
 8009480:	428b      	cmp	r3, r1
 8009482:	bf04      	itt	eq
 8009484:	6819      	ldreq	r1, [r3, #0]
 8009486:	685b      	ldreq	r3, [r3, #4]
 8009488:	6063      	str	r3, [r4, #4]
 800948a:	bf04      	itt	eq
 800948c:	1949      	addeq	r1, r1, r5
 800948e:	6021      	streq	r1, [r4, #0]
 8009490:	6054      	str	r4, [r2, #4]
 8009492:	e7c7      	b.n	8009424 <_free_r+0x28>
 8009494:	b003      	add	sp, #12
 8009496:	bd30      	pop	{r4, r5, pc}
 8009498:	200000a4 	.word	0x200000a4

0800949c <_malloc_r>:
 800949c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949e:	1ccd      	adds	r5, r1, #3
 80094a0:	f025 0503 	bic.w	r5, r5, #3
 80094a4:	3508      	adds	r5, #8
 80094a6:	2d0c      	cmp	r5, #12
 80094a8:	bf38      	it	cc
 80094aa:	250c      	movcc	r5, #12
 80094ac:	2d00      	cmp	r5, #0
 80094ae:	4606      	mov	r6, r0
 80094b0:	db01      	blt.n	80094b6 <_malloc_r+0x1a>
 80094b2:	42a9      	cmp	r1, r5
 80094b4:	d903      	bls.n	80094be <_malloc_r+0x22>
 80094b6:	230c      	movs	r3, #12
 80094b8:	6033      	str	r3, [r6, #0]
 80094ba:	2000      	movs	r0, #0
 80094bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094be:	f000 f87d 	bl	80095bc <__malloc_lock>
 80094c2:	4921      	ldr	r1, [pc, #132]	; (8009548 <_malloc_r+0xac>)
 80094c4:	680a      	ldr	r2, [r1, #0]
 80094c6:	4614      	mov	r4, r2
 80094c8:	b99c      	cbnz	r4, 80094f2 <_malloc_r+0x56>
 80094ca:	4f20      	ldr	r7, [pc, #128]	; (800954c <_malloc_r+0xb0>)
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	b923      	cbnz	r3, 80094da <_malloc_r+0x3e>
 80094d0:	4621      	mov	r1, r4
 80094d2:	4630      	mov	r0, r6
 80094d4:	f000 f862 	bl	800959c <_sbrk_r>
 80094d8:	6038      	str	r0, [r7, #0]
 80094da:	4629      	mov	r1, r5
 80094dc:	4630      	mov	r0, r6
 80094de:	f000 f85d 	bl	800959c <_sbrk_r>
 80094e2:	1c43      	adds	r3, r0, #1
 80094e4:	d123      	bne.n	800952e <_malloc_r+0x92>
 80094e6:	230c      	movs	r3, #12
 80094e8:	6033      	str	r3, [r6, #0]
 80094ea:	4630      	mov	r0, r6
 80094ec:	f000 f86c 	bl	80095c8 <__malloc_unlock>
 80094f0:	e7e3      	b.n	80094ba <_malloc_r+0x1e>
 80094f2:	6823      	ldr	r3, [r4, #0]
 80094f4:	1b5b      	subs	r3, r3, r5
 80094f6:	d417      	bmi.n	8009528 <_malloc_r+0x8c>
 80094f8:	2b0b      	cmp	r3, #11
 80094fa:	d903      	bls.n	8009504 <_malloc_r+0x68>
 80094fc:	6023      	str	r3, [r4, #0]
 80094fe:	441c      	add	r4, r3
 8009500:	6025      	str	r5, [r4, #0]
 8009502:	e004      	b.n	800950e <_malloc_r+0x72>
 8009504:	6863      	ldr	r3, [r4, #4]
 8009506:	42a2      	cmp	r2, r4
 8009508:	bf0c      	ite	eq
 800950a:	600b      	streq	r3, [r1, #0]
 800950c:	6053      	strne	r3, [r2, #4]
 800950e:	4630      	mov	r0, r6
 8009510:	f000 f85a 	bl	80095c8 <__malloc_unlock>
 8009514:	f104 000b 	add.w	r0, r4, #11
 8009518:	1d23      	adds	r3, r4, #4
 800951a:	f020 0007 	bic.w	r0, r0, #7
 800951e:	1ac2      	subs	r2, r0, r3
 8009520:	d0cc      	beq.n	80094bc <_malloc_r+0x20>
 8009522:	1a1b      	subs	r3, r3, r0
 8009524:	50a3      	str	r3, [r4, r2]
 8009526:	e7c9      	b.n	80094bc <_malloc_r+0x20>
 8009528:	4622      	mov	r2, r4
 800952a:	6864      	ldr	r4, [r4, #4]
 800952c:	e7cc      	b.n	80094c8 <_malloc_r+0x2c>
 800952e:	1cc4      	adds	r4, r0, #3
 8009530:	f024 0403 	bic.w	r4, r4, #3
 8009534:	42a0      	cmp	r0, r4
 8009536:	d0e3      	beq.n	8009500 <_malloc_r+0x64>
 8009538:	1a21      	subs	r1, r4, r0
 800953a:	4630      	mov	r0, r6
 800953c:	f000 f82e 	bl	800959c <_sbrk_r>
 8009540:	3001      	adds	r0, #1
 8009542:	d1dd      	bne.n	8009500 <_malloc_r+0x64>
 8009544:	e7cf      	b.n	80094e6 <_malloc_r+0x4a>
 8009546:	bf00      	nop
 8009548:	200000a4 	.word	0x200000a4
 800954c:	200000a8 	.word	0x200000a8

08009550 <_realloc_r>:
 8009550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009552:	4607      	mov	r7, r0
 8009554:	4614      	mov	r4, r2
 8009556:	460e      	mov	r6, r1
 8009558:	b921      	cbnz	r1, 8009564 <_realloc_r+0x14>
 800955a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800955e:	4611      	mov	r1, r2
 8009560:	f7ff bf9c 	b.w	800949c <_malloc_r>
 8009564:	b922      	cbnz	r2, 8009570 <_realloc_r+0x20>
 8009566:	f7ff ff49 	bl	80093fc <_free_r>
 800956a:	4625      	mov	r5, r4
 800956c:	4628      	mov	r0, r5
 800956e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009570:	f000 f830 	bl	80095d4 <_malloc_usable_size_r>
 8009574:	42a0      	cmp	r0, r4
 8009576:	d20f      	bcs.n	8009598 <_realloc_r+0x48>
 8009578:	4621      	mov	r1, r4
 800957a:	4638      	mov	r0, r7
 800957c:	f7ff ff8e 	bl	800949c <_malloc_r>
 8009580:	4605      	mov	r5, r0
 8009582:	2800      	cmp	r0, #0
 8009584:	d0f2      	beq.n	800956c <_realloc_r+0x1c>
 8009586:	4631      	mov	r1, r6
 8009588:	4622      	mov	r2, r4
 800958a:	f7ff ff0f 	bl	80093ac <memcpy>
 800958e:	4631      	mov	r1, r6
 8009590:	4638      	mov	r0, r7
 8009592:	f7ff ff33 	bl	80093fc <_free_r>
 8009596:	e7e9      	b.n	800956c <_realloc_r+0x1c>
 8009598:	4635      	mov	r5, r6
 800959a:	e7e7      	b.n	800956c <_realloc_r+0x1c>

0800959c <_sbrk_r>:
 800959c:	b538      	push	{r3, r4, r5, lr}
 800959e:	4d06      	ldr	r5, [pc, #24]	; (80095b8 <_sbrk_r+0x1c>)
 80095a0:	2300      	movs	r3, #0
 80095a2:	4604      	mov	r4, r0
 80095a4:	4608      	mov	r0, r1
 80095a6:	602b      	str	r3, [r5, #0]
 80095a8:	f7f8 f9e2 	bl	8001970 <_sbrk>
 80095ac:	1c43      	adds	r3, r0, #1
 80095ae:	d102      	bne.n	80095b6 <_sbrk_r+0x1a>
 80095b0:	682b      	ldr	r3, [r5, #0]
 80095b2:	b103      	cbz	r3, 80095b6 <_sbrk_r+0x1a>
 80095b4:	6023      	str	r3, [r4, #0]
 80095b6:	bd38      	pop	{r3, r4, r5, pc}
 80095b8:	2000026c 	.word	0x2000026c

080095bc <__malloc_lock>:
 80095bc:	4801      	ldr	r0, [pc, #4]	; (80095c4 <__malloc_lock+0x8>)
 80095be:	f7ff bef3 	b.w	80093a8 <__retarget_lock_acquire_recursive>
 80095c2:	bf00      	nop
 80095c4:	20000274 	.word	0x20000274

080095c8 <__malloc_unlock>:
 80095c8:	4801      	ldr	r0, [pc, #4]	; (80095d0 <__malloc_unlock+0x8>)
 80095ca:	f7ff beee 	b.w	80093aa <__retarget_lock_release_recursive>
 80095ce:	bf00      	nop
 80095d0:	20000274 	.word	0x20000274

080095d4 <_malloc_usable_size_r>:
 80095d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095d8:	1f18      	subs	r0, r3, #4
 80095da:	2b00      	cmp	r3, #0
 80095dc:	bfbc      	itt	lt
 80095de:	580b      	ldrlt	r3, [r1, r0]
 80095e0:	18c0      	addlt	r0, r0, r3
 80095e2:	4770      	bx	lr

080095e4 <_init>:
 80095e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095e6:	bf00      	nop
 80095e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ea:	bc08      	pop	{r3}
 80095ec:	469e      	mov	lr, r3
 80095ee:	4770      	bx	lr

080095f0 <_fini>:
 80095f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095f2:	bf00      	nop
 80095f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095f6:	bc08      	pop	{r3}
 80095f8:	469e      	mov	lr, r3
 80095fa:	4770      	bx	lr
