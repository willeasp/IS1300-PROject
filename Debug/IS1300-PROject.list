
IS1300-PROject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c670  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000338  0800c800  0800c800  0001c800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb38  0800cb38  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb38  0800cb38  0001cb38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb40  0800cb40  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb40  0800cb40  0001cb40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb44  0800cb44  0001cb44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800cb48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002004  20000084  0800cbcc  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002088  0800cbcc  00022088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033175  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005be0  00000000  00000000  00053229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002058  00000000  00000000  00058e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001df0  00000000  00000000  0005ae68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ef76  00000000  00000000  0005cc58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029337  00000000  00000000  0008bbce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011b1fc  00000000  00000000  000b4f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d0101  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fe0  00000000  00000000  001d0154  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c7e8 	.word	0x0800c7e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800c7e8 	.word	0x0800c7e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
 8000d74:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d76:	4b2f      	ldr	r3, [pc, #188]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d78:	4a2f      	ldr	r2, [pc, #188]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000d7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d7c:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d82:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d88:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d8e:	4b29      	ldr	r3, [pc, #164]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d94:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d96:	2204      	movs	r2, #4
 8000d98:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da0:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000da6:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dac:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd6:	4817      	ldr	r0, [pc, #92]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dd8:	f001 fb80 	bl	80024dc <HAL_ADC_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000de2:	f000 fca5 	bl	8001730 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	4619      	mov	r1, r3
 8000df0:	4810      	ldr	r0, [pc, #64]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000df2:	f002 fbcd 	bl	8003590 <HAL_ADCEx_MultiModeConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000dfc:	f000 fc98 	bl	8001730 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_ADC1_Init+0xe8>)
 8000e02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e04:	2306      	movs	r3, #6
 8000e06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e0c:	237f      	movs	r3, #127	; 0x7f
 8000e0e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e10:	2304      	movs	r3, #4
 8000e12:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000e1e:	f001 fe53 	bl	8002ac8 <HAL_ADC_ConfigChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000e28:	f000 fc82 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20001e20 	.word	0x20001e20
 8000e38:	50040000 	.word	0x50040000
 8000e3c:	43210000 	.word	0x43210000

08000e40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b0ac      	sub	sp, #176	; 0xb0
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2288      	movs	r2, #136	; 0x88
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f00a fb6d 	bl	800b540 <memset>
  if(adcHandle->Instance==ADC1)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a27      	ldr	r2, [pc, #156]	; (8000f08 <HAL_ADC_MspInit+0xc8>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d146      	bne.n	8000efe <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e74:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e82:	2301      	movs	r3, #1
 8000e84:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e86:	2308      	movs	r3, #8
 8000e88:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e92:	2302      	movs	r3, #2
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f003 fdcb 	bl	8004a3c <HAL_RCCEx_PeriphCLKConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000eac:	f000 fc40 	bl	8001730 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb4:	4a15      	ldr	r2, [pc, #84]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000eb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ecc:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ee6:	230b      	movs	r3, #11
 8000ee8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <HAL_ADC_MspInit+0xd0>)
 8000efa:	f002 fd5b 	bl	80039b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000efe:	bf00      	nop
 8000f00:	37b0      	adds	r7, #176	; 0xb0
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	50040000 	.word	0x50040000
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	48000400 	.word	0x48000400

08000f14 <start_clock>:


/**
 * @brief start the RTC clock
 */
void start_clock (uint8_t hours, uint8_t minutes, uint8_t seconds) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	71bb      	strb	r3, [r7, #6]
 8000f22:	4613      	mov	r3, r2
 8000f24:	717b      	strb	r3, [r7, #5]
    RTC_TimeTypeDef time = {0};
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]
    time.Hours = hours;
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	733b      	strb	r3, [r7, #12]
    time.Minutes = minutes;
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	737b      	strb	r3, [r7, #13]
    time.Seconds = seconds;
 8000f3e:	797b      	ldrb	r3, [r7, #5]
 8000f40:	73bb      	strb	r3, [r7, #14]

    /* date has to be set to start the clock */
    HAL_RTC_SetDate(&hrtc, NULL, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	4807      	ldr	r0, [pc, #28]	; (8000f64 <start_clock+0x50>)
 8000f48:	f004 fba8 	bl	800569c <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	2200      	movs	r2, #0
 8000f52:	4619      	mov	r1, r3
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <start_clock+0x50>)
 8000f56:	f004 faa8 	bl	80054aa <HAL_RTC_SetTime>
}
 8000f5a:	bf00      	nop
 8000f5c:	3720      	adds	r7, #32
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20001e90 	.word	0x20001e90

08000f68 <get_time>:
/**
 * @brief Get the current RTC time
 * @param[out] time The current time
 * @return Pointer to the time struct
 */
void get_time (RTC_TimeTypeDef *time) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
    HAL_RTC_GetTime(&hrtc, time, RTC_FORMAT_BIN);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <get_time+0x24>)
 8000f76:	f004 fb35 	bl	80055e4 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, NULL, RTC_FORMAT_BIN);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4803      	ldr	r0, [pc, #12]	; (8000f8c <get_time+0x24>)
 8000f80:	f004 fc13 	bl	80057aa <HAL_RTC_GetDate>
//        start_clock(0, 0, 0);
//        time->Hours = 0;
//        time->Minutes = 0;
//        time->Seconds = 0;
//    }
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20001e90 	.word	0x20001e90

08000f90 <hardware_reset>:
uint16_t pins[] = {Disp_White_Pin, Disp_Green_Pin};

/**
 * @brief Perform a hardware reset on the display
 */
void hardware_reset () {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
    HAL_Delay(5);
 8000f94:	2005      	movs	r0, #5
 8000f96:	f001 f873 	bl	8002080 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa4:	f002 feb0 	bl	8003d08 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000fa8:	200a      	movs	r0, #10
 8000faa:	f001 f869 	bl	8002080 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f002 fea6 	bl	8003d08 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f001 f85f 	bl	8002080 <HAL_Delay>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <test_backlight>:


/**
 * @brief Test all backlight colors
 */
void test_backlight () {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
    // TODO add red pwm
    for (int i = 0; i < 3; ++i) {
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	e02c      	b.n	800102e <test_backlight+0x66>
        if (i != 2) {
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b02      	cmp	r3, #2
 8000fd8:	d01b      	beq.n	8001012 <test_backlight+0x4a>
            HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);
 8000fda:	4a1d      	ldr	r2, [pc, #116]	; (8001050 <test_backlight+0x88>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fe2:	4a1c      	ldr	r2, [pc, #112]	; (8001054 <test_backlight+0x8c>)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fea:	2201      	movs	r2, #1
 8000fec:	4619      	mov	r1, r3
 8000fee:	f002 fe8b 	bl	8003d08 <HAL_GPIO_WritePin>
            HAL_Delay(200);
 8000ff2:	20c8      	movs	r0, #200	; 0xc8
 8000ff4:	f001 f844 	bl	8002080 <HAL_Delay>
            HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 8000ff8:	4a15      	ldr	r2, [pc, #84]	; (8001050 <test_backlight+0x88>)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001000:	4a14      	ldr	r2, [pc, #80]	; (8001054 <test_backlight+0x8c>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001008:	2200      	movs	r2, #0
 800100a:	4619      	mov	r1, r3
 800100c:	f002 fe7c 	bl	8003d08 <HAL_GPIO_WritePin>
 8001010:	e00a      	b.n	8001028 <test_backlight+0x60>
        } else {
            set_brightness(1.0);
 8001012:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8001040 <test_backlight+0x78>
 8001016:	f000 fba3 	bl	8001760 <set_brightness>
            HAL_Delay(200);
 800101a:	20c8      	movs	r0, #200	; 0xc8
 800101c:	f001 f830 	bl	8002080 <HAL_Delay>
            set_brightness(0.0);
 8001020:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8001048 <test_backlight+0x80>
 8001024:	f000 fb9c 	bl	8001760 <set_brightness>
    for (int i = 0; i < 3; ++i) {
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3301      	adds	r3, #1
 800102c:	607b      	str	r3, [r7, #4]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b02      	cmp	r3, #2
 8001032:	ddcf      	ble.n	8000fd4 <test_backlight+0xc>
        }
    }
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	00000000 	.word	0x00000000
 8001044:	3ff00000 	.word	0x3ff00000
	...
 8001050:	20000000 	.word	0x20000000
 8001054:	20000008 	.word	0x20000008

08001058 <set_backlight>:


/**
 * @brief Set a backlight color
 */
void set_backlight (uint8_t color, GPIO_PinState state) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	460a      	mov	r2, r1
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	4613      	mov	r3, r2
 8001066:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(ports[color], pins[color], state);
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	4a07      	ldr	r2, [pc, #28]	; (8001088 <set_backlight+0x30>)
 800106c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	4a06      	ldr	r2, [pc, #24]	; (800108c <set_backlight+0x34>)
 8001074:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001078:	79ba      	ldrb	r2, [r7, #6]
 800107a:	4619      	mov	r1, r3
 800107c:	f002 fe44 	bl	8003d08 <HAL_GPIO_WritePin>
}
 8001080:	bf00      	nop
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000000 	.word	0x20000000
 800108c:	20000008 	.word	0x20000008

08001090 <split_byte>:
/**
 * @brief Split a byte to send to the display
 * @param[in] byte The byte to split into two
 * @param[out] buffer Where to place the two new bytes
 */
void split_byte (uint8_t byte, uint8_t *buffer) {
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
    buffer[0] = byte & 0x0F;            // lower bits first
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	701a      	strb	r2, [r3, #0]
    buffer[1] = (byte & 0xF0) >> 4;     // upper bits second
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	3301      	adds	r3, #1
 80010ac:	79fa      	ldrb	r2, [r7, #7]
 80010ae:	0912      	lsrs	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	701a      	strb	r2, [r3, #0]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <display_transmit>:
 * @brief Send the display data or instructions
 * @param[in] startbyte The byte setting that initiates the transmit
 * @param[in] bytes The bytes that will be sent to the display
 * @param[in] length The number of bytes to send
 */
int display_transmit (uint8_t startbyte, uint8_t *bytes, uint16_t length) {
 80010c0:	b5b0      	push	{r4, r5, r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	6039      	str	r1, [r7, #0]
 80010ca:	71fb      	strb	r3, [r7, #7]
 80010cc:	4613      	mov	r3, r2
 80010ce:	80bb      	strh	r3, [r7, #4]
 80010d0:	466b      	mov	r3, sp
 80010d2:	461d      	mov	r5, r3
    /* create message to transmit */
    uint16_t mes_length = length*2 +1; // +1 for start byte
 80010d4:	88bb      	ldrh	r3, [r7, #4]
 80010d6:	005b      	lsls	r3, r3, #1
 80010d8:	b29b      	uxth	r3, r3
 80010da:	3301      	adds	r3, #1
 80010dc:	837b      	strh	r3, [r7, #26]
    uint8_t message[mes_length];
 80010de:	8b7c      	ldrh	r4, [r7, #26]
 80010e0:	4623      	mov	r3, r4
 80010e2:	3b01      	subs	r3, #1
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	b2a0      	uxth	r0, r4
 80010e8:	f04f 0100 	mov.w	r1, #0
 80010ec:	f04f 0200 	mov.w	r2, #0
 80010f0:	f04f 0300 	mov.w	r3, #0
 80010f4:	00cb      	lsls	r3, r1, #3
 80010f6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80010fa:	00c2      	lsls	r2, r0, #3
 80010fc:	b2a0      	uxth	r0, r4
 80010fe:	f04f 0100 	mov.w	r1, #0
 8001102:	f04f 0200 	mov.w	r2, #0
 8001106:	f04f 0300 	mov.w	r3, #0
 800110a:	00cb      	lsls	r3, r1, #3
 800110c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001110:	00c2      	lsls	r2, r0, #3
 8001112:	4623      	mov	r3, r4
 8001114:	3307      	adds	r3, #7
 8001116:	08db      	lsrs	r3, r3, #3
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	ebad 0d03 	sub.w	sp, sp, r3
 800111e:	466b      	mov	r3, sp
 8001120:	3300      	adds	r3, #0
 8001122:	613b      	str	r3, [r7, #16]

    message[0] = startbyte;  // start byte
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	79fa      	ldrb	r2, [r7, #7]
 8001128:	701a      	strb	r2, [r3, #0]

    uint8_t divided[2]; // for splitting a byte into two
    for (int i = 0; i < length; ++i) {
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
 800112e:	e018      	b.n	8001162 <display_transmit+0xa2>
        split_byte(bytes[i], divided);
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	4413      	add	r3, r2
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	f107 020c 	add.w	r2, r7, #12
 800113c:	4611      	mov	r1, r2
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ffa6 	bl	8001090 <split_byte>
        message[1 + i*2] = divided[0];
 8001144:	69fb      	ldr	r3, [r7, #28]
 8001146:	005b      	lsls	r3, r3, #1
 8001148:	3301      	adds	r3, #1
 800114a:	7b39      	ldrb	r1, [r7, #12]
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	54d1      	strb	r1, [r2, r3]
        message[1 + i*2 +1] = divided[1];
 8001150:	69fb      	ldr	r3, [r7, #28]
 8001152:	3301      	adds	r3, #1
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	7b79      	ldrb	r1, [r7, #13]
 8001158:	693a      	ldr	r2, [r7, #16]
 800115a:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < length; ++i) {
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	3301      	adds	r3, #1
 8001160:	61fb      	str	r3, [r7, #28]
 8001162:	88bb      	ldrh	r3, [r7, #4]
 8001164:	69fa      	ldr	r2, [r7, #28]
 8001166:	429a      	cmp	r2, r3
 8001168:	dbe2      	blt.n	8001130 <display_transmit+0x70>
    }

    if (HAL_SPI_Transmit(&hspi2, message, mes_length, 100) != HAL_OK) {
 800116a:	6939      	ldr	r1, [r7, #16]
 800116c:	8b7a      	ldrh	r2, [r7, #26]
 800116e:	2364      	movs	r3, #100	; 0x64
 8001170:	4806      	ldr	r0, [pc, #24]	; (800118c <display_transmit+0xcc>)
 8001172:	f004 fcdc 	bl	8005b2e <HAL_SPI_Transmit>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <display_transmit+0xc0>
        return 1;
 800117c:	2301      	movs	r3, #1
 800117e:	e000      	b.n	8001182 <display_transmit+0xc2>
    }
    return 0;
 8001180:	2300      	movs	r3, #0
 8001182:	46ad      	mov	sp, r5
}
 8001184:	4618      	mov	r0, r3
 8001186:	3720      	adds	r7, #32
 8001188:	46bd      	mov	sp, r7
 800118a:	bdb0      	pop	{r4, r5, r7, pc}
 800118c:	20001eb4 	.word	0x20001eb4

08001190 <display_send_instruction>:
/**
 * @brief Send instruction bytes via spi to the display
 * @param[in] instructions A pointer to the instructions to send to the display
 * @param[in] length The number of instructions
 */
int display_send_instruction (uint8_t *instructions, uint16_t length) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	460b      	mov	r3, r1
 800119a:	807b      	strh	r3, [r7, #2]
    return display_transmit(0x1F, instructions, length);
 800119c:	887b      	ldrh	r3, [r7, #2]
 800119e:	461a      	mov	r2, r3
 80011a0:	6879      	ldr	r1, [r7, #4]
 80011a2:	201f      	movs	r0, #31
 80011a4:	f7ff ff8c 	bl	80010c0 <display_transmit>
 80011a8:	4603      	mov	r3, r0
}
 80011aa:	4618      	mov	r0, r3
 80011ac:	3708      	adds	r7, #8
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}

080011b2 <display_write>:
/**
 * @brief Write characters to the display where the cursor currently are
 * @param characters The characters to write
 * @param length The number of characters
 */
int display_write (char *characters, uint16_t length) {
 80011b2:	b580      	push	{r7, lr}
 80011b4:	b082      	sub	sp, #8
 80011b6:	af00      	add	r7, sp, #0
 80011b8:	6078      	str	r0, [r7, #4]
 80011ba:	460b      	mov	r3, r1
 80011bc:	807b      	strh	r3, [r7, #2]
    return display_transmit(0b01011111, (uint8_t*)characters, length);
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	461a      	mov	r2, r3
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	205f      	movs	r0, #95	; 0x5f
 80011c6:	f7ff ff7b 	bl	80010c0 <display_transmit>
 80011ca:	4603      	mov	r3, r0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <set_row>:
uint8_t rows[] = {0b10000000, 0b10100000, 0b11000000, 0b11100000};
/**
 * @brief Set the cursor on the display
 * @param row The row to write to
 */
int set_row (uint8_t row) {
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]
    /* the address range of DDARM is 00H-13H, 20H-33H, 40H53H, 60H-73H */
    return display_send_instruction(&rows[row], 1);
 80011de:	79fb      	ldrb	r3, [r7, #7]
 80011e0:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <set_row+0x24>)
 80011e2:	4413      	add	r3, r2
 80011e4:	2101      	movs	r1, #1
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ffd2 	bl	8001190 <display_send_instruction>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	2000000c 	.word	0x2000000c

080011fc <display_write_row>:
 * @brief Write text to a specific row on the display
 * @param characters The characters to write
 * @param length The number of characters
 * @param row The row to write to
 */
int display_write_row (char *characters, uint16_t length, uint8_t row) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
 8001208:	4613      	mov	r3, r2
 800120a:	707b      	strb	r3, [r7, #1]
    set_row(row);
 800120c:	787b      	ldrb	r3, [r7, #1]
 800120e:	4618      	mov	r0, r3
 8001210:	f7ff ffe0 	bl	80011d4 <set_row>
    return display_write(characters, length);
 8001214:	887b      	ldrh	r3, [r7, #2]
 8001216:	4619      	mov	r1, r3
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ffca 	bl	80011b2 <display_write>
 800121e:	4603      	mov	r3, r0
}
 8001220:	4618      	mov	r0, r3
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <clear_display>:

/**
 * @brief Clears the display
 */
int clear_display () {
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
    uint8_t ins = 0x01;
 800122e:	2301      	movs	r3, #1
 8001230:	71fb      	strb	r3, [r7, #7]
    return display_send_instruction(&ins, 1);
 8001232:	1dfb      	adds	r3, r7, #7
 8001234:	2101      	movs	r1, #1
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ffaa 	bl	8001190 <display_send_instruction>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
	...

08001248 <init_display>:

/**
 * @brief Initialise the display
 */
void init_display () {
 8001248:	b580      	push	{r7, lr}
 800124a:	b086      	sub	sp, #24
 800124c:	af00      	add	r7, sp, #0
    hardware_reset();
 800124e:	f7ff fe9f 	bl	8000f90 <hardware_reset>

    test_backlight();
 8001252:	f7ff feb9 	bl	8000fc8 <test_backlight>
//    init_backlight();

    uint16_t ins_length = 12;
 8001256:	230c      	movs	r3, #12
 8001258:	827b      	strh	r3, [r7, #18]
    uint8_t instructions[] = {
 800125a:	4a19      	ldr	r2, [pc, #100]	; (80012c0 <init_display+0x78>)
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001260:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0x01,
        0x38,
        0x0C,       // display on
    };

    if (display_send_instruction(instructions, ins_length))
 8001264:	8a7a      	ldrh	r2, [r7, #18]
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	4611      	mov	r1, r2
 800126a:	4618      	mov	r0, r3
 800126c:	f7ff ff90 	bl	8001190 <display_send_instruction>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <init_display+0x32>
        handle_error();
 8001276:	f000 f827 	bl	80012c8 <handle_error>

    HAL_Delay(5);
 800127a:	2005      	movs	r0, #5
 800127c:	f000 ff00 	bl	8002080 <HAL_Delay>

    for (int i = 0; i < 4; ++i) {
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	e00b      	b.n	800129e <init_display+0x56>
        set_row(i);
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	b2db      	uxtb	r3, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff ffa2 	bl	80011d4 <set_row>
        display_write("0123456789", 10);
 8001290:	210a      	movs	r1, #10
 8001292:	480c      	ldr	r0, [pc, #48]	; (80012c4 <init_display+0x7c>)
 8001294:	f7ff ff8d 	bl	80011b2 <display_write>
    for (int i = 0; i < 4; ++i) {
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	3301      	adds	r3, #1
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	2b03      	cmp	r3, #3
 80012a2:	ddf0      	ble.n	8001286 <init_display+0x3e>
    }

    HAL_Delay(500);
 80012a4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012a8:	f000 feea 	bl	8002080 <HAL_Delay>

    clear_display();
 80012ac:	f7ff ffbc 	bl	8001228 <clear_display>

    HAL_Delay(10);
 80012b0:	200a      	movs	r0, #10
 80012b2:	f000 fee5 	bl	8002080 <HAL_Delay>
}
 80012b6:	bf00      	nop
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	0800c80c 	.word	0x0800c80c
 80012c4:	0800c800 	.word	0x0800c800

080012c8 <handle_error>:
 *      Author: Dell
 */

#include "main.h"

void handle_error( void ) {
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012cc:	b672      	cpsid	i
}
 80012ce:	bf00      	nop
    __disable_irq();
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80012d0:	2201      	movs	r2, #1
 80012d2:	2120      	movs	r1, #32
 80012d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012d8:	f002 fd16 	bl	8003d08 <HAL_GPIO_WritePin>
    while (1)
 80012dc:	e7fe      	b.n	80012dc <handle_error+0x14>
	...

080012e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80012e4:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <MX_FREERTOS_Init+0x38>)
 80012e6:	2100      	movs	r1, #0
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <MX_FREERTOS_Init+0x3c>)
 80012ea:	f007 fb3f 	bl	800896c <osThreadNew>
 80012ee:	4603      	mov	r3, r0
 80012f0:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <MX_FREERTOS_Init+0x40>)
 80012f2:	6013      	str	r3, [r2, #0]

  /* creation of backlightTask */
  backlightTaskHandle = osThreadNew(startBacklightTask, NULL, &backlightTask_attributes);
 80012f4:	4a0b      	ldr	r2, [pc, #44]	; (8001324 <MX_FREERTOS_Init+0x44>)
 80012f6:	2100      	movs	r1, #0
 80012f8:	480b      	ldr	r0, [pc, #44]	; (8001328 <MX_FREERTOS_Init+0x48>)
 80012fa:	f007 fb37 	bl	800896c <osThreadNew>
 80012fe:	4603      	mov	r3, r0
 8001300:	4a0a      	ldr	r2, [pc, #40]	; (800132c <MX_FREERTOS_Init+0x4c>)
 8001302:	6013      	str	r3, [r2, #0]

  /* creation of clockTask */
  clockTaskHandle = osThreadNew(startClockTask, NULL, &clockTask_attributes);
 8001304:	4a0a      	ldr	r2, [pc, #40]	; (8001330 <MX_FREERTOS_Init+0x50>)
 8001306:	2100      	movs	r1, #0
 8001308:	480a      	ldr	r0, [pc, #40]	; (8001334 <MX_FREERTOS_Init+0x54>)
 800130a:	f007 fb2f 	bl	800896c <osThreadNew>
 800130e:	4603      	mov	r3, r0
 8001310:	4a09      	ldr	r2, [pc, #36]	; (8001338 <MX_FREERTOS_Init+0x58>)
 8001312:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	0800c8d4 	.word	0x0800c8d4
 800131c:	0800133d 	.word	0x0800133d
 8001320:	20001e84 	.word	0x20001e84
 8001324:	0800c8f8 	.word	0x0800c8f8
 8001328:	08001351 	.word	0x08001351
 800132c:	20001e8c 	.word	0x20001e8c
 8001330:	0800c91c 	.word	0x0800c91c
 8001334:	080013a9 	.word	0x080013a9
 8001338:	20001e88 	.word	0x20001e88

0800133c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001344:	2001      	movs	r0, #1
 8001346:	f007 fba3 	bl	8008a90 <osDelay>
 800134a:	e7fb      	b.n	8001344 <StartDefaultTask+0x8>
 800134c:	0000      	movs	r0, r0
	...

08001350 <startBacklightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBacklightTask */
void startBacklightTask(void *argument)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBacklightTask */
    TickType_t lastWakeTime;
    const TickType_t period = pdMS_TO_TICKS(100);
 8001358:	2364      	movs	r3, #100	; 0x64
 800135a:	617b      	str	r3, [r7, #20]
    lastWakeTime = xTaskGetTickCount();
 800135c:	f008 fd0e 	bl	8009d7c <xTaskGetTickCount>
 8001360:	4603      	mov	r3, r0
 8001362:	60fb      	str	r3, [r7, #12]
    uint32_t pot;

  /* Infinite loop */
  for(;;)
  {
    pot = get_potentiometer_value();
 8001364:	f000 f9ea 	bl	800173c <get_potentiometer_value>
 8001368:	6138      	str	r0, [r7, #16]
    set_brightness((double)pot/POT_MAX);
 800136a:	6938      	ldr	r0, [r7, #16]
 800136c:	f7ff f8ca 	bl	8000504 <__aeabi_ui2d>
 8001370:	a30b      	add	r3, pc, #44	; (adr r3, 80013a0 <startBacklightTask+0x50>)
 8001372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001376:	f7ff fa69 	bl	800084c <__aeabi_ddiv>
 800137a:	4602      	mov	r2, r0
 800137c:	460b      	mov	r3, r1
 800137e:	ec43 2b17 	vmov	d7, r2, r3
 8001382:	eeb0 0a47 	vmov.f32	s0, s14
 8001386:	eef0 0a67 	vmov.f32	s1, s15
 800138a:	f000 f9e9 	bl	8001760 <set_brightness>

    vTaskDelayUntil(&lastWakeTime, period);
 800138e:	f107 030c 	add.w	r3, r7, #12
 8001392:	6979      	ldr	r1, [r7, #20]
 8001394:	4618      	mov	r0, r3
 8001396:	f008 fb23 	bl	80099e0 <vTaskDelayUntil>
    pot = get_potentiometer_value();
 800139a:	e7e3      	b.n	8001364 <startBacklightTask+0x14>
 800139c:	f3af 8000 	nop.w
 80013a0:	00000000 	.word	0x00000000
 80013a4:	40afc400 	.word	0x40afc400

080013a8 <startClockTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startClockTask */
void startClockTask(void *argument)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b08f      	sub	sp, #60	; 0x3c
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startClockTask */
    TickType_t lastWakeTime;
    const TickType_t period = pdMS_TO_TICKS(1000);
 80013b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    lastWakeTime = xTaskGetTickCount();
 80013b6:	f008 fce1 	bl	8009d7c <xTaskGetTickCount>
 80013ba:	4603      	mov	r3, r0
 80013bc:	61fb      	str	r3, [r7, #28]

    RTC_TimeTypeDef time;
    uint8_t buf_len = 8;
 80013be:	2308      	movs	r3, #8
 80013c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    char buf[buf_len];
 80013c4:	f897 402b 	ldrb.w	r4, [r7, #43]	; 0x2b
 80013c8:	4623      	mov	r3, r4
 80013ca:	3b01      	subs	r3, #1
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
 80013ce:	b2e0      	uxtb	r0, r4
 80013d0:	f04f 0100 	mov.w	r1, #0
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	00cb      	lsls	r3, r1, #3
 80013de:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80013e2:	00c2      	lsls	r2, r0, #3
 80013e4:	b2e0      	uxtb	r0, r4
 80013e6:	f04f 0100 	mov.w	r1, #0
 80013ea:	f04f 0200 	mov.w	r2, #0
 80013ee:	f04f 0300 	mov.w	r3, #0
 80013f2:	00cb      	lsls	r3, r1, #3
 80013f4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80013f8:	00c2      	lsls	r2, r0, #3
 80013fa:	4623      	mov	r3, r4
 80013fc:	3307      	adds	r3, #7
 80013fe:	08db      	lsrs	r3, r3, #3
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	ebad 0d03 	sub.w	sp, sp, r3
 8001406:	ab02      	add	r3, sp, #8
 8001408:	3300      	adds	r3, #0
 800140a:	623b      	str	r3, [r7, #32]

  /* Infinite loop */
  for(;;)
  {
    get_time(&time);
 800140c:	f107 0308 	add.w	r3, r7, #8
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fda9 	bl	8000f68 <get_time>
    sprintf(buf, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 8001416:	6a38      	ldr	r0, [r7, #32]
 8001418:	7a3b      	ldrb	r3, [r7, #8]
 800141a:	461a      	mov	r2, r3
 800141c:	7a7b      	ldrb	r3, [r7, #9]
 800141e:	4619      	mov	r1, r3
 8001420:	7abb      	ldrb	r3, [r7, #10]
 8001422:	9300      	str	r3, [sp, #0]
 8001424:	460b      	mov	r3, r1
 8001426:	490b      	ldr	r1, [pc, #44]	; (8001454 <startClockTask+0xac>)
 8001428:	f00a f966 	bl	800b6f8 <siprintf>
    uart_println(buf);
 800142c:	6a3b      	ldr	r3, [r7, #32]
 800142e:	4618      	mov	r0, r3
 8001430:	f000 fcaa 	bl	8001d88 <uart_println>
    display_write_row(buf, buf_len, 0);
 8001434:	6a3b      	ldr	r3, [r7, #32]
 8001436:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800143a:	b291      	uxth	r1, r2
 800143c:	2200      	movs	r2, #0
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fedc 	bl	80011fc <display_write_row>

    vTaskDelayUntil(&lastWakeTime, period);
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800144a:	4618      	mov	r0, r3
 800144c:	f008 fac8 	bl	80099e0 <vTaskDelayUntil>
    get_time(&time);
 8001450:	e7dc      	b.n	800140c <startClockTask+0x64>
 8001452:	bf00      	nop
 8001454:	0800c840 	.word	0x0800c840

08001458 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	; 0x28
 800145c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145e:	f107 0314 	add.w	r3, r7, #20
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
 8001468:	609a      	str	r2, [r3, #8]
 800146a:	60da      	str	r2, [r3, #12]
 800146c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800146e:	4b40      	ldr	r3, [pc, #256]	; (8001570 <MX_GPIO_Init+0x118>)
 8001470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001472:	4a3f      	ldr	r2, [pc, #252]	; (8001570 <MX_GPIO_Init+0x118>)
 8001474:	f043 0304 	orr.w	r3, r3, #4
 8001478:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147a:	4b3d      	ldr	r3, [pc, #244]	; (8001570 <MX_GPIO_Init+0x118>)
 800147c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	613b      	str	r3, [r7, #16]
 8001484:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001486:	4b3a      	ldr	r3, [pc, #232]	; (8001570 <MX_GPIO_Init+0x118>)
 8001488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148a:	4a39      	ldr	r2, [pc, #228]	; (8001570 <MX_GPIO_Init+0x118>)
 800148c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001490:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001492:	4b37      	ldr	r3, [pc, #220]	; (8001570 <MX_GPIO_Init+0x118>)
 8001494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	4b34      	ldr	r3, [pc, #208]	; (8001570 <MX_GPIO_Init+0x118>)
 80014a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a2:	4a33      	ldr	r2, [pc, #204]	; (8001570 <MX_GPIO_Init+0x118>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014aa:	4b31      	ldr	r3, [pc, #196]	; (8001570 <MX_GPIO_Init+0x118>)
 80014ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b6:	4b2e      	ldr	r3, [pc, #184]	; (8001570 <MX_GPIO_Init+0x118>)
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	4a2d      	ldr	r2, [pc, #180]	; (8001570 <MX_GPIO_Init+0x118>)
 80014bc:	f043 0302 	orr.w	r3, r3, #2
 80014c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c2:	4b2b      	ldr	r3, [pc, #172]	; (8001570 <MX_GPIO_Init+0x118>)
 80014c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c6:	f003 0302 	and.w	r3, r3, #2
 80014ca:	607b      	str	r3, [r7, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ce:	4b28      	ldr	r3, [pc, #160]	; (8001570 <MX_GPIO_Init+0x118>)
 80014d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d2:	4a27      	ldr	r2, [pc, #156]	; (8001570 <MX_GPIO_Init+0x118>)
 80014d4:	f043 0308 	orr.w	r3, r3, #8
 80014d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014da:	4b25      	ldr	r3, [pc, #148]	; (8001570 <MX_GPIO_Init+0x118>)
 80014dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014de:	f003 0308 	and.w	r3, r3, #8
 80014e2:	603b      	str	r3, [r7, #0]
 80014e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2120      	movs	r1, #32
 80014ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ee:	f002 fc0b 	bl	8003d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 80014f2:	2201      	movs	r2, #1
 80014f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fc:	f002 fc04 	bl	8003d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Disp_Green_Pin|Disp_White_Pin, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001506:	481b      	ldr	r0, [pc, #108]	; (8001574 <MX_GPIO_Init+0x11c>)
 8001508:	f002 fbfe 	bl	8003d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800150c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001512:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001516:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800151c:	f107 0314 	add.w	r3, r7, #20
 8001520:	4619      	mov	r1, r3
 8001522:	4814      	ldr	r0, [pc, #80]	; (8001574 <MX_GPIO_Init+0x11c>)
 8001524:	f002 fa46 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Disp_Reset_Pin;
 8001528:	f248 0320 	movw	r3, #32800	; 0x8020
 800152c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152e:	2301      	movs	r3, #1
 8001530:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 0314 	add.w	r3, r7, #20
 800153e:	4619      	mov	r1, r3
 8001540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001544:	f002 fa36 	bl	80039b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Disp_Green_Pin|Disp_White_Pin;
 8001548:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800154c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800154e:	2301      	movs	r3, #1
 8001550:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	4804      	ldr	r0, [pc, #16]	; (8001574 <MX_GPIO_Init+0x11c>)
 8001562:	f002 fa27 	bl	80039b4 <HAL_GPIO_Init>

}
 8001566:	bf00      	nop
 8001568:	3728      	adds	r7, #40	; 0x28
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	48000800 	.word	0x48000800

08001578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08e      	sub	sp, #56	; 0x38
 800157c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800157e:	f000 fd3f 	bl	8002000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001582:	f000 f85f 	bl	8001644 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001586:	f7ff ff67 	bl	8001458 <MX_GPIO_Init>
  MX_UART5_Init();
 800158a:	f000 fc55 	bl	8001e38 <MX_UART5_Init>
  MX_SPI2_Init();
 800158e:	f000 f973 	bl	8001878 <MX_SPI2_Init>
  MX_RTC_Init();
 8001592:	f000 f917 	bl	80017c4 <MX_RTC_Init>
  MX_TIM3_Init();
 8001596:	f000 faff 	bl	8001b98 <MX_TIM3_Init>
  MX_ADC1_Init();
 800159a:	f7ff fbdb 	bl	8000d54 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* init display */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800159e:	2104      	movs	r1, #4
 80015a0:	4823      	ldr	r0, [pc, #140]	; (8001630 <main+0xb8>)
 80015a2:	f004 fec1 	bl	8006328 <HAL_TIM_PWM_Start>
  init_display();
 80015a6:	f7ff fe4f 	bl	8001248 <init_display>

  /* program variables */
  char buf[] = "00:00:00";
 80015aa:	4a22      	ldr	r2, [pc, #136]	; (8001634 <main+0xbc>)
 80015ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80015b2:	c303      	stmia	r3!, {r0, r1}
 80015b4:	701a      	strb	r2, [r3, #0]

  /* initialise time */
  set_backlight(WHITE, GPIO_PIN_SET);
 80015b6:	2101      	movs	r1, #1
 80015b8:	2000      	movs	r0, #0
 80015ba:	f7ff fd4d 	bl	8001058 <set_backlight>
  int h, m, s;
  display_write_row("Enter time", 10, 0);
 80015be:	2200      	movs	r2, #0
 80015c0:	210a      	movs	r1, #10
 80015c2:	481d      	ldr	r0, [pc, #116]	; (8001638 <main+0xc0>)
 80015c4:	f7ff fe1a 	bl	80011fc <display_write_row>
  uart_get_clock_input(buf);
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	4618      	mov	r0, r3
 80015ce:	f000 fbf3 	bl	8001db8 <uart_get_clock_input>
  sscanf(buf, "%02d:%02d:%02d", &h, &m, &s);
 80015d2:	f107 011c 	add.w	r1, r7, #28
 80015d6:	f107 0220 	add.w	r2, r7, #32
 80015da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80015de:	f107 0318 	add.w	r3, r7, #24
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	460b      	mov	r3, r1
 80015e6:	4915      	ldr	r1, [pc, #84]	; (800163c <main+0xc4>)
 80015e8:	f00a f8a6 	bl	800b738 <siscanf>
  start_clock(h, m, s);
 80015ec:	6a3b      	ldr	r3, [r7, #32]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	69fa      	ldr	r2, [r7, #28]
 80015f2:	b2d1      	uxtb	r1, r2
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	b2d2      	uxtb	r2, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fc8b 	bl	8000f14 <start_clock>
  clear_display();
 80015fe:	f7ff fe13 	bl	8001228 <clear_display>
  set_backlight(WHITE, GPIO_PIN_RESET);
 8001602:	2100      	movs	r1, #0
 8001604:	2000      	movs	r0, #0
 8001606:	f7ff fd27 	bl	8001058 <set_backlight>
  set_brightness(1.0);
 800160a:	ed9f 0b07 	vldr	d0, [pc, #28]	; 8001628 <main+0xb0>
 800160e:	f000 f8a7 	bl	8001760 <set_brightness>

  /* initialise potentiometer */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001612:	217f      	movs	r1, #127	; 0x7f
 8001614:	480a      	ldr	r0, [pc, #40]	; (8001640 <main+0xc8>)
 8001616:	f001 ff5b 	bl	80034d0 <HAL_ADCEx_Calibration_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800161a:	f007 f95d 	bl	80088d8 <osKernelInitialize>
  MX_FREERTOS_Init();
 800161e:	f7ff fe5f 	bl	80012e0 <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001622:	f007 f97d 	bl	8008920 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  RTC_TimeTypeDef time;
  uint32_t pot;
  while (1)
 8001626:	e7fe      	b.n	8001626 <main+0xae>
 8001628:	00000000 	.word	0x00000000
 800162c:	3ff00000 	.word	0x3ff00000
 8001630:	20001f64 	.word	0x20001f64
 8001634:	0800c86c 	.word	0x0800c86c
 8001638:	0800c850 	.word	0x0800c850
 800163c:	0800c85c 	.word	0x0800c85c
 8001640:	20001e20 	.word	0x20001e20

08001644 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b096      	sub	sp, #88	; 0x58
 8001648:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	2244      	movs	r2, #68	; 0x44
 8001650:	2100      	movs	r1, #0
 8001652:	4618      	mov	r0, r3
 8001654:	f009 ff74 	bl	800b540 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001658:	463b      	mov	r3, r7
 800165a:	2200      	movs	r2, #0
 800165c:	601a      	str	r2, [r3, #0]
 800165e:	605a      	str	r2, [r3, #4]
 8001660:	609a      	str	r2, [r3, #8]
 8001662:	60da      	str	r2, [r3, #12]
 8001664:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001666:	f44f 7000 	mov.w	r0, #512	; 0x200
 800166a:	f002 fb73 	bl	8003d54 <HAL_PWREx_ControlVoltageScaling>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001674:	f000 f85c 	bl	8001730 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001678:	230a      	movs	r3, #10
 800167a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800167c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001680:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001682:	2310      	movs	r3, #16
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001686:	2301      	movs	r3, #1
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800168a:	2302      	movs	r3, #2
 800168c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800168e:	2302      	movs	r3, #2
 8001690:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001692:	2301      	movs	r3, #1
 8001694:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001696:	230a      	movs	r3, #10
 8001698:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800169a:	2307      	movs	r3, #7
 800169c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800169e:	2302      	movs	r3, #2
 80016a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016a2:	2302      	movs	r3, #2
 80016a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4618      	mov	r0, r3
 80016ac:	f002 fba8 	bl	8003e00 <HAL_RCC_OscConfig>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <SystemClock_Config+0x76>
  {
    Error_Handler();
 80016b6:	f000 f83b 	bl	8001730 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ba:	230f      	movs	r3, #15
 80016bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016be:	2303      	movs	r3, #3
 80016c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016ce:	463b      	mov	r3, r7
 80016d0:	2104      	movs	r1, #4
 80016d2:	4618      	mov	r0, r3
 80016d4:	f002 ff7a 	bl	80045cc <HAL_RCC_ClockConfig>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80016de:	f000 f827 	bl	8001730 <Error_Handler>
  }
}
 80016e2:	bf00      	nop
 80016e4:	3758      	adds	r7, #88	; 0x58
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
	...

080016ec <HAL_UART_TxCpltCallback>:
* @note This example shows a simple way to report end of IT Tx transfer, and
* you can add your own implementation.
* @retval None
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
    /* Set transmission flag: transfer complete*/
    uartReady = SET;
 80016f4:	4b04      	ldr	r3, [pc, #16]	; (8001708 <HAL_UART_TxCpltCallback+0x1c>)
 80016f6:	2201      	movs	r2, #1
 80016f8:	701a      	strb	r2, [r3, #0]
}
 80016fa:	bf00      	nop
 80016fc:	370c      	adds	r7, #12
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	200000a0 	.word	0x200000a0

0800170c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d101      	bne.n	8001722 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800171e:	f000 fc8f 	bl	8002040 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40012c00 	.word	0x40012c00

08001730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    handle_error();
 8001734:	f7ff fdc8 	bl	80012c8 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <get_potentiometer_value>:

/**
 * @brief Read the potentiometer value
 * @return The value of the potentiometer
 */
uint32_t get_potentiometer_value () {
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8001740:	4806      	ldr	r0, [pc, #24]	; (800175c <get_potentiometer_value+0x20>)
 8001742:	f001 f821 	bl	8002788 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 8001746:	2101      	movs	r1, #1
 8001748:	4804      	ldr	r0, [pc, #16]	; (800175c <get_potentiometer_value+0x20>)
 800174a:	f001 f8d7 	bl	80028fc <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1);
 800174e:	4803      	ldr	r0, [pc, #12]	; (800175c <get_potentiometer_value+0x20>)
 8001750:	f001 f9ac 	bl	8002aac <HAL_ADC_GetValue>
 8001754:	4603      	mov	r3, r0
}
 8001756:	4618      	mov	r0, r3
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	20001e20 	.word	0x20001e20

08001760 <set_brightness>:

/**
 * @brief Change the PWM pulse width of the red background light
 * @param[in] brightness The brightness of the backlight from 0 to 1
 */
void set_brightness (double brightness) {
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	ed87 0b00 	vstr	d0, [r7]
    brightness *= brightness * brightness;  // brightness^3
 800176a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800176e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001772:	f7fe ff41 	bl	80005f8 <__aeabi_dmul>
 8001776:	4602      	mov	r2, r0
 8001778:	460b      	mov	r3, r1
 800177a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800177e:	f7fe ff3b 	bl	80005f8 <__aeabi_dmul>
 8001782:	4602      	mov	r2, r0
 8001784:	460b      	mov	r3, r1
 8001786:	e9c7 2300 	strd	r2, r3, [r7]
    uint16_t pulse = (uint16_t) (brightness * (double)0xFFFF);
 800178a:	a30c      	add	r3, pc, #48	; (adr r3, 80017bc <set_brightness+0x5c>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001794:	f7fe ff30 	bl	80005f8 <__aeabi_dmul>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4610      	mov	r0, r2
 800179e:	4619      	mov	r1, r3
 80017a0:	f7ff f93c 	bl	8000a1c <__aeabi_d2uiz>
 80017a4:	4603      	mov	r3, r0
 80017a6:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim3, CHANNEL, pulse);
 80017a8:	4b03      	ldr	r3, [pc, #12]	; (80017b8 <set_brightness+0x58>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	89fa      	ldrh	r2, [r7, #14]
 80017ae:	639a      	str	r2, [r3, #56]	; 0x38
}
 80017b0:	bf00      	nop
 80017b2:	3710      	adds	r7, #16
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20001f64 	.word	0x20001f64
 80017bc:	00000000 	.word	0x00000000
 80017c0:	40efffe0 	.word	0x40efffe0

080017c4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80017c8:	4b10      	ldr	r3, [pc, #64]	; (800180c <MX_RTC_Init+0x48>)
 80017ca:	4a11      	ldr	r2, [pc, #68]	; (8001810 <MX_RTC_Init+0x4c>)
 80017cc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80017ce:	4b0f      	ldr	r3, [pc, #60]	; (800180c <MX_RTC_Init+0x48>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <MX_RTC_Init+0x48>)
 80017d6:	227f      	movs	r2, #127	; 0x7f
 80017d8:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80017da:	4b0c      	ldr	r3, [pc, #48]	; (800180c <MX_RTC_Init+0x48>)
 80017dc:	22ff      	movs	r2, #255	; 0xff
 80017de:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80017e0:	4b0a      	ldr	r3, [pc, #40]	; (800180c <MX_RTC_Init+0x48>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80017e6:	4b09      	ldr	r3, [pc, #36]	; (800180c <MX_RTC_Init+0x48>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80017ec:	4b07      	ldr	r3, [pc, #28]	; (800180c <MX_RTC_Init+0x48>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <MX_RTC_Init+0x48>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80017f8:	4804      	ldr	r0, [pc, #16]	; (800180c <MX_RTC_Init+0x48>)
 80017fa:	f003 fddb 	bl	80053b4 <HAL_RTC_Init>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8001804:	f7ff ff94 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001808:	bf00      	nop
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20001e90 	.word	0x20001e90
 8001810:	40002800 	.word	0x40002800

08001814 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b0a4      	sub	sp, #144	; 0x90
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800181c:	f107 0308 	add.w	r3, r7, #8
 8001820:	2288      	movs	r2, #136	; 0x88
 8001822:	2100      	movs	r1, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f009 fe8b 	bl	800b540 <memset>
  if(rtcHandle->Instance==RTC)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a10      	ldr	r2, [pc, #64]	; (8001870 <HAL_RTC_MspInit+0x5c>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d118      	bne.n	8001866 <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001838:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800183a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800183e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001842:	f107 0308 	add.w	r3, r7, #8
 8001846:	4618      	mov	r0, r3
 8001848:	f003 f8f8 	bl	8004a3c <HAL_RCCEx_PeriphCLKConfig>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8001852:	f7ff ff6d 	bl	8001730 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001856:	4b07      	ldr	r3, [pc, #28]	; (8001874 <HAL_RTC_MspInit+0x60>)
 8001858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185c:	4a05      	ldr	r2, [pc, #20]	; (8001874 <HAL_RTC_MspInit+0x60>)
 800185e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001862:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001866:	bf00      	nop
 8001868:	3790      	adds	r7, #144	; 0x90
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40002800 	.word	0x40002800
 8001874:	40021000 	.word	0x40021000

08001878 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800187c:	4b1b      	ldr	r3, [pc, #108]	; (80018ec <MX_SPI2_Init+0x74>)
 800187e:	4a1c      	ldr	r2, [pc, #112]	; (80018f0 <MX_SPI2_Init+0x78>)
 8001880:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001882:	4b1a      	ldr	r3, [pc, #104]	; (80018ec <MX_SPI2_Init+0x74>)
 8001884:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001888:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 800188a:	4b18      	ldr	r3, [pc, #96]	; (80018ec <MX_SPI2_Init+0x74>)
 800188c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001890:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001892:	4b16      	ldr	r3, [pc, #88]	; (80018ec <MX_SPI2_Init+0x74>)
 8001894:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001898:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800189a:	4b14      	ldr	r3, [pc, #80]	; (80018ec <MX_SPI2_Init+0x74>)
 800189c:	2202      	movs	r2, #2
 800189e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80018a0:	4b12      	ldr	r3, [pc, #72]	; (80018ec <MX_SPI2_Init+0x74>)
 80018a2:	2201      	movs	r2, #1
 80018a4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80018a6:	4b11      	ldr	r3, [pc, #68]	; (80018ec <MX_SPI2_Init+0x74>)
 80018a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80018ac:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80018ae:	4b0f      	ldr	r3, [pc, #60]	; (80018ec <MX_SPI2_Init+0x74>)
 80018b0:	2230      	movs	r2, #48	; 0x30
 80018b2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80018b4:	4b0d      	ldr	r3, [pc, #52]	; (80018ec <MX_SPI2_Init+0x74>)
 80018b6:	2280      	movs	r2, #128	; 0x80
 80018b8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ba:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <MX_SPI2_Init+0x74>)
 80018bc:	2200      	movs	r2, #0
 80018be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018c0:	4b0a      	ldr	r3, [pc, #40]	; (80018ec <MX_SPI2_Init+0x74>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <MX_SPI2_Init+0x74>)
 80018c8:	2207      	movs	r2, #7
 80018ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018cc:	4b07      	ldr	r3, [pc, #28]	; (80018ec <MX_SPI2_Init+0x74>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80018d2:	4b06      	ldr	r3, [pc, #24]	; (80018ec <MX_SPI2_Init+0x74>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018d8:	4804      	ldr	r0, [pc, #16]	; (80018ec <MX_SPI2_Init+0x74>)
 80018da:	f004 f885 	bl	80059e8 <HAL_SPI_Init>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 80018e4:	f7ff ff24 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	20001eb4 	.word	0x20001eb4
 80018f0:	40003800 	.word	0x40003800

080018f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08a      	sub	sp, #40	; 0x28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 0314 	add.w	r3, r7, #20
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a25      	ldr	r2, [pc, #148]	; (80019a8 <HAL_SPI_MspInit+0xb4>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d144      	bne.n	80019a0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001916:	4b25      	ldr	r3, [pc, #148]	; (80019ac <HAL_SPI_MspInit+0xb8>)
 8001918:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191a:	4a24      	ldr	r2, [pc, #144]	; (80019ac <HAL_SPI_MspInit+0xb8>)
 800191c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001920:	6593      	str	r3, [r2, #88]	; 0x58
 8001922:	4b22      	ldr	r3, [pc, #136]	; (80019ac <HAL_SPI_MspInit+0xb8>)
 8001924:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192a:	613b      	str	r3, [r7, #16]
 800192c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800192e:	4b1f      	ldr	r3, [pc, #124]	; (80019ac <HAL_SPI_MspInit+0xb8>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	4a1e      	ldr	r2, [pc, #120]	; (80019ac <HAL_SPI_MspInit+0xb8>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800193a:	4b1c      	ldr	r3, [pc, #112]	; (80019ac <HAL_SPI_MspInit+0xb8>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	60fb      	str	r3, [r7, #12]
 8001944:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	4b19      	ldr	r3, [pc, #100]	; (80019ac <HAL_SPI_MspInit+0xb8>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	4a18      	ldr	r2, [pc, #96]	; (80019ac <HAL_SPI_MspInit+0xb8>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001952:	4b16      	ldr	r3, [pc, #88]	; (80019ac <HAL_SPI_MspInit+0xb8>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = Display_OUT_Pin;
 800195e:	2308      	movs	r3, #8
 8001960:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	2303      	movs	r3, #3
 800196c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800196e:	2305      	movs	r3, #5
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Display_OUT_GPIO_Port, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	480d      	ldr	r0, [pc, #52]	; (80019b0 <HAL_SPI_MspInit+0xbc>)
 800197a:	f002 f81b 	bl	80039b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Dispay_CLK_Pin|Display_CS_Pin;
 800197e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198c:	2303      	movs	r3, #3
 800198e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001990:	2305      	movs	r3, #5
 8001992:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	4619      	mov	r1, r3
 800199a:	4806      	ldr	r0, [pc, #24]	; (80019b4 <HAL_SPI_MspInit+0xc0>)
 800199c:	f002 f80a 	bl	80039b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80019a0:	bf00      	nop
 80019a2:	3728      	adds	r7, #40	; 0x28
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40003800 	.word	0x40003800
 80019ac:	40021000 	.word	0x40021000
 80019b0:	48000800 	.word	0x48000800
 80019b4:	48000400 	.word	0x48000400

080019b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019be:	4b11      	ldr	r3, [pc, #68]	; (8001a04 <HAL_MspInit+0x4c>)
 80019c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019c2:	4a10      	ldr	r2, [pc, #64]	; (8001a04 <HAL_MspInit+0x4c>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6613      	str	r3, [r2, #96]	; 0x60
 80019ca:	4b0e      	ldr	r3, [pc, #56]	; (8001a04 <HAL_MspInit+0x4c>)
 80019cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	4b0b      	ldr	r3, [pc, #44]	; (8001a04 <HAL_MspInit+0x4c>)
 80019d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019da:	4a0a      	ldr	r2, [pc, #40]	; (8001a04 <HAL_MspInit+0x4c>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e0:	6593      	str	r3, [r2, #88]	; 0x58
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <HAL_MspInit+0x4c>)
 80019e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80019ee:	2200      	movs	r2, #0
 80019f0:	210f      	movs	r1, #15
 80019f2:	f06f 0001 	mvn.w	r0, #1
 80019f6:	f001 ff33 	bl	8003860 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019fa:	bf00      	nop
 80019fc:	3708      	adds	r7, #8
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000

08001a08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b08c      	sub	sp, #48	; 0x30
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001a14:	2300      	movs	r3, #0
 8001a16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	2019      	movs	r0, #25
 8001a1e:	f001 ff1f 	bl	8003860 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001a22:	2019      	movs	r0, #25
 8001a24:	f001 ff38 	bl	8003898 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001a28:	4b1e      	ldr	r3, [pc, #120]	; (8001aa4 <HAL_InitTick+0x9c>)
 8001a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a2c:	4a1d      	ldr	r2, [pc, #116]	; (8001aa4 <HAL_InitTick+0x9c>)
 8001a2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a32:	6613      	str	r3, [r2, #96]	; 0x60
 8001a34:	4b1b      	ldr	r3, [pc, #108]	; (8001aa4 <HAL_InitTick+0x9c>)
 8001a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a3c:	60fb      	str	r3, [r7, #12]
 8001a3e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a40:	f107 0210 	add.w	r2, r7, #16
 8001a44:	f107 0314 	add.w	r3, r7, #20
 8001a48:	4611      	mov	r1, r2
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f002 ff64 	bl	8004918 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a50:	f002 ff4c 	bl	80048ec <HAL_RCC_GetPCLK2Freq>
 8001a54:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a58:	4a13      	ldr	r2, [pc, #76]	; (8001aa8 <HAL_InitTick+0xa0>)
 8001a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5e:	0c9b      	lsrs	r3, r3, #18
 8001a60:	3b01      	subs	r3, #1
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001a64:	4b11      	ldr	r3, [pc, #68]	; (8001aac <HAL_InitTick+0xa4>)
 8001a66:	4a12      	ldr	r2, [pc, #72]	; (8001ab0 <HAL_InitTick+0xa8>)
 8001a68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001a6a:	4b10      	ldr	r3, [pc, #64]	; (8001aac <HAL_InitTick+0xa4>)
 8001a6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a70:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001a72:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <HAL_InitTick+0xa4>)
 8001a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a76:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <HAL_InitTick+0xa4>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7e:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <HAL_InitTick+0xa4>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001a84:	4809      	ldr	r0, [pc, #36]	; (8001aac <HAL_InitTick+0xa4>)
 8001a86:	f004 fb25 	bl	80060d4 <HAL_TIM_Base_Init>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d104      	bne.n	8001a9a <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001a90:	4806      	ldr	r0, [pc, #24]	; (8001aac <HAL_InitTick+0xa4>)
 8001a92:	f004 fb77 	bl	8006184 <HAL_TIM_Base_Start_IT>
 8001a96:	4603      	mov	r3, r0
 8001a98:	e000      	b.n	8001a9c <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3730      	adds	r7, #48	; 0x30
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	431bde83 	.word	0x431bde83
 8001aac:	20001f18 	.word	0x20001f18
 8001ab0:	40012c00 	.word	0x40012c00

08001ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ab8:	e7fe      	b.n	8001ab8 <NMI_Handler+0x4>

08001aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aba:	b480      	push	{r7}
 8001abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001abe:	e7fe      	b.n	8001abe <HardFault_Handler+0x4>

08001ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <MemManage_Handler+0x4>

08001ac6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aca:	e7fe      	b.n	8001aca <BusFault_Handler+0x4>

08001acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <UsageFault_Handler+0x4>

08001ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ae4:	4802      	ldr	r0, [pc, #8]	; (8001af0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001ae6:	f004 fd25 	bl	8006534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20001f18 	.word	0x20001f18

08001af4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001af8:	4802      	ldr	r0, [pc, #8]	; (8001b04 <UART5_IRQHandler+0x10>)
 8001afa:	f005 fecb 	bl	8007894 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001afe:	bf00      	nop
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	20001fb0 	.word	0x20001fb0

08001b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b10:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <_sbrk+0x5c>)
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <_sbrk+0x60>)
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <_sbrk+0x64>)
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <_sbrk+0x68>)
 8001b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d207      	bcs.n	8001b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b38:	f009 fcc8 	bl	800b4cc <__errno>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	220c      	movs	r2, #12
 8001b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
 8001b46:	e009      	b.n	8001b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <_sbrk+0x64>)
 8001b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20018000 	.word	0x20018000
 8001b68:	00000400 	.word	0x00000400
 8001b6c:	200000a4 	.word	0x200000a4
 8001b70:	20002088 	.word	0x20002088

08001b74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <SystemInit+0x20>)
 8001b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <SystemInit+0x20>)
 8001b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08e      	sub	sp, #56	; 0x38
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bb8:	463b      	mov	r3, r7
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
 8001bc0:	609a      	str	r2, [r3, #8]
 8001bc2:	60da      	str	r2, [r3, #12]
 8001bc4:	611a      	str	r2, [r3, #16]
 8001bc6:	615a      	str	r2, [r3, #20]
 8001bc8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bca:	4b2d      	ldr	r3, [pc, #180]	; (8001c80 <MX_TIM3_Init+0xe8>)
 8001bcc:	4a2d      	ldr	r2, [pc, #180]	; (8001c84 <MX_TIM3_Init+0xec>)
 8001bce:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bd0:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <MX_TIM3_Init+0xe8>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bd6:	4b2a      	ldr	r3, [pc, #168]	; (8001c80 <MX_TIM3_Init+0xe8>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bdc:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <MX_TIM3_Init+0xe8>)
 8001bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001be2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be4:	4b26      	ldr	r3, [pc, #152]	; (8001c80 <MX_TIM3_Init+0xe8>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bea:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <MX_TIM3_Init+0xe8>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bf0:	4823      	ldr	r0, [pc, #140]	; (8001c80 <MX_TIM3_Init+0xe8>)
 8001bf2:	f004 fa6f 	bl	80060d4 <HAL_TIM_Base_Init>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001bfc:	f7ff fd98 	bl	8001730 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c04:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c06:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	481c      	ldr	r0, [pc, #112]	; (8001c80 <MX_TIM3_Init+0xe8>)
 8001c0e:	f004 fec5 	bl	800699c <HAL_TIM_ConfigClockSource>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001c18:	f7ff fd8a 	bl	8001730 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001c1c:	4818      	ldr	r0, [pc, #96]	; (8001c80 <MX_TIM3_Init+0xe8>)
 8001c1e:	f004 fb21 	bl	8006264 <HAL_TIM_PWM_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001c28:	f7ff fd82 	bl	8001730 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4811      	ldr	r0, [pc, #68]	; (8001c80 <MX_TIM3_Init+0xe8>)
 8001c3c:	f005 fbd0 	bl	80073e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c46:	f7ff fd73 	bl	8001730 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c4a:	2360      	movs	r3, #96	; 0x60
 8001c4c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c52:	2300      	movs	r3, #0
 8001c54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c56:	2300      	movs	r3, #0
 8001c58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c5a:	463b      	mov	r3, r7
 8001c5c:	2204      	movs	r2, #4
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4807      	ldr	r0, [pc, #28]	; (8001c80 <MX_TIM3_Init+0xe8>)
 8001c62:	f004 fd87 	bl	8006774 <HAL_TIM_PWM_ConfigChannel>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001c6c:	f7ff fd60 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001c70:	4803      	ldr	r0, [pc, #12]	; (8001c80 <MX_TIM3_Init+0xe8>)
 8001c72:	f000 f829 	bl	8001cc8 <HAL_TIM_MspPostInit>

}
 8001c76:	bf00      	nop
 8001c78:	3738      	adds	r7, #56	; 0x38
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	20001f64 	.word	0x20001f64
 8001c84:	40000400 	.word	0x40000400

08001c88 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b085      	sub	sp, #20
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <HAL_TIM_Base_MspInit+0x38>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d10b      	bne.n	8001cb2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c9a:	4b0a      	ldr	r3, [pc, #40]	; (8001cc4 <HAL_TIM_Base_MspInit+0x3c>)
 8001c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c9e:	4a09      	ldr	r2, [pc, #36]	; (8001cc4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ca0:	f043 0302 	orr.w	r3, r3, #2
 8001ca4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <HAL_TIM_Base_MspInit+0x3c>)
 8001ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001cb2:	bf00      	nop
 8001cb4:	3714      	adds	r7, #20
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	40000400 	.word	0x40000400
 8001cc4:	40021000 	.word	0x40021000

08001cc8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b088      	sub	sp, #32
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 030c 	add.w	r3, r7, #12
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a11      	ldr	r2, [pc, #68]	; (8001d2c <HAL_TIM_MspPostInit+0x64>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d11b      	bne.n	8001d22 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cea:	4b11      	ldr	r3, [pc, #68]	; (8001d30 <HAL_TIM_MspPostInit+0x68>)
 8001cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cee:	4a10      	ldr	r2, [pc, #64]	; (8001d30 <HAL_TIM_MspPostInit+0x68>)
 8001cf0:	f043 0304 	orr.w	r3, r3, #4
 8001cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001cf6:	4b0e      	ldr	r3, [pc, #56]	; (8001d30 <HAL_TIM_MspPostInit+0x68>)
 8001cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cfa:	f003 0304 	and.w	r3, r3, #4
 8001cfe:	60bb      	str	r3, [r7, #8]
 8001d00:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Red_PWM_Pin;
 8001d02:	2380      	movs	r3, #128	; 0x80
 8001d04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d06:	2302      	movs	r3, #2
 8001d08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001d12:	2302      	movs	r3, #2
 8001d14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Red_PWM_GPIO_Port, &GPIO_InitStruct);
 8001d16:	f107 030c 	add.w	r3, r7, #12
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	4805      	ldr	r0, [pc, #20]	; (8001d34 <HAL_TIM_MspPostInit+0x6c>)
 8001d1e:	f001 fe49 	bl	80039b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001d22:	bf00      	nop
 8001d24:	3720      	adds	r7, #32
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40000400 	.word	0x40000400
 8001d30:	40021000 	.word	0x40021000
 8001d34:	48000800 	.word	0x48000800

08001d38 <uart_send>:

/**
 * @brief Send a string over uart
 * @param[in] message The character array to send
 */
int uart_send (char *buffer, uint16_t length) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b082      	sub	sp, #8
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Transmit(&huart5, (uint8_t*)buffer, length, TIMEOUT);
 8001d44:	887a      	ldrh	r2, [r7, #2]
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	6879      	ldr	r1, [r7, #4]
 8001d4c:	4803      	ldr	r0, [pc, #12]	; (8001d5c <uart_send+0x24>)
 8001d4e:	f005 fc3b 	bl	80075c8 <HAL_UART_Transmit>
 8001d52:	4603      	mov	r3, r0
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20001fb0 	.word	0x20001fb0

08001d60 <uart_receive>:
/**
 * @brief Recieve a string over uart
 * @param[out] buffer The place to write the recieved string
 * @param[in] length The amount of data to read
 */
int uart_receive (char *buffer, uint16_t length) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
 8001d68:	460b      	mov	r3, r1
 8001d6a:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Receive(&huart5, (uint8_t *)buffer, length, TIMEOUT);
 8001d6c:	887a      	ldrh	r2, [r7, #2]
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d72:	6879      	ldr	r1, [r7, #4]
 8001d74:	4803      	ldr	r0, [pc, #12]	; (8001d84 <uart_receive+0x24>)
 8001d76:	f005 fcbb 	bl	80076f0 <HAL_UART_Receive>
 8001d7a:	4603      	mov	r3, r0
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	3708      	adds	r7, #8
 8001d80:	46bd      	mov	sp, r7
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20001fb0 	.word	0x20001fb0

08001d88 <uart_println>:

/**
 * @brief send a string line to uart
 * @param[in] string The string to send
 */
int uart_println (char *string) {
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
    uart_send(string, strlen(string));
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7fe fa1d 	bl	80001d0 <strlen>
 8001d96:	4603      	mov	r3, r0
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ffcb 	bl	8001d38 <uart_send>
    return uart_send("\r\n", 2);
 8001da2:	2102      	movs	r1, #2
 8001da4:	4803      	ldr	r0, [pc, #12]	; (8001db4 <uart_println+0x2c>)
 8001da6:	f7ff ffc7 	bl	8001d38 <uart_send>
 8001daa:	4603      	mov	r3, r0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}
 8001db4:	0800c878 	.word	0x0800c878

08001db8 <uart_get_clock_input>:

/**
 * @brief Let user input the time
 * @param[out] buffer The buffer to write to
 */
void uart_get_clock_input (char *buffer) {
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b084      	sub	sp, #16
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
    uart_println("Please enter the time in HH:MM:SS format!");
 8001dc0:	481b      	ldr	r0, [pc, #108]	; (8001e30 <uart_get_clock_input+0x78>)
 8001dc2:	f7ff ffe1 	bl	8001d88 <uart_println>

    char c;
    uint8_t i = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	73fb      	strb	r3, [r7, #15]
    while (1) {
        uart_receive(&c, 1);
 8001dca:	f107 030e 	add.w	r3, r7, #14
 8001dce:	2101      	movs	r1, #1
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7ff ffc5 	bl	8001d60 <uart_receive>
        /* as long as i < 8 and c != \r
         * If a char 127 (backspace) is written
         * move cursor back */

        /* check if done */
        if (i == 8) {
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	2b08      	cmp	r3, #8
 8001dda:	d109      	bne.n	8001df0 <uart_get_clock_input+0x38>
            if (c == '\r') {
 8001ddc:	7bbb      	ldrb	r3, [r7, #14]
 8001dde:	2b0d      	cmp	r3, #13
 8001de0:	d103      	bne.n	8001dea <uart_get_clock_input+0x32>
                uart_println("");
 8001de2:	4814      	ldr	r0, [pc, #80]	; (8001e34 <uart_get_clock_input+0x7c>)
 8001de4:	f7ff ffd0 	bl	8001d88 <uart_println>
                break;
 8001de8:	e01d      	b.n	8001e26 <uart_get_clock_input+0x6e>
            }
            else if (c != 127)
 8001dea:	7bbb      	ldrb	r3, [r7, #14]
 8001dec:	2b7f      	cmp	r3, #127	; 0x7f
 8001dee:	d118      	bne.n	8001e22 <uart_get_clock_input+0x6a>
                continue;
        }

        uart_send(&c, 1);
 8001df0:	f107 030e 	add.w	r3, r7, #14
 8001df4:	2101      	movs	r1, #1
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ff9e 	bl	8001d38 <uart_send>

        /* write to buffer */
        if (c == 127) {
 8001dfc:	7bbb      	ldrb	r3, [r7, #14]
 8001dfe:	2b7f      	cmp	r3, #127	; 0x7f
 8001e00:	d106      	bne.n	8001e10 <uart_get_clock_input+0x58>
            if (i != 0)
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0e0      	beq.n	8001dca <uart_get_clock_input+0x12>
                --i;
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	73fb      	strb	r3, [r7, #15]
 8001e0e:	e7dc      	b.n	8001dca <uart_get_clock_input+0x12>
        }
        else
            buffer[i++] = c;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	73fa      	strb	r2, [r7, #15]
 8001e16:	461a      	mov	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	7bba      	ldrb	r2, [r7, #14]
 8001e1e:	701a      	strb	r2, [r3, #0]
 8001e20:	e7d3      	b.n	8001dca <uart_get_clock_input+0x12>
                continue;
 8001e22:	bf00      	nop
        uart_receive(&c, 1);
 8001e24:	e7d1      	b.n	8001dca <uart_get_clock_input+0x12>
    }
}
 8001e26:	bf00      	nop
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	0800c880 	.word	0x0800c880
 8001e34:	0800c8ac 	.word	0x0800c8ac

08001e38 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001e3c:	4b14      	ldr	r3, [pc, #80]	; (8001e90 <MX_UART5_Init+0x58>)
 8001e3e:	4a15      	ldr	r2, [pc, #84]	; (8001e94 <MX_UART5_Init+0x5c>)
 8001e40:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001e42:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <MX_UART5_Init+0x58>)
 8001e44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e48:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4a:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <MX_UART5_Init+0x58>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <MX_UART5_Init+0x58>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <MX_UART5_Init+0x58>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <MX_UART5_Init+0x58>)
 8001e5e:	220c      	movs	r2, #12
 8001e60:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <MX_UART5_Init+0x58>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <MX_UART5_Init+0x58>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <MX_UART5_Init+0x58>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <MX_UART5_Init+0x58>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001e7a:	4805      	ldr	r0, [pc, #20]	; (8001e90 <MX_UART5_Init+0x58>)
 8001e7c:	f005 fb56 	bl	800752c <HAL_UART_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001e86:	f7ff fc53 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	20001fb0 	.word	0x20001fb0
 8001e94:	40005000 	.word	0x40005000

08001e98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b0ac      	sub	sp, #176	; 0xb0
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eb0:	f107 0314 	add.w	r3, r7, #20
 8001eb4:	2288      	movs	r2, #136	; 0x88
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f009 fb41 	bl	800b540 <memset>
  if(uartHandle->Instance==UART5)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a36      	ldr	r2, [pc, #216]	; (8001f9c <HAL_UART_MspInit+0x104>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d164      	bne.n	8001f92 <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001ec8:	2310      	movs	r3, #16
 8001eca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f002 fdb1 	bl	8004a3c <HAL_RCCEx_PeriphCLKConfig>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ee0:	f7ff fc26 	bl	8001730 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001ee4:	4b2e      	ldr	r3, [pc, #184]	; (8001fa0 <HAL_UART_MspInit+0x108>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee8:	4a2d      	ldr	r2, [pc, #180]	; (8001fa0 <HAL_UART_MspInit+0x108>)
 8001eea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001eee:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef0:	4b2b      	ldr	r3, [pc, #172]	; (8001fa0 <HAL_UART_MspInit+0x108>)
 8001ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ef8:	613b      	str	r3, [r7, #16]
 8001efa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001efc:	4b28      	ldr	r3, [pc, #160]	; (8001fa0 <HAL_UART_MspInit+0x108>)
 8001efe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f00:	4a27      	ldr	r2, [pc, #156]	; (8001fa0 <HAL_UART_MspInit+0x108>)
 8001f02:	f043 0304 	orr.w	r3, r3, #4
 8001f06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f08:	4b25      	ldr	r3, [pc, #148]	; (8001fa0 <HAL_UART_MspInit+0x108>)
 8001f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f0c:	f003 0304 	and.w	r3, r3, #4
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f14:	4b22      	ldr	r3, [pc, #136]	; (8001fa0 <HAL_UART_MspInit+0x108>)
 8001f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f18:	4a21      	ldr	r2, [pc, #132]	; (8001fa0 <HAL_UART_MspInit+0x108>)
 8001f1a:	f043 0308 	orr.w	r3, r3, #8
 8001f1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f20:	4b1f      	ldr	r3, [pc, #124]	; (8001fa0 <HAL_UART_MspInit+0x108>)
 8001f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001f2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f34:	2302      	movs	r3, #2
 8001f36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f40:	2303      	movs	r3, #3
 8001f42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f46:	2308      	movs	r3, #8
 8001f48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f4c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f50:	4619      	mov	r1, r3
 8001f52:	4814      	ldr	r0, [pc, #80]	; (8001fa4 <HAL_UART_MspInit+0x10c>)
 8001f54:	f001 fd2e 	bl	80039b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f58:	2304      	movs	r3, #4
 8001f5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f5e:	2302      	movs	r3, #2
 8001f60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001f70:	2308      	movs	r3, #8
 8001f72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	480a      	ldr	r0, [pc, #40]	; (8001fa8 <HAL_UART_MspInit+0x110>)
 8001f7e:	f001 fd19 	bl	80039b4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8001f82:	2200      	movs	r2, #0
 8001f84:	2105      	movs	r1, #5
 8001f86:	2035      	movs	r0, #53	; 0x35
 8001f88:	f001 fc6a 	bl	8003860 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001f8c:	2035      	movs	r0, #53	; 0x35
 8001f8e:	f001 fc83 	bl	8003898 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001f92:	bf00      	nop
 8001f94:	37b0      	adds	r7, #176	; 0xb0
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	40005000 	.word	0x40005000
 8001fa0:	40021000 	.word	0x40021000
 8001fa4:	48000800 	.word	0x48000800
 8001fa8:	48000c00 	.word	0x48000c00

08001fac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fb0:	f7ff fde0 	bl	8001b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fb4:	480c      	ldr	r0, [pc, #48]	; (8001fe8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001fb6:	490d      	ldr	r1, [pc, #52]	; (8001fec <LoopForever+0xa>)
  ldr r2, =_sidata
 8001fb8:	4a0d      	ldr	r2, [pc, #52]	; (8001ff0 <LoopForever+0xe>)
  movs r3, #0
 8001fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fbc:	e002      	b.n	8001fc4 <LoopCopyDataInit>

08001fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc2:	3304      	adds	r3, #4

08001fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc8:	d3f9      	bcc.n	8001fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fca:	4a0a      	ldr	r2, [pc, #40]	; (8001ff4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001fcc:	4c0a      	ldr	r4, [pc, #40]	; (8001ff8 <LoopForever+0x16>)
  movs r3, #0
 8001fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd0:	e001      	b.n	8001fd6 <LoopFillZerobss>

08001fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd4:	3204      	adds	r2, #4

08001fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd8:	d3fb      	bcc.n	8001fd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fda:	f009 fa7d 	bl	800b4d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fde:	f7ff facb 	bl	8001578 <main>

08001fe2 <LoopForever>:

LoopForever:
    b LoopForever
 8001fe2:	e7fe      	b.n	8001fe2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fe4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fec:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001ff0:	0800cb48 	.word	0x0800cb48
  ldr r2, =_sbss
 8001ff4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001ff8:	20002088 	.word	0x20002088

08001ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ffc:	e7fe      	b.n	8001ffc <ADC1_2_IRQHandler>
	...

08002000 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002006:	2300      	movs	r3, #0
 8002008:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800200a:	4b0c      	ldr	r3, [pc, #48]	; (800203c <HAL_Init+0x3c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a0b      	ldr	r2, [pc, #44]	; (800203c <HAL_Init+0x3c>)
 8002010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002014:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002016:	2003      	movs	r0, #3
 8002018:	f001 fc17 	bl	800384a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800201c:	200f      	movs	r0, #15
 800201e:	f7ff fcf3 	bl	8001a08 <HAL_InitTick>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d002      	beq.n	800202e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	71fb      	strb	r3, [r7, #7]
 800202c:	e001      	b.n	8002032 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800202e:	f7ff fcc3 	bl	80019b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002032:	79fb      	ldrb	r3, [r7, #7]
}
 8002034:	4618      	mov	r0, r3
 8002036:	3708      	adds	r7, #8
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40022000 	.word	0x40022000

08002040 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <HAL_IncTick+0x20>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	461a      	mov	r2, r3
 800204a:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_IncTick+0x24>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4413      	add	r3, r2
 8002050:	4a04      	ldr	r2, [pc, #16]	; (8002064 <HAL_IncTick+0x24>)
 8002052:	6013      	str	r3, [r2, #0]
}
 8002054:	bf00      	nop
 8002056:	46bd      	mov	sp, r7
 8002058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	20000018 	.word	0x20000018
 8002064:	20002034 	.word	0x20002034

08002068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return uwTick;
 800206c:	4b03      	ldr	r3, [pc, #12]	; (800207c <HAL_GetTick+0x14>)
 800206e:	681b      	ldr	r3, [r3, #0]
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	20002034 	.word	0x20002034

08002080 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002088:	f7ff ffee 	bl	8002068 <HAL_GetTick>
 800208c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002098:	d005      	beq.n	80020a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_Delay+0x44>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	4413      	add	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020a6:	bf00      	nop
 80020a8:	f7ff ffde 	bl	8002068 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	429a      	cmp	r2, r3
 80020b6:	d8f7      	bhi.n	80020a8 <HAL_Delay+0x28>
  {
  }
}
 80020b8:	bf00      	nop
 80020ba:	bf00      	nop
 80020bc:	3710      	adds	r7, #16
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	20000018 	.word	0x20000018

080020c8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
 80020d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	689b      	ldr	r3, [r3, #8]
 80020d6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	431a      	orrs	r2, r3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	609a      	str	r2, [r3, #8]
}
 80020e2:	bf00      	nop
 80020e4:	370c      	adds	r7, #12
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	609a      	str	r2, [r3, #8]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	689b      	ldr	r3, [r3, #8]
 8002120:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002124:	4618      	mov	r0, r3
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr

08002130 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	3360      	adds	r3, #96	; 0x60
 8002142:	461a      	mov	r2, r3
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	4413      	add	r3, r2
 800214a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <LL_ADC_SetOffset+0x44>)
 8002152:	4013      	ands	r3, r2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800215a:	683a      	ldr	r2, [r7, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	4313      	orrs	r3, r2
 8002160:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002168:	bf00      	nop
 800216a:	371c      	adds	r7, #28
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	03fff000 	.word	0x03fff000

08002178 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3360      	adds	r3, #96	; 0x60
 8002186:	461a      	mov	r2, r3
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	4413      	add	r3, r2
 800218e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002198:	4618      	mov	r0, r3
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	60f8      	str	r0, [r7, #12]
 80021ac:	60b9      	str	r1, [r7, #8]
 80021ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	3360      	adds	r3, #96	; 0x60
 80021b4:	461a      	mov	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	431a      	orrs	r2, r3
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80021ce:	bf00      	nop
 80021d0:	371c      	adds	r7, #28
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80021da:	b480      	push	{r7}
 80021dc:	b083      	sub	sp, #12
 80021de:	af00      	add	r7, sp, #0
 80021e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68db      	ldr	r3, [r3, #12]
 80021e6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002200:	b480      	push	{r7}
 8002202:	b087      	sub	sp, #28
 8002204:	af00      	add	r7, sp, #0
 8002206:	60f8      	str	r0, [r7, #12]
 8002208:	60b9      	str	r1, [r7, #8]
 800220a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	3330      	adds	r3, #48	; 0x30
 8002210:	461a      	mov	r2, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	0a1b      	lsrs	r3, r3, #8
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	f003 030c 	and.w	r3, r3, #12
 800221c:	4413      	add	r3, r2
 800221e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f003 031f 	and.w	r3, r3, #31
 800222a:	211f      	movs	r1, #31
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	401a      	ands	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	0e9b      	lsrs	r3, r3, #26
 8002238:	f003 011f 	and.w	r1, r3, #31
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	fa01 f303 	lsl.w	r3, r1, r3
 8002246:	431a      	orrs	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800224c:	bf00      	nop
 800224e:	371c      	adds	r7, #28
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002258:	b480      	push	{r7}
 800225a:	b087      	sub	sp, #28
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	3314      	adds	r3, #20
 8002268:	461a      	mov	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	0e5b      	lsrs	r3, r3, #25
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	f003 0304 	and.w	r3, r3, #4
 8002274:	4413      	add	r3, r2
 8002276:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	0d1b      	lsrs	r3, r3, #20
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	2107      	movs	r1, #7
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	43db      	mvns	r3, r3
 800228c:	401a      	ands	r2, r3
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	0d1b      	lsrs	r3, r3, #20
 8002292:	f003 031f 	and.w	r3, r3, #31
 8002296:	6879      	ldr	r1, [r7, #4]
 8002298:	fa01 f303 	lsl.w	r3, r1, r3
 800229c:	431a      	orrs	r2, r3
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80022a2:	bf00      	nop
 80022a4:	371c      	adds	r7, #28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022c8:	43db      	mvns	r3, r3
 80022ca:	401a      	ands	r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f003 0318 	and.w	r3, r3, #24
 80022d2:	4908      	ldr	r1, [pc, #32]	; (80022f4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80022d4:	40d9      	lsrs	r1, r3
 80022d6:	68bb      	ldr	r3, [r7, #8]
 80022d8:	400b      	ands	r3, r1
 80022da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022de:	431a      	orrs	r2, r3
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80022e6:	bf00      	nop
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
 80022f2:	bf00      	nop
 80022f4:	0007ffff 	.word	0x0007ffff

080022f8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 031f 	and.w	r3, r3, #31
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002340:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	6093      	str	r3, [r2, #8]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002368:	d101      	bne.n	800236e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800238c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002390:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023b8:	d101      	bne.n	80023be <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr

080023cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023e0:	f043 0201 	orr.w	r2, r3, #1
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80023e8:	bf00      	nop
 80023ea:	370c      	adds	r7, #12
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002404:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002408:	f043 0202 	orr.w	r2, r3, #2
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	689b      	ldr	r3, [r3, #8]
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	2b01      	cmp	r3, #1
 800242e:	d101      	bne.n	8002434 <LL_ADC_IsEnabled+0x18>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <LL_ADC_IsEnabled+0x1a>
 8002434:	2300      	movs	r3, #0
}
 8002436:	4618      	mov	r0, r3
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	f003 0302 	and.w	r3, r3, #2
 8002452:	2b02      	cmp	r3, #2
 8002454:	d101      	bne.n	800245a <LL_ADC_IsDisableOngoing+0x18>
 8002456:	2301      	movs	r3, #1
 8002458:	e000      	b.n	800245c <LL_ADC_IsDisableOngoing+0x1a>
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002478:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800247c:	f043 0204 	orr.w	r2, r3, #4
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	2b04      	cmp	r3, #4
 80024a2:	d101      	bne.n	80024a8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024a4:	2301      	movs	r3, #1
 80024a6:	e000      	b.n	80024aa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b083      	sub	sp, #12
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b08      	cmp	r3, #8
 80024c8:	d101      	bne.n	80024ce <LL_ADC_INJ_IsConversionOngoing+0x18>
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b089      	sub	sp, #36	; 0x24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024e4:	2300      	movs	r3, #0
 80024e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e136      	b.n	8002764 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	691b      	ldr	r3, [r3, #16]
 80024fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002500:	2b00      	cmp	r3, #0
 8002502:	d109      	bne.n	8002518 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7fe fc9b 	bl	8000e40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	2200      	movs	r2, #0
 800250e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2200      	movs	r2, #0
 8002514:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4618      	mov	r0, r3
 800251e:	f7ff ff19 	bl	8002354 <LL_ADC_IsDeepPowerDownEnabled>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d004      	beq.n	8002532 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7ff feff 	bl	8002330 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff ff34 	bl	80023a4 <LL_ADC_IsInternalRegulatorEnabled>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d115      	bne.n	800256e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f7ff ff18 	bl	800237c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800254c:	4b87      	ldr	r3, [pc, #540]	; (800276c <HAL_ADC_Init+0x290>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	099b      	lsrs	r3, r3, #6
 8002552:	4a87      	ldr	r2, [pc, #540]	; (8002770 <HAL_ADC_Init+0x294>)
 8002554:	fba2 2303 	umull	r2, r3, r2, r3
 8002558:	099b      	lsrs	r3, r3, #6
 800255a:	3301      	adds	r3, #1
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002560:	e002      	b.n	8002568 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	3b01      	subs	r3, #1
 8002566:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f9      	bne.n	8002562 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4618      	mov	r0, r3
 8002574:	f7ff ff16 	bl	80023a4 <LL_ADC_IsInternalRegulatorEnabled>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10d      	bne.n	800259a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002582:	f043 0210 	orr.w	r2, r3, #16
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258e:	f043 0201 	orr.w	r2, r3, #1
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff ff76 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 80025a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025aa:	f003 0310 	and.w	r3, r3, #16
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f040 80cf 	bne.w	8002752 <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	f040 80cb 	bne.w	8002752 <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80025c4:	f043 0202 	orr.w	r2, r3, #2
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4618      	mov	r0, r3
 80025d2:	f7ff ff23 	bl	800241c <LL_ADC_IsEnabled>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d115      	bne.n	8002608 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025dc:	4865      	ldr	r0, [pc, #404]	; (8002774 <HAL_ADC_Init+0x298>)
 80025de:	f7ff ff1d 	bl	800241c <LL_ADC_IsEnabled>
 80025e2:	4604      	mov	r4, r0
 80025e4:	4864      	ldr	r0, [pc, #400]	; (8002778 <HAL_ADC_Init+0x29c>)
 80025e6:	f7ff ff19 	bl	800241c <LL_ADC_IsEnabled>
 80025ea:	4603      	mov	r3, r0
 80025ec:	431c      	orrs	r4, r3
 80025ee:	4863      	ldr	r0, [pc, #396]	; (800277c <HAL_ADC_Init+0x2a0>)
 80025f0:	f7ff ff14 	bl	800241c <LL_ADC_IsEnabled>
 80025f4:	4603      	mov	r3, r0
 80025f6:	4323      	orrs	r3, r4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d105      	bne.n	8002608 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	4619      	mov	r1, r3
 8002602:	485f      	ldr	r0, [pc, #380]	; (8002780 <HAL_ADC_Init+0x2a4>)
 8002604:	f7ff fd60 	bl	80020c8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	7e5b      	ldrb	r3, [r3, #25]
 800260c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002612:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002618:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800261e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002626:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002628:	4313      	orrs	r3, r2
 800262a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d106      	bne.n	8002644 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	3b01      	subs	r3, #1
 800263c:	045b      	lsls	r3, r3, #17
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	4313      	orrs	r3, r2
 8002642:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002648:	2b00      	cmp	r3, #0
 800264a:	d009      	beq.n	8002660 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002658:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68da      	ldr	r2, [r3, #12]
 8002666:	4b47      	ldr	r3, [pc, #284]	; (8002784 <HAL_ADC_Init+0x2a8>)
 8002668:	4013      	ands	r3, r2
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	69b9      	ldr	r1, [r7, #24]
 8002670:	430b      	orrs	r3, r1
 8002672:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4618      	mov	r0, r3
 800267a:	f7ff ff09 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 800267e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff16 	bl	80024b6 <LL_ADC_INJ_IsConversionOngoing>
 800268a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d13d      	bne.n	800270e <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d13a      	bne.n	800270e <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800269c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80026a4:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80026b4:	f023 0302 	bic.w	r3, r3, #2
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	6812      	ldr	r2, [r2, #0]
 80026bc:	69b9      	ldr	r1, [r7, #24]
 80026be:	430b      	orrs	r3, r1
 80026c0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d118      	bne.n	80026fe <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80026d6:	f023 0304 	bic.w	r3, r3, #4
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80026e2:	4311      	orrs	r1, r2
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80026e8:	4311      	orrs	r1, r2
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026ee:	430a      	orrs	r2, r1
 80026f0:	431a      	orrs	r2, r3
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f042 0201 	orr.w	r2, r2, #1
 80026fa:	611a      	str	r2, [r3, #16]
 80026fc:	e007      	b.n	800270e <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0201 	bic.w	r2, r2, #1
 800270c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	691b      	ldr	r3, [r3, #16]
 8002712:	2b01      	cmp	r3, #1
 8002714:	d10c      	bne.n	8002730 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271c:	f023 010f 	bic.w	r1, r3, #15
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	69db      	ldr	r3, [r3, #28]
 8002724:	1e5a      	subs	r2, r3, #1
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	631a      	str	r2, [r3, #48]	; 0x30
 800272e:	e007      	b.n	8002740 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 020f 	bic.w	r2, r2, #15
 800273e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002744:	f023 0303 	bic.w	r3, r3, #3
 8002748:	f043 0201 	orr.w	r2, r3, #1
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	655a      	str	r2, [r3, #84]	; 0x54
 8002750:	e007      	b.n	8002762 <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002756:	f043 0210 	orr.w	r2, r3, #16
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002762:	7ffb      	ldrb	r3, [r7, #31]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3724      	adds	r7, #36	; 0x24
 8002768:	46bd      	mov	sp, r7
 800276a:	bd90      	pop	{r4, r7, pc}
 800276c:	20000010 	.word	0x20000010
 8002770:	053e2d63 	.word	0x053e2d63
 8002774:	50040000 	.word	0x50040000
 8002778:	50040100 	.word	0x50040100
 800277c:	50040200 	.word	0x50040200
 8002780:	50040300 	.word	0x50040300
 8002784:	fff0c007 	.word	0xfff0c007

08002788 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002790:	4857      	ldr	r0, [pc, #348]	; (80028f0 <HAL_ADC_Start+0x168>)
 8002792:	f7ff fdb1 	bl	80022f8 <LL_ADC_GetMultimode>
 8002796:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff fe77 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f040 809c 	bne.w	80028e2 <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d101      	bne.n	80027b8 <HAL_ADC_Start+0x30>
 80027b4:	2302      	movs	r3, #2
 80027b6:	e097      	b.n	80028e8 <HAL_ADC_Start+0x160>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f000 fd71 	bl	80032a8 <ADC_Enable>
 80027c6:	4603      	mov	r3, r0
 80027c8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027ca:	7dfb      	ldrb	r3, [r7, #23]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	f040 8083 	bne.w	80028d8 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027da:	f023 0301 	bic.w	r3, r3, #1
 80027de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a42      	ldr	r2, [pc, #264]	; (80028f4 <HAL_ADC_Start+0x16c>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d002      	beq.n	80027f6 <HAL_ADC_Start+0x6e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	e000      	b.n	80027f8 <HAL_ADC_Start+0x70>
 80027f6:	4b40      	ldr	r3, [pc, #256]	; (80028f8 <HAL_ADC_Start+0x170>)
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6812      	ldr	r2, [r2, #0]
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d002      	beq.n	8002806 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d105      	bne.n	8002812 <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800280a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002816:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800281a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800281e:	d106      	bne.n	800282e <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002824:	f023 0206 	bic.w	r2, r3, #6
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	659a      	str	r2, [r3, #88]	; 0x58
 800282c:	e002      	b.n	8002834 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2200      	movs	r2, #0
 8002832:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	221c      	movs	r2, #28
 800283a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a2a      	ldr	r2, [pc, #168]	; (80028f4 <HAL_ADC_Start+0x16c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d002      	beq.n	8002854 <HAL_ADC_Start+0xcc>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	e000      	b.n	8002856 <HAL_ADC_Start+0xce>
 8002854:	4b28      	ldr	r3, [pc, #160]	; (80028f8 <HAL_ADC_Start+0x170>)
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6812      	ldr	r2, [r2, #0]
 800285a:	4293      	cmp	r3, r2
 800285c:	d008      	beq.n	8002870 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	2b05      	cmp	r3, #5
 8002868:	d002      	beq.n	8002870 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	2b09      	cmp	r3, #9
 800286e:	d114      	bne.n	800289a <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d007      	beq.n	800288e <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002882:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002886:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7ff fde8 	bl	8002468 <LL_ADC_REG_StartConversion>
 8002898:	e025      	b.n	80028e6 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800289e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a12      	ldr	r2, [pc, #72]	; (80028f4 <HAL_ADC_Start+0x16c>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d002      	beq.n	80028b6 <HAL_ADC_Start+0x12e>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	e000      	b.n	80028b8 <HAL_ADC_Start+0x130>
 80028b6:	4b10      	ldr	r3, [pc, #64]	; (80028f8 <HAL_ADC_Start+0x170>)
 80028b8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d00f      	beq.n	80028e6 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028ca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028ce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	655a      	str	r2, [r3, #84]	; 0x54
 80028d6:	e006      	b.n	80028e6 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80028e0:	e001      	b.n	80028e6 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80028e2:	2302      	movs	r3, #2
 80028e4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80028e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	3718      	adds	r7, #24
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bd80      	pop	{r7, pc}
 80028f0:	50040300 	.word	0x50040300
 80028f4:	50040100 	.word	0x50040100
 80028f8:	50040000 	.word	0x50040000

080028fc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b088      	sub	sp, #32
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002906:	4866      	ldr	r0, [pc, #408]	; (8002aa0 <HAL_ADC_PollForConversion+0x1a4>)
 8002908:	f7ff fcf6 	bl	80022f8 <LL_ADC_GetMultimode>
 800290c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
 8002912:	2b08      	cmp	r3, #8
 8002914:	d102      	bne.n	800291c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002916:	2308      	movs	r3, #8
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	e02a      	b.n	8002972 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d005      	beq.n	800292e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	2b05      	cmp	r3, #5
 8002926:	d002      	beq.n	800292e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	2b09      	cmp	r3, #9
 800292c:	d111      	bne.n	8002952 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d007      	beq.n	800294c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0a4      	b.n	8002a96 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800294c:	2304      	movs	r3, #4
 800294e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002950:	e00f      	b.n	8002972 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002952:	4853      	ldr	r0, [pc, #332]	; (8002aa0 <HAL_ADC_PollForConversion+0x1a4>)
 8002954:	f7ff fcde 	bl	8002314 <LL_ADC_GetMultiDMATransfer>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d007      	beq.n	800296e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002962:	f043 0220 	orr.w	r2, r3, #32
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e093      	b.n	8002a96 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800296e:	2304      	movs	r3, #4
 8002970:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002972:	f7ff fb79 	bl	8002068 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002978:	e021      	b.n	80029be <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002980:	d01d      	beq.n	80029be <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002982:	f7ff fb71 	bl	8002068 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d302      	bcc.n	8002998 <HAL_ADC_PollForConversion+0x9c>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d112      	bne.n	80029be <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10b      	bne.n	80029be <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029aa:	f043 0204 	orr.w	r2, r3, #4
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80029ba:	2303      	movs	r3, #3
 80029bc:	e06b      	b.n	8002a96 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0d6      	beq.n	800297a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4618      	mov	r0, r3
 80029de:	f7ff fbfc 	bl	80021da <LL_ADC_REG_IsTriggerSourceSWStart>
 80029e2:	4603      	mov	r3, r0
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d01c      	beq.n	8002a22 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	7e5b      	ldrb	r3, [r3, #25]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d118      	bne.n	8002a22 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d111      	bne.n	8002a22 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d105      	bne.n	8002a22 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a1a:	f043 0201 	orr.w	r2, r3, #1
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a1f      	ldr	r2, [pc, #124]	; (8002aa4 <HAL_ADC_PollForConversion+0x1a8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d002      	beq.n	8002a32 <HAL_ADC_PollForConversion+0x136>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	e000      	b.n	8002a34 <HAL_ADC_PollForConversion+0x138>
 8002a32:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <HAL_ADC_PollForConversion+0x1ac>)
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d008      	beq.n	8002a4e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d005      	beq.n	8002a4e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2b05      	cmp	r3, #5
 8002a46:	d002      	beq.n	8002a4e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	2b09      	cmp	r3, #9
 8002a4c:	d104      	bne.n	8002a58 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	68db      	ldr	r3, [r3, #12]
 8002a54:	61bb      	str	r3, [r7, #24]
 8002a56:	e00c      	b.n	8002a72 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a11      	ldr	r2, [pc, #68]	; (8002aa4 <HAL_ADC_PollForConversion+0x1a8>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d002      	beq.n	8002a68 <HAL_ADC_PollForConversion+0x16c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	e000      	b.n	8002a6a <HAL_ADC_PollForConversion+0x16e>
 8002a68:	4b0f      	ldr	r3, [pc, #60]	; (8002aa8 <HAL_ADC_PollForConversion+0x1ac>)
 8002a6a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	2b08      	cmp	r3, #8
 8002a76:	d104      	bne.n	8002a82 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2208      	movs	r2, #8
 8002a7e:	601a      	str	r2, [r3, #0]
 8002a80:	e008      	b.n	8002a94 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d103      	bne.n	8002a94 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	220c      	movs	r2, #12
 8002a92:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3720      	adds	r7, #32
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	50040300 	.word	0x50040300
 8002aa4:	50040100 	.word	0x50040100
 8002aa8:	50040000 	.word	0x50040000

08002aac <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b083      	sub	sp, #12
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
	...

08002ac8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b0b6      	sub	sp, #216	; 0xd8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d101      	bne.n	8002aea <HAL_ADC_ConfigChannel+0x22>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	e3c7      	b.n	800327a <HAL_ADC_ConfigChannel+0x7b2>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7ff fcca 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f040 83a8 	bne.w	8003254 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	2b05      	cmp	r3, #5
 8002b0a:	d824      	bhi.n	8002b56 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	3b02      	subs	r3, #2
 8002b12:	2b03      	cmp	r3, #3
 8002b14:	d81b      	bhi.n	8002b4e <HAL_ADC_ConfigChannel+0x86>
 8002b16:	a201      	add	r2, pc, #4	; (adr r2, 8002b1c <HAL_ADC_ConfigChannel+0x54>)
 8002b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b1c:	08002b2d 	.word	0x08002b2d
 8002b20:	08002b35 	.word	0x08002b35
 8002b24:	08002b3d 	.word	0x08002b3d
 8002b28:	08002b45 	.word	0x08002b45
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	220c      	movs	r2, #12
 8002b30:	605a      	str	r2, [r3, #4]
          break;
 8002b32:	e011      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2212      	movs	r2, #18
 8002b38:	605a      	str	r2, [r3, #4]
          break;
 8002b3a:	e00d      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	2218      	movs	r2, #24
 8002b40:	605a      	str	r2, [r3, #4]
          break;
 8002b42:	e009      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b4a:	605a      	str	r2, [r3, #4]
          break;
 8002b4c:	e004      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2206      	movs	r2, #6
 8002b52:	605a      	str	r2, [r3, #4]
          break;
 8002b54:	e000      	b.n	8002b58 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002b56:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	461a      	mov	r2, r3
 8002b66:	f7ff fb4b 	bl	8002200 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f7ff fc8e 	bl	8002490 <LL_ADC_REG_IsConversionOngoing>
 8002b74:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff fc9a 	bl	80024b6 <LL_ADC_INJ_IsConversionOngoing>
 8002b82:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b86:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f040 81a6 	bne.w	8002edc <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	f040 81a1 	bne.w	8002edc <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6818      	ldr	r0, [r3, #0]
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	6819      	ldr	r1, [r3, #0]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	461a      	mov	r2, r3
 8002ba8:	f7ff fb56 	bl	8002258 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	695a      	ldr	r2, [r3, #20]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	08db      	lsrs	r3, r3, #3
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	005b      	lsls	r3, r3, #1
 8002bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d00a      	beq.n	8002be4 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6919      	ldr	r1, [r3, #16]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002bde:	f7ff faa7 	bl	8002130 <LL_ADC_SetOffset>
 8002be2:	e17b      	b.n	8002edc <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2100      	movs	r1, #0
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff fac4 	bl	8002178 <LL_ADC_GetOffsetChannel>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10a      	bne.n	8002c10 <HAL_ADC_ConfigChannel+0x148>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2100      	movs	r1, #0
 8002c00:	4618      	mov	r0, r3
 8002c02:	f7ff fab9 	bl	8002178 <LL_ADC_GetOffsetChannel>
 8002c06:	4603      	mov	r3, r0
 8002c08:	0e9b      	lsrs	r3, r3, #26
 8002c0a:	f003 021f 	and.w	r2, r3, #31
 8002c0e:	e01e      	b.n	8002c4e <HAL_ADC_ConfigChannel+0x186>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2100      	movs	r1, #0
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff faae 	bl	8002178 <LL_ADC_GetOffsetChannel>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c22:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c26:	fa93 f3a3 	rbit	r3, r3
 8002c2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002c2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002c32:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002c36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002c3e:	2320      	movs	r3, #32
 8002c40:	e004      	b.n	8002c4c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002c42:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002c46:	fab3 f383 	clz	r3, r3
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d105      	bne.n	8002c66 <HAL_ADC_ConfigChannel+0x19e>
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	0e9b      	lsrs	r3, r3, #26
 8002c60:	f003 031f 	and.w	r3, r3, #31
 8002c64:	e018      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x1d0>
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002c72:	fa93 f3a3 	rbit	r3, r3
 8002c76:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002c7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002c7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002c82:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002c8a:	2320      	movs	r3, #32
 8002c8c:	e004      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002c8e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d106      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff fa7d 	bl	80021a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2101      	movs	r1, #1
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f7ff fa61 	bl	8002178 <LL_ADC_GetOffsetChannel>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10a      	bne.n	8002cd6 <HAL_ADC_ConfigChannel+0x20e>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fa56 	bl	8002178 <LL_ADC_GetOffsetChannel>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	0e9b      	lsrs	r3, r3, #26
 8002cd0:	f003 021f 	and.w	r2, r3, #31
 8002cd4:	e01e      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x24c>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2101      	movs	r1, #1
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff fa4b 	bl	8002178 <LL_ADC_GetOffsetChannel>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002cec:	fa93 f3a3 	rbit	r3, r3
 8002cf0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002cf4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002cf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002cfc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d101      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002d04:	2320      	movs	r3, #32
 8002d06:	e004      	b.n	8002d12 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002d08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002d0c:	fab3 f383 	clz	r3, r3
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0x264>
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	0e9b      	lsrs	r3, r3, #26
 8002d26:	f003 031f 	and.w	r3, r3, #31
 8002d2a:	e018      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x296>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d38:	fa93 f3a3 	rbit	r3, r3
 8002d3c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002d40:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002d44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d101      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002d50:	2320      	movs	r3, #32
 8002d52:	e004      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002d54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d58:	fab3 f383 	clz	r3, r3
 8002d5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d106      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2200      	movs	r2, #0
 8002d68:	2101      	movs	r1, #1
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7ff fa1a 	bl	80021a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2102      	movs	r1, #2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff f9fe 	bl	8002178 <LL_ADC_GetOffsetChannel>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d10a      	bne.n	8002d9c <HAL_ADC_ConfigChannel+0x2d4>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2102      	movs	r1, #2
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff f9f3 	bl	8002178 <LL_ADC_GetOffsetChannel>
 8002d92:	4603      	mov	r3, r0
 8002d94:	0e9b      	lsrs	r3, r3, #26
 8002d96:	f003 021f 	and.w	r2, r3, #31
 8002d9a:	e01e      	b.n	8002dda <HAL_ADC_ConfigChannel+0x312>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2102      	movs	r1, #2
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff f9e8 	bl	8002178 <LL_ADC_GetOffsetChannel>
 8002da8:	4603      	mov	r3, r0
 8002daa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002db2:	fa93 f3a3 	rbit	r3, r3
 8002db6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002dba:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002dbe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002dc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002dca:	2320      	movs	r3, #32
 8002dcc:	e004      	b.n	8002dd8 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002dce:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002dd2:	fab3 f383 	clz	r3, r3
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d105      	bne.n	8002df2 <HAL_ADC_ConfigChannel+0x32a>
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	0e9b      	lsrs	r3, r3, #26
 8002dec:	f003 031f 	and.w	r3, r3, #31
 8002df0:	e016      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x358>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002dfe:	fa93 f3a3 	rbit	r3, r3
 8002e02:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002e04:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002e06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002e0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002e12:	2320      	movs	r3, #32
 8002e14:	e004      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002e16:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e1a:	fab3 f383 	clz	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e20:	429a      	cmp	r2, r3
 8002e22:	d106      	bne.n	8002e32 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	2102      	movs	r1, #2
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff f9b9 	bl	80021a4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2103      	movs	r1, #3
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7ff f99d 	bl	8002178 <LL_ADC_GetOffsetChannel>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10a      	bne.n	8002e5e <HAL_ADC_ConfigChannel+0x396>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2103      	movs	r1, #3
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f7ff f992 	bl	8002178 <LL_ADC_GetOffsetChannel>
 8002e54:	4603      	mov	r3, r0
 8002e56:	0e9b      	lsrs	r3, r3, #26
 8002e58:	f003 021f 	and.w	r2, r3, #31
 8002e5c:	e017      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x3c6>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2103      	movs	r1, #3
 8002e64:	4618      	mov	r0, r3
 8002e66:	f7ff f987 	bl	8002178 <LL_ADC_GetOffsetChannel>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e70:	fa93 f3a3 	rbit	r3, r3
 8002e74:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002e76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e78:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002e7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d101      	bne.n	8002e84 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002e80:	2320      	movs	r3, #32
 8002e82:	e003      	b.n	8002e8c <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e86:	fab3 f383 	clz	r3, r3
 8002e8a:	b2db      	uxtb	r3, r3
 8002e8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d105      	bne.n	8002ea6 <HAL_ADC_ConfigChannel+0x3de>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	0e9b      	lsrs	r3, r3, #26
 8002ea0:	f003 031f 	and.w	r3, r3, #31
 8002ea4:	e011      	b.n	8002eca <HAL_ADC_ConfigChannel+0x402>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002eb6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002eb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002ebe:	2320      	movs	r3, #32
 8002ec0:	e003      	b.n	8002eca <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002ec2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ec4:	fab3 f383 	clz	r3, r3
 8002ec8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002eca:	429a      	cmp	r2, r3
 8002ecc:	d106      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2103      	movs	r1, #3
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7ff f964 	bl	80021a4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f7ff fa9b 	bl	800241c <LL_ADC_IsEnabled>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f040 813f 	bne.w	800316c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6818      	ldr	r0, [r3, #0]
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	6819      	ldr	r1, [r3, #0]
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	461a      	mov	r2, r3
 8002efc:	f7ff f9d8 	bl	80022b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4a8e      	ldr	r2, [pc, #568]	; (8003140 <HAL_ADC_ConfigChannel+0x678>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	f040 8130 	bne.w	800316c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10b      	bne.n	8002f34 <HAL_ADC_ConfigChannel+0x46c>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	0e9b      	lsrs	r3, r3, #26
 8002f22:	3301      	adds	r3, #1
 8002f24:	f003 031f 	and.w	r3, r3, #31
 8002f28:	2b09      	cmp	r3, #9
 8002f2a:	bf94      	ite	ls
 8002f2c:	2301      	movls	r3, #1
 8002f2e:	2300      	movhi	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	e019      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x4a0>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f3c:	fa93 f3a3 	rbit	r3, r3
 8002f40:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f44:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002f46:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d101      	bne.n	8002f50 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002f4c:	2320      	movs	r3, #32
 8002f4e:	e003      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002f50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f52:	fab3 f383 	clz	r3, r3
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	3301      	adds	r3, #1
 8002f5a:	f003 031f 	and.w	r3, r3, #31
 8002f5e:	2b09      	cmp	r3, #9
 8002f60:	bf94      	ite	ls
 8002f62:	2301      	movls	r3, #1
 8002f64:	2300      	movhi	r3, #0
 8002f66:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d079      	beq.n	8003060 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d107      	bne.n	8002f88 <HAL_ADC_ConfigChannel+0x4c0>
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	0e9b      	lsrs	r3, r3, #26
 8002f7e:	3301      	adds	r3, #1
 8002f80:	069b      	lsls	r3, r3, #26
 8002f82:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f86:	e015      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x4ec>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f90:	fa93 f3a3 	rbit	r3, r3
 8002f94:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f98:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002f9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002fa0:	2320      	movs	r3, #32
 8002fa2:	e003      	b.n	8002fac <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002fa6:	fab3 f383 	clz	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	3301      	adds	r3, #1
 8002fae:	069b      	lsls	r3, r3, #26
 8002fb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d109      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x50c>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	0e9b      	lsrs	r3, r3, #26
 8002fc6:	3301      	adds	r3, #1
 8002fc8:	f003 031f 	and.w	r3, r3, #31
 8002fcc:	2101      	movs	r1, #1
 8002fce:	fa01 f303 	lsl.w	r3, r1, r3
 8002fd2:	e017      	b.n	8003004 <HAL_ADC_ConfigChannel+0x53c>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fda:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002fdc:	fa93 f3a3 	rbit	r3, r3
 8002fe0:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002fe2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d101      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002fec:	2320      	movs	r3, #32
 8002fee:	e003      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002ff0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ff2:	fab3 f383 	clz	r3, r3
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	f003 031f 	and.w	r3, r3, #31
 8002ffe:	2101      	movs	r1, #1
 8003000:	fa01 f303 	lsl.w	r3, r1, r3
 8003004:	ea42 0103 	orr.w	r1, r2, r3
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10a      	bne.n	800302a <HAL_ADC_ConfigChannel+0x562>
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	0e9b      	lsrs	r3, r3, #26
 800301a:	3301      	adds	r3, #1
 800301c:	f003 021f 	and.w	r2, r3, #31
 8003020:	4613      	mov	r3, r2
 8003022:	005b      	lsls	r3, r3, #1
 8003024:	4413      	add	r3, r2
 8003026:	051b      	lsls	r3, r3, #20
 8003028:	e018      	b.n	800305c <HAL_ADC_ConfigChannel+0x594>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003032:	fa93 f3a3 	rbit	r3, r3
 8003036:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800303a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800303c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003042:	2320      	movs	r3, #32
 8003044:	e003      	b.n	800304e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003046:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	3301      	adds	r3, #1
 8003050:	f003 021f 	and.w	r2, r3, #31
 8003054:	4613      	mov	r3, r2
 8003056:	005b      	lsls	r3, r3, #1
 8003058:	4413      	add	r3, r2
 800305a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800305c:	430b      	orrs	r3, r1
 800305e:	e080      	b.n	8003162 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003068:	2b00      	cmp	r3, #0
 800306a:	d107      	bne.n	800307c <HAL_ADC_ConfigChannel+0x5b4>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	0e9b      	lsrs	r3, r3, #26
 8003072:	3301      	adds	r3, #1
 8003074:	069b      	lsls	r3, r3, #26
 8003076:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800307a:	e015      	b.n	80030a8 <HAL_ADC_ConfigChannel+0x5e0>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003084:	fa93 f3a3 	rbit	r3, r3
 8003088:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800308e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003090:	2b00      	cmp	r3, #0
 8003092:	d101      	bne.n	8003098 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003094:	2320      	movs	r3, #32
 8003096:	e003      	b.n	80030a0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309a:	fab3 f383 	clz	r3, r3
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	3301      	adds	r3, #1
 80030a2:	069b      	lsls	r3, r3, #26
 80030a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d109      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x600>
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	0e9b      	lsrs	r3, r3, #26
 80030ba:	3301      	adds	r3, #1
 80030bc:	f003 031f 	and.w	r3, r3, #31
 80030c0:	2101      	movs	r1, #1
 80030c2:	fa01 f303 	lsl.w	r3, r1, r3
 80030c6:	e017      	b.n	80030f8 <HAL_ADC_ConfigChannel+0x630>
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ce:	6a3b      	ldr	r3, [r7, #32]
 80030d0:	fa93 f3a3 	rbit	r3, r3
 80030d4:	61fb      	str	r3, [r7, #28]
  return result;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80030da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80030e0:	2320      	movs	r3, #32
 80030e2:	e003      	b.n	80030ec <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80030e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	3301      	adds	r3, #1
 80030ee:	f003 031f 	and.w	r3, r3, #31
 80030f2:	2101      	movs	r1, #1
 80030f4:	fa01 f303 	lsl.w	r3, r1, r3
 80030f8:	ea42 0103 	orr.w	r1, r2, r3
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003104:	2b00      	cmp	r3, #0
 8003106:	d10d      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x65c>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	0e9b      	lsrs	r3, r3, #26
 800310e:	3301      	adds	r3, #1
 8003110:	f003 021f 	and.w	r2, r3, #31
 8003114:	4613      	mov	r3, r2
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	4413      	add	r3, r2
 800311a:	3b1e      	subs	r3, #30
 800311c:	051b      	lsls	r3, r3, #20
 800311e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003122:	e01d      	b.n	8003160 <HAL_ADC_ConfigChannel+0x698>
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	fa93 f3a3 	rbit	r3, r3
 8003130:	613b      	str	r3, [r7, #16]
  return result;
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d103      	bne.n	8003144 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800313c:	2320      	movs	r3, #32
 800313e:	e005      	b.n	800314c <HAL_ADC_ConfigChannel+0x684>
 8003140:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	fab3 f383 	clz	r3, r3
 800314a:	b2db      	uxtb	r3, r3
 800314c:	3301      	adds	r3, #1
 800314e:	f003 021f 	and.w	r2, r3, #31
 8003152:	4613      	mov	r3, r2
 8003154:	005b      	lsls	r3, r3, #1
 8003156:	4413      	add	r3, r2
 8003158:	3b1e      	subs	r3, #30
 800315a:	051b      	lsls	r3, r3, #20
 800315c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003160:	430b      	orrs	r3, r1
 8003162:	683a      	ldr	r2, [r7, #0]
 8003164:	6892      	ldr	r2, [r2, #8]
 8003166:	4619      	mov	r1, r3
 8003168:	f7ff f876 	bl	8002258 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	4b44      	ldr	r3, [pc, #272]	; (8003284 <HAL_ADC_ConfigChannel+0x7bc>)
 8003172:	4013      	ands	r3, r2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d07a      	beq.n	800326e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003178:	4843      	ldr	r0, [pc, #268]	; (8003288 <HAL_ADC_ConfigChannel+0x7c0>)
 800317a:	f7fe ffcb 	bl	8002114 <LL_ADC_GetCommonPathInternalCh>
 800317e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a41      	ldr	r2, [pc, #260]	; (800328c <HAL_ADC_ConfigChannel+0x7c4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d12c      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800318c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003190:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d126      	bne.n	80031e6 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a3c      	ldr	r2, [pc, #240]	; (8003290 <HAL_ADC_ConfigChannel+0x7c8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d004      	beq.n	80031ac <HAL_ADC_ConfigChannel+0x6e4>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a3b      	ldr	r2, [pc, #236]	; (8003294 <HAL_ADC_ConfigChannel+0x7cc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d15d      	bne.n	8003268 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80031b4:	4619      	mov	r1, r3
 80031b6:	4834      	ldr	r0, [pc, #208]	; (8003288 <HAL_ADC_ConfigChannel+0x7c0>)
 80031b8:	f7fe ff99 	bl	80020ee <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031bc:	4b36      	ldr	r3, [pc, #216]	; (8003298 <HAL_ADC_ConfigChannel+0x7d0>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	099b      	lsrs	r3, r3, #6
 80031c2:	4a36      	ldr	r2, [pc, #216]	; (800329c <HAL_ADC_ConfigChannel+0x7d4>)
 80031c4:	fba2 2303 	umull	r2, r3, r2, r3
 80031c8:	099b      	lsrs	r3, r3, #6
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	4613      	mov	r3, r2
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031d6:	e002      	b.n	80031de <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	3b01      	subs	r3, #1
 80031dc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f9      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80031e4:	e040      	b.n	8003268 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a2d      	ldr	r2, [pc, #180]	; (80032a0 <HAL_ADC_ConfigChannel+0x7d8>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d118      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x75a>
 80031f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80031f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d112      	bne.n	8003222 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a23      	ldr	r2, [pc, #140]	; (8003290 <HAL_ADC_ConfigChannel+0x7c8>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d004      	beq.n	8003210 <HAL_ADC_ConfigChannel+0x748>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a22      	ldr	r2, [pc, #136]	; (8003294 <HAL_ADC_ConfigChannel+0x7cc>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d12d      	bne.n	800326c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003210:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003214:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003218:	4619      	mov	r1, r3
 800321a:	481b      	ldr	r0, [pc, #108]	; (8003288 <HAL_ADC_ConfigChannel+0x7c0>)
 800321c:	f7fe ff67 	bl	80020ee <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003220:	e024      	b.n	800326c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a1f      	ldr	r2, [pc, #124]	; (80032a4 <HAL_ADC_ConfigChannel+0x7dc>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d120      	bne.n	800326e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800322c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003230:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d11a      	bne.n	800326e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a14      	ldr	r2, [pc, #80]	; (8003290 <HAL_ADC_ConfigChannel+0x7c8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d115      	bne.n	800326e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003242:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003246:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800324a:	4619      	mov	r1, r3
 800324c:	480e      	ldr	r0, [pc, #56]	; (8003288 <HAL_ADC_ConfigChannel+0x7c0>)
 800324e:	f7fe ff4e 	bl	80020ee <LL_ADC_SetCommonPathInternalCh>
 8003252:	e00c      	b.n	800326e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003258:	f043 0220 	orr.w	r2, r3, #32
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003266:	e002      	b.n	800326e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003268:	bf00      	nop
 800326a:	e000      	b.n	800326e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800326c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003276:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800327a:	4618      	mov	r0, r3
 800327c:	37d8      	adds	r7, #216	; 0xd8
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	80080000 	.word	0x80080000
 8003288:	50040300 	.word	0x50040300
 800328c:	c7520000 	.word	0xc7520000
 8003290:	50040000 	.word	0x50040000
 8003294:	50040200 	.word	0x50040200
 8003298:	20000010 	.word	0x20000010
 800329c:	053e2d63 	.word	0x053e2d63
 80032a0:	cb840000 	.word	0xcb840000
 80032a4:	80000001 	.word	0x80000001

080032a8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff f8b1 	bl	800241c <LL_ADC_IsEnabled>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d14d      	bne.n	800335c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	689a      	ldr	r2, [r3, #8]
 80032c6:	4b28      	ldr	r3, [pc, #160]	; (8003368 <ADC_Enable+0xc0>)
 80032c8:	4013      	ands	r3, r2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00d      	beq.n	80032ea <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d2:	f043 0210 	orr.w	r2, r3, #16
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032de:	f043 0201 	orr.w	r2, r3, #1
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e039      	b.n	800335e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7ff f86c 	bl	80023cc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80032f4:	f7fe feb8 	bl	8002068 <HAL_GetTick>
 80032f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80032fa:	e028      	b.n	800334e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4618      	mov	r0, r3
 8003302:	f7ff f88b 	bl	800241c <LL_ADC_IsEnabled>
 8003306:	4603      	mov	r3, r0
 8003308:	2b00      	cmp	r3, #0
 800330a:	d104      	bne.n	8003316 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff f85b 	bl	80023cc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003316:	f7fe fea7 	bl	8002068 <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d914      	bls.n	800334e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0301 	and.w	r3, r3, #1
 800332e:	2b01      	cmp	r3, #1
 8003330:	d00d      	beq.n	800334e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003336:	f043 0210 	orr.w	r2, r3, #16
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003342:	f043 0201 	orr.w	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e007      	b.n	800335e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b01      	cmp	r3, #1
 800335a:	d1cf      	bne.n	80032fc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	8000003f 	.word	0x8000003f

0800336c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4618      	mov	r0, r3
 800337a:	f7ff f862 	bl	8002442 <LL_ADC_IsDisableOngoing>
 800337e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff f849 	bl	800241c <LL_ADC_IsEnabled>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d047      	beq.n	8003420 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d144      	bne.n	8003420 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f003 030d 	and.w	r3, r3, #13
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d10c      	bne.n	80033be <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff f823 	bl	80023f4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2203      	movs	r2, #3
 80033b4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80033b6:	f7fe fe57 	bl	8002068 <HAL_GetTick>
 80033ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033bc:	e029      	b.n	8003412 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033c2:	f043 0210 	orr.w	r2, r3, #16
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033ce:	f043 0201 	orr.w	r2, r3, #1
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e023      	b.n	8003422 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80033da:	f7fe fe45 	bl	8002068 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	2b02      	cmp	r3, #2
 80033e6:	d914      	bls.n	8003412 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00d      	beq.n	8003412 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fa:	f043 0210 	orr.w	r2, r3, #16
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003406:	f043 0201 	orr.w	r2, r3, #1
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e007      	b.n	8003422 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d1dc      	bne.n	80033da <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}

0800342a <LL_ADC_IsEnabled>:
{
 800342a:	b480      	push	{r7}
 800342c:	b083      	sub	sp, #12
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f003 0301 	and.w	r3, r3, #1
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <LL_ADC_IsEnabled+0x18>
 800343e:	2301      	movs	r3, #1
 8003440:	e000      	b.n	8003444 <LL_ADC_IsEnabled+0x1a>
 8003442:	2300      	movs	r3, #0
}
 8003444:	4618      	mov	r0, r3
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <LL_ADC_StartCalibration>:
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003462:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800346c:	4313      	orrs	r3, r2
 800346e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	609a      	str	r2, [r3, #8]
}
 8003476:	bf00      	nop
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <LL_ADC_IsCalibrationOnGoing>:
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003492:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003496:	d101      	bne.n	800349c <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003498:	2301      	movs	r3, #1
 800349a:	e000      	b.n	800349e <LL_ADC_IsCalibrationOnGoing+0x1c>
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr

080034aa <LL_ADC_REG_IsConversionOngoing>:
{
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 0304 	and.w	r3, r3, #4
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d101      	bne.n	80034c2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80034be:	2301      	movs	r3, #1
 80034c0:	e000      	b.n	80034c4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80034da:	2300      	movs	r3, #0
 80034dc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d101      	bne.n	80034ec <HAL_ADCEx_Calibration_Start+0x1c>
 80034e8:	2302      	movs	r3, #2
 80034ea:	e04d      	b.n	8003588 <HAL_ADCEx_Calibration_Start+0xb8>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7ff ff39 	bl	800336c <ADC_Disable>
 80034fa:	4603      	mov	r3, r0
 80034fc:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d136      	bne.n	8003572 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003508:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800350c:	f023 0302 	bic.w	r3, r3, #2
 8003510:	f043 0202 	orr.w	r2, r3, #2
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6839      	ldr	r1, [r7, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff ff96 	bl	8003450 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003524:	e014      	b.n	8003550 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	3301      	adds	r3, #1
 800352a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 8003532:	d30d      	bcc.n	8003550 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003538:	f023 0312 	bic.w	r3, r3, #18
 800353c:	f043 0210 	orr.w	r2, r3, #16
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e01b      	b.n	8003588 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff ff94 	bl	8003482 <LL_ADC_IsCalibrationOnGoing>
 800355a:	4603      	mov	r3, r0
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e2      	bne.n	8003526 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003564:	f023 0303 	bic.w	r3, r3, #3
 8003568:	f043 0201 	orr.w	r2, r3, #1
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	655a      	str	r2, [r3, #84]	; 0x54
 8003570:	e005      	b.n	800357e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003576:	f043 0210 	orr.w	r2, r3, #16
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2200      	movs	r2, #0
 8003582:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003586:	7bfb      	ldrb	r3, [r7, #15]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003590:	b590      	push	{r4, r7, lr}
 8003592:	b09f      	sub	sp, #124	; 0x7c
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
 8003598:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d101      	bne.n	80035ae <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80035aa:	2302      	movs	r3, #2
 80035ac:	e093      	b.n	80036d6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80035b6:	2300      	movs	r3, #0
 80035b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80035ba:	2300      	movs	r3, #0
 80035bc:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a47      	ldr	r2, [pc, #284]	; (80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d102      	bne.n	80035ce <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80035c8:	4b46      	ldr	r3, [pc, #280]	; (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	e001      	b.n	80035d2 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80035ce:	2300      	movs	r3, #0
 80035d0:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10b      	bne.n	80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035dc:	f043 0220 	orr.w	r2, r3, #32
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	e072      	b.n	80036d6 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff ff59 	bl	80034aa <LL_ADC_REG_IsConversionOngoing>
 80035f8:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff ff53 	bl	80034aa <LL_ADC_REG_IsConversionOngoing>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d154      	bne.n	80036b4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800360a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800360c:	2b00      	cmp	r3, #0
 800360e:	d151      	bne.n	80036b4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003610:	4b35      	ldr	r3, [pc, #212]	; (80036e8 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003612:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d02c      	beq.n	8003676 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800361c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	6859      	ldr	r1, [r3, #4]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800362e:	035b      	lsls	r3, r3, #13
 8003630:	430b      	orrs	r3, r1
 8003632:	431a      	orrs	r2, r3
 8003634:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003636:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003638:	4829      	ldr	r0, [pc, #164]	; (80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800363a:	f7ff fef6 	bl	800342a <LL_ADC_IsEnabled>
 800363e:	4604      	mov	r4, r0
 8003640:	4828      	ldr	r0, [pc, #160]	; (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003642:	f7ff fef2 	bl	800342a <LL_ADC_IsEnabled>
 8003646:	4603      	mov	r3, r0
 8003648:	431c      	orrs	r4, r3
 800364a:	4828      	ldr	r0, [pc, #160]	; (80036ec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800364c:	f7ff feed 	bl	800342a <LL_ADC_IsEnabled>
 8003650:	4603      	mov	r3, r0
 8003652:	4323      	orrs	r3, r4
 8003654:	2b00      	cmp	r3, #0
 8003656:	d137      	bne.n	80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003658:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003660:	f023 030f 	bic.w	r3, r3, #15
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	6811      	ldr	r1, [r2, #0]
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	6892      	ldr	r2, [r2, #8]
 800366c:	430a      	orrs	r2, r1
 800366e:	431a      	orrs	r2, r3
 8003670:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003672:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003674:	e028      	b.n	80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003676:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800367e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003680:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003682:	4817      	ldr	r0, [pc, #92]	; (80036e0 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003684:	f7ff fed1 	bl	800342a <LL_ADC_IsEnabled>
 8003688:	4604      	mov	r4, r0
 800368a:	4816      	ldr	r0, [pc, #88]	; (80036e4 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800368c:	f7ff fecd 	bl	800342a <LL_ADC_IsEnabled>
 8003690:	4603      	mov	r3, r0
 8003692:	431c      	orrs	r4, r3
 8003694:	4815      	ldr	r0, [pc, #84]	; (80036ec <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003696:	f7ff fec8 	bl	800342a <LL_ADC_IsEnabled>
 800369a:	4603      	mov	r3, r0
 800369c:	4323      	orrs	r3, r4
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d112      	bne.n	80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80036a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80036aa:	f023 030f 	bic.w	r3, r3, #15
 80036ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80036b0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036b2:	e009      	b.n	80036c8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b8:	f043 0220 	orr.w	r2, r3, #32
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80036c6:	e000      	b.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80036c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80036d2:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	377c      	adds	r7, #124	; 0x7c
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd90      	pop	{r4, r7, pc}
 80036de:	bf00      	nop
 80036e0:	50040000 	.word	0x50040000
 80036e4:	50040100 	.word	0x50040100
 80036e8:	50040300 	.word	0x50040300
 80036ec:	50040200 	.word	0x50040200

080036f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f003 0307 	and.w	r3, r3, #7
 80036fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003700:	4b0c      	ldr	r3, [pc, #48]	; (8003734 <__NVIC_SetPriorityGrouping+0x44>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003706:	68ba      	ldr	r2, [r7, #8]
 8003708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800370c:	4013      	ands	r3, r2
 800370e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800371c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003722:	4a04      	ldr	r2, [pc, #16]	; (8003734 <__NVIC_SetPriorityGrouping+0x44>)
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	60d3      	str	r3, [r2, #12]
}
 8003728:	bf00      	nop
 800372a:	3714      	adds	r7, #20
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr
 8003734:	e000ed00 	.word	0xe000ed00

08003738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003738:	b480      	push	{r7}
 800373a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800373c:	4b04      	ldr	r3, [pc, #16]	; (8003750 <__NVIC_GetPriorityGrouping+0x18>)
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	0a1b      	lsrs	r3, r3, #8
 8003742:	f003 0307 	and.w	r3, r3, #7
}
 8003746:	4618      	mov	r0, r3
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	e000ed00 	.word	0xe000ed00

08003754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	4603      	mov	r3, r0
 800375c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003762:	2b00      	cmp	r3, #0
 8003764:	db0b      	blt.n	800377e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003766:	79fb      	ldrb	r3, [r7, #7]
 8003768:	f003 021f 	and.w	r2, r3, #31
 800376c:	4907      	ldr	r1, [pc, #28]	; (800378c <__NVIC_EnableIRQ+0x38>)
 800376e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003772:	095b      	lsrs	r3, r3, #5
 8003774:	2001      	movs	r0, #1
 8003776:	fa00 f202 	lsl.w	r2, r0, r2
 800377a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr
 800378a:	bf00      	nop
 800378c:	e000e100 	.word	0xe000e100

08003790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	4603      	mov	r3, r0
 8003798:	6039      	str	r1, [r7, #0]
 800379a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800379c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	db0a      	blt.n	80037ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	b2da      	uxtb	r2, r3
 80037a8:	490c      	ldr	r1, [pc, #48]	; (80037dc <__NVIC_SetPriority+0x4c>)
 80037aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ae:	0112      	lsls	r2, r2, #4
 80037b0:	b2d2      	uxtb	r2, r2
 80037b2:	440b      	add	r3, r1
 80037b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80037b8:	e00a      	b.n	80037d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	b2da      	uxtb	r2, r3
 80037be:	4908      	ldr	r1, [pc, #32]	; (80037e0 <__NVIC_SetPriority+0x50>)
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	3b04      	subs	r3, #4
 80037c8:	0112      	lsls	r2, r2, #4
 80037ca:	b2d2      	uxtb	r2, r2
 80037cc:	440b      	add	r3, r1
 80037ce:	761a      	strb	r2, [r3, #24]
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr
 80037dc:	e000e100 	.word	0xe000e100
 80037e0:	e000ed00 	.word	0xe000ed00

080037e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b089      	sub	sp, #36	; 0x24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037f8:	69fb      	ldr	r3, [r7, #28]
 80037fa:	f1c3 0307 	rsb	r3, r3, #7
 80037fe:	2b04      	cmp	r3, #4
 8003800:	bf28      	it	cs
 8003802:	2304      	movcs	r3, #4
 8003804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	3304      	adds	r3, #4
 800380a:	2b06      	cmp	r3, #6
 800380c:	d902      	bls.n	8003814 <NVIC_EncodePriority+0x30>
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	3b03      	subs	r3, #3
 8003812:	e000      	b.n	8003816 <NVIC_EncodePriority+0x32>
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003818:	f04f 32ff 	mov.w	r2, #4294967295
 800381c:	69bb      	ldr	r3, [r7, #24]
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	43da      	mvns	r2, r3
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	401a      	ands	r2, r3
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800382c:	f04f 31ff 	mov.w	r1, #4294967295
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	fa01 f303 	lsl.w	r3, r1, r3
 8003836:	43d9      	mvns	r1, r3
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800383c:	4313      	orrs	r3, r2
         );
}
 800383e:	4618      	mov	r0, r3
 8003840:	3724      	adds	r7, #36	; 0x24
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr

0800384a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003852:	6878      	ldr	r0, [r7, #4]
 8003854:	f7ff ff4c 	bl	80036f0 <__NVIC_SetPriorityGrouping>
}
 8003858:	bf00      	nop
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}

08003860 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b086      	sub	sp, #24
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	60b9      	str	r1, [r7, #8]
 800386a:	607a      	str	r2, [r7, #4]
 800386c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800386e:	2300      	movs	r3, #0
 8003870:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003872:	f7ff ff61 	bl	8003738 <__NVIC_GetPriorityGrouping>
 8003876:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	68b9      	ldr	r1, [r7, #8]
 800387c:	6978      	ldr	r0, [r7, #20]
 800387e:	f7ff ffb1 	bl	80037e4 <NVIC_EncodePriority>
 8003882:	4602      	mov	r2, r0
 8003884:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003888:	4611      	mov	r1, r2
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff ff80 	bl	8003790 <__NVIC_SetPriority>
}
 8003890:	bf00      	nop
 8003892:	3718      	adds	r7, #24
 8003894:	46bd      	mov	sp, r7
 8003896:	bd80      	pop	{r7, pc}

08003898 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a6:	4618      	mov	r0, r3
 80038a8:	f7ff ff54 	bl	8003754 <__NVIC_EnableIRQ>
}
 80038ac:	bf00      	nop
 80038ae:	3708      	adds	r7, #8
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038c6:	b2db      	uxtb	r3, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d008      	beq.n	80038de <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2204      	movs	r2, #4
 80038d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e022      	b.n	8003924 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f022 020e 	bic.w	r2, r2, #14
 80038ec:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0201 	bic.w	r2, r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003902:	f003 021c 	and.w	r2, r3, #28
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	2101      	movs	r1, #1
 800390c:	fa01 f202 	lsl.w	r2, r1, r2
 8003910:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8003922:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003924:	4618      	mov	r0, r3
 8003926:	3714      	adds	r7, #20
 8003928:	46bd      	mov	sp, r7
 800392a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392e:	4770      	bx	lr

08003930 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003938:	2300      	movs	r3, #0
 800393a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d005      	beq.n	8003954 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2204      	movs	r2, #4
 800394c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800394e:	2301      	movs	r3, #1
 8003950:	73fb      	strb	r3, [r7, #15]
 8003952:	e029      	b.n	80039a8 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f022 020e 	bic.w	r2, r2, #14
 8003962:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f022 0201 	bic.w	r2, r2, #1
 8003972:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003978:	f003 021c 	and.w	r2, r3, #28
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	2101      	movs	r1, #1
 8003982:	fa01 f202 	lsl.w	r2, r1, r2
 8003986:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800399c:	2b00      	cmp	r3, #0
 800399e:	d003      	beq.n	80039a8 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	4798      	blx	r3
    }
  }
  return status;
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
	...

080039b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039be:	2300      	movs	r3, #0
 80039c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039c2:	e17f      	b.n	8003cc4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	2101      	movs	r1, #1
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	fa01 f303 	lsl.w	r3, r1, r3
 80039d0:	4013      	ands	r3, r2
 80039d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	f000 8171 	beq.w	8003cbe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f003 0303 	and.w	r3, r3, #3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d005      	beq.n	80039f4 <HAL_GPIO_Init+0x40>
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	f003 0303 	and.w	r3, r3, #3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d130      	bne.n	8003a56 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	005b      	lsls	r3, r3, #1
 80039fe:	2203      	movs	r2, #3
 8003a00:	fa02 f303 	lsl.w	r3, r2, r3
 8003a04:	43db      	mvns	r3, r3
 8003a06:	693a      	ldr	r2, [r7, #16]
 8003a08:	4013      	ands	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	005b      	lsls	r3, r3, #1
 8003a14:	fa02 f303 	lsl.w	r3, r2, r3
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a32:	43db      	mvns	r3, r3
 8003a34:	693a      	ldr	r2, [r7, #16]
 8003a36:	4013      	ands	r3, r2
 8003a38:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	685b      	ldr	r3, [r3, #4]
 8003a3e:	091b      	lsrs	r3, r3, #4
 8003a40:	f003 0201 	and.w	r2, r3, #1
 8003a44:	697b      	ldr	r3, [r7, #20]
 8003a46:	fa02 f303 	lsl.w	r3, r2, r3
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f003 0303 	and.w	r3, r3, #3
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d118      	bne.n	8003a94 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a66:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003a68:	2201      	movs	r2, #1
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	43db      	mvns	r3, r3
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4013      	ands	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	08db      	lsrs	r3, r3, #3
 8003a7e:	f003 0201 	and.w	r2, r3, #1
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	2b03      	cmp	r3, #3
 8003a9e:	d017      	beq.n	8003ad0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	005b      	lsls	r3, r3, #1
 8003aaa:	2203      	movs	r2, #3
 8003aac:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab0:	43db      	mvns	r3, r3
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	4013      	ands	r3, r2
 8003ab6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f003 0303 	and.w	r3, r3, #3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d123      	bne.n	8003b24 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	08da      	lsrs	r2, r3, #3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3208      	adds	r2, #8
 8003ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	220f      	movs	r2, #15
 8003af4:	fa02 f303 	lsl.w	r3, r2, r3
 8003af8:	43db      	mvns	r3, r3
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4013      	ands	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	691a      	ldr	r2, [r3, #16]
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f003 0307 	and.w	r3, r3, #7
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	08da      	lsrs	r2, r3, #3
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3208      	adds	r2, #8
 8003b1e:	6939      	ldr	r1, [r7, #16]
 8003b20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	2203      	movs	r2, #3
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	f003 0203 	and.w	r2, r3, #3
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80ac 	beq.w	8003cbe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b66:	4b5f      	ldr	r3, [pc, #380]	; (8003ce4 <HAL_GPIO_Init+0x330>)
 8003b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b6a:	4a5e      	ldr	r2, [pc, #376]	; (8003ce4 <HAL_GPIO_Init+0x330>)
 8003b6c:	f043 0301 	orr.w	r3, r3, #1
 8003b70:	6613      	str	r3, [r2, #96]	; 0x60
 8003b72:	4b5c      	ldr	r3, [pc, #368]	; (8003ce4 <HAL_GPIO_Init+0x330>)
 8003b74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	60bb      	str	r3, [r7, #8]
 8003b7c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b7e:	4a5a      	ldr	r2, [pc, #360]	; (8003ce8 <HAL_GPIO_Init+0x334>)
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	089b      	lsrs	r3, r3, #2
 8003b84:	3302      	adds	r3, #2
 8003b86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	220f      	movs	r2, #15
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ba8:	d025      	beq.n	8003bf6 <HAL_GPIO_Init+0x242>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a4f      	ldr	r2, [pc, #316]	; (8003cec <HAL_GPIO_Init+0x338>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d01f      	beq.n	8003bf2 <HAL_GPIO_Init+0x23e>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a4e      	ldr	r2, [pc, #312]	; (8003cf0 <HAL_GPIO_Init+0x33c>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d019      	beq.n	8003bee <HAL_GPIO_Init+0x23a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a4d      	ldr	r2, [pc, #308]	; (8003cf4 <HAL_GPIO_Init+0x340>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d013      	beq.n	8003bea <HAL_GPIO_Init+0x236>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a4c      	ldr	r2, [pc, #304]	; (8003cf8 <HAL_GPIO_Init+0x344>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d00d      	beq.n	8003be6 <HAL_GPIO_Init+0x232>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a4b      	ldr	r2, [pc, #300]	; (8003cfc <HAL_GPIO_Init+0x348>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d007      	beq.n	8003be2 <HAL_GPIO_Init+0x22e>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a4a      	ldr	r2, [pc, #296]	; (8003d00 <HAL_GPIO_Init+0x34c>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d101      	bne.n	8003bde <HAL_GPIO_Init+0x22a>
 8003bda:	2306      	movs	r3, #6
 8003bdc:	e00c      	b.n	8003bf8 <HAL_GPIO_Init+0x244>
 8003bde:	2307      	movs	r3, #7
 8003be0:	e00a      	b.n	8003bf8 <HAL_GPIO_Init+0x244>
 8003be2:	2305      	movs	r3, #5
 8003be4:	e008      	b.n	8003bf8 <HAL_GPIO_Init+0x244>
 8003be6:	2304      	movs	r3, #4
 8003be8:	e006      	b.n	8003bf8 <HAL_GPIO_Init+0x244>
 8003bea:	2303      	movs	r3, #3
 8003bec:	e004      	b.n	8003bf8 <HAL_GPIO_Init+0x244>
 8003bee:	2302      	movs	r3, #2
 8003bf0:	e002      	b.n	8003bf8 <HAL_GPIO_Init+0x244>
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e000      	b.n	8003bf8 <HAL_GPIO_Init+0x244>
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	f002 0203 	and.w	r2, r2, #3
 8003bfe:	0092      	lsls	r2, r2, #2
 8003c00:	4093      	lsls	r3, r2
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c08:	4937      	ldr	r1, [pc, #220]	; (8003ce8 <HAL_GPIO_Init+0x334>)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	089b      	lsrs	r3, r3, #2
 8003c0e:	3302      	adds	r3, #2
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c16:	4b3b      	ldr	r3, [pc, #236]	; (8003d04 <HAL_GPIO_Init+0x350>)
 8003c18:	689b      	ldr	r3, [r3, #8]
 8003c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	43db      	mvns	r3, r3
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4013      	ands	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d003      	beq.n	8003c3a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c3a:	4a32      	ldr	r2, [pc, #200]	; (8003d04 <HAL_GPIO_Init+0x350>)
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c40:	4b30      	ldr	r3, [pc, #192]	; (8003d04 <HAL_GPIO_Init+0x350>)
 8003c42:	68db      	ldr	r3, [r3, #12]
 8003c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	43db      	mvns	r3, r3
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d003      	beq.n	8003c64 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4313      	orrs	r3, r2
 8003c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c64:	4a27      	ldr	r2, [pc, #156]	; (8003d04 <HAL_GPIO_Init+0x350>)
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c6a:	4b26      	ldr	r3, [pc, #152]	; (8003d04 <HAL_GPIO_Init+0x350>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	43db      	mvns	r3, r3
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d003      	beq.n	8003c8e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c8e:	4a1d      	ldr	r2, [pc, #116]	; (8003d04 <HAL_GPIO_Init+0x350>)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c94:	4b1b      	ldr	r3, [pc, #108]	; (8003d04 <HAL_GPIO_Init+0x350>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cb8:	4a12      	ldr	r2, [pc, #72]	; (8003d04 <HAL_GPIO_Init+0x350>)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	3301      	adds	r3, #1
 8003cc2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	fa22 f303 	lsr.w	r3, r2, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f47f ae78 	bne.w	80039c4 <HAL_GPIO_Init+0x10>
  }
}
 8003cd4:	bf00      	nop
 8003cd6:	bf00      	nop
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40010000 	.word	0x40010000
 8003cec:	48000400 	.word	0x48000400
 8003cf0:	48000800 	.word	0x48000800
 8003cf4:	48000c00 	.word	0x48000c00
 8003cf8:	48001000 	.word	0x48001000
 8003cfc:	48001400 	.word	0x48001400
 8003d00:	48001800 	.word	0x48001800
 8003d04:	40010400 	.word	0x40010400

08003d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	807b      	strh	r3, [r7, #2]
 8003d14:	4613      	mov	r3, r2
 8003d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d18:	787b      	ldrb	r3, [r7, #1]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d1e:	887a      	ldrh	r2, [r7, #2]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d24:	e002      	b.n	8003d2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d26:	887a      	ldrh	r2, [r7, #2]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d2c:	bf00      	nop
 8003d2e:	370c      	adds	r7, #12
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr

08003d38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003d3c:	4b04      	ldr	r3, [pc, #16]	; (8003d50 <HAL_PWREx_GetVoltageRange+0x18>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	40007000 	.word	0x40007000

08003d54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d62:	d130      	bne.n	8003dc6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d64:	4b23      	ldr	r3, [pc, #140]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d70:	d038      	beq.n	8003de4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d72:	4b20      	ldr	r3, [pc, #128]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d7a:	4a1e      	ldr	r2, [pc, #120]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003d82:	4b1d      	ldr	r3, [pc, #116]	; (8003df8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	2232      	movs	r2, #50	; 0x32
 8003d88:	fb02 f303 	mul.w	r3, r2, r3
 8003d8c:	4a1b      	ldr	r2, [pc, #108]	; (8003dfc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003d92:	0c9b      	lsrs	r3, r3, #18
 8003d94:	3301      	adds	r3, #1
 8003d96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003d98:	e002      	b.n	8003da0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003da0:	4b14      	ldr	r3, [pc, #80]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dac:	d102      	bne.n	8003db4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d1f2      	bne.n	8003d9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003db4:	4b0f      	ldr	r3, [pc, #60]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc0:	d110      	bne.n	8003de4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e00f      	b.n	8003de6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd2:	d007      	beq.n	8003de4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003dd4:	4b07      	ldr	r3, [pc, #28]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ddc:	4a05      	ldr	r2, [pc, #20]	; (8003df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003de2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40007000 	.word	0x40007000
 8003df8:	20000010 	.word	0x20000010
 8003dfc:	431bde83 	.word	0x431bde83

08003e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b088      	sub	sp, #32
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e3d4      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e12:	4ba1      	ldr	r3, [pc, #644]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 030c 	and.w	r3, r3, #12
 8003e1a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e1c:	4b9e      	ldr	r3, [pc, #632]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	f003 0303 	and.w	r3, r3, #3
 8003e24:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0310 	and.w	r3, r3, #16
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	f000 80e4 	beq.w	8003ffc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d007      	beq.n	8003e4a <HAL_RCC_OscConfig+0x4a>
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b0c      	cmp	r3, #12
 8003e3e:	f040 808b 	bne.w	8003f58 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	f040 8087 	bne.w	8003f58 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e4a:	4b93      	ldr	r3, [pc, #588]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 0302 	and.w	r3, r3, #2
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d005      	beq.n	8003e62 <HAL_RCC_OscConfig+0x62>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d101      	bne.n	8003e62 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	e3ac      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a1a      	ldr	r2, [r3, #32]
 8003e66:	4b8c      	ldr	r3, [pc, #560]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0308 	and.w	r3, r3, #8
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d004      	beq.n	8003e7c <HAL_RCC_OscConfig+0x7c>
 8003e72:	4b89      	ldr	r3, [pc, #548]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e7a:	e005      	b.n	8003e88 <HAL_RCC_OscConfig+0x88>
 8003e7c:	4b86      	ldr	r3, [pc, #536]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e82:	091b      	lsrs	r3, r3, #4
 8003e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d223      	bcs.n	8003ed4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a1b      	ldr	r3, [r3, #32]
 8003e90:	4618      	mov	r0, r3
 8003e92:	f000 fd73 	bl	800497c <RCC_SetFlashLatencyFromMSIRange>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d001      	beq.n	8003ea0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e38d      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ea0:	4b7d      	ldr	r3, [pc, #500]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a7c      	ldr	r2, [pc, #496]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003ea6:	f043 0308 	orr.w	r3, r3, #8
 8003eaa:	6013      	str	r3, [r2, #0]
 8003eac:	4b7a      	ldr	r3, [pc, #488]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6a1b      	ldr	r3, [r3, #32]
 8003eb8:	4977      	ldr	r1, [pc, #476]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ebe:	4b76      	ldr	r3, [pc, #472]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	4972      	ldr	r1, [pc, #456]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	604b      	str	r3, [r1, #4]
 8003ed2:	e025      	b.n	8003f20 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ed4:	4b70      	ldr	r3, [pc, #448]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a6f      	ldr	r2, [pc, #444]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003eda:	f043 0308 	orr.w	r3, r3, #8
 8003ede:	6013      	str	r3, [r2, #0]
 8003ee0:	4b6d      	ldr	r3, [pc, #436]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	496a      	ldr	r1, [pc, #424]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ef2:	4b69      	ldr	r3, [pc, #420]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003ef4:	685b      	ldr	r3, [r3, #4]
 8003ef6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	4965      	ldr	r1, [pc, #404]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d109      	bne.n	8003f20 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f000 fd33 	bl	800497c <RCC_SetFlashLatencyFromMSIRange>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e34d      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f20:	f000 fc36 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 8003f24:	4602      	mov	r2, r0
 8003f26:	4b5c      	ldr	r3, [pc, #368]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	091b      	lsrs	r3, r3, #4
 8003f2c:	f003 030f 	and.w	r3, r3, #15
 8003f30:	495a      	ldr	r1, [pc, #360]	; (800409c <HAL_RCC_OscConfig+0x29c>)
 8003f32:	5ccb      	ldrb	r3, [r1, r3]
 8003f34:	f003 031f 	and.w	r3, r3, #31
 8003f38:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3c:	4a58      	ldr	r2, [pc, #352]	; (80040a0 <HAL_RCC_OscConfig+0x2a0>)
 8003f3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003f40:	4b58      	ldr	r3, [pc, #352]	; (80040a4 <HAL_RCC_OscConfig+0x2a4>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fd fd5f 	bl	8001a08 <HAL_InitTick>
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003f4e:	7bfb      	ldrb	r3, [r7, #15]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d052      	beq.n	8003ffa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
 8003f56:	e331      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d032      	beq.n	8003fc6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003f60:	4b4d      	ldr	r3, [pc, #308]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a4c      	ldr	r2, [pc, #304]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003f66:	f043 0301 	orr.w	r3, r3, #1
 8003f6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003f6c:	f7fe f87c 	bl	8002068 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f74:	f7fe f878 	bl	8002068 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e31a      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003f86:	4b44      	ldr	r3, [pc, #272]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d0f0      	beq.n	8003f74 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003f92:	4b41      	ldr	r3, [pc, #260]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a40      	ldr	r2, [pc, #256]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003f98:	f043 0308 	orr.w	r3, r3, #8
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	4b3e      	ldr	r3, [pc, #248]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	493b      	ldr	r1, [pc, #236]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003fac:	4313      	orrs	r3, r2
 8003fae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003fb0:	4b39      	ldr	r3, [pc, #228]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	69db      	ldr	r3, [r3, #28]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	4936      	ldr	r1, [pc, #216]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003fc0:	4313      	orrs	r3, r2
 8003fc2:	604b      	str	r3, [r1, #4]
 8003fc4:	e01a      	b.n	8003ffc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003fc6:	4b34      	ldr	r3, [pc, #208]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a33      	ldr	r2, [pc, #204]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003fcc:	f023 0301 	bic.w	r3, r3, #1
 8003fd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003fd2:	f7fe f849 	bl	8002068 <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003fda:	f7fe f845 	bl	8002068 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e2e7      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003fec:	4b2a      	ldr	r3, [pc, #168]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1f0      	bne.n	8003fda <HAL_RCC_OscConfig+0x1da>
 8003ff8:	e000      	b.n	8003ffc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ffa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d074      	beq.n	80040f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	2b08      	cmp	r3, #8
 800400c:	d005      	beq.n	800401a <HAL_RCC_OscConfig+0x21a>
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	2b0c      	cmp	r3, #12
 8004012:	d10e      	bne.n	8004032 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2b03      	cmp	r3, #3
 8004018:	d10b      	bne.n	8004032 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800401a:	4b1f      	ldr	r3, [pc, #124]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d064      	beq.n	80040f0 <HAL_RCC_OscConfig+0x2f0>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d160      	bne.n	80040f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e2c4      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800403a:	d106      	bne.n	800404a <HAL_RCC_OscConfig+0x24a>
 800403c:	4b16      	ldr	r3, [pc, #88]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a15      	ldr	r2, [pc, #84]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8004042:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004046:	6013      	str	r3, [r2, #0]
 8004048:	e01d      	b.n	8004086 <HAL_RCC_OscConfig+0x286>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004052:	d10c      	bne.n	800406e <HAL_RCC_OscConfig+0x26e>
 8004054:	4b10      	ldr	r3, [pc, #64]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a0f      	ldr	r2, [pc, #60]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 800405a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800405e:	6013      	str	r3, [r2, #0]
 8004060:	4b0d      	ldr	r3, [pc, #52]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a0c      	ldr	r2, [pc, #48]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8004066:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406a:	6013      	str	r3, [r2, #0]
 800406c:	e00b      	b.n	8004086 <HAL_RCC_OscConfig+0x286>
 800406e:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a09      	ldr	r2, [pc, #36]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8004074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	4b07      	ldr	r3, [pc, #28]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a06      	ldr	r2, [pc, #24]	; (8004098 <HAL_RCC_OscConfig+0x298>)
 8004080:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004084:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	685b      	ldr	r3, [r3, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01c      	beq.n	80040c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800408e:	f7fd ffeb 	bl	8002068 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004094:	e011      	b.n	80040ba <HAL_RCC_OscConfig+0x2ba>
 8004096:	bf00      	nop
 8004098:	40021000 	.word	0x40021000
 800409c:	0800c940 	.word	0x0800c940
 80040a0:	20000010 	.word	0x20000010
 80040a4:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040a8:	f7fd ffde 	bl	8002068 <HAL_GetTick>
 80040ac:	4602      	mov	r2, r0
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b64      	cmp	r3, #100	; 0x64
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e280      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80040ba:	4baf      	ldr	r3, [pc, #700]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d0f0      	beq.n	80040a8 <HAL_RCC_OscConfig+0x2a8>
 80040c6:	e014      	b.n	80040f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c8:	f7fd ffce 	bl	8002068 <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040d0:	f7fd ffca 	bl	8002068 <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b64      	cmp	r3, #100	; 0x64
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e26c      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80040e2:	4ba5      	ldr	r3, [pc, #660]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1f0      	bne.n	80040d0 <HAL_RCC_OscConfig+0x2d0>
 80040ee:	e000      	b.n	80040f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 0302 	and.w	r3, r3, #2
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d060      	beq.n	80041c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80040fe:	69bb      	ldr	r3, [r7, #24]
 8004100:	2b04      	cmp	r3, #4
 8004102:	d005      	beq.n	8004110 <HAL_RCC_OscConfig+0x310>
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	2b0c      	cmp	r3, #12
 8004108:	d119      	bne.n	800413e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b02      	cmp	r3, #2
 800410e:	d116      	bne.n	800413e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004110:	4b99      	ldr	r3, [pc, #612]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_RCC_OscConfig+0x328>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d101      	bne.n	8004128 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e249      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004128:	4b93      	ldr	r3, [pc, #588]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	061b      	lsls	r3, r3, #24
 8004136:	4990      	ldr	r1, [pc, #576]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 8004138:	4313      	orrs	r3, r2
 800413a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800413c:	e040      	b.n	80041c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d023      	beq.n	800418e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004146:	4b8c      	ldr	r3, [pc, #560]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a8b      	ldr	r2, [pc, #556]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 800414c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004150:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004152:	f7fd ff89 	bl	8002068 <HAL_GetTick>
 8004156:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004158:	e008      	b.n	800416c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800415a:	f7fd ff85 	bl	8002068 <HAL_GetTick>
 800415e:	4602      	mov	r2, r0
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d901      	bls.n	800416c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004168:	2303      	movs	r3, #3
 800416a:	e227      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800416c:	4b82      	ldr	r3, [pc, #520]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004174:	2b00      	cmp	r3, #0
 8004176:	d0f0      	beq.n	800415a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004178:	4b7f      	ldr	r3, [pc, #508]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	061b      	lsls	r3, r3, #24
 8004186:	497c      	ldr	r1, [pc, #496]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 8004188:	4313      	orrs	r3, r2
 800418a:	604b      	str	r3, [r1, #4]
 800418c:	e018      	b.n	80041c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800418e:	4b7a      	ldr	r3, [pc, #488]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a79      	ldr	r2, [pc, #484]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 8004194:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004198:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800419a:	f7fd ff65 	bl	8002068 <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041a0:	e008      	b.n	80041b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80041a2:	f7fd ff61 	bl	8002068 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e203      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80041b4:	4b70      	ldr	r3, [pc, #448]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1f0      	bne.n	80041a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f003 0308 	and.w	r3, r3, #8
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d03c      	beq.n	8004246 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	695b      	ldr	r3, [r3, #20]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d01c      	beq.n	800420e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041d4:	4b68      	ldr	r3, [pc, #416]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 80041d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041da:	4a67      	ldr	r2, [pc, #412]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e4:	f7fd ff40 	bl	8002068 <HAL_GetTick>
 80041e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041ea:	e008      	b.n	80041fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041ec:	f7fd ff3c 	bl	8002068 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d901      	bls.n	80041fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80041fa:	2303      	movs	r3, #3
 80041fc:	e1de      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80041fe:	4b5e      	ldr	r3, [pc, #376]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 8004200:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004204:	f003 0302 	and.w	r3, r3, #2
 8004208:	2b00      	cmp	r3, #0
 800420a:	d0ef      	beq.n	80041ec <HAL_RCC_OscConfig+0x3ec>
 800420c:	e01b      	b.n	8004246 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800420e:	4b5a      	ldr	r3, [pc, #360]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 8004210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004214:	4a58      	ldr	r2, [pc, #352]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800421e:	f7fd ff23 	bl	8002068 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004226:	f7fd ff1f 	bl	8002068 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e1c1      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004238:	4b4f      	ldr	r3, [pc, #316]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 800423a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1ef      	bne.n	8004226 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0304 	and.w	r3, r3, #4
 800424e:	2b00      	cmp	r3, #0
 8004250:	f000 80a6 	beq.w	80043a0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004254:	2300      	movs	r3, #0
 8004256:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004258:	4b47      	ldr	r3, [pc, #284]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 800425a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004260:	2b00      	cmp	r3, #0
 8004262:	d10d      	bne.n	8004280 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004264:	4b44      	ldr	r3, [pc, #272]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 8004266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004268:	4a43      	ldr	r2, [pc, #268]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 800426a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800426e:	6593      	str	r3, [r2, #88]	; 0x58
 8004270:	4b41      	ldr	r3, [pc, #260]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 8004272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004278:	60bb      	str	r3, [r7, #8]
 800427a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800427c:	2301      	movs	r3, #1
 800427e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004280:	4b3e      	ldr	r3, [pc, #248]	; (800437c <HAL_RCC_OscConfig+0x57c>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004288:	2b00      	cmp	r3, #0
 800428a:	d118      	bne.n	80042be <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800428c:	4b3b      	ldr	r3, [pc, #236]	; (800437c <HAL_RCC_OscConfig+0x57c>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a3a      	ldr	r2, [pc, #232]	; (800437c <HAL_RCC_OscConfig+0x57c>)
 8004292:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004296:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004298:	f7fd fee6 	bl	8002068 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042a0:	f7fd fee2 	bl	8002068 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e184      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80042b2:	4b32      	ldr	r3, [pc, #200]	; (800437c <HAL_RCC_OscConfig+0x57c>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0f0      	beq.n	80042a0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	d108      	bne.n	80042d8 <HAL_RCC_OscConfig+0x4d8>
 80042c6:	4b2c      	ldr	r3, [pc, #176]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 80042c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042cc:	4a2a      	ldr	r2, [pc, #168]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 80042ce:	f043 0301 	orr.w	r3, r3, #1
 80042d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042d6:	e024      	b.n	8004322 <HAL_RCC_OscConfig+0x522>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	2b05      	cmp	r3, #5
 80042de:	d110      	bne.n	8004302 <HAL_RCC_OscConfig+0x502>
 80042e0:	4b25      	ldr	r3, [pc, #148]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e6:	4a24      	ldr	r2, [pc, #144]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 80042e8:	f043 0304 	orr.w	r3, r3, #4
 80042ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80042f0:	4b21      	ldr	r3, [pc, #132]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 80042f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f6:	4a20      	ldr	r2, [pc, #128]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 80042f8:	f043 0301 	orr.w	r3, r3, #1
 80042fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004300:	e00f      	b.n	8004322 <HAL_RCC_OscConfig+0x522>
 8004302:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 8004304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004308:	4a1b      	ldr	r2, [pc, #108]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 800430a:	f023 0301 	bic.w	r3, r3, #1
 800430e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004312:	4b19      	ldr	r3, [pc, #100]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 8004314:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004318:	4a17      	ldr	r2, [pc, #92]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 800431a:	f023 0304 	bic.w	r3, r3, #4
 800431e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d016      	beq.n	8004358 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432a:	f7fd fe9d 	bl	8002068 <HAL_GetTick>
 800432e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004330:	e00a      	b.n	8004348 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004332:	f7fd fe99 	bl	8002068 <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004340:	4293      	cmp	r3, r2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e139      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004348:	4b0b      	ldr	r3, [pc, #44]	; (8004378 <HAL_RCC_OscConfig+0x578>)
 800434a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434e:	f003 0302 	and.w	r3, r3, #2
 8004352:	2b00      	cmp	r3, #0
 8004354:	d0ed      	beq.n	8004332 <HAL_RCC_OscConfig+0x532>
 8004356:	e01a      	b.n	800438e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004358:	f7fd fe86 	bl	8002068 <HAL_GetTick>
 800435c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800435e:	e00f      	b.n	8004380 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004360:	f7fd fe82 	bl	8002068 <HAL_GetTick>
 8004364:	4602      	mov	r2, r0
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	1ad3      	subs	r3, r2, r3
 800436a:	f241 3288 	movw	r2, #5000	; 0x1388
 800436e:	4293      	cmp	r3, r2
 8004370:	d906      	bls.n	8004380 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e122      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
 8004376:	bf00      	nop
 8004378:	40021000 	.word	0x40021000
 800437c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004380:	4b90      	ldr	r3, [pc, #576]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 8004382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1e8      	bne.n	8004360 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800438e:	7ffb      	ldrb	r3, [r7, #31]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d105      	bne.n	80043a0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004394:	4b8b      	ldr	r3, [pc, #556]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 8004396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004398:	4a8a      	ldr	r2, [pc, #552]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 800439a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800439e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	f000 8108 	beq.w	80045ba <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	f040 80d0 	bne.w	8004554 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80043b4:	4b83      	ldr	r3, [pc, #524]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	f003 0203 	and.w	r2, r3, #3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d130      	bne.n	800442a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d2:	3b01      	subs	r3, #1
 80043d4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d127      	bne.n	800442a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d11f      	bne.n	800442a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043f4:	2a07      	cmp	r2, #7
 80043f6:	bf14      	ite	ne
 80043f8:	2201      	movne	r2, #1
 80043fa:	2200      	moveq	r2, #0
 80043fc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80043fe:	4293      	cmp	r3, r2
 8004400:	d113      	bne.n	800442a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800440c:	085b      	lsrs	r3, r3, #1
 800440e:	3b01      	subs	r3, #1
 8004410:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004412:	429a      	cmp	r2, r3
 8004414:	d109      	bne.n	800442a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004420:	085b      	lsrs	r3, r3, #1
 8004422:	3b01      	subs	r3, #1
 8004424:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004426:	429a      	cmp	r2, r3
 8004428:	d06e      	beq.n	8004508 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800442a:	69bb      	ldr	r3, [r7, #24]
 800442c:	2b0c      	cmp	r3, #12
 800442e:	d069      	beq.n	8004504 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004430:	4b64      	ldr	r3, [pc, #400]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d105      	bne.n	8004448 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800443c:	4b61      	ldr	r3, [pc, #388]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d001      	beq.n	800444c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e0b7      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800444c:	4b5d      	ldr	r3, [pc, #372]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a5c      	ldr	r2, [pc, #368]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 8004452:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004456:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004458:	f7fd fe06 	bl	8002068 <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800445e:	e008      	b.n	8004472 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004460:	f7fd fe02 	bl	8002068 <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	2b02      	cmp	r3, #2
 800446c:	d901      	bls.n	8004472 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800446e:	2303      	movs	r3, #3
 8004470:	e0a4      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004472:	4b54      	ldr	r3, [pc, #336]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1f0      	bne.n	8004460 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800447e:	4b51      	ldr	r3, [pc, #324]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	4b51      	ldr	r3, [pc, #324]	; (80045c8 <HAL_RCC_OscConfig+0x7c8>)
 8004484:	4013      	ands	r3, r2
 8004486:	687a      	ldr	r2, [r7, #4]
 8004488:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800448a:	687a      	ldr	r2, [r7, #4]
 800448c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800448e:	3a01      	subs	r2, #1
 8004490:	0112      	lsls	r2, r2, #4
 8004492:	4311      	orrs	r1, r2
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004498:	0212      	lsls	r2, r2, #8
 800449a:	4311      	orrs	r1, r2
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80044a0:	0852      	lsrs	r2, r2, #1
 80044a2:	3a01      	subs	r2, #1
 80044a4:	0552      	lsls	r2, r2, #21
 80044a6:	4311      	orrs	r1, r2
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044ac:	0852      	lsrs	r2, r2, #1
 80044ae:	3a01      	subs	r2, #1
 80044b0:	0652      	lsls	r2, r2, #25
 80044b2:	4311      	orrs	r1, r2
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044b8:	0912      	lsrs	r2, r2, #4
 80044ba:	0452      	lsls	r2, r2, #17
 80044bc:	430a      	orrs	r2, r1
 80044be:	4941      	ldr	r1, [pc, #260]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80044c4:	4b3f      	ldr	r3, [pc, #252]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a3e      	ldr	r2, [pc, #248]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 80044ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80044d0:	4b3c      	ldr	r3, [pc, #240]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	4a3b      	ldr	r2, [pc, #236]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 80044d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80044dc:	f7fd fdc4 	bl	8002068 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044e4:	f7fd fdc0 	bl	8002068 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e062      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044f6:	4b33      	ldr	r3, [pc, #204]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004502:	e05a      	b.n	80045ba <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e059      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004508:	4b2e      	ldr	r3, [pc, #184]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d152      	bne.n	80045ba <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004514:	4b2b      	ldr	r3, [pc, #172]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a2a      	ldr	r2, [pc, #168]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 800451a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800451e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004520:	4b28      	ldr	r3, [pc, #160]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	4a27      	ldr	r2, [pc, #156]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 8004526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800452a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800452c:	f7fd fd9c 	bl	8002068 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004534:	f7fd fd98 	bl	8002068 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b02      	cmp	r3, #2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e03a      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004546:	4b1f      	ldr	r3, [pc, #124]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d0f0      	beq.n	8004534 <HAL_RCC_OscConfig+0x734>
 8004552:	e032      	b.n	80045ba <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	2b0c      	cmp	r3, #12
 8004558:	d02d      	beq.n	80045b6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800455a:	4b1a      	ldr	r3, [pc, #104]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a19      	ldr	r2, [pc, #100]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 8004560:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004564:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8004566:	4b17      	ldr	r3, [pc, #92]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d105      	bne.n	800457e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004572:	4b14      	ldr	r3, [pc, #80]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 8004574:	68db      	ldr	r3, [r3, #12]
 8004576:	4a13      	ldr	r2, [pc, #76]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 8004578:	f023 0303 	bic.w	r3, r3, #3
 800457c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800457e:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	4a10      	ldr	r2, [pc, #64]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 8004584:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004588:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800458c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458e:	f7fd fd6b 	bl	8002068 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004596:	f7fd fd67 	bl	8002068 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e009      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045a8:	4b06      	ldr	r3, [pc, #24]	; (80045c4 <HAL_RCC_OscConfig+0x7c4>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1f0      	bne.n	8004596 <HAL_RCC_OscConfig+0x796>
 80045b4:	e001      	b.n	80045ba <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e000      	b.n	80045bc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3720      	adds	r7, #32
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40021000 	.word	0x40021000
 80045c8:	f99d808c 	.word	0xf99d808c

080045cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e0c8      	b.n	8004772 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045e0:	4b66      	ldr	r3, [pc, #408]	; (800477c <HAL_RCC_ClockConfig+0x1b0>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d910      	bls.n	8004610 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ee:	4b63      	ldr	r3, [pc, #396]	; (800477c <HAL_RCC_ClockConfig+0x1b0>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f023 0207 	bic.w	r2, r3, #7
 80045f6:	4961      	ldr	r1, [pc, #388]	; (800477c <HAL_RCC_ClockConfig+0x1b0>)
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045fe:	4b5f      	ldr	r3, [pc, #380]	; (800477c <HAL_RCC_ClockConfig+0x1b0>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f003 0307 	and.w	r3, r3, #7
 8004606:	683a      	ldr	r2, [r7, #0]
 8004608:	429a      	cmp	r2, r3
 800460a:	d001      	beq.n	8004610 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e0b0      	b.n	8004772 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d04c      	beq.n	80046b6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	2b03      	cmp	r3, #3
 8004622:	d107      	bne.n	8004634 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004624:	4b56      	ldr	r3, [pc, #344]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d121      	bne.n	8004674 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e09e      	b.n	8004772 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	2b02      	cmp	r3, #2
 800463a:	d107      	bne.n	800464c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800463c:	4b50      	ldr	r3, [pc, #320]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004644:	2b00      	cmp	r3, #0
 8004646:	d115      	bne.n	8004674 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e092      	b.n	8004772 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d107      	bne.n	8004664 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004654:	4b4a      	ldr	r3, [pc, #296]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 0302 	and.w	r3, r3, #2
 800465c:	2b00      	cmp	r3, #0
 800465e:	d109      	bne.n	8004674 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e086      	b.n	8004772 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004664:	4b46      	ldr	r3, [pc, #280]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800466c:	2b00      	cmp	r3, #0
 800466e:	d101      	bne.n	8004674 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e07e      	b.n	8004772 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004674:	4b42      	ldr	r3, [pc, #264]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 8004676:	689b      	ldr	r3, [r3, #8]
 8004678:	f023 0203 	bic.w	r2, r3, #3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	493f      	ldr	r1, [pc, #252]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 8004682:	4313      	orrs	r3, r2
 8004684:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004686:	f7fd fcef 	bl	8002068 <HAL_GetTick>
 800468a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800468c:	e00a      	b.n	80046a4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800468e:	f7fd fceb 	bl	8002068 <HAL_GetTick>
 8004692:	4602      	mov	r2, r0
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	1ad3      	subs	r3, r2, r3
 8004698:	f241 3288 	movw	r2, #5000	; 0x1388
 800469c:	4293      	cmp	r3, r2
 800469e:	d901      	bls.n	80046a4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80046a0:	2303      	movs	r3, #3
 80046a2:	e066      	b.n	8004772 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046a4:	4b36      	ldr	r3, [pc, #216]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 020c 	and.w	r2, r3, #12
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d1eb      	bne.n	800468e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0302 	and.w	r3, r3, #2
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d008      	beq.n	80046d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c2:	4b2f      	ldr	r3, [pc, #188]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	492c      	ldr	r1, [pc, #176]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 80046d0:	4313      	orrs	r3, r2
 80046d2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046d4:	4b29      	ldr	r3, [pc, #164]	; (800477c <HAL_RCC_ClockConfig+0x1b0>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	683a      	ldr	r2, [r7, #0]
 80046de:	429a      	cmp	r2, r3
 80046e0:	d210      	bcs.n	8004704 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046e2:	4b26      	ldr	r3, [pc, #152]	; (800477c <HAL_RCC_ClockConfig+0x1b0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f023 0207 	bic.w	r2, r3, #7
 80046ea:	4924      	ldr	r1, [pc, #144]	; (800477c <HAL_RCC_ClockConfig+0x1b0>)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	4313      	orrs	r3, r2
 80046f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046f2:	4b22      	ldr	r3, [pc, #136]	; (800477c <HAL_RCC_ClockConfig+0x1b0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0307 	and.w	r3, r3, #7
 80046fa:	683a      	ldr	r2, [r7, #0]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d001      	beq.n	8004704 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004700:	2301      	movs	r3, #1
 8004702:	e036      	b.n	8004772 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0304 	and.w	r3, r3, #4
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004710:	4b1b      	ldr	r3, [pc, #108]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	68db      	ldr	r3, [r3, #12]
 800471c:	4918      	ldr	r1, [pc, #96]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 800471e:	4313      	orrs	r3, r2
 8004720:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0308 	and.w	r3, r3, #8
 800472a:	2b00      	cmp	r3, #0
 800472c:	d009      	beq.n	8004742 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800472e:	4b14      	ldr	r3, [pc, #80]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	691b      	ldr	r3, [r3, #16]
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4910      	ldr	r1, [pc, #64]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 800473e:	4313      	orrs	r3, r2
 8004740:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004742:	f000 f825 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 8004746:	4602      	mov	r2, r0
 8004748:	4b0d      	ldr	r3, [pc, #52]	; (8004780 <HAL_RCC_ClockConfig+0x1b4>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	091b      	lsrs	r3, r3, #4
 800474e:	f003 030f 	and.w	r3, r3, #15
 8004752:	490c      	ldr	r1, [pc, #48]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 8004754:	5ccb      	ldrb	r3, [r1, r3]
 8004756:	f003 031f 	and.w	r3, r3, #31
 800475a:	fa22 f303 	lsr.w	r3, r2, r3
 800475e:	4a0a      	ldr	r2, [pc, #40]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004760:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004762:	4b0a      	ldr	r3, [pc, #40]	; (800478c <HAL_RCC_ClockConfig+0x1c0>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f7fd f94e 	bl	8001a08 <HAL_InitTick>
 800476c:	4603      	mov	r3, r0
 800476e:	72fb      	strb	r3, [r7, #11]

  return status;
 8004770:	7afb      	ldrb	r3, [r7, #11]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3710      	adds	r7, #16
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	40022000 	.word	0x40022000
 8004780:	40021000 	.word	0x40021000
 8004784:	0800c940 	.word	0x0800c940
 8004788:	20000010 	.word	0x20000010
 800478c:	20000014 	.word	0x20000014

08004790 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004790:	b480      	push	{r7}
 8004792:	b089      	sub	sp, #36	; 0x24
 8004794:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004796:	2300      	movs	r3, #0
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	2300      	movs	r3, #0
 800479c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800479e:	4b3e      	ldr	r3, [pc, #248]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 030c 	and.w	r3, r3, #12
 80047a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80047a8:	4b3b      	ldr	r3, [pc, #236]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	f003 0303 	and.w	r3, r3, #3
 80047b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d005      	beq.n	80047c4 <HAL_RCC_GetSysClockFreq+0x34>
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	2b0c      	cmp	r3, #12
 80047bc:	d121      	bne.n	8004802 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d11e      	bne.n	8004802 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80047c4:	4b34      	ldr	r3, [pc, #208]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 0308 	and.w	r3, r3, #8
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d107      	bne.n	80047e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80047d0:	4b31      	ldr	r3, [pc, #196]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 80047d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80047d6:	0a1b      	lsrs	r3, r3, #8
 80047d8:	f003 030f 	and.w	r3, r3, #15
 80047dc:	61fb      	str	r3, [r7, #28]
 80047de:	e005      	b.n	80047ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80047e0:	4b2d      	ldr	r3, [pc, #180]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	091b      	lsrs	r3, r3, #4
 80047e6:	f003 030f 	and.w	r3, r3, #15
 80047ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80047ec:	4a2b      	ldr	r2, [pc, #172]	; (800489c <HAL_RCC_GetSysClockFreq+0x10c>)
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10d      	bne.n	8004818 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80047fc:	69fb      	ldr	r3, [r7, #28]
 80047fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004800:	e00a      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004802:	693b      	ldr	r3, [r7, #16]
 8004804:	2b04      	cmp	r3, #4
 8004806:	d102      	bne.n	800480e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004808:	4b25      	ldr	r3, [pc, #148]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800480a:	61bb      	str	r3, [r7, #24]
 800480c:	e004      	b.n	8004818 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	2b08      	cmp	r3, #8
 8004812:	d101      	bne.n	8004818 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004814:	4b23      	ldr	r3, [pc, #140]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004816:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	2b0c      	cmp	r3, #12
 800481c:	d134      	bne.n	8004888 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800481e:	4b1e      	ldr	r3, [pc, #120]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 8004820:	68db      	ldr	r3, [r3, #12]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d003      	beq.n	8004836 <HAL_RCC_GetSysClockFreq+0xa6>
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b03      	cmp	r3, #3
 8004832:	d003      	beq.n	800483c <HAL_RCC_GetSysClockFreq+0xac>
 8004834:	e005      	b.n	8004842 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004836:	4b1a      	ldr	r3, [pc, #104]	; (80048a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004838:	617b      	str	r3, [r7, #20]
      break;
 800483a:	e005      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800483c:	4b19      	ldr	r3, [pc, #100]	; (80048a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800483e:	617b      	str	r3, [r7, #20]
      break;
 8004840:	e002      	b.n	8004848 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	617b      	str	r3, [r7, #20]
      break;
 8004846:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004848:	4b13      	ldr	r3, [pc, #76]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 800484a:	68db      	ldr	r3, [r3, #12]
 800484c:	091b      	lsrs	r3, r3, #4
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	3301      	adds	r3, #1
 8004854:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004856:	4b10      	ldr	r3, [pc, #64]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	0a1b      	lsrs	r3, r3, #8
 800485c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	fb02 f203 	mul.w	r2, r2, r3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	fbb2 f3f3 	udiv	r3, r2, r3
 800486c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800486e:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <HAL_RCC_GetSysClockFreq+0x108>)
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	0e5b      	lsrs	r3, r3, #25
 8004874:	f003 0303 	and.w	r3, r3, #3
 8004878:	3301      	adds	r3, #1
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	fbb2 f3f3 	udiv	r3, r2, r3
 8004886:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004888:	69bb      	ldr	r3, [r7, #24]
}
 800488a:	4618      	mov	r0, r3
 800488c:	3724      	adds	r7, #36	; 0x24
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop
 8004898:	40021000 	.word	0x40021000
 800489c:	0800c958 	.word	0x0800c958
 80048a0:	00f42400 	.word	0x00f42400
 80048a4:	007a1200 	.word	0x007a1200

080048a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048ac:	4b03      	ldr	r3, [pc, #12]	; (80048bc <HAL_RCC_GetHCLKFreq+0x14>)
 80048ae:	681b      	ldr	r3, [r3, #0]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	20000010 	.word	0x20000010

080048c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048c4:	f7ff fff0 	bl	80048a8 <HAL_RCC_GetHCLKFreq>
 80048c8:	4602      	mov	r2, r0
 80048ca:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	0a1b      	lsrs	r3, r3, #8
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	4904      	ldr	r1, [pc, #16]	; (80048e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048d6:	5ccb      	ldrb	r3, [r1, r3]
 80048d8:	f003 031f 	and.w	r3, r3, #31
 80048dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	40021000 	.word	0x40021000
 80048e8:	0800c950 	.word	0x0800c950

080048ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048f0:	f7ff ffda 	bl	80048a8 <HAL_RCC_GetHCLKFreq>
 80048f4:	4602      	mov	r2, r0
 80048f6:	4b06      	ldr	r3, [pc, #24]	; (8004910 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	0adb      	lsrs	r3, r3, #11
 80048fc:	f003 0307 	and.w	r3, r3, #7
 8004900:	4904      	ldr	r1, [pc, #16]	; (8004914 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004902:	5ccb      	ldrb	r3, [r1, r3]
 8004904:	f003 031f 	and.w	r3, r3, #31
 8004908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800490c:	4618      	mov	r0, r3
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40021000 	.word	0x40021000
 8004914:	0800c950 	.word	0x0800c950

08004918 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	220f      	movs	r2, #15
 8004926:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004928:	4b12      	ldr	r3, [pc, #72]	; (8004974 <HAL_RCC_GetClockConfig+0x5c>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 0203 	and.w	r2, r3, #3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004934:	4b0f      	ldr	r3, [pc, #60]	; (8004974 <HAL_RCC_GetClockConfig+0x5c>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004940:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <HAL_RCC_GetClockConfig+0x5c>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800494c:	4b09      	ldr	r3, [pc, #36]	; (8004974 <HAL_RCC_GetClockConfig+0x5c>)
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	08db      	lsrs	r3, r3, #3
 8004952:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800495a:	4b07      	ldr	r3, [pc, #28]	; (8004978 <HAL_RCC_GetClockConfig+0x60>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0207 	and.w	r2, r3, #7
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	601a      	str	r2, [r3, #0]
}
 8004966:	bf00      	nop
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	40021000 	.word	0x40021000
 8004978:	40022000 	.word	0x40022000

0800497c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b086      	sub	sp, #24
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004984:	2300      	movs	r3, #0
 8004986:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004988:	4b2a      	ldr	r3, [pc, #168]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800498a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800498c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d003      	beq.n	800499c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004994:	f7ff f9d0 	bl	8003d38 <HAL_PWREx_GetVoltageRange>
 8004998:	6178      	str	r0, [r7, #20]
 800499a:	e014      	b.n	80049c6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800499c:	4b25      	ldr	r3, [pc, #148]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800499e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a0:	4a24      	ldr	r2, [pc, #144]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a6:	6593      	str	r3, [r2, #88]	; 0x58
 80049a8:	4b22      	ldr	r3, [pc, #136]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049b0:	60fb      	str	r3, [r7, #12]
 80049b2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80049b4:	f7ff f9c0 	bl	8003d38 <HAL_PWREx_GetVoltageRange>
 80049b8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80049ba:	4b1e      	ldr	r3, [pc, #120]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049be:	4a1d      	ldr	r2, [pc, #116]	; (8004a34 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80049c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049c4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049cc:	d10b      	bne.n	80049e6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b80      	cmp	r3, #128	; 0x80
 80049d2:	d919      	bls.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2ba0      	cmp	r3, #160	; 0xa0
 80049d8:	d902      	bls.n	80049e0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049da:	2302      	movs	r3, #2
 80049dc:	613b      	str	r3, [r7, #16]
 80049de:	e013      	b.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80049e0:	2301      	movs	r3, #1
 80049e2:	613b      	str	r3, [r7, #16]
 80049e4:	e010      	b.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b80      	cmp	r3, #128	; 0x80
 80049ea:	d902      	bls.n	80049f2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80049ec:	2303      	movs	r3, #3
 80049ee:	613b      	str	r3, [r7, #16]
 80049f0:	e00a      	b.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2b80      	cmp	r3, #128	; 0x80
 80049f6:	d102      	bne.n	80049fe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80049f8:	2302      	movs	r3, #2
 80049fa:	613b      	str	r3, [r7, #16]
 80049fc:	e004      	b.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2b70      	cmp	r3, #112	; 0x70
 8004a02:	d101      	bne.n	8004a08 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004a04:	2301      	movs	r3, #1
 8004a06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004a08:	4b0b      	ldr	r3, [pc, #44]	; (8004a38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f023 0207 	bic.w	r2, r3, #7
 8004a10:	4909      	ldr	r1, [pc, #36]	; (8004a38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004a18:	4b07      	ldr	r3, [pc, #28]	; (8004a38 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f003 0307 	and.w	r3, r3, #7
 8004a20:	693a      	ldr	r2, [r7, #16]
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d001      	beq.n	8004a2a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40021000 	.word	0x40021000
 8004a38:	40022000 	.word	0x40022000

08004a3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004a44:	2300      	movs	r3, #0
 8004a46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004a48:	2300      	movs	r3, #0
 8004a4a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d041      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004a5c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a60:	d02a      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004a62:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004a66:	d824      	bhi.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a6c:	d008      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004a6e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a72:	d81e      	bhi.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d00a      	beq.n	8004a8e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004a78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a7c:	d010      	beq.n	8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004a7e:	e018      	b.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a80:	4b86      	ldr	r3, [pc, #536]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4a85      	ldr	r2, [pc, #532]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a8a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a8c:	e015      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	3304      	adds	r3, #4
 8004a92:	2100      	movs	r1, #0
 8004a94:	4618      	mov	r0, r3
 8004a96:	f000 fabb 	bl	8005010 <RCCEx_PLLSAI1_Config>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004a9e:	e00c      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	3320      	adds	r3, #32
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	f000 fba6 	bl	80051f8 <RCCEx_PLLSAI2_Config>
 8004aac:	4603      	mov	r3, r0
 8004aae:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ab0:	e003      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	74fb      	strb	r3, [r7, #19]
      break;
 8004ab6:	e000      	b.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004ab8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004aba:	7cfb      	ldrb	r3, [r7, #19]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10b      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ac0:	4b76      	ldr	r3, [pc, #472]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ac6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ace:	4973      	ldr	r1, [pc, #460]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004ad6:	e001      	b.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ad8:	7cfb      	ldrb	r3, [r7, #19]
 8004ada:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d041      	beq.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aec:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004af0:	d02a      	beq.n	8004b48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004af2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004af6:	d824      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004af8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004afc:	d008      	beq.n	8004b10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004afe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004b02:	d81e      	bhi.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d00a      	beq.n	8004b1e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004b0c:	d010      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004b0e:	e018      	b.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004b10:	4b62      	ldr	r3, [pc, #392]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b12:	68db      	ldr	r3, [r3, #12]
 8004b14:	4a61      	ldr	r2, [pc, #388]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b1a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b1c:	e015      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	3304      	adds	r3, #4
 8004b22:	2100      	movs	r1, #0
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 fa73 	bl	8005010 <RCCEx_PLLSAI1_Config>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b2e:	e00c      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	3320      	adds	r3, #32
 8004b34:	2100      	movs	r1, #0
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 fb5e 	bl	80051f8 <RCCEx_PLLSAI2_Config>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004b40:	e003      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	74fb      	strb	r3, [r7, #19]
      break;
 8004b46:	e000      	b.n	8004b4a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004b48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b4a:	7cfb      	ldrb	r3, [r7, #19]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10b      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004b50:	4b52      	ldr	r3, [pc, #328]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b56:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004b5e:	494f      	ldr	r1, [pc, #316]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004b66:	e001      	b.n	8004b6c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b68:	7cfb      	ldrb	r3, [r7, #19]
 8004b6a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 80a0 	beq.w	8004cba <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004b7e:	4b47      	ldr	r3, [pc, #284]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d00d      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b94:	4b41      	ldr	r3, [pc, #260]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b98:	4a40      	ldr	r2, [pc, #256]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	6593      	str	r3, [r2, #88]	; 0x58
 8004ba0:	4b3e      	ldr	r3, [pc, #248]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba8:	60bb      	str	r3, [r7, #8]
 8004baa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bac:	2301      	movs	r3, #1
 8004bae:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bb0:	4b3b      	ldr	r3, [pc, #236]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a3a      	ldr	r2, [pc, #232]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bba:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bbc:	f7fd fa54 	bl	8002068 <HAL_GetTick>
 8004bc0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bc2:	e009      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bc4:	f7fd fa50 	bl	8002068 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d902      	bls.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	74fb      	strb	r3, [r7, #19]
        break;
 8004bd6:	e005      	b.n	8004be4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004bd8:	4b31      	ldr	r3, [pc, #196]	; (8004ca0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0ef      	beq.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004be4:	7cfb      	ldrb	r3, [r7, #19]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d15c      	bne.n	8004ca4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004bea:	4b2c      	ldr	r3, [pc, #176]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004bf0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bf4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d01f      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c02:	697a      	ldr	r2, [r7, #20]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d019      	beq.n	8004c3c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c08:	4b24      	ldr	r3, [pc, #144]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c14:	4b21      	ldr	r3, [pc, #132]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c1a:	4a20      	ldr	r2, [pc, #128]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c24:	4b1d      	ldr	r3, [pc, #116]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c2a:	4a1c      	ldr	r2, [pc, #112]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c34:	4a19      	ldr	r2, [pc, #100]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c3c:	697b      	ldr	r3, [r7, #20]
 8004c3e:	f003 0301 	and.w	r3, r3, #1
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d016      	beq.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c46:	f7fd fa0f 	bl	8002068 <HAL_GetTick>
 8004c4a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c4c:	e00b      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c4e:	f7fd fa0b 	bl	8002068 <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d902      	bls.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	74fb      	strb	r3, [r7, #19]
            break;
 8004c64:	e006      	b.n	8004c74 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c66:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c6c:	f003 0302 	and.w	r3, r3, #2
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d0ec      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004c74:	7cfb      	ldrb	r3, [r7, #19]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10c      	bne.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c7a:	4b08      	ldr	r3, [pc, #32]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c8a:	4904      	ldr	r1, [pc, #16]	; (8004c9c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004c92:	e009      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c94:	7cfb      	ldrb	r3, [r7, #19]
 8004c96:	74bb      	strb	r3, [r7, #18]
 8004c98:	e006      	b.n	8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004c9a:	bf00      	nop
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ca4:	7cfb      	ldrb	r3, [r7, #19]
 8004ca6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ca8:	7c7b      	ldrb	r3, [r7, #17]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d105      	bne.n	8004cba <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cae:	4b9e      	ldr	r3, [pc, #632]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb2:	4a9d      	ldr	r2, [pc, #628]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cc6:	4b98      	ldr	r3, [pc, #608]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ccc:	f023 0203 	bic.w	r2, r3, #3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd4:	4994      	ldr	r1, [pc, #592]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00a      	beq.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ce8:	4b8f      	ldr	r3, [pc, #572]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cee:	f023 020c 	bic.w	r2, r3, #12
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf6:	498c      	ldr	r1, [pc, #560]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00a      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d0a:	4b87      	ldr	r3, [pc, #540]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d18:	4983      	ldr	r1, [pc, #524]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0308 	and.w	r3, r3, #8
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d2c:	4b7e      	ldr	r3, [pc, #504]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d3a:	497b      	ldr	r1, [pc, #492]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0310 	and.w	r3, r3, #16
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00a      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d4e:	4b76      	ldr	r3, [pc, #472]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5c:	4972      	ldr	r1, [pc, #456]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0320 	and.w	r3, r3, #32
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00a      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d70:	4b6d      	ldr	r3, [pc, #436]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d76:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d7e:	496a      	ldr	r1, [pc, #424]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d80:	4313      	orrs	r3, r2
 8004d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00a      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004d92:	4b65      	ldr	r3, [pc, #404]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d98:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da0:	4961      	ldr	r1, [pc, #388]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00a      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004db4:	4b5c      	ldr	r3, [pc, #368]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dba:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dc2:	4959      	ldr	r1, [pc, #356]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d00a      	beq.n	8004dec <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004dd6:	4b54      	ldr	r3, [pc, #336]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ddc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de4:	4950      	ldr	r1, [pc, #320]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de6:	4313      	orrs	r3, r2
 8004de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00a      	beq.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004df8:	4b4b      	ldr	r3, [pc, #300]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dfe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e06:	4948      	ldr	r1, [pc, #288]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d00a      	beq.n	8004e30 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e1a:	4b43      	ldr	r3, [pc, #268]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e28:	493f      	ldr	r1, [pc, #252]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d028      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e3c:	4b3a      	ldr	r3, [pc, #232]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e4a:	4937      	ldr	r1, [pc, #220]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e5a:	d106      	bne.n	8004e6a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e5c:	4b32      	ldr	r3, [pc, #200]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	4a31      	ldr	r2, [pc, #196]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e66:	60d3      	str	r3, [r2, #12]
 8004e68:	e011      	b.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e72:	d10c      	bne.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	3304      	adds	r3, #4
 8004e78:	2101      	movs	r1, #1
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 f8c8 	bl	8005010 <RCCEx_PLLSAI1_Config>
 8004e80:	4603      	mov	r3, r0
 8004e82:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004e84:	7cfb      	ldrb	r3, [r7, #19]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d001      	beq.n	8004e8e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004e8a:	7cfb      	ldrb	r3, [r7, #19]
 8004e8c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d028      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004e9a:	4b23      	ldr	r3, [pc, #140]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ea0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea8:	491f      	ldr	r1, [pc, #124]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eb8:	d106      	bne.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eba:	4b1b      	ldr	r3, [pc, #108]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ebc:	68db      	ldr	r3, [r3, #12]
 8004ebe:	4a1a      	ldr	r2, [pc, #104]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ec0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ec4:	60d3      	str	r3, [r2, #12]
 8004ec6:	e011      	b.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ecc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004ed0:	d10c      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	3304      	adds	r3, #4
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f000 f899 	bl	8005010 <RCCEx_PLLSAI1_Config>
 8004ede:	4603      	mov	r3, r0
 8004ee0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ee2:	7cfb      	ldrb	r3, [r7, #19]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d001      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004ee8:	7cfb      	ldrb	r3, [r7, #19]
 8004eea:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d02b      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ef8:	4b0b      	ldr	r3, [pc, #44]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004efe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f06:	4908      	ldr	r1, [pc, #32]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f16:	d109      	bne.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f18:	4b03      	ldr	r3, [pc, #12]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	4a02      	ldr	r2, [pc, #8]	; (8004f28 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004f1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f22:	60d3      	str	r3, [r2, #12]
 8004f24:	e014      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004f26:	bf00      	nop
 8004f28:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f34:	d10c      	bne.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	3304      	adds	r3, #4
 8004f3a:	2101      	movs	r1, #1
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	f000 f867 	bl	8005010 <RCCEx_PLLSAI1_Config>
 8004f42:	4603      	mov	r3, r0
 8004f44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f46:	7cfb      	ldrb	r3, [r7, #19]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004f4c:	7cfb      	ldrb	r3, [r7, #19]
 8004f4e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d02f      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f5c:	4b2b      	ldr	r3, [pc, #172]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f62:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f6a:	4928      	ldr	r1, [pc, #160]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f76:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004f7a:	d10d      	bne.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	2102      	movs	r1, #2
 8004f82:	4618      	mov	r0, r3
 8004f84:	f000 f844 	bl	8005010 <RCCEx_PLLSAI1_Config>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f8c:	7cfb      	ldrb	r3, [r7, #19]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d014      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004f92:	7cfb      	ldrb	r3, [r7, #19]
 8004f94:	74bb      	strb	r3, [r7, #18]
 8004f96:	e011      	b.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004f9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004fa0:	d10c      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	3320      	adds	r3, #32
 8004fa6:	2102      	movs	r1, #2
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 f925 	bl	80051f8 <RCCEx_PLLSAI2_Config>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fb2:	7cfb      	ldrb	r3, [r7, #19]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d001      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004fb8:	7cfb      	ldrb	r3, [r7, #19]
 8004fba:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00a      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fc8:	4b10      	ldr	r3, [pc, #64]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fce:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fd6:	490d      	ldr	r1, [pc, #52]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d00b      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004fea:	4b08      	ldr	r3, [pc, #32]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ff0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ffa:	4904      	ldr	r1, [pc, #16]	; (800500c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005002:	7cbb      	ldrb	r3, [r7, #18]
}
 8005004:	4618      	mov	r0, r3
 8005006:	3718      	adds	r7, #24
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40021000 	.word	0x40021000

08005010 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b084      	sub	sp, #16
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800501a:	2300      	movs	r3, #0
 800501c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800501e:	4b75      	ldr	r3, [pc, #468]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	f003 0303 	and.w	r3, r3, #3
 8005026:	2b00      	cmp	r3, #0
 8005028:	d018      	beq.n	800505c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800502a:	4b72      	ldr	r3, [pc, #456]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f003 0203 	and.w	r2, r3, #3
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d10d      	bne.n	8005056 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
       ||
 800503e:	2b00      	cmp	r3, #0
 8005040:	d009      	beq.n	8005056 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005042:	4b6c      	ldr	r3, [pc, #432]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	091b      	lsrs	r3, r3, #4
 8005048:	f003 0307 	and.w	r3, r3, #7
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	685b      	ldr	r3, [r3, #4]
       ||
 8005052:	429a      	cmp	r2, r3
 8005054:	d047      	beq.n	80050e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005056:	2301      	movs	r3, #1
 8005058:	73fb      	strb	r3, [r7, #15]
 800505a:	e044      	b.n	80050e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	2b03      	cmp	r3, #3
 8005062:	d018      	beq.n	8005096 <RCCEx_PLLSAI1_Config+0x86>
 8005064:	2b03      	cmp	r3, #3
 8005066:	d825      	bhi.n	80050b4 <RCCEx_PLLSAI1_Config+0xa4>
 8005068:	2b01      	cmp	r3, #1
 800506a:	d002      	beq.n	8005072 <RCCEx_PLLSAI1_Config+0x62>
 800506c:	2b02      	cmp	r3, #2
 800506e:	d009      	beq.n	8005084 <RCCEx_PLLSAI1_Config+0x74>
 8005070:	e020      	b.n	80050b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005072:	4b60      	ldr	r3, [pc, #384]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f003 0302 	and.w	r3, r3, #2
 800507a:	2b00      	cmp	r3, #0
 800507c:	d11d      	bne.n	80050ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005082:	e01a      	b.n	80050ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005084:	4b5b      	ldr	r3, [pc, #364]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800508c:	2b00      	cmp	r3, #0
 800508e:	d116      	bne.n	80050be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005090:	2301      	movs	r3, #1
 8005092:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005094:	e013      	b.n	80050be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005096:	4b57      	ldr	r3, [pc, #348]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10f      	bne.n	80050c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050a2:	4b54      	ldr	r3, [pc, #336]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d109      	bne.n	80050c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050b2:	e006      	b.n	80050c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050b4:	2301      	movs	r3, #1
 80050b6:	73fb      	strb	r3, [r7, #15]
      break;
 80050b8:	e004      	b.n	80050c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050ba:	bf00      	nop
 80050bc:	e002      	b.n	80050c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050be:	bf00      	nop
 80050c0:	e000      	b.n	80050c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80050c4:	7bfb      	ldrb	r3, [r7, #15]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d10d      	bne.n	80050e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050ca:	4b4a      	ldr	r3, [pc, #296]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050cc:	68db      	ldr	r3, [r3, #12]
 80050ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6819      	ldr	r1, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	3b01      	subs	r3, #1
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	430b      	orrs	r3, r1
 80050e0:	4944      	ldr	r1, [pc, #272]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050e6:	7bfb      	ldrb	r3, [r7, #15]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d17d      	bne.n	80051e8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050ec:	4b41      	ldr	r3, [pc, #260]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a40      	ldr	r2, [pc, #256]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f8:	f7fc ffb6 	bl	8002068 <HAL_GetTick>
 80050fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80050fe:	e009      	b.n	8005114 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005100:	f7fc ffb2 	bl	8002068 <HAL_GetTick>
 8005104:	4602      	mov	r2, r0
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	2b02      	cmp	r3, #2
 800510c:	d902      	bls.n	8005114 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	73fb      	strb	r3, [r7, #15]
        break;
 8005112:	e005      	b.n	8005120 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005114:	4b37      	ldr	r3, [pc, #220]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1ef      	bne.n	8005100 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005120:	7bfb      	ldrb	r3, [r7, #15]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d160      	bne.n	80051e8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d111      	bne.n	8005150 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800512c:	4b31      	ldr	r3, [pc, #196]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800512e:	691b      	ldr	r3, [r3, #16]
 8005130:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005138:	687a      	ldr	r2, [r7, #4]
 800513a:	6892      	ldr	r2, [r2, #8]
 800513c:	0211      	lsls	r1, r2, #8
 800513e:	687a      	ldr	r2, [r7, #4]
 8005140:	68d2      	ldr	r2, [r2, #12]
 8005142:	0912      	lsrs	r2, r2, #4
 8005144:	0452      	lsls	r2, r2, #17
 8005146:	430a      	orrs	r2, r1
 8005148:	492a      	ldr	r1, [pc, #168]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800514a:	4313      	orrs	r3, r2
 800514c:	610b      	str	r3, [r1, #16]
 800514e:	e027      	b.n	80051a0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d112      	bne.n	800517c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005156:	4b27      	ldr	r3, [pc, #156]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005158:	691b      	ldr	r3, [r3, #16]
 800515a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800515e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	6892      	ldr	r2, [r2, #8]
 8005166:	0211      	lsls	r1, r2, #8
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	6912      	ldr	r2, [r2, #16]
 800516c:	0852      	lsrs	r2, r2, #1
 800516e:	3a01      	subs	r2, #1
 8005170:	0552      	lsls	r2, r2, #21
 8005172:	430a      	orrs	r2, r1
 8005174:	491f      	ldr	r1, [pc, #124]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005176:	4313      	orrs	r3, r2
 8005178:	610b      	str	r3, [r1, #16]
 800517a:	e011      	b.n	80051a0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800517c:	4b1d      	ldr	r3, [pc, #116]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800517e:	691b      	ldr	r3, [r3, #16]
 8005180:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005184:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005188:	687a      	ldr	r2, [r7, #4]
 800518a:	6892      	ldr	r2, [r2, #8]
 800518c:	0211      	lsls	r1, r2, #8
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	6952      	ldr	r2, [r2, #20]
 8005192:	0852      	lsrs	r2, r2, #1
 8005194:	3a01      	subs	r2, #1
 8005196:	0652      	lsls	r2, r2, #25
 8005198:	430a      	orrs	r2, r1
 800519a:	4916      	ldr	r1, [pc, #88]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800519c:	4313      	orrs	r3, r2
 800519e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051a0:	4b14      	ldr	r3, [pc, #80]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a13      	ldr	r2, [pc, #76]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051aa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ac:	f7fc ff5c 	bl	8002068 <HAL_GetTick>
 80051b0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051b2:	e009      	b.n	80051c8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051b4:	f7fc ff58 	bl	8002068 <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d902      	bls.n	80051c8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	73fb      	strb	r3, [r7, #15]
          break;
 80051c6:	e005      	b.n	80051d4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051c8:	4b0a      	ldr	r3, [pc, #40]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0ef      	beq.n	80051b4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d106      	bne.n	80051e8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051da:	4b06      	ldr	r3, [pc, #24]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051dc:	691a      	ldr	r2, [r3, #16]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	4904      	ldr	r1, [pc, #16]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}
 80051f2:	bf00      	nop
 80051f4:	40021000 	.word	0x40021000

080051f8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b084      	sub	sp, #16
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
 8005200:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005202:	2300      	movs	r3, #0
 8005204:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005206:	4b6a      	ldr	r3, [pc, #424]	; (80053b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005208:	68db      	ldr	r3, [r3, #12]
 800520a:	f003 0303 	and.w	r3, r3, #3
 800520e:	2b00      	cmp	r3, #0
 8005210:	d018      	beq.n	8005244 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005212:	4b67      	ldr	r3, [pc, #412]	; (80053b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	f003 0203 	and.w	r2, r3, #3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d10d      	bne.n	800523e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
       ||
 8005226:	2b00      	cmp	r3, #0
 8005228:	d009      	beq.n	800523e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800522a:	4b61      	ldr	r3, [pc, #388]	; (80053b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800522c:	68db      	ldr	r3, [r3, #12]
 800522e:	091b      	lsrs	r3, r3, #4
 8005230:	f003 0307 	and.w	r3, r3, #7
 8005234:	1c5a      	adds	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
       ||
 800523a:	429a      	cmp	r2, r3
 800523c:	d047      	beq.n	80052ce <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	73fb      	strb	r3, [r7, #15]
 8005242:	e044      	b.n	80052ce <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b03      	cmp	r3, #3
 800524a:	d018      	beq.n	800527e <RCCEx_PLLSAI2_Config+0x86>
 800524c:	2b03      	cmp	r3, #3
 800524e:	d825      	bhi.n	800529c <RCCEx_PLLSAI2_Config+0xa4>
 8005250:	2b01      	cmp	r3, #1
 8005252:	d002      	beq.n	800525a <RCCEx_PLLSAI2_Config+0x62>
 8005254:	2b02      	cmp	r3, #2
 8005256:	d009      	beq.n	800526c <RCCEx_PLLSAI2_Config+0x74>
 8005258:	e020      	b.n	800529c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800525a:	4b55      	ldr	r3, [pc, #340]	; (80053b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0302 	and.w	r3, r3, #2
 8005262:	2b00      	cmp	r3, #0
 8005264:	d11d      	bne.n	80052a2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800526a:	e01a      	b.n	80052a2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800526c:	4b50      	ldr	r3, [pc, #320]	; (80053b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005274:	2b00      	cmp	r3, #0
 8005276:	d116      	bne.n	80052a6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800527c:	e013      	b.n	80052a6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800527e:	4b4c      	ldr	r3, [pc, #304]	; (80053b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10f      	bne.n	80052aa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800528a:	4b49      	ldr	r3, [pc, #292]	; (80053b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005292:	2b00      	cmp	r3, #0
 8005294:	d109      	bne.n	80052aa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800529a:	e006      	b.n	80052aa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800529c:	2301      	movs	r3, #1
 800529e:	73fb      	strb	r3, [r7, #15]
      break;
 80052a0:	e004      	b.n	80052ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052a2:	bf00      	nop
 80052a4:	e002      	b.n	80052ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052a6:	bf00      	nop
 80052a8:	e000      	b.n	80052ac <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80052aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d10d      	bne.n	80052ce <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80052b2:	4b3f      	ldr	r3, [pc, #252]	; (80053b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052b4:	68db      	ldr	r3, [r3, #12]
 80052b6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6819      	ldr	r1, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	011b      	lsls	r3, r3, #4
 80052c6:	430b      	orrs	r3, r1
 80052c8:	4939      	ldr	r1, [pc, #228]	; (80053b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d167      	bne.n	80053a4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80052d4:	4b36      	ldr	r3, [pc, #216]	; (80053b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a35      	ldr	r2, [pc, #212]	; (80053b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052e0:	f7fc fec2 	bl	8002068 <HAL_GetTick>
 80052e4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052e6:	e009      	b.n	80052fc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80052e8:	f7fc febe 	bl	8002068 <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d902      	bls.n	80052fc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	73fb      	strb	r3, [r7, #15]
        break;
 80052fa:	e005      	b.n	8005308 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80052fc:	4b2c      	ldr	r3, [pc, #176]	; (80053b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1ef      	bne.n	80052e8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005308:	7bfb      	ldrb	r3, [r7, #15]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d14a      	bne.n	80053a4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d111      	bne.n	8005338 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005314:	4b26      	ldr	r3, [pc, #152]	; (80053b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005316:	695b      	ldr	r3, [r3, #20]
 8005318:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800531c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	6892      	ldr	r2, [r2, #8]
 8005324:	0211      	lsls	r1, r2, #8
 8005326:	687a      	ldr	r2, [r7, #4]
 8005328:	68d2      	ldr	r2, [r2, #12]
 800532a:	0912      	lsrs	r2, r2, #4
 800532c:	0452      	lsls	r2, r2, #17
 800532e:	430a      	orrs	r2, r1
 8005330:	491f      	ldr	r1, [pc, #124]	; (80053b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005332:	4313      	orrs	r3, r2
 8005334:	614b      	str	r3, [r1, #20]
 8005336:	e011      	b.n	800535c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005338:	4b1d      	ldr	r3, [pc, #116]	; (80053b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800533a:	695b      	ldr	r3, [r3, #20]
 800533c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005340:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	6892      	ldr	r2, [r2, #8]
 8005348:	0211      	lsls	r1, r2, #8
 800534a:	687a      	ldr	r2, [r7, #4]
 800534c:	6912      	ldr	r2, [r2, #16]
 800534e:	0852      	lsrs	r2, r2, #1
 8005350:	3a01      	subs	r2, #1
 8005352:	0652      	lsls	r2, r2, #25
 8005354:	430a      	orrs	r2, r1
 8005356:	4916      	ldr	r1, [pc, #88]	; (80053b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005358:	4313      	orrs	r3, r2
 800535a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800535c:	4b14      	ldr	r3, [pc, #80]	; (80053b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a13      	ldr	r2, [pc, #76]	; (80053b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005366:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005368:	f7fc fe7e 	bl	8002068 <HAL_GetTick>
 800536c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800536e:	e009      	b.n	8005384 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005370:	f7fc fe7a 	bl	8002068 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d902      	bls.n	8005384 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	73fb      	strb	r3, [r7, #15]
          break;
 8005382:	e005      	b.n	8005390 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005384:	4b0a      	ldr	r3, [pc, #40]	; (80053b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d0ef      	beq.n	8005370 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005390:	7bfb      	ldrb	r3, [r7, #15]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d106      	bne.n	80053a4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005396:	4b06      	ldr	r3, [pc, #24]	; (80053b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005398:	695a      	ldr	r2, [r3, #20]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	4904      	ldr	r1, [pc, #16]	; (80053b0 <RCCEx_PLLSAI2_Config+0x1b8>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3710      	adds	r7, #16
 80053aa:	46bd      	mov	sp, r7
 80053ac:	bd80      	pop	{r7, pc}
 80053ae:	bf00      	nop
 80053b0:	40021000 	.word	0x40021000

080053b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d06c      	beq.n	80054a0 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d106      	bne.n	80053e0 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fc fa1a 	bl	8001814 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	22ca      	movs	r2, #202	; 0xca
 80053ee:	625a      	str	r2, [r3, #36]	; 0x24
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2253      	movs	r2, #83	; 0x53
 80053f6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 fa49 	bl	8005890 <RTC_EnterInitMode>
 80053fe:	4603      	mov	r3, r0
 8005400:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005402:	7bfb      	ldrb	r3, [r7, #15]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d14b      	bne.n	80054a0 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6812      	ldr	r2, [r2, #0]
 8005412:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005416:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800541a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6899      	ldr	r1, [r3, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685a      	ldr	r2, [r3, #4]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	431a      	orrs	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	431a      	orrs	r2, r3
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	68d2      	ldr	r2, [r2, #12]
 8005442:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6919      	ldr	r1, [r3, #16]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	041a      	lsls	r2, r3, #16
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 fa4d 	bl	80058f8 <RTC_ExitInitMode>
 800545e:	4603      	mov	r3, r0
 8005460:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8005462:	7bfb      	ldrb	r3, [r7, #15]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d11b      	bne.n	80054a0 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f022 0203 	bic.w	r2, r2, #3
 8005476:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	69da      	ldr	r2, [r3, #28]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	695b      	ldr	r3, [r3, #20]
 8005486:	431a      	orrs	r2, r3
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	430a      	orrs	r2, r1
 800548e:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	22ff      	movs	r2, #255	; 0xff
 8005496:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2201      	movs	r2, #1
 800549c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80054a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3710      	adds	r7, #16
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}

080054aa <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80054aa:	b590      	push	{r4, r7, lr}
 80054ac:	b087      	sub	sp, #28
 80054ae:	af00      	add	r7, sp, #0
 80054b0:	60f8      	str	r0, [r7, #12]
 80054b2:	60b9      	str	r1, [r7, #8]
 80054b4:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d101      	bne.n	80054c4 <HAL_RTC_SetTime+0x1a>
 80054c0:	2302      	movs	r3, #2
 80054c2:	e08b      	b.n	80055dc <HAL_RTC_SetTime+0x132>
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2202      	movs	r2, #2
 80054d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	22ca      	movs	r2, #202	; 0xca
 80054da:	625a      	str	r2, [r3, #36]	; 0x24
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2253      	movs	r2, #83	; 0x53
 80054e2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 f9d3 	bl	8005890 <RTC_EnterInitMode>
 80054ea:	4603      	mov	r3, r0
 80054ec:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80054ee:	7cfb      	ldrb	r3, [r7, #19]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d163      	bne.n	80055bc <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d126      	bne.n	8005548 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005504:	2b00      	cmp	r3, #0
 8005506:	d102      	bne.n	800550e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2200      	movs	r2, #0
 800550c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	4618      	mov	r0, r3
 8005514:	f000 fa2e 	bl	8005974 <RTC_ByteToBcd2>
 8005518:	4603      	mov	r3, r0
 800551a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800551c:	68bb      	ldr	r3, [r7, #8]
 800551e:	785b      	ldrb	r3, [r3, #1]
 8005520:	4618      	mov	r0, r3
 8005522:	f000 fa27 	bl	8005974 <RTC_ByteToBcd2>
 8005526:	4603      	mov	r3, r0
 8005528:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800552a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	789b      	ldrb	r3, [r3, #2]
 8005530:	4618      	mov	r0, r3
 8005532:	f000 fa1f 	bl	8005974 <RTC_ByteToBcd2>
 8005536:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005538:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	78db      	ldrb	r3, [r3, #3]
 8005540:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005542:	4313      	orrs	r3, r2
 8005544:	617b      	str	r3, [r7, #20]
 8005546:	e018      	b.n	800557a <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005552:	2b00      	cmp	r3, #0
 8005554:	d102      	bne.n	800555c <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2200      	movs	r2, #0
 800555a:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	781b      	ldrb	r3, [r3, #0]
 8005560:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	785b      	ldrb	r3, [r3, #1]
 8005566:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005568:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800556e:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	78db      	ldrb	r3, [r3, #3]
 8005574:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005576:	4313      	orrs	r3, r2
 8005578:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005584:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005588:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005598:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6899      	ldr	r1, [r3, #8]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	691b      	ldr	r3, [r3, #16]
 80055a8:	431a      	orrs	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	430a      	orrs	r2, r1
 80055b0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 f9a0 	bl	80058f8 <RTC_ExitInitMode>
 80055b8:	4603      	mov	r3, r0
 80055ba:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	22ff      	movs	r2, #255	; 0xff
 80055c2:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80055c4:	7cfb      	ldrb	r3, [r7, #19]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d103      	bne.n	80055d2 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80055da:	7cfb      	ldrb	r3, [r7, #19]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	371c      	adds	r7, #28
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd90      	pop	{r4, r7, pc}

080055e4 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b086      	sub	sp, #24
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005612:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005616:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	0c1b      	lsrs	r3, r3, #16
 800561c:	b2db      	uxtb	r3, r3
 800561e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005622:	b2da      	uxtb	r2, r3
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	0a1b      	lsrs	r3, r3, #8
 800562c:	b2db      	uxtb	r3, r3
 800562e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005632:	b2da      	uxtb	r2, r3
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	b2db      	uxtb	r3, r3
 800563c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005640:	b2da      	uxtb	r2, r3
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8005646:	697b      	ldr	r3, [r7, #20]
 8005648:	0d9b      	lsrs	r3, r3, #22
 800564a:	b2db      	uxtb	r3, r3
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	b2da      	uxtb	r2, r3
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d11a      	bne.n	8005692 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	781b      	ldrb	r3, [r3, #0]
 8005660:	4618      	mov	r0, r3
 8005662:	f000 f9a7 	bl	80059b4 <RTC_Bcd2ToByte>
 8005666:	4603      	mov	r3, r0
 8005668:	461a      	mov	r2, r3
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	785b      	ldrb	r3, [r3, #1]
 8005672:	4618      	mov	r0, r3
 8005674:	f000 f99e 	bl	80059b4 <RTC_Bcd2ToByte>
 8005678:	4603      	mov	r3, r0
 800567a:	461a      	mov	r2, r3
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	789b      	ldrb	r3, [r3, #2]
 8005684:	4618      	mov	r0, r3
 8005686:	f000 f995 	bl	80059b4 <RTC_Bcd2ToByte>
 800568a:	4603      	mov	r3, r0
 800568c:	461a      	mov	r2, r3
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8005692:	2300      	movs	r3, #0
}
 8005694:	4618      	mov	r0, r3
 8005696:	3718      	adds	r7, #24
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800569c:	b590      	push	{r4, r7, lr}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d101      	bne.n	80056b6 <HAL_RTC_SetDate+0x1a>
 80056b2:	2302      	movs	r3, #2
 80056b4:	e075      	b.n	80057a2 <HAL_RTC_SetDate+0x106>
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2201      	movs	r2, #1
 80056ba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2202      	movs	r2, #2
 80056c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10e      	bne.n	80056ea <HAL_RTC_SetDate+0x4e>
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	785b      	ldrb	r3, [r3, #1]
 80056d0:	f003 0310 	and.w	r3, r3, #16
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d008      	beq.n	80056ea <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	785b      	ldrb	r3, [r3, #1]
 80056dc:	f023 0310 	bic.w	r3, r3, #16
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	330a      	adds	r3, #10
 80056e4:	b2da      	uxtb	r2, r3
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d11c      	bne.n	800572a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	78db      	ldrb	r3, [r3, #3]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f000 f93d 	bl	8005974 <RTC_ByteToBcd2>
 80056fa:	4603      	mov	r3, r0
 80056fc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	785b      	ldrb	r3, [r3, #1]
 8005702:	4618      	mov	r0, r3
 8005704:	f000 f936 	bl	8005974 <RTC_ByteToBcd2>
 8005708:	4603      	mov	r3, r0
 800570a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800570c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	789b      	ldrb	r3, [r3, #2]
 8005712:	4618      	mov	r0, r3
 8005714:	f000 f92e 	bl	8005974 <RTC_ByteToBcd2>
 8005718:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800571a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]
 8005728:	e00e      	b.n	8005748 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	78db      	ldrb	r3, [r3, #3]
 800572e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	785b      	ldrb	r3, [r3, #1]
 8005734:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005736:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005738:	68ba      	ldr	r2, [r7, #8]
 800573a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800573c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005744:	4313      	orrs	r3, r2
 8005746:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	22ca      	movs	r2, #202	; 0xca
 800574e:	625a      	str	r2, [r3, #36]	; 0x24
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2253      	movs	r2, #83	; 0x53
 8005756:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f899 	bl	8005890 <RTC_EnterInitMode>
 800575e:	4603      	mov	r3, r0
 8005760:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005762:	7cfb      	ldrb	r3, [r7, #19]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10c      	bne.n	8005782 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005772:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005776:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8005778:	68f8      	ldr	r0, [r7, #12]
 800577a:	f000 f8bd 	bl	80058f8 <RTC_ExitInitMode>
 800577e:	4603      	mov	r3, r0
 8005780:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	22ff      	movs	r2, #255	; 0xff
 8005788:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800578a:	7cfb      	ldrb	r3, [r7, #19]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d103      	bne.n	8005798 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80057a0:	7cfb      	ldrb	r3, [r7, #19]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	371c      	adds	r7, #28
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd90      	pop	{r4, r7, pc}

080057aa <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80057aa:	b580      	push	{r7, lr}
 80057ac:	b086      	sub	sp, #24
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	60f8      	str	r0, [r7, #12]
 80057b2:	60b9      	str	r1, [r7, #8]
 80057b4:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80057c0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80057c4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	0c1b      	lsrs	r3, r3, #16
 80057ca:	b2da      	uxtb	r2, r3
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80057d0:	697b      	ldr	r3, [r7, #20]
 80057d2:	0a1b      	lsrs	r3, r3, #8
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	f003 031f 	and.w	r3, r3, #31
 80057da:	b2da      	uxtb	r2, r3
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	b2db      	uxtb	r3, r3
 80057e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	0b5b      	lsrs	r3, r3, #13
 80057f2:	b2db      	uxtb	r3, r3
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	b2da      	uxtb	r2, r3
 80057fa:	68bb      	ldr	r3, [r7, #8]
 80057fc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d11a      	bne.n	800583a <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8005804:	68bb      	ldr	r3, [r7, #8]
 8005806:	78db      	ldrb	r3, [r3, #3]
 8005808:	4618      	mov	r0, r3
 800580a:	f000 f8d3 	bl	80059b4 <RTC_Bcd2ToByte>
 800580e:	4603      	mov	r3, r0
 8005810:	461a      	mov	r2, r3
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	785b      	ldrb	r3, [r3, #1]
 800581a:	4618      	mov	r0, r3
 800581c:	f000 f8ca 	bl	80059b4 <RTC_Bcd2ToByte>
 8005820:	4603      	mov	r3, r0
 8005822:	461a      	mov	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005828:	68bb      	ldr	r3, [r7, #8]
 800582a:	789b      	ldrb	r3, [r3, #2]
 800582c:	4618      	mov	r0, r3
 800582e:	f000 f8c1 	bl	80059b4 <RTC_Bcd2ToByte>
 8005832:	4603      	mov	r3, r0
 8005834:	461a      	mov	r2, r3
 8005836:	68bb      	ldr	r3, [r7, #8]
 8005838:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800583a:	2300      	movs	r3, #0
}
 800583c:	4618      	mov	r0, r3
 800583e:	3718      	adds	r7, #24
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}

08005844 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b084      	sub	sp, #16
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68da      	ldr	r2, [r3, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800585a:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800585c:	f7fc fc04 	bl	8002068 <HAL_GetTick>
 8005860:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005862:	e009      	b.n	8005878 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005864:	f7fc fc00 	bl	8002068 <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005872:	d901      	bls.n	8005878 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8005874:	2303      	movs	r3, #3
 8005876:	e007      	b.n	8005888 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b00      	cmp	r3, #0
 8005884:	d0ee      	beq.n	8005864 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005898:	2300      	movs	r3, #0
 800589a:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	68db      	ldr	r3, [r3, #12]
 80058a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d120      	bne.n	80058ec <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f04f 32ff 	mov.w	r2, #4294967295
 80058b2:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80058b4:	f7fc fbd8 	bl	8002068 <HAL_GetTick>
 80058b8:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80058ba:	e00d      	b.n	80058d8 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80058bc:	f7fc fbd4 	bl	8002068 <HAL_GetTick>
 80058c0:	4602      	mov	r2, r0
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	1ad3      	subs	r3, r2, r3
 80058c6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80058ca:	d905      	bls.n	80058d8 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2203      	movs	r2, #3
 80058d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d102      	bne.n	80058ec <RTC_EnterInitMode+0x5c>
 80058e6:	7bfb      	ldrb	r3, [r7, #15]
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	d1e7      	bne.n	80058bc <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80058ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005900:	2300      	movs	r3, #0
 8005902:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8005904:	4b1a      	ldr	r3, [pc, #104]	; (8005970 <RTC_ExitInitMode+0x78>)
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	4a19      	ldr	r2, [pc, #100]	; (8005970 <RTC_ExitInitMode+0x78>)
 800590a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800590e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005910:	4b17      	ldr	r3, [pc, #92]	; (8005970 <RTC_ExitInitMode+0x78>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f003 0320 	and.w	r3, r3, #32
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10c      	bne.n	8005936 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7ff ff91 	bl	8005844 <HAL_RTC_WaitForSynchro>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d01e      	beq.n	8005966 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2203      	movs	r2, #3
 800592c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005930:	2303      	movs	r3, #3
 8005932:	73fb      	strb	r3, [r7, #15]
 8005934:	e017      	b.n	8005966 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005936:	4b0e      	ldr	r3, [pc, #56]	; (8005970 <RTC_ExitInitMode+0x78>)
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	4a0d      	ldr	r2, [pc, #52]	; (8005970 <RTC_ExitInitMode+0x78>)
 800593c:	f023 0320 	bic.w	r3, r3, #32
 8005940:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f7ff ff7e 	bl	8005844 <HAL_RTC_WaitForSynchro>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d005      	beq.n	800595a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2203      	movs	r2, #3
 8005952:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800595a:	4b05      	ldr	r3, [pc, #20]	; (8005970 <RTC_ExitInitMode+0x78>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	4a04      	ldr	r2, [pc, #16]	; (8005970 <RTC_ExitInitMode+0x78>)
 8005960:	f043 0320 	orr.w	r3, r3, #32
 8005964:	6093      	str	r3, [r2, #8]
  }

  return status;
 8005966:	7bfb      	ldrb	r3, [r7, #15]
}
 8005968:	4618      	mov	r0, r3
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}
 8005970:	40002800 	.word	0x40002800

08005974 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	4603      	mov	r3, r0
 800597c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800597e:	2300      	movs	r3, #0
 8005980:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8005982:	79fb      	ldrb	r3, [r7, #7]
 8005984:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8005986:	e005      	b.n	8005994 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3301      	adds	r3, #1
 800598c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800598e:	7afb      	ldrb	r3, [r7, #11]
 8005990:	3b0a      	subs	r3, #10
 8005992:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8005994:	7afb      	ldrb	r3, [r7, #11]
 8005996:	2b09      	cmp	r3, #9
 8005998:	d8f6      	bhi.n	8005988 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	b2db      	uxtb	r3, r3
 800599e:	011b      	lsls	r3, r3, #4
 80059a0:	b2da      	uxtb	r2, r3
 80059a2:	7afb      	ldrb	r3, [r7, #11]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	b2db      	uxtb	r3, r3
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3714      	adds	r7, #20
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	4603      	mov	r3, r0
 80059bc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80059be:	79fb      	ldrb	r3, [r7, #7]
 80059c0:	091b      	lsrs	r3, r3, #4
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	461a      	mov	r2, r3
 80059c6:	0092      	lsls	r2, r2, #2
 80059c8:	4413      	add	r3, r2
 80059ca:	005b      	lsls	r3, r3, #1
 80059cc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80059ce:	79fb      	ldrb	r3, [r7, #7]
 80059d0:	f003 030f 	and.w	r3, r3, #15
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	7bfb      	ldrb	r3, [r7, #15]
 80059d8:	4413      	add	r3, r2
 80059da:	b2db      	uxtb	r3, r3
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3714      	adds	r7, #20
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e095      	b.n	8005b26 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d108      	bne.n	8005a14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a0a:	d009      	beq.n	8005a20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	61da      	str	r2, [r3, #28]
 8005a12:	e005      	b.n	8005a20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2200      	movs	r2, #0
 8005a24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a2c:	b2db      	uxtb	r3, r3
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d106      	bne.n	8005a40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fb ff5a 	bl	80018f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2202      	movs	r2, #2
 8005a44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a60:	d902      	bls.n	8005a68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a62:	2300      	movs	r3, #0
 8005a64:	60fb      	str	r3, [r7, #12]
 8005a66:	e002      	b.n	8005a6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	68db      	ldr	r3, [r3, #12]
 8005a72:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a76:	d007      	beq.n	8005a88 <HAL_SPI_Init+0xa0>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68db      	ldr	r3, [r3, #12]
 8005a7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a80:	d002      	beq.n	8005a88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a98:	431a      	orrs	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 0302 	and.w	r3, r3, #2
 8005aa2:	431a      	orrs	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	431a      	orrs	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ac0:	431a      	orrs	r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aca:	ea42 0103 	orr.w	r1, r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	0c1b      	lsrs	r3, r3, #16
 8005ae4:	f003 0204 	and.w	r2, r3, #4
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aec:	f003 0310 	and.w	r3, r3, #16
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	431a      	orrs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b04:	ea42 0103 	orr.w	r1, r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b088      	sub	sp, #32
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	60f8      	str	r0, [r7, #12]
 8005b36:	60b9      	str	r1, [r7, #8]
 8005b38:	603b      	str	r3, [r7, #0]
 8005b3a:	4613      	mov	r3, r2
 8005b3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b3e:	2300      	movs	r3, #0
 8005b40:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d101      	bne.n	8005b50 <HAL_SPI_Transmit+0x22>
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	e158      	b.n	8005e02 <HAL_SPI_Transmit+0x2d4>
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b58:	f7fc fa86 	bl	8002068 <HAL_GetTick>
 8005b5c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d002      	beq.n	8005b74 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b6e:	2302      	movs	r3, #2
 8005b70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b72:	e13d      	b.n	8005df0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d002      	beq.n	8005b80 <HAL_SPI_Transmit+0x52>
 8005b7a:	88fb      	ldrh	r3, [r7, #6]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d102      	bne.n	8005b86 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b84:	e134      	b.n	8005df0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2203      	movs	r2, #3
 8005b8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	68ba      	ldr	r2, [r7, #8]
 8005b98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	88fa      	ldrh	r2, [r7, #6]
 8005b9e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	88fa      	ldrh	r2, [r7, #6]
 8005ba4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bd0:	d10f      	bne.n	8005bf2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005be0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bf0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfc:	2b40      	cmp	r3, #64	; 0x40
 8005bfe:	d007      	beq.n	8005c10 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c0e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c18:	d94b      	bls.n	8005cb2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	685b      	ldr	r3, [r3, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d002      	beq.n	8005c28 <HAL_SPI_Transmit+0xfa>
 8005c22:	8afb      	ldrh	r3, [r7, #22]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d13e      	bne.n	8005ca6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2c:	881a      	ldrh	r2, [r3, #0]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c38:	1c9a      	adds	r2, r3, #2
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c42:	b29b      	uxth	r3, r3
 8005c44:	3b01      	subs	r3, #1
 8005c46:	b29a      	uxth	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c4c:	e02b      	b.n	8005ca6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d112      	bne.n	8005c82 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c60:	881a      	ldrh	r2, [r3, #0]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c6c:	1c9a      	adds	r2, r3, #2
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	3b01      	subs	r3, #1
 8005c7a:	b29a      	uxth	r2, r3
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c80:	e011      	b.n	8005ca6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c82:	f7fc f9f1 	bl	8002068 <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	683a      	ldr	r2, [r7, #0]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d803      	bhi.n	8005c9a <HAL_SPI_Transmit+0x16c>
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c98:	d102      	bne.n	8005ca0 <HAL_SPI_Transmit+0x172>
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d102      	bne.n	8005ca6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005ca0:	2303      	movs	r3, #3
 8005ca2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ca4:	e0a4      	b.n	8005df0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005caa:	b29b      	uxth	r3, r3
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1ce      	bne.n	8005c4e <HAL_SPI_Transmit+0x120>
 8005cb0:	e07c      	b.n	8005dac <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d002      	beq.n	8005cc0 <HAL_SPI_Transmit+0x192>
 8005cba:	8afb      	ldrh	r3, [r7, #22]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d170      	bne.n	8005da2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d912      	bls.n	8005cf0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cce:	881a      	ldrh	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cda:	1c9a      	adds	r2, r3, #2
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	3b02      	subs	r3, #2
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cee:	e058      	b.n	8005da2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	330c      	adds	r3, #12
 8005cfa:	7812      	ldrb	r2, [r2, #0]
 8005cfc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d02:	1c5a      	adds	r2, r3, #1
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	b29a      	uxth	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005d16:	e044      	b.n	8005da2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	f003 0302 	and.w	r3, r3, #2
 8005d22:	2b02      	cmp	r3, #2
 8005d24:	d12b      	bne.n	8005d7e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d912      	bls.n	8005d56 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d34:	881a      	ldrh	r2, [r3, #0]
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d40:	1c9a      	adds	r2, r3, #2
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d4a:	b29b      	uxth	r3, r3
 8005d4c:	3b02      	subs	r3, #2
 8005d4e:	b29a      	uxth	r2, r3
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d54:	e025      	b.n	8005da2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	330c      	adds	r3, #12
 8005d60:	7812      	ldrb	r2, [r2, #0]
 8005d62:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d68:	1c5a      	adds	r2, r3, #1
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	3b01      	subs	r3, #1
 8005d76:	b29a      	uxth	r2, r3
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d7c:	e011      	b.n	8005da2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d7e:	f7fc f973 	bl	8002068 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	683a      	ldr	r2, [r7, #0]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d803      	bhi.n	8005d96 <HAL_SPI_Transmit+0x268>
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d94:	d102      	bne.n	8005d9c <HAL_SPI_Transmit+0x26e>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d102      	bne.n	8005da2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005da0:	e026      	b.n	8005df0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1b5      	bne.n	8005d18 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005dac:	69ba      	ldr	r2, [r7, #24]
 8005dae:	6839      	ldr	r1, [r7, #0]
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 f949 	bl	8006048 <SPI_EndRxTxTransaction>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d002      	beq.n	8005dc2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10a      	bne.n	8005de0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005dca:	2300      	movs	r3, #0
 8005dcc:	613b      	str	r3, [r7, #16]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	613b      	str	r3, [r7, #16]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	613b      	str	r3, [r7, #16]
 8005dde:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d002      	beq.n	8005dee <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	77fb      	strb	r3, [r7, #31]
 8005dec:	e000      	b.n	8005df0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005dee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e00:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3720      	adds	r7, #32
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
	...

08005e0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b088      	sub	sp, #32
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	60f8      	str	r0, [r7, #12]
 8005e14:	60b9      	str	r1, [r7, #8]
 8005e16:	603b      	str	r3, [r7, #0]
 8005e18:	4613      	mov	r3, r2
 8005e1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e1c:	f7fc f924 	bl	8002068 <HAL_GetTick>
 8005e20:	4602      	mov	r2, r0
 8005e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e24:	1a9b      	subs	r3, r3, r2
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	4413      	add	r3, r2
 8005e2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e2c:	f7fc f91c 	bl	8002068 <HAL_GetTick>
 8005e30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e32:	4b39      	ldr	r3, [pc, #228]	; (8005f18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	015b      	lsls	r3, r3, #5
 8005e38:	0d1b      	lsrs	r3, r3, #20
 8005e3a:	69fa      	ldr	r2, [r7, #28]
 8005e3c:	fb02 f303 	mul.w	r3, r2, r3
 8005e40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e42:	e054      	b.n	8005eee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e4a:	d050      	beq.n	8005eee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e4c:	f7fc f90c 	bl	8002068 <HAL_GetTick>
 8005e50:	4602      	mov	r2, r0
 8005e52:	69bb      	ldr	r3, [r7, #24]
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	429a      	cmp	r2, r3
 8005e5a:	d902      	bls.n	8005e62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d13d      	bne.n	8005ede <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005e70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e7a:	d111      	bne.n	8005ea0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e84:	d004      	beq.n	8005e90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e8e:	d107      	bne.n	8005ea0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ea8:	d10f      	bne.n	8005eca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005eb8:	601a      	str	r2, [r3, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ec8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2201      	movs	r2, #1
 8005ece:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005eda:	2303      	movs	r3, #3
 8005edc:	e017      	b.n	8005f0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	3b01      	subs	r3, #1
 8005eec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689a      	ldr	r2, [r3, #8]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	bf0c      	ite	eq
 8005efe:	2301      	moveq	r3, #1
 8005f00:	2300      	movne	r3, #0
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	461a      	mov	r2, r3
 8005f06:	79fb      	ldrb	r3, [r7, #7]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d19b      	bne.n	8005e44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3720      	adds	r7, #32
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	20000010 	.word	0x20000010

08005f1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b08a      	sub	sp, #40	; 0x28
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
 8005f28:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f2e:	f7fc f89b 	bl	8002068 <HAL_GetTick>
 8005f32:	4602      	mov	r2, r0
 8005f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f36:	1a9b      	subs	r3, r3, r2
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	4413      	add	r3, r2
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005f3e:	f7fc f893 	bl	8002068 <HAL_GetTick>
 8005f42:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	330c      	adds	r3, #12
 8005f4a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f4c:	4b3d      	ldr	r3, [pc, #244]	; (8006044 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005f4e:	681a      	ldr	r2, [r3, #0]
 8005f50:	4613      	mov	r3, r2
 8005f52:	009b      	lsls	r3, r3, #2
 8005f54:	4413      	add	r3, r2
 8005f56:	00da      	lsls	r2, r3, #3
 8005f58:	1ad3      	subs	r3, r2, r3
 8005f5a:	0d1b      	lsrs	r3, r3, #20
 8005f5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f5e:	fb02 f303 	mul.w	r3, r2, r3
 8005f62:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005f64:	e060      	b.n	8006028 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005f6c:	d107      	bne.n	8005f7e <SPI_WaitFifoStateUntilTimeout+0x62>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d104      	bne.n	8005f7e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005f74:	69fb      	ldr	r3, [r7, #28]
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	b2db      	uxtb	r3, r3
 8005f7a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005f7c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f84:	d050      	beq.n	8006028 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005f86:	f7fc f86f 	bl	8002068 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	6a3b      	ldr	r3, [r7, #32]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d902      	bls.n	8005f9c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d13d      	bne.n	8006018 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685a      	ldr	r2, [r3, #4]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005faa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fb4:	d111      	bne.n	8005fda <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fbe:	d004      	beq.n	8005fca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fc8:	d107      	bne.n	8005fda <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fd8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005fe2:	d10f      	bne.n	8006004 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006002:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	2200      	movs	r2, #0
 8006010:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006014:	2303      	movs	r3, #3
 8006016:	e010      	b.n	800603a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800601e:	2300      	movs	r3, #0
 8006020:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	3b01      	subs	r3, #1
 8006026:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689a      	ldr	r2, [r3, #8]
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	4013      	ands	r3, r2
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	429a      	cmp	r2, r3
 8006036:	d196      	bne.n	8005f66 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3728      	adds	r7, #40	; 0x28
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}
 8006042:	bf00      	nop
 8006044:	20000010 	.word	0x20000010

08006048 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b086      	sub	sp, #24
 800604c:	af02      	add	r7, sp, #8
 800604e:	60f8      	str	r0, [r7, #12]
 8006050:	60b9      	str	r1, [r7, #8]
 8006052:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	9300      	str	r3, [sp, #0]
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	2200      	movs	r2, #0
 800605c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006060:	68f8      	ldr	r0, [r7, #12]
 8006062:	f7ff ff5b 	bl	8005f1c <SPI_WaitFifoStateUntilTimeout>
 8006066:	4603      	mov	r3, r0
 8006068:	2b00      	cmp	r3, #0
 800606a:	d007      	beq.n	800607c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006070:	f043 0220 	orr.w	r2, r3, #32
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006078:	2303      	movs	r3, #3
 800607a:	e027      	b.n	80060cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	9300      	str	r3, [sp, #0]
 8006080:	68bb      	ldr	r3, [r7, #8]
 8006082:	2200      	movs	r2, #0
 8006084:	2180      	movs	r1, #128	; 0x80
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f7ff fec0 	bl	8005e0c <SPI_WaitFlagStateUntilTimeout>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d007      	beq.n	80060a2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006096:	f043 0220 	orr.w	r2, r3, #32
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e014      	b.n	80060cc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	9300      	str	r3, [sp, #0]
 80060a6:	68bb      	ldr	r3, [r7, #8]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f7ff ff34 	bl	8005f1c <SPI_WaitFifoStateUntilTimeout>
 80060b4:	4603      	mov	r3, r0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d007      	beq.n	80060ca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060be:	f043 0220 	orr.w	r2, r3, #32
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060c6:	2303      	movs	r3, #3
 80060c8:	e000      	b.n	80060cc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3710      	adds	r7, #16
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}

080060d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d101      	bne.n	80060e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e049      	b.n	800617a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d106      	bne.n	8006100 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f7fb fdc4 	bl	8001c88 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	3304      	adds	r3, #4
 8006110:	4619      	mov	r1, r3
 8006112:	4610      	mov	r0, r2
 8006114:	f000 fd34 	bl	8006b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2201      	movs	r2, #1
 800611c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2201      	movs	r2, #1
 8006124:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2201      	movs	r2, #1
 800612c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2201      	movs	r2, #1
 8006134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2201      	movs	r2, #1
 800614c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2201      	movs	r2, #1
 8006154:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3708      	adds	r7, #8
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
	...

08006184 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006184:	b480      	push	{r7}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b01      	cmp	r3, #1
 8006196:	d001      	beq.n	800619c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e04f      	b.n	800623c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f042 0201 	orr.w	r2, r2, #1
 80061b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a23      	ldr	r2, [pc, #140]	; (8006248 <HAL_TIM_Base_Start_IT+0xc4>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d01d      	beq.n	80061fa <HAL_TIM_Base_Start_IT+0x76>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061c6:	d018      	beq.n	80061fa <HAL_TIM_Base_Start_IT+0x76>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a1f      	ldr	r2, [pc, #124]	; (800624c <HAL_TIM_Base_Start_IT+0xc8>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d013      	beq.n	80061fa <HAL_TIM_Base_Start_IT+0x76>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a1e      	ldr	r2, [pc, #120]	; (8006250 <HAL_TIM_Base_Start_IT+0xcc>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d00e      	beq.n	80061fa <HAL_TIM_Base_Start_IT+0x76>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a1c      	ldr	r2, [pc, #112]	; (8006254 <HAL_TIM_Base_Start_IT+0xd0>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d009      	beq.n	80061fa <HAL_TIM_Base_Start_IT+0x76>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a1b      	ldr	r2, [pc, #108]	; (8006258 <HAL_TIM_Base_Start_IT+0xd4>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d004      	beq.n	80061fa <HAL_TIM_Base_Start_IT+0x76>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a19      	ldr	r2, [pc, #100]	; (800625c <HAL_TIM_Base_Start_IT+0xd8>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d115      	bne.n	8006226 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	689a      	ldr	r2, [r3, #8]
 8006200:	4b17      	ldr	r3, [pc, #92]	; (8006260 <HAL_TIM_Base_Start_IT+0xdc>)
 8006202:	4013      	ands	r3, r2
 8006204:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b06      	cmp	r3, #6
 800620a:	d015      	beq.n	8006238 <HAL_TIM_Base_Start_IT+0xb4>
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006212:	d011      	beq.n	8006238 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681a      	ldr	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f042 0201 	orr.w	r2, r2, #1
 8006222:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006224:	e008      	b.n	8006238 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0201 	orr.w	r2, r2, #1
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	e000      	b.n	800623a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006238:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800623a:	2300      	movs	r3, #0
}
 800623c:	4618      	mov	r0, r3
 800623e:	3714      	adds	r7, #20
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	40012c00 	.word	0x40012c00
 800624c:	40000400 	.word	0x40000400
 8006250:	40000800 	.word	0x40000800
 8006254:	40000c00 	.word	0x40000c00
 8006258:	40013400 	.word	0x40013400
 800625c:	40014000 	.word	0x40014000
 8006260:	00010007 	.word	0x00010007

08006264 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d101      	bne.n	8006276 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	e049      	b.n	800630a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d106      	bne.n	8006290 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800628a:	6878      	ldr	r0, [r7, #4]
 800628c:	f000 f841 	bl	8006312 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	3304      	adds	r3, #4
 80062a0:	4619      	mov	r1, r3
 80062a2:	4610      	mov	r0, r2
 80062a4:	f000 fc6c 	bl	8006b80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2201      	movs	r2, #1
 80062ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2201      	movs	r2, #1
 80062b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2201      	movs	r2, #1
 80062cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2201      	movs	r2, #1
 80062d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2201      	movs	r2, #1
 80062f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006308:	2300      	movs	r3, #0
}
 800630a:	4618      	mov	r0, r3
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr
	...

08006328 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	2b00      	cmp	r3, #0
 8006336:	d109      	bne.n	800634c <HAL_TIM_PWM_Start+0x24>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b01      	cmp	r3, #1
 8006342:	bf14      	ite	ne
 8006344:	2301      	movne	r3, #1
 8006346:	2300      	moveq	r3, #0
 8006348:	b2db      	uxtb	r3, r3
 800634a:	e03c      	b.n	80063c6 <HAL_TIM_PWM_Start+0x9e>
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	2b04      	cmp	r3, #4
 8006350:	d109      	bne.n	8006366 <HAL_TIM_PWM_Start+0x3e>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006358:	b2db      	uxtb	r3, r3
 800635a:	2b01      	cmp	r3, #1
 800635c:	bf14      	ite	ne
 800635e:	2301      	movne	r3, #1
 8006360:	2300      	moveq	r3, #0
 8006362:	b2db      	uxtb	r3, r3
 8006364:	e02f      	b.n	80063c6 <HAL_TIM_PWM_Start+0x9e>
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	2b08      	cmp	r3, #8
 800636a:	d109      	bne.n	8006380 <HAL_TIM_PWM_Start+0x58>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006372:	b2db      	uxtb	r3, r3
 8006374:	2b01      	cmp	r3, #1
 8006376:	bf14      	ite	ne
 8006378:	2301      	movne	r3, #1
 800637a:	2300      	moveq	r3, #0
 800637c:	b2db      	uxtb	r3, r3
 800637e:	e022      	b.n	80063c6 <HAL_TIM_PWM_Start+0x9e>
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	2b0c      	cmp	r3, #12
 8006384:	d109      	bne.n	800639a <HAL_TIM_PWM_Start+0x72>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b01      	cmp	r3, #1
 8006390:	bf14      	ite	ne
 8006392:	2301      	movne	r3, #1
 8006394:	2300      	moveq	r3, #0
 8006396:	b2db      	uxtb	r3, r3
 8006398:	e015      	b.n	80063c6 <HAL_TIM_PWM_Start+0x9e>
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	2b10      	cmp	r3, #16
 800639e:	d109      	bne.n	80063b4 <HAL_TIM_PWM_Start+0x8c>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063a6:	b2db      	uxtb	r3, r3
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	bf14      	ite	ne
 80063ac:	2301      	movne	r3, #1
 80063ae:	2300      	moveq	r3, #0
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	e008      	b.n	80063c6 <HAL_TIM_PWM_Start+0x9e>
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80063ba:	b2db      	uxtb	r3, r3
 80063bc:	2b01      	cmp	r3, #1
 80063be:	bf14      	ite	ne
 80063c0:	2301      	movne	r3, #1
 80063c2:	2300      	moveq	r3, #0
 80063c4:	b2db      	uxtb	r3, r3
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d001      	beq.n	80063ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e09c      	b.n	8006508 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d104      	bne.n	80063de <HAL_TIM_PWM_Start+0xb6>
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2202      	movs	r2, #2
 80063d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063dc:	e023      	b.n	8006426 <HAL_TIM_PWM_Start+0xfe>
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b04      	cmp	r3, #4
 80063e2:	d104      	bne.n	80063ee <HAL_TIM_PWM_Start+0xc6>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2202      	movs	r2, #2
 80063e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063ec:	e01b      	b.n	8006426 <HAL_TIM_PWM_Start+0xfe>
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	2b08      	cmp	r3, #8
 80063f2:	d104      	bne.n	80063fe <HAL_TIM_PWM_Start+0xd6>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2202      	movs	r2, #2
 80063f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063fc:	e013      	b.n	8006426 <HAL_TIM_PWM_Start+0xfe>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	2b0c      	cmp	r3, #12
 8006402:	d104      	bne.n	800640e <HAL_TIM_PWM_Start+0xe6>
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2202      	movs	r2, #2
 8006408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800640c:	e00b      	b.n	8006426 <HAL_TIM_PWM_Start+0xfe>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	2b10      	cmp	r3, #16
 8006412:	d104      	bne.n	800641e <HAL_TIM_PWM_Start+0xf6>
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2202      	movs	r2, #2
 8006418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800641c:	e003      	b.n	8006426 <HAL_TIM_PWM_Start+0xfe>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2202      	movs	r2, #2
 8006422:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	2201      	movs	r2, #1
 800642c:	6839      	ldr	r1, [r7, #0]
 800642e:	4618      	mov	r0, r3
 8006430:	f000 ffb0 	bl	8007394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a35      	ldr	r2, [pc, #212]	; (8006510 <HAL_TIM_PWM_Start+0x1e8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d013      	beq.n	8006466 <HAL_TIM_PWM_Start+0x13e>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a34      	ldr	r2, [pc, #208]	; (8006514 <HAL_TIM_PWM_Start+0x1ec>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d00e      	beq.n	8006466 <HAL_TIM_PWM_Start+0x13e>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a32      	ldr	r2, [pc, #200]	; (8006518 <HAL_TIM_PWM_Start+0x1f0>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d009      	beq.n	8006466 <HAL_TIM_PWM_Start+0x13e>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a31      	ldr	r2, [pc, #196]	; (800651c <HAL_TIM_PWM_Start+0x1f4>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d004      	beq.n	8006466 <HAL_TIM_PWM_Start+0x13e>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a2f      	ldr	r2, [pc, #188]	; (8006520 <HAL_TIM_PWM_Start+0x1f8>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d101      	bne.n	800646a <HAL_TIM_PWM_Start+0x142>
 8006466:	2301      	movs	r3, #1
 8006468:	e000      	b.n	800646c <HAL_TIM_PWM_Start+0x144>
 800646a:	2300      	movs	r3, #0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d007      	beq.n	8006480 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800647e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a22      	ldr	r2, [pc, #136]	; (8006510 <HAL_TIM_PWM_Start+0x1e8>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d01d      	beq.n	80064c6 <HAL_TIM_PWM_Start+0x19e>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006492:	d018      	beq.n	80064c6 <HAL_TIM_PWM_Start+0x19e>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a22      	ldr	r2, [pc, #136]	; (8006524 <HAL_TIM_PWM_Start+0x1fc>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d013      	beq.n	80064c6 <HAL_TIM_PWM_Start+0x19e>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a21      	ldr	r2, [pc, #132]	; (8006528 <HAL_TIM_PWM_Start+0x200>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d00e      	beq.n	80064c6 <HAL_TIM_PWM_Start+0x19e>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a1f      	ldr	r2, [pc, #124]	; (800652c <HAL_TIM_PWM_Start+0x204>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d009      	beq.n	80064c6 <HAL_TIM_PWM_Start+0x19e>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a17      	ldr	r2, [pc, #92]	; (8006514 <HAL_TIM_PWM_Start+0x1ec>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d004      	beq.n	80064c6 <HAL_TIM_PWM_Start+0x19e>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a15      	ldr	r2, [pc, #84]	; (8006518 <HAL_TIM_PWM_Start+0x1f0>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d115      	bne.n	80064f2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	689a      	ldr	r2, [r3, #8]
 80064cc:	4b18      	ldr	r3, [pc, #96]	; (8006530 <HAL_TIM_PWM_Start+0x208>)
 80064ce:	4013      	ands	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2b06      	cmp	r3, #6
 80064d6:	d015      	beq.n	8006504 <HAL_TIM_PWM_Start+0x1dc>
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064de:	d011      	beq.n	8006504 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f042 0201 	orr.w	r2, r2, #1
 80064ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064f0:	e008      	b.n	8006504 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f042 0201 	orr.w	r2, r2, #1
 8006500:	601a      	str	r2, [r3, #0]
 8006502:	e000      	b.n	8006506 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006504:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3710      	adds	r7, #16
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}
 8006510:	40012c00 	.word	0x40012c00
 8006514:	40013400 	.word	0x40013400
 8006518:	40014000 	.word	0x40014000
 800651c:	40014400 	.word	0x40014400
 8006520:	40014800 	.word	0x40014800
 8006524:	40000400 	.word	0x40000400
 8006528:	40000800 	.word	0x40000800
 800652c:	40000c00 	.word	0x40000c00
 8006530:	00010007 	.word	0x00010007

08006534 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	f003 0302 	and.w	r3, r3, #2
 8006546:	2b02      	cmp	r3, #2
 8006548:	d122      	bne.n	8006590 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	f003 0302 	and.w	r3, r3, #2
 8006554:	2b02      	cmp	r3, #2
 8006556:	d11b      	bne.n	8006590 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f06f 0202 	mvn.w	r2, #2
 8006560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2201      	movs	r2, #1
 8006566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	f003 0303 	and.w	r3, r3, #3
 8006572:	2b00      	cmp	r3, #0
 8006574:	d003      	beq.n	800657e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fae3 	bl	8006b42 <HAL_TIM_IC_CaptureCallback>
 800657c:	e005      	b.n	800658a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f000 fad5 	bl	8006b2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f000 fae6 	bl	8006b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	f003 0304 	and.w	r3, r3, #4
 800659a:	2b04      	cmp	r3, #4
 800659c:	d122      	bne.n	80065e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f003 0304 	and.w	r3, r3, #4
 80065a8:	2b04      	cmp	r3, #4
 80065aa:	d11b      	bne.n	80065e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f06f 0204 	mvn.w	r2, #4
 80065b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2202      	movs	r2, #2
 80065ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d003      	beq.n	80065d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 fab9 	bl	8006b42 <HAL_TIM_IC_CaptureCallback>
 80065d0:	e005      	b.n	80065de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 faab 	bl	8006b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	f000 fabc 	bl	8006b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	f003 0308 	and.w	r3, r3, #8
 80065ee:	2b08      	cmp	r3, #8
 80065f0:	d122      	bne.n	8006638 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	f003 0308 	and.w	r3, r3, #8
 80065fc:	2b08      	cmp	r3, #8
 80065fe:	d11b      	bne.n	8006638 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f06f 0208 	mvn.w	r2, #8
 8006608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2204      	movs	r2, #4
 800660e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	69db      	ldr	r3, [r3, #28]
 8006616:	f003 0303 	and.w	r3, r3, #3
 800661a:	2b00      	cmp	r3, #0
 800661c:	d003      	beq.n	8006626 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 fa8f 	bl	8006b42 <HAL_TIM_IC_CaptureCallback>
 8006624:	e005      	b.n	8006632 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fa81 	bl	8006b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fa92 	bl	8006b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	691b      	ldr	r3, [r3, #16]
 800663e:	f003 0310 	and.w	r3, r3, #16
 8006642:	2b10      	cmp	r3, #16
 8006644:	d122      	bne.n	800668c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	f003 0310 	and.w	r3, r3, #16
 8006650:	2b10      	cmp	r3, #16
 8006652:	d11b      	bne.n	800668c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f06f 0210 	mvn.w	r2, #16
 800665c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2208      	movs	r2, #8
 8006662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800666e:	2b00      	cmp	r3, #0
 8006670:	d003      	beq.n	800667a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 fa65 	bl	8006b42 <HAL_TIM_IC_CaptureCallback>
 8006678:	e005      	b.n	8006686 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 fa57 	bl	8006b2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fa68 	bl	8006b56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	691b      	ldr	r3, [r3, #16]
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	2b01      	cmp	r3, #1
 8006698:	d10e      	bne.n	80066b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68db      	ldr	r3, [r3, #12]
 80066a0:	f003 0301 	and.w	r3, r3, #1
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d107      	bne.n	80066b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f06f 0201 	mvn.w	r2, #1
 80066b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7fb f82a 	bl	800170c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	691b      	ldr	r3, [r3, #16]
 80066be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c2:	2b80      	cmp	r3, #128	; 0x80
 80066c4:	d10e      	bne.n	80066e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066d0:	2b80      	cmp	r3, #128	; 0x80
 80066d2:	d107      	bne.n	80066e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80066dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f000 ff10 	bl	8007504 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066f2:	d10e      	bne.n	8006712 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066fe:	2b80      	cmp	r3, #128	; 0x80
 8006700:	d107      	bne.n	8006712 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800670a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	f000 ff03 	bl	8007518 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	691b      	ldr	r3, [r3, #16]
 8006718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800671c:	2b40      	cmp	r3, #64	; 0x40
 800671e:	d10e      	bne.n	800673e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68db      	ldr	r3, [r3, #12]
 8006726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672a:	2b40      	cmp	r3, #64	; 0x40
 800672c:	d107      	bne.n	800673e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006736:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f000 fa16 	bl	8006b6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	f003 0320 	and.w	r3, r3, #32
 8006748:	2b20      	cmp	r3, #32
 800674a:	d10e      	bne.n	800676a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68db      	ldr	r3, [r3, #12]
 8006752:	f003 0320 	and.w	r3, r3, #32
 8006756:	2b20      	cmp	r3, #32
 8006758:	d107      	bne.n	800676a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f06f 0220 	mvn.w	r2, #32
 8006762:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fec3 	bl	80074f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800676a:	bf00      	nop
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
	...

08006774 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b086      	sub	sp, #24
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006780:	2300      	movs	r3, #0
 8006782:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800678a:	2b01      	cmp	r3, #1
 800678c:	d101      	bne.n	8006792 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800678e:	2302      	movs	r3, #2
 8006790:	e0ff      	b.n	8006992 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2201      	movs	r2, #1
 8006796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2b14      	cmp	r3, #20
 800679e:	f200 80f0 	bhi.w	8006982 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80067a2:	a201      	add	r2, pc, #4	; (adr r2, 80067a8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80067a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067a8:	080067fd 	.word	0x080067fd
 80067ac:	08006983 	.word	0x08006983
 80067b0:	08006983 	.word	0x08006983
 80067b4:	08006983 	.word	0x08006983
 80067b8:	0800683d 	.word	0x0800683d
 80067bc:	08006983 	.word	0x08006983
 80067c0:	08006983 	.word	0x08006983
 80067c4:	08006983 	.word	0x08006983
 80067c8:	0800687f 	.word	0x0800687f
 80067cc:	08006983 	.word	0x08006983
 80067d0:	08006983 	.word	0x08006983
 80067d4:	08006983 	.word	0x08006983
 80067d8:	080068bf 	.word	0x080068bf
 80067dc:	08006983 	.word	0x08006983
 80067e0:	08006983 	.word	0x08006983
 80067e4:	08006983 	.word	0x08006983
 80067e8:	08006901 	.word	0x08006901
 80067ec:	08006983 	.word	0x08006983
 80067f0:	08006983 	.word	0x08006983
 80067f4:	08006983 	.word	0x08006983
 80067f8:	08006941 	.word	0x08006941
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68b9      	ldr	r1, [r7, #8]
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fa56 	bl	8006cb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	699a      	ldr	r2, [r3, #24]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f042 0208 	orr.w	r2, r2, #8
 8006816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	699a      	ldr	r2, [r3, #24]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f022 0204 	bic.w	r2, r2, #4
 8006826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	6999      	ldr	r1, [r3, #24]
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	691a      	ldr	r2, [r3, #16]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	430a      	orrs	r2, r1
 8006838:	619a      	str	r2, [r3, #24]
      break;
 800683a:	e0a5      	b.n	8006988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	68b9      	ldr	r1, [r7, #8]
 8006842:	4618      	mov	r0, r3
 8006844:	f000 fac6 	bl	8006dd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	699a      	ldr	r2, [r3, #24]
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006856:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	699a      	ldr	r2, [r3, #24]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006866:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	6999      	ldr	r1, [r3, #24]
 800686e:	68bb      	ldr	r3, [r7, #8]
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	021a      	lsls	r2, r3, #8
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	430a      	orrs	r2, r1
 800687a:	619a      	str	r2, [r3, #24]
      break;
 800687c:	e084      	b.n	8006988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	68b9      	ldr	r1, [r7, #8]
 8006884:	4618      	mov	r0, r3
 8006886:	f000 fb2f 	bl	8006ee8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	69da      	ldr	r2, [r3, #28]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f042 0208 	orr.w	r2, r2, #8
 8006898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	69da      	ldr	r2, [r3, #28]
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f022 0204 	bic.w	r2, r2, #4
 80068a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69d9      	ldr	r1, [r3, #28]
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	691a      	ldr	r2, [r3, #16]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	430a      	orrs	r2, r1
 80068ba:	61da      	str	r2, [r3, #28]
      break;
 80068bc:	e064      	b.n	8006988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	68b9      	ldr	r1, [r7, #8]
 80068c4:	4618      	mov	r0, r3
 80068c6:	f000 fb97 	bl	8006ff8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69da      	ldr	r2, [r3, #28]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	69da      	ldr	r2, [r3, #28]
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69d9      	ldr	r1, [r3, #28]
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	021a      	lsls	r2, r3, #8
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	430a      	orrs	r2, r1
 80068fc:	61da      	str	r2, [r3, #28]
      break;
 80068fe:	e043      	b.n	8006988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68b9      	ldr	r1, [r7, #8]
 8006906:	4618      	mov	r0, r3
 8006908:	f000 fbe0 	bl	80070cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f042 0208 	orr.w	r2, r2, #8
 800691a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f022 0204 	bic.w	r2, r2, #4
 800692a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006932:	68bb      	ldr	r3, [r7, #8]
 8006934:	691a      	ldr	r2, [r3, #16]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	430a      	orrs	r2, r1
 800693c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800693e:	e023      	b.n	8006988 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	68b9      	ldr	r1, [r7, #8]
 8006946:	4618      	mov	r0, r3
 8006948:	f000 fc24 	bl	8007194 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800695a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800696a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	021a      	lsls	r2, r3, #8
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	430a      	orrs	r2, r1
 800697e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006980:	e002      	b.n	8006988 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006982:	2301      	movs	r3, #1
 8006984:	75fb      	strb	r3, [r7, #23]
      break;
 8006986:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2200      	movs	r2, #0
 800698c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006990:	7dfb      	ldrb	r3, [r7, #23]
}
 8006992:	4618      	mov	r0, r3
 8006994:	3718      	adds	r7, #24
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}
 800699a:	bf00      	nop

0800699c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b084      	sub	sp, #16
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d101      	bne.n	80069b8 <HAL_TIM_ConfigClockSource+0x1c>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e0b6      	b.n	8006b26 <HAL_TIM_ConfigClockSource+0x18a>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2202      	movs	r2, #2
 80069c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80069da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069dc:	68bb      	ldr	r3, [r7, #8]
 80069de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68ba      	ldr	r2, [r7, #8]
 80069ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069f4:	d03e      	beq.n	8006a74 <HAL_TIM_ConfigClockSource+0xd8>
 80069f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069fa:	f200 8087 	bhi.w	8006b0c <HAL_TIM_ConfigClockSource+0x170>
 80069fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a02:	f000 8086 	beq.w	8006b12 <HAL_TIM_ConfigClockSource+0x176>
 8006a06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a0a:	d87f      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x170>
 8006a0c:	2b70      	cmp	r3, #112	; 0x70
 8006a0e:	d01a      	beq.n	8006a46 <HAL_TIM_ConfigClockSource+0xaa>
 8006a10:	2b70      	cmp	r3, #112	; 0x70
 8006a12:	d87b      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x170>
 8006a14:	2b60      	cmp	r3, #96	; 0x60
 8006a16:	d050      	beq.n	8006aba <HAL_TIM_ConfigClockSource+0x11e>
 8006a18:	2b60      	cmp	r3, #96	; 0x60
 8006a1a:	d877      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x170>
 8006a1c:	2b50      	cmp	r3, #80	; 0x50
 8006a1e:	d03c      	beq.n	8006a9a <HAL_TIM_ConfigClockSource+0xfe>
 8006a20:	2b50      	cmp	r3, #80	; 0x50
 8006a22:	d873      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x170>
 8006a24:	2b40      	cmp	r3, #64	; 0x40
 8006a26:	d058      	beq.n	8006ada <HAL_TIM_ConfigClockSource+0x13e>
 8006a28:	2b40      	cmp	r3, #64	; 0x40
 8006a2a:	d86f      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x170>
 8006a2c:	2b30      	cmp	r3, #48	; 0x30
 8006a2e:	d064      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x15e>
 8006a30:	2b30      	cmp	r3, #48	; 0x30
 8006a32:	d86b      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x170>
 8006a34:	2b20      	cmp	r3, #32
 8006a36:	d060      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x15e>
 8006a38:	2b20      	cmp	r3, #32
 8006a3a:	d867      	bhi.n	8006b0c <HAL_TIM_ConfigClockSource+0x170>
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d05c      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x15e>
 8006a40:	2b10      	cmp	r3, #16
 8006a42:	d05a      	beq.n	8006afa <HAL_TIM_ConfigClockSource+0x15e>
 8006a44:	e062      	b.n	8006b0c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6818      	ldr	r0, [r3, #0]
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	6899      	ldr	r1, [r3, #8]
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	685a      	ldr	r2, [r3, #4]
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	68db      	ldr	r3, [r3, #12]
 8006a56:	f000 fc7d 	bl	8007354 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68ba      	ldr	r2, [r7, #8]
 8006a70:	609a      	str	r2, [r3, #8]
      break;
 8006a72:	e04f      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	6818      	ldr	r0, [r3, #0]
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	6899      	ldr	r1, [r3, #8]
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	685a      	ldr	r2, [r3, #4]
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	f000 fc66 	bl	8007354 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	689a      	ldr	r2, [r3, #8]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a96:	609a      	str	r2, [r3, #8]
      break;
 8006a98:	e03c      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6818      	ldr	r0, [r3, #0]
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	6859      	ldr	r1, [r3, #4]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f000 fbda 	bl	8007260 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2150      	movs	r1, #80	; 0x50
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fc33 	bl	800731e <TIM_ITRx_SetConfig>
      break;
 8006ab8:	e02c      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6818      	ldr	r0, [r3, #0]
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	6859      	ldr	r1, [r3, #4]
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	68db      	ldr	r3, [r3, #12]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f000 fbf9 	bl	80072be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2160      	movs	r1, #96	; 0x60
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f000 fc23 	bl	800731e <TIM_ITRx_SetConfig>
      break;
 8006ad8:	e01c      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6818      	ldr	r0, [r3, #0]
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	6859      	ldr	r1, [r3, #4]
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	f000 fbba 	bl	8007260 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2140      	movs	r1, #64	; 0x40
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fc13 	bl	800731e <TIM_ITRx_SetConfig>
      break;
 8006af8:	e00c      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681a      	ldr	r2, [r3, #0]
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4619      	mov	r1, r3
 8006b04:	4610      	mov	r0, r2
 8006b06:	f000 fc0a 	bl	800731e <TIM_ITRx_SetConfig>
      break;
 8006b0a:	e003      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b10:	e000      	b.n	8006b14 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006b12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2201      	movs	r2, #1
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	3710      	adds	r7, #16
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bd80      	pop	{r7, pc}

08006b2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b2e:	b480      	push	{r7}
 8006b30:	b083      	sub	sp, #12
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b36:	bf00      	nop
 8006b38:	370c      	adds	r7, #12
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr

08006b42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b4a:	bf00      	nop
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b083      	sub	sp, #12
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b5e:	bf00      	nop
 8006b60:	370c      	adds	r7, #12
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr

08006b6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b6a:	b480      	push	{r7}
 8006b6c:	b083      	sub	sp, #12
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b72:	bf00      	nop
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
	...

08006b80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a40      	ldr	r2, [pc, #256]	; (8006c94 <TIM_Base_SetConfig+0x114>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d013      	beq.n	8006bc0 <TIM_Base_SetConfig+0x40>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b9e:	d00f      	beq.n	8006bc0 <TIM_Base_SetConfig+0x40>
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	4a3d      	ldr	r2, [pc, #244]	; (8006c98 <TIM_Base_SetConfig+0x118>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d00b      	beq.n	8006bc0 <TIM_Base_SetConfig+0x40>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a3c      	ldr	r2, [pc, #240]	; (8006c9c <TIM_Base_SetConfig+0x11c>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d007      	beq.n	8006bc0 <TIM_Base_SetConfig+0x40>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a3b      	ldr	r2, [pc, #236]	; (8006ca0 <TIM_Base_SetConfig+0x120>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d003      	beq.n	8006bc0 <TIM_Base_SetConfig+0x40>
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a3a      	ldr	r2, [pc, #232]	; (8006ca4 <TIM_Base_SetConfig+0x124>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d108      	bne.n	8006bd2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	68fa      	ldr	r2, [r7, #12]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	4a2f      	ldr	r2, [pc, #188]	; (8006c94 <TIM_Base_SetConfig+0x114>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d01f      	beq.n	8006c1a <TIM_Base_SetConfig+0x9a>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006be0:	d01b      	beq.n	8006c1a <TIM_Base_SetConfig+0x9a>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	4a2c      	ldr	r2, [pc, #176]	; (8006c98 <TIM_Base_SetConfig+0x118>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d017      	beq.n	8006c1a <TIM_Base_SetConfig+0x9a>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a2b      	ldr	r2, [pc, #172]	; (8006c9c <TIM_Base_SetConfig+0x11c>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d013      	beq.n	8006c1a <TIM_Base_SetConfig+0x9a>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	4a2a      	ldr	r2, [pc, #168]	; (8006ca0 <TIM_Base_SetConfig+0x120>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d00f      	beq.n	8006c1a <TIM_Base_SetConfig+0x9a>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a29      	ldr	r2, [pc, #164]	; (8006ca4 <TIM_Base_SetConfig+0x124>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d00b      	beq.n	8006c1a <TIM_Base_SetConfig+0x9a>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a28      	ldr	r2, [pc, #160]	; (8006ca8 <TIM_Base_SetConfig+0x128>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d007      	beq.n	8006c1a <TIM_Base_SetConfig+0x9a>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a27      	ldr	r2, [pc, #156]	; (8006cac <TIM_Base_SetConfig+0x12c>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d003      	beq.n	8006c1a <TIM_Base_SetConfig+0x9a>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a26      	ldr	r2, [pc, #152]	; (8006cb0 <TIM_Base_SetConfig+0x130>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d108      	bne.n	8006c2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	68fa      	ldr	r2, [r7, #12]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	695b      	ldr	r3, [r3, #20]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	689a      	ldr	r2, [r3, #8]
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	4a10      	ldr	r2, [pc, #64]	; (8006c94 <TIM_Base_SetConfig+0x114>)
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d00f      	beq.n	8006c78 <TIM_Base_SetConfig+0xf8>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	4a12      	ldr	r2, [pc, #72]	; (8006ca4 <TIM_Base_SetConfig+0x124>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d00b      	beq.n	8006c78 <TIM_Base_SetConfig+0xf8>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	4a11      	ldr	r2, [pc, #68]	; (8006ca8 <TIM_Base_SetConfig+0x128>)
 8006c64:	4293      	cmp	r3, r2
 8006c66:	d007      	beq.n	8006c78 <TIM_Base_SetConfig+0xf8>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	4a10      	ldr	r2, [pc, #64]	; (8006cac <TIM_Base_SetConfig+0x12c>)
 8006c6c:	4293      	cmp	r3, r2
 8006c6e:	d003      	beq.n	8006c78 <TIM_Base_SetConfig+0xf8>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a0f      	ldr	r2, [pc, #60]	; (8006cb0 <TIM_Base_SetConfig+0x130>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d103      	bne.n	8006c80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	691a      	ldr	r2, [r3, #16]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2201      	movs	r2, #1
 8006c84:	615a      	str	r2, [r3, #20]
}
 8006c86:	bf00      	nop
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr
 8006c92:	bf00      	nop
 8006c94:	40012c00 	.word	0x40012c00
 8006c98:	40000400 	.word	0x40000400
 8006c9c:	40000800 	.word	0x40000800
 8006ca0:	40000c00 	.word	0x40000c00
 8006ca4:	40013400 	.word	0x40013400
 8006ca8:	40014000 	.word	0x40014000
 8006cac:	40014400 	.word	0x40014400
 8006cb0:	40014800 	.word	0x40014800

08006cb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b087      	sub	sp, #28
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
 8006cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6a1b      	ldr	r3, [r3, #32]
 8006cc2:	f023 0201 	bic.w	r2, r3, #1
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	699b      	ldr	r3, [r3, #24]
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ce6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f023 0303 	bic.w	r3, r3, #3
 8006cee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006cfa:	697b      	ldr	r3, [r7, #20]
 8006cfc:	f023 0302 	bic.w	r3, r3, #2
 8006d00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	697a      	ldr	r2, [r7, #20]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	4a2c      	ldr	r2, [pc, #176]	; (8006dc0 <TIM_OC1_SetConfig+0x10c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d00f      	beq.n	8006d34 <TIM_OC1_SetConfig+0x80>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a2b      	ldr	r2, [pc, #172]	; (8006dc4 <TIM_OC1_SetConfig+0x110>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d00b      	beq.n	8006d34 <TIM_OC1_SetConfig+0x80>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a2a      	ldr	r2, [pc, #168]	; (8006dc8 <TIM_OC1_SetConfig+0x114>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d007      	beq.n	8006d34 <TIM_OC1_SetConfig+0x80>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a29      	ldr	r2, [pc, #164]	; (8006dcc <TIM_OC1_SetConfig+0x118>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d003      	beq.n	8006d34 <TIM_OC1_SetConfig+0x80>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a28      	ldr	r2, [pc, #160]	; (8006dd0 <TIM_OC1_SetConfig+0x11c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d10c      	bne.n	8006d4e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f023 0308 	bic.w	r3, r3, #8
 8006d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	697a      	ldr	r2, [r7, #20]
 8006d42:	4313      	orrs	r3, r2
 8006d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f023 0304 	bic.w	r3, r3, #4
 8006d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	4a1b      	ldr	r2, [pc, #108]	; (8006dc0 <TIM_OC1_SetConfig+0x10c>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d00f      	beq.n	8006d76 <TIM_OC1_SetConfig+0xc2>
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a1a      	ldr	r2, [pc, #104]	; (8006dc4 <TIM_OC1_SetConfig+0x110>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d00b      	beq.n	8006d76 <TIM_OC1_SetConfig+0xc2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	4a19      	ldr	r2, [pc, #100]	; (8006dc8 <TIM_OC1_SetConfig+0x114>)
 8006d62:	4293      	cmp	r3, r2
 8006d64:	d007      	beq.n	8006d76 <TIM_OC1_SetConfig+0xc2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a18      	ldr	r2, [pc, #96]	; (8006dcc <TIM_OC1_SetConfig+0x118>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d003      	beq.n	8006d76 <TIM_OC1_SetConfig+0xc2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a17      	ldr	r2, [pc, #92]	; (8006dd0 <TIM_OC1_SetConfig+0x11c>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d111      	bne.n	8006d9a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	621a      	str	r2, [r3, #32]
}
 8006db4:	bf00      	nop
 8006db6:	371c      	adds	r7, #28
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	40012c00 	.word	0x40012c00
 8006dc4:	40013400 	.word	0x40013400
 8006dc8:	40014000 	.word	0x40014000
 8006dcc:	40014400 	.word	0x40014400
 8006dd0:	40014800 	.word	0x40014800

08006dd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6a1b      	ldr	r3, [r3, #32]
 8006de2:	f023 0210 	bic.w	r2, r3, #16
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	6a1b      	ldr	r3, [r3, #32]
 8006dee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	685b      	ldr	r3, [r3, #4]
 8006df4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	699b      	ldr	r3, [r3, #24]
 8006dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	021b      	lsls	r3, r3, #8
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	f023 0320 	bic.w	r3, r3, #32
 8006e22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	011b      	lsls	r3, r3, #4
 8006e2a:	697a      	ldr	r2, [r7, #20]
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	4a28      	ldr	r2, [pc, #160]	; (8006ed4 <TIM_OC2_SetConfig+0x100>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d003      	beq.n	8006e40 <TIM_OC2_SetConfig+0x6c>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	4a27      	ldr	r2, [pc, #156]	; (8006ed8 <TIM_OC2_SetConfig+0x104>)
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d10d      	bne.n	8006e5c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e40:	697b      	ldr	r3, [r7, #20]
 8006e42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	011b      	lsls	r3, r3, #4
 8006e4e:	697a      	ldr	r2, [r7, #20]
 8006e50:	4313      	orrs	r3, r2
 8006e52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e54:	697b      	ldr	r3, [r7, #20]
 8006e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e5a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a1d      	ldr	r2, [pc, #116]	; (8006ed4 <TIM_OC2_SetConfig+0x100>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d00f      	beq.n	8006e84 <TIM_OC2_SetConfig+0xb0>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a1c      	ldr	r2, [pc, #112]	; (8006ed8 <TIM_OC2_SetConfig+0x104>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d00b      	beq.n	8006e84 <TIM_OC2_SetConfig+0xb0>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a1b      	ldr	r2, [pc, #108]	; (8006edc <TIM_OC2_SetConfig+0x108>)
 8006e70:	4293      	cmp	r3, r2
 8006e72:	d007      	beq.n	8006e84 <TIM_OC2_SetConfig+0xb0>
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a1a      	ldr	r2, [pc, #104]	; (8006ee0 <TIM_OC2_SetConfig+0x10c>)
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	d003      	beq.n	8006e84 <TIM_OC2_SetConfig+0xb0>
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a19      	ldr	r2, [pc, #100]	; (8006ee4 <TIM_OC2_SetConfig+0x110>)
 8006e80:	4293      	cmp	r3, r2
 8006e82:	d113      	bne.n	8006eac <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e84:	693b      	ldr	r3, [r7, #16]
 8006e86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	695b      	ldr	r3, [r3, #20]
 8006e98:	009b      	lsls	r3, r3, #2
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	699b      	ldr	r3, [r3, #24]
 8006ea4:	009b      	lsls	r3, r3, #2
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	693a      	ldr	r2, [r7, #16]
 8006eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	685a      	ldr	r2, [r3, #4]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	697a      	ldr	r2, [r7, #20]
 8006ec4:	621a      	str	r2, [r3, #32]
}
 8006ec6:	bf00      	nop
 8006ec8:	371c      	adds	r7, #28
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop
 8006ed4:	40012c00 	.word	0x40012c00
 8006ed8:	40013400 	.word	0x40013400
 8006edc:	40014000 	.word	0x40014000
 8006ee0:	40014400 	.word	0x40014400
 8006ee4:	40014800 	.word	0x40014800

08006ee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b087      	sub	sp, #28
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a1b      	ldr	r3, [r3, #32]
 8006ef6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	69db      	ldr	r3, [r3, #28]
 8006f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f023 0303 	bic.w	r3, r3, #3
 8006f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	021b      	lsls	r3, r3, #8
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	4a27      	ldr	r2, [pc, #156]	; (8006fe4 <TIM_OC3_SetConfig+0xfc>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d003      	beq.n	8006f52 <TIM_OC3_SetConfig+0x6a>
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a26      	ldr	r2, [pc, #152]	; (8006fe8 <TIM_OC3_SetConfig+0x100>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d10d      	bne.n	8006f6e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	021b      	lsls	r3, r3, #8
 8006f60:	697a      	ldr	r2, [r7, #20]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f66:	697b      	ldr	r3, [r7, #20]
 8006f68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	4a1c      	ldr	r2, [pc, #112]	; (8006fe4 <TIM_OC3_SetConfig+0xfc>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d00f      	beq.n	8006f96 <TIM_OC3_SetConfig+0xae>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	4a1b      	ldr	r2, [pc, #108]	; (8006fe8 <TIM_OC3_SetConfig+0x100>)
 8006f7a:	4293      	cmp	r3, r2
 8006f7c:	d00b      	beq.n	8006f96 <TIM_OC3_SetConfig+0xae>
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	4a1a      	ldr	r2, [pc, #104]	; (8006fec <TIM_OC3_SetConfig+0x104>)
 8006f82:	4293      	cmp	r3, r2
 8006f84:	d007      	beq.n	8006f96 <TIM_OC3_SetConfig+0xae>
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4a19      	ldr	r2, [pc, #100]	; (8006ff0 <TIM_OC3_SetConfig+0x108>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d003      	beq.n	8006f96 <TIM_OC3_SetConfig+0xae>
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	4a18      	ldr	r2, [pc, #96]	; (8006ff4 <TIM_OC3_SetConfig+0x10c>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d113      	bne.n	8006fbe <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	011b      	lsls	r3, r3, #4
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	699b      	ldr	r3, [r3, #24]
 8006fb6:	011b      	lsls	r3, r3, #4
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	693a      	ldr	r2, [r7, #16]
 8006fc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	68fa      	ldr	r2, [r7, #12]
 8006fc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	685a      	ldr	r2, [r3, #4]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	697a      	ldr	r2, [r7, #20]
 8006fd6:	621a      	str	r2, [r3, #32]
}
 8006fd8:	bf00      	nop
 8006fda:	371c      	adds	r7, #28
 8006fdc:	46bd      	mov	sp, r7
 8006fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe2:	4770      	bx	lr
 8006fe4:	40012c00 	.word	0x40012c00
 8006fe8:	40013400 	.word	0x40013400
 8006fec:	40014000 	.word	0x40014000
 8006ff0:	40014400 	.word	0x40014400
 8006ff4:	40014800 	.word	0x40014800

08006ff8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b087      	sub	sp, #28
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6a1b      	ldr	r3, [r3, #32]
 8007006:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6a1b      	ldr	r3, [r3, #32]
 8007012:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007026:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800702a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007032:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	021b      	lsls	r3, r3, #8
 800703a:	68fa      	ldr	r2, [r7, #12]
 800703c:	4313      	orrs	r3, r2
 800703e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007046:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	031b      	lsls	r3, r3, #12
 800704e:	693a      	ldr	r2, [r7, #16]
 8007050:	4313      	orrs	r3, r2
 8007052:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a18      	ldr	r2, [pc, #96]	; (80070b8 <TIM_OC4_SetConfig+0xc0>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d00f      	beq.n	800707c <TIM_OC4_SetConfig+0x84>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a17      	ldr	r2, [pc, #92]	; (80070bc <TIM_OC4_SetConfig+0xc4>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d00b      	beq.n	800707c <TIM_OC4_SetConfig+0x84>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a16      	ldr	r2, [pc, #88]	; (80070c0 <TIM_OC4_SetConfig+0xc8>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d007      	beq.n	800707c <TIM_OC4_SetConfig+0x84>
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	4a15      	ldr	r2, [pc, #84]	; (80070c4 <TIM_OC4_SetConfig+0xcc>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d003      	beq.n	800707c <TIM_OC4_SetConfig+0x84>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	4a14      	ldr	r2, [pc, #80]	; (80070c8 <TIM_OC4_SetConfig+0xd0>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d109      	bne.n	8007090 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007082:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	695b      	ldr	r3, [r3, #20]
 8007088:	019b      	lsls	r3, r3, #6
 800708a:	697a      	ldr	r2, [r7, #20]
 800708c:	4313      	orrs	r3, r2
 800708e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	697a      	ldr	r2, [r7, #20]
 8007094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	693a      	ldr	r2, [r7, #16]
 80070a8:	621a      	str	r2, [r3, #32]
}
 80070aa:	bf00      	nop
 80070ac:	371c      	adds	r7, #28
 80070ae:	46bd      	mov	sp, r7
 80070b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	40012c00 	.word	0x40012c00
 80070bc:	40013400 	.word	0x40013400
 80070c0:	40014000 	.word	0x40014000
 80070c4:	40014400 	.word	0x40014400
 80070c8:	40014800 	.word	0x40014800

080070cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b087      	sub	sp, #28
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6a1b      	ldr	r3, [r3, #32]
 80070da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6a1b      	ldr	r3, [r3, #32]
 80070e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	685b      	ldr	r3, [r3, #4]
 80070ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	4313      	orrs	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007110:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	689b      	ldr	r3, [r3, #8]
 8007116:	041b      	lsls	r3, r3, #16
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	4313      	orrs	r3, r2
 800711c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	4a17      	ldr	r2, [pc, #92]	; (8007180 <TIM_OC5_SetConfig+0xb4>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d00f      	beq.n	8007146 <TIM_OC5_SetConfig+0x7a>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	4a16      	ldr	r2, [pc, #88]	; (8007184 <TIM_OC5_SetConfig+0xb8>)
 800712a:	4293      	cmp	r3, r2
 800712c:	d00b      	beq.n	8007146 <TIM_OC5_SetConfig+0x7a>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	4a15      	ldr	r2, [pc, #84]	; (8007188 <TIM_OC5_SetConfig+0xbc>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d007      	beq.n	8007146 <TIM_OC5_SetConfig+0x7a>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a14      	ldr	r2, [pc, #80]	; (800718c <TIM_OC5_SetConfig+0xc0>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d003      	beq.n	8007146 <TIM_OC5_SetConfig+0x7a>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	4a13      	ldr	r2, [pc, #76]	; (8007190 <TIM_OC5_SetConfig+0xc4>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d109      	bne.n	800715a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800714c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800714e:	683b      	ldr	r3, [r7, #0]
 8007150:	695b      	ldr	r3, [r3, #20]
 8007152:	021b      	lsls	r3, r3, #8
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	4313      	orrs	r3, r2
 8007158:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	697a      	ldr	r2, [r7, #20]
 800715e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	685a      	ldr	r2, [r3, #4]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	693a      	ldr	r2, [r7, #16]
 8007172:	621a      	str	r2, [r3, #32]
}
 8007174:	bf00      	nop
 8007176:	371c      	adds	r7, #28
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr
 8007180:	40012c00 	.word	0x40012c00
 8007184:	40013400 	.word	0x40013400
 8007188:	40014000 	.word	0x40014000
 800718c:	40014400 	.word	0x40014400
 8007190:	40014800 	.word	0x40014800

08007194 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007194:	b480      	push	{r7}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6a1b      	ldr	r3, [r3, #32]
 80071a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	685b      	ldr	r3, [r3, #4]
 80071b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	021b      	lsls	r3, r3, #8
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	4313      	orrs	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80071da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	051b      	lsls	r3, r3, #20
 80071e2:	693a      	ldr	r2, [r7, #16]
 80071e4:	4313      	orrs	r3, r2
 80071e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a18      	ldr	r2, [pc, #96]	; (800724c <TIM_OC6_SetConfig+0xb8>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d00f      	beq.n	8007210 <TIM_OC6_SetConfig+0x7c>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	4a17      	ldr	r2, [pc, #92]	; (8007250 <TIM_OC6_SetConfig+0xbc>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d00b      	beq.n	8007210 <TIM_OC6_SetConfig+0x7c>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	4a16      	ldr	r2, [pc, #88]	; (8007254 <TIM_OC6_SetConfig+0xc0>)
 80071fc:	4293      	cmp	r3, r2
 80071fe:	d007      	beq.n	8007210 <TIM_OC6_SetConfig+0x7c>
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a15      	ldr	r2, [pc, #84]	; (8007258 <TIM_OC6_SetConfig+0xc4>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d003      	beq.n	8007210 <TIM_OC6_SetConfig+0x7c>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a14      	ldr	r2, [pc, #80]	; (800725c <TIM_OC6_SetConfig+0xc8>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d109      	bne.n	8007224 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007216:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	695b      	ldr	r3, [r3, #20]
 800721c:	029b      	lsls	r3, r3, #10
 800721e:	697a      	ldr	r2, [r7, #20]
 8007220:	4313      	orrs	r3, r2
 8007222:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	685a      	ldr	r2, [r3, #4]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	693a      	ldr	r2, [r7, #16]
 800723c:	621a      	str	r2, [r3, #32]
}
 800723e:	bf00      	nop
 8007240:	371c      	adds	r7, #28
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr
 800724a:	bf00      	nop
 800724c:	40012c00 	.word	0x40012c00
 8007250:	40013400 	.word	0x40013400
 8007254:	40014000 	.word	0x40014000
 8007258:	40014400 	.word	0x40014400
 800725c:	40014800 	.word	0x40014800

08007260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007260:	b480      	push	{r7}
 8007262:	b087      	sub	sp, #28
 8007264:	af00      	add	r7, sp, #0
 8007266:	60f8      	str	r0, [r7, #12]
 8007268:	60b9      	str	r1, [r7, #8]
 800726a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6a1b      	ldr	r3, [r3, #32]
 8007270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6a1b      	ldr	r3, [r3, #32]
 8007276:	f023 0201 	bic.w	r2, r3, #1
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	699b      	ldr	r3, [r3, #24]
 8007282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800728a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	011b      	lsls	r3, r3, #4
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	4313      	orrs	r3, r2
 8007294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007296:	697b      	ldr	r3, [r7, #20]
 8007298:	f023 030a 	bic.w	r3, r3, #10
 800729c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	693a      	ldr	r2, [r7, #16]
 80072aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	697a      	ldr	r2, [r7, #20]
 80072b0:	621a      	str	r2, [r3, #32]
}
 80072b2:	bf00      	nop
 80072b4:	371c      	adds	r7, #28
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr

080072be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80072be:	b480      	push	{r7}
 80072c0:	b087      	sub	sp, #28
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	60f8      	str	r0, [r7, #12]
 80072c6:	60b9      	str	r1, [r7, #8]
 80072c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	6a1b      	ldr	r3, [r3, #32]
 80072ce:	f023 0210 	bic.w	r2, r3, #16
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	699b      	ldr	r3, [r3, #24]
 80072da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	6a1b      	ldr	r3, [r3, #32]
 80072e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80072e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	031b      	lsls	r3, r3, #12
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80072f4:	693b      	ldr	r3, [r7, #16]
 80072f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80072fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80072fc:	68bb      	ldr	r3, [r7, #8]
 80072fe:	011b      	lsls	r3, r3, #4
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	4313      	orrs	r3, r2
 8007304:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	697a      	ldr	r2, [r7, #20]
 800730a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	693a      	ldr	r2, [r7, #16]
 8007310:	621a      	str	r2, [r3, #32]
}
 8007312:	bf00      	nop
 8007314:	371c      	adds	r7, #28
 8007316:	46bd      	mov	sp, r7
 8007318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800731c:	4770      	bx	lr

0800731e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800731e:	b480      	push	{r7}
 8007320:	b085      	sub	sp, #20
 8007322:	af00      	add	r7, sp, #0
 8007324:	6078      	str	r0, [r7, #4]
 8007326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689b      	ldr	r3, [r3, #8]
 800732c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4313      	orrs	r3, r2
 800733c:	f043 0307 	orr.w	r3, r3, #7
 8007340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	68fa      	ldr	r2, [r7, #12]
 8007346:	609a      	str	r2, [r3, #8]
}
 8007348:	bf00      	nop
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007354:	b480      	push	{r7}
 8007356:	b087      	sub	sp, #28
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	689b      	ldr	r3, [r3, #8]
 8007366:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800736e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	021a      	lsls	r2, r3, #8
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	431a      	orrs	r2, r3
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	4313      	orrs	r3, r2
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	4313      	orrs	r3, r2
 8007380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	697a      	ldr	r2, [r7, #20]
 8007386:	609a      	str	r2, [r3, #8]
}
 8007388:	bf00      	nop
 800738a:	371c      	adds	r7, #28
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007394:	b480      	push	{r7}
 8007396:	b087      	sub	sp, #28
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f003 031f 	and.w	r3, r3, #31
 80073a6:	2201      	movs	r2, #1
 80073a8:	fa02 f303 	lsl.w	r3, r2, r3
 80073ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6a1a      	ldr	r2, [r3, #32]
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	43db      	mvns	r3, r3
 80073b6:	401a      	ands	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6a1a      	ldr	r2, [r3, #32]
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f003 031f 	and.w	r3, r3, #31
 80073c6:	6879      	ldr	r1, [r7, #4]
 80073c8:	fa01 f303 	lsl.w	r3, r1, r3
 80073cc:	431a      	orrs	r2, r3
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	621a      	str	r2, [r3, #32]
}
 80073d2:	bf00      	nop
 80073d4:	371c      	adds	r7, #28
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
	...

080073e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d101      	bne.n	80073f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073f4:	2302      	movs	r3, #2
 80073f6:	e068      	b.n	80074ca <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2202      	movs	r2, #2
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	685b      	ldr	r3, [r3, #4]
 800740e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	689b      	ldr	r3, [r3, #8]
 8007416:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a2e      	ldr	r2, [pc, #184]	; (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d004      	beq.n	800742c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a2d      	ldr	r2, [pc, #180]	; (80074dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d108      	bne.n	800743e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007432:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	68fa      	ldr	r2, [r7, #12]
 800743a:	4313      	orrs	r3, r2
 800743c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007444:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68fa      	ldr	r2, [r7, #12]
 800744c:	4313      	orrs	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	4a1e      	ldr	r2, [pc, #120]	; (80074d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800745e:	4293      	cmp	r3, r2
 8007460:	d01d      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800746a:	d018      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	4a1b      	ldr	r2, [pc, #108]	; (80074e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007472:	4293      	cmp	r3, r2
 8007474:	d013      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a1a      	ldr	r2, [pc, #104]	; (80074e4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d00e      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a18      	ldr	r2, [pc, #96]	; (80074e8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d009      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a13      	ldr	r2, [pc, #76]	; (80074dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d004      	beq.n	800749e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a14      	ldr	r2, [pc, #80]	; (80074ec <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d10c      	bne.n	80074b8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68ba      	ldr	r2, [r7, #8]
 80074b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2201      	movs	r2, #1
 80074bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3714      	adds	r7, #20
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	40012c00 	.word	0x40012c00
 80074dc:	40013400 	.word	0x40013400
 80074e0:	40000400 	.word	0x40000400
 80074e4:	40000800 	.word	0x40000800
 80074e8:	40000c00 	.word	0x40000c00
 80074ec:	40014000 	.word	0x40014000

080074f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b083      	sub	sp, #12
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80074f8:	bf00      	nop
 80074fa:	370c      	adds	r7, #12
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007518:	b480      	push	{r7}
 800751a:	b083      	sub	sp, #12
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007520:	bf00      	nop
 8007522:	370c      	adds	r7, #12
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr

0800752c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e040      	b.n	80075c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007542:	2b00      	cmp	r3, #0
 8007544:	d106      	bne.n	8007554 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800754e:	6878      	ldr	r0, [r7, #4]
 8007550:	f7fa fca2 	bl	8001e98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2224      	movs	r2, #36	; 0x24
 8007558:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681a      	ldr	r2, [r3, #0]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	f022 0201 	bic.w	r2, r2, #1
 8007568:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fc8a 	bl	8007e84 <UART_SetConfig>
 8007570:	4603      	mov	r3, r0
 8007572:	2b01      	cmp	r3, #1
 8007574:	d101      	bne.n	800757a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8007576:	2301      	movs	r3, #1
 8007578:	e022      	b.n	80075c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757e:	2b00      	cmp	r3, #0
 8007580:	d002      	beq.n	8007588 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 ff08 	bl	8008398 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	685a      	ldr	r2, [r3, #4]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007596:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	689a      	ldr	r2, [r3, #8]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f042 0201 	orr.w	r2, r2, #1
 80075b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 ff8f 	bl	80084dc <UART_CheckIdleState>
 80075be:	4603      	mov	r3, r0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3708      	adds	r7, #8
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b08a      	sub	sp, #40	; 0x28
 80075cc:	af02      	add	r7, sp, #8
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	603b      	str	r3, [r7, #0]
 80075d4:	4613      	mov	r3, r2
 80075d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80075dc:	2b20      	cmp	r3, #32
 80075de:	f040 8082 	bne.w	80076e6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d002      	beq.n	80075ee <HAL_UART_Transmit+0x26>
 80075e8:	88fb      	ldrh	r3, [r7, #6]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80075ee:	2301      	movs	r3, #1
 80075f0:	e07a      	b.n	80076e8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80075f8:	2b01      	cmp	r3, #1
 80075fa:	d101      	bne.n	8007600 <HAL_UART_Transmit+0x38>
 80075fc:	2302      	movs	r3, #2
 80075fe:	e073      	b.n	80076e8 <HAL_UART_Transmit+0x120>
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2201      	movs	r2, #1
 8007604:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2200      	movs	r2, #0
 800760c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2221      	movs	r2, #33	; 0x21
 8007614:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007616:	f7fa fd27 	bl	8002068 <HAL_GetTick>
 800761a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	88fa      	ldrh	r2, [r7, #6]
 8007620:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	88fa      	ldrh	r2, [r7, #6]
 8007628:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007634:	d108      	bne.n	8007648 <HAL_UART_Transmit+0x80>
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	691b      	ldr	r3, [r3, #16]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d104      	bne.n	8007648 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800763e:	2300      	movs	r3, #0
 8007640:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	61bb      	str	r3, [r7, #24]
 8007646:	e003      	b.n	8007650 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800764c:	2300      	movs	r3, #0
 800764e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007658:	e02d      	b.n	80076b6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	9300      	str	r3, [sp, #0]
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2200      	movs	r2, #0
 8007662:	2180      	movs	r1, #128	; 0x80
 8007664:	68f8      	ldr	r0, [r7, #12]
 8007666:	f000 ff82 	bl	800856e <UART_WaitOnFlagUntilTimeout>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d001      	beq.n	8007674 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007670:	2303      	movs	r3, #3
 8007672:	e039      	b.n	80076e8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8007674:	69fb      	ldr	r3, [r7, #28]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d10b      	bne.n	8007692 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800767a:	69bb      	ldr	r3, [r7, #24]
 800767c:	881a      	ldrh	r2, [r3, #0]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007686:	b292      	uxth	r2, r2
 8007688:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800768a:	69bb      	ldr	r3, [r7, #24]
 800768c:	3302      	adds	r3, #2
 800768e:	61bb      	str	r3, [r7, #24]
 8007690:	e008      	b.n	80076a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	781a      	ldrb	r2, [r3, #0]
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	b292      	uxth	r2, r2
 800769c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	3301      	adds	r3, #1
 80076a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076aa:	b29b      	uxth	r3, r3
 80076ac:	3b01      	subs	r3, #1
 80076ae:	b29a      	uxth	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076bc:	b29b      	uxth	r3, r3
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1cb      	bne.n	800765a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	9300      	str	r3, [sp, #0]
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	2200      	movs	r2, #0
 80076ca:	2140      	movs	r1, #64	; 0x40
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 ff4e 	bl	800856e <UART_WaitOnFlagUntilTimeout>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e005      	b.n	80076e8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2220      	movs	r2, #32
 80076e0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	e000      	b.n	80076e8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80076e6:	2302      	movs	r3, #2
  }
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3720      	adds	r7, #32
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b08a      	sub	sp, #40	; 0x28
 80076f4:	af02      	add	r7, sp, #8
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	603b      	str	r3, [r7, #0]
 80076fc:	4613      	mov	r3, r2
 80076fe:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007704:	2b20      	cmp	r3, #32
 8007706:	f040 80bf 	bne.w	8007888 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	2b00      	cmp	r3, #0
 800770e:	d002      	beq.n	8007716 <HAL_UART_Receive+0x26>
 8007710:	88fb      	ldrh	r3, [r7, #6]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	e0b7      	b.n	800788a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007720:	2b01      	cmp	r3, #1
 8007722:	d101      	bne.n	8007728 <HAL_UART_Receive+0x38>
 8007724:	2302      	movs	r3, #2
 8007726:	e0b0      	b.n	800788a <HAL_UART_Receive+0x19a>
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2201      	movs	r2, #1
 800772c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	2200      	movs	r2, #0
 8007734:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	2222      	movs	r2, #34	; 0x22
 800773c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2200      	movs	r2, #0
 8007742:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007744:	f7fa fc90 	bl	8002068 <HAL_GetTick>
 8007748:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	88fa      	ldrh	r2, [r7, #6]
 800774e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	88fa      	ldrh	r2, [r7, #6]
 8007756:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007762:	d10e      	bne.n	8007782 <HAL_UART_Receive+0x92>
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	691b      	ldr	r3, [r3, #16]
 8007768:	2b00      	cmp	r3, #0
 800776a:	d105      	bne.n	8007778 <HAL_UART_Receive+0x88>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007772:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007776:	e02d      	b.n	80077d4 <HAL_UART_Receive+0xe4>
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	22ff      	movs	r2, #255	; 0xff
 800777c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007780:	e028      	b.n	80077d4 <HAL_UART_Receive+0xe4>
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10d      	bne.n	80077a6 <HAL_UART_Receive+0xb6>
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	691b      	ldr	r3, [r3, #16]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d104      	bne.n	800779c <HAL_UART_Receive+0xac>
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	22ff      	movs	r2, #255	; 0xff
 8007796:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800779a:	e01b      	b.n	80077d4 <HAL_UART_Receive+0xe4>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	227f      	movs	r2, #127	; 0x7f
 80077a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077a4:	e016      	b.n	80077d4 <HAL_UART_Receive+0xe4>
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80077ae:	d10d      	bne.n	80077cc <HAL_UART_Receive+0xdc>
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	691b      	ldr	r3, [r3, #16]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d104      	bne.n	80077c2 <HAL_UART_Receive+0xd2>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	227f      	movs	r2, #127	; 0x7f
 80077bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077c0:	e008      	b.n	80077d4 <HAL_UART_Receive+0xe4>
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	223f      	movs	r2, #63	; 0x3f
 80077c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80077ca:	e003      	b.n	80077d4 <HAL_UART_Receive+0xe4>
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80077da:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	689b      	ldr	r3, [r3, #8]
 80077e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80077e4:	d108      	bne.n	80077f8 <HAL_UART_Receive+0x108>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	691b      	ldr	r3, [r3, #16]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d104      	bne.n	80077f8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 80077ee:	2300      	movs	r3, #0
 80077f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	61bb      	str	r3, [r7, #24]
 80077f6:	e003      	b.n	8007800 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80077fc:	2300      	movs	r3, #0
 80077fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007808:	e033      	b.n	8007872 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	9300      	str	r3, [sp, #0]
 800780e:	697b      	ldr	r3, [r7, #20]
 8007810:	2200      	movs	r2, #0
 8007812:	2120      	movs	r1, #32
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f000 feaa 	bl	800856e <UART_WaitOnFlagUntilTimeout>
 800781a:	4603      	mov	r3, r0
 800781c:	2b00      	cmp	r3, #0
 800781e:	d001      	beq.n	8007824 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e032      	b.n	800788a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10c      	bne.n	8007844 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007830:	b29a      	uxth	r2, r3
 8007832:	8a7b      	ldrh	r3, [r7, #18]
 8007834:	4013      	ands	r3, r2
 8007836:	b29a      	uxth	r2, r3
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	3302      	adds	r3, #2
 8007840:	61bb      	str	r3, [r7, #24]
 8007842:	e00d      	b.n	8007860 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800784a:	b29b      	uxth	r3, r3
 800784c:	b2da      	uxtb	r2, r3
 800784e:	8a7b      	ldrh	r3, [r7, #18]
 8007850:	b2db      	uxtb	r3, r3
 8007852:	4013      	ands	r3, r2
 8007854:	b2da      	uxtb	r2, r3
 8007856:	69fb      	ldr	r3, [r7, #28]
 8007858:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	3301      	adds	r3, #1
 800785e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007866:	b29b      	uxth	r3, r3
 8007868:	3b01      	subs	r3, #1
 800786a:	b29a      	uxth	r2, r3
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007878:	b29b      	uxth	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1c5      	bne.n	800780a <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2220      	movs	r2, #32
 8007882:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007884:	2300      	movs	r3, #0
 8007886:	e000      	b.n	800788a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8007888:	2302      	movs	r3, #2
  }
}
 800788a:	4618      	mov	r0, r3
 800788c:	3720      	adds	r7, #32
 800788e:	46bd      	mov	sp, r7
 8007890:	bd80      	pop	{r7, pc}
	...

08007894 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b0ba      	sub	sp, #232	; 0xe8
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	69db      	ldr	r3, [r3, #28]
 80078a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	689b      	ldr	r3, [r3, #8]
 80078b6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80078ba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80078be:	f640 030f 	movw	r3, #2063	; 0x80f
 80078c2:	4013      	ands	r3, r2
 80078c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80078c8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d115      	bne.n	80078fc <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80078d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d4:	f003 0320 	and.w	r3, r3, #32
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d00f      	beq.n	80078fc <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80078dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078e0:	f003 0320 	and.w	r3, r3, #32
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d009      	beq.n	80078fc <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	f000 82a6 	beq.w	8007e3e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	4798      	blx	r3
      }
      return;
 80078fa:	e2a0      	b.n	8007e3e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80078fc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007900:	2b00      	cmp	r3, #0
 8007902:	f000 8117 	beq.w	8007b34 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007906:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800790a:	f003 0301 	and.w	r3, r3, #1
 800790e:	2b00      	cmp	r3, #0
 8007910:	d106      	bne.n	8007920 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007912:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007916:	4b85      	ldr	r3, [pc, #532]	; (8007b2c <HAL_UART_IRQHandler+0x298>)
 8007918:	4013      	ands	r3, r2
 800791a:	2b00      	cmp	r3, #0
 800791c:	f000 810a 	beq.w	8007b34 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	2b00      	cmp	r3, #0
 800792a:	d011      	beq.n	8007950 <HAL_UART_IRQHandler+0xbc>
 800792c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007930:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00b      	beq.n	8007950 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	2201      	movs	r2, #1
 800793e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007946:	f043 0201 	orr.w	r2, r3, #1
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007950:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007954:	f003 0302 	and.w	r3, r3, #2
 8007958:	2b00      	cmp	r3, #0
 800795a:	d011      	beq.n	8007980 <HAL_UART_IRQHandler+0xec>
 800795c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007960:	f003 0301 	and.w	r3, r3, #1
 8007964:	2b00      	cmp	r3, #0
 8007966:	d00b      	beq.n	8007980 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2202      	movs	r2, #2
 800796e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007976:	f043 0204 	orr.w	r2, r3, #4
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007984:	f003 0304 	and.w	r3, r3, #4
 8007988:	2b00      	cmp	r3, #0
 800798a:	d011      	beq.n	80079b0 <HAL_UART_IRQHandler+0x11c>
 800798c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b00      	cmp	r3, #0
 8007996:	d00b      	beq.n	80079b0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	2204      	movs	r2, #4
 800799e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079a6:	f043 0202 	orr.w	r2, r3, #2
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80079b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079b4:	f003 0308 	and.w	r3, r3, #8
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d017      	beq.n	80079ec <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079c0:	f003 0320 	and.w	r3, r3, #32
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d105      	bne.n	80079d4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80079c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079cc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d00b      	beq.n	80079ec <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2208      	movs	r2, #8
 80079da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079e2:	f043 0208 	orr.w	r2, r3, #8
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80079ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d012      	beq.n	8007a1e <HAL_UART_IRQHandler+0x18a>
 80079f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079fc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d00c      	beq.n	8007a1e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007a0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a14:	f043 0220 	orr.w	r2, r3, #32
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	f000 820c 	beq.w	8007e42 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a2e:	f003 0320 	and.w	r3, r3, #32
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d00d      	beq.n	8007a52 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007a36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a3a:	f003 0320 	and.w	r3, r3, #32
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d007      	beq.n	8007a52 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d003      	beq.n	8007a52 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	689b      	ldr	r3, [r3, #8]
 8007a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a66:	2b40      	cmp	r3, #64	; 0x40
 8007a68:	d005      	beq.n	8007a76 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a6e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d04f      	beq.n	8007b16 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f000 fe3d 	bl	80086f6 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	689b      	ldr	r3, [r3, #8]
 8007a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a86:	2b40      	cmp	r3, #64	; 0x40
 8007a88:	d141      	bne.n	8007b0e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3308      	adds	r3, #8
 8007a90:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007a98:	e853 3f00 	ldrex	r3, [r3]
 8007a9c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007aa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007aa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	3308      	adds	r3, #8
 8007ab2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ab6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007aba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ac2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007ac6:	e841 2300 	strex	r3, r2, [r1]
 8007aca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007ace:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1d9      	bne.n	8007a8a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d013      	beq.n	8007b06 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae2:	4a13      	ldr	r2, [pc, #76]	; (8007b30 <HAL_UART_IRQHandler+0x29c>)
 8007ae4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aea:	4618      	mov	r0, r3
 8007aec:	f7fb ff20 	bl	8003930 <HAL_DMA_Abort_IT>
 8007af0:	4603      	mov	r3, r0
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d017      	beq.n	8007b26 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afc:	687a      	ldr	r2, [r7, #4]
 8007afe:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007b00:	4610      	mov	r0, r2
 8007b02:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b04:	e00f      	b.n	8007b26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b06:	6878      	ldr	r0, [r7, #4]
 8007b08:	f000 f9a6 	bl	8007e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b0c:	e00b      	b.n	8007b26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f9a2 	bl	8007e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b14:	e007      	b.n	8007b26 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f000 f99e 	bl	8007e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007b24:	e18d      	b.n	8007e42 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b26:	bf00      	nop
    return;
 8007b28:	e18b      	b.n	8007e42 <HAL_UART_IRQHandler+0x5ae>
 8007b2a:	bf00      	nop
 8007b2c:	04000120 	.word	0x04000120
 8007b30:	080087bd 	.word	0x080087bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	f040 8146 	bne.w	8007dca <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b42:	f003 0310 	and.w	r3, r3, #16
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 813f 	beq.w	8007dca <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b50:	f003 0310 	and.w	r3, r3, #16
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	f000 8138 	beq.w	8007dca <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	2210      	movs	r2, #16
 8007b60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	689b      	ldr	r3, [r3, #8]
 8007b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b6c:	2b40      	cmp	r3, #64	; 0x40
 8007b6e:	f040 80b4 	bne.w	8007cda <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b7e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f000 815f 	beq.w	8007e46 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007b8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b92:	429a      	cmp	r2, r3
 8007b94:	f080 8157 	bcs.w	8007e46 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007b9e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f003 0320 	and.w	r3, r3, #32
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	f040 8085 	bne.w	8007cbe <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007bc0:	e853 3f00 	ldrex	r3, [r3]
 8007bc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007bc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	461a      	mov	r2, r3
 8007bda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007be2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007bea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007bee:	e841 2300 	strex	r3, r2, [r1]
 8007bf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d1da      	bne.n	8007bb4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	3308      	adds	r3, #8
 8007c04:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c08:	e853 3f00 	ldrex	r3, [r3]
 8007c0c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c10:	f023 0301 	bic.w	r3, r3, #1
 8007c14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	3308      	adds	r3, #8
 8007c1e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c22:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c26:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c28:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c2a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c2e:	e841 2300 	strex	r3, r2, [r1]
 8007c32:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d1e1      	bne.n	8007bfe <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	3308      	adds	r3, #8
 8007c40:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c44:	e853 3f00 	ldrex	r3, [r3]
 8007c48:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c4a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	3308      	adds	r3, #8
 8007c5a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c5e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c60:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c62:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c66:	e841 2300 	strex	r3, r2, [r1]
 8007c6a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1e3      	bne.n	8007c3a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2220      	movs	r2, #32
 8007c76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c86:	e853 3f00 	ldrex	r3, [r3]
 8007c8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007c8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c8e:	f023 0310 	bic.w	r3, r3, #16
 8007c92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007ca0:	65bb      	str	r3, [r7, #88]	; 0x58
 8007ca2:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ca4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007ca6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ca8:	e841 2300 	strex	r3, r2, [r1]
 8007cac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d1e4      	bne.n	8007c7e <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb8:	4618      	mov	r0, r3
 8007cba:	f7fb fdfb 	bl	80038b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	1ad3      	subs	r3, r2, r3
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	4619      	mov	r1, r3
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f8ca 	bl	8007e6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cd8:	e0b5      	b.n	8007e46 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007cf4:	b29b      	uxth	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	f000 80a7 	beq.w	8007e4a <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007cfc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	f000 80a2 	beq.w	8007e4a <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0e:	e853 3f00 	ldrex	r3, [r3]
 8007d12:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	461a      	mov	r2, r3
 8007d24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007d28:	647b      	str	r3, [r7, #68]	; 0x44
 8007d2a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d30:	e841 2300 	strex	r3, r2, [r1]
 8007d34:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d1e4      	bne.n	8007d06 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	3308      	adds	r3, #8
 8007d42:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d46:	e853 3f00 	ldrex	r3, [r3]
 8007d4a:	623b      	str	r3, [r7, #32]
   return(result);
 8007d4c:	6a3b      	ldr	r3, [r7, #32]
 8007d4e:	f023 0301 	bic.w	r3, r3, #1
 8007d52:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	3308      	adds	r3, #8
 8007d5c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d60:	633a      	str	r2, [r7, #48]	; 0x30
 8007d62:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d64:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d66:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d68:	e841 2300 	strex	r3, r2, [r1]
 8007d6c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d1e3      	bne.n	8007d3c <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2220      	movs	r2, #32
 8007d78:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2200      	movs	r2, #0
 8007d84:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	e853 3f00 	ldrex	r3, [r3]
 8007d92:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f023 0310 	bic.w	r3, r3, #16
 8007d9a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	461a      	mov	r2, r3
 8007da4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007da8:	61fb      	str	r3, [r7, #28]
 8007daa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dac:	69b9      	ldr	r1, [r7, #24]
 8007dae:	69fa      	ldr	r2, [r7, #28]
 8007db0:	e841 2300 	strex	r3, r2, [r1]
 8007db4:	617b      	str	r3, [r7, #20]
   return(result);
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1e4      	bne.n	8007d86 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007dbc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007dc0:	4619      	mov	r1, r3
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 f852 	bl	8007e6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007dc8:	e03f      	b.n	8007e4a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007dca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00e      	beq.n	8007df4 <HAL_UART_IRQHandler+0x560>
 8007dd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d008      	beq.n	8007df4 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007dea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 fd25 	bl	800883c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007df2:	e02d      	b.n	8007e50 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d00e      	beq.n	8007e1e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d008      	beq.n	8007e1e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d01c      	beq.n	8007e4e <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	4798      	blx	r3
    }
    return;
 8007e1c:	e017      	b.n	8007e4e <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d012      	beq.n	8007e50 <HAL_UART_IRQHandler+0x5bc>
 8007e2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00c      	beq.n	8007e50 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fcd6 	bl	80087e8 <UART_EndTransmit_IT>
    return;
 8007e3c:	e008      	b.n	8007e50 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007e3e:	bf00      	nop
 8007e40:	e006      	b.n	8007e50 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007e42:	bf00      	nop
 8007e44:	e004      	b.n	8007e50 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007e46:	bf00      	nop
 8007e48:	e002      	b.n	8007e50 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007e4a:	bf00      	nop
 8007e4c:	e000      	b.n	8007e50 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007e4e:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007e50:	37e8      	adds	r7, #232	; 0xe8
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}
 8007e56:	bf00      	nop

08007e58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	460b      	mov	r3, r1
 8007e76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e78:	bf00      	nop
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e84:	b5b0      	push	{r4, r5, r7, lr}
 8007e86:	b088      	sub	sp, #32
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e8c:	2300      	movs	r3, #0
 8007e8e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689a      	ldr	r2, [r3, #8]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	691b      	ldr	r3, [r3, #16]
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	69db      	ldr	r3, [r3, #28]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	4bad      	ldr	r3, [pc, #692]	; (8008164 <UART_SetConfig+0x2e0>)
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	6812      	ldr	r2, [r2, #0]
 8007eb6:	69f9      	ldr	r1, [r7, #28]
 8007eb8:	430b      	orrs	r3, r1
 8007eba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68da      	ldr	r2, [r3, #12]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	699b      	ldr	r3, [r3, #24]
 8007ed6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4aa2      	ldr	r2, [pc, #648]	; (8008168 <UART_SetConfig+0x2e4>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d004      	beq.n	8007eec <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	69fa      	ldr	r2, [r7, #28]
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	69fa      	ldr	r2, [r7, #28]
 8007efc:	430a      	orrs	r2, r1
 8007efe:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a99      	ldr	r2, [pc, #612]	; (800816c <UART_SetConfig+0x2e8>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d121      	bne.n	8007f4e <UART_SetConfig+0xca>
 8007f0a:	4b99      	ldr	r3, [pc, #612]	; (8008170 <UART_SetConfig+0x2ec>)
 8007f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f10:	f003 0303 	and.w	r3, r3, #3
 8007f14:	2b03      	cmp	r3, #3
 8007f16:	d817      	bhi.n	8007f48 <UART_SetConfig+0xc4>
 8007f18:	a201      	add	r2, pc, #4	; (adr r2, 8007f20 <UART_SetConfig+0x9c>)
 8007f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1e:	bf00      	nop
 8007f20:	08007f31 	.word	0x08007f31
 8007f24:	08007f3d 	.word	0x08007f3d
 8007f28:	08007f37 	.word	0x08007f37
 8007f2c:	08007f43 	.word	0x08007f43
 8007f30:	2301      	movs	r3, #1
 8007f32:	76fb      	strb	r3, [r7, #27]
 8007f34:	e0e7      	b.n	8008106 <UART_SetConfig+0x282>
 8007f36:	2302      	movs	r3, #2
 8007f38:	76fb      	strb	r3, [r7, #27]
 8007f3a:	e0e4      	b.n	8008106 <UART_SetConfig+0x282>
 8007f3c:	2304      	movs	r3, #4
 8007f3e:	76fb      	strb	r3, [r7, #27]
 8007f40:	e0e1      	b.n	8008106 <UART_SetConfig+0x282>
 8007f42:	2308      	movs	r3, #8
 8007f44:	76fb      	strb	r3, [r7, #27]
 8007f46:	e0de      	b.n	8008106 <UART_SetConfig+0x282>
 8007f48:	2310      	movs	r3, #16
 8007f4a:	76fb      	strb	r3, [r7, #27]
 8007f4c:	e0db      	b.n	8008106 <UART_SetConfig+0x282>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	4a88      	ldr	r2, [pc, #544]	; (8008174 <UART_SetConfig+0x2f0>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d132      	bne.n	8007fbe <UART_SetConfig+0x13a>
 8007f58:	4b85      	ldr	r3, [pc, #532]	; (8008170 <UART_SetConfig+0x2ec>)
 8007f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f5e:	f003 030c 	and.w	r3, r3, #12
 8007f62:	2b0c      	cmp	r3, #12
 8007f64:	d828      	bhi.n	8007fb8 <UART_SetConfig+0x134>
 8007f66:	a201      	add	r2, pc, #4	; (adr r2, 8007f6c <UART_SetConfig+0xe8>)
 8007f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f6c:	08007fa1 	.word	0x08007fa1
 8007f70:	08007fb9 	.word	0x08007fb9
 8007f74:	08007fb9 	.word	0x08007fb9
 8007f78:	08007fb9 	.word	0x08007fb9
 8007f7c:	08007fad 	.word	0x08007fad
 8007f80:	08007fb9 	.word	0x08007fb9
 8007f84:	08007fb9 	.word	0x08007fb9
 8007f88:	08007fb9 	.word	0x08007fb9
 8007f8c:	08007fa7 	.word	0x08007fa7
 8007f90:	08007fb9 	.word	0x08007fb9
 8007f94:	08007fb9 	.word	0x08007fb9
 8007f98:	08007fb9 	.word	0x08007fb9
 8007f9c:	08007fb3 	.word	0x08007fb3
 8007fa0:	2300      	movs	r3, #0
 8007fa2:	76fb      	strb	r3, [r7, #27]
 8007fa4:	e0af      	b.n	8008106 <UART_SetConfig+0x282>
 8007fa6:	2302      	movs	r3, #2
 8007fa8:	76fb      	strb	r3, [r7, #27]
 8007faa:	e0ac      	b.n	8008106 <UART_SetConfig+0x282>
 8007fac:	2304      	movs	r3, #4
 8007fae:	76fb      	strb	r3, [r7, #27]
 8007fb0:	e0a9      	b.n	8008106 <UART_SetConfig+0x282>
 8007fb2:	2308      	movs	r3, #8
 8007fb4:	76fb      	strb	r3, [r7, #27]
 8007fb6:	e0a6      	b.n	8008106 <UART_SetConfig+0x282>
 8007fb8:	2310      	movs	r3, #16
 8007fba:	76fb      	strb	r3, [r7, #27]
 8007fbc:	e0a3      	b.n	8008106 <UART_SetConfig+0x282>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a6d      	ldr	r2, [pc, #436]	; (8008178 <UART_SetConfig+0x2f4>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d120      	bne.n	800800a <UART_SetConfig+0x186>
 8007fc8:	4b69      	ldr	r3, [pc, #420]	; (8008170 <UART_SetConfig+0x2ec>)
 8007fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fce:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007fd2:	2b30      	cmp	r3, #48	; 0x30
 8007fd4:	d013      	beq.n	8007ffe <UART_SetConfig+0x17a>
 8007fd6:	2b30      	cmp	r3, #48	; 0x30
 8007fd8:	d814      	bhi.n	8008004 <UART_SetConfig+0x180>
 8007fda:	2b20      	cmp	r3, #32
 8007fdc:	d009      	beq.n	8007ff2 <UART_SetConfig+0x16e>
 8007fde:	2b20      	cmp	r3, #32
 8007fe0:	d810      	bhi.n	8008004 <UART_SetConfig+0x180>
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d002      	beq.n	8007fec <UART_SetConfig+0x168>
 8007fe6:	2b10      	cmp	r3, #16
 8007fe8:	d006      	beq.n	8007ff8 <UART_SetConfig+0x174>
 8007fea:	e00b      	b.n	8008004 <UART_SetConfig+0x180>
 8007fec:	2300      	movs	r3, #0
 8007fee:	76fb      	strb	r3, [r7, #27]
 8007ff0:	e089      	b.n	8008106 <UART_SetConfig+0x282>
 8007ff2:	2302      	movs	r3, #2
 8007ff4:	76fb      	strb	r3, [r7, #27]
 8007ff6:	e086      	b.n	8008106 <UART_SetConfig+0x282>
 8007ff8:	2304      	movs	r3, #4
 8007ffa:	76fb      	strb	r3, [r7, #27]
 8007ffc:	e083      	b.n	8008106 <UART_SetConfig+0x282>
 8007ffe:	2308      	movs	r3, #8
 8008000:	76fb      	strb	r3, [r7, #27]
 8008002:	e080      	b.n	8008106 <UART_SetConfig+0x282>
 8008004:	2310      	movs	r3, #16
 8008006:	76fb      	strb	r3, [r7, #27]
 8008008:	e07d      	b.n	8008106 <UART_SetConfig+0x282>
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	4a5b      	ldr	r2, [pc, #364]	; (800817c <UART_SetConfig+0x2f8>)
 8008010:	4293      	cmp	r3, r2
 8008012:	d120      	bne.n	8008056 <UART_SetConfig+0x1d2>
 8008014:	4b56      	ldr	r3, [pc, #344]	; (8008170 <UART_SetConfig+0x2ec>)
 8008016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800801a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800801e:	2bc0      	cmp	r3, #192	; 0xc0
 8008020:	d013      	beq.n	800804a <UART_SetConfig+0x1c6>
 8008022:	2bc0      	cmp	r3, #192	; 0xc0
 8008024:	d814      	bhi.n	8008050 <UART_SetConfig+0x1cc>
 8008026:	2b80      	cmp	r3, #128	; 0x80
 8008028:	d009      	beq.n	800803e <UART_SetConfig+0x1ba>
 800802a:	2b80      	cmp	r3, #128	; 0x80
 800802c:	d810      	bhi.n	8008050 <UART_SetConfig+0x1cc>
 800802e:	2b00      	cmp	r3, #0
 8008030:	d002      	beq.n	8008038 <UART_SetConfig+0x1b4>
 8008032:	2b40      	cmp	r3, #64	; 0x40
 8008034:	d006      	beq.n	8008044 <UART_SetConfig+0x1c0>
 8008036:	e00b      	b.n	8008050 <UART_SetConfig+0x1cc>
 8008038:	2300      	movs	r3, #0
 800803a:	76fb      	strb	r3, [r7, #27]
 800803c:	e063      	b.n	8008106 <UART_SetConfig+0x282>
 800803e:	2302      	movs	r3, #2
 8008040:	76fb      	strb	r3, [r7, #27]
 8008042:	e060      	b.n	8008106 <UART_SetConfig+0x282>
 8008044:	2304      	movs	r3, #4
 8008046:	76fb      	strb	r3, [r7, #27]
 8008048:	e05d      	b.n	8008106 <UART_SetConfig+0x282>
 800804a:	2308      	movs	r3, #8
 800804c:	76fb      	strb	r3, [r7, #27]
 800804e:	e05a      	b.n	8008106 <UART_SetConfig+0x282>
 8008050:	2310      	movs	r3, #16
 8008052:	76fb      	strb	r3, [r7, #27]
 8008054:	e057      	b.n	8008106 <UART_SetConfig+0x282>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a49      	ldr	r2, [pc, #292]	; (8008180 <UART_SetConfig+0x2fc>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d125      	bne.n	80080ac <UART_SetConfig+0x228>
 8008060:	4b43      	ldr	r3, [pc, #268]	; (8008170 <UART_SetConfig+0x2ec>)
 8008062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800806a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800806e:	d017      	beq.n	80080a0 <UART_SetConfig+0x21c>
 8008070:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008074:	d817      	bhi.n	80080a6 <UART_SetConfig+0x222>
 8008076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800807a:	d00b      	beq.n	8008094 <UART_SetConfig+0x210>
 800807c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008080:	d811      	bhi.n	80080a6 <UART_SetConfig+0x222>
 8008082:	2b00      	cmp	r3, #0
 8008084:	d003      	beq.n	800808e <UART_SetConfig+0x20a>
 8008086:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800808a:	d006      	beq.n	800809a <UART_SetConfig+0x216>
 800808c:	e00b      	b.n	80080a6 <UART_SetConfig+0x222>
 800808e:	2300      	movs	r3, #0
 8008090:	76fb      	strb	r3, [r7, #27]
 8008092:	e038      	b.n	8008106 <UART_SetConfig+0x282>
 8008094:	2302      	movs	r3, #2
 8008096:	76fb      	strb	r3, [r7, #27]
 8008098:	e035      	b.n	8008106 <UART_SetConfig+0x282>
 800809a:	2304      	movs	r3, #4
 800809c:	76fb      	strb	r3, [r7, #27]
 800809e:	e032      	b.n	8008106 <UART_SetConfig+0x282>
 80080a0:	2308      	movs	r3, #8
 80080a2:	76fb      	strb	r3, [r7, #27]
 80080a4:	e02f      	b.n	8008106 <UART_SetConfig+0x282>
 80080a6:	2310      	movs	r3, #16
 80080a8:	76fb      	strb	r3, [r7, #27]
 80080aa:	e02c      	b.n	8008106 <UART_SetConfig+0x282>
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a2d      	ldr	r2, [pc, #180]	; (8008168 <UART_SetConfig+0x2e4>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d125      	bne.n	8008102 <UART_SetConfig+0x27e>
 80080b6:	4b2e      	ldr	r3, [pc, #184]	; (8008170 <UART_SetConfig+0x2ec>)
 80080b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080c4:	d017      	beq.n	80080f6 <UART_SetConfig+0x272>
 80080c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080ca:	d817      	bhi.n	80080fc <UART_SetConfig+0x278>
 80080cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080d0:	d00b      	beq.n	80080ea <UART_SetConfig+0x266>
 80080d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080d6:	d811      	bhi.n	80080fc <UART_SetConfig+0x278>
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d003      	beq.n	80080e4 <UART_SetConfig+0x260>
 80080dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080e0:	d006      	beq.n	80080f0 <UART_SetConfig+0x26c>
 80080e2:	e00b      	b.n	80080fc <UART_SetConfig+0x278>
 80080e4:	2300      	movs	r3, #0
 80080e6:	76fb      	strb	r3, [r7, #27]
 80080e8:	e00d      	b.n	8008106 <UART_SetConfig+0x282>
 80080ea:	2302      	movs	r3, #2
 80080ec:	76fb      	strb	r3, [r7, #27]
 80080ee:	e00a      	b.n	8008106 <UART_SetConfig+0x282>
 80080f0:	2304      	movs	r3, #4
 80080f2:	76fb      	strb	r3, [r7, #27]
 80080f4:	e007      	b.n	8008106 <UART_SetConfig+0x282>
 80080f6:	2308      	movs	r3, #8
 80080f8:	76fb      	strb	r3, [r7, #27]
 80080fa:	e004      	b.n	8008106 <UART_SetConfig+0x282>
 80080fc:	2310      	movs	r3, #16
 80080fe:	76fb      	strb	r3, [r7, #27]
 8008100:	e001      	b.n	8008106 <UART_SetConfig+0x282>
 8008102:	2310      	movs	r3, #16
 8008104:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a17      	ldr	r2, [pc, #92]	; (8008168 <UART_SetConfig+0x2e4>)
 800810c:	4293      	cmp	r3, r2
 800810e:	f040 8087 	bne.w	8008220 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008112:	7efb      	ldrb	r3, [r7, #27]
 8008114:	2b08      	cmp	r3, #8
 8008116:	d837      	bhi.n	8008188 <UART_SetConfig+0x304>
 8008118:	a201      	add	r2, pc, #4	; (adr r2, 8008120 <UART_SetConfig+0x29c>)
 800811a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800811e:	bf00      	nop
 8008120:	08008145 	.word	0x08008145
 8008124:	08008189 	.word	0x08008189
 8008128:	0800814d 	.word	0x0800814d
 800812c:	08008189 	.word	0x08008189
 8008130:	08008153 	.word	0x08008153
 8008134:	08008189 	.word	0x08008189
 8008138:	08008189 	.word	0x08008189
 800813c:	08008189 	.word	0x08008189
 8008140:	0800815b 	.word	0x0800815b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008144:	f7fc fbbc 	bl	80048c0 <HAL_RCC_GetPCLK1Freq>
 8008148:	6178      	str	r0, [r7, #20]
        break;
 800814a:	e022      	b.n	8008192 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800814c:	4b0d      	ldr	r3, [pc, #52]	; (8008184 <UART_SetConfig+0x300>)
 800814e:	617b      	str	r3, [r7, #20]
        break;
 8008150:	e01f      	b.n	8008192 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008152:	f7fc fb1d 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 8008156:	6178      	str	r0, [r7, #20]
        break;
 8008158:	e01b      	b.n	8008192 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800815a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800815e:	617b      	str	r3, [r7, #20]
        break;
 8008160:	e017      	b.n	8008192 <UART_SetConfig+0x30e>
 8008162:	bf00      	nop
 8008164:	efff69f3 	.word	0xefff69f3
 8008168:	40008000 	.word	0x40008000
 800816c:	40013800 	.word	0x40013800
 8008170:	40021000 	.word	0x40021000
 8008174:	40004400 	.word	0x40004400
 8008178:	40004800 	.word	0x40004800
 800817c:	40004c00 	.word	0x40004c00
 8008180:	40005000 	.word	0x40005000
 8008184:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8008188:	2300      	movs	r3, #0
 800818a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	76bb      	strb	r3, [r7, #26]
        break;
 8008190:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	2b00      	cmp	r3, #0
 8008196:	f000 80f1 	beq.w	800837c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	685a      	ldr	r2, [r3, #4]
 800819e:	4613      	mov	r3, r2
 80081a0:	005b      	lsls	r3, r3, #1
 80081a2:	4413      	add	r3, r2
 80081a4:	697a      	ldr	r2, [r7, #20]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d305      	bcc.n	80081b6 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80081b0:	697a      	ldr	r2, [r7, #20]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d902      	bls.n	80081bc <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	76bb      	strb	r3, [r7, #26]
 80081ba:	e0df      	b.n	800837c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	4618      	mov	r0, r3
 80081c0:	f04f 0100 	mov.w	r1, #0
 80081c4:	f04f 0200 	mov.w	r2, #0
 80081c8:	f04f 0300 	mov.w	r3, #0
 80081cc:	020b      	lsls	r3, r1, #8
 80081ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80081d2:	0202      	lsls	r2, r0, #8
 80081d4:	6879      	ldr	r1, [r7, #4]
 80081d6:	6849      	ldr	r1, [r1, #4]
 80081d8:	0849      	lsrs	r1, r1, #1
 80081da:	4608      	mov	r0, r1
 80081dc:	f04f 0100 	mov.w	r1, #0
 80081e0:	1814      	adds	r4, r2, r0
 80081e2:	eb43 0501 	adc.w	r5, r3, r1
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	461a      	mov	r2, r3
 80081ec:	f04f 0300 	mov.w	r3, #0
 80081f0:	4620      	mov	r0, r4
 80081f2:	4629      	mov	r1, r5
 80081f4:	f7f8 fc32 	bl	8000a5c <__aeabi_uldivmod>
 80081f8:	4602      	mov	r2, r0
 80081fa:	460b      	mov	r3, r1
 80081fc:	4613      	mov	r3, r2
 80081fe:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008206:	d308      	bcc.n	800821a <UART_SetConfig+0x396>
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800820e:	d204      	bcs.n	800821a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	693a      	ldr	r2, [r7, #16]
 8008216:	60da      	str	r2, [r3, #12]
 8008218:	e0b0      	b.n	800837c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	76bb      	strb	r3, [r7, #26]
 800821e:	e0ad      	b.n	800837c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	69db      	ldr	r3, [r3, #28]
 8008224:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008228:	d15b      	bne.n	80082e2 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800822a:	7efb      	ldrb	r3, [r7, #27]
 800822c:	2b08      	cmp	r3, #8
 800822e:	d828      	bhi.n	8008282 <UART_SetConfig+0x3fe>
 8008230:	a201      	add	r2, pc, #4	; (adr r2, 8008238 <UART_SetConfig+0x3b4>)
 8008232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008236:	bf00      	nop
 8008238:	0800825d 	.word	0x0800825d
 800823c:	08008265 	.word	0x08008265
 8008240:	0800826d 	.word	0x0800826d
 8008244:	08008283 	.word	0x08008283
 8008248:	08008273 	.word	0x08008273
 800824c:	08008283 	.word	0x08008283
 8008250:	08008283 	.word	0x08008283
 8008254:	08008283 	.word	0x08008283
 8008258:	0800827b 	.word	0x0800827b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800825c:	f7fc fb30 	bl	80048c0 <HAL_RCC_GetPCLK1Freq>
 8008260:	6178      	str	r0, [r7, #20]
        break;
 8008262:	e013      	b.n	800828c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008264:	f7fc fb42 	bl	80048ec <HAL_RCC_GetPCLK2Freq>
 8008268:	6178      	str	r0, [r7, #20]
        break;
 800826a:	e00f      	b.n	800828c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800826c:	4b49      	ldr	r3, [pc, #292]	; (8008394 <UART_SetConfig+0x510>)
 800826e:	617b      	str	r3, [r7, #20]
        break;
 8008270:	e00c      	b.n	800828c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008272:	f7fc fa8d 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 8008276:	6178      	str	r0, [r7, #20]
        break;
 8008278:	e008      	b.n	800828c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800827a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800827e:	617b      	str	r3, [r7, #20]
        break;
 8008280:	e004      	b.n	800828c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008286:	2301      	movs	r3, #1
 8008288:	76bb      	strb	r3, [r7, #26]
        break;
 800828a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d074      	beq.n	800837c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	005a      	lsls	r2, r3, #1
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	085b      	lsrs	r3, r3, #1
 800829c:	441a      	add	r2, r3
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082a8:	693b      	ldr	r3, [r7, #16]
 80082aa:	2b0f      	cmp	r3, #15
 80082ac:	d916      	bls.n	80082dc <UART_SetConfig+0x458>
 80082ae:	693b      	ldr	r3, [r7, #16]
 80082b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082b4:	d212      	bcs.n	80082dc <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082b6:	693b      	ldr	r3, [r7, #16]
 80082b8:	b29b      	uxth	r3, r3
 80082ba:	f023 030f 	bic.w	r3, r3, #15
 80082be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	085b      	lsrs	r3, r3, #1
 80082c4:	b29b      	uxth	r3, r3
 80082c6:	f003 0307 	and.w	r3, r3, #7
 80082ca:	b29a      	uxth	r2, r3
 80082cc:	89fb      	ldrh	r3, [r7, #14]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	89fa      	ldrh	r2, [r7, #14]
 80082d8:	60da      	str	r2, [r3, #12]
 80082da:	e04f      	b.n	800837c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	76bb      	strb	r3, [r7, #26]
 80082e0:	e04c      	b.n	800837c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80082e2:	7efb      	ldrb	r3, [r7, #27]
 80082e4:	2b08      	cmp	r3, #8
 80082e6:	d828      	bhi.n	800833a <UART_SetConfig+0x4b6>
 80082e8:	a201      	add	r2, pc, #4	; (adr r2, 80082f0 <UART_SetConfig+0x46c>)
 80082ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ee:	bf00      	nop
 80082f0:	08008315 	.word	0x08008315
 80082f4:	0800831d 	.word	0x0800831d
 80082f8:	08008325 	.word	0x08008325
 80082fc:	0800833b 	.word	0x0800833b
 8008300:	0800832b 	.word	0x0800832b
 8008304:	0800833b 	.word	0x0800833b
 8008308:	0800833b 	.word	0x0800833b
 800830c:	0800833b 	.word	0x0800833b
 8008310:	08008333 	.word	0x08008333
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008314:	f7fc fad4 	bl	80048c0 <HAL_RCC_GetPCLK1Freq>
 8008318:	6178      	str	r0, [r7, #20]
        break;
 800831a:	e013      	b.n	8008344 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800831c:	f7fc fae6 	bl	80048ec <HAL_RCC_GetPCLK2Freq>
 8008320:	6178      	str	r0, [r7, #20]
        break;
 8008322:	e00f      	b.n	8008344 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008324:	4b1b      	ldr	r3, [pc, #108]	; (8008394 <UART_SetConfig+0x510>)
 8008326:	617b      	str	r3, [r7, #20]
        break;
 8008328:	e00c      	b.n	8008344 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800832a:	f7fc fa31 	bl	8004790 <HAL_RCC_GetSysClockFreq>
 800832e:	6178      	str	r0, [r7, #20]
        break;
 8008330:	e008      	b.n	8008344 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008336:	617b      	str	r3, [r7, #20]
        break;
 8008338:	e004      	b.n	8008344 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800833a:	2300      	movs	r3, #0
 800833c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800833e:	2301      	movs	r3, #1
 8008340:	76bb      	strb	r3, [r7, #26]
        break;
 8008342:	bf00      	nop
    }

    if (pclk != 0U)
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d018      	beq.n	800837c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	085a      	lsrs	r2, r3, #1
 8008350:	697b      	ldr	r3, [r7, #20]
 8008352:	441a      	add	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	fbb2 f3f3 	udiv	r3, r2, r3
 800835c:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	2b0f      	cmp	r3, #15
 8008362:	d909      	bls.n	8008378 <UART_SetConfig+0x4f4>
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800836a:	d205      	bcs.n	8008378 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	b29a      	uxth	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	60da      	str	r2, [r3, #12]
 8008376:	e001      	b.n	800837c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008378:	2301      	movs	r3, #1
 800837a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008388:	7ebb      	ldrb	r3, [r7, #26]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3720      	adds	r7, #32
 800838e:	46bd      	mov	sp, r7
 8008390:	bdb0      	pop	{r4, r5, r7, pc}
 8008392:	bf00      	nop
 8008394:	00f42400 	.word	0x00f42400

08008398 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083a4:	f003 0301 	and.w	r3, r3, #1
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d00a      	beq.n	80083c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	430a      	orrs	r2, r1
 80083c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083c6:	f003 0302 	and.w	r3, r3, #2
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d00a      	beq.n	80083e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	430a      	orrs	r2, r1
 80083e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083e8:	f003 0304 	and.w	r3, r3, #4
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d00a      	beq.n	8008406 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	430a      	orrs	r2, r1
 8008404:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800840a:	f003 0308 	and.w	r3, r3, #8
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00a      	beq.n	8008428 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	685b      	ldr	r3, [r3, #4]
 8008418:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	430a      	orrs	r2, r1
 8008426:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800842c:	f003 0310 	and.w	r3, r3, #16
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00a      	beq.n	800844a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	430a      	orrs	r2, r1
 8008448:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800844e:	f003 0320 	and.w	r3, r3, #32
 8008452:	2b00      	cmp	r3, #0
 8008454:	d00a      	beq.n	800846c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	689b      	ldr	r3, [r3, #8]
 800845c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	430a      	orrs	r2, r1
 800846a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008474:	2b00      	cmp	r3, #0
 8008476:	d01a      	beq.n	80084ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	685b      	ldr	r3, [r3, #4]
 800847e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	430a      	orrs	r2, r1
 800848c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008492:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008496:	d10a      	bne.n	80084ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	430a      	orrs	r2, r1
 80084ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084b6:	2b00      	cmp	r3, #0
 80084b8:	d00a      	beq.n	80084d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	430a      	orrs	r2, r1
 80084ce:	605a      	str	r2, [r3, #4]
  }
}
 80084d0:	bf00      	nop
 80084d2:	370c      	adds	r7, #12
 80084d4:	46bd      	mov	sp, r7
 80084d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084da:	4770      	bx	lr

080084dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b086      	sub	sp, #24
 80084e0:	af02      	add	r7, sp, #8
 80084e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2200      	movs	r2, #0
 80084e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80084ec:	f7f9 fdbc 	bl	8002068 <HAL_GetTick>
 80084f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f003 0308 	and.w	r3, r3, #8
 80084fc:	2b08      	cmp	r3, #8
 80084fe:	d10e      	bne.n	800851e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008500:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	2200      	movs	r2, #0
 800850a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f000 f82d 	bl	800856e <UART_WaitOnFlagUntilTimeout>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d001      	beq.n	800851e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e023      	b.n	8008566 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f003 0304 	and.w	r3, r3, #4
 8008528:	2b04      	cmp	r3, #4
 800852a:	d10e      	bne.n	800854a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800852c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008530:	9300      	str	r3, [sp, #0]
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	2200      	movs	r2, #0
 8008536:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 f817 	bl	800856e <UART_WaitOnFlagUntilTimeout>
 8008540:	4603      	mov	r3, r0
 8008542:	2b00      	cmp	r3, #0
 8008544:	d001      	beq.n	800854a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008546:	2303      	movs	r3, #3
 8008548:	e00d      	b.n	8008566 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2220      	movs	r2, #32
 800854e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	2220      	movs	r2, #32
 8008554:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2200      	movs	r2, #0
 800855a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	3710      	adds	r7, #16
 800856a:	46bd      	mov	sp, r7
 800856c:	bd80      	pop	{r7, pc}

0800856e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800856e:	b580      	push	{r7, lr}
 8008570:	b09c      	sub	sp, #112	; 0x70
 8008572:	af00      	add	r7, sp, #0
 8008574:	60f8      	str	r0, [r7, #12]
 8008576:	60b9      	str	r1, [r7, #8]
 8008578:	603b      	str	r3, [r7, #0]
 800857a:	4613      	mov	r3, r2
 800857c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800857e:	e0a5      	b.n	80086cc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008580:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008582:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008586:	f000 80a1 	beq.w	80086cc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800858a:	f7f9 fd6d 	bl	8002068 <HAL_GetTick>
 800858e:	4602      	mov	r2, r0
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	1ad3      	subs	r3, r2, r3
 8008594:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008596:	429a      	cmp	r2, r3
 8008598:	d302      	bcc.n	80085a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800859a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800859c:	2b00      	cmp	r3, #0
 800859e:	d13e      	bne.n	800861e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085a8:	e853 3f00 	ldrex	r3, [r3]
 80085ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80085ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80085b4:	667b      	str	r3, [r7, #100]	; 0x64
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	461a      	mov	r2, r3
 80085bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80085be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80085c0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80085c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80085c6:	e841 2300 	strex	r3, r2, [r1]
 80085ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80085cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1e6      	bne.n	80085a0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	3308      	adds	r3, #8
 80085d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085dc:	e853 3f00 	ldrex	r3, [r3]
 80085e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80085e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085e4:	f023 0301 	bic.w	r3, r3, #1
 80085e8:	663b      	str	r3, [r7, #96]	; 0x60
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3308      	adds	r3, #8
 80085f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80085f2:	64ba      	str	r2, [r7, #72]	; 0x48
 80085f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80085f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80085fa:	e841 2300 	strex	r3, r2, [r1]
 80085fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1e5      	bne.n	80085d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2220      	movs	r2, #32
 800860a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2220      	movs	r2, #32
 8008610:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800861a:	2303      	movs	r3, #3
 800861c:	e067      	b.n	80086ee <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f003 0304 	and.w	r3, r3, #4
 8008628:	2b00      	cmp	r3, #0
 800862a:	d04f      	beq.n	80086cc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	69db      	ldr	r3, [r3, #28]
 8008632:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008636:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800863a:	d147      	bne.n	80086cc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008644:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800864c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800864e:	e853 3f00 	ldrex	r3, [r3]
 8008652:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008656:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800865a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	461a      	mov	r2, r3
 8008662:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008664:	637b      	str	r3, [r7, #52]	; 0x34
 8008666:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008668:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800866a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800866c:	e841 2300 	strex	r3, r2, [r1]
 8008670:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008674:	2b00      	cmp	r3, #0
 8008676:	d1e6      	bne.n	8008646 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3308      	adds	r3, #8
 800867e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	e853 3f00 	ldrex	r3, [r3]
 8008686:	613b      	str	r3, [r7, #16]
   return(result);
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	f023 0301 	bic.w	r3, r3, #1
 800868e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3308      	adds	r3, #8
 8008696:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008698:	623a      	str	r2, [r7, #32]
 800869a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800869c:	69f9      	ldr	r1, [r7, #28]
 800869e:	6a3a      	ldr	r2, [r7, #32]
 80086a0:	e841 2300 	strex	r3, r2, [r1]
 80086a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80086a6:	69bb      	ldr	r3, [r7, #24]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d1e5      	bne.n	8008678 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	2220      	movs	r2, #32
 80086b0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2220      	movs	r2, #32
 80086b6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2220      	movs	r2, #32
 80086bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80086c8:	2303      	movs	r3, #3
 80086ca:	e010      	b.n	80086ee <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	69da      	ldr	r2, [r3, #28]
 80086d2:	68bb      	ldr	r3, [r7, #8]
 80086d4:	4013      	ands	r3, r2
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	429a      	cmp	r2, r3
 80086da:	bf0c      	ite	eq
 80086dc:	2301      	moveq	r3, #1
 80086de:	2300      	movne	r3, #0
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	461a      	mov	r2, r3
 80086e4:	79fb      	ldrb	r3, [r7, #7]
 80086e6:	429a      	cmp	r2, r3
 80086e8:	f43f af4a 	beq.w	8008580 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80086ec:	2300      	movs	r3, #0
}
 80086ee:	4618      	mov	r0, r3
 80086f0:	3770      	adds	r7, #112	; 0x70
 80086f2:	46bd      	mov	sp, r7
 80086f4:	bd80      	pop	{r7, pc}

080086f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80086f6:	b480      	push	{r7}
 80086f8:	b095      	sub	sp, #84	; 0x54
 80086fa:	af00      	add	r7, sp, #0
 80086fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008706:	e853 3f00 	ldrex	r3, [r3]
 800870a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008712:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	461a      	mov	r2, r3
 800871a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800871c:	643b      	str	r3, [r7, #64]	; 0x40
 800871e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008720:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008722:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008724:	e841 2300 	strex	r3, r2, [r1]
 8008728:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800872a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800872c:	2b00      	cmp	r3, #0
 800872e:	d1e6      	bne.n	80086fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	3308      	adds	r3, #8
 8008736:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008738:	6a3b      	ldr	r3, [r7, #32]
 800873a:	e853 3f00 	ldrex	r3, [r3]
 800873e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008740:	69fb      	ldr	r3, [r7, #28]
 8008742:	f023 0301 	bic.w	r3, r3, #1
 8008746:	64bb      	str	r3, [r7, #72]	; 0x48
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3308      	adds	r3, #8
 800874e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008750:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008752:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008754:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008756:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008758:	e841 2300 	strex	r3, r2, [r1]
 800875c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800875e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008760:	2b00      	cmp	r3, #0
 8008762:	d1e5      	bne.n	8008730 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008768:	2b01      	cmp	r3, #1
 800876a:	d118      	bne.n	800879e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	e853 3f00 	ldrex	r3, [r3]
 8008778:	60bb      	str	r3, [r7, #8]
   return(result);
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	f023 0310 	bic.w	r3, r3, #16
 8008780:	647b      	str	r3, [r7, #68]	; 0x44
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	461a      	mov	r2, r3
 8008788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800878a:	61bb      	str	r3, [r7, #24]
 800878c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800878e:	6979      	ldr	r1, [r7, #20]
 8008790:	69ba      	ldr	r2, [r7, #24]
 8008792:	e841 2300 	strex	r3, r2, [r1]
 8008796:	613b      	str	r3, [r7, #16]
   return(result);
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1e6      	bne.n	800876c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2220      	movs	r2, #32
 80087a2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	665a      	str	r2, [r3, #100]	; 0x64
}
 80087b0:	bf00      	nop
 80087b2:	3754      	adds	r7, #84	; 0x54
 80087b4:	46bd      	mov	sp, r7
 80087b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ba:	4770      	bx	lr

080087bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b084      	sub	sp, #16
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80087da:	68f8      	ldr	r0, [r7, #12]
 80087dc:	f7ff fb3c 	bl	8007e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80087e0:	bf00      	nop
 80087e2:	3710      	adds	r7, #16
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b088      	sub	sp, #32
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	e853 3f00 	ldrex	r3, [r3]
 80087fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80087fe:	68bb      	ldr	r3, [r7, #8]
 8008800:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008804:	61fb      	str	r3, [r7, #28]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	461a      	mov	r2, r3
 800880c:	69fb      	ldr	r3, [r7, #28]
 800880e:	61bb      	str	r3, [r7, #24]
 8008810:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008812:	6979      	ldr	r1, [r7, #20]
 8008814:	69ba      	ldr	r2, [r7, #24]
 8008816:	e841 2300 	strex	r3, r2, [r1]
 800881a:	613b      	str	r3, [r7, #16]
   return(result);
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d1e6      	bne.n	80087f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2220      	movs	r2, #32
 8008826:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	2200      	movs	r2, #0
 800882c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800882e:	6878      	ldr	r0, [r7, #4]
 8008830:	f7f8 ff5c 	bl	80016ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008834:	bf00      	nop
 8008836:	3720      	adds	r7, #32
 8008838:	46bd      	mov	sp, r7
 800883a:	bd80      	pop	{r7, pc}

0800883c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800883c:	b480      	push	{r7}
 800883e:	b083      	sub	sp, #12
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008844:	bf00      	nop
 8008846:	370c      	adds	r7, #12
 8008848:	46bd      	mov	sp, r7
 800884a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884e:	4770      	bx	lr

08008850 <__NVIC_SetPriority>:
{
 8008850:	b480      	push	{r7}
 8008852:	b083      	sub	sp, #12
 8008854:	af00      	add	r7, sp, #0
 8008856:	4603      	mov	r3, r0
 8008858:	6039      	str	r1, [r7, #0]
 800885a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800885c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008860:	2b00      	cmp	r3, #0
 8008862:	db0a      	blt.n	800887a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008864:	683b      	ldr	r3, [r7, #0]
 8008866:	b2da      	uxtb	r2, r3
 8008868:	490c      	ldr	r1, [pc, #48]	; (800889c <__NVIC_SetPriority+0x4c>)
 800886a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800886e:	0112      	lsls	r2, r2, #4
 8008870:	b2d2      	uxtb	r2, r2
 8008872:	440b      	add	r3, r1
 8008874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008878:	e00a      	b.n	8008890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	b2da      	uxtb	r2, r3
 800887e:	4908      	ldr	r1, [pc, #32]	; (80088a0 <__NVIC_SetPriority+0x50>)
 8008880:	79fb      	ldrb	r3, [r7, #7]
 8008882:	f003 030f 	and.w	r3, r3, #15
 8008886:	3b04      	subs	r3, #4
 8008888:	0112      	lsls	r2, r2, #4
 800888a:	b2d2      	uxtb	r2, r2
 800888c:	440b      	add	r3, r1
 800888e:	761a      	strb	r2, [r3, #24]
}
 8008890:	bf00      	nop
 8008892:	370c      	adds	r7, #12
 8008894:	46bd      	mov	sp, r7
 8008896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889a:	4770      	bx	lr
 800889c:	e000e100 	.word	0xe000e100
 80088a0:	e000ed00 	.word	0xe000ed00

080088a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80088a4:	b580      	push	{r7, lr}
 80088a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80088a8:	4b05      	ldr	r3, [pc, #20]	; (80088c0 <SysTick_Handler+0x1c>)
 80088aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80088ac:	f001 fda6 	bl	800a3fc <xTaskGetSchedulerState>
 80088b0:	4603      	mov	r3, r0
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d001      	beq.n	80088ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80088b6:	f002 fb8f 	bl	800afd8 <xPortSysTickHandler>
  }
}
 80088ba:	bf00      	nop
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	bf00      	nop
 80088c0:	e000e010 	.word	0xe000e010

080088c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80088c4:	b580      	push	{r7, lr}
 80088c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80088c8:	2100      	movs	r1, #0
 80088ca:	f06f 0004 	mvn.w	r0, #4
 80088ce:	f7ff ffbf 	bl	8008850 <__NVIC_SetPriority>
#endif
}
 80088d2:	bf00      	nop
 80088d4:	bd80      	pop	{r7, pc}
	...

080088d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80088d8:	b480      	push	{r7}
 80088da:	b083      	sub	sp, #12
 80088dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088de:	f3ef 8305 	mrs	r3, IPSR
 80088e2:	603b      	str	r3, [r7, #0]
  return(result);
 80088e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d003      	beq.n	80088f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80088ea:	f06f 0305 	mvn.w	r3, #5
 80088ee:	607b      	str	r3, [r7, #4]
 80088f0:	e00c      	b.n	800890c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80088f2:	4b0a      	ldr	r3, [pc, #40]	; (800891c <osKernelInitialize+0x44>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d105      	bne.n	8008906 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80088fa:	4b08      	ldr	r3, [pc, #32]	; (800891c <osKernelInitialize+0x44>)
 80088fc:	2201      	movs	r2, #1
 80088fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008900:	2300      	movs	r3, #0
 8008902:	607b      	str	r3, [r7, #4]
 8008904:	e002      	b.n	800890c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008906:	f04f 33ff 	mov.w	r3, #4294967295
 800890a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800890c:	687b      	ldr	r3, [r7, #4]
}
 800890e:	4618      	mov	r0, r3
 8008910:	370c      	adds	r7, #12
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr
 800891a:	bf00      	nop
 800891c:	200000a8 	.word	0x200000a8

08008920 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008920:	b580      	push	{r7, lr}
 8008922:	b082      	sub	sp, #8
 8008924:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008926:	f3ef 8305 	mrs	r3, IPSR
 800892a:	603b      	str	r3, [r7, #0]
  return(result);
 800892c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800892e:	2b00      	cmp	r3, #0
 8008930:	d003      	beq.n	800893a <osKernelStart+0x1a>
    stat = osErrorISR;
 8008932:	f06f 0305 	mvn.w	r3, #5
 8008936:	607b      	str	r3, [r7, #4]
 8008938:	e010      	b.n	800895c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800893a:	4b0b      	ldr	r3, [pc, #44]	; (8008968 <osKernelStart+0x48>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b01      	cmp	r3, #1
 8008940:	d109      	bne.n	8008956 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008942:	f7ff ffbf 	bl	80088c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008946:	4b08      	ldr	r3, [pc, #32]	; (8008968 <osKernelStart+0x48>)
 8008948:	2202      	movs	r2, #2
 800894a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800894c:	f001 f8fa 	bl	8009b44 <vTaskStartScheduler>
      stat = osOK;
 8008950:	2300      	movs	r3, #0
 8008952:	607b      	str	r3, [r7, #4]
 8008954:	e002      	b.n	800895c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008956:	f04f 33ff 	mov.w	r3, #4294967295
 800895a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800895c:	687b      	ldr	r3, [r7, #4]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	200000a8 	.word	0x200000a8

0800896c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800896c:	b580      	push	{r7, lr}
 800896e:	b08e      	sub	sp, #56	; 0x38
 8008970:	af04      	add	r7, sp, #16
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008978:	2300      	movs	r3, #0
 800897a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800897c:	f3ef 8305 	mrs	r3, IPSR
 8008980:	617b      	str	r3, [r7, #20]
  return(result);
 8008982:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008984:	2b00      	cmp	r3, #0
 8008986:	d17e      	bne.n	8008a86 <osThreadNew+0x11a>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d07b      	beq.n	8008a86 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800898e:	2380      	movs	r3, #128	; 0x80
 8008990:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008992:	2318      	movs	r3, #24
 8008994:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008996:	2300      	movs	r3, #0
 8008998:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800899a:	f04f 33ff 	mov.w	r3, #4294967295
 800899e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d045      	beq.n	8008a32 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d002      	beq.n	80089b4 <osThreadNew+0x48>
        name = attr->name;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	699b      	ldr	r3, [r3, #24]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d002      	beq.n	80089c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	699b      	ldr	r3, [r3, #24]
 80089c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80089c2:	69fb      	ldr	r3, [r7, #28]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d008      	beq.n	80089da <osThreadNew+0x6e>
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	2b38      	cmp	r3, #56	; 0x38
 80089cc:	d805      	bhi.n	80089da <osThreadNew+0x6e>
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	685b      	ldr	r3, [r3, #4]
 80089d2:	f003 0301 	and.w	r3, r3, #1
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d001      	beq.n	80089de <osThreadNew+0x72>
        return (NULL);
 80089da:	2300      	movs	r3, #0
 80089dc:	e054      	b.n	8008a88 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	695b      	ldr	r3, [r3, #20]
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d003      	beq.n	80089ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	089b      	lsrs	r3, r3, #2
 80089ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	689b      	ldr	r3, [r3, #8]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00e      	beq.n	8008a14 <osThreadNew+0xa8>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	2bbb      	cmp	r3, #187	; 0xbb
 80089fc:	d90a      	bls.n	8008a14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d006      	beq.n	8008a14 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	695b      	ldr	r3, [r3, #20]
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d002      	beq.n	8008a14 <osThreadNew+0xa8>
        mem = 1;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	61bb      	str	r3, [r7, #24]
 8008a12:	e010      	b.n	8008a36 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	689b      	ldr	r3, [r3, #8]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d10c      	bne.n	8008a36 <osThreadNew+0xca>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	68db      	ldr	r3, [r3, #12]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d108      	bne.n	8008a36 <osThreadNew+0xca>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	691b      	ldr	r3, [r3, #16]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d104      	bne.n	8008a36 <osThreadNew+0xca>
          mem = 0;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	61bb      	str	r3, [r7, #24]
 8008a30:	e001      	b.n	8008a36 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008a32:	2300      	movs	r3, #0
 8008a34:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008a36:	69bb      	ldr	r3, [r7, #24]
 8008a38:	2b01      	cmp	r3, #1
 8008a3a:	d110      	bne.n	8008a5e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008a44:	9202      	str	r2, [sp, #8]
 8008a46:	9301      	str	r3, [sp, #4]
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	9300      	str	r3, [sp, #0]
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	6a3a      	ldr	r2, [r7, #32]
 8008a50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a52:	68f8      	ldr	r0, [r7, #12]
 8008a54:	f000 fe0c 	bl	8009670 <xTaskCreateStatic>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	613b      	str	r3, [r7, #16]
 8008a5c:	e013      	b.n	8008a86 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008a5e:	69bb      	ldr	r3, [r7, #24]
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d110      	bne.n	8008a86 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008a64:	6a3b      	ldr	r3, [r7, #32]
 8008a66:	b29a      	uxth	r2, r3
 8008a68:	f107 0310 	add.w	r3, r7, #16
 8008a6c:	9301      	str	r3, [sp, #4]
 8008a6e:	69fb      	ldr	r3, [r7, #28]
 8008a70:	9300      	str	r3, [sp, #0]
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a76:	68f8      	ldr	r0, [r7, #12]
 8008a78:	f000 fe57 	bl	800972a <xTaskCreate>
 8008a7c:	4603      	mov	r3, r0
 8008a7e:	2b01      	cmp	r3, #1
 8008a80:	d001      	beq.n	8008a86 <osThreadNew+0x11a>
            hTask = NULL;
 8008a82:	2300      	movs	r3, #0
 8008a84:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008a86:	693b      	ldr	r3, [r7, #16]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3728      	adds	r7, #40	; 0x28
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008a90:	b580      	push	{r7, lr}
 8008a92:	b084      	sub	sp, #16
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a98:	f3ef 8305 	mrs	r3, IPSR
 8008a9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8008a9e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d003      	beq.n	8008aac <osDelay+0x1c>
    stat = osErrorISR;
 8008aa4:	f06f 0305 	mvn.w	r3, #5
 8008aa8:	60fb      	str	r3, [r7, #12]
 8008aaa:	e007      	b.n	8008abc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008aac:	2300      	movs	r3, #0
 8008aae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d002      	beq.n	8008abc <osDelay+0x2c>
      vTaskDelay(ticks);
 8008ab6:	6878      	ldr	r0, [r7, #4]
 8008ab8:	f001 f810 	bl	8009adc <vTaskDelay>
    }
  }

  return (stat);
 8008abc:	68fb      	ldr	r3, [r7, #12]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3710      	adds	r7, #16
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
	...

08008ac8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	60f8      	str	r0, [r7, #12]
 8008ad0:	60b9      	str	r1, [r7, #8]
 8008ad2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4a07      	ldr	r2, [pc, #28]	; (8008af4 <vApplicationGetIdleTaskMemory+0x2c>)
 8008ad8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008ada:	68bb      	ldr	r3, [r7, #8]
 8008adc:	4a06      	ldr	r2, [pc, #24]	; (8008af8 <vApplicationGetIdleTaskMemory+0x30>)
 8008ade:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2280      	movs	r2, #128	; 0x80
 8008ae4:	601a      	str	r2, [r3, #0]
}
 8008ae6:	bf00      	nop
 8008ae8:	3714      	adds	r7, #20
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	200000ac 	.word	0x200000ac
 8008af8:	20000168 	.word	0x20000168

08008afc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	60f8      	str	r0, [r7, #12]
 8008b04:	60b9      	str	r1, [r7, #8]
 8008b06:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	4a07      	ldr	r2, [pc, #28]	; (8008b28 <vApplicationGetTimerTaskMemory+0x2c>)
 8008b0c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008b0e:	68bb      	ldr	r3, [r7, #8]
 8008b10:	4a06      	ldr	r2, [pc, #24]	; (8008b2c <vApplicationGetTimerTaskMemory+0x30>)
 8008b12:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b1a:	601a      	str	r2, [r3, #0]
}
 8008b1c:	bf00      	nop
 8008b1e:	3714      	adds	r7, #20
 8008b20:	46bd      	mov	sp, r7
 8008b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b26:	4770      	bx	lr
 8008b28:	20000368 	.word	0x20000368
 8008b2c:	20000424 	.word	0x20000424

08008b30 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b30:	b480      	push	{r7}
 8008b32:	b083      	sub	sp, #12
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f103 0208 	add.w	r2, r3, #8
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f04f 32ff 	mov.w	r2, #4294967295
 8008b48:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	f103 0208 	add.w	r2, r3, #8
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f103 0208 	add.w	r2, r3, #8
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2200      	movs	r2, #0
 8008b62:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b64:	bf00      	nop
 8008b66:	370c      	adds	r7, #12
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6e:	4770      	bx	lr

08008b70 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b70:	b480      	push	{r7}
 8008b72:	b083      	sub	sp, #12
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b7e:	bf00      	nop
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b085      	sub	sp, #20
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
 8008b92:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b9a:	683b      	ldr	r3, [r7, #0]
 8008b9c:	68fa      	ldr	r2, [r7, #12]
 8008b9e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	689a      	ldr	r2, [r3, #8]
 8008ba4:	683b      	ldr	r3, [r7, #0]
 8008ba6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	689b      	ldr	r3, [r3, #8]
 8008bac:	683a      	ldr	r2, [r7, #0]
 8008bae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	683a      	ldr	r2, [r7, #0]
 8008bb4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	1c5a      	adds	r2, r3, #1
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	601a      	str	r2, [r3, #0]
}
 8008bc6:	bf00      	nop
 8008bc8:	3714      	adds	r7, #20
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr

08008bd2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bd2:	b480      	push	{r7}
 8008bd4:	b085      	sub	sp, #20
 8008bd6:	af00      	add	r7, sp, #0
 8008bd8:	6078      	str	r0, [r7, #4]
 8008bda:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be8:	d103      	bne.n	8008bf2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	691b      	ldr	r3, [r3, #16]
 8008bee:	60fb      	str	r3, [r7, #12]
 8008bf0:	e00c      	b.n	8008c0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	3308      	adds	r3, #8
 8008bf6:	60fb      	str	r3, [r7, #12]
 8008bf8:	e002      	b.n	8008c00 <vListInsert+0x2e>
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	685b      	ldr	r3, [r3, #4]
 8008bfe:	60fb      	str	r3, [r7, #12]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	685b      	ldr	r3, [r3, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	68ba      	ldr	r2, [r7, #8]
 8008c08:	429a      	cmp	r2, r3
 8008c0a:	d2f6      	bcs.n	8008bfa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	685a      	ldr	r2, [r3, #4]
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c14:	683b      	ldr	r3, [r7, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	683a      	ldr	r2, [r7, #0]
 8008c1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c1c:	683b      	ldr	r3, [r7, #0]
 8008c1e:	68fa      	ldr	r2, [r7, #12]
 8008c20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	683a      	ldr	r2, [r7, #0]
 8008c26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	687a      	ldr	r2, [r7, #4]
 8008c2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	1c5a      	adds	r2, r3, #1
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	601a      	str	r2, [r3, #0]
}
 8008c38:	bf00      	nop
 8008c3a:	3714      	adds	r7, #20
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c42:	4770      	bx	lr

08008c44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	691b      	ldr	r3, [r3, #16]
 8008c50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	6892      	ldr	r2, [r2, #8]
 8008c5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	6852      	ldr	r2, [r2, #4]
 8008c64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d103      	bne.n	8008c78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	689a      	ldr	r2, [r3, #8]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	1e5a      	subs	r2, r3, #1
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3714      	adds	r7, #20
 8008c90:	46bd      	mov	sp, r7
 8008c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c96:	4770      	bx	lr

08008c98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b084      	sub	sp, #16
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d10a      	bne.n	8008cc2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cb0:	f383 8811 	msr	BASEPRI, r3
 8008cb4:	f3bf 8f6f 	isb	sy
 8008cb8:	f3bf 8f4f 	dsb	sy
 8008cbc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008cbe:	bf00      	nop
 8008cc0:	e7fe      	b.n	8008cc0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008cc2:	f002 f8f7 	bl	800aeb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681a      	ldr	r2, [r3, #0]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cce:	68f9      	ldr	r1, [r7, #12]
 8008cd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cd2:	fb01 f303 	mul.w	r3, r1, r3
 8008cd6:	441a      	add	r2, r3
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	681a      	ldr	r2, [r3, #0]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	681a      	ldr	r2, [r3, #0]
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cf2:	3b01      	subs	r3, #1
 8008cf4:	68f9      	ldr	r1, [r7, #12]
 8008cf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cf8:	fb01 f303 	mul.w	r3, r1, r3
 8008cfc:	441a      	add	r2, r3
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	22ff      	movs	r2, #255	; 0xff
 8008d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	22ff      	movs	r2, #255	; 0xff
 8008d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008d12:	683b      	ldr	r3, [r7, #0]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d114      	bne.n	8008d42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d01a      	beq.n	8008d56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	3310      	adds	r3, #16
 8008d24:	4618      	mov	r0, r3
 8008d26:	f001 f9a7 	bl	800a078 <xTaskRemoveFromEventList>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d012      	beq.n	8008d56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d30:	4b0c      	ldr	r3, [pc, #48]	; (8008d64 <xQueueGenericReset+0xcc>)
 8008d32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d36:	601a      	str	r2, [r3, #0]
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	f3bf 8f6f 	isb	sy
 8008d40:	e009      	b.n	8008d56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	3310      	adds	r3, #16
 8008d46:	4618      	mov	r0, r3
 8008d48:	f7ff fef2 	bl	8008b30 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	3324      	adds	r3, #36	; 0x24
 8008d50:	4618      	mov	r0, r3
 8008d52:	f7ff feed 	bl	8008b30 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d56:	f002 f8dd 	bl	800af14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d5a:	2301      	movs	r3, #1
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3710      	adds	r7, #16
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}
 8008d64:	e000ed04 	.word	0xe000ed04

08008d68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b08e      	sub	sp, #56	; 0x38
 8008d6c:	af02      	add	r7, sp, #8
 8008d6e:	60f8      	str	r0, [r7, #12]
 8008d70:	60b9      	str	r1, [r7, #8]
 8008d72:	607a      	str	r2, [r7, #4]
 8008d74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d10a      	bne.n	8008d92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d80:	f383 8811 	msr	BASEPRI, r3
 8008d84:	f3bf 8f6f 	isb	sy
 8008d88:	f3bf 8f4f 	dsb	sy
 8008d8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d8e:	bf00      	nop
 8008d90:	e7fe      	b.n	8008d90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d92:	683b      	ldr	r3, [r7, #0]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10a      	bne.n	8008dae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9c:	f383 8811 	msr	BASEPRI, r3
 8008da0:	f3bf 8f6f 	isb	sy
 8008da4:	f3bf 8f4f 	dsb	sy
 8008da8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008daa:	bf00      	nop
 8008dac:	e7fe      	b.n	8008dac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d002      	beq.n	8008dba <xQueueGenericCreateStatic+0x52>
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d001      	beq.n	8008dbe <xQueueGenericCreateStatic+0x56>
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e000      	b.n	8008dc0 <xQueueGenericCreateStatic+0x58>
 8008dbe:	2300      	movs	r3, #0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d10a      	bne.n	8008dda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc8:	f383 8811 	msr	BASEPRI, r3
 8008dcc:	f3bf 8f6f 	isb	sy
 8008dd0:	f3bf 8f4f 	dsb	sy
 8008dd4:	623b      	str	r3, [r7, #32]
}
 8008dd6:	bf00      	nop
 8008dd8:	e7fe      	b.n	8008dd8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d102      	bne.n	8008de6 <xQueueGenericCreateStatic+0x7e>
 8008de0:	68bb      	ldr	r3, [r7, #8]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d101      	bne.n	8008dea <xQueueGenericCreateStatic+0x82>
 8008de6:	2301      	movs	r3, #1
 8008de8:	e000      	b.n	8008dec <xQueueGenericCreateStatic+0x84>
 8008dea:	2300      	movs	r3, #0
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d10a      	bne.n	8008e06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df4:	f383 8811 	msr	BASEPRI, r3
 8008df8:	f3bf 8f6f 	isb	sy
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	61fb      	str	r3, [r7, #28]
}
 8008e02:	bf00      	nop
 8008e04:	e7fe      	b.n	8008e04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008e06:	2350      	movs	r3, #80	; 0x50
 8008e08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	2b50      	cmp	r3, #80	; 0x50
 8008e0e:	d00a      	beq.n	8008e26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e14:	f383 8811 	msr	BASEPRI, r3
 8008e18:	f3bf 8f6f 	isb	sy
 8008e1c:	f3bf 8f4f 	dsb	sy
 8008e20:	61bb      	str	r3, [r7, #24]
}
 8008e22:	bf00      	nop
 8008e24:	e7fe      	b.n	8008e24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00d      	beq.n	8008e4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e40:	9300      	str	r3, [sp, #0]
 8008e42:	4613      	mov	r3, r2
 8008e44:	687a      	ldr	r2, [r7, #4]
 8008e46:	68b9      	ldr	r1, [r7, #8]
 8008e48:	68f8      	ldr	r0, [r7, #12]
 8008e4a:	f000 f805 	bl	8008e58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008e50:	4618      	mov	r0, r3
 8008e52:	3730      	adds	r7, #48	; 0x30
 8008e54:	46bd      	mov	sp, r7
 8008e56:	bd80      	pop	{r7, pc}

08008e58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008e58:	b580      	push	{r7, lr}
 8008e5a:	b084      	sub	sp, #16
 8008e5c:	af00      	add	r7, sp, #0
 8008e5e:	60f8      	str	r0, [r7, #12]
 8008e60:	60b9      	str	r1, [r7, #8]
 8008e62:	607a      	str	r2, [r7, #4]
 8008e64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008e66:	68bb      	ldr	r3, [r7, #8]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d103      	bne.n	8008e74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008e6c:	69bb      	ldr	r3, [r7, #24]
 8008e6e:	69ba      	ldr	r2, [r7, #24]
 8008e70:	601a      	str	r2, [r3, #0]
 8008e72:	e002      	b.n	8008e7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008e7a:	69bb      	ldr	r3, [r7, #24]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008e80:	69bb      	ldr	r3, [r7, #24]
 8008e82:	68ba      	ldr	r2, [r7, #8]
 8008e84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008e86:	2101      	movs	r1, #1
 8008e88:	69b8      	ldr	r0, [r7, #24]
 8008e8a:	f7ff ff05 	bl	8008c98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008e8e:	69bb      	ldr	r3, [r7, #24]
 8008e90:	78fa      	ldrb	r2, [r7, #3]
 8008e92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008e96:	bf00      	nop
 8008e98:	3710      	adds	r7, #16
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
	...

08008ea0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b08e      	sub	sp, #56	; 0x38
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	60f8      	str	r0, [r7, #12]
 8008ea8:	60b9      	str	r1, [r7, #8]
 8008eaa:	607a      	str	r2, [r7, #4]
 8008eac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008eae:	2300      	movs	r3, #0
 8008eb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d10a      	bne.n	8008ed2 <xQueueGenericSend+0x32>
	__asm volatile
 8008ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec0:	f383 8811 	msr	BASEPRI, r3
 8008ec4:	f3bf 8f6f 	isb	sy
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008ece:	bf00      	nop
 8008ed0:	e7fe      	b.n	8008ed0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d103      	bne.n	8008ee0 <xQueueGenericSend+0x40>
 8008ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d101      	bne.n	8008ee4 <xQueueGenericSend+0x44>
 8008ee0:	2301      	movs	r3, #1
 8008ee2:	e000      	b.n	8008ee6 <xQueueGenericSend+0x46>
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d10a      	bne.n	8008f00 <xQueueGenericSend+0x60>
	__asm volatile
 8008eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008eee:	f383 8811 	msr	BASEPRI, r3
 8008ef2:	f3bf 8f6f 	isb	sy
 8008ef6:	f3bf 8f4f 	dsb	sy
 8008efa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008efc:	bf00      	nop
 8008efe:	e7fe      	b.n	8008efe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f00:	683b      	ldr	r3, [r7, #0]
 8008f02:	2b02      	cmp	r3, #2
 8008f04:	d103      	bne.n	8008f0e <xQueueGenericSend+0x6e>
 8008f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d101      	bne.n	8008f12 <xQueueGenericSend+0x72>
 8008f0e:	2301      	movs	r3, #1
 8008f10:	e000      	b.n	8008f14 <xQueueGenericSend+0x74>
 8008f12:	2300      	movs	r3, #0
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d10a      	bne.n	8008f2e <xQueueGenericSend+0x8e>
	__asm volatile
 8008f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f1c:	f383 8811 	msr	BASEPRI, r3
 8008f20:	f3bf 8f6f 	isb	sy
 8008f24:	f3bf 8f4f 	dsb	sy
 8008f28:	623b      	str	r3, [r7, #32]
}
 8008f2a:	bf00      	nop
 8008f2c:	e7fe      	b.n	8008f2c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f2e:	f001 fa65 	bl	800a3fc <xTaskGetSchedulerState>
 8008f32:	4603      	mov	r3, r0
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d102      	bne.n	8008f3e <xQueueGenericSend+0x9e>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d101      	bne.n	8008f42 <xQueueGenericSend+0xa2>
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e000      	b.n	8008f44 <xQueueGenericSend+0xa4>
 8008f42:	2300      	movs	r3, #0
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d10a      	bne.n	8008f5e <xQueueGenericSend+0xbe>
	__asm volatile
 8008f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4c:	f383 8811 	msr	BASEPRI, r3
 8008f50:	f3bf 8f6f 	isb	sy
 8008f54:	f3bf 8f4f 	dsb	sy
 8008f58:	61fb      	str	r3, [r7, #28]
}
 8008f5a:	bf00      	nop
 8008f5c:	e7fe      	b.n	8008f5c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008f5e:	f001 ffa9 	bl	800aeb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f6a:	429a      	cmp	r2, r3
 8008f6c:	d302      	bcc.n	8008f74 <xQueueGenericSend+0xd4>
 8008f6e:	683b      	ldr	r3, [r7, #0]
 8008f70:	2b02      	cmp	r3, #2
 8008f72:	d129      	bne.n	8008fc8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008f74:	683a      	ldr	r2, [r7, #0]
 8008f76:	68b9      	ldr	r1, [r7, #8]
 8008f78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f7a:	f000 fa0b 	bl	8009394 <prvCopyDataToQueue>
 8008f7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d010      	beq.n	8008faa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8a:	3324      	adds	r3, #36	; 0x24
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	f001 f873 	bl	800a078 <xTaskRemoveFromEventList>
 8008f92:	4603      	mov	r3, r0
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d013      	beq.n	8008fc0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008f98:	4b3f      	ldr	r3, [pc, #252]	; (8009098 <xQueueGenericSend+0x1f8>)
 8008f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f9e:	601a      	str	r2, [r3, #0]
 8008fa0:	f3bf 8f4f 	dsb	sy
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	e00a      	b.n	8008fc0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d007      	beq.n	8008fc0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008fb0:	4b39      	ldr	r3, [pc, #228]	; (8009098 <xQueueGenericSend+0x1f8>)
 8008fb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fb6:	601a      	str	r2, [r3, #0]
 8008fb8:	f3bf 8f4f 	dsb	sy
 8008fbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008fc0:	f001 ffa8 	bl	800af14 <vPortExitCritical>
				return pdPASS;
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	e063      	b.n	8009090 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d103      	bne.n	8008fd6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008fce:	f001 ffa1 	bl	800af14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	e05c      	b.n	8009090 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d106      	bne.n	8008fea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008fdc:	f107 0314 	add.w	r3, r7, #20
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f001 f8ad 	bl	800a140 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008fe6:	2301      	movs	r3, #1
 8008fe8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008fea:	f001 ff93 	bl	800af14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008fee:	f000 fe19 	bl	8009c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008ff2:	f001 ff5f 	bl	800aeb4 <vPortEnterCritical>
 8008ff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008ffc:	b25b      	sxtb	r3, r3
 8008ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009002:	d103      	bne.n	800900c <xQueueGenericSend+0x16c>
 8009004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009006:	2200      	movs	r2, #0
 8009008:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800900c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800900e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009012:	b25b      	sxtb	r3, r3
 8009014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009018:	d103      	bne.n	8009022 <xQueueGenericSend+0x182>
 800901a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800901c:	2200      	movs	r2, #0
 800901e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009022:	f001 ff77 	bl	800af14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009026:	1d3a      	adds	r2, r7, #4
 8009028:	f107 0314 	add.w	r3, r7, #20
 800902c:	4611      	mov	r1, r2
 800902e:	4618      	mov	r0, r3
 8009030:	f001 f89c 	bl	800a16c <xTaskCheckForTimeOut>
 8009034:	4603      	mov	r3, r0
 8009036:	2b00      	cmp	r3, #0
 8009038:	d124      	bne.n	8009084 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800903a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800903c:	f000 faa2 	bl	8009584 <prvIsQueueFull>
 8009040:	4603      	mov	r3, r0
 8009042:	2b00      	cmp	r3, #0
 8009044:	d018      	beq.n	8009078 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009048:	3310      	adds	r3, #16
 800904a:	687a      	ldr	r2, [r7, #4]
 800904c:	4611      	mov	r1, r2
 800904e:	4618      	mov	r0, r3
 8009050:	f000 ffc2 	bl	8009fd8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009054:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009056:	f000 fa2d 	bl	80094b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800905a:	f000 fdf1 	bl	8009c40 <xTaskResumeAll>
 800905e:	4603      	mov	r3, r0
 8009060:	2b00      	cmp	r3, #0
 8009062:	f47f af7c 	bne.w	8008f5e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009066:	4b0c      	ldr	r3, [pc, #48]	; (8009098 <xQueueGenericSend+0x1f8>)
 8009068:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800906c:	601a      	str	r2, [r3, #0]
 800906e:	f3bf 8f4f 	dsb	sy
 8009072:	f3bf 8f6f 	isb	sy
 8009076:	e772      	b.n	8008f5e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009078:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800907a:	f000 fa1b 	bl	80094b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800907e:	f000 fddf 	bl	8009c40 <xTaskResumeAll>
 8009082:	e76c      	b.n	8008f5e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009086:	f000 fa15 	bl	80094b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800908a:	f000 fdd9 	bl	8009c40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800908e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009090:	4618      	mov	r0, r3
 8009092:	3738      	adds	r7, #56	; 0x38
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}
 8009098:	e000ed04 	.word	0xe000ed04

0800909c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b090      	sub	sp, #64	; 0x40
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	607a      	str	r2, [r7, #4]
 80090a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80090ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d10a      	bne.n	80090ca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80090b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b8:	f383 8811 	msr	BASEPRI, r3
 80090bc:	f3bf 8f6f 	isb	sy
 80090c0:	f3bf 8f4f 	dsb	sy
 80090c4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80090c6:	bf00      	nop
 80090c8:	e7fe      	b.n	80090c8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d103      	bne.n	80090d8 <xQueueGenericSendFromISR+0x3c>
 80090d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d101      	bne.n	80090dc <xQueueGenericSendFromISR+0x40>
 80090d8:	2301      	movs	r3, #1
 80090da:	e000      	b.n	80090de <xQueueGenericSendFromISR+0x42>
 80090dc:	2300      	movs	r3, #0
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d10a      	bne.n	80090f8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80090e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090e6:	f383 8811 	msr	BASEPRI, r3
 80090ea:	f3bf 8f6f 	isb	sy
 80090ee:	f3bf 8f4f 	dsb	sy
 80090f2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80090f4:	bf00      	nop
 80090f6:	e7fe      	b.n	80090f6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80090f8:	683b      	ldr	r3, [r7, #0]
 80090fa:	2b02      	cmp	r3, #2
 80090fc:	d103      	bne.n	8009106 <xQueueGenericSendFromISR+0x6a>
 80090fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009102:	2b01      	cmp	r3, #1
 8009104:	d101      	bne.n	800910a <xQueueGenericSendFromISR+0x6e>
 8009106:	2301      	movs	r3, #1
 8009108:	e000      	b.n	800910c <xQueueGenericSendFromISR+0x70>
 800910a:	2300      	movs	r3, #0
 800910c:	2b00      	cmp	r3, #0
 800910e:	d10a      	bne.n	8009126 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009114:	f383 8811 	msr	BASEPRI, r3
 8009118:	f3bf 8f6f 	isb	sy
 800911c:	f3bf 8f4f 	dsb	sy
 8009120:	623b      	str	r3, [r7, #32]
}
 8009122:	bf00      	nop
 8009124:	e7fe      	b.n	8009124 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009126:	f001 ffa7 	bl	800b078 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800912a:	f3ef 8211 	mrs	r2, BASEPRI
 800912e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009132:	f383 8811 	msr	BASEPRI, r3
 8009136:	f3bf 8f6f 	isb	sy
 800913a:	f3bf 8f4f 	dsb	sy
 800913e:	61fa      	str	r2, [r7, #28]
 8009140:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009142:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009144:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009148:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800914a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800914c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800914e:	429a      	cmp	r2, r3
 8009150:	d302      	bcc.n	8009158 <xQueueGenericSendFromISR+0xbc>
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	2b02      	cmp	r3, #2
 8009156:	d12f      	bne.n	80091b8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800915a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800915e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009166:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009168:	683a      	ldr	r2, [r7, #0]
 800916a:	68b9      	ldr	r1, [r7, #8]
 800916c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800916e:	f000 f911 	bl	8009394 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009172:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800917a:	d112      	bne.n	80091a2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800917c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800917e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009180:	2b00      	cmp	r3, #0
 8009182:	d016      	beq.n	80091b2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009186:	3324      	adds	r3, #36	; 0x24
 8009188:	4618      	mov	r0, r3
 800918a:	f000 ff75 	bl	800a078 <xTaskRemoveFromEventList>
 800918e:	4603      	mov	r3, r0
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00e      	beq.n	80091b2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00b      	beq.n	80091b2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2201      	movs	r2, #1
 800919e:	601a      	str	r2, [r3, #0]
 80091a0:	e007      	b.n	80091b2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80091a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80091a6:	3301      	adds	r3, #1
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	b25a      	sxtb	r2, r3
 80091ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80091b2:	2301      	movs	r3, #1
 80091b4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80091b6:	e001      	b.n	80091bc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80091b8:	2300      	movs	r3, #0
 80091ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80091bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091be:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80091c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80091c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80091ca:	4618      	mov	r0, r3
 80091cc:	3740      	adds	r7, #64	; 0x40
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}
	...

080091d4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b08c      	sub	sp, #48	; 0x30
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80091e0:	2300      	movs	r3, #0
 80091e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80091e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10a      	bne.n	8009204 <xQueueReceive+0x30>
	__asm volatile
 80091ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f2:	f383 8811 	msr	BASEPRI, r3
 80091f6:	f3bf 8f6f 	isb	sy
 80091fa:	f3bf 8f4f 	dsb	sy
 80091fe:	623b      	str	r3, [r7, #32]
}
 8009200:	bf00      	nop
 8009202:	e7fe      	b.n	8009202 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d103      	bne.n	8009212 <xQueueReceive+0x3e>
 800920a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920e:	2b00      	cmp	r3, #0
 8009210:	d101      	bne.n	8009216 <xQueueReceive+0x42>
 8009212:	2301      	movs	r3, #1
 8009214:	e000      	b.n	8009218 <xQueueReceive+0x44>
 8009216:	2300      	movs	r3, #0
 8009218:	2b00      	cmp	r3, #0
 800921a:	d10a      	bne.n	8009232 <xQueueReceive+0x5e>
	__asm volatile
 800921c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009220:	f383 8811 	msr	BASEPRI, r3
 8009224:	f3bf 8f6f 	isb	sy
 8009228:	f3bf 8f4f 	dsb	sy
 800922c:	61fb      	str	r3, [r7, #28]
}
 800922e:	bf00      	nop
 8009230:	e7fe      	b.n	8009230 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009232:	f001 f8e3 	bl	800a3fc <xTaskGetSchedulerState>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d102      	bne.n	8009242 <xQueueReceive+0x6e>
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d101      	bne.n	8009246 <xQueueReceive+0x72>
 8009242:	2301      	movs	r3, #1
 8009244:	e000      	b.n	8009248 <xQueueReceive+0x74>
 8009246:	2300      	movs	r3, #0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10a      	bne.n	8009262 <xQueueReceive+0x8e>
	__asm volatile
 800924c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	61bb      	str	r3, [r7, #24]
}
 800925e:	bf00      	nop
 8009260:	e7fe      	b.n	8009260 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009262:	f001 fe27 	bl	800aeb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800926c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800926e:	2b00      	cmp	r3, #0
 8009270:	d01f      	beq.n	80092b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009272:	68b9      	ldr	r1, [r7, #8]
 8009274:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009276:	f000 f8f7 	bl	8009468 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800927a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800927c:	1e5a      	subs	r2, r3, #1
 800927e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009280:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009284:	691b      	ldr	r3, [r3, #16]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d00f      	beq.n	80092aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800928a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800928c:	3310      	adds	r3, #16
 800928e:	4618      	mov	r0, r3
 8009290:	f000 fef2 	bl	800a078 <xTaskRemoveFromEventList>
 8009294:	4603      	mov	r3, r0
 8009296:	2b00      	cmp	r3, #0
 8009298:	d007      	beq.n	80092aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800929a:	4b3d      	ldr	r3, [pc, #244]	; (8009390 <xQueueReceive+0x1bc>)
 800929c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092a0:	601a      	str	r2, [r3, #0]
 80092a2:	f3bf 8f4f 	dsb	sy
 80092a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80092aa:	f001 fe33 	bl	800af14 <vPortExitCritical>
				return pdPASS;
 80092ae:	2301      	movs	r3, #1
 80092b0:	e069      	b.n	8009386 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d103      	bne.n	80092c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80092b8:	f001 fe2c 	bl	800af14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80092bc:	2300      	movs	r3, #0
 80092be:	e062      	b.n	8009386 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80092c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d106      	bne.n	80092d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80092c6:	f107 0310 	add.w	r3, r7, #16
 80092ca:	4618      	mov	r0, r3
 80092cc:	f000 ff38 	bl	800a140 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80092d0:	2301      	movs	r3, #1
 80092d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80092d4:	f001 fe1e 	bl	800af14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80092d8:	f000 fca4 	bl	8009c24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80092dc:	f001 fdea 	bl	800aeb4 <vPortEnterCritical>
 80092e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092e6:	b25b      	sxtb	r3, r3
 80092e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ec:	d103      	bne.n	80092f6 <xQueueReceive+0x122>
 80092ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f0:	2200      	movs	r2, #0
 80092f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092fc:	b25b      	sxtb	r3, r3
 80092fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009302:	d103      	bne.n	800930c <xQueueReceive+0x138>
 8009304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009306:	2200      	movs	r2, #0
 8009308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800930c:	f001 fe02 	bl	800af14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009310:	1d3a      	adds	r2, r7, #4
 8009312:	f107 0310 	add.w	r3, r7, #16
 8009316:	4611      	mov	r1, r2
 8009318:	4618      	mov	r0, r3
 800931a:	f000 ff27 	bl	800a16c <xTaskCheckForTimeOut>
 800931e:	4603      	mov	r3, r0
 8009320:	2b00      	cmp	r3, #0
 8009322:	d123      	bne.n	800936c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009324:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009326:	f000 f917 	bl	8009558 <prvIsQueueEmpty>
 800932a:	4603      	mov	r3, r0
 800932c:	2b00      	cmp	r3, #0
 800932e:	d017      	beq.n	8009360 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009332:	3324      	adds	r3, #36	; 0x24
 8009334:	687a      	ldr	r2, [r7, #4]
 8009336:	4611      	mov	r1, r2
 8009338:	4618      	mov	r0, r3
 800933a:	f000 fe4d 	bl	8009fd8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800933e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009340:	f000 f8b8 	bl	80094b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009344:	f000 fc7c 	bl	8009c40 <xTaskResumeAll>
 8009348:	4603      	mov	r3, r0
 800934a:	2b00      	cmp	r3, #0
 800934c:	d189      	bne.n	8009262 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800934e:	4b10      	ldr	r3, [pc, #64]	; (8009390 <xQueueReceive+0x1bc>)
 8009350:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009354:	601a      	str	r2, [r3, #0]
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	f3bf 8f6f 	isb	sy
 800935e:	e780      	b.n	8009262 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009360:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009362:	f000 f8a7 	bl	80094b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009366:	f000 fc6b 	bl	8009c40 <xTaskResumeAll>
 800936a:	e77a      	b.n	8009262 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800936c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800936e:	f000 f8a1 	bl	80094b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009372:	f000 fc65 	bl	8009c40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009378:	f000 f8ee 	bl	8009558 <prvIsQueueEmpty>
 800937c:	4603      	mov	r3, r0
 800937e:	2b00      	cmp	r3, #0
 8009380:	f43f af6f 	beq.w	8009262 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009384:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009386:	4618      	mov	r0, r3
 8009388:	3730      	adds	r7, #48	; 0x30
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	e000ed04 	.word	0xe000ed04

08009394 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b086      	sub	sp, #24
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80093a0:	2300      	movs	r3, #0
 80093a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d10d      	bne.n	80093ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d14d      	bne.n	8009456 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	4618      	mov	r0, r3
 80093c0:	f001 f83a 	bl	800a438 <xTaskPriorityDisinherit>
 80093c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	2200      	movs	r2, #0
 80093ca:	609a      	str	r2, [r3, #8]
 80093cc:	e043      	b.n	8009456 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d119      	bne.n	8009408 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	6858      	ldr	r0, [r3, #4]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093dc:	461a      	mov	r2, r3
 80093de:	68b9      	ldr	r1, [r7, #8]
 80093e0:	f002 f8a0 	bl	800b524 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	685a      	ldr	r2, [r3, #4]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ec:	441a      	add	r2, r3
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	685a      	ldr	r2, [r3, #4]
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	429a      	cmp	r2, r3
 80093fc:	d32b      	bcc.n	8009456 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	681a      	ldr	r2, [r3, #0]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	605a      	str	r2, [r3, #4]
 8009406:	e026      	b.n	8009456 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	68d8      	ldr	r0, [r3, #12]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009410:	461a      	mov	r2, r3
 8009412:	68b9      	ldr	r1, [r7, #8]
 8009414:	f002 f886 	bl	800b524 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	68da      	ldr	r2, [r3, #12]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009420:	425b      	negs	r3, r3
 8009422:	441a      	add	r2, r3
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	68da      	ldr	r2, [r3, #12]
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	429a      	cmp	r2, r3
 8009432:	d207      	bcs.n	8009444 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	689a      	ldr	r2, [r3, #8]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800943c:	425b      	negs	r3, r3
 800943e:	441a      	add	r2, r3
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b02      	cmp	r3, #2
 8009448:	d105      	bne.n	8009456 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d002      	beq.n	8009456 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	3b01      	subs	r3, #1
 8009454:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	1c5a      	adds	r2, r3, #1
 800945a:	68fb      	ldr	r3, [r7, #12]
 800945c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800945e:	697b      	ldr	r3, [r7, #20]
}
 8009460:	4618      	mov	r0, r3
 8009462:	3718      	adds	r7, #24
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
 8009470:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009476:	2b00      	cmp	r3, #0
 8009478:	d018      	beq.n	80094ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	68da      	ldr	r2, [r3, #12]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009482:	441a      	add	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68da      	ldr	r2, [r3, #12]
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	429a      	cmp	r2, r3
 8009492:	d303      	bcc.n	800949c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681a      	ldr	r2, [r3, #0]
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	68d9      	ldr	r1, [r3, #12]
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a4:	461a      	mov	r2, r3
 80094a6:	6838      	ldr	r0, [r7, #0]
 80094a8:	f002 f83c 	bl	800b524 <memcpy>
	}
}
 80094ac:	bf00      	nop
 80094ae:	3708      	adds	r7, #8
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}

080094b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b084      	sub	sp, #16
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80094bc:	f001 fcfa 	bl	800aeb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80094c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094c8:	e011      	b.n	80094ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d012      	beq.n	80094f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	3324      	adds	r3, #36	; 0x24
 80094d6:	4618      	mov	r0, r3
 80094d8:	f000 fdce 	bl	800a078 <xTaskRemoveFromEventList>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d001      	beq.n	80094e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80094e2:	f000 fea5 	bl	800a230 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
 80094e8:	3b01      	subs	r3, #1
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80094ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	dce9      	bgt.n	80094ca <prvUnlockQueue+0x16>
 80094f6:	e000      	b.n	80094fa <prvUnlockQueue+0x46>
					break;
 80094f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	22ff      	movs	r2, #255	; 0xff
 80094fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009502:	f001 fd07 	bl	800af14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009506:	f001 fcd5 	bl	800aeb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009510:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009512:	e011      	b.n	8009538 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d012      	beq.n	8009542 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	3310      	adds	r3, #16
 8009520:	4618      	mov	r0, r3
 8009522:	f000 fda9 	bl	800a078 <xTaskRemoveFromEventList>
 8009526:	4603      	mov	r3, r0
 8009528:	2b00      	cmp	r3, #0
 800952a:	d001      	beq.n	8009530 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800952c:	f000 fe80 	bl	800a230 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009530:	7bbb      	ldrb	r3, [r7, #14]
 8009532:	3b01      	subs	r3, #1
 8009534:	b2db      	uxtb	r3, r3
 8009536:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009538:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800953c:	2b00      	cmp	r3, #0
 800953e:	dce9      	bgt.n	8009514 <prvUnlockQueue+0x60>
 8009540:	e000      	b.n	8009544 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8009542:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	22ff      	movs	r2, #255	; 0xff
 8009548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800954c:	f001 fce2 	bl	800af14 <vPortExitCritical>
}
 8009550:	bf00      	nop
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}

08009558 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b084      	sub	sp, #16
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009560:	f001 fca8 	bl	800aeb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009568:	2b00      	cmp	r3, #0
 800956a:	d102      	bne.n	8009572 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800956c:	2301      	movs	r3, #1
 800956e:	60fb      	str	r3, [r7, #12]
 8009570:	e001      	b.n	8009576 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8009572:	2300      	movs	r3, #0
 8009574:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009576:	f001 fccd 	bl	800af14 <vPortExitCritical>

	return xReturn;
 800957a:	68fb      	ldr	r3, [r7, #12]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b084      	sub	sp, #16
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800958c:	f001 fc92 	bl	800aeb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009598:	429a      	cmp	r2, r3
 800959a:	d102      	bne.n	80095a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800959c:	2301      	movs	r3, #1
 800959e:	60fb      	str	r3, [r7, #12]
 80095a0:	e001      	b.n	80095a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80095a2:	2300      	movs	r3, #0
 80095a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80095a6:	f001 fcb5 	bl	800af14 <vPortExitCritical>

	return xReturn;
 80095aa:	68fb      	ldr	r3, [r7, #12]
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3710      	adds	r7, #16
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}

080095b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80095b4:	b480      	push	{r7}
 80095b6:	b085      	sub	sp, #20
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095be:	2300      	movs	r3, #0
 80095c0:	60fb      	str	r3, [r7, #12]
 80095c2:	e014      	b.n	80095ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80095c4:	4a0f      	ldr	r2, [pc, #60]	; (8009604 <vQueueAddToRegistry+0x50>)
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10b      	bne.n	80095e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80095d0:	490c      	ldr	r1, [pc, #48]	; (8009604 <vQueueAddToRegistry+0x50>)
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	683a      	ldr	r2, [r7, #0]
 80095d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80095da:	4a0a      	ldr	r2, [pc, #40]	; (8009604 <vQueueAddToRegistry+0x50>)
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	00db      	lsls	r3, r3, #3
 80095e0:	4413      	add	r3, r2
 80095e2:	687a      	ldr	r2, [r7, #4]
 80095e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80095e6:	e006      	b.n	80095f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	3301      	adds	r3, #1
 80095ec:	60fb      	str	r3, [r7, #12]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	2b07      	cmp	r3, #7
 80095f2:	d9e7      	bls.n	80095c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80095f4:	bf00      	nop
 80095f6:	bf00      	nop
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	20002038 	.word	0x20002038

08009608 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	60b9      	str	r1, [r7, #8]
 8009612:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009618:	f001 fc4c 	bl	800aeb4 <vPortEnterCritical>
 800961c:	697b      	ldr	r3, [r7, #20]
 800961e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009622:	b25b      	sxtb	r3, r3
 8009624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009628:	d103      	bne.n	8009632 <vQueueWaitForMessageRestricted+0x2a>
 800962a:	697b      	ldr	r3, [r7, #20]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009638:	b25b      	sxtb	r3, r3
 800963a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800963e:	d103      	bne.n	8009648 <vQueueWaitForMessageRestricted+0x40>
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	2200      	movs	r2, #0
 8009644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009648:	f001 fc64 	bl	800af14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800964c:	697b      	ldr	r3, [r7, #20]
 800964e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009650:	2b00      	cmp	r3, #0
 8009652:	d106      	bne.n	8009662 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	3324      	adds	r3, #36	; 0x24
 8009658:	687a      	ldr	r2, [r7, #4]
 800965a:	68b9      	ldr	r1, [r7, #8]
 800965c:	4618      	mov	r0, r3
 800965e:	f000 fcdf 	bl	800a020 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8009662:	6978      	ldr	r0, [r7, #20]
 8009664:	f7ff ff26 	bl	80094b4 <prvUnlockQueue>
	}
 8009668:	bf00      	nop
 800966a:	3718      	adds	r7, #24
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009670:	b580      	push	{r7, lr}
 8009672:	b08e      	sub	sp, #56	; 0x38
 8009674:	af04      	add	r7, sp, #16
 8009676:	60f8      	str	r0, [r7, #12]
 8009678:	60b9      	str	r1, [r7, #8]
 800967a:	607a      	str	r2, [r7, #4]
 800967c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800967e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009680:	2b00      	cmp	r3, #0
 8009682:	d10a      	bne.n	800969a <xTaskCreateStatic+0x2a>
	__asm volatile
 8009684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009688:	f383 8811 	msr	BASEPRI, r3
 800968c:	f3bf 8f6f 	isb	sy
 8009690:	f3bf 8f4f 	dsb	sy
 8009694:	623b      	str	r3, [r7, #32]
}
 8009696:	bf00      	nop
 8009698:	e7fe      	b.n	8009698 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800969a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969c:	2b00      	cmp	r3, #0
 800969e:	d10a      	bne.n	80096b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80096a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a4:	f383 8811 	msr	BASEPRI, r3
 80096a8:	f3bf 8f6f 	isb	sy
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	61fb      	str	r3, [r7, #28]
}
 80096b2:	bf00      	nop
 80096b4:	e7fe      	b.n	80096b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80096b6:	23bc      	movs	r3, #188	; 0xbc
 80096b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80096ba:	693b      	ldr	r3, [r7, #16]
 80096bc:	2bbc      	cmp	r3, #188	; 0xbc
 80096be:	d00a      	beq.n	80096d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80096c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c4:	f383 8811 	msr	BASEPRI, r3
 80096c8:	f3bf 8f6f 	isb	sy
 80096cc:	f3bf 8f4f 	dsb	sy
 80096d0:	61bb      	str	r3, [r7, #24]
}
 80096d2:	bf00      	nop
 80096d4:	e7fe      	b.n	80096d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80096d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80096d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d01e      	beq.n	800971c <xTaskCreateStatic+0xac>
 80096de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d01b      	beq.n	800971c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80096e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80096e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80096ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80096ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096f0:	2202      	movs	r2, #2
 80096f2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80096f6:	2300      	movs	r3, #0
 80096f8:	9303      	str	r3, [sp, #12]
 80096fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096fc:	9302      	str	r3, [sp, #8]
 80096fe:	f107 0314 	add.w	r3, r7, #20
 8009702:	9301      	str	r3, [sp, #4]
 8009704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	687a      	ldr	r2, [r7, #4]
 800970c:	68b9      	ldr	r1, [r7, #8]
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	f000 f850 	bl	80097b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009714:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009716:	f000 f8f3 	bl	8009900 <prvAddNewTaskToReadyList>
 800971a:	e001      	b.n	8009720 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800971c:	2300      	movs	r3, #0
 800971e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009720:	697b      	ldr	r3, [r7, #20]
	}
 8009722:	4618      	mov	r0, r3
 8009724:	3728      	adds	r7, #40	; 0x28
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}

0800972a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800972a:	b580      	push	{r7, lr}
 800972c:	b08c      	sub	sp, #48	; 0x30
 800972e:	af04      	add	r7, sp, #16
 8009730:	60f8      	str	r0, [r7, #12]
 8009732:	60b9      	str	r1, [r7, #8]
 8009734:	603b      	str	r3, [r7, #0]
 8009736:	4613      	mov	r3, r2
 8009738:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800973a:	88fb      	ldrh	r3, [r7, #6]
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	4618      	mov	r0, r3
 8009740:	f001 fcda 	bl	800b0f8 <pvPortMalloc>
 8009744:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009746:	697b      	ldr	r3, [r7, #20]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00e      	beq.n	800976a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800974c:	20bc      	movs	r0, #188	; 0xbc
 800974e:	f001 fcd3 	bl	800b0f8 <pvPortMalloc>
 8009752:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009754:	69fb      	ldr	r3, [r7, #28]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d003      	beq.n	8009762 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800975a:	69fb      	ldr	r3, [r7, #28]
 800975c:	697a      	ldr	r2, [r7, #20]
 800975e:	631a      	str	r2, [r3, #48]	; 0x30
 8009760:	e005      	b.n	800976e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009762:	6978      	ldr	r0, [r7, #20]
 8009764:	f001 fd94 	bl	800b290 <vPortFree>
 8009768:	e001      	b.n	800976e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800976a:	2300      	movs	r3, #0
 800976c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d017      	beq.n	80097a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009774:	69fb      	ldr	r3, [r7, #28]
 8009776:	2200      	movs	r2, #0
 8009778:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800977c:	88fa      	ldrh	r2, [r7, #6]
 800977e:	2300      	movs	r3, #0
 8009780:	9303      	str	r3, [sp, #12]
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	9302      	str	r3, [sp, #8]
 8009786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009788:	9301      	str	r3, [sp, #4]
 800978a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800978c:	9300      	str	r3, [sp, #0]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	68b9      	ldr	r1, [r7, #8]
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f000 f80e 	bl	80097b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009798:	69f8      	ldr	r0, [r7, #28]
 800979a:	f000 f8b1 	bl	8009900 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800979e:	2301      	movs	r3, #1
 80097a0:	61bb      	str	r3, [r7, #24]
 80097a2:	e002      	b.n	80097aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80097a4:	f04f 33ff 	mov.w	r3, #4294967295
 80097a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80097aa:	69bb      	ldr	r3, [r7, #24]
	}
 80097ac:	4618      	mov	r0, r3
 80097ae:	3720      	adds	r7, #32
 80097b0:	46bd      	mov	sp, r7
 80097b2:	bd80      	pop	{r7, pc}

080097b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b088      	sub	sp, #32
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	60f8      	str	r0, [r7, #12]
 80097bc:	60b9      	str	r1, [r7, #8]
 80097be:	607a      	str	r2, [r7, #4]
 80097c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80097c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	461a      	mov	r2, r3
 80097cc:	21a5      	movs	r1, #165	; 0xa5
 80097ce:	f001 feb7 	bl	800b540 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80097d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80097dc:	3b01      	subs	r3, #1
 80097de:	009b      	lsls	r3, r3, #2
 80097e0:	4413      	add	r3, r2
 80097e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	f023 0307 	bic.w	r3, r3, #7
 80097ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80097ec:	69bb      	ldr	r3, [r7, #24]
 80097ee:	f003 0307 	and.w	r3, r3, #7
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d00a      	beq.n	800980c <prvInitialiseNewTask+0x58>
	__asm volatile
 80097f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fa:	f383 8811 	msr	BASEPRI, r3
 80097fe:	f3bf 8f6f 	isb	sy
 8009802:	f3bf 8f4f 	dsb	sy
 8009806:	617b      	str	r3, [r7, #20]
}
 8009808:	bf00      	nop
 800980a:	e7fe      	b.n	800980a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d01f      	beq.n	8009852 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009812:	2300      	movs	r3, #0
 8009814:	61fb      	str	r3, [r7, #28]
 8009816:	e012      	b.n	800983e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009818:	68ba      	ldr	r2, [r7, #8]
 800981a:	69fb      	ldr	r3, [r7, #28]
 800981c:	4413      	add	r3, r2
 800981e:	7819      	ldrb	r1, [r3, #0]
 8009820:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009822:	69fb      	ldr	r3, [r7, #28]
 8009824:	4413      	add	r3, r2
 8009826:	3334      	adds	r3, #52	; 0x34
 8009828:	460a      	mov	r2, r1
 800982a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800982c:	68ba      	ldr	r2, [r7, #8]
 800982e:	69fb      	ldr	r3, [r7, #28]
 8009830:	4413      	add	r3, r2
 8009832:	781b      	ldrb	r3, [r3, #0]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d006      	beq.n	8009846 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	3301      	adds	r3, #1
 800983c:	61fb      	str	r3, [r7, #28]
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	2b0f      	cmp	r3, #15
 8009842:	d9e9      	bls.n	8009818 <prvInitialiseNewTask+0x64>
 8009844:	e000      	b.n	8009848 <prvInitialiseNewTask+0x94>
			{
				break;
 8009846:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800984a:	2200      	movs	r2, #0
 800984c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009850:	e003      	b.n	800985a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009854:	2200      	movs	r2, #0
 8009856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800985a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985c:	2b37      	cmp	r3, #55	; 0x37
 800985e:	d901      	bls.n	8009864 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009860:	2337      	movs	r3, #55	; 0x37
 8009862:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009866:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009868:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800986a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800986e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009872:	2200      	movs	r2, #0
 8009874:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009878:	3304      	adds	r3, #4
 800987a:	4618      	mov	r0, r3
 800987c:	f7ff f978 	bl	8008b70 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009882:	3318      	adds	r3, #24
 8009884:	4618      	mov	r0, r3
 8009886:	f7ff f973 	bl	8008b70 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800988a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800988c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800988e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009892:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009898:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800989a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800989c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800989e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80098a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098a2:	2200      	movs	r2, #0
 80098a4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80098a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098aa:	2200      	movs	r2, #0
 80098ac:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80098b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098b2:	3354      	adds	r3, #84	; 0x54
 80098b4:	2260      	movs	r2, #96	; 0x60
 80098b6:	2100      	movs	r1, #0
 80098b8:	4618      	mov	r0, r3
 80098ba:	f001 fe41 	bl	800b540 <memset>
 80098be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c0:	4a0c      	ldr	r2, [pc, #48]	; (80098f4 <prvInitialiseNewTask+0x140>)
 80098c2:	659a      	str	r2, [r3, #88]	; 0x58
 80098c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c6:	4a0c      	ldr	r2, [pc, #48]	; (80098f8 <prvInitialiseNewTask+0x144>)
 80098c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80098ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098cc:	4a0b      	ldr	r2, [pc, #44]	; (80098fc <prvInitialiseNewTask+0x148>)
 80098ce:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80098d0:	683a      	ldr	r2, [r7, #0]
 80098d2:	68f9      	ldr	r1, [r7, #12]
 80098d4:	69b8      	ldr	r0, [r7, #24]
 80098d6:	f001 f9bf 	bl	800ac58 <pxPortInitialiseStack>
 80098da:	4602      	mov	r2, r0
 80098dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80098e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d002      	beq.n	80098ec <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80098e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80098ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098ec:	bf00      	nop
 80098ee:	3720      	adds	r7, #32
 80098f0:	46bd      	mov	sp, r7
 80098f2:	bd80      	pop	{r7, pc}
 80098f4:	0800c9a8 	.word	0x0800c9a8
 80098f8:	0800c9c8 	.word	0x0800c9c8
 80098fc:	0800c988 	.word	0x0800c988

08009900 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b082      	sub	sp, #8
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009908:	f001 fad4 	bl	800aeb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800990c:	4b2d      	ldr	r3, [pc, #180]	; (80099c4 <prvAddNewTaskToReadyList+0xc4>)
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	3301      	adds	r3, #1
 8009912:	4a2c      	ldr	r2, [pc, #176]	; (80099c4 <prvAddNewTaskToReadyList+0xc4>)
 8009914:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009916:	4b2c      	ldr	r3, [pc, #176]	; (80099c8 <prvAddNewTaskToReadyList+0xc8>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d109      	bne.n	8009932 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800991e:	4a2a      	ldr	r2, [pc, #168]	; (80099c8 <prvAddNewTaskToReadyList+0xc8>)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009924:	4b27      	ldr	r3, [pc, #156]	; (80099c4 <prvAddNewTaskToReadyList+0xc4>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2b01      	cmp	r3, #1
 800992a:	d110      	bne.n	800994e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800992c:	f000 fca4 	bl	800a278 <prvInitialiseTaskLists>
 8009930:	e00d      	b.n	800994e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009932:	4b26      	ldr	r3, [pc, #152]	; (80099cc <prvAddNewTaskToReadyList+0xcc>)
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2b00      	cmp	r3, #0
 8009938:	d109      	bne.n	800994e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800993a:	4b23      	ldr	r3, [pc, #140]	; (80099c8 <prvAddNewTaskToReadyList+0xc8>)
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009944:	429a      	cmp	r2, r3
 8009946:	d802      	bhi.n	800994e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009948:	4a1f      	ldr	r2, [pc, #124]	; (80099c8 <prvAddNewTaskToReadyList+0xc8>)
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800994e:	4b20      	ldr	r3, [pc, #128]	; (80099d0 <prvAddNewTaskToReadyList+0xd0>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	3301      	adds	r3, #1
 8009954:	4a1e      	ldr	r2, [pc, #120]	; (80099d0 <prvAddNewTaskToReadyList+0xd0>)
 8009956:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009958:	4b1d      	ldr	r3, [pc, #116]	; (80099d0 <prvAddNewTaskToReadyList+0xd0>)
 800995a:	681a      	ldr	r2, [r3, #0]
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009964:	4b1b      	ldr	r3, [pc, #108]	; (80099d4 <prvAddNewTaskToReadyList+0xd4>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	429a      	cmp	r2, r3
 800996a:	d903      	bls.n	8009974 <prvAddNewTaskToReadyList+0x74>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009970:	4a18      	ldr	r2, [pc, #96]	; (80099d4 <prvAddNewTaskToReadyList+0xd4>)
 8009972:	6013      	str	r3, [r2, #0]
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009978:	4613      	mov	r3, r2
 800997a:	009b      	lsls	r3, r3, #2
 800997c:	4413      	add	r3, r2
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	4a15      	ldr	r2, [pc, #84]	; (80099d8 <prvAddNewTaskToReadyList+0xd8>)
 8009982:	441a      	add	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	3304      	adds	r3, #4
 8009988:	4619      	mov	r1, r3
 800998a:	4610      	mov	r0, r2
 800998c:	f7ff f8fd 	bl	8008b8a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009990:	f001 fac0 	bl	800af14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009994:	4b0d      	ldr	r3, [pc, #52]	; (80099cc <prvAddNewTaskToReadyList+0xcc>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	2b00      	cmp	r3, #0
 800999a:	d00e      	beq.n	80099ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800999c:	4b0a      	ldr	r3, [pc, #40]	; (80099c8 <prvAddNewTaskToReadyList+0xc8>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d207      	bcs.n	80099ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80099aa:	4b0c      	ldr	r3, [pc, #48]	; (80099dc <prvAddNewTaskToReadyList+0xdc>)
 80099ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099b0:	601a      	str	r2, [r3, #0]
 80099b2:	f3bf 8f4f 	dsb	sy
 80099b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80099ba:	bf00      	nop
 80099bc:	3708      	adds	r7, #8
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	20000cf8 	.word	0x20000cf8
 80099c8:	20000824 	.word	0x20000824
 80099cc:	20000d04 	.word	0x20000d04
 80099d0:	20000d14 	.word	0x20000d14
 80099d4:	20000d00 	.word	0x20000d00
 80099d8:	20000828 	.word	0x20000828
 80099dc:	e000ed04 	.word	0xe000ed04

080099e0 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b08a      	sub	sp, #40	; 0x28
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
 80099e8:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80099ea:	2300      	movs	r3, #0
 80099ec:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d10a      	bne.n	8009a0a <vTaskDelayUntil+0x2a>
	__asm volatile
 80099f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099f8:	f383 8811 	msr	BASEPRI, r3
 80099fc:	f3bf 8f6f 	isb	sy
 8009a00:	f3bf 8f4f 	dsb	sy
 8009a04:	617b      	str	r3, [r7, #20]
}
 8009a06:	bf00      	nop
 8009a08:	e7fe      	b.n	8009a08 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009a0a:	683b      	ldr	r3, [r7, #0]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d10a      	bne.n	8009a26 <vTaskDelayUntil+0x46>
	__asm volatile
 8009a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	613b      	str	r3, [r7, #16]
}
 8009a22:	bf00      	nop
 8009a24:	e7fe      	b.n	8009a24 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8009a26:	4b2a      	ldr	r3, [pc, #168]	; (8009ad0 <vTaskDelayUntil+0xf0>)
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00a      	beq.n	8009a44 <vTaskDelayUntil+0x64>
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	60fb      	str	r3, [r7, #12]
}
 8009a40:	bf00      	nop
 8009a42:	e7fe      	b.n	8009a42 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8009a44:	f000 f8ee 	bl	8009c24 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009a48:	4b22      	ldr	r3, [pc, #136]	; (8009ad4 <vTaskDelayUntil+0xf4>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	683a      	ldr	r2, [r7, #0]
 8009a54:	4413      	add	r3, r2
 8009a56:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	6a3a      	ldr	r2, [r7, #32]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d20b      	bcs.n	8009a7a <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	69fa      	ldr	r2, [r7, #28]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d211      	bcs.n	8009a90 <vTaskDelayUntil+0xb0>
 8009a6c:	69fa      	ldr	r2, [r7, #28]
 8009a6e:	6a3b      	ldr	r3, [r7, #32]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d90d      	bls.n	8009a90 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009a74:	2301      	movs	r3, #1
 8009a76:	627b      	str	r3, [r7, #36]	; 0x24
 8009a78:	e00a      	b.n	8009a90 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	69fa      	ldr	r2, [r7, #28]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d303      	bcc.n	8009a8c <vTaskDelayUntil+0xac>
 8009a84:	69fa      	ldr	r2, [r7, #28]
 8009a86:	6a3b      	ldr	r3, [r7, #32]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d901      	bls.n	8009a90 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8009a8c:	2301      	movs	r3, #1
 8009a8e:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	69fa      	ldr	r2, [r7, #28]
 8009a94:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8009a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d006      	beq.n	8009aaa <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8009a9c:	69fa      	ldr	r2, [r7, #28]
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	1ad3      	subs	r3, r2, r3
 8009aa2:	2100      	movs	r1, #0
 8009aa4:	4618      	mov	r0, r3
 8009aa6:	f000 fd35 	bl	800a514 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8009aaa:	f000 f8c9 	bl	8009c40 <xTaskResumeAll>
 8009aae:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d107      	bne.n	8009ac6 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8009ab6:	4b08      	ldr	r3, [pc, #32]	; (8009ad8 <vTaskDelayUntil+0xf8>)
 8009ab8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009abc:	601a      	str	r2, [r3, #0]
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ac6:	bf00      	nop
 8009ac8:	3728      	adds	r7, #40	; 0x28
 8009aca:	46bd      	mov	sp, r7
 8009acc:	bd80      	pop	{r7, pc}
 8009ace:	bf00      	nop
 8009ad0:	20000d20 	.word	0x20000d20
 8009ad4:	20000cfc 	.word	0x20000cfc
 8009ad8:	e000ed04 	.word	0xe000ed04

08009adc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d017      	beq.n	8009b1e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009aee:	4b13      	ldr	r3, [pc, #76]	; (8009b3c <vTaskDelay+0x60>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d00a      	beq.n	8009b0c <vTaskDelay+0x30>
	__asm volatile
 8009af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	60bb      	str	r3, [r7, #8]
}
 8009b08:	bf00      	nop
 8009b0a:	e7fe      	b.n	8009b0a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b0c:	f000 f88a 	bl	8009c24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b10:	2100      	movs	r1, #0
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 fcfe 	bl	800a514 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b18:	f000 f892 	bl	8009c40 <xTaskResumeAll>
 8009b1c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d107      	bne.n	8009b34 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009b24:	4b06      	ldr	r3, [pc, #24]	; (8009b40 <vTaskDelay+0x64>)
 8009b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b2a:	601a      	str	r2, [r3, #0]
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b34:	bf00      	nop
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	20000d20 	.word	0x20000d20
 8009b40:	e000ed04 	.word	0xe000ed04

08009b44 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b44:	b580      	push	{r7, lr}
 8009b46:	b08a      	sub	sp, #40	; 0x28
 8009b48:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b52:	463a      	mov	r2, r7
 8009b54:	1d39      	adds	r1, r7, #4
 8009b56:	f107 0308 	add.w	r3, r7, #8
 8009b5a:	4618      	mov	r0, r3
 8009b5c:	f7fe ffb4 	bl	8008ac8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009b60:	6839      	ldr	r1, [r7, #0]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	68ba      	ldr	r2, [r7, #8]
 8009b66:	9202      	str	r2, [sp, #8]
 8009b68:	9301      	str	r3, [sp, #4]
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	2300      	movs	r3, #0
 8009b70:	460a      	mov	r2, r1
 8009b72:	4924      	ldr	r1, [pc, #144]	; (8009c04 <vTaskStartScheduler+0xc0>)
 8009b74:	4824      	ldr	r0, [pc, #144]	; (8009c08 <vTaskStartScheduler+0xc4>)
 8009b76:	f7ff fd7b 	bl	8009670 <xTaskCreateStatic>
 8009b7a:	4603      	mov	r3, r0
 8009b7c:	4a23      	ldr	r2, [pc, #140]	; (8009c0c <vTaskStartScheduler+0xc8>)
 8009b7e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009b80:	4b22      	ldr	r3, [pc, #136]	; (8009c0c <vTaskStartScheduler+0xc8>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d002      	beq.n	8009b8e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009b88:	2301      	movs	r3, #1
 8009b8a:	617b      	str	r3, [r7, #20]
 8009b8c:	e001      	b.n	8009b92 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009b92:	697b      	ldr	r3, [r7, #20]
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d102      	bne.n	8009b9e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009b98:	f000 fd10 	bl	800a5bc <xTimerCreateTimerTask>
 8009b9c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009b9e:	697b      	ldr	r3, [r7, #20]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d11b      	bne.n	8009bdc <vTaskStartScheduler+0x98>
	__asm volatile
 8009ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ba8:	f383 8811 	msr	BASEPRI, r3
 8009bac:	f3bf 8f6f 	isb	sy
 8009bb0:	f3bf 8f4f 	dsb	sy
 8009bb4:	613b      	str	r3, [r7, #16]
}
 8009bb6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009bb8:	4b15      	ldr	r3, [pc, #84]	; (8009c10 <vTaskStartScheduler+0xcc>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	3354      	adds	r3, #84	; 0x54
 8009bbe:	4a15      	ldr	r2, [pc, #84]	; (8009c14 <vTaskStartScheduler+0xd0>)
 8009bc0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009bc2:	4b15      	ldr	r3, [pc, #84]	; (8009c18 <vTaskStartScheduler+0xd4>)
 8009bc4:	f04f 32ff 	mov.w	r2, #4294967295
 8009bc8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009bca:	4b14      	ldr	r3, [pc, #80]	; (8009c1c <vTaskStartScheduler+0xd8>)
 8009bcc:	2201      	movs	r2, #1
 8009bce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009bd0:	4b13      	ldr	r3, [pc, #76]	; (8009c20 <vTaskStartScheduler+0xdc>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009bd6:	f001 f8cb 	bl	800ad70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009bda:	e00e      	b.n	8009bfa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009bdc:	697b      	ldr	r3, [r7, #20]
 8009bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be2:	d10a      	bne.n	8009bfa <vTaskStartScheduler+0xb6>
	__asm volatile
 8009be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	60fb      	str	r3, [r7, #12]
}
 8009bf6:	bf00      	nop
 8009bf8:	e7fe      	b.n	8009bf8 <vTaskStartScheduler+0xb4>
}
 8009bfa:	bf00      	nop
 8009bfc:	3718      	adds	r7, #24
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
 8009c02:	bf00      	nop
 8009c04:	0800c8b0 	.word	0x0800c8b0
 8009c08:	0800a249 	.word	0x0800a249
 8009c0c:	20000d1c 	.word	0x20000d1c
 8009c10:	20000824 	.word	0x20000824
 8009c14:	20000020 	.word	0x20000020
 8009c18:	20000d18 	.word	0x20000d18
 8009c1c:	20000d04 	.word	0x20000d04
 8009c20:	20000cfc 	.word	0x20000cfc

08009c24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c24:	b480      	push	{r7}
 8009c26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c28:	4b04      	ldr	r3, [pc, #16]	; (8009c3c <vTaskSuspendAll+0x18>)
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	4a03      	ldr	r2, [pc, #12]	; (8009c3c <vTaskSuspendAll+0x18>)
 8009c30:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009c32:	bf00      	nop
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr
 8009c3c:	20000d20 	.word	0x20000d20

08009c40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b084      	sub	sp, #16
 8009c44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c46:	2300      	movs	r3, #0
 8009c48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c4e:	4b42      	ldr	r3, [pc, #264]	; (8009d58 <xTaskResumeAll+0x118>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10a      	bne.n	8009c6c <xTaskResumeAll+0x2c>
	__asm volatile
 8009c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5a:	f383 8811 	msr	BASEPRI, r3
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	603b      	str	r3, [r7, #0]
}
 8009c68:	bf00      	nop
 8009c6a:	e7fe      	b.n	8009c6a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009c6c:	f001 f922 	bl	800aeb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009c70:	4b39      	ldr	r3, [pc, #228]	; (8009d58 <xTaskResumeAll+0x118>)
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	3b01      	subs	r3, #1
 8009c76:	4a38      	ldr	r2, [pc, #224]	; (8009d58 <xTaskResumeAll+0x118>)
 8009c78:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c7a:	4b37      	ldr	r3, [pc, #220]	; (8009d58 <xTaskResumeAll+0x118>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d162      	bne.n	8009d48 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009c82:	4b36      	ldr	r3, [pc, #216]	; (8009d5c <xTaskResumeAll+0x11c>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d05e      	beq.n	8009d48 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c8a:	e02f      	b.n	8009cec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c8c:	4b34      	ldr	r3, [pc, #208]	; (8009d60 <xTaskResumeAll+0x120>)
 8009c8e:	68db      	ldr	r3, [r3, #12]
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	3318      	adds	r3, #24
 8009c98:	4618      	mov	r0, r3
 8009c9a:	f7fe ffd3 	bl	8008c44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	f7fe ffce 	bl	8008c44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cac:	4b2d      	ldr	r3, [pc, #180]	; (8009d64 <xTaskResumeAll+0x124>)
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d903      	bls.n	8009cbc <xTaskResumeAll+0x7c>
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cb8:	4a2a      	ldr	r2, [pc, #168]	; (8009d64 <xTaskResumeAll+0x124>)
 8009cba:	6013      	str	r3, [r2, #0]
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4413      	add	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	4a27      	ldr	r2, [pc, #156]	; (8009d68 <xTaskResumeAll+0x128>)
 8009cca:	441a      	add	r2, r3
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	3304      	adds	r3, #4
 8009cd0:	4619      	mov	r1, r3
 8009cd2:	4610      	mov	r0, r2
 8009cd4:	f7fe ff59 	bl	8008b8a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cdc:	4b23      	ldr	r3, [pc, #140]	; (8009d6c <xTaskResumeAll+0x12c>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d302      	bcc.n	8009cec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009ce6:	4b22      	ldr	r3, [pc, #136]	; (8009d70 <xTaskResumeAll+0x130>)
 8009ce8:	2201      	movs	r2, #1
 8009cea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cec:	4b1c      	ldr	r3, [pc, #112]	; (8009d60 <xTaskResumeAll+0x120>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d1cb      	bne.n	8009c8c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d001      	beq.n	8009cfe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009cfa:	f000 fb5f 	bl	800a3bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009cfe:	4b1d      	ldr	r3, [pc, #116]	; (8009d74 <xTaskResumeAll+0x134>)
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d010      	beq.n	8009d2c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d0a:	f000 f847 	bl	8009d9c <xTaskIncrementTick>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d002      	beq.n	8009d1a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009d14:	4b16      	ldr	r3, [pc, #88]	; (8009d70 <xTaskResumeAll+0x130>)
 8009d16:	2201      	movs	r2, #1
 8009d18:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d1f1      	bne.n	8009d0a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009d26:	4b13      	ldr	r3, [pc, #76]	; (8009d74 <xTaskResumeAll+0x134>)
 8009d28:	2200      	movs	r2, #0
 8009d2a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d2c:	4b10      	ldr	r3, [pc, #64]	; (8009d70 <xTaskResumeAll+0x130>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d009      	beq.n	8009d48 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d34:	2301      	movs	r3, #1
 8009d36:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d38:	4b0f      	ldr	r3, [pc, #60]	; (8009d78 <xTaskResumeAll+0x138>)
 8009d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d3e:	601a      	str	r2, [r3, #0]
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d48:	f001 f8e4 	bl	800af14 <vPortExitCritical>

	return xAlreadyYielded;
 8009d4c:	68bb      	ldr	r3, [r7, #8]
}
 8009d4e:	4618      	mov	r0, r3
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}
 8009d56:	bf00      	nop
 8009d58:	20000d20 	.word	0x20000d20
 8009d5c:	20000cf8 	.word	0x20000cf8
 8009d60:	20000cb8 	.word	0x20000cb8
 8009d64:	20000d00 	.word	0x20000d00
 8009d68:	20000828 	.word	0x20000828
 8009d6c:	20000824 	.word	0x20000824
 8009d70:	20000d0c 	.word	0x20000d0c
 8009d74:	20000d08 	.word	0x20000d08
 8009d78:	e000ed04 	.word	0xe000ed04

08009d7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009d7c:	b480      	push	{r7}
 8009d7e:	b083      	sub	sp, #12
 8009d80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009d82:	4b05      	ldr	r3, [pc, #20]	; (8009d98 <xTaskGetTickCount+0x1c>)
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009d88:	687b      	ldr	r3, [r7, #4]
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	20000cfc 	.word	0x20000cfc

08009d9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b086      	sub	sp, #24
 8009da0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009da2:	2300      	movs	r3, #0
 8009da4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009da6:	4b4f      	ldr	r3, [pc, #316]	; (8009ee4 <xTaskIncrementTick+0x148>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	f040 808f 	bne.w	8009ece <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009db0:	4b4d      	ldr	r3, [pc, #308]	; (8009ee8 <xTaskIncrementTick+0x14c>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	3301      	adds	r3, #1
 8009db6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009db8:	4a4b      	ldr	r2, [pc, #300]	; (8009ee8 <xTaskIncrementTick+0x14c>)
 8009dba:	693b      	ldr	r3, [r7, #16]
 8009dbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d120      	bne.n	8009e06 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009dc4:	4b49      	ldr	r3, [pc, #292]	; (8009eec <xTaskIncrementTick+0x150>)
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d00a      	beq.n	8009de4 <xTaskIncrementTick+0x48>
	__asm volatile
 8009dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dd2:	f383 8811 	msr	BASEPRI, r3
 8009dd6:	f3bf 8f6f 	isb	sy
 8009dda:	f3bf 8f4f 	dsb	sy
 8009dde:	603b      	str	r3, [r7, #0]
}
 8009de0:	bf00      	nop
 8009de2:	e7fe      	b.n	8009de2 <xTaskIncrementTick+0x46>
 8009de4:	4b41      	ldr	r3, [pc, #260]	; (8009eec <xTaskIncrementTick+0x150>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	60fb      	str	r3, [r7, #12]
 8009dea:	4b41      	ldr	r3, [pc, #260]	; (8009ef0 <xTaskIncrementTick+0x154>)
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	4a3f      	ldr	r2, [pc, #252]	; (8009eec <xTaskIncrementTick+0x150>)
 8009df0:	6013      	str	r3, [r2, #0]
 8009df2:	4a3f      	ldr	r2, [pc, #252]	; (8009ef0 <xTaskIncrementTick+0x154>)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	6013      	str	r3, [r2, #0]
 8009df8:	4b3e      	ldr	r3, [pc, #248]	; (8009ef4 <xTaskIncrementTick+0x158>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	3301      	adds	r3, #1
 8009dfe:	4a3d      	ldr	r2, [pc, #244]	; (8009ef4 <xTaskIncrementTick+0x158>)
 8009e00:	6013      	str	r3, [r2, #0]
 8009e02:	f000 fadb 	bl	800a3bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e06:	4b3c      	ldr	r3, [pc, #240]	; (8009ef8 <xTaskIncrementTick+0x15c>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	693a      	ldr	r2, [r7, #16]
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d349      	bcc.n	8009ea4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e10:	4b36      	ldr	r3, [pc, #216]	; (8009eec <xTaskIncrementTick+0x150>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d104      	bne.n	8009e24 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e1a:	4b37      	ldr	r3, [pc, #220]	; (8009ef8 <xTaskIncrementTick+0x15c>)
 8009e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e20:	601a      	str	r2, [r3, #0]
					break;
 8009e22:	e03f      	b.n	8009ea4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e24:	4b31      	ldr	r3, [pc, #196]	; (8009eec <xTaskIncrementTick+0x150>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	68db      	ldr	r3, [r3, #12]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e2e:	68bb      	ldr	r3, [r7, #8]
 8009e30:	685b      	ldr	r3, [r3, #4]
 8009e32:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e34:	693a      	ldr	r2, [r7, #16]
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d203      	bcs.n	8009e44 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e3c:	4a2e      	ldr	r2, [pc, #184]	; (8009ef8 <xTaskIncrementTick+0x15c>)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e42:	e02f      	b.n	8009ea4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e44:	68bb      	ldr	r3, [r7, #8]
 8009e46:	3304      	adds	r3, #4
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7fe fefb 	bl	8008c44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d004      	beq.n	8009e60 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	3318      	adds	r3, #24
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f7fe fef2 	bl	8008c44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009e60:	68bb      	ldr	r3, [r7, #8]
 8009e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e64:	4b25      	ldr	r3, [pc, #148]	; (8009efc <xTaskIncrementTick+0x160>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d903      	bls.n	8009e74 <xTaskIncrementTick+0xd8>
 8009e6c:	68bb      	ldr	r3, [r7, #8]
 8009e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e70:	4a22      	ldr	r2, [pc, #136]	; (8009efc <xTaskIncrementTick+0x160>)
 8009e72:	6013      	str	r3, [r2, #0]
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e78:	4613      	mov	r3, r2
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	4413      	add	r3, r2
 8009e7e:	009b      	lsls	r3, r3, #2
 8009e80:	4a1f      	ldr	r2, [pc, #124]	; (8009f00 <xTaskIncrementTick+0x164>)
 8009e82:	441a      	add	r2, r3
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	3304      	adds	r3, #4
 8009e88:	4619      	mov	r1, r3
 8009e8a:	4610      	mov	r0, r2
 8009e8c:	f7fe fe7d 	bl	8008b8a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009e94:	4b1b      	ldr	r3, [pc, #108]	; (8009f04 <xTaskIncrementTick+0x168>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d3b8      	bcc.n	8009e10 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ea2:	e7b5      	b.n	8009e10 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ea4:	4b17      	ldr	r3, [pc, #92]	; (8009f04 <xTaskIncrementTick+0x168>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eaa:	4915      	ldr	r1, [pc, #84]	; (8009f00 <xTaskIncrementTick+0x164>)
 8009eac:	4613      	mov	r3, r2
 8009eae:	009b      	lsls	r3, r3, #2
 8009eb0:	4413      	add	r3, r2
 8009eb2:	009b      	lsls	r3, r3, #2
 8009eb4:	440b      	add	r3, r1
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2b01      	cmp	r3, #1
 8009eba:	d901      	bls.n	8009ec0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009ec0:	4b11      	ldr	r3, [pc, #68]	; (8009f08 <xTaskIncrementTick+0x16c>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d007      	beq.n	8009ed8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009ec8:	2301      	movs	r3, #1
 8009eca:	617b      	str	r3, [r7, #20]
 8009ecc:	e004      	b.n	8009ed8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009ece:	4b0f      	ldr	r3, [pc, #60]	; (8009f0c <xTaskIncrementTick+0x170>)
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	4a0d      	ldr	r2, [pc, #52]	; (8009f0c <xTaskIncrementTick+0x170>)
 8009ed6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009ed8:	697b      	ldr	r3, [r7, #20]
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3718      	adds	r7, #24
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	bd80      	pop	{r7, pc}
 8009ee2:	bf00      	nop
 8009ee4:	20000d20 	.word	0x20000d20
 8009ee8:	20000cfc 	.word	0x20000cfc
 8009eec:	20000cb0 	.word	0x20000cb0
 8009ef0:	20000cb4 	.word	0x20000cb4
 8009ef4:	20000d10 	.word	0x20000d10
 8009ef8:	20000d18 	.word	0x20000d18
 8009efc:	20000d00 	.word	0x20000d00
 8009f00:	20000828 	.word	0x20000828
 8009f04:	20000824 	.word	0x20000824
 8009f08:	20000d0c 	.word	0x20000d0c
 8009f0c:	20000d08 	.word	0x20000d08

08009f10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f16:	4b2a      	ldr	r3, [pc, #168]	; (8009fc0 <vTaskSwitchContext+0xb0>)
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d003      	beq.n	8009f26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f1e:	4b29      	ldr	r3, [pc, #164]	; (8009fc4 <vTaskSwitchContext+0xb4>)
 8009f20:	2201      	movs	r2, #1
 8009f22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f24:	e046      	b.n	8009fb4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009f26:	4b27      	ldr	r3, [pc, #156]	; (8009fc4 <vTaskSwitchContext+0xb4>)
 8009f28:	2200      	movs	r2, #0
 8009f2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f2c:	4b26      	ldr	r3, [pc, #152]	; (8009fc8 <vTaskSwitchContext+0xb8>)
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	60fb      	str	r3, [r7, #12]
 8009f32:	e010      	b.n	8009f56 <vTaskSwitchContext+0x46>
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d10a      	bne.n	8009f50 <vTaskSwitchContext+0x40>
	__asm volatile
 8009f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f3e:	f383 8811 	msr	BASEPRI, r3
 8009f42:	f3bf 8f6f 	isb	sy
 8009f46:	f3bf 8f4f 	dsb	sy
 8009f4a:	607b      	str	r3, [r7, #4]
}
 8009f4c:	bf00      	nop
 8009f4e:	e7fe      	b.n	8009f4e <vTaskSwitchContext+0x3e>
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	3b01      	subs	r3, #1
 8009f54:	60fb      	str	r3, [r7, #12]
 8009f56:	491d      	ldr	r1, [pc, #116]	; (8009fcc <vTaskSwitchContext+0xbc>)
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	009b      	lsls	r3, r3, #2
 8009f5e:	4413      	add	r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	440b      	add	r3, r1
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d0e4      	beq.n	8009f34 <vTaskSwitchContext+0x24>
 8009f6a:	68fa      	ldr	r2, [r7, #12]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4413      	add	r3, r2
 8009f72:	009b      	lsls	r3, r3, #2
 8009f74:	4a15      	ldr	r2, [pc, #84]	; (8009fcc <vTaskSwitchContext+0xbc>)
 8009f76:	4413      	add	r3, r2
 8009f78:	60bb      	str	r3, [r7, #8]
 8009f7a:	68bb      	ldr	r3, [r7, #8]
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	685a      	ldr	r2, [r3, #4]
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	605a      	str	r2, [r3, #4]
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	685a      	ldr	r2, [r3, #4]
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	3308      	adds	r3, #8
 8009f8c:	429a      	cmp	r2, r3
 8009f8e:	d104      	bne.n	8009f9a <vTaskSwitchContext+0x8a>
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	685a      	ldr	r2, [r3, #4]
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	605a      	str	r2, [r3, #4]
 8009f9a:	68bb      	ldr	r3, [r7, #8]
 8009f9c:	685b      	ldr	r3, [r3, #4]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	4a0b      	ldr	r2, [pc, #44]	; (8009fd0 <vTaskSwitchContext+0xc0>)
 8009fa2:	6013      	str	r3, [r2, #0]
 8009fa4:	4a08      	ldr	r2, [pc, #32]	; (8009fc8 <vTaskSwitchContext+0xb8>)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009faa:	4b09      	ldr	r3, [pc, #36]	; (8009fd0 <vTaskSwitchContext+0xc0>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	3354      	adds	r3, #84	; 0x54
 8009fb0:	4a08      	ldr	r2, [pc, #32]	; (8009fd4 <vTaskSwitchContext+0xc4>)
 8009fb2:	6013      	str	r3, [r2, #0]
}
 8009fb4:	bf00      	nop
 8009fb6:	3714      	adds	r7, #20
 8009fb8:	46bd      	mov	sp, r7
 8009fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbe:	4770      	bx	lr
 8009fc0:	20000d20 	.word	0x20000d20
 8009fc4:	20000d0c 	.word	0x20000d0c
 8009fc8:	20000d00 	.word	0x20000d00
 8009fcc:	20000828 	.word	0x20000828
 8009fd0:	20000824 	.word	0x20000824
 8009fd4:	20000020 	.word	0x20000020

08009fd8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009fd8:	b580      	push	{r7, lr}
 8009fda:	b084      	sub	sp, #16
 8009fdc:	af00      	add	r7, sp, #0
 8009fde:	6078      	str	r0, [r7, #4]
 8009fe0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d10a      	bne.n	8009ffe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fec:	f383 8811 	msr	BASEPRI, r3
 8009ff0:	f3bf 8f6f 	isb	sy
 8009ff4:	f3bf 8f4f 	dsb	sy
 8009ff8:	60fb      	str	r3, [r7, #12]
}
 8009ffa:	bf00      	nop
 8009ffc:	e7fe      	b.n	8009ffc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009ffe:	4b07      	ldr	r3, [pc, #28]	; (800a01c <vTaskPlaceOnEventList+0x44>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	3318      	adds	r3, #24
 800a004:	4619      	mov	r1, r3
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f7fe fde3 	bl	8008bd2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a00c:	2101      	movs	r1, #1
 800a00e:	6838      	ldr	r0, [r7, #0]
 800a010:	f000 fa80 	bl	800a514 <prvAddCurrentTaskToDelayedList>
}
 800a014:	bf00      	nop
 800a016:	3710      	adds	r7, #16
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}
 800a01c:	20000824 	.word	0x20000824

0800a020 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a020:	b580      	push	{r7, lr}
 800a022:	b086      	sub	sp, #24
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d10a      	bne.n	800a048 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a032:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a036:	f383 8811 	msr	BASEPRI, r3
 800a03a:	f3bf 8f6f 	isb	sy
 800a03e:	f3bf 8f4f 	dsb	sy
 800a042:	617b      	str	r3, [r7, #20]
}
 800a044:	bf00      	nop
 800a046:	e7fe      	b.n	800a046 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a048:	4b0a      	ldr	r3, [pc, #40]	; (800a074 <vTaskPlaceOnEventListRestricted+0x54>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	3318      	adds	r3, #24
 800a04e:	4619      	mov	r1, r3
 800a050:	68f8      	ldr	r0, [r7, #12]
 800a052:	f7fe fd9a 	bl	8008b8a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d002      	beq.n	800a062 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a05c:	f04f 33ff 	mov.w	r3, #4294967295
 800a060:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a062:	6879      	ldr	r1, [r7, #4]
 800a064:	68b8      	ldr	r0, [r7, #8]
 800a066:	f000 fa55 	bl	800a514 <prvAddCurrentTaskToDelayedList>
	}
 800a06a:	bf00      	nop
 800a06c:	3718      	adds	r7, #24
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}
 800a072:	bf00      	nop
 800a074:	20000824 	.word	0x20000824

0800a078 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a078:	b580      	push	{r7, lr}
 800a07a:	b086      	sub	sp, #24
 800a07c:	af00      	add	r7, sp, #0
 800a07e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	68db      	ldr	r3, [r3, #12]
 800a084:	68db      	ldr	r3, [r3, #12]
 800a086:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d10a      	bne.n	800a0a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a08e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a092:	f383 8811 	msr	BASEPRI, r3
 800a096:	f3bf 8f6f 	isb	sy
 800a09a:	f3bf 8f4f 	dsb	sy
 800a09e:	60fb      	str	r3, [r7, #12]
}
 800a0a0:	bf00      	nop
 800a0a2:	e7fe      	b.n	800a0a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	3318      	adds	r3, #24
 800a0a8:	4618      	mov	r0, r3
 800a0aa:	f7fe fdcb 	bl	8008c44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0ae:	4b1e      	ldr	r3, [pc, #120]	; (800a128 <xTaskRemoveFromEventList+0xb0>)
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d11d      	bne.n	800a0f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	3304      	adds	r3, #4
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	f7fe fdc2 	bl	8008c44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0c4:	4b19      	ldr	r3, [pc, #100]	; (800a12c <xTaskRemoveFromEventList+0xb4>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d903      	bls.n	800a0d4 <xTaskRemoveFromEventList+0x5c>
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a0d0:	4a16      	ldr	r2, [pc, #88]	; (800a12c <xTaskRemoveFromEventList+0xb4>)
 800a0d2:	6013      	str	r3, [r2, #0]
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a0d8:	4613      	mov	r3, r2
 800a0da:	009b      	lsls	r3, r3, #2
 800a0dc:	4413      	add	r3, r2
 800a0de:	009b      	lsls	r3, r3, #2
 800a0e0:	4a13      	ldr	r2, [pc, #76]	; (800a130 <xTaskRemoveFromEventList+0xb8>)
 800a0e2:	441a      	add	r2, r3
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	3304      	adds	r3, #4
 800a0e8:	4619      	mov	r1, r3
 800a0ea:	4610      	mov	r0, r2
 800a0ec:	f7fe fd4d 	bl	8008b8a <vListInsertEnd>
 800a0f0:	e005      	b.n	800a0fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	3318      	adds	r3, #24
 800a0f6:	4619      	mov	r1, r3
 800a0f8:	480e      	ldr	r0, [pc, #56]	; (800a134 <xTaskRemoveFromEventList+0xbc>)
 800a0fa:	f7fe fd46 	bl	8008b8a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a102:	4b0d      	ldr	r3, [pc, #52]	; (800a138 <xTaskRemoveFromEventList+0xc0>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a108:	429a      	cmp	r2, r3
 800a10a:	d905      	bls.n	800a118 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a10c:	2301      	movs	r3, #1
 800a10e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a110:	4b0a      	ldr	r3, [pc, #40]	; (800a13c <xTaskRemoveFromEventList+0xc4>)
 800a112:	2201      	movs	r2, #1
 800a114:	601a      	str	r2, [r3, #0]
 800a116:	e001      	b.n	800a11c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a118:	2300      	movs	r3, #0
 800a11a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a11c:	697b      	ldr	r3, [r7, #20]
}
 800a11e:	4618      	mov	r0, r3
 800a120:	3718      	adds	r7, #24
 800a122:	46bd      	mov	sp, r7
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	20000d20 	.word	0x20000d20
 800a12c:	20000d00 	.word	0x20000d00
 800a130:	20000828 	.word	0x20000828
 800a134:	20000cb8 	.word	0x20000cb8
 800a138:	20000824 	.word	0x20000824
 800a13c:	20000d0c 	.word	0x20000d0c

0800a140 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a140:	b480      	push	{r7}
 800a142:	b083      	sub	sp, #12
 800a144:	af00      	add	r7, sp, #0
 800a146:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a148:	4b06      	ldr	r3, [pc, #24]	; (800a164 <vTaskInternalSetTimeOutState+0x24>)
 800a14a:	681a      	ldr	r2, [r3, #0]
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a150:	4b05      	ldr	r3, [pc, #20]	; (800a168 <vTaskInternalSetTimeOutState+0x28>)
 800a152:	681a      	ldr	r2, [r3, #0]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	605a      	str	r2, [r3, #4]
}
 800a158:	bf00      	nop
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr
 800a164:	20000d10 	.word	0x20000d10
 800a168:	20000cfc 	.word	0x20000cfc

0800a16c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a16c:	b580      	push	{r7, lr}
 800a16e:	b088      	sub	sp, #32
 800a170:	af00      	add	r7, sp, #0
 800a172:	6078      	str	r0, [r7, #4]
 800a174:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d10a      	bne.n	800a192 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a17c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a180:	f383 8811 	msr	BASEPRI, r3
 800a184:	f3bf 8f6f 	isb	sy
 800a188:	f3bf 8f4f 	dsb	sy
 800a18c:	613b      	str	r3, [r7, #16]
}
 800a18e:	bf00      	nop
 800a190:	e7fe      	b.n	800a190 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a192:	683b      	ldr	r3, [r7, #0]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d10a      	bne.n	800a1ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a198:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a19c:	f383 8811 	msr	BASEPRI, r3
 800a1a0:	f3bf 8f6f 	isb	sy
 800a1a4:	f3bf 8f4f 	dsb	sy
 800a1a8:	60fb      	str	r3, [r7, #12]
}
 800a1aa:	bf00      	nop
 800a1ac:	e7fe      	b.n	800a1ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a1ae:	f000 fe81 	bl	800aeb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a1b2:	4b1d      	ldr	r3, [pc, #116]	; (800a228 <xTaskCheckForTimeOut+0xbc>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	69ba      	ldr	r2, [r7, #24]
 800a1be:	1ad3      	subs	r3, r2, r3
 800a1c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ca:	d102      	bne.n	800a1d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	61fb      	str	r3, [r7, #28]
 800a1d0:	e023      	b.n	800a21a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681a      	ldr	r2, [r3, #0]
 800a1d6:	4b15      	ldr	r3, [pc, #84]	; (800a22c <xTaskCheckForTimeOut+0xc0>)
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d007      	beq.n	800a1ee <xTaskCheckForTimeOut+0x82>
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	685b      	ldr	r3, [r3, #4]
 800a1e2:	69ba      	ldr	r2, [r7, #24]
 800a1e4:	429a      	cmp	r2, r3
 800a1e6:	d302      	bcc.n	800a1ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	61fb      	str	r3, [r7, #28]
 800a1ec:	e015      	b.n	800a21a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	697a      	ldr	r2, [r7, #20]
 800a1f4:	429a      	cmp	r2, r3
 800a1f6:	d20b      	bcs.n	800a210 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a1f8:	683b      	ldr	r3, [r7, #0]
 800a1fa:	681a      	ldr	r2, [r3, #0]
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	1ad2      	subs	r2, r2, r3
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f7ff ff9b 	bl	800a140 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a20a:	2300      	movs	r3, #0
 800a20c:	61fb      	str	r3, [r7, #28]
 800a20e:	e004      	b.n	800a21a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a210:	683b      	ldr	r3, [r7, #0]
 800a212:	2200      	movs	r2, #0
 800a214:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a216:	2301      	movs	r3, #1
 800a218:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a21a:	f000 fe7b 	bl	800af14 <vPortExitCritical>

	return xReturn;
 800a21e:	69fb      	ldr	r3, [r7, #28]
}
 800a220:	4618      	mov	r0, r3
 800a222:	3720      	adds	r7, #32
 800a224:	46bd      	mov	sp, r7
 800a226:	bd80      	pop	{r7, pc}
 800a228:	20000cfc 	.word	0x20000cfc
 800a22c:	20000d10 	.word	0x20000d10

0800a230 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a230:	b480      	push	{r7}
 800a232:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a234:	4b03      	ldr	r3, [pc, #12]	; (800a244 <vTaskMissedYield+0x14>)
 800a236:	2201      	movs	r2, #1
 800a238:	601a      	str	r2, [r3, #0]
}
 800a23a:	bf00      	nop
 800a23c:	46bd      	mov	sp, r7
 800a23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a242:	4770      	bx	lr
 800a244:	20000d0c 	.word	0x20000d0c

0800a248 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a250:	f000 f852 	bl	800a2f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a254:	4b06      	ldr	r3, [pc, #24]	; (800a270 <prvIdleTask+0x28>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2b01      	cmp	r3, #1
 800a25a:	d9f9      	bls.n	800a250 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a25c:	4b05      	ldr	r3, [pc, #20]	; (800a274 <prvIdleTask+0x2c>)
 800a25e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a262:	601a      	str	r2, [r3, #0]
 800a264:	f3bf 8f4f 	dsb	sy
 800a268:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a26c:	e7f0      	b.n	800a250 <prvIdleTask+0x8>
 800a26e:	bf00      	nop
 800a270:	20000828 	.word	0x20000828
 800a274:	e000ed04 	.word	0xe000ed04

0800a278 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a278:	b580      	push	{r7, lr}
 800a27a:	b082      	sub	sp, #8
 800a27c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a27e:	2300      	movs	r3, #0
 800a280:	607b      	str	r3, [r7, #4]
 800a282:	e00c      	b.n	800a29e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a284:	687a      	ldr	r2, [r7, #4]
 800a286:	4613      	mov	r3, r2
 800a288:	009b      	lsls	r3, r3, #2
 800a28a:	4413      	add	r3, r2
 800a28c:	009b      	lsls	r3, r3, #2
 800a28e:	4a12      	ldr	r2, [pc, #72]	; (800a2d8 <prvInitialiseTaskLists+0x60>)
 800a290:	4413      	add	r3, r2
 800a292:	4618      	mov	r0, r3
 800a294:	f7fe fc4c 	bl	8008b30 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	3301      	adds	r3, #1
 800a29c:	607b      	str	r3, [r7, #4]
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2b37      	cmp	r3, #55	; 0x37
 800a2a2:	d9ef      	bls.n	800a284 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a2a4:	480d      	ldr	r0, [pc, #52]	; (800a2dc <prvInitialiseTaskLists+0x64>)
 800a2a6:	f7fe fc43 	bl	8008b30 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a2aa:	480d      	ldr	r0, [pc, #52]	; (800a2e0 <prvInitialiseTaskLists+0x68>)
 800a2ac:	f7fe fc40 	bl	8008b30 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2b0:	480c      	ldr	r0, [pc, #48]	; (800a2e4 <prvInitialiseTaskLists+0x6c>)
 800a2b2:	f7fe fc3d 	bl	8008b30 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2b6:	480c      	ldr	r0, [pc, #48]	; (800a2e8 <prvInitialiseTaskLists+0x70>)
 800a2b8:	f7fe fc3a 	bl	8008b30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a2bc:	480b      	ldr	r0, [pc, #44]	; (800a2ec <prvInitialiseTaskLists+0x74>)
 800a2be:	f7fe fc37 	bl	8008b30 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a2c2:	4b0b      	ldr	r3, [pc, #44]	; (800a2f0 <prvInitialiseTaskLists+0x78>)
 800a2c4:	4a05      	ldr	r2, [pc, #20]	; (800a2dc <prvInitialiseTaskLists+0x64>)
 800a2c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a2c8:	4b0a      	ldr	r3, [pc, #40]	; (800a2f4 <prvInitialiseTaskLists+0x7c>)
 800a2ca:	4a05      	ldr	r2, [pc, #20]	; (800a2e0 <prvInitialiseTaskLists+0x68>)
 800a2cc:	601a      	str	r2, [r3, #0]
}
 800a2ce:	bf00      	nop
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	20000828 	.word	0x20000828
 800a2dc:	20000c88 	.word	0x20000c88
 800a2e0:	20000c9c 	.word	0x20000c9c
 800a2e4:	20000cb8 	.word	0x20000cb8
 800a2e8:	20000ccc 	.word	0x20000ccc
 800a2ec:	20000ce4 	.word	0x20000ce4
 800a2f0:	20000cb0 	.word	0x20000cb0
 800a2f4:	20000cb4 	.word	0x20000cb4

0800a2f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a2fe:	e019      	b.n	800a334 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a300:	f000 fdd8 	bl	800aeb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a304:	4b10      	ldr	r3, [pc, #64]	; (800a348 <prvCheckTasksWaitingTermination+0x50>)
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	68db      	ldr	r3, [r3, #12]
 800a30a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	3304      	adds	r3, #4
 800a310:	4618      	mov	r0, r3
 800a312:	f7fe fc97 	bl	8008c44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a316:	4b0d      	ldr	r3, [pc, #52]	; (800a34c <prvCheckTasksWaitingTermination+0x54>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	3b01      	subs	r3, #1
 800a31c:	4a0b      	ldr	r2, [pc, #44]	; (800a34c <prvCheckTasksWaitingTermination+0x54>)
 800a31e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a320:	4b0b      	ldr	r3, [pc, #44]	; (800a350 <prvCheckTasksWaitingTermination+0x58>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	3b01      	subs	r3, #1
 800a326:	4a0a      	ldr	r2, [pc, #40]	; (800a350 <prvCheckTasksWaitingTermination+0x58>)
 800a328:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a32a:	f000 fdf3 	bl	800af14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 f810 	bl	800a354 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a334:	4b06      	ldr	r3, [pc, #24]	; (800a350 <prvCheckTasksWaitingTermination+0x58>)
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d1e1      	bne.n	800a300 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a33c:	bf00      	nop
 800a33e:	bf00      	nop
 800a340:	3708      	adds	r7, #8
 800a342:	46bd      	mov	sp, r7
 800a344:	bd80      	pop	{r7, pc}
 800a346:	bf00      	nop
 800a348:	20000ccc 	.word	0x20000ccc
 800a34c:	20000cf8 	.word	0x20000cf8
 800a350:	20000ce0 	.word	0x20000ce0

0800a354 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	3354      	adds	r3, #84	; 0x54
 800a360:	4618      	mov	r0, r3
 800a362:	f001 f95d 	bl	800b620 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d108      	bne.n	800a382 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a374:	4618      	mov	r0, r3
 800a376:	f000 ff8b 	bl	800b290 <vPortFree>
				vPortFree( pxTCB );
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 ff88 	bl	800b290 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a380:	e018      	b.n	800a3b4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a388:	2b01      	cmp	r3, #1
 800a38a:	d103      	bne.n	800a394 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a38c:	6878      	ldr	r0, [r7, #4]
 800a38e:	f000 ff7f 	bl	800b290 <vPortFree>
	}
 800a392:	e00f      	b.n	800a3b4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a39a:	2b02      	cmp	r3, #2
 800a39c:	d00a      	beq.n	800a3b4 <prvDeleteTCB+0x60>
	__asm volatile
 800a39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	60fb      	str	r3, [r7, #12]
}
 800a3b0:	bf00      	nop
 800a3b2:	e7fe      	b.n	800a3b2 <prvDeleteTCB+0x5e>
	}
 800a3b4:	bf00      	nop
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a3c2:	4b0c      	ldr	r3, [pc, #48]	; (800a3f4 <prvResetNextTaskUnblockTime+0x38>)
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d104      	bne.n	800a3d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a3cc:	4b0a      	ldr	r3, [pc, #40]	; (800a3f8 <prvResetNextTaskUnblockTime+0x3c>)
 800a3ce:	f04f 32ff 	mov.w	r2, #4294967295
 800a3d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a3d4:	e008      	b.n	800a3e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a3d6:	4b07      	ldr	r3, [pc, #28]	; (800a3f4 <prvResetNextTaskUnblockTime+0x38>)
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	68db      	ldr	r3, [r3, #12]
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	4a04      	ldr	r2, [pc, #16]	; (800a3f8 <prvResetNextTaskUnblockTime+0x3c>)
 800a3e6:	6013      	str	r3, [r2, #0]
}
 800a3e8:	bf00      	nop
 800a3ea:	370c      	adds	r7, #12
 800a3ec:	46bd      	mov	sp, r7
 800a3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3f2:	4770      	bx	lr
 800a3f4:	20000cb0 	.word	0x20000cb0
 800a3f8:	20000d18 	.word	0x20000d18

0800a3fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a402:	4b0b      	ldr	r3, [pc, #44]	; (800a430 <xTaskGetSchedulerState+0x34>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d102      	bne.n	800a410 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a40a:	2301      	movs	r3, #1
 800a40c:	607b      	str	r3, [r7, #4]
 800a40e:	e008      	b.n	800a422 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a410:	4b08      	ldr	r3, [pc, #32]	; (800a434 <xTaskGetSchedulerState+0x38>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d102      	bne.n	800a41e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a418:	2302      	movs	r3, #2
 800a41a:	607b      	str	r3, [r7, #4]
 800a41c:	e001      	b.n	800a422 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a41e:	2300      	movs	r3, #0
 800a420:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a422:	687b      	ldr	r3, [r7, #4]
	}
 800a424:	4618      	mov	r0, r3
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr
 800a430:	20000d04 	.word	0x20000d04
 800a434:	20000d20 	.word	0x20000d20

0800a438 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a444:	2300      	movs	r3, #0
 800a446:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d056      	beq.n	800a4fc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a44e:	4b2e      	ldr	r3, [pc, #184]	; (800a508 <xTaskPriorityDisinherit+0xd0>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	693a      	ldr	r2, [r7, #16]
 800a454:	429a      	cmp	r2, r3
 800a456:	d00a      	beq.n	800a46e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45c:	f383 8811 	msr	BASEPRI, r3
 800a460:	f3bf 8f6f 	isb	sy
 800a464:	f3bf 8f4f 	dsb	sy
 800a468:	60fb      	str	r3, [r7, #12]
}
 800a46a:	bf00      	nop
 800a46c:	e7fe      	b.n	800a46c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a46e:	693b      	ldr	r3, [r7, #16]
 800a470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a472:	2b00      	cmp	r3, #0
 800a474:	d10a      	bne.n	800a48c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47a:	f383 8811 	msr	BASEPRI, r3
 800a47e:	f3bf 8f6f 	isb	sy
 800a482:	f3bf 8f4f 	dsb	sy
 800a486:	60bb      	str	r3, [r7, #8]
}
 800a488:	bf00      	nop
 800a48a:	e7fe      	b.n	800a48a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a490:	1e5a      	subs	r2, r3, #1
 800a492:	693b      	ldr	r3, [r7, #16]
 800a494:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a49a:	693b      	ldr	r3, [r7, #16]
 800a49c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a49e:	429a      	cmp	r2, r3
 800a4a0:	d02c      	beq.n	800a4fc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a4a2:	693b      	ldr	r3, [r7, #16]
 800a4a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d128      	bne.n	800a4fc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	3304      	adds	r3, #4
 800a4ae:	4618      	mov	r0, r3
 800a4b0:	f7fe fbc8 	bl	8008c44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a4b4:	693b      	ldr	r3, [r7, #16]
 800a4b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4bc:	693b      	ldr	r3, [r7, #16]
 800a4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4c0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a4c4:	693b      	ldr	r3, [r7, #16]
 800a4c6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4cc:	4b0f      	ldr	r3, [pc, #60]	; (800a50c <xTaskPriorityDisinherit+0xd4>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	429a      	cmp	r2, r3
 800a4d2:	d903      	bls.n	800a4dc <xTaskPriorityDisinherit+0xa4>
 800a4d4:	693b      	ldr	r3, [r7, #16]
 800a4d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4d8:	4a0c      	ldr	r2, [pc, #48]	; (800a50c <xTaskPriorityDisinherit+0xd4>)
 800a4da:	6013      	str	r3, [r2, #0]
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4e0:	4613      	mov	r3, r2
 800a4e2:	009b      	lsls	r3, r3, #2
 800a4e4:	4413      	add	r3, r2
 800a4e6:	009b      	lsls	r3, r3, #2
 800a4e8:	4a09      	ldr	r2, [pc, #36]	; (800a510 <xTaskPriorityDisinherit+0xd8>)
 800a4ea:	441a      	add	r2, r3
 800a4ec:	693b      	ldr	r3, [r7, #16]
 800a4ee:	3304      	adds	r3, #4
 800a4f0:	4619      	mov	r1, r3
 800a4f2:	4610      	mov	r0, r2
 800a4f4:	f7fe fb49 	bl	8008b8a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a4fc:	697b      	ldr	r3, [r7, #20]
	}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3718      	adds	r7, #24
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	20000824 	.word	0x20000824
 800a50c:	20000d00 	.word	0x20000d00
 800a510:	20000828 	.word	0x20000828

0800a514 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a514:	b580      	push	{r7, lr}
 800a516:	b084      	sub	sp, #16
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a51e:	4b21      	ldr	r3, [pc, #132]	; (800a5a4 <prvAddCurrentTaskToDelayedList+0x90>)
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a524:	4b20      	ldr	r3, [pc, #128]	; (800a5a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	3304      	adds	r3, #4
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7fe fb8a 	bl	8008c44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a536:	d10a      	bne.n	800a54e <prvAddCurrentTaskToDelayedList+0x3a>
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d007      	beq.n	800a54e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a53e:	4b1a      	ldr	r3, [pc, #104]	; (800a5a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	3304      	adds	r3, #4
 800a544:	4619      	mov	r1, r3
 800a546:	4819      	ldr	r0, [pc, #100]	; (800a5ac <prvAddCurrentTaskToDelayedList+0x98>)
 800a548:	f7fe fb1f 	bl	8008b8a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a54c:	e026      	b.n	800a59c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a54e:	68fa      	ldr	r2, [r7, #12]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4413      	add	r3, r2
 800a554:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a556:	4b14      	ldr	r3, [pc, #80]	; (800a5a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	429a      	cmp	r2, r3
 800a564:	d209      	bcs.n	800a57a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a566:	4b12      	ldr	r3, [pc, #72]	; (800a5b0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a568:	681a      	ldr	r2, [r3, #0]
 800a56a:	4b0f      	ldr	r3, [pc, #60]	; (800a5a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	3304      	adds	r3, #4
 800a570:	4619      	mov	r1, r3
 800a572:	4610      	mov	r0, r2
 800a574:	f7fe fb2d 	bl	8008bd2 <vListInsert>
}
 800a578:	e010      	b.n	800a59c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a57a:	4b0e      	ldr	r3, [pc, #56]	; (800a5b4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a57c:	681a      	ldr	r2, [r3, #0]
 800a57e:	4b0a      	ldr	r3, [pc, #40]	; (800a5a8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	3304      	adds	r3, #4
 800a584:	4619      	mov	r1, r3
 800a586:	4610      	mov	r0, r2
 800a588:	f7fe fb23 	bl	8008bd2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a58c:	4b0a      	ldr	r3, [pc, #40]	; (800a5b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	429a      	cmp	r2, r3
 800a594:	d202      	bcs.n	800a59c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a596:	4a08      	ldr	r2, [pc, #32]	; (800a5b8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	6013      	str	r3, [r2, #0]
}
 800a59c:	bf00      	nop
 800a59e:	3710      	adds	r7, #16
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}
 800a5a4:	20000cfc 	.word	0x20000cfc
 800a5a8:	20000824 	.word	0x20000824
 800a5ac:	20000ce4 	.word	0x20000ce4
 800a5b0:	20000cb4 	.word	0x20000cb4
 800a5b4:	20000cb0 	.word	0x20000cb0
 800a5b8:	20000d18 	.word	0x20000d18

0800a5bc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b08a      	sub	sp, #40	; 0x28
 800a5c0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a5c6:	f000 fb07 	bl	800abd8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a5ca:	4b1c      	ldr	r3, [pc, #112]	; (800a63c <xTimerCreateTimerTask+0x80>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d021      	beq.n	800a616 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a5da:	1d3a      	adds	r2, r7, #4
 800a5dc:	f107 0108 	add.w	r1, r7, #8
 800a5e0:	f107 030c 	add.w	r3, r7, #12
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	f7fe fa89 	bl	8008afc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a5ea:	6879      	ldr	r1, [r7, #4]
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	68fa      	ldr	r2, [r7, #12]
 800a5f0:	9202      	str	r2, [sp, #8]
 800a5f2:	9301      	str	r3, [sp, #4]
 800a5f4:	2302      	movs	r3, #2
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	2300      	movs	r3, #0
 800a5fa:	460a      	mov	r2, r1
 800a5fc:	4910      	ldr	r1, [pc, #64]	; (800a640 <xTimerCreateTimerTask+0x84>)
 800a5fe:	4811      	ldr	r0, [pc, #68]	; (800a644 <xTimerCreateTimerTask+0x88>)
 800a600:	f7ff f836 	bl	8009670 <xTaskCreateStatic>
 800a604:	4603      	mov	r3, r0
 800a606:	4a10      	ldr	r2, [pc, #64]	; (800a648 <xTimerCreateTimerTask+0x8c>)
 800a608:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a60a:	4b0f      	ldr	r3, [pc, #60]	; (800a648 <xTimerCreateTimerTask+0x8c>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d001      	beq.n	800a616 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a612:	2301      	movs	r3, #1
 800a614:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d10a      	bne.n	800a632 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a61c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a620:	f383 8811 	msr	BASEPRI, r3
 800a624:	f3bf 8f6f 	isb	sy
 800a628:	f3bf 8f4f 	dsb	sy
 800a62c:	613b      	str	r3, [r7, #16]
}
 800a62e:	bf00      	nop
 800a630:	e7fe      	b.n	800a630 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a632:	697b      	ldr	r3, [r7, #20]
}
 800a634:	4618      	mov	r0, r3
 800a636:	3718      	adds	r7, #24
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}
 800a63c:	20000d54 	.word	0x20000d54
 800a640:	0800c8b8 	.word	0x0800c8b8
 800a644:	0800a781 	.word	0x0800a781
 800a648:	20000d58 	.word	0x20000d58

0800a64c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b08a      	sub	sp, #40	; 0x28
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
 800a658:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a65a:	2300      	movs	r3, #0
 800a65c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10a      	bne.n	800a67a <xTimerGenericCommand+0x2e>
	__asm volatile
 800a664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a668:	f383 8811 	msr	BASEPRI, r3
 800a66c:	f3bf 8f6f 	isb	sy
 800a670:	f3bf 8f4f 	dsb	sy
 800a674:	623b      	str	r3, [r7, #32]
}
 800a676:	bf00      	nop
 800a678:	e7fe      	b.n	800a678 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a67a:	4b1a      	ldr	r3, [pc, #104]	; (800a6e4 <xTimerGenericCommand+0x98>)
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d02a      	beq.n	800a6d8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	2b05      	cmp	r3, #5
 800a692:	dc18      	bgt.n	800a6c6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a694:	f7ff feb2 	bl	800a3fc <xTaskGetSchedulerState>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b02      	cmp	r3, #2
 800a69c:	d109      	bne.n	800a6b2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a69e:	4b11      	ldr	r3, [pc, #68]	; (800a6e4 <xTimerGenericCommand+0x98>)
 800a6a0:	6818      	ldr	r0, [r3, #0]
 800a6a2:	f107 0110 	add.w	r1, r7, #16
 800a6a6:	2300      	movs	r3, #0
 800a6a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6aa:	f7fe fbf9 	bl	8008ea0 <xQueueGenericSend>
 800a6ae:	6278      	str	r0, [r7, #36]	; 0x24
 800a6b0:	e012      	b.n	800a6d8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a6b2:	4b0c      	ldr	r3, [pc, #48]	; (800a6e4 <xTimerGenericCommand+0x98>)
 800a6b4:	6818      	ldr	r0, [r3, #0]
 800a6b6:	f107 0110 	add.w	r1, r7, #16
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	2200      	movs	r2, #0
 800a6be:	f7fe fbef 	bl	8008ea0 <xQueueGenericSend>
 800a6c2:	6278      	str	r0, [r7, #36]	; 0x24
 800a6c4:	e008      	b.n	800a6d8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a6c6:	4b07      	ldr	r3, [pc, #28]	; (800a6e4 <xTimerGenericCommand+0x98>)
 800a6c8:	6818      	ldr	r0, [r3, #0]
 800a6ca:	f107 0110 	add.w	r1, r7, #16
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	683a      	ldr	r2, [r7, #0]
 800a6d2:	f7fe fce3 	bl	800909c <xQueueGenericSendFromISR>
 800a6d6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a6d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3728      	adds	r7, #40	; 0x28
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	20000d54 	.word	0x20000d54

0800a6e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a6e8:	b580      	push	{r7, lr}
 800a6ea:	b088      	sub	sp, #32
 800a6ec:	af02      	add	r7, sp, #8
 800a6ee:	6078      	str	r0, [r7, #4]
 800a6f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a6f2:	4b22      	ldr	r3, [pc, #136]	; (800a77c <prvProcessExpiredTimer+0x94>)
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	68db      	ldr	r3, [r3, #12]
 800a6fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a6fc:	697b      	ldr	r3, [r7, #20]
 800a6fe:	3304      	adds	r3, #4
 800a700:	4618      	mov	r0, r3
 800a702:	f7fe fa9f 	bl	8008c44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a706:	697b      	ldr	r3, [r7, #20]
 800a708:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a70c:	f003 0304 	and.w	r3, r3, #4
 800a710:	2b00      	cmp	r3, #0
 800a712:	d022      	beq.n	800a75a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	699a      	ldr	r2, [r3, #24]
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	18d1      	adds	r1, r2, r3
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	683a      	ldr	r2, [r7, #0]
 800a720:	6978      	ldr	r0, [r7, #20]
 800a722:	f000 f8d1 	bl	800a8c8 <prvInsertTimerInActiveList>
 800a726:	4603      	mov	r3, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d01f      	beq.n	800a76c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a72c:	2300      	movs	r3, #0
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	2300      	movs	r3, #0
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	2100      	movs	r1, #0
 800a736:	6978      	ldr	r0, [r7, #20]
 800a738:	f7ff ff88 	bl	800a64c <xTimerGenericCommand>
 800a73c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	2b00      	cmp	r3, #0
 800a742:	d113      	bne.n	800a76c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a744:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a748:	f383 8811 	msr	BASEPRI, r3
 800a74c:	f3bf 8f6f 	isb	sy
 800a750:	f3bf 8f4f 	dsb	sy
 800a754:	60fb      	str	r3, [r7, #12]
}
 800a756:	bf00      	nop
 800a758:	e7fe      	b.n	800a758 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a760:	f023 0301 	bic.w	r3, r3, #1
 800a764:	b2da      	uxtb	r2, r3
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	6a1b      	ldr	r3, [r3, #32]
 800a770:	6978      	ldr	r0, [r7, #20]
 800a772:	4798      	blx	r3
}
 800a774:	bf00      	nop
 800a776:	3718      	adds	r7, #24
 800a778:	46bd      	mov	sp, r7
 800a77a:	bd80      	pop	{r7, pc}
 800a77c:	20000d4c 	.word	0x20000d4c

0800a780 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b084      	sub	sp, #16
 800a784:	af00      	add	r7, sp, #0
 800a786:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a788:	f107 0308 	add.w	r3, r7, #8
 800a78c:	4618      	mov	r0, r3
 800a78e:	f000 f857 	bl	800a840 <prvGetNextExpireTime>
 800a792:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	4619      	mov	r1, r3
 800a798:	68f8      	ldr	r0, [r7, #12]
 800a79a:	f000 f803 	bl	800a7a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a79e:	f000 f8d5 	bl	800a94c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7a2:	e7f1      	b.n	800a788 <prvTimerTask+0x8>

0800a7a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b084      	sub	sp, #16
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	6078      	str	r0, [r7, #4]
 800a7ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a7ae:	f7ff fa39 	bl	8009c24 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7b2:	f107 0308 	add.w	r3, r7, #8
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f000 f866 	bl	800a888 <prvSampleTimeNow>
 800a7bc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d130      	bne.n	800a826 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a7c4:	683b      	ldr	r3, [r7, #0]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d10a      	bne.n	800a7e0 <prvProcessTimerOrBlockTask+0x3c>
 800a7ca:	687a      	ldr	r2, [r7, #4]
 800a7cc:	68fb      	ldr	r3, [r7, #12]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d806      	bhi.n	800a7e0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a7d2:	f7ff fa35 	bl	8009c40 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a7d6:	68f9      	ldr	r1, [r7, #12]
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f7ff ff85 	bl	800a6e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a7de:	e024      	b.n	800a82a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d008      	beq.n	800a7f8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a7e6:	4b13      	ldr	r3, [pc, #76]	; (800a834 <prvProcessTimerOrBlockTask+0x90>)
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d101      	bne.n	800a7f4 <prvProcessTimerOrBlockTask+0x50>
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	e000      	b.n	800a7f6 <prvProcessTimerOrBlockTask+0x52>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a7f8:	4b0f      	ldr	r3, [pc, #60]	; (800a838 <prvProcessTimerOrBlockTask+0x94>)
 800a7fa:	6818      	ldr	r0, [r3, #0]
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	1ad3      	subs	r3, r2, r3
 800a802:	683a      	ldr	r2, [r7, #0]
 800a804:	4619      	mov	r1, r3
 800a806:	f7fe feff 	bl	8009608 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a80a:	f7ff fa19 	bl	8009c40 <xTaskResumeAll>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d10a      	bne.n	800a82a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a814:	4b09      	ldr	r3, [pc, #36]	; (800a83c <prvProcessTimerOrBlockTask+0x98>)
 800a816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a81a:	601a      	str	r2, [r3, #0]
 800a81c:	f3bf 8f4f 	dsb	sy
 800a820:	f3bf 8f6f 	isb	sy
}
 800a824:	e001      	b.n	800a82a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a826:	f7ff fa0b 	bl	8009c40 <xTaskResumeAll>
}
 800a82a:	bf00      	nop
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
 800a832:	bf00      	nop
 800a834:	20000d50 	.word	0x20000d50
 800a838:	20000d54 	.word	0x20000d54
 800a83c:	e000ed04 	.word	0xe000ed04

0800a840 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a840:	b480      	push	{r7}
 800a842:	b085      	sub	sp, #20
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a848:	4b0e      	ldr	r3, [pc, #56]	; (800a884 <prvGetNextExpireTime+0x44>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d101      	bne.n	800a856 <prvGetNextExpireTime+0x16>
 800a852:	2201      	movs	r2, #1
 800a854:	e000      	b.n	800a858 <prvGetNextExpireTime+0x18>
 800a856:	2200      	movs	r2, #0
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d105      	bne.n	800a870 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a864:	4b07      	ldr	r3, [pc, #28]	; (800a884 <prvGetNextExpireTime+0x44>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	68db      	ldr	r3, [r3, #12]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	60fb      	str	r3, [r7, #12]
 800a86e:	e001      	b.n	800a874 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a870:	2300      	movs	r3, #0
 800a872:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a874:	68fb      	ldr	r3, [r7, #12]
}
 800a876:	4618      	mov	r0, r3
 800a878:	3714      	adds	r7, #20
 800a87a:	46bd      	mov	sp, r7
 800a87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a880:	4770      	bx	lr
 800a882:	bf00      	nop
 800a884:	20000d4c 	.word	0x20000d4c

0800a888 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a890:	f7ff fa74 	bl	8009d7c <xTaskGetTickCount>
 800a894:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a896:	4b0b      	ldr	r3, [pc, #44]	; (800a8c4 <prvSampleTimeNow+0x3c>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	d205      	bcs.n	800a8ac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a8a0:	f000 f936 	bl	800ab10 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	2201      	movs	r2, #1
 800a8a8:	601a      	str	r2, [r3, #0]
 800a8aa:	e002      	b.n	800a8b2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a8b2:	4a04      	ldr	r2, [pc, #16]	; (800a8c4 <prvSampleTimeNow+0x3c>)
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
}
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	3710      	adds	r7, #16
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	20000d5c 	.word	0x20000d5c

0800a8c8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	60f8      	str	r0, [r7, #12]
 800a8d0:	60b9      	str	r1, [r7, #8]
 800a8d2:	607a      	str	r2, [r7, #4]
 800a8d4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	68ba      	ldr	r2, [r7, #8]
 800a8de:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	68fa      	ldr	r2, [r7, #12]
 800a8e4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a8e6:	68ba      	ldr	r2, [r7, #8]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	d812      	bhi.n	800a914 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	1ad2      	subs	r2, r2, r3
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	699b      	ldr	r3, [r3, #24]
 800a8f8:	429a      	cmp	r2, r3
 800a8fa:	d302      	bcc.n	800a902 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	617b      	str	r3, [r7, #20]
 800a900:	e01b      	b.n	800a93a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a902:	4b10      	ldr	r3, [pc, #64]	; (800a944 <prvInsertTimerInActiveList+0x7c>)
 800a904:	681a      	ldr	r2, [r3, #0]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	3304      	adds	r3, #4
 800a90a:	4619      	mov	r1, r3
 800a90c:	4610      	mov	r0, r2
 800a90e:	f7fe f960 	bl	8008bd2 <vListInsert>
 800a912:	e012      	b.n	800a93a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a914:	687a      	ldr	r2, [r7, #4]
 800a916:	683b      	ldr	r3, [r7, #0]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d206      	bcs.n	800a92a <prvInsertTimerInActiveList+0x62>
 800a91c:	68ba      	ldr	r2, [r7, #8]
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	429a      	cmp	r2, r3
 800a922:	d302      	bcc.n	800a92a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a924:	2301      	movs	r3, #1
 800a926:	617b      	str	r3, [r7, #20]
 800a928:	e007      	b.n	800a93a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a92a:	4b07      	ldr	r3, [pc, #28]	; (800a948 <prvInsertTimerInActiveList+0x80>)
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	3304      	adds	r3, #4
 800a932:	4619      	mov	r1, r3
 800a934:	4610      	mov	r0, r2
 800a936:	f7fe f94c 	bl	8008bd2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a93a:	697b      	ldr	r3, [r7, #20]
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3718      	adds	r7, #24
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}
 800a944:	20000d50 	.word	0x20000d50
 800a948:	20000d4c 	.word	0x20000d4c

0800a94c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b08e      	sub	sp, #56	; 0x38
 800a950:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a952:	e0ca      	b.n	800aaea <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2b00      	cmp	r3, #0
 800a958:	da18      	bge.n	800a98c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a95a:	1d3b      	adds	r3, r7, #4
 800a95c:	3304      	adds	r3, #4
 800a95e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a962:	2b00      	cmp	r3, #0
 800a964:	d10a      	bne.n	800a97c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a96a:	f383 8811 	msr	BASEPRI, r3
 800a96e:	f3bf 8f6f 	isb	sy
 800a972:	f3bf 8f4f 	dsb	sy
 800a976:	61fb      	str	r3, [r7, #28]
}
 800a978:	bf00      	nop
 800a97a:	e7fe      	b.n	800a97a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a982:	6850      	ldr	r0, [r2, #4]
 800a984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a986:	6892      	ldr	r2, [r2, #8]
 800a988:	4611      	mov	r1, r2
 800a98a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f2c0 80aa 	blt.w	800aae8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99a:	695b      	ldr	r3, [r3, #20]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d004      	beq.n	800a9aa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9a2:	3304      	adds	r3, #4
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7fe f94d 	bl	8008c44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9aa:	463b      	mov	r3, r7
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	f7ff ff6b 	bl	800a888 <prvSampleTimeNow>
 800a9b2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2b09      	cmp	r3, #9
 800a9b8:	f200 8097 	bhi.w	800aaea <prvProcessReceivedCommands+0x19e>
 800a9bc:	a201      	add	r2, pc, #4	; (adr r2, 800a9c4 <prvProcessReceivedCommands+0x78>)
 800a9be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9c2:	bf00      	nop
 800a9c4:	0800a9ed 	.word	0x0800a9ed
 800a9c8:	0800a9ed 	.word	0x0800a9ed
 800a9cc:	0800a9ed 	.word	0x0800a9ed
 800a9d0:	0800aa61 	.word	0x0800aa61
 800a9d4:	0800aa75 	.word	0x0800aa75
 800a9d8:	0800aabf 	.word	0x0800aabf
 800a9dc:	0800a9ed 	.word	0x0800a9ed
 800a9e0:	0800a9ed 	.word	0x0800a9ed
 800a9e4:	0800aa61 	.word	0x0800aa61
 800a9e8:	0800aa75 	.word	0x0800aa75
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a9ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9f2:	f043 0301 	orr.w	r3, r3, #1
 800a9f6:	b2da      	uxtb	r2, r3
 800a9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa02:	699b      	ldr	r3, [r3, #24]
 800aa04:	18d1      	adds	r1, r2, r3
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa0c:	f7ff ff5c 	bl	800a8c8 <prvInsertTimerInActiveList>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d069      	beq.n	800aaea <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa18:	6a1b      	ldr	r3, [r3, #32]
 800aa1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa24:	f003 0304 	and.w	r3, r3, #4
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d05e      	beq.n	800aaea <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aa2c:	68ba      	ldr	r2, [r7, #8]
 800aa2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa30:	699b      	ldr	r3, [r3, #24]
 800aa32:	441a      	add	r2, r3
 800aa34:	2300      	movs	r3, #0
 800aa36:	9300      	str	r3, [sp, #0]
 800aa38:	2300      	movs	r3, #0
 800aa3a:	2100      	movs	r1, #0
 800aa3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa3e:	f7ff fe05 	bl	800a64c <xTimerGenericCommand>
 800aa42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aa44:	6a3b      	ldr	r3, [r7, #32]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	d14f      	bne.n	800aaea <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aa4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa4e:	f383 8811 	msr	BASEPRI, r3
 800aa52:	f3bf 8f6f 	isb	sy
 800aa56:	f3bf 8f4f 	dsb	sy
 800aa5a:	61bb      	str	r3, [r7, #24]
}
 800aa5c:	bf00      	nop
 800aa5e:	e7fe      	b.n	800aa5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aa60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa66:	f023 0301 	bic.w	r3, r3, #1
 800aa6a:	b2da      	uxtb	r2, r3
 800aa6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aa72:	e03a      	b.n	800aaea <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa7a:	f043 0301 	orr.w	r3, r3, #1
 800aa7e:	b2da      	uxtb	r2, r3
 800aa80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aa86:	68ba      	ldr	r2, [r7, #8]
 800aa88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aa8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8e:	699b      	ldr	r3, [r3, #24]
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d10a      	bne.n	800aaaa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aa94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa98:	f383 8811 	msr	BASEPRI, r3
 800aa9c:	f3bf 8f6f 	isb	sy
 800aaa0:	f3bf 8f4f 	dsb	sy
 800aaa4:	617b      	str	r3, [r7, #20]
}
 800aaa6:	bf00      	nop
 800aaa8:	e7fe      	b.n	800aaa8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aaaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaac:	699a      	ldr	r2, [r3, #24]
 800aaae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab0:	18d1      	adds	r1, r2, r3
 800aab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aab6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aab8:	f7ff ff06 	bl	800a8c8 <prvInsertTimerInActiveList>
					break;
 800aabc:	e015      	b.n	800aaea <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aabe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aac4:	f003 0302 	and.w	r3, r3, #2
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d103      	bne.n	800aad4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800aacc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aace:	f000 fbdf 	bl	800b290 <vPortFree>
 800aad2:	e00a      	b.n	800aaea <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aada:	f023 0301 	bic.w	r3, r3, #1
 800aade:	b2da      	uxtb	r2, r3
 800aae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aae6:	e000      	b.n	800aaea <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aae8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aaea:	4b08      	ldr	r3, [pc, #32]	; (800ab0c <prvProcessReceivedCommands+0x1c0>)
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	1d39      	adds	r1, r7, #4
 800aaf0:	2200      	movs	r2, #0
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	f7fe fb6e 	bl	80091d4 <xQueueReceive>
 800aaf8:	4603      	mov	r3, r0
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	f47f af2a 	bne.w	800a954 <prvProcessReceivedCommands+0x8>
	}
}
 800ab00:	bf00      	nop
 800ab02:	bf00      	nop
 800ab04:	3730      	adds	r7, #48	; 0x30
 800ab06:	46bd      	mov	sp, r7
 800ab08:	bd80      	pop	{r7, pc}
 800ab0a:	bf00      	nop
 800ab0c:	20000d54 	.word	0x20000d54

0800ab10 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ab10:	b580      	push	{r7, lr}
 800ab12:	b088      	sub	sp, #32
 800ab14:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab16:	e048      	b.n	800abaa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab18:	4b2d      	ldr	r3, [pc, #180]	; (800abd0 <prvSwitchTimerLists+0xc0>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	68db      	ldr	r3, [r3, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab22:	4b2b      	ldr	r3, [pc, #172]	; (800abd0 <prvSwitchTimerLists+0xc0>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68db      	ldr	r3, [r3, #12]
 800ab28:	68db      	ldr	r3, [r3, #12]
 800ab2a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	3304      	adds	r3, #4
 800ab30:	4618      	mov	r0, r3
 800ab32:	f7fe f887 	bl	8008c44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	6a1b      	ldr	r3, [r3, #32]
 800ab3a:	68f8      	ldr	r0, [r7, #12]
 800ab3c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab44:	f003 0304 	and.w	r3, r3, #4
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d02e      	beq.n	800abaa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	699b      	ldr	r3, [r3, #24]
 800ab50:	693a      	ldr	r2, [r7, #16]
 800ab52:	4413      	add	r3, r2
 800ab54:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ab56:	68ba      	ldr	r2, [r7, #8]
 800ab58:	693b      	ldr	r3, [r7, #16]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	d90e      	bls.n	800ab7c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	68ba      	ldr	r2, [r7, #8]
 800ab62:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ab6a:	4b19      	ldr	r3, [pc, #100]	; (800abd0 <prvSwitchTimerLists+0xc0>)
 800ab6c:	681a      	ldr	r2, [r3, #0]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	3304      	adds	r3, #4
 800ab72:	4619      	mov	r1, r3
 800ab74:	4610      	mov	r0, r2
 800ab76:	f7fe f82c 	bl	8008bd2 <vListInsert>
 800ab7a:	e016      	b.n	800abaa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	9300      	str	r3, [sp, #0]
 800ab80:	2300      	movs	r3, #0
 800ab82:	693a      	ldr	r2, [r7, #16]
 800ab84:	2100      	movs	r1, #0
 800ab86:	68f8      	ldr	r0, [r7, #12]
 800ab88:	f7ff fd60 	bl	800a64c <xTimerGenericCommand>
 800ab8c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d10a      	bne.n	800abaa <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ab94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab98:	f383 8811 	msr	BASEPRI, r3
 800ab9c:	f3bf 8f6f 	isb	sy
 800aba0:	f3bf 8f4f 	dsb	sy
 800aba4:	603b      	str	r3, [r7, #0]
}
 800aba6:	bf00      	nop
 800aba8:	e7fe      	b.n	800aba8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800abaa:	4b09      	ldr	r3, [pc, #36]	; (800abd0 <prvSwitchTimerLists+0xc0>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d1b1      	bne.n	800ab18 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800abb4:	4b06      	ldr	r3, [pc, #24]	; (800abd0 <prvSwitchTimerLists+0xc0>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800abba:	4b06      	ldr	r3, [pc, #24]	; (800abd4 <prvSwitchTimerLists+0xc4>)
 800abbc:	681b      	ldr	r3, [r3, #0]
 800abbe:	4a04      	ldr	r2, [pc, #16]	; (800abd0 <prvSwitchTimerLists+0xc0>)
 800abc0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800abc2:	4a04      	ldr	r2, [pc, #16]	; (800abd4 <prvSwitchTimerLists+0xc4>)
 800abc4:	697b      	ldr	r3, [r7, #20]
 800abc6:	6013      	str	r3, [r2, #0]
}
 800abc8:	bf00      	nop
 800abca:	3718      	adds	r7, #24
 800abcc:	46bd      	mov	sp, r7
 800abce:	bd80      	pop	{r7, pc}
 800abd0:	20000d4c 	.word	0x20000d4c
 800abd4:	20000d50 	.word	0x20000d50

0800abd8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b082      	sub	sp, #8
 800abdc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800abde:	f000 f969 	bl	800aeb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800abe2:	4b15      	ldr	r3, [pc, #84]	; (800ac38 <prvCheckForValidListAndQueue+0x60>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d120      	bne.n	800ac2c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800abea:	4814      	ldr	r0, [pc, #80]	; (800ac3c <prvCheckForValidListAndQueue+0x64>)
 800abec:	f7fd ffa0 	bl	8008b30 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800abf0:	4813      	ldr	r0, [pc, #76]	; (800ac40 <prvCheckForValidListAndQueue+0x68>)
 800abf2:	f7fd ff9d 	bl	8008b30 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800abf6:	4b13      	ldr	r3, [pc, #76]	; (800ac44 <prvCheckForValidListAndQueue+0x6c>)
 800abf8:	4a10      	ldr	r2, [pc, #64]	; (800ac3c <prvCheckForValidListAndQueue+0x64>)
 800abfa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800abfc:	4b12      	ldr	r3, [pc, #72]	; (800ac48 <prvCheckForValidListAndQueue+0x70>)
 800abfe:	4a10      	ldr	r2, [pc, #64]	; (800ac40 <prvCheckForValidListAndQueue+0x68>)
 800ac00:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ac02:	2300      	movs	r3, #0
 800ac04:	9300      	str	r3, [sp, #0]
 800ac06:	4b11      	ldr	r3, [pc, #68]	; (800ac4c <prvCheckForValidListAndQueue+0x74>)
 800ac08:	4a11      	ldr	r2, [pc, #68]	; (800ac50 <prvCheckForValidListAndQueue+0x78>)
 800ac0a:	2110      	movs	r1, #16
 800ac0c:	200a      	movs	r0, #10
 800ac0e:	f7fe f8ab 	bl	8008d68 <xQueueGenericCreateStatic>
 800ac12:	4603      	mov	r3, r0
 800ac14:	4a08      	ldr	r2, [pc, #32]	; (800ac38 <prvCheckForValidListAndQueue+0x60>)
 800ac16:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ac18:	4b07      	ldr	r3, [pc, #28]	; (800ac38 <prvCheckForValidListAndQueue+0x60>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d005      	beq.n	800ac2c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac20:	4b05      	ldr	r3, [pc, #20]	; (800ac38 <prvCheckForValidListAndQueue+0x60>)
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	490b      	ldr	r1, [pc, #44]	; (800ac54 <prvCheckForValidListAndQueue+0x7c>)
 800ac26:	4618      	mov	r0, r3
 800ac28:	f7fe fcc4 	bl	80095b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac2c:	f000 f972 	bl	800af14 <vPortExitCritical>
}
 800ac30:	bf00      	nop
 800ac32:	46bd      	mov	sp, r7
 800ac34:	bd80      	pop	{r7, pc}
 800ac36:	bf00      	nop
 800ac38:	20000d54 	.word	0x20000d54
 800ac3c:	20000d24 	.word	0x20000d24
 800ac40:	20000d38 	.word	0x20000d38
 800ac44:	20000d4c 	.word	0x20000d4c
 800ac48:	20000d50 	.word	0x20000d50
 800ac4c:	20000e00 	.word	0x20000e00
 800ac50:	20000d60 	.word	0x20000d60
 800ac54:	0800c8c0 	.word	0x0800c8c0

0800ac58 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b085      	sub	sp, #20
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	60f8      	str	r0, [r7, #12]
 800ac60:	60b9      	str	r1, [r7, #8]
 800ac62:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	3b04      	subs	r3, #4
 800ac68:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ac70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	3b04      	subs	r3, #4
 800ac76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ac78:	68bb      	ldr	r3, [r7, #8]
 800ac7a:	f023 0201 	bic.w	r2, r3, #1
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	3b04      	subs	r3, #4
 800ac86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ac88:	4a0c      	ldr	r2, [pc, #48]	; (800acbc <pxPortInitialiseStack+0x64>)
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	3b14      	subs	r3, #20
 800ac92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	3b04      	subs	r3, #4
 800ac9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f06f 0202 	mvn.w	r2, #2
 800aca6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	3b20      	subs	r3, #32
 800acac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800acae:	68fb      	ldr	r3, [r7, #12]
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3714      	adds	r7, #20
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr
 800acbc:	0800acc1 	.word	0x0800acc1

0800acc0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800acc0:	b480      	push	{r7}
 800acc2:	b085      	sub	sp, #20
 800acc4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800acc6:	2300      	movs	r3, #0
 800acc8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800acca:	4b12      	ldr	r3, [pc, #72]	; (800ad14 <prvTaskExitError+0x54>)
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800acd2:	d00a      	beq.n	800acea <prvTaskExitError+0x2a>
	__asm volatile
 800acd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acd8:	f383 8811 	msr	BASEPRI, r3
 800acdc:	f3bf 8f6f 	isb	sy
 800ace0:	f3bf 8f4f 	dsb	sy
 800ace4:	60fb      	str	r3, [r7, #12]
}
 800ace6:	bf00      	nop
 800ace8:	e7fe      	b.n	800ace8 <prvTaskExitError+0x28>
	__asm volatile
 800acea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acee:	f383 8811 	msr	BASEPRI, r3
 800acf2:	f3bf 8f6f 	isb	sy
 800acf6:	f3bf 8f4f 	dsb	sy
 800acfa:	60bb      	str	r3, [r7, #8]
}
 800acfc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800acfe:	bf00      	nop
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d0fc      	beq.n	800ad00 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad06:	bf00      	nop
 800ad08:	bf00      	nop
 800ad0a:	3714      	adds	r7, #20
 800ad0c:	46bd      	mov	sp, r7
 800ad0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad12:	4770      	bx	lr
 800ad14:	2000001c 	.word	0x2000001c
	...

0800ad20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad20:	4b07      	ldr	r3, [pc, #28]	; (800ad40 <pxCurrentTCBConst2>)
 800ad22:	6819      	ldr	r1, [r3, #0]
 800ad24:	6808      	ldr	r0, [r1, #0]
 800ad26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad2a:	f380 8809 	msr	PSP, r0
 800ad2e:	f3bf 8f6f 	isb	sy
 800ad32:	f04f 0000 	mov.w	r0, #0
 800ad36:	f380 8811 	msr	BASEPRI, r0
 800ad3a:	4770      	bx	lr
 800ad3c:	f3af 8000 	nop.w

0800ad40 <pxCurrentTCBConst2>:
 800ad40:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad44:	bf00      	nop
 800ad46:	bf00      	nop

0800ad48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad48:	4808      	ldr	r0, [pc, #32]	; (800ad6c <prvPortStartFirstTask+0x24>)
 800ad4a:	6800      	ldr	r0, [r0, #0]
 800ad4c:	6800      	ldr	r0, [r0, #0]
 800ad4e:	f380 8808 	msr	MSP, r0
 800ad52:	f04f 0000 	mov.w	r0, #0
 800ad56:	f380 8814 	msr	CONTROL, r0
 800ad5a:	b662      	cpsie	i
 800ad5c:	b661      	cpsie	f
 800ad5e:	f3bf 8f4f 	dsb	sy
 800ad62:	f3bf 8f6f 	isb	sy
 800ad66:	df00      	svc	0
 800ad68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ad6a:	bf00      	nop
 800ad6c:	e000ed08 	.word	0xe000ed08

0800ad70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ad76:	4b46      	ldr	r3, [pc, #280]	; (800ae90 <xPortStartScheduler+0x120>)
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	4a46      	ldr	r2, [pc, #280]	; (800ae94 <xPortStartScheduler+0x124>)
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	d10a      	bne.n	800ad96 <xPortStartScheduler+0x26>
	__asm volatile
 800ad80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad84:	f383 8811 	msr	BASEPRI, r3
 800ad88:	f3bf 8f6f 	isb	sy
 800ad8c:	f3bf 8f4f 	dsb	sy
 800ad90:	613b      	str	r3, [r7, #16]
}
 800ad92:	bf00      	nop
 800ad94:	e7fe      	b.n	800ad94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ad96:	4b3e      	ldr	r3, [pc, #248]	; (800ae90 <xPortStartScheduler+0x120>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a3f      	ldr	r2, [pc, #252]	; (800ae98 <xPortStartScheduler+0x128>)
 800ad9c:	4293      	cmp	r3, r2
 800ad9e:	d10a      	bne.n	800adb6 <xPortStartScheduler+0x46>
	__asm volatile
 800ada0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ada4:	f383 8811 	msr	BASEPRI, r3
 800ada8:	f3bf 8f6f 	isb	sy
 800adac:	f3bf 8f4f 	dsb	sy
 800adb0:	60fb      	str	r3, [r7, #12]
}
 800adb2:	bf00      	nop
 800adb4:	e7fe      	b.n	800adb4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800adb6:	4b39      	ldr	r3, [pc, #228]	; (800ae9c <xPortStartScheduler+0x12c>)
 800adb8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800adc2:	697b      	ldr	r3, [r7, #20]
 800adc4:	22ff      	movs	r2, #255	; 0xff
 800adc6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800adc8:	697b      	ldr	r3, [r7, #20]
 800adca:	781b      	ldrb	r3, [r3, #0]
 800adcc:	b2db      	uxtb	r3, r3
 800adce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800add0:	78fb      	ldrb	r3, [r7, #3]
 800add2:	b2db      	uxtb	r3, r3
 800add4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800add8:	b2da      	uxtb	r2, r3
 800adda:	4b31      	ldr	r3, [pc, #196]	; (800aea0 <xPortStartScheduler+0x130>)
 800addc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800adde:	4b31      	ldr	r3, [pc, #196]	; (800aea4 <xPortStartScheduler+0x134>)
 800ade0:	2207      	movs	r2, #7
 800ade2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ade4:	e009      	b.n	800adfa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ade6:	4b2f      	ldr	r3, [pc, #188]	; (800aea4 <xPortStartScheduler+0x134>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	3b01      	subs	r3, #1
 800adec:	4a2d      	ldr	r2, [pc, #180]	; (800aea4 <xPortStartScheduler+0x134>)
 800adee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800adf0:	78fb      	ldrb	r3, [r7, #3]
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	005b      	lsls	r3, r3, #1
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800adfa:	78fb      	ldrb	r3, [r7, #3]
 800adfc:	b2db      	uxtb	r3, r3
 800adfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae02:	2b80      	cmp	r3, #128	; 0x80
 800ae04:	d0ef      	beq.n	800ade6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ae06:	4b27      	ldr	r3, [pc, #156]	; (800aea4 <xPortStartScheduler+0x134>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f1c3 0307 	rsb	r3, r3, #7
 800ae0e:	2b04      	cmp	r3, #4
 800ae10:	d00a      	beq.n	800ae28 <xPortStartScheduler+0xb8>
	__asm volatile
 800ae12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae16:	f383 8811 	msr	BASEPRI, r3
 800ae1a:	f3bf 8f6f 	isb	sy
 800ae1e:	f3bf 8f4f 	dsb	sy
 800ae22:	60bb      	str	r3, [r7, #8]
}
 800ae24:	bf00      	nop
 800ae26:	e7fe      	b.n	800ae26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae28:	4b1e      	ldr	r3, [pc, #120]	; (800aea4 <xPortStartScheduler+0x134>)
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	021b      	lsls	r3, r3, #8
 800ae2e:	4a1d      	ldr	r2, [pc, #116]	; (800aea4 <xPortStartScheduler+0x134>)
 800ae30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae32:	4b1c      	ldr	r3, [pc, #112]	; (800aea4 <xPortStartScheduler+0x134>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae3a:	4a1a      	ldr	r2, [pc, #104]	; (800aea4 <xPortStartScheduler+0x134>)
 800ae3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	b2da      	uxtb	r2, r3
 800ae42:	697b      	ldr	r3, [r7, #20]
 800ae44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae46:	4b18      	ldr	r3, [pc, #96]	; (800aea8 <xPortStartScheduler+0x138>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	4a17      	ldr	r2, [pc, #92]	; (800aea8 <xPortStartScheduler+0x138>)
 800ae4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae52:	4b15      	ldr	r3, [pc, #84]	; (800aea8 <xPortStartScheduler+0x138>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4a14      	ldr	r2, [pc, #80]	; (800aea8 <xPortStartScheduler+0x138>)
 800ae58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ae5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae5e:	f000 f8dd 	bl	800b01c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ae62:	4b12      	ldr	r3, [pc, #72]	; (800aeac <xPortStartScheduler+0x13c>)
 800ae64:	2200      	movs	r2, #0
 800ae66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ae68:	f000 f8fc 	bl	800b064 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ae6c:	4b10      	ldr	r3, [pc, #64]	; (800aeb0 <xPortStartScheduler+0x140>)
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	4a0f      	ldr	r2, [pc, #60]	; (800aeb0 <xPortStartScheduler+0x140>)
 800ae72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ae76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ae78:	f7ff ff66 	bl	800ad48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ae7c:	f7ff f848 	bl	8009f10 <vTaskSwitchContext>
	prvTaskExitError();
 800ae80:	f7ff ff1e 	bl	800acc0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ae84:	2300      	movs	r3, #0
}
 800ae86:	4618      	mov	r0, r3
 800ae88:	3718      	adds	r7, #24
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	bd80      	pop	{r7, pc}
 800ae8e:	bf00      	nop
 800ae90:	e000ed00 	.word	0xe000ed00
 800ae94:	410fc271 	.word	0x410fc271
 800ae98:	410fc270 	.word	0x410fc270
 800ae9c:	e000e400 	.word	0xe000e400
 800aea0:	20000e50 	.word	0x20000e50
 800aea4:	20000e54 	.word	0x20000e54
 800aea8:	e000ed20 	.word	0xe000ed20
 800aeac:	2000001c 	.word	0x2000001c
 800aeb0:	e000ef34 	.word	0xe000ef34

0800aeb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
	__asm volatile
 800aeba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aebe:	f383 8811 	msr	BASEPRI, r3
 800aec2:	f3bf 8f6f 	isb	sy
 800aec6:	f3bf 8f4f 	dsb	sy
 800aeca:	607b      	str	r3, [r7, #4]
}
 800aecc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800aece:	4b0f      	ldr	r3, [pc, #60]	; (800af0c <vPortEnterCritical+0x58>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	3301      	adds	r3, #1
 800aed4:	4a0d      	ldr	r2, [pc, #52]	; (800af0c <vPortEnterCritical+0x58>)
 800aed6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800aed8:	4b0c      	ldr	r3, [pc, #48]	; (800af0c <vPortEnterCritical+0x58>)
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d10f      	bne.n	800af00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800aee0:	4b0b      	ldr	r3, [pc, #44]	; (800af10 <vPortEnterCritical+0x5c>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d00a      	beq.n	800af00 <vPortEnterCritical+0x4c>
	__asm volatile
 800aeea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aeee:	f383 8811 	msr	BASEPRI, r3
 800aef2:	f3bf 8f6f 	isb	sy
 800aef6:	f3bf 8f4f 	dsb	sy
 800aefa:	603b      	str	r3, [r7, #0]
}
 800aefc:	bf00      	nop
 800aefe:	e7fe      	b.n	800aefe <vPortEnterCritical+0x4a>
	}
}
 800af00:	bf00      	nop
 800af02:	370c      	adds	r7, #12
 800af04:	46bd      	mov	sp, r7
 800af06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af0a:	4770      	bx	lr
 800af0c:	2000001c 	.word	0x2000001c
 800af10:	e000ed04 	.word	0xe000ed04

0800af14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800af1a:	4b12      	ldr	r3, [pc, #72]	; (800af64 <vPortExitCritical+0x50>)
 800af1c:	681b      	ldr	r3, [r3, #0]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d10a      	bne.n	800af38 <vPortExitCritical+0x24>
	__asm volatile
 800af22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af26:	f383 8811 	msr	BASEPRI, r3
 800af2a:	f3bf 8f6f 	isb	sy
 800af2e:	f3bf 8f4f 	dsb	sy
 800af32:	607b      	str	r3, [r7, #4]
}
 800af34:	bf00      	nop
 800af36:	e7fe      	b.n	800af36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800af38:	4b0a      	ldr	r3, [pc, #40]	; (800af64 <vPortExitCritical+0x50>)
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	3b01      	subs	r3, #1
 800af3e:	4a09      	ldr	r2, [pc, #36]	; (800af64 <vPortExitCritical+0x50>)
 800af40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af42:	4b08      	ldr	r3, [pc, #32]	; (800af64 <vPortExitCritical+0x50>)
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d105      	bne.n	800af56 <vPortExitCritical+0x42>
 800af4a:	2300      	movs	r3, #0
 800af4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	f383 8811 	msr	BASEPRI, r3
}
 800af54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800af56:	bf00      	nop
 800af58:	370c      	adds	r7, #12
 800af5a:	46bd      	mov	sp, r7
 800af5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af60:	4770      	bx	lr
 800af62:	bf00      	nop
 800af64:	2000001c 	.word	0x2000001c
	...

0800af70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800af70:	f3ef 8009 	mrs	r0, PSP
 800af74:	f3bf 8f6f 	isb	sy
 800af78:	4b15      	ldr	r3, [pc, #84]	; (800afd0 <pxCurrentTCBConst>)
 800af7a:	681a      	ldr	r2, [r3, #0]
 800af7c:	f01e 0f10 	tst.w	lr, #16
 800af80:	bf08      	it	eq
 800af82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800af86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af8a:	6010      	str	r0, [r2, #0]
 800af8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800af90:	f04f 0050 	mov.w	r0, #80	; 0x50
 800af94:	f380 8811 	msr	BASEPRI, r0
 800af98:	f3bf 8f4f 	dsb	sy
 800af9c:	f3bf 8f6f 	isb	sy
 800afa0:	f7fe ffb6 	bl	8009f10 <vTaskSwitchContext>
 800afa4:	f04f 0000 	mov.w	r0, #0
 800afa8:	f380 8811 	msr	BASEPRI, r0
 800afac:	bc09      	pop	{r0, r3}
 800afae:	6819      	ldr	r1, [r3, #0]
 800afb0:	6808      	ldr	r0, [r1, #0]
 800afb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afb6:	f01e 0f10 	tst.w	lr, #16
 800afba:	bf08      	it	eq
 800afbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800afc0:	f380 8809 	msr	PSP, r0
 800afc4:	f3bf 8f6f 	isb	sy
 800afc8:	4770      	bx	lr
 800afca:	bf00      	nop
 800afcc:	f3af 8000 	nop.w

0800afd0 <pxCurrentTCBConst>:
 800afd0:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800afd4:	bf00      	nop
 800afd6:	bf00      	nop

0800afd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800afd8:	b580      	push	{r7, lr}
 800afda:	b082      	sub	sp, #8
 800afdc:	af00      	add	r7, sp, #0
	__asm volatile
 800afde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe2:	f383 8811 	msr	BASEPRI, r3
 800afe6:	f3bf 8f6f 	isb	sy
 800afea:	f3bf 8f4f 	dsb	sy
 800afee:	607b      	str	r3, [r7, #4]
}
 800aff0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aff2:	f7fe fed3 	bl	8009d9c <xTaskIncrementTick>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d003      	beq.n	800b004 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800affc:	4b06      	ldr	r3, [pc, #24]	; (800b018 <xPortSysTickHandler+0x40>)
 800affe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b002:	601a      	str	r2, [r3, #0]
 800b004:	2300      	movs	r3, #0
 800b006:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	f383 8811 	msr	BASEPRI, r3
}
 800b00e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b010:	bf00      	nop
 800b012:	3708      	adds	r7, #8
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}
 800b018:	e000ed04 	.word	0xe000ed04

0800b01c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b01c:	b480      	push	{r7}
 800b01e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b020:	4b0b      	ldr	r3, [pc, #44]	; (800b050 <vPortSetupTimerInterrupt+0x34>)
 800b022:	2200      	movs	r2, #0
 800b024:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b026:	4b0b      	ldr	r3, [pc, #44]	; (800b054 <vPortSetupTimerInterrupt+0x38>)
 800b028:	2200      	movs	r2, #0
 800b02a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b02c:	4b0a      	ldr	r3, [pc, #40]	; (800b058 <vPortSetupTimerInterrupt+0x3c>)
 800b02e:	681b      	ldr	r3, [r3, #0]
 800b030:	4a0a      	ldr	r2, [pc, #40]	; (800b05c <vPortSetupTimerInterrupt+0x40>)
 800b032:	fba2 2303 	umull	r2, r3, r2, r3
 800b036:	099b      	lsrs	r3, r3, #6
 800b038:	4a09      	ldr	r2, [pc, #36]	; (800b060 <vPortSetupTimerInterrupt+0x44>)
 800b03a:	3b01      	subs	r3, #1
 800b03c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b03e:	4b04      	ldr	r3, [pc, #16]	; (800b050 <vPortSetupTimerInterrupt+0x34>)
 800b040:	2207      	movs	r2, #7
 800b042:	601a      	str	r2, [r3, #0]
}
 800b044:	bf00      	nop
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr
 800b04e:	bf00      	nop
 800b050:	e000e010 	.word	0xe000e010
 800b054:	e000e018 	.word	0xe000e018
 800b058:	20000010 	.word	0x20000010
 800b05c:	10624dd3 	.word	0x10624dd3
 800b060:	e000e014 	.word	0xe000e014

0800b064 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b064:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b074 <vPortEnableVFP+0x10>
 800b068:	6801      	ldr	r1, [r0, #0]
 800b06a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b06e:	6001      	str	r1, [r0, #0]
 800b070:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b072:	bf00      	nop
 800b074:	e000ed88 	.word	0xe000ed88

0800b078 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b078:	b480      	push	{r7}
 800b07a:	b085      	sub	sp, #20
 800b07c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b07e:	f3ef 8305 	mrs	r3, IPSR
 800b082:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	2b0f      	cmp	r3, #15
 800b088:	d914      	bls.n	800b0b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b08a:	4a17      	ldr	r2, [pc, #92]	; (800b0e8 <vPortValidateInterruptPriority+0x70>)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	4413      	add	r3, r2
 800b090:	781b      	ldrb	r3, [r3, #0]
 800b092:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b094:	4b15      	ldr	r3, [pc, #84]	; (800b0ec <vPortValidateInterruptPriority+0x74>)
 800b096:	781b      	ldrb	r3, [r3, #0]
 800b098:	7afa      	ldrb	r2, [r7, #11]
 800b09a:	429a      	cmp	r2, r3
 800b09c:	d20a      	bcs.n	800b0b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b09e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0a2:	f383 8811 	msr	BASEPRI, r3
 800b0a6:	f3bf 8f6f 	isb	sy
 800b0aa:	f3bf 8f4f 	dsb	sy
 800b0ae:	607b      	str	r3, [r7, #4]
}
 800b0b0:	bf00      	nop
 800b0b2:	e7fe      	b.n	800b0b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b0b4:	4b0e      	ldr	r3, [pc, #56]	; (800b0f0 <vPortValidateInterruptPriority+0x78>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b0bc:	4b0d      	ldr	r3, [pc, #52]	; (800b0f4 <vPortValidateInterruptPriority+0x7c>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	429a      	cmp	r2, r3
 800b0c2:	d90a      	bls.n	800b0da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b0c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0c8:	f383 8811 	msr	BASEPRI, r3
 800b0cc:	f3bf 8f6f 	isb	sy
 800b0d0:	f3bf 8f4f 	dsb	sy
 800b0d4:	603b      	str	r3, [r7, #0]
}
 800b0d6:	bf00      	nop
 800b0d8:	e7fe      	b.n	800b0d8 <vPortValidateInterruptPriority+0x60>
	}
 800b0da:	bf00      	nop
 800b0dc:	3714      	adds	r7, #20
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e4:	4770      	bx	lr
 800b0e6:	bf00      	nop
 800b0e8:	e000e3f0 	.word	0xe000e3f0
 800b0ec:	20000e50 	.word	0x20000e50
 800b0f0:	e000ed0c 	.word	0xe000ed0c
 800b0f4:	20000e54 	.word	0x20000e54

0800b0f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b0f8:	b580      	push	{r7, lr}
 800b0fa:	b08a      	sub	sp, #40	; 0x28
 800b0fc:	af00      	add	r7, sp, #0
 800b0fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b100:	2300      	movs	r3, #0
 800b102:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b104:	f7fe fd8e 	bl	8009c24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b108:	4b5b      	ldr	r3, [pc, #364]	; (800b278 <pvPortMalloc+0x180>)
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d101      	bne.n	800b114 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b110:	f000 f920 	bl	800b354 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b114:	4b59      	ldr	r3, [pc, #356]	; (800b27c <pvPortMalloc+0x184>)
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	4013      	ands	r3, r2
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	f040 8093 	bne.w	800b248 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d01d      	beq.n	800b164 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b128:	2208      	movs	r2, #8
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	4413      	add	r3, r2
 800b12e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f003 0307 	and.w	r3, r3, #7
 800b136:	2b00      	cmp	r3, #0
 800b138:	d014      	beq.n	800b164 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f023 0307 	bic.w	r3, r3, #7
 800b140:	3308      	adds	r3, #8
 800b142:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	f003 0307 	and.w	r3, r3, #7
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d00a      	beq.n	800b164 <pvPortMalloc+0x6c>
	__asm volatile
 800b14e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b152:	f383 8811 	msr	BASEPRI, r3
 800b156:	f3bf 8f6f 	isb	sy
 800b15a:	f3bf 8f4f 	dsb	sy
 800b15e:	617b      	str	r3, [r7, #20]
}
 800b160:	bf00      	nop
 800b162:	e7fe      	b.n	800b162 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d06e      	beq.n	800b248 <pvPortMalloc+0x150>
 800b16a:	4b45      	ldr	r3, [pc, #276]	; (800b280 <pvPortMalloc+0x188>)
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	429a      	cmp	r2, r3
 800b172:	d869      	bhi.n	800b248 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b174:	4b43      	ldr	r3, [pc, #268]	; (800b284 <pvPortMalloc+0x18c>)
 800b176:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b178:	4b42      	ldr	r3, [pc, #264]	; (800b284 <pvPortMalloc+0x18c>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b17e:	e004      	b.n	800b18a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b182:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b18a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b18c:	685b      	ldr	r3, [r3, #4]
 800b18e:	687a      	ldr	r2, [r7, #4]
 800b190:	429a      	cmp	r2, r3
 800b192:	d903      	bls.n	800b19c <pvPortMalloc+0xa4>
 800b194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d1f1      	bne.n	800b180 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b19c:	4b36      	ldr	r3, [pc, #216]	; (800b278 <pvPortMalloc+0x180>)
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1a2:	429a      	cmp	r2, r3
 800b1a4:	d050      	beq.n	800b248 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b1a6:	6a3b      	ldr	r3, [r7, #32]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	2208      	movs	r2, #8
 800b1ac:	4413      	add	r3, r2
 800b1ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	6a3b      	ldr	r3, [r7, #32]
 800b1b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b1b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ba:	685a      	ldr	r2, [r3, #4]
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	1ad2      	subs	r2, r2, r3
 800b1c0:	2308      	movs	r3, #8
 800b1c2:	005b      	lsls	r3, r3, #1
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d91f      	bls.n	800b208 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b1c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	4413      	add	r3, r2
 800b1ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	f003 0307 	and.w	r3, r3, #7
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d00a      	beq.n	800b1f0 <pvPortMalloc+0xf8>
	__asm volatile
 800b1da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1de:	f383 8811 	msr	BASEPRI, r3
 800b1e2:	f3bf 8f6f 	isb	sy
 800b1e6:	f3bf 8f4f 	dsb	sy
 800b1ea:	613b      	str	r3, [r7, #16]
}
 800b1ec:	bf00      	nop
 800b1ee:	e7fe      	b.n	800b1ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f2:	685a      	ldr	r2, [r3, #4]
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	1ad2      	subs	r2, r2, r3
 800b1f8:	69bb      	ldr	r3, [r7, #24]
 800b1fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b202:	69b8      	ldr	r0, [r7, #24]
 800b204:	f000 f908 	bl	800b418 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b208:	4b1d      	ldr	r3, [pc, #116]	; (800b280 <pvPortMalloc+0x188>)
 800b20a:	681a      	ldr	r2, [r3, #0]
 800b20c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20e:	685b      	ldr	r3, [r3, #4]
 800b210:	1ad3      	subs	r3, r2, r3
 800b212:	4a1b      	ldr	r2, [pc, #108]	; (800b280 <pvPortMalloc+0x188>)
 800b214:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b216:	4b1a      	ldr	r3, [pc, #104]	; (800b280 <pvPortMalloc+0x188>)
 800b218:	681a      	ldr	r2, [r3, #0]
 800b21a:	4b1b      	ldr	r3, [pc, #108]	; (800b288 <pvPortMalloc+0x190>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d203      	bcs.n	800b22a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b222:	4b17      	ldr	r3, [pc, #92]	; (800b280 <pvPortMalloc+0x188>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	4a18      	ldr	r2, [pc, #96]	; (800b288 <pvPortMalloc+0x190>)
 800b228:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b22a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22c:	685a      	ldr	r2, [r3, #4]
 800b22e:	4b13      	ldr	r3, [pc, #76]	; (800b27c <pvPortMalloc+0x184>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	431a      	orrs	r2, r3
 800b234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b236:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23a:	2200      	movs	r2, #0
 800b23c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b23e:	4b13      	ldr	r3, [pc, #76]	; (800b28c <pvPortMalloc+0x194>)
 800b240:	681b      	ldr	r3, [r3, #0]
 800b242:	3301      	adds	r3, #1
 800b244:	4a11      	ldr	r2, [pc, #68]	; (800b28c <pvPortMalloc+0x194>)
 800b246:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b248:	f7fe fcfa 	bl	8009c40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b24c:	69fb      	ldr	r3, [r7, #28]
 800b24e:	f003 0307 	and.w	r3, r3, #7
 800b252:	2b00      	cmp	r3, #0
 800b254:	d00a      	beq.n	800b26c <pvPortMalloc+0x174>
	__asm volatile
 800b256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b25a:	f383 8811 	msr	BASEPRI, r3
 800b25e:	f3bf 8f6f 	isb	sy
 800b262:	f3bf 8f4f 	dsb	sy
 800b266:	60fb      	str	r3, [r7, #12]
}
 800b268:	bf00      	nop
 800b26a:	e7fe      	b.n	800b26a <pvPortMalloc+0x172>
	return pvReturn;
 800b26c:	69fb      	ldr	r3, [r7, #28]
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3728      	adds	r7, #40	; 0x28
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	20001e00 	.word	0x20001e00
 800b27c:	20001e14 	.word	0x20001e14
 800b280:	20001e04 	.word	0x20001e04
 800b284:	20001df8 	.word	0x20001df8
 800b288:	20001e08 	.word	0x20001e08
 800b28c:	20001e0c 	.word	0x20001e0c

0800b290 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b290:	b580      	push	{r7, lr}
 800b292:	b086      	sub	sp, #24
 800b294:	af00      	add	r7, sp, #0
 800b296:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d04d      	beq.n	800b33e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b2a2:	2308      	movs	r3, #8
 800b2a4:	425b      	negs	r3, r3
 800b2a6:	697a      	ldr	r2, [r7, #20]
 800b2a8:	4413      	add	r3, r2
 800b2aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b2b0:	693b      	ldr	r3, [r7, #16]
 800b2b2:	685a      	ldr	r2, [r3, #4]
 800b2b4:	4b24      	ldr	r3, [pc, #144]	; (800b348 <vPortFree+0xb8>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d10a      	bne.n	800b2d4 <vPortFree+0x44>
	__asm volatile
 800b2be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2c2:	f383 8811 	msr	BASEPRI, r3
 800b2c6:	f3bf 8f6f 	isb	sy
 800b2ca:	f3bf 8f4f 	dsb	sy
 800b2ce:	60fb      	str	r3, [r7, #12]
}
 800b2d0:	bf00      	nop
 800b2d2:	e7fe      	b.n	800b2d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d00a      	beq.n	800b2f2 <vPortFree+0x62>
	__asm volatile
 800b2dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2e0:	f383 8811 	msr	BASEPRI, r3
 800b2e4:	f3bf 8f6f 	isb	sy
 800b2e8:	f3bf 8f4f 	dsb	sy
 800b2ec:	60bb      	str	r3, [r7, #8]
}
 800b2ee:	bf00      	nop
 800b2f0:	e7fe      	b.n	800b2f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b2f2:	693b      	ldr	r3, [r7, #16]
 800b2f4:	685a      	ldr	r2, [r3, #4]
 800b2f6:	4b14      	ldr	r3, [pc, #80]	; (800b348 <vPortFree+0xb8>)
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4013      	ands	r3, r2
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d01e      	beq.n	800b33e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d11a      	bne.n	800b33e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	685a      	ldr	r2, [r3, #4]
 800b30c:	4b0e      	ldr	r3, [pc, #56]	; (800b348 <vPortFree+0xb8>)
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	43db      	mvns	r3, r3
 800b312:	401a      	ands	r2, r3
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b318:	f7fe fc84 	bl	8009c24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	685a      	ldr	r2, [r3, #4]
 800b320:	4b0a      	ldr	r3, [pc, #40]	; (800b34c <vPortFree+0xbc>)
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	4413      	add	r3, r2
 800b326:	4a09      	ldr	r2, [pc, #36]	; (800b34c <vPortFree+0xbc>)
 800b328:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b32a:	6938      	ldr	r0, [r7, #16]
 800b32c:	f000 f874 	bl	800b418 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b330:	4b07      	ldr	r3, [pc, #28]	; (800b350 <vPortFree+0xc0>)
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	3301      	adds	r3, #1
 800b336:	4a06      	ldr	r2, [pc, #24]	; (800b350 <vPortFree+0xc0>)
 800b338:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b33a:	f7fe fc81 	bl	8009c40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b33e:	bf00      	nop
 800b340:	3718      	adds	r7, #24
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}
 800b346:	bf00      	nop
 800b348:	20001e14 	.word	0x20001e14
 800b34c:	20001e04 	.word	0x20001e04
 800b350:	20001e10 	.word	0x20001e10

0800b354 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b354:	b480      	push	{r7}
 800b356:	b085      	sub	sp, #20
 800b358:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b35a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800b35e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b360:	4b27      	ldr	r3, [pc, #156]	; (800b400 <prvHeapInit+0xac>)
 800b362:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b364:	68fb      	ldr	r3, [r7, #12]
 800b366:	f003 0307 	and.w	r3, r3, #7
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d00c      	beq.n	800b388 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	3307      	adds	r3, #7
 800b372:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	f023 0307 	bic.w	r3, r3, #7
 800b37a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b37c:	68ba      	ldr	r2, [r7, #8]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	1ad3      	subs	r3, r2, r3
 800b382:	4a1f      	ldr	r2, [pc, #124]	; (800b400 <prvHeapInit+0xac>)
 800b384:	4413      	add	r3, r2
 800b386:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b38c:	4a1d      	ldr	r2, [pc, #116]	; (800b404 <prvHeapInit+0xb0>)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b392:	4b1c      	ldr	r3, [pc, #112]	; (800b404 <prvHeapInit+0xb0>)
 800b394:	2200      	movs	r2, #0
 800b396:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	68ba      	ldr	r2, [r7, #8]
 800b39c:	4413      	add	r3, r2
 800b39e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b3a0:	2208      	movs	r2, #8
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	1a9b      	subs	r3, r3, r2
 800b3a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	f023 0307 	bic.w	r3, r3, #7
 800b3ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	4a15      	ldr	r2, [pc, #84]	; (800b408 <prvHeapInit+0xb4>)
 800b3b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b3b6:	4b14      	ldr	r3, [pc, #80]	; (800b408 <prvHeapInit+0xb4>)
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b3be:	4b12      	ldr	r3, [pc, #72]	; (800b408 <prvHeapInit+0xb4>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	68fa      	ldr	r2, [r7, #12]
 800b3ce:	1ad2      	subs	r2, r2, r3
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b3d4:	4b0c      	ldr	r3, [pc, #48]	; (800b408 <prvHeapInit+0xb4>)
 800b3d6:	681a      	ldr	r2, [r3, #0]
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	685b      	ldr	r3, [r3, #4]
 800b3e0:	4a0a      	ldr	r2, [pc, #40]	; (800b40c <prvHeapInit+0xb8>)
 800b3e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b3e4:	683b      	ldr	r3, [r7, #0]
 800b3e6:	685b      	ldr	r3, [r3, #4]
 800b3e8:	4a09      	ldr	r2, [pc, #36]	; (800b410 <prvHeapInit+0xbc>)
 800b3ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b3ec:	4b09      	ldr	r3, [pc, #36]	; (800b414 <prvHeapInit+0xc0>)
 800b3ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b3f2:	601a      	str	r2, [r3, #0]
}
 800b3f4:	bf00      	nop
 800b3f6:	3714      	adds	r7, #20
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr
 800b400:	20000e58 	.word	0x20000e58
 800b404:	20001df8 	.word	0x20001df8
 800b408:	20001e00 	.word	0x20001e00
 800b40c:	20001e08 	.word	0x20001e08
 800b410:	20001e04 	.word	0x20001e04
 800b414:	20001e14 	.word	0x20001e14

0800b418 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b418:	b480      	push	{r7}
 800b41a:	b085      	sub	sp, #20
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b420:	4b28      	ldr	r3, [pc, #160]	; (800b4c4 <prvInsertBlockIntoFreeList+0xac>)
 800b422:	60fb      	str	r3, [r7, #12]
 800b424:	e002      	b.n	800b42c <prvInsertBlockIntoFreeList+0x14>
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	60fb      	str	r3, [r7, #12]
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	429a      	cmp	r2, r3
 800b434:	d8f7      	bhi.n	800b426 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	68ba      	ldr	r2, [r7, #8]
 800b440:	4413      	add	r3, r2
 800b442:	687a      	ldr	r2, [r7, #4]
 800b444:	429a      	cmp	r2, r3
 800b446:	d108      	bne.n	800b45a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	685a      	ldr	r2, [r3, #4]
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	441a      	add	r2, r3
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	68ba      	ldr	r2, [r7, #8]
 800b464:	441a      	add	r2, r3
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d118      	bne.n	800b4a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	681a      	ldr	r2, [r3, #0]
 800b472:	4b15      	ldr	r3, [pc, #84]	; (800b4c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	429a      	cmp	r2, r3
 800b478:	d00d      	beq.n	800b496 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	685a      	ldr	r2, [r3, #4]
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	685b      	ldr	r3, [r3, #4]
 800b484:	441a      	add	r2, r3
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	681a      	ldr	r2, [r3, #0]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	601a      	str	r2, [r3, #0]
 800b494:	e008      	b.n	800b4a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b496:	4b0c      	ldr	r3, [pc, #48]	; (800b4c8 <prvInsertBlockIntoFreeList+0xb0>)
 800b498:	681a      	ldr	r2, [r3, #0]
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	601a      	str	r2, [r3, #0]
 800b49e:	e003      	b.n	800b4a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	681a      	ldr	r2, [r3, #0]
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b4a8:	68fa      	ldr	r2, [r7, #12]
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	429a      	cmp	r2, r3
 800b4ae:	d002      	beq.n	800b4b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b4b0:	68fb      	ldr	r3, [r7, #12]
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4b6:	bf00      	nop
 800b4b8:	3714      	adds	r7, #20
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
 800b4c2:	bf00      	nop
 800b4c4:	20001df8 	.word	0x20001df8
 800b4c8:	20001e00 	.word	0x20001e00

0800b4cc <__errno>:
 800b4cc:	4b01      	ldr	r3, [pc, #4]	; (800b4d4 <__errno+0x8>)
 800b4ce:	6818      	ldr	r0, [r3, #0]
 800b4d0:	4770      	bx	lr
 800b4d2:	bf00      	nop
 800b4d4:	20000020 	.word	0x20000020

0800b4d8 <__libc_init_array>:
 800b4d8:	b570      	push	{r4, r5, r6, lr}
 800b4da:	4d0d      	ldr	r5, [pc, #52]	; (800b510 <__libc_init_array+0x38>)
 800b4dc:	4c0d      	ldr	r4, [pc, #52]	; (800b514 <__libc_init_array+0x3c>)
 800b4de:	1b64      	subs	r4, r4, r5
 800b4e0:	10a4      	asrs	r4, r4, #2
 800b4e2:	2600      	movs	r6, #0
 800b4e4:	42a6      	cmp	r6, r4
 800b4e6:	d109      	bne.n	800b4fc <__libc_init_array+0x24>
 800b4e8:	4d0b      	ldr	r5, [pc, #44]	; (800b518 <__libc_init_array+0x40>)
 800b4ea:	4c0c      	ldr	r4, [pc, #48]	; (800b51c <__libc_init_array+0x44>)
 800b4ec:	f001 f97c 	bl	800c7e8 <_init>
 800b4f0:	1b64      	subs	r4, r4, r5
 800b4f2:	10a4      	asrs	r4, r4, #2
 800b4f4:	2600      	movs	r6, #0
 800b4f6:	42a6      	cmp	r6, r4
 800b4f8:	d105      	bne.n	800b506 <__libc_init_array+0x2e>
 800b4fa:	bd70      	pop	{r4, r5, r6, pc}
 800b4fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b500:	4798      	blx	r3
 800b502:	3601      	adds	r6, #1
 800b504:	e7ee      	b.n	800b4e4 <__libc_init_array+0xc>
 800b506:	f855 3b04 	ldr.w	r3, [r5], #4
 800b50a:	4798      	blx	r3
 800b50c:	3601      	adds	r6, #1
 800b50e:	e7f2      	b.n	800b4f6 <__libc_init_array+0x1e>
 800b510:	0800cb40 	.word	0x0800cb40
 800b514:	0800cb40 	.word	0x0800cb40
 800b518:	0800cb40 	.word	0x0800cb40
 800b51c:	0800cb44 	.word	0x0800cb44

0800b520 <__retarget_lock_acquire_recursive>:
 800b520:	4770      	bx	lr

0800b522 <__retarget_lock_release_recursive>:
 800b522:	4770      	bx	lr

0800b524 <memcpy>:
 800b524:	440a      	add	r2, r1
 800b526:	4291      	cmp	r1, r2
 800b528:	f100 33ff 	add.w	r3, r0, #4294967295
 800b52c:	d100      	bne.n	800b530 <memcpy+0xc>
 800b52e:	4770      	bx	lr
 800b530:	b510      	push	{r4, lr}
 800b532:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b536:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b53a:	4291      	cmp	r1, r2
 800b53c:	d1f9      	bne.n	800b532 <memcpy+0xe>
 800b53e:	bd10      	pop	{r4, pc}

0800b540 <memset>:
 800b540:	4402      	add	r2, r0
 800b542:	4603      	mov	r3, r0
 800b544:	4293      	cmp	r3, r2
 800b546:	d100      	bne.n	800b54a <memset+0xa>
 800b548:	4770      	bx	lr
 800b54a:	f803 1b01 	strb.w	r1, [r3], #1
 800b54e:	e7f9      	b.n	800b544 <memset+0x4>

0800b550 <_malloc_r>:
 800b550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b552:	1ccd      	adds	r5, r1, #3
 800b554:	f025 0503 	bic.w	r5, r5, #3
 800b558:	3508      	adds	r5, #8
 800b55a:	2d0c      	cmp	r5, #12
 800b55c:	bf38      	it	cc
 800b55e:	250c      	movcc	r5, #12
 800b560:	2d00      	cmp	r5, #0
 800b562:	4606      	mov	r6, r0
 800b564:	db01      	blt.n	800b56a <_malloc_r+0x1a>
 800b566:	42a9      	cmp	r1, r5
 800b568:	d903      	bls.n	800b572 <_malloc_r+0x22>
 800b56a:	230c      	movs	r3, #12
 800b56c:	6033      	str	r3, [r6, #0]
 800b56e:	2000      	movs	r0, #0
 800b570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b572:	f000 f90f 	bl	800b794 <__malloc_lock>
 800b576:	4921      	ldr	r1, [pc, #132]	; (800b5fc <_malloc_r+0xac>)
 800b578:	680a      	ldr	r2, [r1, #0]
 800b57a:	4614      	mov	r4, r2
 800b57c:	b99c      	cbnz	r4, 800b5a6 <_malloc_r+0x56>
 800b57e:	4f20      	ldr	r7, [pc, #128]	; (800b600 <_malloc_r+0xb0>)
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	b923      	cbnz	r3, 800b58e <_malloc_r+0x3e>
 800b584:	4621      	mov	r1, r4
 800b586:	4630      	mov	r0, r6
 800b588:	f000 f8a6 	bl	800b6d8 <_sbrk_r>
 800b58c:	6038      	str	r0, [r7, #0]
 800b58e:	4629      	mov	r1, r5
 800b590:	4630      	mov	r0, r6
 800b592:	f000 f8a1 	bl	800b6d8 <_sbrk_r>
 800b596:	1c43      	adds	r3, r0, #1
 800b598:	d123      	bne.n	800b5e2 <_malloc_r+0x92>
 800b59a:	230c      	movs	r3, #12
 800b59c:	6033      	str	r3, [r6, #0]
 800b59e:	4630      	mov	r0, r6
 800b5a0:	f000 f8fe 	bl	800b7a0 <__malloc_unlock>
 800b5a4:	e7e3      	b.n	800b56e <_malloc_r+0x1e>
 800b5a6:	6823      	ldr	r3, [r4, #0]
 800b5a8:	1b5b      	subs	r3, r3, r5
 800b5aa:	d417      	bmi.n	800b5dc <_malloc_r+0x8c>
 800b5ac:	2b0b      	cmp	r3, #11
 800b5ae:	d903      	bls.n	800b5b8 <_malloc_r+0x68>
 800b5b0:	6023      	str	r3, [r4, #0]
 800b5b2:	441c      	add	r4, r3
 800b5b4:	6025      	str	r5, [r4, #0]
 800b5b6:	e004      	b.n	800b5c2 <_malloc_r+0x72>
 800b5b8:	6863      	ldr	r3, [r4, #4]
 800b5ba:	42a2      	cmp	r2, r4
 800b5bc:	bf0c      	ite	eq
 800b5be:	600b      	streq	r3, [r1, #0]
 800b5c0:	6053      	strne	r3, [r2, #4]
 800b5c2:	4630      	mov	r0, r6
 800b5c4:	f000 f8ec 	bl	800b7a0 <__malloc_unlock>
 800b5c8:	f104 000b 	add.w	r0, r4, #11
 800b5cc:	1d23      	adds	r3, r4, #4
 800b5ce:	f020 0007 	bic.w	r0, r0, #7
 800b5d2:	1ac2      	subs	r2, r0, r3
 800b5d4:	d0cc      	beq.n	800b570 <_malloc_r+0x20>
 800b5d6:	1a1b      	subs	r3, r3, r0
 800b5d8:	50a3      	str	r3, [r4, r2]
 800b5da:	e7c9      	b.n	800b570 <_malloc_r+0x20>
 800b5dc:	4622      	mov	r2, r4
 800b5de:	6864      	ldr	r4, [r4, #4]
 800b5e0:	e7cc      	b.n	800b57c <_malloc_r+0x2c>
 800b5e2:	1cc4      	adds	r4, r0, #3
 800b5e4:	f024 0403 	bic.w	r4, r4, #3
 800b5e8:	42a0      	cmp	r0, r4
 800b5ea:	d0e3      	beq.n	800b5b4 <_malloc_r+0x64>
 800b5ec:	1a21      	subs	r1, r4, r0
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	f000 f872 	bl	800b6d8 <_sbrk_r>
 800b5f4:	3001      	adds	r0, #1
 800b5f6:	d1dd      	bne.n	800b5b4 <_malloc_r+0x64>
 800b5f8:	e7cf      	b.n	800b59a <_malloc_r+0x4a>
 800b5fa:	bf00      	nop
 800b5fc:	20001e18 	.word	0x20001e18
 800b600:	20001e1c 	.word	0x20001e1c

0800b604 <cleanup_glue>:
 800b604:	b538      	push	{r3, r4, r5, lr}
 800b606:	460c      	mov	r4, r1
 800b608:	6809      	ldr	r1, [r1, #0]
 800b60a:	4605      	mov	r5, r0
 800b60c:	b109      	cbz	r1, 800b612 <cleanup_glue+0xe>
 800b60e:	f7ff fff9 	bl	800b604 <cleanup_glue>
 800b612:	4621      	mov	r1, r4
 800b614:	4628      	mov	r0, r5
 800b616:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b61a:	f000 b8c7 	b.w	800b7ac <_free_r>
	...

0800b620 <_reclaim_reent>:
 800b620:	4b2c      	ldr	r3, [pc, #176]	; (800b6d4 <_reclaim_reent+0xb4>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	4283      	cmp	r3, r0
 800b626:	b570      	push	{r4, r5, r6, lr}
 800b628:	4604      	mov	r4, r0
 800b62a:	d051      	beq.n	800b6d0 <_reclaim_reent+0xb0>
 800b62c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b62e:	b143      	cbz	r3, 800b642 <_reclaim_reent+0x22>
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d14a      	bne.n	800b6cc <_reclaim_reent+0xac>
 800b636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b638:	6819      	ldr	r1, [r3, #0]
 800b63a:	b111      	cbz	r1, 800b642 <_reclaim_reent+0x22>
 800b63c:	4620      	mov	r0, r4
 800b63e:	f000 f8b5 	bl	800b7ac <_free_r>
 800b642:	6961      	ldr	r1, [r4, #20]
 800b644:	b111      	cbz	r1, 800b64c <_reclaim_reent+0x2c>
 800b646:	4620      	mov	r0, r4
 800b648:	f000 f8b0 	bl	800b7ac <_free_r>
 800b64c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b64e:	b111      	cbz	r1, 800b656 <_reclaim_reent+0x36>
 800b650:	4620      	mov	r0, r4
 800b652:	f000 f8ab 	bl	800b7ac <_free_r>
 800b656:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b658:	b111      	cbz	r1, 800b660 <_reclaim_reent+0x40>
 800b65a:	4620      	mov	r0, r4
 800b65c:	f000 f8a6 	bl	800b7ac <_free_r>
 800b660:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b662:	b111      	cbz	r1, 800b66a <_reclaim_reent+0x4a>
 800b664:	4620      	mov	r0, r4
 800b666:	f000 f8a1 	bl	800b7ac <_free_r>
 800b66a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b66c:	b111      	cbz	r1, 800b674 <_reclaim_reent+0x54>
 800b66e:	4620      	mov	r0, r4
 800b670:	f000 f89c 	bl	800b7ac <_free_r>
 800b674:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b676:	b111      	cbz	r1, 800b67e <_reclaim_reent+0x5e>
 800b678:	4620      	mov	r0, r4
 800b67a:	f000 f897 	bl	800b7ac <_free_r>
 800b67e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b680:	b111      	cbz	r1, 800b688 <_reclaim_reent+0x68>
 800b682:	4620      	mov	r0, r4
 800b684:	f000 f892 	bl	800b7ac <_free_r>
 800b688:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b68a:	b111      	cbz	r1, 800b692 <_reclaim_reent+0x72>
 800b68c:	4620      	mov	r0, r4
 800b68e:	f000 f88d 	bl	800b7ac <_free_r>
 800b692:	69a3      	ldr	r3, [r4, #24]
 800b694:	b1e3      	cbz	r3, 800b6d0 <_reclaim_reent+0xb0>
 800b696:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b698:	4620      	mov	r0, r4
 800b69a:	4798      	blx	r3
 800b69c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b69e:	b1b9      	cbz	r1, 800b6d0 <_reclaim_reent+0xb0>
 800b6a0:	4620      	mov	r0, r4
 800b6a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b6a6:	f7ff bfad 	b.w	800b604 <cleanup_glue>
 800b6aa:	5949      	ldr	r1, [r1, r5]
 800b6ac:	b941      	cbnz	r1, 800b6c0 <_reclaim_reent+0xa0>
 800b6ae:	3504      	adds	r5, #4
 800b6b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b6b2:	2d80      	cmp	r5, #128	; 0x80
 800b6b4:	68d9      	ldr	r1, [r3, #12]
 800b6b6:	d1f8      	bne.n	800b6aa <_reclaim_reent+0x8a>
 800b6b8:	4620      	mov	r0, r4
 800b6ba:	f000 f877 	bl	800b7ac <_free_r>
 800b6be:	e7ba      	b.n	800b636 <_reclaim_reent+0x16>
 800b6c0:	680e      	ldr	r6, [r1, #0]
 800b6c2:	4620      	mov	r0, r4
 800b6c4:	f000 f872 	bl	800b7ac <_free_r>
 800b6c8:	4631      	mov	r1, r6
 800b6ca:	e7ef      	b.n	800b6ac <_reclaim_reent+0x8c>
 800b6cc:	2500      	movs	r5, #0
 800b6ce:	e7ef      	b.n	800b6b0 <_reclaim_reent+0x90>
 800b6d0:	bd70      	pop	{r4, r5, r6, pc}
 800b6d2:	bf00      	nop
 800b6d4:	20000020 	.word	0x20000020

0800b6d8 <_sbrk_r>:
 800b6d8:	b538      	push	{r3, r4, r5, lr}
 800b6da:	4d06      	ldr	r5, [pc, #24]	; (800b6f4 <_sbrk_r+0x1c>)
 800b6dc:	2300      	movs	r3, #0
 800b6de:	4604      	mov	r4, r0
 800b6e0:	4608      	mov	r0, r1
 800b6e2:	602b      	str	r3, [r5, #0]
 800b6e4:	f7f6 fa10 	bl	8001b08 <_sbrk>
 800b6e8:	1c43      	adds	r3, r0, #1
 800b6ea:	d102      	bne.n	800b6f2 <_sbrk_r+0x1a>
 800b6ec:	682b      	ldr	r3, [r5, #0]
 800b6ee:	b103      	cbz	r3, 800b6f2 <_sbrk_r+0x1a>
 800b6f0:	6023      	str	r3, [r4, #0]
 800b6f2:	bd38      	pop	{r3, r4, r5, pc}
 800b6f4:	20002084 	.word	0x20002084

0800b6f8 <siprintf>:
 800b6f8:	b40e      	push	{r1, r2, r3}
 800b6fa:	b500      	push	{lr}
 800b6fc:	b09c      	sub	sp, #112	; 0x70
 800b6fe:	ab1d      	add	r3, sp, #116	; 0x74
 800b700:	9002      	str	r0, [sp, #8]
 800b702:	9006      	str	r0, [sp, #24]
 800b704:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b708:	4809      	ldr	r0, [pc, #36]	; (800b730 <siprintf+0x38>)
 800b70a:	9107      	str	r1, [sp, #28]
 800b70c:	9104      	str	r1, [sp, #16]
 800b70e:	4909      	ldr	r1, [pc, #36]	; (800b734 <siprintf+0x3c>)
 800b710:	f853 2b04 	ldr.w	r2, [r3], #4
 800b714:	9105      	str	r1, [sp, #20]
 800b716:	6800      	ldr	r0, [r0, #0]
 800b718:	9301      	str	r3, [sp, #4]
 800b71a:	a902      	add	r1, sp, #8
 800b71c:	f000 f8f2 	bl	800b904 <_svfiprintf_r>
 800b720:	9b02      	ldr	r3, [sp, #8]
 800b722:	2200      	movs	r2, #0
 800b724:	701a      	strb	r2, [r3, #0]
 800b726:	b01c      	add	sp, #112	; 0x70
 800b728:	f85d eb04 	ldr.w	lr, [sp], #4
 800b72c:	b003      	add	sp, #12
 800b72e:	4770      	bx	lr
 800b730:	20000020 	.word	0x20000020
 800b734:	ffff0208 	.word	0xffff0208

0800b738 <siscanf>:
 800b738:	b40e      	push	{r1, r2, r3}
 800b73a:	b510      	push	{r4, lr}
 800b73c:	b09f      	sub	sp, #124	; 0x7c
 800b73e:	ac21      	add	r4, sp, #132	; 0x84
 800b740:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b744:	f854 2b04 	ldr.w	r2, [r4], #4
 800b748:	9201      	str	r2, [sp, #4]
 800b74a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b74e:	9004      	str	r0, [sp, #16]
 800b750:	9008      	str	r0, [sp, #32]
 800b752:	f7f4 fd3d 	bl	80001d0 <strlen>
 800b756:	4b0c      	ldr	r3, [pc, #48]	; (800b788 <siscanf+0x50>)
 800b758:	9005      	str	r0, [sp, #20]
 800b75a:	9009      	str	r0, [sp, #36]	; 0x24
 800b75c:	930d      	str	r3, [sp, #52]	; 0x34
 800b75e:	480b      	ldr	r0, [pc, #44]	; (800b78c <siscanf+0x54>)
 800b760:	9a01      	ldr	r2, [sp, #4]
 800b762:	6800      	ldr	r0, [r0, #0]
 800b764:	9403      	str	r4, [sp, #12]
 800b766:	2300      	movs	r3, #0
 800b768:	9311      	str	r3, [sp, #68]	; 0x44
 800b76a:	9316      	str	r3, [sp, #88]	; 0x58
 800b76c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b770:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b774:	a904      	add	r1, sp, #16
 800b776:	4623      	mov	r3, r4
 800b778:	f000 fa1e 	bl	800bbb8 <__ssvfiscanf_r>
 800b77c:	b01f      	add	sp, #124	; 0x7c
 800b77e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b782:	b003      	add	sp, #12
 800b784:	4770      	bx	lr
 800b786:	bf00      	nop
 800b788:	0800b791 	.word	0x0800b791
 800b78c:	20000020 	.word	0x20000020

0800b790 <__seofread>:
 800b790:	2000      	movs	r0, #0
 800b792:	4770      	bx	lr

0800b794 <__malloc_lock>:
 800b794:	4801      	ldr	r0, [pc, #4]	; (800b79c <__malloc_lock+0x8>)
 800b796:	f7ff bec3 	b.w	800b520 <__retarget_lock_acquire_recursive>
 800b79a:	bf00      	nop
 800b79c:	2000207c 	.word	0x2000207c

0800b7a0 <__malloc_unlock>:
 800b7a0:	4801      	ldr	r0, [pc, #4]	; (800b7a8 <__malloc_unlock+0x8>)
 800b7a2:	f7ff bebe 	b.w	800b522 <__retarget_lock_release_recursive>
 800b7a6:	bf00      	nop
 800b7a8:	2000207c 	.word	0x2000207c

0800b7ac <_free_r>:
 800b7ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b7ae:	2900      	cmp	r1, #0
 800b7b0:	d048      	beq.n	800b844 <_free_r+0x98>
 800b7b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7b6:	9001      	str	r0, [sp, #4]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	f1a1 0404 	sub.w	r4, r1, #4
 800b7be:	bfb8      	it	lt
 800b7c0:	18e4      	addlt	r4, r4, r3
 800b7c2:	f7ff ffe7 	bl	800b794 <__malloc_lock>
 800b7c6:	4a20      	ldr	r2, [pc, #128]	; (800b848 <_free_r+0x9c>)
 800b7c8:	9801      	ldr	r0, [sp, #4]
 800b7ca:	6813      	ldr	r3, [r2, #0]
 800b7cc:	4615      	mov	r5, r2
 800b7ce:	b933      	cbnz	r3, 800b7de <_free_r+0x32>
 800b7d0:	6063      	str	r3, [r4, #4]
 800b7d2:	6014      	str	r4, [r2, #0]
 800b7d4:	b003      	add	sp, #12
 800b7d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7da:	f7ff bfe1 	b.w	800b7a0 <__malloc_unlock>
 800b7de:	42a3      	cmp	r3, r4
 800b7e0:	d90b      	bls.n	800b7fa <_free_r+0x4e>
 800b7e2:	6821      	ldr	r1, [r4, #0]
 800b7e4:	1862      	adds	r2, r4, r1
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	bf04      	itt	eq
 800b7ea:	681a      	ldreq	r2, [r3, #0]
 800b7ec:	685b      	ldreq	r3, [r3, #4]
 800b7ee:	6063      	str	r3, [r4, #4]
 800b7f0:	bf04      	itt	eq
 800b7f2:	1852      	addeq	r2, r2, r1
 800b7f4:	6022      	streq	r2, [r4, #0]
 800b7f6:	602c      	str	r4, [r5, #0]
 800b7f8:	e7ec      	b.n	800b7d4 <_free_r+0x28>
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	b10b      	cbz	r3, 800b804 <_free_r+0x58>
 800b800:	42a3      	cmp	r3, r4
 800b802:	d9fa      	bls.n	800b7fa <_free_r+0x4e>
 800b804:	6811      	ldr	r1, [r2, #0]
 800b806:	1855      	adds	r5, r2, r1
 800b808:	42a5      	cmp	r5, r4
 800b80a:	d10b      	bne.n	800b824 <_free_r+0x78>
 800b80c:	6824      	ldr	r4, [r4, #0]
 800b80e:	4421      	add	r1, r4
 800b810:	1854      	adds	r4, r2, r1
 800b812:	42a3      	cmp	r3, r4
 800b814:	6011      	str	r1, [r2, #0]
 800b816:	d1dd      	bne.n	800b7d4 <_free_r+0x28>
 800b818:	681c      	ldr	r4, [r3, #0]
 800b81a:	685b      	ldr	r3, [r3, #4]
 800b81c:	6053      	str	r3, [r2, #4]
 800b81e:	4421      	add	r1, r4
 800b820:	6011      	str	r1, [r2, #0]
 800b822:	e7d7      	b.n	800b7d4 <_free_r+0x28>
 800b824:	d902      	bls.n	800b82c <_free_r+0x80>
 800b826:	230c      	movs	r3, #12
 800b828:	6003      	str	r3, [r0, #0]
 800b82a:	e7d3      	b.n	800b7d4 <_free_r+0x28>
 800b82c:	6825      	ldr	r5, [r4, #0]
 800b82e:	1961      	adds	r1, r4, r5
 800b830:	428b      	cmp	r3, r1
 800b832:	bf04      	itt	eq
 800b834:	6819      	ldreq	r1, [r3, #0]
 800b836:	685b      	ldreq	r3, [r3, #4]
 800b838:	6063      	str	r3, [r4, #4]
 800b83a:	bf04      	itt	eq
 800b83c:	1949      	addeq	r1, r1, r5
 800b83e:	6021      	streq	r1, [r4, #0]
 800b840:	6054      	str	r4, [r2, #4]
 800b842:	e7c7      	b.n	800b7d4 <_free_r+0x28>
 800b844:	b003      	add	sp, #12
 800b846:	bd30      	pop	{r4, r5, pc}
 800b848:	20001e18 	.word	0x20001e18

0800b84c <__ssputs_r>:
 800b84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b850:	688e      	ldr	r6, [r1, #8]
 800b852:	429e      	cmp	r6, r3
 800b854:	4682      	mov	sl, r0
 800b856:	460c      	mov	r4, r1
 800b858:	4690      	mov	r8, r2
 800b85a:	461f      	mov	r7, r3
 800b85c:	d838      	bhi.n	800b8d0 <__ssputs_r+0x84>
 800b85e:	898a      	ldrh	r2, [r1, #12]
 800b860:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b864:	d032      	beq.n	800b8cc <__ssputs_r+0x80>
 800b866:	6825      	ldr	r5, [r4, #0]
 800b868:	6909      	ldr	r1, [r1, #16]
 800b86a:	eba5 0901 	sub.w	r9, r5, r1
 800b86e:	6965      	ldr	r5, [r4, #20]
 800b870:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b874:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b878:	3301      	adds	r3, #1
 800b87a:	444b      	add	r3, r9
 800b87c:	106d      	asrs	r5, r5, #1
 800b87e:	429d      	cmp	r5, r3
 800b880:	bf38      	it	cc
 800b882:	461d      	movcc	r5, r3
 800b884:	0553      	lsls	r3, r2, #21
 800b886:	d531      	bpl.n	800b8ec <__ssputs_r+0xa0>
 800b888:	4629      	mov	r1, r5
 800b88a:	f7ff fe61 	bl	800b550 <_malloc_r>
 800b88e:	4606      	mov	r6, r0
 800b890:	b950      	cbnz	r0, 800b8a8 <__ssputs_r+0x5c>
 800b892:	230c      	movs	r3, #12
 800b894:	f8ca 3000 	str.w	r3, [sl]
 800b898:	89a3      	ldrh	r3, [r4, #12]
 800b89a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b89e:	81a3      	strh	r3, [r4, #12]
 800b8a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b8a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8a8:	6921      	ldr	r1, [r4, #16]
 800b8aa:	464a      	mov	r2, r9
 800b8ac:	f7ff fe3a 	bl	800b524 <memcpy>
 800b8b0:	89a3      	ldrh	r3, [r4, #12]
 800b8b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8ba:	81a3      	strh	r3, [r4, #12]
 800b8bc:	6126      	str	r6, [r4, #16]
 800b8be:	6165      	str	r5, [r4, #20]
 800b8c0:	444e      	add	r6, r9
 800b8c2:	eba5 0509 	sub.w	r5, r5, r9
 800b8c6:	6026      	str	r6, [r4, #0]
 800b8c8:	60a5      	str	r5, [r4, #8]
 800b8ca:	463e      	mov	r6, r7
 800b8cc:	42be      	cmp	r6, r7
 800b8ce:	d900      	bls.n	800b8d2 <__ssputs_r+0x86>
 800b8d0:	463e      	mov	r6, r7
 800b8d2:	4632      	mov	r2, r6
 800b8d4:	6820      	ldr	r0, [r4, #0]
 800b8d6:	4641      	mov	r1, r8
 800b8d8:	f000 ff3e 	bl	800c758 <memmove>
 800b8dc:	68a3      	ldr	r3, [r4, #8]
 800b8de:	6822      	ldr	r2, [r4, #0]
 800b8e0:	1b9b      	subs	r3, r3, r6
 800b8e2:	4432      	add	r2, r6
 800b8e4:	60a3      	str	r3, [r4, #8]
 800b8e6:	6022      	str	r2, [r4, #0]
 800b8e8:	2000      	movs	r0, #0
 800b8ea:	e7db      	b.n	800b8a4 <__ssputs_r+0x58>
 800b8ec:	462a      	mov	r2, r5
 800b8ee:	f000 ff4d 	bl	800c78c <_realloc_r>
 800b8f2:	4606      	mov	r6, r0
 800b8f4:	2800      	cmp	r0, #0
 800b8f6:	d1e1      	bne.n	800b8bc <__ssputs_r+0x70>
 800b8f8:	6921      	ldr	r1, [r4, #16]
 800b8fa:	4650      	mov	r0, sl
 800b8fc:	f7ff ff56 	bl	800b7ac <_free_r>
 800b900:	e7c7      	b.n	800b892 <__ssputs_r+0x46>
	...

0800b904 <_svfiprintf_r>:
 800b904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b908:	4698      	mov	r8, r3
 800b90a:	898b      	ldrh	r3, [r1, #12]
 800b90c:	061b      	lsls	r3, r3, #24
 800b90e:	b09d      	sub	sp, #116	; 0x74
 800b910:	4607      	mov	r7, r0
 800b912:	460d      	mov	r5, r1
 800b914:	4614      	mov	r4, r2
 800b916:	d50e      	bpl.n	800b936 <_svfiprintf_r+0x32>
 800b918:	690b      	ldr	r3, [r1, #16]
 800b91a:	b963      	cbnz	r3, 800b936 <_svfiprintf_r+0x32>
 800b91c:	2140      	movs	r1, #64	; 0x40
 800b91e:	f7ff fe17 	bl	800b550 <_malloc_r>
 800b922:	6028      	str	r0, [r5, #0]
 800b924:	6128      	str	r0, [r5, #16]
 800b926:	b920      	cbnz	r0, 800b932 <_svfiprintf_r+0x2e>
 800b928:	230c      	movs	r3, #12
 800b92a:	603b      	str	r3, [r7, #0]
 800b92c:	f04f 30ff 	mov.w	r0, #4294967295
 800b930:	e0d1      	b.n	800bad6 <_svfiprintf_r+0x1d2>
 800b932:	2340      	movs	r3, #64	; 0x40
 800b934:	616b      	str	r3, [r5, #20]
 800b936:	2300      	movs	r3, #0
 800b938:	9309      	str	r3, [sp, #36]	; 0x24
 800b93a:	2320      	movs	r3, #32
 800b93c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b940:	f8cd 800c 	str.w	r8, [sp, #12]
 800b944:	2330      	movs	r3, #48	; 0x30
 800b946:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800baf0 <_svfiprintf_r+0x1ec>
 800b94a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b94e:	f04f 0901 	mov.w	r9, #1
 800b952:	4623      	mov	r3, r4
 800b954:	469a      	mov	sl, r3
 800b956:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b95a:	b10a      	cbz	r2, 800b960 <_svfiprintf_r+0x5c>
 800b95c:	2a25      	cmp	r2, #37	; 0x25
 800b95e:	d1f9      	bne.n	800b954 <_svfiprintf_r+0x50>
 800b960:	ebba 0b04 	subs.w	fp, sl, r4
 800b964:	d00b      	beq.n	800b97e <_svfiprintf_r+0x7a>
 800b966:	465b      	mov	r3, fp
 800b968:	4622      	mov	r2, r4
 800b96a:	4629      	mov	r1, r5
 800b96c:	4638      	mov	r0, r7
 800b96e:	f7ff ff6d 	bl	800b84c <__ssputs_r>
 800b972:	3001      	adds	r0, #1
 800b974:	f000 80aa 	beq.w	800bacc <_svfiprintf_r+0x1c8>
 800b978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b97a:	445a      	add	r2, fp
 800b97c:	9209      	str	r2, [sp, #36]	; 0x24
 800b97e:	f89a 3000 	ldrb.w	r3, [sl]
 800b982:	2b00      	cmp	r3, #0
 800b984:	f000 80a2 	beq.w	800bacc <_svfiprintf_r+0x1c8>
 800b988:	2300      	movs	r3, #0
 800b98a:	f04f 32ff 	mov.w	r2, #4294967295
 800b98e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b992:	f10a 0a01 	add.w	sl, sl, #1
 800b996:	9304      	str	r3, [sp, #16]
 800b998:	9307      	str	r3, [sp, #28]
 800b99a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b99e:	931a      	str	r3, [sp, #104]	; 0x68
 800b9a0:	4654      	mov	r4, sl
 800b9a2:	2205      	movs	r2, #5
 800b9a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9a8:	4851      	ldr	r0, [pc, #324]	; (800baf0 <_svfiprintf_r+0x1ec>)
 800b9aa:	f7f4 fc19 	bl	80001e0 <memchr>
 800b9ae:	9a04      	ldr	r2, [sp, #16]
 800b9b0:	b9d8      	cbnz	r0, 800b9ea <_svfiprintf_r+0xe6>
 800b9b2:	06d0      	lsls	r0, r2, #27
 800b9b4:	bf44      	itt	mi
 800b9b6:	2320      	movmi	r3, #32
 800b9b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9bc:	0711      	lsls	r1, r2, #28
 800b9be:	bf44      	itt	mi
 800b9c0:	232b      	movmi	r3, #43	; 0x2b
 800b9c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9c6:	f89a 3000 	ldrb.w	r3, [sl]
 800b9ca:	2b2a      	cmp	r3, #42	; 0x2a
 800b9cc:	d015      	beq.n	800b9fa <_svfiprintf_r+0xf6>
 800b9ce:	9a07      	ldr	r2, [sp, #28]
 800b9d0:	4654      	mov	r4, sl
 800b9d2:	2000      	movs	r0, #0
 800b9d4:	f04f 0c0a 	mov.w	ip, #10
 800b9d8:	4621      	mov	r1, r4
 800b9da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9de:	3b30      	subs	r3, #48	; 0x30
 800b9e0:	2b09      	cmp	r3, #9
 800b9e2:	d94e      	bls.n	800ba82 <_svfiprintf_r+0x17e>
 800b9e4:	b1b0      	cbz	r0, 800ba14 <_svfiprintf_r+0x110>
 800b9e6:	9207      	str	r2, [sp, #28]
 800b9e8:	e014      	b.n	800ba14 <_svfiprintf_r+0x110>
 800b9ea:	eba0 0308 	sub.w	r3, r0, r8
 800b9ee:	fa09 f303 	lsl.w	r3, r9, r3
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	9304      	str	r3, [sp, #16]
 800b9f6:	46a2      	mov	sl, r4
 800b9f8:	e7d2      	b.n	800b9a0 <_svfiprintf_r+0x9c>
 800b9fa:	9b03      	ldr	r3, [sp, #12]
 800b9fc:	1d19      	adds	r1, r3, #4
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	9103      	str	r1, [sp, #12]
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	bfbb      	ittet	lt
 800ba06:	425b      	neglt	r3, r3
 800ba08:	f042 0202 	orrlt.w	r2, r2, #2
 800ba0c:	9307      	strge	r3, [sp, #28]
 800ba0e:	9307      	strlt	r3, [sp, #28]
 800ba10:	bfb8      	it	lt
 800ba12:	9204      	strlt	r2, [sp, #16]
 800ba14:	7823      	ldrb	r3, [r4, #0]
 800ba16:	2b2e      	cmp	r3, #46	; 0x2e
 800ba18:	d10c      	bne.n	800ba34 <_svfiprintf_r+0x130>
 800ba1a:	7863      	ldrb	r3, [r4, #1]
 800ba1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ba1e:	d135      	bne.n	800ba8c <_svfiprintf_r+0x188>
 800ba20:	9b03      	ldr	r3, [sp, #12]
 800ba22:	1d1a      	adds	r2, r3, #4
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	9203      	str	r2, [sp, #12]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	bfb8      	it	lt
 800ba2c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba30:	3402      	adds	r4, #2
 800ba32:	9305      	str	r3, [sp, #20]
 800ba34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bb00 <_svfiprintf_r+0x1fc>
 800ba38:	7821      	ldrb	r1, [r4, #0]
 800ba3a:	2203      	movs	r2, #3
 800ba3c:	4650      	mov	r0, sl
 800ba3e:	f7f4 fbcf 	bl	80001e0 <memchr>
 800ba42:	b140      	cbz	r0, 800ba56 <_svfiprintf_r+0x152>
 800ba44:	2340      	movs	r3, #64	; 0x40
 800ba46:	eba0 000a 	sub.w	r0, r0, sl
 800ba4a:	fa03 f000 	lsl.w	r0, r3, r0
 800ba4e:	9b04      	ldr	r3, [sp, #16]
 800ba50:	4303      	orrs	r3, r0
 800ba52:	3401      	adds	r4, #1
 800ba54:	9304      	str	r3, [sp, #16]
 800ba56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba5a:	4826      	ldr	r0, [pc, #152]	; (800baf4 <_svfiprintf_r+0x1f0>)
 800ba5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba60:	2206      	movs	r2, #6
 800ba62:	f7f4 fbbd 	bl	80001e0 <memchr>
 800ba66:	2800      	cmp	r0, #0
 800ba68:	d038      	beq.n	800badc <_svfiprintf_r+0x1d8>
 800ba6a:	4b23      	ldr	r3, [pc, #140]	; (800baf8 <_svfiprintf_r+0x1f4>)
 800ba6c:	bb1b      	cbnz	r3, 800bab6 <_svfiprintf_r+0x1b2>
 800ba6e:	9b03      	ldr	r3, [sp, #12]
 800ba70:	3307      	adds	r3, #7
 800ba72:	f023 0307 	bic.w	r3, r3, #7
 800ba76:	3308      	adds	r3, #8
 800ba78:	9303      	str	r3, [sp, #12]
 800ba7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba7c:	4433      	add	r3, r6
 800ba7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba80:	e767      	b.n	800b952 <_svfiprintf_r+0x4e>
 800ba82:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba86:	460c      	mov	r4, r1
 800ba88:	2001      	movs	r0, #1
 800ba8a:	e7a5      	b.n	800b9d8 <_svfiprintf_r+0xd4>
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	3401      	adds	r4, #1
 800ba90:	9305      	str	r3, [sp, #20]
 800ba92:	4619      	mov	r1, r3
 800ba94:	f04f 0c0a 	mov.w	ip, #10
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba9e:	3a30      	subs	r2, #48	; 0x30
 800baa0:	2a09      	cmp	r2, #9
 800baa2:	d903      	bls.n	800baac <_svfiprintf_r+0x1a8>
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d0c5      	beq.n	800ba34 <_svfiprintf_r+0x130>
 800baa8:	9105      	str	r1, [sp, #20]
 800baaa:	e7c3      	b.n	800ba34 <_svfiprintf_r+0x130>
 800baac:	fb0c 2101 	mla	r1, ip, r1, r2
 800bab0:	4604      	mov	r4, r0
 800bab2:	2301      	movs	r3, #1
 800bab4:	e7f0      	b.n	800ba98 <_svfiprintf_r+0x194>
 800bab6:	ab03      	add	r3, sp, #12
 800bab8:	9300      	str	r3, [sp, #0]
 800baba:	462a      	mov	r2, r5
 800babc:	4b0f      	ldr	r3, [pc, #60]	; (800bafc <_svfiprintf_r+0x1f8>)
 800babe:	a904      	add	r1, sp, #16
 800bac0:	4638      	mov	r0, r7
 800bac2:	f3af 8000 	nop.w
 800bac6:	1c42      	adds	r2, r0, #1
 800bac8:	4606      	mov	r6, r0
 800baca:	d1d6      	bne.n	800ba7a <_svfiprintf_r+0x176>
 800bacc:	89ab      	ldrh	r3, [r5, #12]
 800bace:	065b      	lsls	r3, r3, #25
 800bad0:	f53f af2c 	bmi.w	800b92c <_svfiprintf_r+0x28>
 800bad4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bad6:	b01d      	add	sp, #116	; 0x74
 800bad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800badc:	ab03      	add	r3, sp, #12
 800bade:	9300      	str	r3, [sp, #0]
 800bae0:	462a      	mov	r2, r5
 800bae2:	4b06      	ldr	r3, [pc, #24]	; (800bafc <_svfiprintf_r+0x1f8>)
 800bae4:	a904      	add	r1, sp, #16
 800bae6:	4638      	mov	r0, r7
 800bae8:	f000 fa4c 	bl	800bf84 <_printf_i>
 800baec:	e7eb      	b.n	800bac6 <_svfiprintf_r+0x1c2>
 800baee:	bf00      	nop
 800baf0:	0800c9e8 	.word	0x0800c9e8
 800baf4:	0800c9f2 	.word	0x0800c9f2
 800baf8:	00000000 	.word	0x00000000
 800bafc:	0800b84d 	.word	0x0800b84d
 800bb00:	0800c9ee 	.word	0x0800c9ee

0800bb04 <_sungetc_r>:
 800bb04:	b538      	push	{r3, r4, r5, lr}
 800bb06:	1c4b      	adds	r3, r1, #1
 800bb08:	4614      	mov	r4, r2
 800bb0a:	d103      	bne.n	800bb14 <_sungetc_r+0x10>
 800bb0c:	f04f 35ff 	mov.w	r5, #4294967295
 800bb10:	4628      	mov	r0, r5
 800bb12:	bd38      	pop	{r3, r4, r5, pc}
 800bb14:	8993      	ldrh	r3, [r2, #12]
 800bb16:	f023 0320 	bic.w	r3, r3, #32
 800bb1a:	8193      	strh	r3, [r2, #12]
 800bb1c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bb1e:	6852      	ldr	r2, [r2, #4]
 800bb20:	b2cd      	uxtb	r5, r1
 800bb22:	b18b      	cbz	r3, 800bb48 <_sungetc_r+0x44>
 800bb24:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800bb26:	4293      	cmp	r3, r2
 800bb28:	dd08      	ble.n	800bb3c <_sungetc_r+0x38>
 800bb2a:	6823      	ldr	r3, [r4, #0]
 800bb2c:	1e5a      	subs	r2, r3, #1
 800bb2e:	6022      	str	r2, [r4, #0]
 800bb30:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bb34:	6863      	ldr	r3, [r4, #4]
 800bb36:	3301      	adds	r3, #1
 800bb38:	6063      	str	r3, [r4, #4]
 800bb3a:	e7e9      	b.n	800bb10 <_sungetc_r+0xc>
 800bb3c:	4621      	mov	r1, r4
 800bb3e:	f000 fdd1 	bl	800c6e4 <__submore>
 800bb42:	2800      	cmp	r0, #0
 800bb44:	d0f1      	beq.n	800bb2a <_sungetc_r+0x26>
 800bb46:	e7e1      	b.n	800bb0c <_sungetc_r+0x8>
 800bb48:	6921      	ldr	r1, [r4, #16]
 800bb4a:	6823      	ldr	r3, [r4, #0]
 800bb4c:	b151      	cbz	r1, 800bb64 <_sungetc_r+0x60>
 800bb4e:	4299      	cmp	r1, r3
 800bb50:	d208      	bcs.n	800bb64 <_sungetc_r+0x60>
 800bb52:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800bb56:	42a9      	cmp	r1, r5
 800bb58:	d104      	bne.n	800bb64 <_sungetc_r+0x60>
 800bb5a:	3b01      	subs	r3, #1
 800bb5c:	3201      	adds	r2, #1
 800bb5e:	6023      	str	r3, [r4, #0]
 800bb60:	6062      	str	r2, [r4, #4]
 800bb62:	e7d5      	b.n	800bb10 <_sungetc_r+0xc>
 800bb64:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800bb68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb6c:	6363      	str	r3, [r4, #52]	; 0x34
 800bb6e:	2303      	movs	r3, #3
 800bb70:	63a3      	str	r3, [r4, #56]	; 0x38
 800bb72:	4623      	mov	r3, r4
 800bb74:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bb78:	6023      	str	r3, [r4, #0]
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	e7dc      	b.n	800bb38 <_sungetc_r+0x34>

0800bb7e <__ssrefill_r>:
 800bb7e:	b510      	push	{r4, lr}
 800bb80:	460c      	mov	r4, r1
 800bb82:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bb84:	b169      	cbz	r1, 800bba2 <__ssrefill_r+0x24>
 800bb86:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb8a:	4299      	cmp	r1, r3
 800bb8c:	d001      	beq.n	800bb92 <__ssrefill_r+0x14>
 800bb8e:	f7ff fe0d 	bl	800b7ac <_free_r>
 800bb92:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bb94:	6063      	str	r3, [r4, #4]
 800bb96:	2000      	movs	r0, #0
 800bb98:	6360      	str	r0, [r4, #52]	; 0x34
 800bb9a:	b113      	cbz	r3, 800bba2 <__ssrefill_r+0x24>
 800bb9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800bb9e:	6023      	str	r3, [r4, #0]
 800bba0:	bd10      	pop	{r4, pc}
 800bba2:	6923      	ldr	r3, [r4, #16]
 800bba4:	6023      	str	r3, [r4, #0]
 800bba6:	2300      	movs	r3, #0
 800bba8:	6063      	str	r3, [r4, #4]
 800bbaa:	89a3      	ldrh	r3, [r4, #12]
 800bbac:	f043 0320 	orr.w	r3, r3, #32
 800bbb0:	81a3      	strh	r3, [r4, #12]
 800bbb2:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb6:	e7f3      	b.n	800bba0 <__ssrefill_r+0x22>

0800bbb8 <__ssvfiscanf_r>:
 800bbb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbbc:	460c      	mov	r4, r1
 800bbbe:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800bbc2:	2100      	movs	r1, #0
 800bbc4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bbc8:	49b2      	ldr	r1, [pc, #712]	; (800be94 <__ssvfiscanf_r+0x2dc>)
 800bbca:	91a0      	str	r1, [sp, #640]	; 0x280
 800bbcc:	f10d 0804 	add.w	r8, sp, #4
 800bbd0:	49b1      	ldr	r1, [pc, #708]	; (800be98 <__ssvfiscanf_r+0x2e0>)
 800bbd2:	4fb2      	ldr	r7, [pc, #712]	; (800be9c <__ssvfiscanf_r+0x2e4>)
 800bbd4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800bea0 <__ssvfiscanf_r+0x2e8>
 800bbd8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bbdc:	4606      	mov	r6, r0
 800bbde:	91a1      	str	r1, [sp, #644]	; 0x284
 800bbe0:	9300      	str	r3, [sp, #0]
 800bbe2:	f892 a000 	ldrb.w	sl, [r2]
 800bbe6:	f1ba 0f00 	cmp.w	sl, #0
 800bbea:	f000 8151 	beq.w	800be90 <__ssvfiscanf_r+0x2d8>
 800bbee:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800bbf2:	f013 0308 	ands.w	r3, r3, #8
 800bbf6:	f102 0501 	add.w	r5, r2, #1
 800bbfa:	d019      	beq.n	800bc30 <__ssvfiscanf_r+0x78>
 800bbfc:	6863      	ldr	r3, [r4, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	dd0f      	ble.n	800bc22 <__ssvfiscanf_r+0x6a>
 800bc02:	6823      	ldr	r3, [r4, #0]
 800bc04:	781a      	ldrb	r2, [r3, #0]
 800bc06:	5cba      	ldrb	r2, [r7, r2]
 800bc08:	0712      	lsls	r2, r2, #28
 800bc0a:	d401      	bmi.n	800bc10 <__ssvfiscanf_r+0x58>
 800bc0c:	462a      	mov	r2, r5
 800bc0e:	e7e8      	b.n	800bbe2 <__ssvfiscanf_r+0x2a>
 800bc10:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bc12:	3201      	adds	r2, #1
 800bc14:	9245      	str	r2, [sp, #276]	; 0x114
 800bc16:	6862      	ldr	r2, [r4, #4]
 800bc18:	3301      	adds	r3, #1
 800bc1a:	3a01      	subs	r2, #1
 800bc1c:	6062      	str	r2, [r4, #4]
 800bc1e:	6023      	str	r3, [r4, #0]
 800bc20:	e7ec      	b.n	800bbfc <__ssvfiscanf_r+0x44>
 800bc22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc24:	4621      	mov	r1, r4
 800bc26:	4630      	mov	r0, r6
 800bc28:	4798      	blx	r3
 800bc2a:	2800      	cmp	r0, #0
 800bc2c:	d0e9      	beq.n	800bc02 <__ssvfiscanf_r+0x4a>
 800bc2e:	e7ed      	b.n	800bc0c <__ssvfiscanf_r+0x54>
 800bc30:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800bc34:	f040 8083 	bne.w	800bd3e <__ssvfiscanf_r+0x186>
 800bc38:	9341      	str	r3, [sp, #260]	; 0x104
 800bc3a:	9343      	str	r3, [sp, #268]	; 0x10c
 800bc3c:	7853      	ldrb	r3, [r2, #1]
 800bc3e:	2b2a      	cmp	r3, #42	; 0x2a
 800bc40:	bf02      	ittt	eq
 800bc42:	2310      	moveq	r3, #16
 800bc44:	1c95      	addeq	r5, r2, #2
 800bc46:	9341      	streq	r3, [sp, #260]	; 0x104
 800bc48:	220a      	movs	r2, #10
 800bc4a:	46ab      	mov	fp, r5
 800bc4c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800bc50:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800bc54:	2b09      	cmp	r3, #9
 800bc56:	d91d      	bls.n	800bc94 <__ssvfiscanf_r+0xdc>
 800bc58:	4891      	ldr	r0, [pc, #580]	; (800bea0 <__ssvfiscanf_r+0x2e8>)
 800bc5a:	2203      	movs	r2, #3
 800bc5c:	f7f4 fac0 	bl	80001e0 <memchr>
 800bc60:	b140      	cbz	r0, 800bc74 <__ssvfiscanf_r+0xbc>
 800bc62:	2301      	movs	r3, #1
 800bc64:	eba0 0009 	sub.w	r0, r0, r9
 800bc68:	fa03 f000 	lsl.w	r0, r3, r0
 800bc6c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bc6e:	4318      	orrs	r0, r3
 800bc70:	9041      	str	r0, [sp, #260]	; 0x104
 800bc72:	465d      	mov	r5, fp
 800bc74:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bc78:	2b78      	cmp	r3, #120	; 0x78
 800bc7a:	d806      	bhi.n	800bc8a <__ssvfiscanf_r+0xd2>
 800bc7c:	2b57      	cmp	r3, #87	; 0x57
 800bc7e:	d810      	bhi.n	800bca2 <__ssvfiscanf_r+0xea>
 800bc80:	2b25      	cmp	r3, #37	; 0x25
 800bc82:	d05c      	beq.n	800bd3e <__ssvfiscanf_r+0x186>
 800bc84:	d856      	bhi.n	800bd34 <__ssvfiscanf_r+0x17c>
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d074      	beq.n	800bd74 <__ssvfiscanf_r+0x1bc>
 800bc8a:	2303      	movs	r3, #3
 800bc8c:	9347      	str	r3, [sp, #284]	; 0x11c
 800bc8e:	230a      	movs	r3, #10
 800bc90:	9342      	str	r3, [sp, #264]	; 0x108
 800bc92:	e081      	b.n	800bd98 <__ssvfiscanf_r+0x1e0>
 800bc94:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bc96:	fb02 1303 	mla	r3, r2, r3, r1
 800bc9a:	3b30      	subs	r3, #48	; 0x30
 800bc9c:	9343      	str	r3, [sp, #268]	; 0x10c
 800bc9e:	465d      	mov	r5, fp
 800bca0:	e7d3      	b.n	800bc4a <__ssvfiscanf_r+0x92>
 800bca2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bca6:	2a20      	cmp	r2, #32
 800bca8:	d8ef      	bhi.n	800bc8a <__ssvfiscanf_r+0xd2>
 800bcaa:	a101      	add	r1, pc, #4	; (adr r1, 800bcb0 <__ssvfiscanf_r+0xf8>)
 800bcac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bcb0:	0800bd83 	.word	0x0800bd83
 800bcb4:	0800bc8b 	.word	0x0800bc8b
 800bcb8:	0800bc8b 	.word	0x0800bc8b
 800bcbc:	0800bde1 	.word	0x0800bde1
 800bcc0:	0800bc8b 	.word	0x0800bc8b
 800bcc4:	0800bc8b 	.word	0x0800bc8b
 800bcc8:	0800bc8b 	.word	0x0800bc8b
 800bccc:	0800bc8b 	.word	0x0800bc8b
 800bcd0:	0800bc8b 	.word	0x0800bc8b
 800bcd4:	0800bc8b 	.word	0x0800bc8b
 800bcd8:	0800bc8b 	.word	0x0800bc8b
 800bcdc:	0800bdf7 	.word	0x0800bdf7
 800bce0:	0800bdcd 	.word	0x0800bdcd
 800bce4:	0800bd3b 	.word	0x0800bd3b
 800bce8:	0800bd3b 	.word	0x0800bd3b
 800bcec:	0800bd3b 	.word	0x0800bd3b
 800bcf0:	0800bc8b 	.word	0x0800bc8b
 800bcf4:	0800bdd1 	.word	0x0800bdd1
 800bcf8:	0800bc8b 	.word	0x0800bc8b
 800bcfc:	0800bc8b 	.word	0x0800bc8b
 800bd00:	0800bc8b 	.word	0x0800bc8b
 800bd04:	0800bc8b 	.word	0x0800bc8b
 800bd08:	0800be07 	.word	0x0800be07
 800bd0c:	0800bdd9 	.word	0x0800bdd9
 800bd10:	0800bd7b 	.word	0x0800bd7b
 800bd14:	0800bc8b 	.word	0x0800bc8b
 800bd18:	0800bc8b 	.word	0x0800bc8b
 800bd1c:	0800be03 	.word	0x0800be03
 800bd20:	0800bc8b 	.word	0x0800bc8b
 800bd24:	0800bdcd 	.word	0x0800bdcd
 800bd28:	0800bc8b 	.word	0x0800bc8b
 800bd2c:	0800bc8b 	.word	0x0800bc8b
 800bd30:	0800bd83 	.word	0x0800bd83
 800bd34:	3b45      	subs	r3, #69	; 0x45
 800bd36:	2b02      	cmp	r3, #2
 800bd38:	d8a7      	bhi.n	800bc8a <__ssvfiscanf_r+0xd2>
 800bd3a:	2305      	movs	r3, #5
 800bd3c:	e02b      	b.n	800bd96 <__ssvfiscanf_r+0x1de>
 800bd3e:	6863      	ldr	r3, [r4, #4]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	dd0d      	ble.n	800bd60 <__ssvfiscanf_r+0x1a8>
 800bd44:	6823      	ldr	r3, [r4, #0]
 800bd46:	781a      	ldrb	r2, [r3, #0]
 800bd48:	4552      	cmp	r2, sl
 800bd4a:	f040 80a1 	bne.w	800be90 <__ssvfiscanf_r+0x2d8>
 800bd4e:	3301      	adds	r3, #1
 800bd50:	6862      	ldr	r2, [r4, #4]
 800bd52:	6023      	str	r3, [r4, #0]
 800bd54:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bd56:	3a01      	subs	r2, #1
 800bd58:	3301      	adds	r3, #1
 800bd5a:	6062      	str	r2, [r4, #4]
 800bd5c:	9345      	str	r3, [sp, #276]	; 0x114
 800bd5e:	e755      	b.n	800bc0c <__ssvfiscanf_r+0x54>
 800bd60:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bd62:	4621      	mov	r1, r4
 800bd64:	4630      	mov	r0, r6
 800bd66:	4798      	blx	r3
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d0eb      	beq.n	800bd44 <__ssvfiscanf_r+0x18c>
 800bd6c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	f040 8084 	bne.w	800be7c <__ssvfiscanf_r+0x2c4>
 800bd74:	f04f 30ff 	mov.w	r0, #4294967295
 800bd78:	e086      	b.n	800be88 <__ssvfiscanf_r+0x2d0>
 800bd7a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bd7c:	f042 0220 	orr.w	r2, r2, #32
 800bd80:	9241      	str	r2, [sp, #260]	; 0x104
 800bd82:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bd84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bd88:	9241      	str	r2, [sp, #260]	; 0x104
 800bd8a:	2210      	movs	r2, #16
 800bd8c:	2b6f      	cmp	r3, #111	; 0x6f
 800bd8e:	9242      	str	r2, [sp, #264]	; 0x108
 800bd90:	bf34      	ite	cc
 800bd92:	2303      	movcc	r3, #3
 800bd94:	2304      	movcs	r3, #4
 800bd96:	9347      	str	r3, [sp, #284]	; 0x11c
 800bd98:	6863      	ldr	r3, [r4, #4]
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	dd41      	ble.n	800be22 <__ssvfiscanf_r+0x26a>
 800bd9e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bda0:	0659      	lsls	r1, r3, #25
 800bda2:	d404      	bmi.n	800bdae <__ssvfiscanf_r+0x1f6>
 800bda4:	6823      	ldr	r3, [r4, #0]
 800bda6:	781a      	ldrb	r2, [r3, #0]
 800bda8:	5cba      	ldrb	r2, [r7, r2]
 800bdaa:	0712      	lsls	r2, r2, #28
 800bdac:	d440      	bmi.n	800be30 <__ssvfiscanf_r+0x278>
 800bdae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bdb0:	2b02      	cmp	r3, #2
 800bdb2:	dc4f      	bgt.n	800be54 <__ssvfiscanf_r+0x29c>
 800bdb4:	466b      	mov	r3, sp
 800bdb6:	4622      	mov	r2, r4
 800bdb8:	a941      	add	r1, sp, #260	; 0x104
 800bdba:	4630      	mov	r0, r6
 800bdbc:	f000 fa08 	bl	800c1d0 <_scanf_chars>
 800bdc0:	2801      	cmp	r0, #1
 800bdc2:	d065      	beq.n	800be90 <__ssvfiscanf_r+0x2d8>
 800bdc4:	2802      	cmp	r0, #2
 800bdc6:	f47f af21 	bne.w	800bc0c <__ssvfiscanf_r+0x54>
 800bdca:	e7cf      	b.n	800bd6c <__ssvfiscanf_r+0x1b4>
 800bdcc:	220a      	movs	r2, #10
 800bdce:	e7dd      	b.n	800bd8c <__ssvfiscanf_r+0x1d4>
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	9342      	str	r3, [sp, #264]	; 0x108
 800bdd4:	2303      	movs	r3, #3
 800bdd6:	e7de      	b.n	800bd96 <__ssvfiscanf_r+0x1de>
 800bdd8:	2308      	movs	r3, #8
 800bdda:	9342      	str	r3, [sp, #264]	; 0x108
 800bddc:	2304      	movs	r3, #4
 800bdde:	e7da      	b.n	800bd96 <__ssvfiscanf_r+0x1de>
 800bde0:	4629      	mov	r1, r5
 800bde2:	4640      	mov	r0, r8
 800bde4:	f000 fb40 	bl	800c468 <__sccl>
 800bde8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bdea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdee:	9341      	str	r3, [sp, #260]	; 0x104
 800bdf0:	4605      	mov	r5, r0
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	e7cf      	b.n	800bd96 <__ssvfiscanf_r+0x1de>
 800bdf6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bdf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdfc:	9341      	str	r3, [sp, #260]	; 0x104
 800bdfe:	2300      	movs	r3, #0
 800be00:	e7c9      	b.n	800bd96 <__ssvfiscanf_r+0x1de>
 800be02:	2302      	movs	r3, #2
 800be04:	e7c7      	b.n	800bd96 <__ssvfiscanf_r+0x1de>
 800be06:	9841      	ldr	r0, [sp, #260]	; 0x104
 800be08:	06c3      	lsls	r3, r0, #27
 800be0a:	f53f aeff 	bmi.w	800bc0c <__ssvfiscanf_r+0x54>
 800be0e:	9b00      	ldr	r3, [sp, #0]
 800be10:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800be12:	1d19      	adds	r1, r3, #4
 800be14:	9100      	str	r1, [sp, #0]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	07c0      	lsls	r0, r0, #31
 800be1a:	bf4c      	ite	mi
 800be1c:	801a      	strhmi	r2, [r3, #0]
 800be1e:	601a      	strpl	r2, [r3, #0]
 800be20:	e6f4      	b.n	800bc0c <__ssvfiscanf_r+0x54>
 800be22:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800be24:	4621      	mov	r1, r4
 800be26:	4630      	mov	r0, r6
 800be28:	4798      	blx	r3
 800be2a:	2800      	cmp	r0, #0
 800be2c:	d0b7      	beq.n	800bd9e <__ssvfiscanf_r+0x1e6>
 800be2e:	e79d      	b.n	800bd6c <__ssvfiscanf_r+0x1b4>
 800be30:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800be32:	3201      	adds	r2, #1
 800be34:	9245      	str	r2, [sp, #276]	; 0x114
 800be36:	6862      	ldr	r2, [r4, #4]
 800be38:	3a01      	subs	r2, #1
 800be3a:	2a00      	cmp	r2, #0
 800be3c:	6062      	str	r2, [r4, #4]
 800be3e:	dd02      	ble.n	800be46 <__ssvfiscanf_r+0x28e>
 800be40:	3301      	adds	r3, #1
 800be42:	6023      	str	r3, [r4, #0]
 800be44:	e7ae      	b.n	800bda4 <__ssvfiscanf_r+0x1ec>
 800be46:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800be48:	4621      	mov	r1, r4
 800be4a:	4630      	mov	r0, r6
 800be4c:	4798      	blx	r3
 800be4e:	2800      	cmp	r0, #0
 800be50:	d0a8      	beq.n	800bda4 <__ssvfiscanf_r+0x1ec>
 800be52:	e78b      	b.n	800bd6c <__ssvfiscanf_r+0x1b4>
 800be54:	2b04      	cmp	r3, #4
 800be56:	dc06      	bgt.n	800be66 <__ssvfiscanf_r+0x2ae>
 800be58:	466b      	mov	r3, sp
 800be5a:	4622      	mov	r2, r4
 800be5c:	a941      	add	r1, sp, #260	; 0x104
 800be5e:	4630      	mov	r0, r6
 800be60:	f000 fa0e 	bl	800c280 <_scanf_i>
 800be64:	e7ac      	b.n	800bdc0 <__ssvfiscanf_r+0x208>
 800be66:	4b0f      	ldr	r3, [pc, #60]	; (800bea4 <__ssvfiscanf_r+0x2ec>)
 800be68:	2b00      	cmp	r3, #0
 800be6a:	f43f aecf 	beq.w	800bc0c <__ssvfiscanf_r+0x54>
 800be6e:	466b      	mov	r3, sp
 800be70:	4622      	mov	r2, r4
 800be72:	a941      	add	r1, sp, #260	; 0x104
 800be74:	4630      	mov	r0, r6
 800be76:	f3af 8000 	nop.w
 800be7a:	e7a1      	b.n	800bdc0 <__ssvfiscanf_r+0x208>
 800be7c:	89a3      	ldrh	r3, [r4, #12]
 800be7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800be82:	bf18      	it	ne
 800be84:	f04f 30ff 	movne.w	r0, #4294967295
 800be88:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800be8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be90:	9844      	ldr	r0, [sp, #272]	; 0x110
 800be92:	e7f9      	b.n	800be88 <__ssvfiscanf_r+0x2d0>
 800be94:	0800bb05 	.word	0x0800bb05
 800be98:	0800bb7f 	.word	0x0800bb7f
 800be9c:	0800ca37 	.word	0x0800ca37
 800bea0:	0800c9ee 	.word	0x0800c9ee
 800bea4:	00000000 	.word	0x00000000

0800bea8 <_printf_common>:
 800bea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800beac:	4616      	mov	r6, r2
 800beae:	4699      	mov	r9, r3
 800beb0:	688a      	ldr	r2, [r1, #8]
 800beb2:	690b      	ldr	r3, [r1, #16]
 800beb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800beb8:	4293      	cmp	r3, r2
 800beba:	bfb8      	it	lt
 800bebc:	4613      	movlt	r3, r2
 800bebe:	6033      	str	r3, [r6, #0]
 800bec0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bec4:	4607      	mov	r7, r0
 800bec6:	460c      	mov	r4, r1
 800bec8:	b10a      	cbz	r2, 800bece <_printf_common+0x26>
 800beca:	3301      	adds	r3, #1
 800becc:	6033      	str	r3, [r6, #0]
 800bece:	6823      	ldr	r3, [r4, #0]
 800bed0:	0699      	lsls	r1, r3, #26
 800bed2:	bf42      	ittt	mi
 800bed4:	6833      	ldrmi	r3, [r6, #0]
 800bed6:	3302      	addmi	r3, #2
 800bed8:	6033      	strmi	r3, [r6, #0]
 800beda:	6825      	ldr	r5, [r4, #0]
 800bedc:	f015 0506 	ands.w	r5, r5, #6
 800bee0:	d106      	bne.n	800bef0 <_printf_common+0x48>
 800bee2:	f104 0a19 	add.w	sl, r4, #25
 800bee6:	68e3      	ldr	r3, [r4, #12]
 800bee8:	6832      	ldr	r2, [r6, #0]
 800beea:	1a9b      	subs	r3, r3, r2
 800beec:	42ab      	cmp	r3, r5
 800beee:	dc26      	bgt.n	800bf3e <_printf_common+0x96>
 800bef0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bef4:	1e13      	subs	r3, r2, #0
 800bef6:	6822      	ldr	r2, [r4, #0]
 800bef8:	bf18      	it	ne
 800befa:	2301      	movne	r3, #1
 800befc:	0692      	lsls	r2, r2, #26
 800befe:	d42b      	bmi.n	800bf58 <_printf_common+0xb0>
 800bf00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf04:	4649      	mov	r1, r9
 800bf06:	4638      	mov	r0, r7
 800bf08:	47c0      	blx	r8
 800bf0a:	3001      	adds	r0, #1
 800bf0c:	d01e      	beq.n	800bf4c <_printf_common+0xa4>
 800bf0e:	6823      	ldr	r3, [r4, #0]
 800bf10:	68e5      	ldr	r5, [r4, #12]
 800bf12:	6832      	ldr	r2, [r6, #0]
 800bf14:	f003 0306 	and.w	r3, r3, #6
 800bf18:	2b04      	cmp	r3, #4
 800bf1a:	bf08      	it	eq
 800bf1c:	1aad      	subeq	r5, r5, r2
 800bf1e:	68a3      	ldr	r3, [r4, #8]
 800bf20:	6922      	ldr	r2, [r4, #16]
 800bf22:	bf0c      	ite	eq
 800bf24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf28:	2500      	movne	r5, #0
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	bfc4      	itt	gt
 800bf2e:	1a9b      	subgt	r3, r3, r2
 800bf30:	18ed      	addgt	r5, r5, r3
 800bf32:	2600      	movs	r6, #0
 800bf34:	341a      	adds	r4, #26
 800bf36:	42b5      	cmp	r5, r6
 800bf38:	d11a      	bne.n	800bf70 <_printf_common+0xc8>
 800bf3a:	2000      	movs	r0, #0
 800bf3c:	e008      	b.n	800bf50 <_printf_common+0xa8>
 800bf3e:	2301      	movs	r3, #1
 800bf40:	4652      	mov	r2, sl
 800bf42:	4649      	mov	r1, r9
 800bf44:	4638      	mov	r0, r7
 800bf46:	47c0      	blx	r8
 800bf48:	3001      	adds	r0, #1
 800bf4a:	d103      	bne.n	800bf54 <_printf_common+0xac>
 800bf4c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf54:	3501      	adds	r5, #1
 800bf56:	e7c6      	b.n	800bee6 <_printf_common+0x3e>
 800bf58:	18e1      	adds	r1, r4, r3
 800bf5a:	1c5a      	adds	r2, r3, #1
 800bf5c:	2030      	movs	r0, #48	; 0x30
 800bf5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bf62:	4422      	add	r2, r4
 800bf64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bf68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bf6c:	3302      	adds	r3, #2
 800bf6e:	e7c7      	b.n	800bf00 <_printf_common+0x58>
 800bf70:	2301      	movs	r3, #1
 800bf72:	4622      	mov	r2, r4
 800bf74:	4649      	mov	r1, r9
 800bf76:	4638      	mov	r0, r7
 800bf78:	47c0      	blx	r8
 800bf7a:	3001      	adds	r0, #1
 800bf7c:	d0e6      	beq.n	800bf4c <_printf_common+0xa4>
 800bf7e:	3601      	adds	r6, #1
 800bf80:	e7d9      	b.n	800bf36 <_printf_common+0x8e>
	...

0800bf84 <_printf_i>:
 800bf84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bf88:	460c      	mov	r4, r1
 800bf8a:	4691      	mov	r9, r2
 800bf8c:	7e27      	ldrb	r7, [r4, #24]
 800bf8e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bf90:	2f78      	cmp	r7, #120	; 0x78
 800bf92:	4680      	mov	r8, r0
 800bf94:	469a      	mov	sl, r3
 800bf96:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf9a:	d807      	bhi.n	800bfac <_printf_i+0x28>
 800bf9c:	2f62      	cmp	r7, #98	; 0x62
 800bf9e:	d80a      	bhi.n	800bfb6 <_printf_i+0x32>
 800bfa0:	2f00      	cmp	r7, #0
 800bfa2:	f000 80d8 	beq.w	800c156 <_printf_i+0x1d2>
 800bfa6:	2f58      	cmp	r7, #88	; 0x58
 800bfa8:	f000 80a3 	beq.w	800c0f2 <_printf_i+0x16e>
 800bfac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bfb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bfb4:	e03a      	b.n	800c02c <_printf_i+0xa8>
 800bfb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bfba:	2b15      	cmp	r3, #21
 800bfbc:	d8f6      	bhi.n	800bfac <_printf_i+0x28>
 800bfbe:	a001      	add	r0, pc, #4	; (adr r0, 800bfc4 <_printf_i+0x40>)
 800bfc0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bfc4:	0800c01d 	.word	0x0800c01d
 800bfc8:	0800c031 	.word	0x0800c031
 800bfcc:	0800bfad 	.word	0x0800bfad
 800bfd0:	0800bfad 	.word	0x0800bfad
 800bfd4:	0800bfad 	.word	0x0800bfad
 800bfd8:	0800bfad 	.word	0x0800bfad
 800bfdc:	0800c031 	.word	0x0800c031
 800bfe0:	0800bfad 	.word	0x0800bfad
 800bfe4:	0800bfad 	.word	0x0800bfad
 800bfe8:	0800bfad 	.word	0x0800bfad
 800bfec:	0800bfad 	.word	0x0800bfad
 800bff0:	0800c13d 	.word	0x0800c13d
 800bff4:	0800c061 	.word	0x0800c061
 800bff8:	0800c11f 	.word	0x0800c11f
 800bffc:	0800bfad 	.word	0x0800bfad
 800c000:	0800bfad 	.word	0x0800bfad
 800c004:	0800c15f 	.word	0x0800c15f
 800c008:	0800bfad 	.word	0x0800bfad
 800c00c:	0800c061 	.word	0x0800c061
 800c010:	0800bfad 	.word	0x0800bfad
 800c014:	0800bfad 	.word	0x0800bfad
 800c018:	0800c127 	.word	0x0800c127
 800c01c:	680b      	ldr	r3, [r1, #0]
 800c01e:	1d1a      	adds	r2, r3, #4
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	600a      	str	r2, [r1, #0]
 800c024:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800c028:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c02c:	2301      	movs	r3, #1
 800c02e:	e0a3      	b.n	800c178 <_printf_i+0x1f4>
 800c030:	6825      	ldr	r5, [r4, #0]
 800c032:	6808      	ldr	r0, [r1, #0]
 800c034:	062e      	lsls	r6, r5, #24
 800c036:	f100 0304 	add.w	r3, r0, #4
 800c03a:	d50a      	bpl.n	800c052 <_printf_i+0xce>
 800c03c:	6805      	ldr	r5, [r0, #0]
 800c03e:	600b      	str	r3, [r1, #0]
 800c040:	2d00      	cmp	r5, #0
 800c042:	da03      	bge.n	800c04c <_printf_i+0xc8>
 800c044:	232d      	movs	r3, #45	; 0x2d
 800c046:	426d      	negs	r5, r5
 800c048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c04c:	485e      	ldr	r0, [pc, #376]	; (800c1c8 <_printf_i+0x244>)
 800c04e:	230a      	movs	r3, #10
 800c050:	e019      	b.n	800c086 <_printf_i+0x102>
 800c052:	f015 0f40 	tst.w	r5, #64	; 0x40
 800c056:	6805      	ldr	r5, [r0, #0]
 800c058:	600b      	str	r3, [r1, #0]
 800c05a:	bf18      	it	ne
 800c05c:	b22d      	sxthne	r5, r5
 800c05e:	e7ef      	b.n	800c040 <_printf_i+0xbc>
 800c060:	680b      	ldr	r3, [r1, #0]
 800c062:	6825      	ldr	r5, [r4, #0]
 800c064:	1d18      	adds	r0, r3, #4
 800c066:	6008      	str	r0, [r1, #0]
 800c068:	0628      	lsls	r0, r5, #24
 800c06a:	d501      	bpl.n	800c070 <_printf_i+0xec>
 800c06c:	681d      	ldr	r5, [r3, #0]
 800c06e:	e002      	b.n	800c076 <_printf_i+0xf2>
 800c070:	0669      	lsls	r1, r5, #25
 800c072:	d5fb      	bpl.n	800c06c <_printf_i+0xe8>
 800c074:	881d      	ldrh	r5, [r3, #0]
 800c076:	4854      	ldr	r0, [pc, #336]	; (800c1c8 <_printf_i+0x244>)
 800c078:	2f6f      	cmp	r7, #111	; 0x6f
 800c07a:	bf0c      	ite	eq
 800c07c:	2308      	moveq	r3, #8
 800c07e:	230a      	movne	r3, #10
 800c080:	2100      	movs	r1, #0
 800c082:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c086:	6866      	ldr	r6, [r4, #4]
 800c088:	60a6      	str	r6, [r4, #8]
 800c08a:	2e00      	cmp	r6, #0
 800c08c:	bfa2      	ittt	ge
 800c08e:	6821      	ldrge	r1, [r4, #0]
 800c090:	f021 0104 	bicge.w	r1, r1, #4
 800c094:	6021      	strge	r1, [r4, #0]
 800c096:	b90d      	cbnz	r5, 800c09c <_printf_i+0x118>
 800c098:	2e00      	cmp	r6, #0
 800c09a:	d04d      	beq.n	800c138 <_printf_i+0x1b4>
 800c09c:	4616      	mov	r6, r2
 800c09e:	fbb5 f1f3 	udiv	r1, r5, r3
 800c0a2:	fb03 5711 	mls	r7, r3, r1, r5
 800c0a6:	5dc7      	ldrb	r7, [r0, r7]
 800c0a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c0ac:	462f      	mov	r7, r5
 800c0ae:	42bb      	cmp	r3, r7
 800c0b0:	460d      	mov	r5, r1
 800c0b2:	d9f4      	bls.n	800c09e <_printf_i+0x11a>
 800c0b4:	2b08      	cmp	r3, #8
 800c0b6:	d10b      	bne.n	800c0d0 <_printf_i+0x14c>
 800c0b8:	6823      	ldr	r3, [r4, #0]
 800c0ba:	07df      	lsls	r7, r3, #31
 800c0bc:	d508      	bpl.n	800c0d0 <_printf_i+0x14c>
 800c0be:	6923      	ldr	r3, [r4, #16]
 800c0c0:	6861      	ldr	r1, [r4, #4]
 800c0c2:	4299      	cmp	r1, r3
 800c0c4:	bfde      	ittt	le
 800c0c6:	2330      	movle	r3, #48	; 0x30
 800c0c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c0cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c0d0:	1b92      	subs	r2, r2, r6
 800c0d2:	6122      	str	r2, [r4, #16]
 800c0d4:	f8cd a000 	str.w	sl, [sp]
 800c0d8:	464b      	mov	r3, r9
 800c0da:	aa03      	add	r2, sp, #12
 800c0dc:	4621      	mov	r1, r4
 800c0de:	4640      	mov	r0, r8
 800c0e0:	f7ff fee2 	bl	800bea8 <_printf_common>
 800c0e4:	3001      	adds	r0, #1
 800c0e6:	d14c      	bne.n	800c182 <_printf_i+0x1fe>
 800c0e8:	f04f 30ff 	mov.w	r0, #4294967295
 800c0ec:	b004      	add	sp, #16
 800c0ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c0f2:	4835      	ldr	r0, [pc, #212]	; (800c1c8 <_printf_i+0x244>)
 800c0f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c0f8:	6823      	ldr	r3, [r4, #0]
 800c0fa:	680e      	ldr	r6, [r1, #0]
 800c0fc:	061f      	lsls	r7, r3, #24
 800c0fe:	f856 5b04 	ldr.w	r5, [r6], #4
 800c102:	600e      	str	r6, [r1, #0]
 800c104:	d514      	bpl.n	800c130 <_printf_i+0x1ac>
 800c106:	07d9      	lsls	r1, r3, #31
 800c108:	bf44      	itt	mi
 800c10a:	f043 0320 	orrmi.w	r3, r3, #32
 800c10e:	6023      	strmi	r3, [r4, #0]
 800c110:	b91d      	cbnz	r5, 800c11a <_printf_i+0x196>
 800c112:	6823      	ldr	r3, [r4, #0]
 800c114:	f023 0320 	bic.w	r3, r3, #32
 800c118:	6023      	str	r3, [r4, #0]
 800c11a:	2310      	movs	r3, #16
 800c11c:	e7b0      	b.n	800c080 <_printf_i+0xfc>
 800c11e:	6823      	ldr	r3, [r4, #0]
 800c120:	f043 0320 	orr.w	r3, r3, #32
 800c124:	6023      	str	r3, [r4, #0]
 800c126:	2378      	movs	r3, #120	; 0x78
 800c128:	4828      	ldr	r0, [pc, #160]	; (800c1cc <_printf_i+0x248>)
 800c12a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c12e:	e7e3      	b.n	800c0f8 <_printf_i+0x174>
 800c130:	065e      	lsls	r6, r3, #25
 800c132:	bf48      	it	mi
 800c134:	b2ad      	uxthmi	r5, r5
 800c136:	e7e6      	b.n	800c106 <_printf_i+0x182>
 800c138:	4616      	mov	r6, r2
 800c13a:	e7bb      	b.n	800c0b4 <_printf_i+0x130>
 800c13c:	680b      	ldr	r3, [r1, #0]
 800c13e:	6826      	ldr	r6, [r4, #0]
 800c140:	6960      	ldr	r0, [r4, #20]
 800c142:	1d1d      	adds	r5, r3, #4
 800c144:	600d      	str	r5, [r1, #0]
 800c146:	0635      	lsls	r5, r6, #24
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	d501      	bpl.n	800c150 <_printf_i+0x1cc>
 800c14c:	6018      	str	r0, [r3, #0]
 800c14e:	e002      	b.n	800c156 <_printf_i+0x1d2>
 800c150:	0671      	lsls	r1, r6, #25
 800c152:	d5fb      	bpl.n	800c14c <_printf_i+0x1c8>
 800c154:	8018      	strh	r0, [r3, #0]
 800c156:	2300      	movs	r3, #0
 800c158:	6123      	str	r3, [r4, #16]
 800c15a:	4616      	mov	r6, r2
 800c15c:	e7ba      	b.n	800c0d4 <_printf_i+0x150>
 800c15e:	680b      	ldr	r3, [r1, #0]
 800c160:	1d1a      	adds	r2, r3, #4
 800c162:	600a      	str	r2, [r1, #0]
 800c164:	681e      	ldr	r6, [r3, #0]
 800c166:	6862      	ldr	r2, [r4, #4]
 800c168:	2100      	movs	r1, #0
 800c16a:	4630      	mov	r0, r6
 800c16c:	f7f4 f838 	bl	80001e0 <memchr>
 800c170:	b108      	cbz	r0, 800c176 <_printf_i+0x1f2>
 800c172:	1b80      	subs	r0, r0, r6
 800c174:	6060      	str	r0, [r4, #4]
 800c176:	6863      	ldr	r3, [r4, #4]
 800c178:	6123      	str	r3, [r4, #16]
 800c17a:	2300      	movs	r3, #0
 800c17c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c180:	e7a8      	b.n	800c0d4 <_printf_i+0x150>
 800c182:	6923      	ldr	r3, [r4, #16]
 800c184:	4632      	mov	r2, r6
 800c186:	4649      	mov	r1, r9
 800c188:	4640      	mov	r0, r8
 800c18a:	47d0      	blx	sl
 800c18c:	3001      	adds	r0, #1
 800c18e:	d0ab      	beq.n	800c0e8 <_printf_i+0x164>
 800c190:	6823      	ldr	r3, [r4, #0]
 800c192:	079b      	lsls	r3, r3, #30
 800c194:	d413      	bmi.n	800c1be <_printf_i+0x23a>
 800c196:	68e0      	ldr	r0, [r4, #12]
 800c198:	9b03      	ldr	r3, [sp, #12]
 800c19a:	4298      	cmp	r0, r3
 800c19c:	bfb8      	it	lt
 800c19e:	4618      	movlt	r0, r3
 800c1a0:	e7a4      	b.n	800c0ec <_printf_i+0x168>
 800c1a2:	2301      	movs	r3, #1
 800c1a4:	4632      	mov	r2, r6
 800c1a6:	4649      	mov	r1, r9
 800c1a8:	4640      	mov	r0, r8
 800c1aa:	47d0      	blx	sl
 800c1ac:	3001      	adds	r0, #1
 800c1ae:	d09b      	beq.n	800c0e8 <_printf_i+0x164>
 800c1b0:	3501      	adds	r5, #1
 800c1b2:	68e3      	ldr	r3, [r4, #12]
 800c1b4:	9903      	ldr	r1, [sp, #12]
 800c1b6:	1a5b      	subs	r3, r3, r1
 800c1b8:	42ab      	cmp	r3, r5
 800c1ba:	dcf2      	bgt.n	800c1a2 <_printf_i+0x21e>
 800c1bc:	e7eb      	b.n	800c196 <_printf_i+0x212>
 800c1be:	2500      	movs	r5, #0
 800c1c0:	f104 0619 	add.w	r6, r4, #25
 800c1c4:	e7f5      	b.n	800c1b2 <_printf_i+0x22e>
 800c1c6:	bf00      	nop
 800c1c8:	0800c9f9 	.word	0x0800c9f9
 800c1cc:	0800ca0a 	.word	0x0800ca0a

0800c1d0 <_scanf_chars>:
 800c1d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1d4:	4615      	mov	r5, r2
 800c1d6:	688a      	ldr	r2, [r1, #8]
 800c1d8:	4680      	mov	r8, r0
 800c1da:	460c      	mov	r4, r1
 800c1dc:	b932      	cbnz	r2, 800c1ec <_scanf_chars+0x1c>
 800c1de:	698a      	ldr	r2, [r1, #24]
 800c1e0:	2a00      	cmp	r2, #0
 800c1e2:	bf0c      	ite	eq
 800c1e4:	2201      	moveq	r2, #1
 800c1e6:	f04f 32ff 	movne.w	r2, #4294967295
 800c1ea:	608a      	str	r2, [r1, #8]
 800c1ec:	6822      	ldr	r2, [r4, #0]
 800c1ee:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c27c <_scanf_chars+0xac>
 800c1f2:	06d1      	lsls	r1, r2, #27
 800c1f4:	bf5f      	itttt	pl
 800c1f6:	681a      	ldrpl	r2, [r3, #0]
 800c1f8:	1d11      	addpl	r1, r2, #4
 800c1fa:	6019      	strpl	r1, [r3, #0]
 800c1fc:	6816      	ldrpl	r6, [r2, #0]
 800c1fe:	2700      	movs	r7, #0
 800c200:	69a0      	ldr	r0, [r4, #24]
 800c202:	b188      	cbz	r0, 800c228 <_scanf_chars+0x58>
 800c204:	2801      	cmp	r0, #1
 800c206:	d107      	bne.n	800c218 <_scanf_chars+0x48>
 800c208:	682b      	ldr	r3, [r5, #0]
 800c20a:	781a      	ldrb	r2, [r3, #0]
 800c20c:	6963      	ldr	r3, [r4, #20]
 800c20e:	5c9b      	ldrb	r3, [r3, r2]
 800c210:	b953      	cbnz	r3, 800c228 <_scanf_chars+0x58>
 800c212:	bb27      	cbnz	r7, 800c25e <_scanf_chars+0x8e>
 800c214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c218:	2802      	cmp	r0, #2
 800c21a:	d120      	bne.n	800c25e <_scanf_chars+0x8e>
 800c21c:	682b      	ldr	r3, [r5, #0]
 800c21e:	781b      	ldrb	r3, [r3, #0]
 800c220:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c224:	071b      	lsls	r3, r3, #28
 800c226:	d41a      	bmi.n	800c25e <_scanf_chars+0x8e>
 800c228:	6823      	ldr	r3, [r4, #0]
 800c22a:	06da      	lsls	r2, r3, #27
 800c22c:	bf5e      	ittt	pl
 800c22e:	682b      	ldrpl	r3, [r5, #0]
 800c230:	781b      	ldrbpl	r3, [r3, #0]
 800c232:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c236:	682a      	ldr	r2, [r5, #0]
 800c238:	686b      	ldr	r3, [r5, #4]
 800c23a:	3201      	adds	r2, #1
 800c23c:	602a      	str	r2, [r5, #0]
 800c23e:	68a2      	ldr	r2, [r4, #8]
 800c240:	3b01      	subs	r3, #1
 800c242:	3a01      	subs	r2, #1
 800c244:	606b      	str	r3, [r5, #4]
 800c246:	3701      	adds	r7, #1
 800c248:	60a2      	str	r2, [r4, #8]
 800c24a:	b142      	cbz	r2, 800c25e <_scanf_chars+0x8e>
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	dcd7      	bgt.n	800c200 <_scanf_chars+0x30>
 800c250:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c254:	4629      	mov	r1, r5
 800c256:	4640      	mov	r0, r8
 800c258:	4798      	blx	r3
 800c25a:	2800      	cmp	r0, #0
 800c25c:	d0d0      	beq.n	800c200 <_scanf_chars+0x30>
 800c25e:	6823      	ldr	r3, [r4, #0]
 800c260:	f013 0310 	ands.w	r3, r3, #16
 800c264:	d105      	bne.n	800c272 <_scanf_chars+0xa2>
 800c266:	68e2      	ldr	r2, [r4, #12]
 800c268:	3201      	adds	r2, #1
 800c26a:	60e2      	str	r2, [r4, #12]
 800c26c:	69a2      	ldr	r2, [r4, #24]
 800c26e:	b102      	cbz	r2, 800c272 <_scanf_chars+0xa2>
 800c270:	7033      	strb	r3, [r6, #0]
 800c272:	6923      	ldr	r3, [r4, #16]
 800c274:	441f      	add	r7, r3
 800c276:	6127      	str	r7, [r4, #16]
 800c278:	2000      	movs	r0, #0
 800c27a:	e7cb      	b.n	800c214 <_scanf_chars+0x44>
 800c27c:	0800ca37 	.word	0x0800ca37

0800c280 <_scanf_i>:
 800c280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c284:	4698      	mov	r8, r3
 800c286:	4b74      	ldr	r3, [pc, #464]	; (800c458 <_scanf_i+0x1d8>)
 800c288:	460c      	mov	r4, r1
 800c28a:	4682      	mov	sl, r0
 800c28c:	4616      	mov	r6, r2
 800c28e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c292:	b087      	sub	sp, #28
 800c294:	ab03      	add	r3, sp, #12
 800c296:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c29a:	4b70      	ldr	r3, [pc, #448]	; (800c45c <_scanf_i+0x1dc>)
 800c29c:	69a1      	ldr	r1, [r4, #24]
 800c29e:	4a70      	ldr	r2, [pc, #448]	; (800c460 <_scanf_i+0x1e0>)
 800c2a0:	2903      	cmp	r1, #3
 800c2a2:	bf18      	it	ne
 800c2a4:	461a      	movne	r2, r3
 800c2a6:	68a3      	ldr	r3, [r4, #8]
 800c2a8:	9201      	str	r2, [sp, #4]
 800c2aa:	1e5a      	subs	r2, r3, #1
 800c2ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c2b0:	bf88      	it	hi
 800c2b2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c2b6:	4627      	mov	r7, r4
 800c2b8:	bf82      	ittt	hi
 800c2ba:	eb03 0905 	addhi.w	r9, r3, r5
 800c2be:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c2c2:	60a3      	strhi	r3, [r4, #8]
 800c2c4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c2c8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c2cc:	bf98      	it	ls
 800c2ce:	f04f 0900 	movls.w	r9, #0
 800c2d2:	6023      	str	r3, [r4, #0]
 800c2d4:	463d      	mov	r5, r7
 800c2d6:	f04f 0b00 	mov.w	fp, #0
 800c2da:	6831      	ldr	r1, [r6, #0]
 800c2dc:	ab03      	add	r3, sp, #12
 800c2de:	7809      	ldrb	r1, [r1, #0]
 800c2e0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c2e4:	2202      	movs	r2, #2
 800c2e6:	f7f3 ff7b 	bl	80001e0 <memchr>
 800c2ea:	b328      	cbz	r0, 800c338 <_scanf_i+0xb8>
 800c2ec:	f1bb 0f01 	cmp.w	fp, #1
 800c2f0:	d159      	bne.n	800c3a6 <_scanf_i+0x126>
 800c2f2:	6862      	ldr	r2, [r4, #4]
 800c2f4:	b92a      	cbnz	r2, 800c302 <_scanf_i+0x82>
 800c2f6:	6822      	ldr	r2, [r4, #0]
 800c2f8:	2308      	movs	r3, #8
 800c2fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c2fe:	6063      	str	r3, [r4, #4]
 800c300:	6022      	str	r2, [r4, #0]
 800c302:	6822      	ldr	r2, [r4, #0]
 800c304:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c308:	6022      	str	r2, [r4, #0]
 800c30a:	68a2      	ldr	r2, [r4, #8]
 800c30c:	1e51      	subs	r1, r2, #1
 800c30e:	60a1      	str	r1, [r4, #8]
 800c310:	b192      	cbz	r2, 800c338 <_scanf_i+0xb8>
 800c312:	6832      	ldr	r2, [r6, #0]
 800c314:	1c51      	adds	r1, r2, #1
 800c316:	6031      	str	r1, [r6, #0]
 800c318:	7812      	ldrb	r2, [r2, #0]
 800c31a:	f805 2b01 	strb.w	r2, [r5], #1
 800c31e:	6872      	ldr	r2, [r6, #4]
 800c320:	3a01      	subs	r2, #1
 800c322:	2a00      	cmp	r2, #0
 800c324:	6072      	str	r2, [r6, #4]
 800c326:	dc07      	bgt.n	800c338 <_scanf_i+0xb8>
 800c328:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c32c:	4631      	mov	r1, r6
 800c32e:	4650      	mov	r0, sl
 800c330:	4790      	blx	r2
 800c332:	2800      	cmp	r0, #0
 800c334:	f040 8085 	bne.w	800c442 <_scanf_i+0x1c2>
 800c338:	f10b 0b01 	add.w	fp, fp, #1
 800c33c:	f1bb 0f03 	cmp.w	fp, #3
 800c340:	d1cb      	bne.n	800c2da <_scanf_i+0x5a>
 800c342:	6863      	ldr	r3, [r4, #4]
 800c344:	b90b      	cbnz	r3, 800c34a <_scanf_i+0xca>
 800c346:	230a      	movs	r3, #10
 800c348:	6063      	str	r3, [r4, #4]
 800c34a:	6863      	ldr	r3, [r4, #4]
 800c34c:	4945      	ldr	r1, [pc, #276]	; (800c464 <_scanf_i+0x1e4>)
 800c34e:	6960      	ldr	r0, [r4, #20]
 800c350:	1ac9      	subs	r1, r1, r3
 800c352:	f000 f889 	bl	800c468 <__sccl>
 800c356:	f04f 0b00 	mov.w	fp, #0
 800c35a:	68a3      	ldr	r3, [r4, #8]
 800c35c:	6822      	ldr	r2, [r4, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d03d      	beq.n	800c3de <_scanf_i+0x15e>
 800c362:	6831      	ldr	r1, [r6, #0]
 800c364:	6960      	ldr	r0, [r4, #20]
 800c366:	f891 c000 	ldrb.w	ip, [r1]
 800c36a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c36e:	2800      	cmp	r0, #0
 800c370:	d035      	beq.n	800c3de <_scanf_i+0x15e>
 800c372:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c376:	d124      	bne.n	800c3c2 <_scanf_i+0x142>
 800c378:	0510      	lsls	r0, r2, #20
 800c37a:	d522      	bpl.n	800c3c2 <_scanf_i+0x142>
 800c37c:	f10b 0b01 	add.w	fp, fp, #1
 800c380:	f1b9 0f00 	cmp.w	r9, #0
 800c384:	d003      	beq.n	800c38e <_scanf_i+0x10e>
 800c386:	3301      	adds	r3, #1
 800c388:	f109 39ff 	add.w	r9, r9, #4294967295
 800c38c:	60a3      	str	r3, [r4, #8]
 800c38e:	6873      	ldr	r3, [r6, #4]
 800c390:	3b01      	subs	r3, #1
 800c392:	2b00      	cmp	r3, #0
 800c394:	6073      	str	r3, [r6, #4]
 800c396:	dd1b      	ble.n	800c3d0 <_scanf_i+0x150>
 800c398:	6833      	ldr	r3, [r6, #0]
 800c39a:	3301      	adds	r3, #1
 800c39c:	6033      	str	r3, [r6, #0]
 800c39e:	68a3      	ldr	r3, [r4, #8]
 800c3a0:	3b01      	subs	r3, #1
 800c3a2:	60a3      	str	r3, [r4, #8]
 800c3a4:	e7d9      	b.n	800c35a <_scanf_i+0xda>
 800c3a6:	f1bb 0f02 	cmp.w	fp, #2
 800c3aa:	d1ae      	bne.n	800c30a <_scanf_i+0x8a>
 800c3ac:	6822      	ldr	r2, [r4, #0]
 800c3ae:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c3b2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c3b6:	d1bf      	bne.n	800c338 <_scanf_i+0xb8>
 800c3b8:	2310      	movs	r3, #16
 800c3ba:	6063      	str	r3, [r4, #4]
 800c3bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c3c0:	e7a2      	b.n	800c308 <_scanf_i+0x88>
 800c3c2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c3c6:	6022      	str	r2, [r4, #0]
 800c3c8:	780b      	ldrb	r3, [r1, #0]
 800c3ca:	f805 3b01 	strb.w	r3, [r5], #1
 800c3ce:	e7de      	b.n	800c38e <_scanf_i+0x10e>
 800c3d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c3d4:	4631      	mov	r1, r6
 800c3d6:	4650      	mov	r0, sl
 800c3d8:	4798      	blx	r3
 800c3da:	2800      	cmp	r0, #0
 800c3dc:	d0df      	beq.n	800c39e <_scanf_i+0x11e>
 800c3de:	6823      	ldr	r3, [r4, #0]
 800c3e0:	05d9      	lsls	r1, r3, #23
 800c3e2:	d50d      	bpl.n	800c400 <_scanf_i+0x180>
 800c3e4:	42bd      	cmp	r5, r7
 800c3e6:	d909      	bls.n	800c3fc <_scanf_i+0x17c>
 800c3e8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c3ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3f0:	4632      	mov	r2, r6
 800c3f2:	4650      	mov	r0, sl
 800c3f4:	4798      	blx	r3
 800c3f6:	f105 39ff 	add.w	r9, r5, #4294967295
 800c3fa:	464d      	mov	r5, r9
 800c3fc:	42bd      	cmp	r5, r7
 800c3fe:	d028      	beq.n	800c452 <_scanf_i+0x1d2>
 800c400:	6822      	ldr	r2, [r4, #0]
 800c402:	f012 0210 	ands.w	r2, r2, #16
 800c406:	d113      	bne.n	800c430 <_scanf_i+0x1b0>
 800c408:	702a      	strb	r2, [r5, #0]
 800c40a:	6863      	ldr	r3, [r4, #4]
 800c40c:	9e01      	ldr	r6, [sp, #4]
 800c40e:	4639      	mov	r1, r7
 800c410:	4650      	mov	r0, sl
 800c412:	47b0      	blx	r6
 800c414:	f8d8 3000 	ldr.w	r3, [r8]
 800c418:	6821      	ldr	r1, [r4, #0]
 800c41a:	1d1a      	adds	r2, r3, #4
 800c41c:	f8c8 2000 	str.w	r2, [r8]
 800c420:	f011 0f20 	tst.w	r1, #32
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	d00f      	beq.n	800c448 <_scanf_i+0x1c8>
 800c428:	6018      	str	r0, [r3, #0]
 800c42a:	68e3      	ldr	r3, [r4, #12]
 800c42c:	3301      	adds	r3, #1
 800c42e:	60e3      	str	r3, [r4, #12]
 800c430:	1bed      	subs	r5, r5, r7
 800c432:	44ab      	add	fp, r5
 800c434:	6925      	ldr	r5, [r4, #16]
 800c436:	445d      	add	r5, fp
 800c438:	6125      	str	r5, [r4, #16]
 800c43a:	2000      	movs	r0, #0
 800c43c:	b007      	add	sp, #28
 800c43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c442:	f04f 0b00 	mov.w	fp, #0
 800c446:	e7ca      	b.n	800c3de <_scanf_i+0x15e>
 800c448:	07ca      	lsls	r2, r1, #31
 800c44a:	bf4c      	ite	mi
 800c44c:	8018      	strhmi	r0, [r3, #0]
 800c44e:	6018      	strpl	r0, [r3, #0]
 800c450:	e7eb      	b.n	800c42a <_scanf_i+0x1aa>
 800c452:	2001      	movs	r0, #1
 800c454:	e7f2      	b.n	800c43c <_scanf_i+0x1bc>
 800c456:	bf00      	nop
 800c458:	0800c8c8 	.word	0x0800c8c8
 800c45c:	0800c6e1 	.word	0x0800c6e1
 800c460:	0800c5e5 	.word	0x0800c5e5
 800c464:	0800ca34 	.word	0x0800ca34

0800c468 <__sccl>:
 800c468:	b570      	push	{r4, r5, r6, lr}
 800c46a:	780b      	ldrb	r3, [r1, #0]
 800c46c:	4604      	mov	r4, r0
 800c46e:	2b5e      	cmp	r3, #94	; 0x5e
 800c470:	bf0b      	itete	eq
 800c472:	784b      	ldrbeq	r3, [r1, #1]
 800c474:	1c48      	addne	r0, r1, #1
 800c476:	1c88      	addeq	r0, r1, #2
 800c478:	2200      	movne	r2, #0
 800c47a:	bf08      	it	eq
 800c47c:	2201      	moveq	r2, #1
 800c47e:	1e61      	subs	r1, r4, #1
 800c480:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c484:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c488:	42a9      	cmp	r1, r5
 800c48a:	d1fb      	bne.n	800c484 <__sccl+0x1c>
 800c48c:	b90b      	cbnz	r3, 800c492 <__sccl+0x2a>
 800c48e:	3801      	subs	r0, #1
 800c490:	bd70      	pop	{r4, r5, r6, pc}
 800c492:	f082 0101 	eor.w	r1, r2, #1
 800c496:	54e1      	strb	r1, [r4, r3]
 800c498:	1c42      	adds	r2, r0, #1
 800c49a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800c49e:	2d2d      	cmp	r5, #45	; 0x2d
 800c4a0:	f102 36ff 	add.w	r6, r2, #4294967295
 800c4a4:	4610      	mov	r0, r2
 800c4a6:	d006      	beq.n	800c4b6 <__sccl+0x4e>
 800c4a8:	2d5d      	cmp	r5, #93	; 0x5d
 800c4aa:	d0f1      	beq.n	800c490 <__sccl+0x28>
 800c4ac:	b90d      	cbnz	r5, 800c4b2 <__sccl+0x4a>
 800c4ae:	4630      	mov	r0, r6
 800c4b0:	e7ee      	b.n	800c490 <__sccl+0x28>
 800c4b2:	462b      	mov	r3, r5
 800c4b4:	e7ef      	b.n	800c496 <__sccl+0x2e>
 800c4b6:	7816      	ldrb	r6, [r2, #0]
 800c4b8:	2e5d      	cmp	r6, #93	; 0x5d
 800c4ba:	d0fa      	beq.n	800c4b2 <__sccl+0x4a>
 800c4bc:	42b3      	cmp	r3, r6
 800c4be:	dcf8      	bgt.n	800c4b2 <__sccl+0x4a>
 800c4c0:	4618      	mov	r0, r3
 800c4c2:	3001      	adds	r0, #1
 800c4c4:	4286      	cmp	r6, r0
 800c4c6:	5421      	strb	r1, [r4, r0]
 800c4c8:	dcfb      	bgt.n	800c4c2 <__sccl+0x5a>
 800c4ca:	43d8      	mvns	r0, r3
 800c4cc:	4430      	add	r0, r6
 800c4ce:	1c5d      	adds	r5, r3, #1
 800c4d0:	42b3      	cmp	r3, r6
 800c4d2:	bfa8      	it	ge
 800c4d4:	2000      	movge	r0, #0
 800c4d6:	182b      	adds	r3, r5, r0
 800c4d8:	3202      	adds	r2, #2
 800c4da:	e7de      	b.n	800c49a <__sccl+0x32>

0800c4dc <_strtol_l.isra.0>:
 800c4dc:	2b01      	cmp	r3, #1
 800c4de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4e2:	d001      	beq.n	800c4e8 <_strtol_l.isra.0+0xc>
 800c4e4:	2b24      	cmp	r3, #36	; 0x24
 800c4e6:	d906      	bls.n	800c4f6 <_strtol_l.isra.0+0x1a>
 800c4e8:	f7fe fff0 	bl	800b4cc <__errno>
 800c4ec:	2316      	movs	r3, #22
 800c4ee:	6003      	str	r3, [r0, #0]
 800c4f0:	2000      	movs	r0, #0
 800c4f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4f6:	4f3a      	ldr	r7, [pc, #232]	; (800c5e0 <_strtol_l.isra.0+0x104>)
 800c4f8:	468e      	mov	lr, r1
 800c4fa:	4676      	mov	r6, lr
 800c4fc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c500:	5de5      	ldrb	r5, [r4, r7]
 800c502:	f015 0508 	ands.w	r5, r5, #8
 800c506:	d1f8      	bne.n	800c4fa <_strtol_l.isra.0+0x1e>
 800c508:	2c2d      	cmp	r4, #45	; 0x2d
 800c50a:	d134      	bne.n	800c576 <_strtol_l.isra.0+0x9a>
 800c50c:	f89e 4000 	ldrb.w	r4, [lr]
 800c510:	f04f 0801 	mov.w	r8, #1
 800c514:	f106 0e02 	add.w	lr, r6, #2
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d05c      	beq.n	800c5d6 <_strtol_l.isra.0+0xfa>
 800c51c:	2b10      	cmp	r3, #16
 800c51e:	d10c      	bne.n	800c53a <_strtol_l.isra.0+0x5e>
 800c520:	2c30      	cmp	r4, #48	; 0x30
 800c522:	d10a      	bne.n	800c53a <_strtol_l.isra.0+0x5e>
 800c524:	f89e 4000 	ldrb.w	r4, [lr]
 800c528:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c52c:	2c58      	cmp	r4, #88	; 0x58
 800c52e:	d14d      	bne.n	800c5cc <_strtol_l.isra.0+0xf0>
 800c530:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800c534:	2310      	movs	r3, #16
 800c536:	f10e 0e02 	add.w	lr, lr, #2
 800c53a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800c53e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c542:	2600      	movs	r6, #0
 800c544:	fbbc f9f3 	udiv	r9, ip, r3
 800c548:	4635      	mov	r5, r6
 800c54a:	fb03 ca19 	mls	sl, r3, r9, ip
 800c54e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c552:	2f09      	cmp	r7, #9
 800c554:	d818      	bhi.n	800c588 <_strtol_l.isra.0+0xac>
 800c556:	463c      	mov	r4, r7
 800c558:	42a3      	cmp	r3, r4
 800c55a:	dd24      	ble.n	800c5a6 <_strtol_l.isra.0+0xca>
 800c55c:	2e00      	cmp	r6, #0
 800c55e:	db1f      	blt.n	800c5a0 <_strtol_l.isra.0+0xc4>
 800c560:	45a9      	cmp	r9, r5
 800c562:	d31d      	bcc.n	800c5a0 <_strtol_l.isra.0+0xc4>
 800c564:	d101      	bne.n	800c56a <_strtol_l.isra.0+0x8e>
 800c566:	45a2      	cmp	sl, r4
 800c568:	db1a      	blt.n	800c5a0 <_strtol_l.isra.0+0xc4>
 800c56a:	fb05 4503 	mla	r5, r5, r3, r4
 800c56e:	2601      	movs	r6, #1
 800c570:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c574:	e7eb      	b.n	800c54e <_strtol_l.isra.0+0x72>
 800c576:	2c2b      	cmp	r4, #43	; 0x2b
 800c578:	bf08      	it	eq
 800c57a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800c57e:	46a8      	mov	r8, r5
 800c580:	bf08      	it	eq
 800c582:	f106 0e02 	addeq.w	lr, r6, #2
 800c586:	e7c7      	b.n	800c518 <_strtol_l.isra.0+0x3c>
 800c588:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c58c:	2f19      	cmp	r7, #25
 800c58e:	d801      	bhi.n	800c594 <_strtol_l.isra.0+0xb8>
 800c590:	3c37      	subs	r4, #55	; 0x37
 800c592:	e7e1      	b.n	800c558 <_strtol_l.isra.0+0x7c>
 800c594:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c598:	2f19      	cmp	r7, #25
 800c59a:	d804      	bhi.n	800c5a6 <_strtol_l.isra.0+0xca>
 800c59c:	3c57      	subs	r4, #87	; 0x57
 800c59e:	e7db      	b.n	800c558 <_strtol_l.isra.0+0x7c>
 800c5a0:	f04f 36ff 	mov.w	r6, #4294967295
 800c5a4:	e7e4      	b.n	800c570 <_strtol_l.isra.0+0x94>
 800c5a6:	2e00      	cmp	r6, #0
 800c5a8:	da05      	bge.n	800c5b6 <_strtol_l.isra.0+0xda>
 800c5aa:	2322      	movs	r3, #34	; 0x22
 800c5ac:	6003      	str	r3, [r0, #0]
 800c5ae:	4665      	mov	r5, ip
 800c5b0:	b942      	cbnz	r2, 800c5c4 <_strtol_l.isra.0+0xe8>
 800c5b2:	4628      	mov	r0, r5
 800c5b4:	e79d      	b.n	800c4f2 <_strtol_l.isra.0+0x16>
 800c5b6:	f1b8 0f00 	cmp.w	r8, #0
 800c5ba:	d000      	beq.n	800c5be <_strtol_l.isra.0+0xe2>
 800c5bc:	426d      	negs	r5, r5
 800c5be:	2a00      	cmp	r2, #0
 800c5c0:	d0f7      	beq.n	800c5b2 <_strtol_l.isra.0+0xd6>
 800c5c2:	b10e      	cbz	r6, 800c5c8 <_strtol_l.isra.0+0xec>
 800c5c4:	f10e 31ff 	add.w	r1, lr, #4294967295
 800c5c8:	6011      	str	r1, [r2, #0]
 800c5ca:	e7f2      	b.n	800c5b2 <_strtol_l.isra.0+0xd6>
 800c5cc:	2430      	movs	r4, #48	; 0x30
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d1b3      	bne.n	800c53a <_strtol_l.isra.0+0x5e>
 800c5d2:	2308      	movs	r3, #8
 800c5d4:	e7b1      	b.n	800c53a <_strtol_l.isra.0+0x5e>
 800c5d6:	2c30      	cmp	r4, #48	; 0x30
 800c5d8:	d0a4      	beq.n	800c524 <_strtol_l.isra.0+0x48>
 800c5da:	230a      	movs	r3, #10
 800c5dc:	e7ad      	b.n	800c53a <_strtol_l.isra.0+0x5e>
 800c5de:	bf00      	nop
 800c5e0:	0800ca37 	.word	0x0800ca37

0800c5e4 <_strtol_r>:
 800c5e4:	f7ff bf7a 	b.w	800c4dc <_strtol_l.isra.0>

0800c5e8 <_strtoul_l.isra.0>:
 800c5e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c5ec:	4e3b      	ldr	r6, [pc, #236]	; (800c6dc <_strtoul_l.isra.0+0xf4>)
 800c5ee:	4686      	mov	lr, r0
 800c5f0:	468c      	mov	ip, r1
 800c5f2:	4660      	mov	r0, ip
 800c5f4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c5f8:	5da5      	ldrb	r5, [r4, r6]
 800c5fa:	f015 0508 	ands.w	r5, r5, #8
 800c5fe:	d1f8      	bne.n	800c5f2 <_strtoul_l.isra.0+0xa>
 800c600:	2c2d      	cmp	r4, #45	; 0x2d
 800c602:	d134      	bne.n	800c66e <_strtoul_l.isra.0+0x86>
 800c604:	f89c 4000 	ldrb.w	r4, [ip]
 800c608:	f04f 0801 	mov.w	r8, #1
 800c60c:	f100 0c02 	add.w	ip, r0, #2
 800c610:	2b00      	cmp	r3, #0
 800c612:	d05e      	beq.n	800c6d2 <_strtoul_l.isra.0+0xea>
 800c614:	2b10      	cmp	r3, #16
 800c616:	d10c      	bne.n	800c632 <_strtoul_l.isra.0+0x4a>
 800c618:	2c30      	cmp	r4, #48	; 0x30
 800c61a:	d10a      	bne.n	800c632 <_strtoul_l.isra.0+0x4a>
 800c61c:	f89c 0000 	ldrb.w	r0, [ip]
 800c620:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c624:	2858      	cmp	r0, #88	; 0x58
 800c626:	d14f      	bne.n	800c6c8 <_strtoul_l.isra.0+0xe0>
 800c628:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c62c:	2310      	movs	r3, #16
 800c62e:	f10c 0c02 	add.w	ip, ip, #2
 800c632:	f04f 37ff 	mov.w	r7, #4294967295
 800c636:	2500      	movs	r5, #0
 800c638:	fbb7 f7f3 	udiv	r7, r7, r3
 800c63c:	fb03 f907 	mul.w	r9, r3, r7
 800c640:	ea6f 0909 	mvn.w	r9, r9
 800c644:	4628      	mov	r0, r5
 800c646:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c64a:	2e09      	cmp	r6, #9
 800c64c:	d818      	bhi.n	800c680 <_strtoul_l.isra.0+0x98>
 800c64e:	4634      	mov	r4, r6
 800c650:	42a3      	cmp	r3, r4
 800c652:	dd24      	ble.n	800c69e <_strtoul_l.isra.0+0xb6>
 800c654:	2d00      	cmp	r5, #0
 800c656:	db1f      	blt.n	800c698 <_strtoul_l.isra.0+0xb0>
 800c658:	4287      	cmp	r7, r0
 800c65a:	d31d      	bcc.n	800c698 <_strtoul_l.isra.0+0xb0>
 800c65c:	d101      	bne.n	800c662 <_strtoul_l.isra.0+0x7a>
 800c65e:	45a1      	cmp	r9, r4
 800c660:	db1a      	blt.n	800c698 <_strtoul_l.isra.0+0xb0>
 800c662:	fb00 4003 	mla	r0, r0, r3, r4
 800c666:	2501      	movs	r5, #1
 800c668:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c66c:	e7eb      	b.n	800c646 <_strtoul_l.isra.0+0x5e>
 800c66e:	2c2b      	cmp	r4, #43	; 0x2b
 800c670:	bf08      	it	eq
 800c672:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c676:	46a8      	mov	r8, r5
 800c678:	bf08      	it	eq
 800c67a:	f100 0c02 	addeq.w	ip, r0, #2
 800c67e:	e7c7      	b.n	800c610 <_strtoul_l.isra.0+0x28>
 800c680:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c684:	2e19      	cmp	r6, #25
 800c686:	d801      	bhi.n	800c68c <_strtoul_l.isra.0+0xa4>
 800c688:	3c37      	subs	r4, #55	; 0x37
 800c68a:	e7e1      	b.n	800c650 <_strtoul_l.isra.0+0x68>
 800c68c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c690:	2e19      	cmp	r6, #25
 800c692:	d804      	bhi.n	800c69e <_strtoul_l.isra.0+0xb6>
 800c694:	3c57      	subs	r4, #87	; 0x57
 800c696:	e7db      	b.n	800c650 <_strtoul_l.isra.0+0x68>
 800c698:	f04f 35ff 	mov.w	r5, #4294967295
 800c69c:	e7e4      	b.n	800c668 <_strtoul_l.isra.0+0x80>
 800c69e:	2d00      	cmp	r5, #0
 800c6a0:	da07      	bge.n	800c6b2 <_strtoul_l.isra.0+0xca>
 800c6a2:	2322      	movs	r3, #34	; 0x22
 800c6a4:	f8ce 3000 	str.w	r3, [lr]
 800c6a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c6ac:	b942      	cbnz	r2, 800c6c0 <_strtoul_l.isra.0+0xd8>
 800c6ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c6b2:	f1b8 0f00 	cmp.w	r8, #0
 800c6b6:	d000      	beq.n	800c6ba <_strtoul_l.isra.0+0xd2>
 800c6b8:	4240      	negs	r0, r0
 800c6ba:	2a00      	cmp	r2, #0
 800c6bc:	d0f7      	beq.n	800c6ae <_strtoul_l.isra.0+0xc6>
 800c6be:	b10d      	cbz	r5, 800c6c4 <_strtoul_l.isra.0+0xdc>
 800c6c0:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c6c4:	6011      	str	r1, [r2, #0]
 800c6c6:	e7f2      	b.n	800c6ae <_strtoul_l.isra.0+0xc6>
 800c6c8:	2430      	movs	r4, #48	; 0x30
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d1b1      	bne.n	800c632 <_strtoul_l.isra.0+0x4a>
 800c6ce:	2308      	movs	r3, #8
 800c6d0:	e7af      	b.n	800c632 <_strtoul_l.isra.0+0x4a>
 800c6d2:	2c30      	cmp	r4, #48	; 0x30
 800c6d4:	d0a2      	beq.n	800c61c <_strtoul_l.isra.0+0x34>
 800c6d6:	230a      	movs	r3, #10
 800c6d8:	e7ab      	b.n	800c632 <_strtoul_l.isra.0+0x4a>
 800c6da:	bf00      	nop
 800c6dc:	0800ca37 	.word	0x0800ca37

0800c6e0 <_strtoul_r>:
 800c6e0:	f7ff bf82 	b.w	800c5e8 <_strtoul_l.isra.0>

0800c6e4 <__submore>:
 800c6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e8:	460c      	mov	r4, r1
 800c6ea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c6ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c6f0:	4299      	cmp	r1, r3
 800c6f2:	d11d      	bne.n	800c730 <__submore+0x4c>
 800c6f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c6f8:	f7fe ff2a 	bl	800b550 <_malloc_r>
 800c6fc:	b918      	cbnz	r0, 800c706 <__submore+0x22>
 800c6fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c702:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c70a:	63a3      	str	r3, [r4, #56]	; 0x38
 800c70c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c710:	6360      	str	r0, [r4, #52]	; 0x34
 800c712:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c716:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c71a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c71e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c722:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c726:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c72a:	6020      	str	r0, [r4, #0]
 800c72c:	2000      	movs	r0, #0
 800c72e:	e7e8      	b.n	800c702 <__submore+0x1e>
 800c730:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c732:	0077      	lsls	r7, r6, #1
 800c734:	463a      	mov	r2, r7
 800c736:	f000 f829 	bl	800c78c <_realloc_r>
 800c73a:	4605      	mov	r5, r0
 800c73c:	2800      	cmp	r0, #0
 800c73e:	d0de      	beq.n	800c6fe <__submore+0x1a>
 800c740:	eb00 0806 	add.w	r8, r0, r6
 800c744:	4601      	mov	r1, r0
 800c746:	4632      	mov	r2, r6
 800c748:	4640      	mov	r0, r8
 800c74a:	f7fe feeb 	bl	800b524 <memcpy>
 800c74e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c752:	f8c4 8000 	str.w	r8, [r4]
 800c756:	e7e9      	b.n	800c72c <__submore+0x48>

0800c758 <memmove>:
 800c758:	4288      	cmp	r0, r1
 800c75a:	b510      	push	{r4, lr}
 800c75c:	eb01 0402 	add.w	r4, r1, r2
 800c760:	d902      	bls.n	800c768 <memmove+0x10>
 800c762:	4284      	cmp	r4, r0
 800c764:	4623      	mov	r3, r4
 800c766:	d807      	bhi.n	800c778 <memmove+0x20>
 800c768:	1e43      	subs	r3, r0, #1
 800c76a:	42a1      	cmp	r1, r4
 800c76c:	d008      	beq.n	800c780 <memmove+0x28>
 800c76e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c772:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c776:	e7f8      	b.n	800c76a <memmove+0x12>
 800c778:	4402      	add	r2, r0
 800c77a:	4601      	mov	r1, r0
 800c77c:	428a      	cmp	r2, r1
 800c77e:	d100      	bne.n	800c782 <memmove+0x2a>
 800c780:	bd10      	pop	{r4, pc}
 800c782:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c786:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c78a:	e7f7      	b.n	800c77c <memmove+0x24>

0800c78c <_realloc_r>:
 800c78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c78e:	4607      	mov	r7, r0
 800c790:	4614      	mov	r4, r2
 800c792:	460e      	mov	r6, r1
 800c794:	b921      	cbnz	r1, 800c7a0 <_realloc_r+0x14>
 800c796:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c79a:	4611      	mov	r1, r2
 800c79c:	f7fe bed8 	b.w	800b550 <_malloc_r>
 800c7a0:	b922      	cbnz	r2, 800c7ac <_realloc_r+0x20>
 800c7a2:	f7ff f803 	bl	800b7ac <_free_r>
 800c7a6:	4625      	mov	r5, r4
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7ac:	f000 f814 	bl	800c7d8 <_malloc_usable_size_r>
 800c7b0:	42a0      	cmp	r0, r4
 800c7b2:	d20f      	bcs.n	800c7d4 <_realloc_r+0x48>
 800c7b4:	4621      	mov	r1, r4
 800c7b6:	4638      	mov	r0, r7
 800c7b8:	f7fe feca 	bl	800b550 <_malloc_r>
 800c7bc:	4605      	mov	r5, r0
 800c7be:	2800      	cmp	r0, #0
 800c7c0:	d0f2      	beq.n	800c7a8 <_realloc_r+0x1c>
 800c7c2:	4631      	mov	r1, r6
 800c7c4:	4622      	mov	r2, r4
 800c7c6:	f7fe fead 	bl	800b524 <memcpy>
 800c7ca:	4631      	mov	r1, r6
 800c7cc:	4638      	mov	r0, r7
 800c7ce:	f7fe ffed 	bl	800b7ac <_free_r>
 800c7d2:	e7e9      	b.n	800c7a8 <_realloc_r+0x1c>
 800c7d4:	4635      	mov	r5, r6
 800c7d6:	e7e7      	b.n	800c7a8 <_realloc_r+0x1c>

0800c7d8 <_malloc_usable_size_r>:
 800c7d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c7dc:	1f18      	subs	r0, r3, #4
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	bfbc      	itt	lt
 800c7e2:	580b      	ldrlt	r3, [r1, r0]
 800c7e4:	18c0      	addlt	r0, r0, r3
 800c7e6:	4770      	bx	lr

0800c7e8 <_init>:
 800c7e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7ea:	bf00      	nop
 800c7ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7ee:	bc08      	pop	{r3}
 800c7f0:	469e      	mov	lr, r3
 800c7f2:	4770      	bx	lr

0800c7f4 <_fini>:
 800c7f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7f6:	bf00      	nop
 800c7f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c7fa:	bc08      	pop	{r3}
 800c7fc:	469e      	mov	lr, r3
 800c7fe:	4770      	bx	lr
