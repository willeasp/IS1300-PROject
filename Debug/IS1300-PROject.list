
IS1300-PROject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000488c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08004a14  08004a14  00014a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a7c  08004a7c  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08004a7c  08004a7c  00014a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a84  08004a84  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a84  08004a84  00014a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a88  08004a88  00014a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000024  08004ab0  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08004ab0  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012197  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002637  00000000  00000000  000321eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c40  00000000  00000000  00034828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  00035468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c03  00000000  00000000  00035fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000106f0  00000000  00000000  0005cba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb498  00000000  00000000  0006d293  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015872b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003070  00000000  00000000  00158780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080049fc 	.word	0x080049fc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	080049fc 	.word	0x080049fc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <init_backlight>:


/**
 * @brief Set the backlight to white
 */
void init_backlight () {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(Disp_White_GPIO_Port, Disp_White_Pin, SET);
 80004c4:	2201      	movs	r2, #1
 80004c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ca:	4802      	ldr	r0, [pc, #8]	; (80004d4 <init_backlight+0x14>)
 80004cc:	f000 fff8 	bl	80014c0 <HAL_GPIO_WritePin>
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	48000800 	.word	0x48000800

080004d8 <test_backlight>:


/**
 * @brief Test all backlight colors
 */
void test_backlight () {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
    GPIO_TypeDef* ports[] = {Disp_White_GPIO_Port, Disp_Green_GPIO_Port, Disp_Red_GPIO_Port};
 80004de:	4a21      	ldr	r2, [pc, #132]	; (8000564 <test_backlight+0x8c>)
 80004e0:	f107 0308 	add.w	r3, r7, #8
 80004e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80004e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t pins[] = {Disp_White_Pin, Disp_Green_Pin, Disp_Red_Pin};
 80004ea:	4a1f      	ldr	r2, [pc, #124]	; (8000568 <test_backlight+0x90>)
 80004ec:	463b      	mov	r3, r7
 80004ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004f2:	6018      	str	r0, [r3, #0]
 80004f4:	3304      	adds	r3, #4
 80004f6:	8019      	strh	r1, [r3, #0]
    for (int i = 0; i < 3; ++i) {
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	e029      	b.n	8000552 <test_backlight+0x7a>
        HAL_GPIO_WritePin(ports[i], pins[i], SET);
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	f107 0218 	add.w	r2, r7, #24
 8000506:	4413      	add	r3, r2
 8000508:	f853 0c10 	ldr.w	r0, [r3, #-16]
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	f107 0218 	add.w	r2, r7, #24
 8000514:	4413      	add	r3, r2
 8000516:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800051a:	2201      	movs	r2, #1
 800051c:	4619      	mov	r1, r3
 800051e:	f000 ffcf 	bl	80014c0 <HAL_GPIO_WritePin>
        HAL_Delay(200);
 8000522:	20c8      	movs	r0, #200	; 0xc8
 8000524:	f000 fc6e 	bl	8000e04 <HAL_Delay>
        HAL_GPIO_WritePin(ports[i], pins[i], RESET);
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	f107 0218 	add.w	r2, r7, #24
 8000530:	4413      	add	r3, r2
 8000532:	f853 0c10 	ldr.w	r0, [r3, #-16]
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	f107 0218 	add.w	r2, r7, #24
 800053e:	4413      	add	r3, r2
 8000540:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000544:	2200      	movs	r2, #0
 8000546:	4619      	mov	r1, r3
 8000548:	f000 ffba 	bl	80014c0 <HAL_GPIO_WritePin>
    for (int i = 0; i < 3; ++i) {
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	3301      	adds	r3, #1
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	2b02      	cmp	r3, #2
 8000556:	ddd2      	ble.n	80004fe <test_backlight+0x26>
    }
}
 8000558:	bf00      	nop
 800055a:	bf00      	nop
 800055c:	3718      	adds	r7, #24
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	08004a14 	.word	0x08004a14
 8000568:	08004a20 	.word	0x08004a20

0800056c <split_byte>:

/**
 * @brief Split a byte to send to the display
 */
void split_byte (uint8_t byte, uint8_t *buffer) {
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	71fb      	strb	r3, [r7, #7]
    buffer[0] = byte & 0x0F;            // lower bits first
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	f003 030f 	and.w	r3, r3, #15
 800057e:	b2da      	uxtb	r2, r3
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	701a      	strb	r2, [r3, #0]
    buffer[1] = (byte & 0xF0) >> 4;     // upper bits second
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	3301      	adds	r3, #1
 8000588:	79fa      	ldrb	r2, [r7, #7]
 800058a:	0912      	lsrs	r2, r2, #4
 800058c:	b2d2      	uxtb	r2, r2
 800058e:	701a      	strb	r2, [r3, #0]
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <display_send>:

/**
 * @brief Send instruction bytes via spi to the display
 */
int display_send (uint8_t *instructions, uint16_t length) {
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	460b      	mov	r3, r1
 80005a6:	807b      	strh	r3, [r7, #2]
 80005a8:	466b      	mov	r3, sp
 80005aa:	461d      	mov	r5, r3
    /* create message to transmit */
    uint16_t mes_length = length*2 +1; // +1 for start byte
 80005ac:	887b      	ldrh	r3, [r7, #2]
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	b29b      	uxth	r3, r3
 80005b2:	3301      	adds	r3, #1
 80005b4:	837b      	strh	r3, [r7, #26]
    uint8_t message[mes_length];
 80005b6:	8b7c      	ldrh	r4, [r7, #26]
 80005b8:	4623      	mov	r3, r4
 80005ba:	3b01      	subs	r3, #1
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	b2a0      	uxth	r0, r4
 80005c0:	f04f 0100 	mov.w	r1, #0
 80005c4:	f04f 0200 	mov.w	r2, #0
 80005c8:	f04f 0300 	mov.w	r3, #0
 80005cc:	00cb      	lsls	r3, r1, #3
 80005ce:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80005d2:	00c2      	lsls	r2, r0, #3
 80005d4:	b2a0      	uxth	r0, r4
 80005d6:	f04f 0100 	mov.w	r1, #0
 80005da:	f04f 0200 	mov.w	r2, #0
 80005de:	f04f 0300 	mov.w	r3, #0
 80005e2:	00cb      	lsls	r3, r1, #3
 80005e4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80005e8:	00c2      	lsls	r2, r0, #3
 80005ea:	4623      	mov	r3, r4
 80005ec:	3307      	adds	r3, #7
 80005ee:	08db      	lsrs	r3, r3, #3
 80005f0:	00db      	lsls	r3, r3, #3
 80005f2:	ebad 0d03 	sub.w	sp, sp, r3
 80005f6:	466b      	mov	r3, sp
 80005f8:	3300      	adds	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]

    message[0] = 0x1F;  // start byte
 80005fc:	693b      	ldr	r3, [r7, #16]
 80005fe:	221f      	movs	r2, #31
 8000600:	701a      	strb	r2, [r3, #0]

    uint8_t divided[2]; // for splitting a byte into two
    for (int i = 0; i < length; ++i) {
 8000602:	2300      	movs	r3, #0
 8000604:	61fb      	str	r3, [r7, #28]
 8000606:	e018      	b.n	800063a <display_send+0x9e>
        split_byte(instructions[i], divided);
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	f107 020c 	add.w	r2, r7, #12
 8000614:	4611      	mov	r1, r2
 8000616:	4618      	mov	r0, r3
 8000618:	f7ff ffa8 	bl	800056c <split_byte>
        message[1 + i*2] = divided[0];
 800061c:	69fb      	ldr	r3, [r7, #28]
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	3301      	adds	r3, #1
 8000622:	7b39      	ldrb	r1, [r7, #12]
 8000624:	693a      	ldr	r2, [r7, #16]
 8000626:	54d1      	strb	r1, [r2, r3]
        message[1 + i*2 +1] = divided[1];
 8000628:	69fb      	ldr	r3, [r7, #28]
 800062a:	3301      	adds	r3, #1
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	7b79      	ldrb	r1, [r7, #13]
 8000630:	693a      	ldr	r2, [r7, #16]
 8000632:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < length; ++i) {
 8000634:	69fb      	ldr	r3, [r7, #28]
 8000636:	3301      	adds	r3, #1
 8000638:	61fb      	str	r3, [r7, #28]
 800063a:	887b      	ldrh	r3, [r7, #2]
 800063c:	69fa      	ldr	r2, [r7, #28]
 800063e:	429a      	cmp	r2, r3
 8000640:	dbe2      	blt.n	8000608 <display_send+0x6c>
    }

    if (HAL_SPI_Transmit(&hspi2, message, mes_length, 100) != HAL_OK) {
 8000642:	6939      	ldr	r1, [r7, #16]
 8000644:	8b7a      	ldrh	r2, [r7, #26]
 8000646:	2364      	movs	r3, #100	; 0x64
 8000648:	4806      	ldr	r0, [pc, #24]	; (8000664 <display_send+0xc8>)
 800064a:	f002 fb00 	bl	8002c4e <HAL_SPI_Transmit>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <display_send+0xbc>
        return 1;
 8000654:	2301      	movs	r3, #1
 8000656:	e000      	b.n	800065a <display_send+0xbe>
    }
    return 0;
 8000658:	2300      	movs	r3, #0
 800065a:	46ad      	mov	sp, r5
}
 800065c:	4618      	mov	r0, r3
 800065e:	3720      	adds	r7, #32
 8000660:	46bd      	mov	sp, r7
 8000662:	bdb0      	pop	{r4, r5, r7, pc}
 8000664:	20000044 	.word	0x20000044

08000668 <init_display>:

/**
 * @brief Initialise the display
 */
void init_display () {
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
    HAL_Delay(5);
 800066e:	2005      	movs	r0, #5
 8000670:	f000 fbc8 	bl	8000e04 <HAL_Delay>
    uint16_t ins_length = 12;
 8000674:	230c      	movs	r3, #12
 8000676:	81fb      	strh	r3, [r7, #14]
    uint8_t instructions[] = {
 8000678:	4a07      	ldr	r2, [pc, #28]	; (8000698 <init_display+0x30>)
 800067a:	463b      	mov	r3, r7
 800067c:	ca07      	ldmia	r2, {r0, r1, r2}
 800067e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0x01,
        0x38,
        0x0F,
    };

    display_send(instructions, ins_length);
 8000682:	89fa      	ldrh	r2, [r7, #14]
 8000684:	463b      	mov	r3, r7
 8000686:	4611      	mov	r1, r2
 8000688:	4618      	mov	r0, r3
 800068a:	f7ff ff87 	bl	800059c <display_send>
}
 800068e:	bf00      	nop
 8000690:	3710      	adds	r7, #16
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	08004a28 	.word	0x08004a28

0800069c <handle_error>:
 *      Author: Dell
 */

#include "main.h"

void handle_error( void ) {
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a0:	b672      	cpsid	i
}
 80006a2:	bf00      	nop
    __disable_irq();
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80006a4:	2201      	movs	r2, #1
 80006a6:	2120      	movs	r1, #32
 80006a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ac:	f000 ff08 	bl	80014c0 <HAL_GPIO_WritePin>
    while (1)
 80006b0:	e7fe      	b.n	80006b0 <handle_error+0x14>
	...

080006b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b08a      	sub	sp, #40	; 0x28
 80006b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	2200      	movs	r2, #0
 80006c0:	601a      	str	r2, [r3, #0]
 80006c2:	605a      	str	r2, [r3, #4]
 80006c4:	609a      	str	r2, [r3, #8]
 80006c6:	60da      	str	r2, [r3, #12]
 80006c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	4b3c      	ldr	r3, [pc, #240]	; (80007bc <MX_GPIO_Init+0x108>)
 80006cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ce:	4a3b      	ldr	r2, [pc, #236]	; (80007bc <MX_GPIO_Init+0x108>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006d6:	4b39      	ldr	r3, [pc, #228]	; (80007bc <MX_GPIO_Init+0x108>)
 80006d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	613b      	str	r3, [r7, #16]
 80006e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	4b36      	ldr	r3, [pc, #216]	; (80007bc <MX_GPIO_Init+0x108>)
 80006e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006e6:	4a35      	ldr	r2, [pc, #212]	; (80007bc <MX_GPIO_Init+0x108>)
 80006e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006ee:	4b33      	ldr	r3, [pc, #204]	; (80007bc <MX_GPIO_Init+0x108>)
 80006f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fa:	4b30      	ldr	r3, [pc, #192]	; (80007bc <MX_GPIO_Init+0x108>)
 80006fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006fe:	4a2f      	ldr	r2, [pc, #188]	; (80007bc <MX_GPIO_Init+0x108>)
 8000700:	f043 0301 	orr.w	r3, r3, #1
 8000704:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000706:	4b2d      	ldr	r3, [pc, #180]	; (80007bc <MX_GPIO_Init+0x108>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000712:	4b2a      	ldr	r3, [pc, #168]	; (80007bc <MX_GPIO_Init+0x108>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	4a29      	ldr	r2, [pc, #164]	; (80007bc <MX_GPIO_Init+0x108>)
 8000718:	f043 0302 	orr.w	r3, r3, #2
 800071c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800071e:	4b27      	ldr	r3, [pc, #156]	; (80007bc <MX_GPIO_Init+0x108>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	f003 0302 	and.w	r3, r3, #2
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072a:	4b24      	ldr	r3, [pc, #144]	; (80007bc <MX_GPIO_Init+0x108>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	4a23      	ldr	r2, [pc, #140]	; (80007bc <MX_GPIO_Init+0x108>)
 8000730:	f043 0308 	orr.w	r3, r3, #8
 8000734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000736:	4b21      	ldr	r3, [pc, #132]	; (80007bc <MX_GPIO_Init+0x108>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	f003 0308 	and.w	r3, r3, #8
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2120      	movs	r1, #32
 8000746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074a:	f000 feb9 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Disp_Red_Pin|Disp_Green_Pin|Disp_White_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000754:	481a      	ldr	r0, [pc, #104]	; (80007c0 <MX_GPIO_Init+0x10c>)
 8000756:	f000 feb3 	bl	80014c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800075a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800075e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000760:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000764:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4619      	mov	r1, r3
 8000770:	4813      	ldr	r0, [pc, #76]	; (80007c0 <MX_GPIO_Init+0x10c>)
 8000772:	f000 fcfb 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000776:	2320      	movs	r3, #32
 8000778:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077a:	2301      	movs	r3, #1
 800077c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000782:	2300      	movs	r3, #0
 8000784:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000790:	f000 fcec 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Disp_Red_Pin|Disp_Green_Pin|Disp_White_Pin;
 8000794:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8000798:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079a:	2301      	movs	r3, #1
 800079c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079e:	2300      	movs	r3, #0
 80007a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	4619      	mov	r1, r3
 80007ac:	4804      	ldr	r0, [pc, #16]	; (80007c0 <MX_GPIO_Init+0x10c>)
 80007ae:	f000 fcdd 	bl	800116c <HAL_GPIO_Init>

}
 80007b2:	bf00      	nop
 80007b4:	3728      	adds	r7, #40	; 0x28
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000
 80007c0:	48000800 	.word	0x48000800

080007c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c8:	f000 faa0 	bl	8000d0c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007cc:	f000 f838 	bl	8000840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007d0:	f7ff ff70 	bl	80006b4 <MX_GPIO_Init>
  MX_UART5_Init();
 80007d4:	f000 f9b6 	bl	8000b44 <MX_UART5_Init>
  MX_SPI2_Init();
 80007d8:	f000 f8aa 	bl	8000930 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  test_backlight();
 80007dc:	f7ff fe7c 	bl	80004d8 <test_backlight>
  init_backlight();
 80007e0:	f7ff fe6e 	bl	80004c0 <init_backlight>
  init_display();
 80007e4:	f7ff ff40 	bl	8000668 <init_display>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* Start the transmission process */
    if (HAL_UART_Transmit_IT(&huart5, (uint8_t*)buffer, BUFFERSIZE) != HAL_OK) {
 80007e8:	2216      	movs	r2, #22
 80007ea:	4912      	ldr	r1, [pc, #72]	; (8000834 <main+0x70>)
 80007ec:	4812      	ldr	r0, [pc, #72]	; (8000838 <main+0x74>)
 80007ee:	f002 fd4f 	bl	8003290 <HAL_UART_Transmit_IT>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <main+0x38>
        Error_Handler();
 80007f8:	f000 f894 	bl	8000924 <Error_Handler>
    }
    /* Wait for the end of the transfer */
    while (uartReady != SET) {}
 80007fc:	bf00      	nop
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <main+0x78>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b01      	cmp	r3, #1
 8000804:	d1fb      	bne.n	80007fe <main+0x3a>

    /* Reset transmission flag */
    uartReady = RESET;
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <main+0x78>)
 8000808:	2200      	movs	r2, #0
 800080a:	701a      	strb	r2, [r3, #0]



    /* Put UART peripheral in reception process */
    if(HAL_UART_Receive_IT(&huart5, (uint8_t *)buffer, BUFFERSIZE) != HAL_OK) {
 800080c:	2216      	movs	r2, #22
 800080e:	4909      	ldr	r1, [pc, #36]	; (8000834 <main+0x70>)
 8000810:	4809      	ldr	r0, [pc, #36]	; (8000838 <main+0x74>)
 8000812:	f002 fdab 	bl	800336c <HAL_UART_Receive_IT>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <main+0x5c>
        Error_Handler();
 800081c:	f000 f882 	bl	8000924 <Error_Handler>
    }
    /* Wait for the end of the transfer */
    while (uartReady != SET) {}
 8000820:	bf00      	nop
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <main+0x78>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d1fb      	bne.n	8000822 <main+0x5e>
    /* Reset transmission flag */
    uartReady = RESET;
 800082a:	4b04      	ldr	r3, [pc, #16]	; (800083c <main+0x78>)
 800082c:	2200      	movs	r2, #0
 800082e:	701a      	strb	r2, [r3, #0]
    if (HAL_UART_Transmit_IT(&huart5, (uint8_t*)buffer, BUFFERSIZE) != HAL_OK) {
 8000830:	e7da      	b.n	80007e8 <main+0x24>
 8000832:	bf00      	nop
 8000834:	20000000 	.word	0x20000000
 8000838:	200000a8 	.word	0x200000a8
 800083c:	20000040 	.word	0x20000040

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b096      	sub	sp, #88	; 0x58
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0314 	add.w	r3, r7, #20
 800084a:	2244      	movs	r2, #68	; 0x44
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f004 f8cc 	bl	80049ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	463b      	mov	r3, r7
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000862:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000866:	f000 fe51 	bl	800150c <HAL_PWREx_ControlVoltageScaling>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000870:	f000 f858 	bl	8000924 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000874:	2302      	movs	r3, #2
 8000876:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000878:	f44f 7380 	mov.w	r3, #256	; 0x100
 800087c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800087e:	2310      	movs	r3, #16
 8000880:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000882:	2302      	movs	r3, #2
 8000884:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000886:	2302      	movs	r3, #2
 8000888:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800088a:	2301      	movs	r3, #1
 800088c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800088e:	230a      	movs	r3, #10
 8000890:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000892:	2307      	movs	r3, #7
 8000894:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000896:	2302      	movs	r3, #2
 8000898:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800089a:	2302      	movs	r3, #2
 800089c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800089e:	f107 0314 	add.w	r3, r7, #20
 80008a2:	4618      	mov	r0, r3
 80008a4:	f000 fe88 	bl	80015b8 <HAL_RCC_OscConfig>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80008ae:	f000 f839 	bl	8000924 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008b2:	230f      	movs	r3, #15
 80008b4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b6:	2303      	movs	r3, #3
 80008b8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008be:	2300      	movs	r3, #0
 80008c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008c2:	2300      	movs	r3, #0
 80008c4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008c6:	463b      	mov	r3, r7
 80008c8:	2104      	movs	r1, #4
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 fa5a 	bl	8001d84 <HAL_RCC_ClockConfig>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008d6:	f000 f825 	bl	8000924 <Error_Handler>
  }
}
 80008da:	bf00      	nop
 80008dc:	3758      	adds	r7, #88	; 0x58
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
	...

080008e4 <HAL_UART_TxCpltCallback>:
* @note This example shows a simple way to report end of IT Tx transfer, and
* you can add your own implementation.
* @retval None
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
    /* Set transmission flag: transfer complete*/
    uartReady = SET;
 80008ec:	4b04      	ldr	r3, [pc, #16]	; (8000900 <HAL_UART_TxCpltCallback+0x1c>)
 80008ee:	2201      	movs	r2, #1
 80008f0:	701a      	strb	r2, [r3, #0]
}
 80008f2:	bf00      	nop
 80008f4:	370c      	adds	r7, #12
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20000040 	.word	0x20000040

08000904 <HAL_UART_RxCpltCallback>:
* @note This example shows a simple way to report end of IT Rx transfer, and
* you can add your own implementation.
* @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
    /* Set transmission flag: transfer complete*/
    uartReady = SET;
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <HAL_UART_RxCpltCallback+0x1c>)
 800090e:	2201      	movs	r2, #1
 8000910:	701a      	strb	r2, [r3, #0]
}
 8000912:	bf00      	nop
 8000914:	370c      	adds	r7, #12
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	20000040 	.word	0x20000040

08000924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    handle_error();
 8000928:	f7ff feb8 	bl	800069c <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}

08000930 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000934:	4b1b      	ldr	r3, [pc, #108]	; (80009a4 <MX_SPI2_Init+0x74>)
 8000936:	4a1c      	ldr	r2, [pc, #112]	; (80009a8 <MX_SPI2_Init+0x78>)
 8000938:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800093a:	4b1a      	ldr	r3, [pc, #104]	; (80009a4 <MX_SPI2_Init+0x74>)
 800093c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000940:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000942:	4b18      	ldr	r3, [pc, #96]	; (80009a4 <MX_SPI2_Init+0x74>)
 8000944:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000948:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800094a:	4b16      	ldr	r3, [pc, #88]	; (80009a4 <MX_SPI2_Init+0x74>)
 800094c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000950:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MX_SPI2_Init+0x74>)
 8000954:	2202      	movs	r2, #2
 8000956:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000958:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <MX_SPI2_Init+0x74>)
 800095a:	2201      	movs	r2, #1
 800095c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <MX_SPI2_Init+0x74>)
 8000960:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000964:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000966:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <MX_SPI2_Init+0x74>)
 8000968:	2230      	movs	r2, #48	; 0x30
 800096a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800096c:	4b0d      	ldr	r3, [pc, #52]	; (80009a4 <MX_SPI2_Init+0x74>)
 800096e:	2280      	movs	r2, #128	; 0x80
 8000970:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000972:	4b0c      	ldr	r3, [pc, #48]	; (80009a4 <MX_SPI2_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000978:	4b0a      	ldr	r3, [pc, #40]	; (80009a4 <MX_SPI2_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MX_SPI2_Init+0x74>)
 8000980:	2207      	movs	r2, #7
 8000982:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000984:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <MX_SPI2_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <MX_SPI2_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000990:	4804      	ldr	r0, [pc, #16]	; (80009a4 <MX_SPI2_Init+0x74>)
 8000992:	f002 f8b9 	bl	8002b08 <HAL_SPI_Init>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d001      	beq.n	80009a0 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 800099c:	f7ff ffc2 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20000044 	.word	0x20000044
 80009a8:	40003800 	.word	0x40003800

080009ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	2200      	movs	r2, #0
 80009ba:	601a      	str	r2, [r3, #0]
 80009bc:	605a      	str	r2, [r3, #4]
 80009be:	609a      	str	r2, [r3, #8]
 80009c0:	60da      	str	r2, [r3, #12]
 80009c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a25      	ldr	r2, [pc, #148]	; (8000a60 <HAL_SPI_MspInit+0xb4>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d144      	bne.n	8000a58 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009ce:	4b25      	ldr	r3, [pc, #148]	; (8000a64 <HAL_SPI_MspInit+0xb8>)
 80009d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d2:	4a24      	ldr	r2, [pc, #144]	; (8000a64 <HAL_SPI_MspInit+0xb8>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d8:	6593      	str	r3, [r2, #88]	; 0x58
 80009da:	4b22      	ldr	r3, [pc, #136]	; (8000a64 <HAL_SPI_MspInit+0xb8>)
 80009dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <HAL_SPI_MspInit+0xb8>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	4a1e      	ldr	r2, [pc, #120]	; (8000a64 <HAL_SPI_MspInit+0xb8>)
 80009ec:	f043 0304 	orr.w	r3, r3, #4
 80009f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <HAL_SPI_MspInit+0xb8>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	f003 0304 	and.w	r3, r3, #4
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fe:	4b19      	ldr	r3, [pc, #100]	; (8000a64 <HAL_SPI_MspInit+0xb8>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	4a18      	ldr	r2, [pc, #96]	; (8000a64 <HAL_SPI_MspInit+0xb8>)
 8000a04:	f043 0302 	orr.w	r3, r3, #2
 8000a08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a0a:	4b16      	ldr	r3, [pc, #88]	; (8000a64 <HAL_SPI_MspInit+0xb8>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	f003 0302 	and.w	r3, r3, #2
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = Display_OUT_Pin;
 8000a16:	2308      	movs	r3, #8
 8000a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1a:	2302      	movs	r3, #2
 8000a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a22:	2303      	movs	r3, #3
 8000a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a26:	2305      	movs	r3, #5
 8000a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Display_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480d      	ldr	r0, [pc, #52]	; (8000a68 <HAL_SPI_MspInit+0xbc>)
 8000a32:	f000 fb9b 	bl	800116c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Dispay_CLK_Pin|Display_CS_Pin;
 8000a36:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a40:	2300      	movs	r3, #0
 8000a42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a48:	2305      	movs	r3, #5
 8000a4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4c:	f107 0314 	add.w	r3, r7, #20
 8000a50:	4619      	mov	r1, r3
 8000a52:	4806      	ldr	r0, [pc, #24]	; (8000a6c <HAL_SPI_MspInit+0xc0>)
 8000a54:	f000 fb8a 	bl	800116c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3728      	adds	r7, #40	; 0x28
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40003800 	.word	0x40003800
 8000a64:	40021000 	.word	0x40021000
 8000a68:	48000800 	.word	0x48000800
 8000a6c:	48000400 	.word	0x48000400

08000a70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b083      	sub	sp, #12
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a76:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a7a:	4a0e      	ldr	r2, [pc, #56]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a7c:	f043 0301 	orr.w	r3, r3, #1
 8000a80:	6613      	str	r3, [r2, #96]	; 0x60
 8000a82:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a86:	f003 0301 	and.w	r3, r3, #1
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a92:	4a08      	ldr	r2, [pc, #32]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a98:	6593      	str	r3, [r2, #88]	; 0x58
 8000a9a:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <HAL_MspInit+0x44>)
 8000a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40021000 	.word	0x40021000

08000ab8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <NMI_Handler+0x4>

08000abe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <HardFault_Handler+0x4>

08000ac4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <MemManage_Handler+0x4>

08000aca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ace:	e7fe      	b.n	8000ace <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	e7fe      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad6:	b480      	push	{r7}
 8000ad8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	46bd      	mov	sp, r7
 8000ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae2:	4770      	bx	lr

08000ae4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ae8:	bf00      	nop
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr

08000af2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b04:	f000 f95e 	bl	8000dc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000b10:	4802      	ldr	r0, [pc, #8]	; (8000b1c <UART5_IRQHandler+0x10>)
 8000b12:	f002 fc81 	bl	8003418 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	200000a8 	.word	0x200000a8

08000b20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <SystemInit+0x20>)
 8000b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b2a:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <SystemInit+0x20>)
 8000b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b34:	bf00      	nop
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr
 8000b3e:	bf00      	nop
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_UART5_Init+0x58>)
 8000b4a:	4a15      	ldr	r2, [pc, #84]	; (8000ba0 <MX_UART5_Init+0x5c>)
 8000b4c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_UART5_Init+0x58>)
 8000b50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b54:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_UART5_Init+0x58>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_UART5_Init+0x58>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_UART5_Init+0x58>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_UART5_Init+0x58>)
 8000b6a:	220c      	movs	r2, #12
 8000b6c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_UART5_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_UART5_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_UART5_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_UART5_Init+0x58>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_UART5_Init+0x58>)
 8000b88:	f002 fb34 	bl	80031f4 <HAL_UART_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000b92:	f7ff fec7 	bl	8000924 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200000a8 	.word	0x200000a8
 8000ba0:	40005000 	.word	0x40005000

08000ba4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b0ac      	sub	sp, #176	; 0xb0
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
 8000bb4:	605a      	str	r2, [r3, #4]
 8000bb6:	609a      	str	r2, [r3, #8]
 8000bb8:	60da      	str	r2, [r3, #12]
 8000bba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000bbc:	f107 0314 	add.w	r3, r7, #20
 8000bc0:	2288      	movs	r2, #136	; 0x88
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f003 ff11 	bl	80049ec <memset>
  if(uartHandle->Instance==UART5)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a36      	ldr	r2, [pc, #216]	; (8000ca8 <HAL_UART_MspInit+0x104>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d164      	bne.n	8000c9e <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000bd4:	2310      	movs	r3, #16
 8000bd6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4618      	mov	r0, r3
 8000be2:	f001 fad5 	bl	8002190 <HAL_RCCEx_PeriphCLKConfig>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bec:	f7ff fe9a 	bl	8000924 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000bf0:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <HAL_UART_MspInit+0x108>)
 8000bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf4:	4a2d      	ldr	r2, [pc, #180]	; (8000cac <HAL_UART_MspInit+0x108>)
 8000bf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000bfa:	6593      	str	r3, [r2, #88]	; 0x58
 8000bfc:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <HAL_UART_MspInit+0x108>)
 8000bfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c08:	4b28      	ldr	r3, [pc, #160]	; (8000cac <HAL_UART_MspInit+0x108>)
 8000c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0c:	4a27      	ldr	r2, [pc, #156]	; (8000cac <HAL_UART_MspInit+0x108>)
 8000c0e:	f043 0304 	orr.w	r3, r3, #4
 8000c12:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c14:	4b25      	ldr	r3, [pc, #148]	; (8000cac <HAL_UART_MspInit+0x108>)
 8000c16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c18:	f003 0304 	and.w	r3, r3, #4
 8000c1c:	60fb      	str	r3, [r7, #12]
 8000c1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c20:	4b22      	ldr	r3, [pc, #136]	; (8000cac <HAL_UART_MspInit+0x108>)
 8000c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c24:	4a21      	ldr	r2, [pc, #132]	; (8000cac <HAL_UART_MspInit+0x108>)
 8000c26:	f043 0308 	orr.w	r3, r3, #8
 8000c2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2c:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <HAL_UART_MspInit+0x108>)
 8000c2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c30:	f003 0308 	and.w	r3, r3, #8
 8000c34:	60bb      	str	r3, [r7, #8]
 8000c36:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c40:	2302      	movs	r3, #2
 8000c42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c52:	2308      	movs	r3, #8
 8000c54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c58:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4814      	ldr	r0, [pc, #80]	; (8000cb0 <HAL_UART_MspInit+0x10c>)
 8000c60:	f000 fa84 	bl	800116c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c64:	2304      	movs	r3, #4
 8000c66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	2303      	movs	r3, #3
 8000c78:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c82:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c86:	4619      	mov	r1, r3
 8000c88:	480a      	ldr	r0, [pc, #40]	; (8000cb4 <HAL_UART_MspInit+0x110>)
 8000c8a:	f000 fa6f 	bl	800116c <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2100      	movs	r1, #0
 8000c92:	2035      	movs	r0, #53	; 0x35
 8000c94:	f000 f9b5 	bl	8001002 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000c98:	2035      	movs	r0, #53	; 0x35
 8000c9a:	f000 f9ce 	bl	800103a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8000c9e:	bf00      	nop
 8000ca0:	37b0      	adds	r7, #176	; 0xb0
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40005000 	.word	0x40005000
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	48000800 	.word	0x48000800
 8000cb4:	48000c00 	.word	0x48000c00

08000cb8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cbc:	f7ff ff30 	bl	8000b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cc0:	480c      	ldr	r0, [pc, #48]	; (8000cf4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000cc2:	490d      	ldr	r1, [pc, #52]	; (8000cf8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cc4:	4a0d      	ldr	r2, [pc, #52]	; (8000cfc <LoopForever+0xe>)
  movs r3, #0
 8000cc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc8:	e002      	b.n	8000cd0 <LoopCopyDataInit>

08000cca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ccc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cce:	3304      	adds	r3, #4

08000cd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cd4:	d3f9      	bcc.n	8000cca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd8:	4c0a      	ldr	r4, [pc, #40]	; (8000d04 <LoopForever+0x16>)
  movs r3, #0
 8000cda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cdc:	e001      	b.n	8000ce2 <LoopFillZerobss>

08000cde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ce0:	3204      	adds	r2, #4

08000ce2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ce2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ce4:	d3fb      	bcc.n	8000cde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ce6:	f003 fe5d 	bl	80049a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cea:	f7ff fd6b 	bl	80007c4 <main>

08000cee <LoopForever>:

LoopForever:
    b LoopForever
 8000cee:	e7fe      	b.n	8000cee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cf0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000cf4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf8:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000cfc:	08004a8c 	.word	0x08004a8c
  ldr r2, =_sbss
 8000d00:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000d04:	20000130 	.word	0x20000130

08000d08 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d08:	e7fe      	b.n	8000d08 <ADC1_2_IRQHandler>
	...

08000d0c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d12:	2300      	movs	r3, #0
 8000d14:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d16:	4b0c      	ldr	r3, [pc, #48]	; (8000d48 <HAL_Init+0x3c>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a0b      	ldr	r2, [pc, #44]	; (8000d48 <HAL_Init+0x3c>)
 8000d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d20:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d22:	2003      	movs	r0, #3
 8000d24:	f000 f962 	bl	8000fec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f000 f80f 	bl	8000d4c <HAL_InitTick>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d002      	beq.n	8000d3a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d34:	2301      	movs	r3, #1
 8000d36:	71fb      	strb	r3, [r7, #7]
 8000d38:	e001      	b.n	8000d3e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d3a:	f7ff fe99 	bl	8000a70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3708      	adds	r7, #8
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40022000 	.word	0x40022000

08000d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b084      	sub	sp, #16
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d54:	2300      	movs	r3, #0
 8000d56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000d58:	4b17      	ldr	r3, [pc, #92]	; (8000db8 <HAL_InitTick+0x6c>)
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d023      	beq.n	8000da8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d60:	4b16      	ldr	r3, [pc, #88]	; (8000dbc <HAL_InitTick+0x70>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4b14      	ldr	r3, [pc, #80]	; (8000db8 <HAL_InitTick+0x6c>)
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d76:	4618      	mov	r0, r3
 8000d78:	f000 f96d 	bl	8001056 <HAL_SYSTICK_Config>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d10f      	bne.n	8000da2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	2b0f      	cmp	r3, #15
 8000d86:	d809      	bhi.n	8000d9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	6879      	ldr	r1, [r7, #4]
 8000d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d90:	f000 f937 	bl	8001002 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d94:	4a0a      	ldr	r2, [pc, #40]	; (8000dc0 <HAL_InitTick+0x74>)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6013      	str	r3, [r2, #0]
 8000d9a:	e007      	b.n	8000dac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	e004      	b.n	8000dac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
 8000da4:	73fb      	strb	r3, [r7, #15]
 8000da6:	e001      	b.n	8000dac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dae:	4618      	mov	r0, r3
 8000db0:	3710      	adds	r7, #16
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000020 	.word	0x20000020
 8000dbc:	20000018 	.word	0x20000018
 8000dc0:	2000001c 	.word	0x2000001c

08000dc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dc8:	4b06      	ldr	r3, [pc, #24]	; (8000de4 <HAL_IncTick+0x20>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	461a      	mov	r2, r3
 8000dce:	4b06      	ldr	r3, [pc, #24]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4413      	add	r3, r2
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <HAL_IncTick+0x24>)
 8000dd6:	6013      	str	r3, [r2, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop
 8000de4:	20000020 	.word	0x20000020
 8000de8:	2000012c 	.word	0x2000012c

08000dec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return uwTick;
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_GetTick+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
}
 8000df4:	4618      	mov	r0, r3
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	2000012c 	.word	0x2000012c

08000e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e0c:	f7ff ffee 	bl	8000dec <HAL_GetTick>
 8000e10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1c:	d005      	beq.n	8000e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_Delay+0x44>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	461a      	mov	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4413      	add	r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e2a:	bf00      	nop
 8000e2c:	f7ff ffde 	bl	8000dec <HAL_GetTick>
 8000e30:	4602      	mov	r2, r0
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d8f7      	bhi.n	8000e2c <HAL_Delay+0x28>
  {
  }
}
 8000e3c:	bf00      	nop
 8000e3e:	bf00      	nop
 8000e40:	3710      	adds	r7, #16
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000020 	.word	0x20000020

08000e4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f003 0307 	and.w	r3, r3, #7
 8000e5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e5c:	4b0c      	ldr	r3, [pc, #48]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e62:	68ba      	ldr	r2, [r7, #8]
 8000e64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e70:	68bb      	ldr	r3, [r7, #8]
 8000e72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e7e:	4a04      	ldr	r2, [pc, #16]	; (8000e90 <__NVIC_SetPriorityGrouping+0x44>)
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	60d3      	str	r3, [r2, #12]
}
 8000e84:	bf00      	nop
 8000e86:	3714      	adds	r7, #20
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e98:	4b04      	ldr	r3, [pc, #16]	; (8000eac <__NVIC_GetPriorityGrouping+0x18>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	0a1b      	lsrs	r3, r3, #8
 8000e9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db0b      	blt.n	8000eda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ec2:	79fb      	ldrb	r3, [r7, #7]
 8000ec4:	f003 021f 	and.w	r2, r3, #31
 8000ec8:	4907      	ldr	r1, [pc, #28]	; (8000ee8 <__NVIC_EnableIRQ+0x38>)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	095b      	lsrs	r3, r3, #5
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	e000e100 	.word	0xe000e100

08000eec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	6039      	str	r1, [r7, #0]
 8000ef6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ef8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	db0a      	blt.n	8000f16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	b2da      	uxtb	r2, r3
 8000f04:	490c      	ldr	r1, [pc, #48]	; (8000f38 <__NVIC_SetPriority+0x4c>)
 8000f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0a:	0112      	lsls	r2, r2, #4
 8000f0c:	b2d2      	uxtb	r2, r2
 8000f0e:	440b      	add	r3, r1
 8000f10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f14:	e00a      	b.n	8000f2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	b2da      	uxtb	r2, r3
 8000f1a:	4908      	ldr	r1, [pc, #32]	; (8000f3c <__NVIC_SetPriority+0x50>)
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	f003 030f 	and.w	r3, r3, #15
 8000f22:	3b04      	subs	r3, #4
 8000f24:	0112      	lsls	r2, r2, #4
 8000f26:	b2d2      	uxtb	r2, r2
 8000f28:	440b      	add	r3, r1
 8000f2a:	761a      	strb	r2, [r3, #24]
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	e000e100 	.word	0xe000e100
 8000f3c:	e000ed00 	.word	0xe000ed00

08000f40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b089      	sub	sp, #36	; 0x24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	f1c3 0307 	rsb	r3, r3, #7
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	bf28      	it	cs
 8000f5e:	2304      	movcs	r3, #4
 8000f60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	3304      	adds	r3, #4
 8000f66:	2b06      	cmp	r3, #6
 8000f68:	d902      	bls.n	8000f70 <NVIC_EncodePriority+0x30>
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3b03      	subs	r3, #3
 8000f6e:	e000      	b.n	8000f72 <NVIC_EncodePriority+0x32>
 8000f70:	2300      	movs	r3, #0
 8000f72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f74:	f04f 32ff 	mov.w	r2, #4294967295
 8000f78:	69bb      	ldr	r3, [r7, #24]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f88:	f04f 31ff 	mov.w	r1, #4294967295
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f92:	43d9      	mvns	r1, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	4313      	orrs	r3, r2
         );
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3724      	adds	r7, #36	; 0x24
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr
	...

08000fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fb8:	d301      	bcc.n	8000fbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00f      	b.n	8000fde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fbe:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <SysTick_Config+0x40>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc6:	210f      	movs	r1, #15
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f7ff ff8e 	bl	8000eec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd0:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fd6:	4b04      	ldr	r3, [pc, #16]	; (8000fe8 <SysTick_Config+0x40>)
 8000fd8:	2207      	movs	r2, #7
 8000fda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	e000e010 	.word	0xe000e010

08000fec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff4:	6878      	ldr	r0, [r7, #4]
 8000ff6:	f7ff ff29 	bl	8000e4c <__NVIC_SetPriorityGrouping>
}
 8000ffa:	bf00      	nop
 8000ffc:	3708      	adds	r7, #8
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}

08001002 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001002:	b580      	push	{r7, lr}
 8001004:	b086      	sub	sp, #24
 8001006:	af00      	add	r7, sp, #0
 8001008:	4603      	mov	r3, r0
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001014:	f7ff ff3e 	bl	8000e94 <__NVIC_GetPriorityGrouping>
 8001018:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	6978      	ldr	r0, [r7, #20]
 8001020:	f7ff ff8e 	bl	8000f40 <NVIC_EncodePriority>
 8001024:	4602      	mov	r2, r0
 8001026:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102a:	4611      	mov	r1, r2
 800102c:	4618      	mov	r0, r3
 800102e:	f7ff ff5d 	bl	8000eec <__NVIC_SetPriority>
}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001044:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff ff31 	bl	8000eb0 <__NVIC_EnableIRQ>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001056:	b580      	push	{r7, lr}
 8001058:	b082      	sub	sp, #8
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff ffa2 	bl	8000fa8 <SysTick_Config>
 8001064:	4603      	mov	r3, r0
}
 8001066:	4618      	mov	r0, r3
 8001068:	3708      	adds	r7, #8
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800106e:	b480      	push	{r7}
 8001070:	b085      	sub	sp, #20
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001076:	2300      	movs	r3, #0
 8001078:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001080:	b2db      	uxtb	r3, r3
 8001082:	2b02      	cmp	r3, #2
 8001084:	d008      	beq.n	8001098 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2204      	movs	r2, #4
 800108a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2200      	movs	r2, #0
 8001090:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e022      	b.n	80010de <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f022 020e 	bic.w	r2, r2, #14
 80010a6:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0201 	bic.w	r2, r2, #1
 80010b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	f003 021c 	and.w	r2, r3, #28
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	2101      	movs	r1, #1
 80010c6:	fa01 f202 	lsl.w	r2, r1, r2
 80010ca:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2201      	movs	r2, #1
 80010d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80010dc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b084      	sub	sp, #16
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010f2:	2300      	movs	r3, #0
 80010f4:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2b02      	cmp	r3, #2
 8001100:	d005      	beq.n	800110e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2204      	movs	r2, #4
 8001106:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	73fb      	strb	r3, [r7, #15]
 800110c:	e029      	b.n	8001162 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f022 020e 	bic.w	r2, r2, #14
 800111c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f022 0201 	bic.w	r2, r2, #1
 800112c:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001132:	f003 021c 	and.w	r2, r3, #28
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	2101      	movs	r1, #1
 800113c:	fa01 f202 	lsl.w	r2, r1, r2
 8001140:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2201      	movs	r2, #1
 8001146:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2200      	movs	r2, #0
 800114e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	4798      	blx	r3
    }
  }
  return status;
 8001162:	7bfb      	ldrb	r3, [r7, #15]
}
 8001164:	4618      	mov	r0, r3
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117a:	e17f      	b.n	800147c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	2101      	movs	r1, #1
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	fa01 f303 	lsl.w	r3, r1, r3
 8001188:	4013      	ands	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 8171 	beq.w	8001476 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b01      	cmp	r3, #1
 800119e:	d005      	beq.n	80011ac <HAL_GPIO_Init+0x40>
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d130      	bne.n	800120e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011e2:	2201      	movs	r2, #1
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	f003 0201 	and.w	r2, r3, #1
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b03      	cmp	r3, #3
 8001218:	d118      	bne.n	800124c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001220:	2201      	movs	r2, #1
 8001222:	697b      	ldr	r3, [r7, #20]
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4013      	ands	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	08db      	lsrs	r3, r3, #3
 8001236:	f003 0201 	and.w	r2, r3, #1
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	693a      	ldr	r2, [r7, #16]
 8001242:	4313      	orrs	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	693a      	ldr	r2, [r7, #16]
 800124a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	2b03      	cmp	r3, #3
 8001256:	d017      	beq.n	8001288 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	2203      	movs	r2, #3
 8001264:	fa02 f303 	lsl.w	r3, r2, r3
 8001268:	43db      	mvns	r3, r3
 800126a:	693a      	ldr	r2, [r7, #16]
 800126c:	4013      	ands	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	005b      	lsls	r3, r3, #1
 8001278:	fa02 f303 	lsl.w	r3, r2, r3
 800127c:	693a      	ldr	r2, [r7, #16]
 800127e:	4313      	orrs	r3, r2
 8001280:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d123      	bne.n	80012dc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	08da      	lsrs	r2, r3, #3
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3208      	adds	r2, #8
 800129c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f003 0307 	and.w	r3, r3, #7
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	220f      	movs	r2, #15
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	693a      	ldr	r2, [r7, #16]
 80012b4:	4013      	ands	r3, r2
 80012b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	691a      	ldr	r2, [r3, #16]
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	08da      	lsrs	r2, r3, #3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	3208      	adds	r2, #8
 80012d6:	6939      	ldr	r1, [r7, #16]
 80012d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	2203      	movs	r2, #3
 80012e8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ec:	43db      	mvns	r3, r3
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	4013      	ands	r3, r2
 80012f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 0203 	and.w	r2, r3, #3
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	005b      	lsls	r3, r3, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	685b      	ldr	r3, [r3, #4]
 8001314:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 80ac 	beq.w	8001476 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	4b5f      	ldr	r3, [pc, #380]	; (800149c <HAL_GPIO_Init+0x330>)
 8001320:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001322:	4a5e      	ldr	r2, [pc, #376]	; (800149c <HAL_GPIO_Init+0x330>)
 8001324:	f043 0301 	orr.w	r3, r3, #1
 8001328:	6613      	str	r3, [r2, #96]	; 0x60
 800132a:	4b5c      	ldr	r3, [pc, #368]	; (800149c <HAL_GPIO_Init+0x330>)
 800132c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001336:	4a5a      	ldr	r2, [pc, #360]	; (80014a0 <HAL_GPIO_Init+0x334>)
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	089b      	lsrs	r3, r3, #2
 800133c:	3302      	adds	r3, #2
 800133e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001344:	697b      	ldr	r3, [r7, #20]
 8001346:	f003 0303 	and.w	r3, r3, #3
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	220f      	movs	r2, #15
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	43db      	mvns	r3, r3
 8001354:	693a      	ldr	r2, [r7, #16]
 8001356:	4013      	ands	r3, r2
 8001358:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001360:	d025      	beq.n	80013ae <HAL_GPIO_Init+0x242>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a4f      	ldr	r2, [pc, #316]	; (80014a4 <HAL_GPIO_Init+0x338>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d01f      	beq.n	80013aa <HAL_GPIO_Init+0x23e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4e      	ldr	r2, [pc, #312]	; (80014a8 <HAL_GPIO_Init+0x33c>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d019      	beq.n	80013a6 <HAL_GPIO_Init+0x23a>
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4a4d      	ldr	r2, [pc, #308]	; (80014ac <HAL_GPIO_Init+0x340>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d013      	beq.n	80013a2 <HAL_GPIO_Init+0x236>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4a4c      	ldr	r2, [pc, #304]	; (80014b0 <HAL_GPIO_Init+0x344>)
 800137e:	4293      	cmp	r3, r2
 8001380:	d00d      	beq.n	800139e <HAL_GPIO_Init+0x232>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	4a4b      	ldr	r2, [pc, #300]	; (80014b4 <HAL_GPIO_Init+0x348>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d007      	beq.n	800139a <HAL_GPIO_Init+0x22e>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a4a      	ldr	r2, [pc, #296]	; (80014b8 <HAL_GPIO_Init+0x34c>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d101      	bne.n	8001396 <HAL_GPIO_Init+0x22a>
 8001392:	2306      	movs	r3, #6
 8001394:	e00c      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 8001396:	2307      	movs	r3, #7
 8001398:	e00a      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 800139a:	2305      	movs	r3, #5
 800139c:	e008      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 800139e:	2304      	movs	r3, #4
 80013a0:	e006      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 80013a2:	2303      	movs	r3, #3
 80013a4:	e004      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 80013a6:	2302      	movs	r3, #2
 80013a8:	e002      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 80013aa:	2301      	movs	r3, #1
 80013ac:	e000      	b.n	80013b0 <HAL_GPIO_Init+0x244>
 80013ae:	2300      	movs	r3, #0
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	f002 0203 	and.w	r2, r2, #3
 80013b6:	0092      	lsls	r2, r2, #2
 80013b8:	4093      	lsls	r3, r2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	4313      	orrs	r3, r2
 80013be:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013c0:	4937      	ldr	r1, [pc, #220]	; (80014a0 <HAL_GPIO_Init+0x334>)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3302      	adds	r3, #2
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013ce:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <HAL_GPIO_Init+0x350>)
 80013d0:	689b      	ldr	r3, [r3, #8]
 80013d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	43db      	mvns	r3, r3
 80013d8:	693a      	ldr	r2, [r7, #16]
 80013da:	4013      	ands	r3, r2
 80013dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d003      	beq.n	80013f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013ea:	693a      	ldr	r2, [r7, #16]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013f2:	4a32      	ldr	r2, [pc, #200]	; (80014bc <HAL_GPIO_Init+0x350>)
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013f8:	4b30      	ldr	r3, [pc, #192]	; (80014bc <HAL_GPIO_Init+0x350>)
 80013fa:	68db      	ldr	r3, [r3, #12]
 80013fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	43db      	mvns	r3, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001410:	2b00      	cmp	r3, #0
 8001412:	d003      	beq.n	800141c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	4313      	orrs	r3, r2
 800141a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800141c:	4a27      	ldr	r2, [pc, #156]	; (80014bc <HAL_GPIO_Init+0x350>)
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001422:	4b26      	ldr	r3, [pc, #152]	; (80014bc <HAL_GPIO_Init+0x350>)
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	43db      	mvns	r3, r3
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	4013      	ands	r3, r2
 8001430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d003      	beq.n	8001446 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4313      	orrs	r3, r2
 8001444:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001446:	4a1d      	ldr	r2, [pc, #116]	; (80014bc <HAL_GPIO_Init+0x350>)
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800144c:	4b1b      	ldr	r3, [pc, #108]	; (80014bc <HAL_GPIO_Init+0x350>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	43db      	mvns	r3, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4013      	ands	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001468:	693a      	ldr	r2, [r7, #16]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001470:	4a12      	ldr	r2, [pc, #72]	; (80014bc <HAL_GPIO_Init+0x350>)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	3301      	adds	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa22 f303 	lsr.w	r3, r2, r3
 8001486:	2b00      	cmp	r3, #0
 8001488:	f47f ae78 	bne.w	800117c <HAL_GPIO_Init+0x10>
  }
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	371c      	adds	r7, #28
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40021000 	.word	0x40021000
 80014a0:	40010000 	.word	0x40010000
 80014a4:	48000400 	.word	0x48000400
 80014a8:	48000800 	.word	0x48000800
 80014ac:	48000c00 	.word	0x48000c00
 80014b0:	48001000 	.word	0x48001000
 80014b4:	48001400 	.word	0x48001400
 80014b8:	48001800 	.word	0x48001800
 80014bc:	40010400 	.word	0x40010400

080014c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
 80014cc:	4613      	mov	r3, r2
 80014ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014d0:	787b      	ldrb	r3, [r7, #1]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d003      	beq.n	80014de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014d6:	887a      	ldrh	r2, [r7, #2]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014dc:	e002      	b.n	80014e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014f4:	4b04      	ldr	r3, [pc, #16]	; (8001508 <HAL_PWREx_GetVoltageRange+0x18>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	40007000 	.word	0x40007000

0800150c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800151a:	d130      	bne.n	800157e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800151c:	4b23      	ldr	r3, [pc, #140]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001524:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001528:	d038      	beq.n	800159c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001532:	4a1e      	ldr	r2, [pc, #120]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001534:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001538:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800153a:	4b1d      	ldr	r3, [pc, #116]	; (80015b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	2232      	movs	r2, #50	; 0x32
 8001540:	fb02 f303 	mul.w	r3, r2, r3
 8001544:	4a1b      	ldr	r2, [pc, #108]	; (80015b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001546:	fba2 2303 	umull	r2, r3, r2, r3
 800154a:	0c9b      	lsrs	r3, r3, #18
 800154c:	3301      	adds	r3, #1
 800154e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001550:	e002      	b.n	8001558 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	3b01      	subs	r3, #1
 8001556:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001560:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001564:	d102      	bne.n	800156c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d1f2      	bne.n	8001552 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800156e:	695b      	ldr	r3, [r3, #20]
 8001570:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001578:	d110      	bne.n	800159c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e00f      	b.n	800159e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800157e:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800158a:	d007      	beq.n	800159c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800158c:	4b07      	ldr	r3, [pc, #28]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001594:	4a05      	ldr	r2, [pc, #20]	; (80015ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001596:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800159a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800159c:	2300      	movs	r3, #0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3714      	adds	r7, #20
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40007000 	.word	0x40007000
 80015b0:	20000018 	.word	0x20000018
 80015b4:	431bde83 	.word	0x431bde83

080015b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	e3d4      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ca:	4ba1      	ldr	r3, [pc, #644]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 80015cc:	689b      	ldr	r3, [r3, #8]
 80015ce:	f003 030c 	and.w	r3, r3, #12
 80015d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015d4:	4b9e      	ldr	r3, [pc, #632]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	f003 0303 	and.w	r3, r3, #3
 80015dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0310 	and.w	r3, r3, #16
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	f000 80e4 	beq.w	80017b4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015ec:	69bb      	ldr	r3, [r7, #24]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d007      	beq.n	8001602 <HAL_RCC_OscConfig+0x4a>
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	2b0c      	cmp	r3, #12
 80015f6:	f040 808b 	bne.w	8001710 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	f040 8087 	bne.w	8001710 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001602:	4b93      	ldr	r3, [pc, #588]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0302 	and.w	r3, r3, #2
 800160a:	2b00      	cmp	r3, #0
 800160c:	d005      	beq.n	800161a <HAL_RCC_OscConfig+0x62>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e3ac      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1a      	ldr	r2, [r3, #32]
 800161e:	4b8c      	ldr	r3, [pc, #560]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 0308 	and.w	r3, r3, #8
 8001626:	2b00      	cmp	r3, #0
 8001628:	d004      	beq.n	8001634 <HAL_RCC_OscConfig+0x7c>
 800162a:	4b89      	ldr	r3, [pc, #548]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001632:	e005      	b.n	8001640 <HAL_RCC_OscConfig+0x88>
 8001634:	4b86      	ldr	r3, [pc, #536]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 8001636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800163a:	091b      	lsrs	r3, r3, #4
 800163c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001640:	4293      	cmp	r3, r2
 8001642:	d223      	bcs.n	800168c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	4618      	mov	r0, r3
 800164a:	f000 fd41 	bl	80020d0 <RCC_SetFlashLatencyFromMSIRange>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d001      	beq.n	8001658 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e38d      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001658:	4b7d      	ldr	r3, [pc, #500]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a7c      	ldr	r2, [pc, #496]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 800165e:	f043 0308 	orr.w	r3, r3, #8
 8001662:	6013      	str	r3, [r2, #0]
 8001664:	4b7a      	ldr	r3, [pc, #488]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4977      	ldr	r1, [pc, #476]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 8001672:	4313      	orrs	r3, r2
 8001674:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001676:	4b76      	ldr	r3, [pc, #472]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	4972      	ldr	r1, [pc, #456]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 8001686:	4313      	orrs	r3, r2
 8001688:	604b      	str	r3, [r1, #4]
 800168a:	e025      	b.n	80016d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800168c:	4b70      	ldr	r3, [pc, #448]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a6f      	ldr	r2, [pc, #444]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 8001692:	f043 0308 	orr.w	r3, r3, #8
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b6d      	ldr	r3, [pc, #436]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6a1b      	ldr	r3, [r3, #32]
 80016a4:	496a      	ldr	r1, [pc, #424]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 80016a6:	4313      	orrs	r3, r2
 80016a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016aa:	4b69      	ldr	r3, [pc, #420]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	4965      	ldr	r1, [pc, #404]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d109      	bne.n	80016d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1b      	ldr	r3, [r3, #32]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f000 fd01 	bl	80020d0 <RCC_SetFlashLatencyFromMSIRange>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e34d      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016d8:	f000 fc36 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 80016dc:	4602      	mov	r2, r0
 80016de:	4b5c      	ldr	r3, [pc, #368]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	f003 030f 	and.w	r3, r3, #15
 80016e8:	495a      	ldr	r1, [pc, #360]	; (8001854 <HAL_RCC_OscConfig+0x29c>)
 80016ea:	5ccb      	ldrb	r3, [r1, r3]
 80016ec:	f003 031f 	and.w	r3, r3, #31
 80016f0:	fa22 f303 	lsr.w	r3, r2, r3
 80016f4:	4a58      	ldr	r2, [pc, #352]	; (8001858 <HAL_RCC_OscConfig+0x2a0>)
 80016f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016f8:	4b58      	ldr	r3, [pc, #352]	; (800185c <HAL_RCC_OscConfig+0x2a4>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff fb25 	bl	8000d4c <HAL_InitTick>
 8001702:	4603      	mov	r3, r0
 8001704:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d052      	beq.n	80017b2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800170c:	7bfb      	ldrb	r3, [r7, #15]
 800170e:	e331      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	699b      	ldr	r3, [r3, #24]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d032      	beq.n	800177e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001718:	4b4d      	ldr	r3, [pc, #308]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a4c      	ldr	r2, [pc, #304]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001724:	f7ff fb62 	bl	8000dec <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800172c:	f7ff fb5e 	bl	8000dec <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e31a      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800173e:	4b44      	ldr	r3, [pc, #272]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f0      	beq.n	800172c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800174a:	4b41      	ldr	r3, [pc, #260]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a40      	ldr	r2, [pc, #256]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 8001750:	f043 0308 	orr.w	r3, r3, #8
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b3e      	ldr	r3, [pc, #248]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a1b      	ldr	r3, [r3, #32]
 8001762:	493b      	ldr	r1, [pc, #236]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 8001764:	4313      	orrs	r3, r2
 8001766:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001768:	4b39      	ldr	r3, [pc, #228]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	69db      	ldr	r3, [r3, #28]
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	4936      	ldr	r1, [pc, #216]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 8001778:	4313      	orrs	r3, r2
 800177a:	604b      	str	r3, [r1, #4]
 800177c:	e01a      	b.n	80017b4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800177e:	4b34      	ldr	r3, [pc, #208]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a33      	ldr	r2, [pc, #204]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 8001784:	f023 0301 	bic.w	r3, r3, #1
 8001788:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800178a:	f7ff fb2f 	bl	8000dec <HAL_GetTick>
 800178e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001790:	e008      	b.n	80017a4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001792:	f7ff fb2b 	bl	8000dec <HAL_GetTick>
 8001796:	4602      	mov	r2, r0
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e2e7      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017a4:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1f0      	bne.n	8001792 <HAL_RCC_OscConfig+0x1da>
 80017b0:	e000      	b.n	80017b4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017b2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f003 0301 	and.w	r3, r3, #1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d074      	beq.n	80018aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2b08      	cmp	r3, #8
 80017c4:	d005      	beq.n	80017d2 <HAL_RCC_OscConfig+0x21a>
 80017c6:	69bb      	ldr	r3, [r7, #24]
 80017c8:	2b0c      	cmp	r3, #12
 80017ca:	d10e      	bne.n	80017ea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d10b      	bne.n	80017ea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017d2:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d064      	beq.n	80018a8 <HAL_RCC_OscConfig+0x2f0>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d160      	bne.n	80018a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e2c4      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f2:	d106      	bne.n	8001802 <HAL_RCC_OscConfig+0x24a>
 80017f4:	4b16      	ldr	r3, [pc, #88]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a15      	ldr	r2, [pc, #84]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 80017fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017fe:	6013      	str	r3, [r2, #0]
 8001800:	e01d      	b.n	800183e <HAL_RCC_OscConfig+0x286>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800180a:	d10c      	bne.n	8001826 <HAL_RCC_OscConfig+0x26e>
 800180c:	4b10      	ldr	r3, [pc, #64]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a0f      	ldr	r2, [pc, #60]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 8001812:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0c      	ldr	r2, [pc, #48]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 800181e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	e00b      	b.n	800183e <HAL_RCC_OscConfig+0x286>
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a09      	ldr	r2, [pc, #36]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 800182c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b07      	ldr	r3, [pc, #28]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a06      	ldr	r2, [pc, #24]	; (8001850 <HAL_RCC_OscConfig+0x298>)
 8001838:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d01c      	beq.n	8001880 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001846:	f7ff fad1 	bl	8000dec <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800184c:	e011      	b.n	8001872 <HAL_RCC_OscConfig+0x2ba>
 800184e:	bf00      	nop
 8001850:	40021000 	.word	0x40021000
 8001854:	08004a34 	.word	0x08004a34
 8001858:	20000018 	.word	0x20000018
 800185c:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001860:	f7ff fac4 	bl	8000dec <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b64      	cmp	r3, #100	; 0x64
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e280      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001872:	4baf      	ldr	r3, [pc, #700]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d0f0      	beq.n	8001860 <HAL_RCC_OscConfig+0x2a8>
 800187e:	e014      	b.n	80018aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001880:	f7ff fab4 	bl	8000dec <HAL_GetTick>
 8001884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001886:	e008      	b.n	800189a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001888:	f7ff fab0 	bl	8000dec <HAL_GetTick>
 800188c:	4602      	mov	r2, r0
 800188e:	693b      	ldr	r3, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	2b64      	cmp	r3, #100	; 0x64
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e26c      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800189a:	4ba5      	ldr	r3, [pc, #660]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f0      	bne.n	8001888 <HAL_RCC_OscConfig+0x2d0>
 80018a6:	e000      	b.n	80018aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0302 	and.w	r3, r3, #2
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d060      	beq.n	8001978 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	2b04      	cmp	r3, #4
 80018ba:	d005      	beq.n	80018c8 <HAL_RCC_OscConfig+0x310>
 80018bc:	69bb      	ldr	r3, [r7, #24]
 80018be:	2b0c      	cmp	r3, #12
 80018c0:	d119      	bne.n	80018f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	2b02      	cmp	r3, #2
 80018c6:	d116      	bne.n	80018f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c8:	4b99      	ldr	r3, [pc, #612]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d005      	beq.n	80018e0 <HAL_RCC_OscConfig+0x328>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e249      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e0:	4b93      	ldr	r3, [pc, #588]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	691b      	ldr	r3, [r3, #16]
 80018ec:	061b      	lsls	r3, r3, #24
 80018ee:	4990      	ldr	r1, [pc, #576]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 80018f0:	4313      	orrs	r3, r2
 80018f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018f4:	e040      	b.n	8001978 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d023      	beq.n	8001946 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018fe:	4b8c      	ldr	r3, [pc, #560]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a8b      	ldr	r2, [pc, #556]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001904:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190a:	f7ff fa6f 	bl	8000dec <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001912:	f7ff fa6b 	bl	8000dec <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e227      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001924:	4b82      	ldr	r3, [pc, #520]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192c:	2b00      	cmp	r3, #0
 800192e:	d0f0      	beq.n	8001912 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001930:	4b7f      	ldr	r3, [pc, #508]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	691b      	ldr	r3, [r3, #16]
 800193c:	061b      	lsls	r3, r3, #24
 800193e:	497c      	ldr	r1, [pc, #496]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001940:	4313      	orrs	r3, r2
 8001942:	604b      	str	r3, [r1, #4]
 8001944:	e018      	b.n	8001978 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001946:	4b7a      	ldr	r3, [pc, #488]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a79      	ldr	r2, [pc, #484]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 800194c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001952:	f7ff fa4b 	bl	8000dec <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195a:	f7ff fa47 	bl	8000dec <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e203      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800196c:	4b70      	ldr	r3, [pc, #448]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1f0      	bne.n	800195a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0308 	and.w	r3, r3, #8
 8001980:	2b00      	cmp	r3, #0
 8001982:	d03c      	beq.n	80019fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	695b      	ldr	r3, [r3, #20]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d01c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800198c:	4b68      	ldr	r3, [pc, #416]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 800198e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001992:	4a67      	ldr	r2, [pc, #412]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800199c:	f7ff fa26 	bl	8000dec <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a4:	f7ff fa22 	bl	8000dec <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e1de      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019b6:	4b5e      	ldr	r3, [pc, #376]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 80019b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019bc:	f003 0302 	and.w	r3, r3, #2
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d0ef      	beq.n	80019a4 <HAL_RCC_OscConfig+0x3ec>
 80019c4:	e01b      	b.n	80019fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019c6:	4b5a      	ldr	r3, [pc, #360]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 80019c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019cc:	4a58      	ldr	r2, [pc, #352]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d6:	f7ff fa09 	bl	8000dec <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019de:	f7ff fa05 	bl	8000dec <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e1c1      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019f0:	4b4f      	ldr	r3, [pc, #316]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 80019f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1ef      	bne.n	80019de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0304 	and.w	r3, r3, #4
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	f000 80a6 	beq.w	8001b58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a10:	4b47      	ldr	r3, [pc, #284]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d10d      	bne.n	8001a38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a1c:	4b44      	ldr	r3, [pc, #272]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	4a43      	ldr	r2, [pc, #268]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001a22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a26:	6593      	str	r3, [r2, #88]	; 0x58
 8001a28:	4b41      	ldr	r3, [pc, #260]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a34:	2301      	movs	r3, #1
 8001a36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a38:	4b3e      	ldr	r3, [pc, #248]	; (8001b34 <HAL_RCC_OscConfig+0x57c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d118      	bne.n	8001a76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a44:	4b3b      	ldr	r3, [pc, #236]	; (8001b34 <HAL_RCC_OscConfig+0x57c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a3a      	ldr	r2, [pc, #232]	; (8001b34 <HAL_RCC_OscConfig+0x57c>)
 8001a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a50:	f7ff f9cc 	bl	8000dec <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a58:	f7ff f9c8 	bl	8000dec <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e184      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a6a:	4b32      	ldr	r3, [pc, #200]	; (8001b34 <HAL_RCC_OscConfig+0x57c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d108      	bne.n	8001a90 <HAL_RCC_OscConfig+0x4d8>
 8001a7e:	4b2c      	ldr	r3, [pc, #176]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a84:	4a2a      	ldr	r2, [pc, #168]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a8e:	e024      	b.n	8001ada <HAL_RCC_OscConfig+0x522>
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	689b      	ldr	r3, [r3, #8]
 8001a94:	2b05      	cmp	r3, #5
 8001a96:	d110      	bne.n	8001aba <HAL_RCC_OscConfig+0x502>
 8001a98:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9e:	4a24      	ldr	r2, [pc, #144]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001aa0:	f043 0304 	orr.w	r3, r3, #4
 8001aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aae:	4a20      	ldr	r2, [pc, #128]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab8:	e00f      	b.n	8001ada <HAL_RCC_OscConfig+0x522>
 8001aba:	4b1d      	ldr	r3, [pc, #116]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac0:	4a1b      	ldr	r2, [pc, #108]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aca:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ad0:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001ad2:	f023 0304 	bic.w	r3, r3, #4
 8001ad6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d016      	beq.n	8001b10 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ae2:	f7ff f983 	bl	8000dec <HAL_GetTick>
 8001ae6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ae8:	e00a      	b.n	8001b00 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aea:	f7ff f97f 	bl	8000dec <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d901      	bls.n	8001b00 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001afc:	2303      	movs	r3, #3
 8001afe:	e139      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b00:	4b0b      	ldr	r3, [pc, #44]	; (8001b30 <HAL_RCC_OscConfig+0x578>)
 8001b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0ed      	beq.n	8001aea <HAL_RCC_OscConfig+0x532>
 8001b0e:	e01a      	b.n	8001b46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b10:	f7ff f96c 	bl	8000dec <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b16:	e00f      	b.n	8001b38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b18:	f7ff f968 	bl	8000dec <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d906      	bls.n	8001b38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e122      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
 8001b2e:	bf00      	nop
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b38:	4b90      	ldr	r3, [pc, #576]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1e8      	bne.n	8001b18 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b46:	7ffb      	ldrb	r3, [r7, #31]
 8001b48:	2b01      	cmp	r3, #1
 8001b4a:	d105      	bne.n	8001b58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b4c:	4b8b      	ldr	r3, [pc, #556]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b50:	4a8a      	ldr	r2, [pc, #552]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b56:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f000 8108 	beq.w	8001d72 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	f040 80d0 	bne.w	8001d0c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b6c:	4b83      	ldr	r3, [pc, #524]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f003 0203 	and.w	r2, r3, #3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d130      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	3b01      	subs	r3, #1
 8001b8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d127      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b92:	697b      	ldr	r3, [r7, #20]
 8001b94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d11f      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bac:	2a07      	cmp	r2, #7
 8001bae:	bf14      	ite	ne
 8001bb0:	2201      	movne	r2, #1
 8001bb2:	2200      	moveq	r2, #0
 8001bb4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d113      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc4:	085b      	lsrs	r3, r3, #1
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	d109      	bne.n	8001be2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd8:	085b      	lsrs	r3, r3, #1
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d06e      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	2b0c      	cmp	r3, #12
 8001be6:	d069      	beq.n	8001cbc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001be8:	4b64      	ldr	r3, [pc, #400]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d105      	bne.n	8001c00 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bf4:	4b61      	ldr	r3, [pc, #388]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c00:	2301      	movs	r3, #1
 8001c02:	e0b7      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c04:	4b5d      	ldr	r3, [pc, #372]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a5c      	ldr	r2, [pc, #368]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001c0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c10:	f7ff f8ec 	bl	8000dec <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c18:	f7ff f8e8 	bl	8000dec <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e0a4      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c2a:	4b54      	ldr	r3, [pc, #336]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c36:	4b51      	ldr	r3, [pc, #324]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001c38:	68da      	ldr	r2, [r3, #12]
 8001c3a:	4b51      	ldr	r3, [pc, #324]	; (8001d80 <HAL_RCC_OscConfig+0x7c8>)
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c46:	3a01      	subs	r2, #1
 8001c48:	0112      	lsls	r2, r2, #4
 8001c4a:	4311      	orrs	r1, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c50:	0212      	lsls	r2, r2, #8
 8001c52:	4311      	orrs	r1, r2
 8001c54:	687a      	ldr	r2, [r7, #4]
 8001c56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c58:	0852      	lsrs	r2, r2, #1
 8001c5a:	3a01      	subs	r2, #1
 8001c5c:	0552      	lsls	r2, r2, #21
 8001c5e:	4311      	orrs	r1, r2
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c64:	0852      	lsrs	r2, r2, #1
 8001c66:	3a01      	subs	r2, #1
 8001c68:	0652      	lsls	r2, r2, #25
 8001c6a:	4311      	orrs	r1, r2
 8001c6c:	687a      	ldr	r2, [r7, #4]
 8001c6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c70:	0912      	lsrs	r2, r2, #4
 8001c72:	0452      	lsls	r2, r2, #17
 8001c74:	430a      	orrs	r2, r1
 8001c76:	4941      	ldr	r1, [pc, #260]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c7c:	4b3f      	ldr	r3, [pc, #252]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a3e      	ldr	r2, [pc, #248]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c88:	4b3c      	ldr	r3, [pc, #240]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	4a3b      	ldr	r2, [pc, #236]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c94:	f7ff f8aa 	bl	8000dec <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c9c:	f7ff f8a6 	bl	8000dec <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e062      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cae:	4b33      	ldr	r3, [pc, #204]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d0f0      	beq.n	8001c9c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cba:	e05a      	b.n	8001d72 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e059      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d152      	bne.n	8001d72 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ccc:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a2a      	ldr	r2, [pc, #168]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cd8:	4b28      	ldr	r3, [pc, #160]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4a27      	ldr	r2, [pc, #156]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ce4:	f7ff f882 	bl	8000dec <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cec:	f7ff f87e 	bl	8000dec <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e03a      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfe:	4b1f      	ldr	r3, [pc, #124]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x734>
 8001d0a:	e032      	b.n	8001d72 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	2b0c      	cmp	r3, #12
 8001d10:	d02d      	beq.n	8001d6e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d12:	4b1a      	ldr	r3, [pc, #104]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a19      	ldr	r2, [pc, #100]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001d18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d1c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001d1e:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d105      	bne.n	8001d36 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d2a:	4b14      	ldr	r3, [pc, #80]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	4a13      	ldr	r2, [pc, #76]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001d30:	f023 0303 	bic.w	r3, r3, #3
 8001d34:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	4a10      	ldr	r2, [pc, #64]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001d3c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d44:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d46:	f7ff f851 	bl	8000dec <HAL_GetTick>
 8001d4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d4c:	e008      	b.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d4e:	f7ff f84d 	bl	8000dec <HAL_GetTick>
 8001d52:	4602      	mov	r2, r0
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d901      	bls.n	8001d60 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001d5c:	2303      	movs	r3, #3
 8001d5e:	e009      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <HAL_RCC_OscConfig+0x7c4>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d1f0      	bne.n	8001d4e <HAL_RCC_OscConfig+0x796>
 8001d6c:	e001      	b.n	8001d72 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e000      	b.n	8001d74 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3720      	adds	r7, #32
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	f99d808c 	.word	0xf99d808c

08001d84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d101      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e0c8      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d98:	4b66      	ldr	r3, [pc, #408]	; (8001f34 <HAL_RCC_ClockConfig+0x1b0>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0307 	and.w	r3, r3, #7
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d910      	bls.n	8001dc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da6:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <HAL_RCC_ClockConfig+0x1b0>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f023 0207 	bic.w	r2, r3, #7
 8001dae:	4961      	ldr	r1, [pc, #388]	; (8001f34 <HAL_RCC_ClockConfig+0x1b0>)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db6:	4b5f      	ldr	r3, [pc, #380]	; (8001f34 <HAL_RCC_ClockConfig+0x1b0>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0307 	and.w	r3, r3, #7
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d001      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0b0      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d04c      	beq.n	8001e6e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d107      	bne.n	8001dec <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ddc:	4b56      	ldr	r3, [pc, #344]	; (8001f38 <HAL_RCC_ClockConfig+0x1b4>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d121      	bne.n	8001e2c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e09e      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d107      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001df4:	4b50      	ldr	r3, [pc, #320]	; (8001f38 <HAL_RCC_ClockConfig+0x1b4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d115      	bne.n	8001e2c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e092      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d107      	bne.n	8001e1c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e0c:	4b4a      	ldr	r3, [pc, #296]	; (8001f38 <HAL_RCC_ClockConfig+0x1b4>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d109      	bne.n	8001e2c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e086      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e1c:	4b46      	ldr	r3, [pc, #280]	; (8001f38 <HAL_RCC_ClockConfig+0x1b4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e07e      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e2c:	4b42      	ldr	r3, [pc, #264]	; (8001f38 <HAL_RCC_ClockConfig+0x1b4>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f023 0203 	bic.w	r2, r3, #3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	493f      	ldr	r1, [pc, #252]	; (8001f38 <HAL_RCC_ClockConfig+0x1b4>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e3e:	f7fe ffd5 	bl	8000dec <HAL_GetTick>
 8001e42:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e44:	e00a      	b.n	8001e5c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e46:	f7fe ffd1 	bl	8000dec <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d901      	bls.n	8001e5c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e066      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5c:	4b36      	ldr	r3, [pc, #216]	; (8001f38 <HAL_RCC_ClockConfig+0x1b4>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 020c 	and.w	r2, r3, #12
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	009b      	lsls	r3, r3, #2
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d1eb      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d008      	beq.n	8001e8c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e7a:	4b2f      	ldr	r3, [pc, #188]	; (8001f38 <HAL_RCC_ClockConfig+0x1b4>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	492c      	ldr	r1, [pc, #176]	; (8001f38 <HAL_RCC_ClockConfig+0x1b4>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b29      	ldr	r3, [pc, #164]	; (8001f34 <HAL_RCC_ClockConfig+0x1b0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d210      	bcs.n	8001ebc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b26      	ldr	r3, [pc, #152]	; (8001f34 <HAL_RCC_ClockConfig+0x1b0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 0207 	bic.w	r2, r3, #7
 8001ea2:	4924      	ldr	r1, [pc, #144]	; (8001f34 <HAL_RCC_ClockConfig+0x1b0>)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b22      	ldr	r3, [pc, #136]	; (8001f34 <HAL_RCC_ClockConfig+0x1b0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e036      	b.n	8001f2a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0304 	and.w	r3, r3, #4
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d008      	beq.n	8001eda <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec8:	4b1b      	ldr	r3, [pc, #108]	; (8001f38 <HAL_RCC_ClockConfig+0x1b4>)
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	4918      	ldr	r1, [pc, #96]	; (8001f38 <HAL_RCC_ClockConfig+0x1b4>)
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0308 	and.w	r3, r3, #8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d009      	beq.n	8001efa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ee6:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <HAL_RCC_ClockConfig+0x1b4>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	00db      	lsls	r3, r3, #3
 8001ef4:	4910      	ldr	r1, [pc, #64]	; (8001f38 <HAL_RCC_ClockConfig+0x1b4>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001efa:	f000 f825 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8001efe:	4602      	mov	r2, r0
 8001f00:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <HAL_RCC_ClockConfig+0x1b4>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	091b      	lsrs	r3, r3, #4
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	490c      	ldr	r1, [pc, #48]	; (8001f3c <HAL_RCC_ClockConfig+0x1b8>)
 8001f0c:	5ccb      	ldrb	r3, [r1, r3]
 8001f0e:	f003 031f 	and.w	r3, r3, #31
 8001f12:	fa22 f303 	lsr.w	r3, r2, r3
 8001f16:	4a0a      	ldr	r2, [pc, #40]	; (8001f40 <HAL_RCC_ClockConfig+0x1bc>)
 8001f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe ff14 	bl	8000d4c <HAL_InitTick>
 8001f24:	4603      	mov	r3, r0
 8001f26:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f28:	7afb      	ldrb	r3, [r7, #11]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40022000 	.word	0x40022000
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	08004a34 	.word	0x08004a34
 8001f40:	20000018 	.word	0x20000018
 8001f44:	2000001c 	.word	0x2000001c

08001f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b089      	sub	sp, #36	; 0x24
 8001f4c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61fb      	str	r3, [r7, #28]
 8001f52:	2300      	movs	r3, #0
 8001f54:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f56:	4b3e      	ldr	r3, [pc, #248]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f60:	4b3b      	ldr	r3, [pc, #236]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d005      	beq.n	8001f7c <HAL_RCC_GetSysClockFreq+0x34>
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	2b0c      	cmp	r3, #12
 8001f74:	d121      	bne.n	8001fba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d11e      	bne.n	8001fba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f7c:	4b34      	ldr	r3, [pc, #208]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0308 	and.w	r3, r3, #8
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d107      	bne.n	8001f98 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f88:	4b31      	ldr	r3, [pc, #196]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	61fb      	str	r3, [r7, #28]
 8001f96:	e005      	b.n	8001fa4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f98:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	091b      	lsrs	r3, r3, #4
 8001f9e:	f003 030f 	and.w	r3, r3, #15
 8001fa2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fa4:	4a2b      	ldr	r2, [pc, #172]	; (8002054 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10d      	bne.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fb8:	e00a      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	2b04      	cmp	r3, #4
 8001fbe:	d102      	bne.n	8001fc6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fc0:	4b25      	ldr	r3, [pc, #148]	; (8002058 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fc2:	61bb      	str	r3, [r7, #24]
 8001fc4:	e004      	b.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fcc:	4b23      	ldr	r3, [pc, #140]	; (800205c <HAL_RCC_GetSysClockFreq+0x114>)
 8001fce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	2b0c      	cmp	r3, #12
 8001fd4:	d134      	bne.n	8002040 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fd6:	4b1e      	ldr	r3, [pc, #120]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d003      	beq.n	8001fee <HAL_RCC_GetSysClockFreq+0xa6>
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	2b03      	cmp	r3, #3
 8001fea:	d003      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0xac>
 8001fec:	e005      	b.n	8001ffa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fee:	4b1a      	ldr	r3, [pc, #104]	; (8002058 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ff0:	617b      	str	r3, [r7, #20]
      break;
 8001ff2:	e005      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ff4:	4b19      	ldr	r3, [pc, #100]	; (800205c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ff6:	617b      	str	r3, [r7, #20]
      break;
 8001ff8:	e002      	b.n	8002000 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	617b      	str	r3, [r7, #20]
      break;
 8001ffe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	3301      	adds	r3, #1
 800200c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800200e:	4b10      	ldr	r3, [pc, #64]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	0a1b      	lsrs	r3, r3, #8
 8002014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002018:	697a      	ldr	r2, [r7, #20]
 800201a:	fb02 f203 	mul.w	r2, r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	fbb2 f3f3 	udiv	r3, r2, r3
 8002024:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002026:	4b0a      	ldr	r3, [pc, #40]	; (8002050 <HAL_RCC_GetSysClockFreq+0x108>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	0e5b      	lsrs	r3, r3, #25
 800202c:	f003 0303 	and.w	r3, r3, #3
 8002030:	3301      	adds	r3, #1
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	fbb2 f3f3 	udiv	r3, r2, r3
 800203e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002040:	69bb      	ldr	r3, [r7, #24]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3724      	adds	r7, #36	; 0x24
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	40021000 	.word	0x40021000
 8002054:	08004a4c 	.word	0x08004a4c
 8002058:	00f42400 	.word	0x00f42400
 800205c:	007a1200 	.word	0x007a1200

08002060 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002064:	4b03      	ldr	r3, [pc, #12]	; (8002074 <HAL_RCC_GetHCLKFreq+0x14>)
 8002066:	681b      	ldr	r3, [r3, #0]
}
 8002068:	4618      	mov	r0, r3
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	20000018 	.word	0x20000018

08002078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800207c:	f7ff fff0 	bl	8002060 <HAL_RCC_GetHCLKFreq>
 8002080:	4602      	mov	r2, r0
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	0a1b      	lsrs	r3, r3, #8
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	4904      	ldr	r1, [pc, #16]	; (80020a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800208e:	5ccb      	ldrb	r3, [r1, r3]
 8002090:	f003 031f 	and.w	r3, r3, #31
 8002094:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002098:	4618      	mov	r0, r3
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000
 80020a0:	08004a44 	.word	0x08004a44

080020a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020a8:	f7ff ffda 	bl	8002060 <HAL_RCC_GetHCLKFreq>
 80020ac:	4602      	mov	r2, r0
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	0adb      	lsrs	r3, r3, #11
 80020b4:	f003 0307 	and.w	r3, r3, #7
 80020b8:	4904      	ldr	r1, [pc, #16]	; (80020cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80020ba:	5ccb      	ldrb	r3, [r1, r3]
 80020bc:	f003 031f 	and.w	r3, r3, #31
 80020c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	40021000 	.word	0x40021000
 80020cc:	08004a44 	.word	0x08004a44

080020d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b086      	sub	sp, #24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020d8:	2300      	movs	r3, #0
 80020da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020dc:	4b2a      	ldr	r3, [pc, #168]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020e8:	f7ff fa02 	bl	80014f0 <HAL_PWREx_GetVoltageRange>
 80020ec:	6178      	str	r0, [r7, #20]
 80020ee:	e014      	b.n	800211a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020f0:	4b25      	ldr	r3, [pc, #148]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f4:	4a24      	ldr	r2, [pc, #144]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020fa:	6593      	str	r3, [r2, #88]	; 0x58
 80020fc:	4b22      	ldr	r3, [pc, #136]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002104:	60fb      	str	r3, [r7, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002108:	f7ff f9f2 	bl	80014f0 <HAL_PWREx_GetVoltageRange>
 800210c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800210e:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002112:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002114:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002118:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002120:	d10b      	bne.n	800213a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b80      	cmp	r3, #128	; 0x80
 8002126:	d919      	bls.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2ba0      	cmp	r3, #160	; 0xa0
 800212c:	d902      	bls.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800212e:	2302      	movs	r3, #2
 8002130:	613b      	str	r3, [r7, #16]
 8002132:	e013      	b.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002134:	2301      	movs	r3, #1
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	e010      	b.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2b80      	cmp	r3, #128	; 0x80
 800213e:	d902      	bls.n	8002146 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002140:	2303      	movs	r3, #3
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	e00a      	b.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b80      	cmp	r3, #128	; 0x80
 800214a:	d102      	bne.n	8002152 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800214c:	2302      	movs	r3, #2
 800214e:	613b      	str	r3, [r7, #16]
 8002150:	e004      	b.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2b70      	cmp	r3, #112	; 0x70
 8002156:	d101      	bne.n	800215c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002158:	2301      	movs	r3, #1
 800215a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800215c:	4b0b      	ldr	r3, [pc, #44]	; (800218c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f023 0207 	bic.w	r2, r3, #7
 8002164:	4909      	ldr	r1, [pc, #36]	; (800218c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	4313      	orrs	r3, r2
 800216a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800216c:	4b07      	ldr	r3, [pc, #28]	; (800218c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0307 	and.w	r3, r3, #7
 8002174:	693a      	ldr	r2, [r7, #16]
 8002176:	429a      	cmp	r2, r3
 8002178:	d001      	beq.n	800217e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e000      	b.n	8002180 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800217e:	2300      	movs	r3, #0
}
 8002180:	4618      	mov	r0, r3
 8002182:	3718      	adds	r7, #24
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40021000 	.word	0x40021000
 800218c:	40022000 	.word	0x40022000

08002190 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002198:	2300      	movs	r3, #0
 800219a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800219c:	2300      	movs	r3, #0
 800219e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d041      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021b4:	d02a      	beq.n	800220c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021ba:	d824      	bhi.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021bc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021c0:	d008      	beq.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021c6:	d81e      	bhi.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00a      	beq.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021d0:	d010      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021d2:	e018      	b.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021d4:	4b86      	ldr	r3, [pc, #536]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	4a85      	ldr	r2, [pc, #532]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021e0:	e015      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	3304      	adds	r3, #4
 80021e6:	2100      	movs	r1, #0
 80021e8:	4618      	mov	r0, r3
 80021ea:	f000 fabb 	bl	8002764 <RCCEx_PLLSAI1_Config>
 80021ee:	4603      	mov	r3, r0
 80021f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021f2:	e00c      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3320      	adds	r3, #32
 80021f8:	2100      	movs	r1, #0
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 fba6 	bl	800294c <RCCEx_PLLSAI2_Config>
 8002200:	4603      	mov	r3, r0
 8002202:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002204:	e003      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	74fb      	strb	r3, [r7, #19]
      break;
 800220a:	e000      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800220c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800220e:	7cfb      	ldrb	r3, [r7, #19]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d10b      	bne.n	800222c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002214:	4b76      	ldr	r3, [pc, #472]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002222:	4973      	ldr	r1, [pc, #460]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800222a:	e001      	b.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800222c:	7cfb      	ldrb	r3, [r7, #19]
 800222e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d041      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002240:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002244:	d02a      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002246:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800224a:	d824      	bhi.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800224c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002250:	d008      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002252:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002256:	d81e      	bhi.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002258:	2b00      	cmp	r3, #0
 800225a:	d00a      	beq.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800225c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002260:	d010      	beq.n	8002284 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002262:	e018      	b.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002264:	4b62      	ldr	r3, [pc, #392]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	4a61      	ldr	r2, [pc, #388]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002270:	e015      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3304      	adds	r3, #4
 8002276:	2100      	movs	r1, #0
 8002278:	4618      	mov	r0, r3
 800227a:	f000 fa73 	bl	8002764 <RCCEx_PLLSAI1_Config>
 800227e:	4603      	mov	r3, r0
 8002280:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002282:	e00c      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3320      	adds	r3, #32
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f000 fb5e 	bl	800294c <RCCEx_PLLSAI2_Config>
 8002290:	4603      	mov	r3, r0
 8002292:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002294:	e003      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	74fb      	strb	r3, [r7, #19]
      break;
 800229a:	e000      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800229c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800229e:	7cfb      	ldrb	r3, [r7, #19]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d10b      	bne.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022a4:	4b52      	ldr	r3, [pc, #328]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022b2:	494f      	ldr	r1, [pc, #316]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022ba:	e001      	b.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022bc:	7cfb      	ldrb	r3, [r7, #19]
 80022be:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 80a0 	beq.w	800240e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022d2:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022e2:	2300      	movs	r3, #0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00d      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e8:	4b41      	ldr	r3, [pc, #260]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ec:	4a40      	ldr	r2, [pc, #256]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022f2:	6593      	str	r3, [r2, #88]	; 0x58
 80022f4:	4b3e      	ldr	r3, [pc, #248]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fc:	60bb      	str	r3, [r7, #8]
 80022fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002300:	2301      	movs	r3, #1
 8002302:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002304:	4b3b      	ldr	r3, [pc, #236]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a3a      	ldr	r2, [pc, #232]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800230a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002310:	f7fe fd6c 	bl	8000dec <HAL_GetTick>
 8002314:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002316:	e009      	b.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002318:	f7fe fd68 	bl	8000dec <HAL_GetTick>
 800231c:	4602      	mov	r2, r0
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	2b02      	cmp	r3, #2
 8002324:	d902      	bls.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	74fb      	strb	r3, [r7, #19]
        break;
 800232a:	e005      	b.n	8002338 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800232c:	4b31      	ldr	r3, [pc, #196]	; (80023f4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0ef      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002338:	7cfb      	ldrb	r3, [r7, #19]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d15c      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800233e:	4b2c      	ldr	r3, [pc, #176]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002340:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002344:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002348:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d01f      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002356:	697a      	ldr	r2, [r7, #20]
 8002358:	429a      	cmp	r2, r3
 800235a:	d019      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800235c:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002366:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002368:	4b21      	ldr	r3, [pc, #132]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	4a20      	ldr	r2, [pc, #128]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002370:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002374:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002378:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237e:	4a1c      	ldr	r2, [pc, #112]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002380:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002384:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002388:	4a19      	ldr	r2, [pc, #100]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	d016      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800239a:	f7fe fd27 	bl	8000dec <HAL_GetTick>
 800239e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a0:	e00b      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023a2:	f7fe fd23 	bl	8000dec <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d902      	bls.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	74fb      	strb	r3, [r7, #19]
            break;
 80023b8:	e006      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0ec      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023c8:	7cfb      	ldrb	r3, [r7, #19]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10c      	bne.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023de:	4904      	ldr	r1, [pc, #16]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023e6:	e009      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023e8:	7cfb      	ldrb	r3, [r7, #19]
 80023ea:	74bb      	strb	r3, [r7, #18]
 80023ec:	e006      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023ee:	bf00      	nop
 80023f0:	40021000 	.word	0x40021000
 80023f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f8:	7cfb      	ldrb	r3, [r7, #19]
 80023fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023fc:	7c7b      	ldrb	r3, [r7, #17]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d105      	bne.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002402:	4b9e      	ldr	r3, [pc, #632]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002406:	4a9d      	ldr	r2, [pc, #628]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002408:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800240c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d00a      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800241a:	4b98      	ldr	r3, [pc, #608]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800241c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002420:	f023 0203 	bic.w	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	4994      	ldr	r1, [pc, #592]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800242a:	4313      	orrs	r3, r2
 800242c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00a      	beq.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800243c:	4b8f      	ldr	r3, [pc, #572]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002442:	f023 020c 	bic.w	r2, r3, #12
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244a:	498c      	ldr	r1, [pc, #560]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800244c:	4313      	orrs	r3, r2
 800244e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0304 	and.w	r3, r3, #4
 800245a:	2b00      	cmp	r3, #0
 800245c:	d00a      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800245e:	4b87      	ldr	r3, [pc, #540]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002464:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	4983      	ldr	r1, [pc, #524]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246e:	4313      	orrs	r3, r2
 8002470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00a      	beq.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002480:	4b7e      	ldr	r3, [pc, #504]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002486:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248e:	497b      	ldr	r1, [pc, #492]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002490:	4313      	orrs	r3, r2
 8002492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0310 	and.w	r3, r3, #16
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00a      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024a2:	4b76      	ldr	r3, [pc, #472]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024b0:	4972      	ldr	r1, [pc, #456]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b2:	4313      	orrs	r3, r2
 80024b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0320 	and.w	r3, r3, #32
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d00a      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024c4:	4b6d      	ldr	r3, [pc, #436]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024d2:	496a      	ldr	r1, [pc, #424]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d4:	4313      	orrs	r3, r2
 80024d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00a      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024e6:	4b65      	ldr	r3, [pc, #404]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f4:	4961      	ldr	r1, [pc, #388]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002504:	2b00      	cmp	r3, #0
 8002506:	d00a      	beq.n	800251e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002508:	4b5c      	ldr	r3, [pc, #368]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800250a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002516:	4959      	ldr	r1, [pc, #356]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002518:	4313      	orrs	r3, r2
 800251a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002526:	2b00      	cmp	r3, #0
 8002528:	d00a      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800252a:	4b54      	ldr	r3, [pc, #336]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002530:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002538:	4950      	ldr	r1, [pc, #320]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253a:	4313      	orrs	r3, r2
 800253c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002548:	2b00      	cmp	r3, #0
 800254a:	d00a      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800254c:	4b4b      	ldr	r3, [pc, #300]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002552:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800255a:	4948      	ldr	r1, [pc, #288]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800256e:	4b43      	ldr	r3, [pc, #268]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002574:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257c:	493f      	ldr	r1, [pc, #252]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d028      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002590:	4b3a      	ldr	r3, [pc, #232]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002596:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800259e:	4937      	ldr	r1, [pc, #220]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ae:	d106      	bne.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025b0:	4b32      	ldr	r3, [pc, #200]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	4a31      	ldr	r2, [pc, #196]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ba:	60d3      	str	r3, [r2, #12]
 80025bc:	e011      	b.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025c6:	d10c      	bne.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	3304      	adds	r3, #4
 80025cc:	2101      	movs	r1, #1
 80025ce:	4618      	mov	r0, r3
 80025d0:	f000 f8c8 	bl	8002764 <RCCEx_PLLSAI1_Config>
 80025d4:	4603      	mov	r3, r0
 80025d6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025d8:	7cfb      	ldrb	r3, [r7, #19]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d001      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025de:	7cfb      	ldrb	r3, [r7, #19]
 80025e0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d028      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025ee:	4b23      	ldr	r3, [pc, #140]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fc:	491f      	ldr	r1, [pc, #124]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800260c:	d106      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800260e:	4b1b      	ldr	r3, [pc, #108]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	4a1a      	ldr	r2, [pc, #104]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002618:	60d3      	str	r3, [r2, #12]
 800261a:	e011      	b.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002620:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002624:	d10c      	bne.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	3304      	adds	r3, #4
 800262a:	2101      	movs	r1, #1
 800262c:	4618      	mov	r0, r3
 800262e:	f000 f899 	bl	8002764 <RCCEx_PLLSAI1_Config>
 8002632:	4603      	mov	r3, r0
 8002634:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002636:	7cfb      	ldrb	r3, [r7, #19]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800263c:	7cfb      	ldrb	r3, [r7, #19]
 800263e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d02b      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800264c:	4b0b      	ldr	r3, [pc, #44]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002652:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800265a:	4908      	ldr	r1, [pc, #32]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002666:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800266a:	d109      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800266c:	4b03      	ldr	r3, [pc, #12]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	4a02      	ldr	r2, [pc, #8]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002672:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002676:	60d3      	str	r3, [r2, #12]
 8002678:	e014      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800267a:	bf00      	nop
 800267c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002684:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002688:	d10c      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3304      	adds	r3, #4
 800268e:	2101      	movs	r1, #1
 8002690:	4618      	mov	r0, r3
 8002692:	f000 f867 	bl	8002764 <RCCEx_PLLSAI1_Config>
 8002696:	4603      	mov	r3, r0
 8002698:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800269a:	7cfb      	ldrb	r3, [r7, #19]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80026a0:	7cfb      	ldrb	r3, [r7, #19]
 80026a2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d02f      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026b0:	4b2b      	ldr	r3, [pc, #172]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026be:	4928      	ldr	r1, [pc, #160]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026ce:	d10d      	bne.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	3304      	adds	r3, #4
 80026d4:	2102      	movs	r1, #2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f844 	bl	8002764 <RCCEx_PLLSAI1_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026e0:	7cfb      	ldrb	r3, [r7, #19]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d014      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	74bb      	strb	r3, [r7, #18]
 80026ea:	e011      	b.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026f4:	d10c      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	3320      	adds	r3, #32
 80026fa:	2102      	movs	r1, #2
 80026fc:	4618      	mov	r0, r3
 80026fe:	f000 f925 	bl	800294c <RCCEx_PLLSAI2_Config>
 8002702:	4603      	mov	r3, r0
 8002704:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002706:	7cfb      	ldrb	r3, [r7, #19]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d001      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800270c:	7cfb      	ldrb	r3, [r7, #19]
 800270e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d00a      	beq.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800271c:	4b10      	ldr	r3, [pc, #64]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800271e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002722:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800272a:	490d      	ldr	r1, [pc, #52]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800272c:	4313      	orrs	r3, r2
 800272e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00b      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800273e:	4b08      	ldr	r3, [pc, #32]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002744:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800274e:	4904      	ldr	r1, [pc, #16]	; (8002760 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002750:	4313      	orrs	r3, r2
 8002752:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002756:	7cbb      	ldrb	r3, [r7, #18]
}
 8002758:	4618      	mov	r0, r3
 800275a:	3718      	adds	r7, #24
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	40021000 	.word	0x40021000

08002764 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800276e:	2300      	movs	r3, #0
 8002770:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002772:	4b75      	ldr	r3, [pc, #468]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002774:	68db      	ldr	r3, [r3, #12]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d018      	beq.n	80027b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800277e:	4b72      	ldr	r3, [pc, #456]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f003 0203 	and.w	r2, r3, #3
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	429a      	cmp	r2, r3
 800278c:	d10d      	bne.n	80027aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
       ||
 8002792:	2b00      	cmp	r3, #0
 8002794:	d009      	beq.n	80027aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002796:	4b6c      	ldr	r3, [pc, #432]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	091b      	lsrs	r3, r3, #4
 800279c:	f003 0307 	and.w	r3, r3, #7
 80027a0:	1c5a      	adds	r2, r3, #1
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
       ||
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d047      	beq.n	800283a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	73fb      	strb	r3, [r7, #15]
 80027ae:	e044      	b.n	800283a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d018      	beq.n	80027ea <RCCEx_PLLSAI1_Config+0x86>
 80027b8:	2b03      	cmp	r3, #3
 80027ba:	d825      	bhi.n	8002808 <RCCEx_PLLSAI1_Config+0xa4>
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d002      	beq.n	80027c6 <RCCEx_PLLSAI1_Config+0x62>
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d009      	beq.n	80027d8 <RCCEx_PLLSAI1_Config+0x74>
 80027c4:	e020      	b.n	8002808 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027c6:	4b60      	ldr	r3, [pc, #384]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d11d      	bne.n	800280e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d6:	e01a      	b.n	800280e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027d8:	4b5b      	ldr	r3, [pc, #364]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d116      	bne.n	8002812 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027e4:	2301      	movs	r3, #1
 80027e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e8:	e013      	b.n	8002812 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027ea:	4b57      	ldr	r3, [pc, #348]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10f      	bne.n	8002816 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027f6:	4b54      	ldr	r3, [pc, #336]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d109      	bne.n	8002816 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002806:	e006      	b.n	8002816 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	73fb      	strb	r3, [r7, #15]
      break;
 800280c:	e004      	b.n	8002818 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800280e:	bf00      	nop
 8002810:	e002      	b.n	8002818 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002812:	bf00      	nop
 8002814:	e000      	b.n	8002818 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002816:	bf00      	nop
    }

    if(status == HAL_OK)
 8002818:	7bfb      	ldrb	r3, [r7, #15]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d10d      	bne.n	800283a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800281e:	4b4a      	ldr	r3, [pc, #296]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6819      	ldr	r1, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	3b01      	subs	r3, #1
 8002830:	011b      	lsls	r3, r3, #4
 8002832:	430b      	orrs	r3, r1
 8002834:	4944      	ldr	r1, [pc, #272]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002836:	4313      	orrs	r3, r2
 8002838:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d17d      	bne.n	800293c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002840:	4b41      	ldr	r3, [pc, #260]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a40      	ldr	r2, [pc, #256]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002846:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800284a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800284c:	f7fe face 	bl	8000dec <HAL_GetTick>
 8002850:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002852:	e009      	b.n	8002868 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002854:	f7fe faca 	bl	8000dec <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d902      	bls.n	8002868 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	73fb      	strb	r3, [r7, #15]
        break;
 8002866:	e005      	b.n	8002874 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002868:	4b37      	ldr	r3, [pc, #220]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002870:	2b00      	cmp	r3, #0
 8002872:	d1ef      	bne.n	8002854 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002874:	7bfb      	ldrb	r3, [r7, #15]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d160      	bne.n	800293c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d111      	bne.n	80028a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002880:	4b31      	ldr	r3, [pc, #196]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002888:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800288c:	687a      	ldr	r2, [r7, #4]
 800288e:	6892      	ldr	r2, [r2, #8]
 8002890:	0211      	lsls	r1, r2, #8
 8002892:	687a      	ldr	r2, [r7, #4]
 8002894:	68d2      	ldr	r2, [r2, #12]
 8002896:	0912      	lsrs	r2, r2, #4
 8002898:	0452      	lsls	r2, r2, #17
 800289a:	430a      	orrs	r2, r1
 800289c:	492a      	ldr	r1, [pc, #168]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	610b      	str	r3, [r1, #16]
 80028a2:	e027      	b.n	80028f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d112      	bne.n	80028d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028aa:	4b27      	ldr	r3, [pc, #156]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ac:	691b      	ldr	r3, [r3, #16]
 80028ae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6892      	ldr	r2, [r2, #8]
 80028ba:	0211      	lsls	r1, r2, #8
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6912      	ldr	r2, [r2, #16]
 80028c0:	0852      	lsrs	r2, r2, #1
 80028c2:	3a01      	subs	r2, #1
 80028c4:	0552      	lsls	r2, r2, #21
 80028c6:	430a      	orrs	r2, r1
 80028c8:	491f      	ldr	r1, [pc, #124]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ca:	4313      	orrs	r3, r2
 80028cc:	610b      	str	r3, [r1, #16]
 80028ce:	e011      	b.n	80028f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028d0:	4b1d      	ldr	r3, [pc, #116]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6892      	ldr	r2, [r2, #8]
 80028e0:	0211      	lsls	r1, r2, #8
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6952      	ldr	r2, [r2, #20]
 80028e6:	0852      	lsrs	r2, r2, #1
 80028e8:	3a01      	subs	r2, #1
 80028ea:	0652      	lsls	r2, r2, #25
 80028ec:	430a      	orrs	r2, r1
 80028ee:	4916      	ldr	r1, [pc, #88]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028f4:	4b14      	ldr	r3, [pc, #80]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a13      	ldr	r2, [pc, #76]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002900:	f7fe fa74 	bl	8000dec <HAL_GetTick>
 8002904:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002906:	e009      	b.n	800291c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002908:	f7fe fa70 	bl	8000dec <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b02      	cmp	r3, #2
 8002914:	d902      	bls.n	800291c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	73fb      	strb	r3, [r7, #15]
          break;
 800291a:	e005      	b.n	8002928 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800291c:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0ef      	beq.n	8002908 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002928:	7bfb      	ldrb	r3, [r7, #15]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800292e:	4b06      	ldr	r3, [pc, #24]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002930:	691a      	ldr	r2, [r3, #16]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	4904      	ldr	r1, [pc, #16]	; (8002948 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002938:	4313      	orrs	r3, r2
 800293a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800293c:	7bfb      	ldrb	r3, [r7, #15]
}
 800293e:	4618      	mov	r0, r3
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	40021000 	.word	0x40021000

0800294c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800295a:	4b6a      	ldr	r3, [pc, #424]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d018      	beq.n	8002998 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002966:	4b67      	ldr	r3, [pc, #412]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f003 0203 	and.w	r2, r3, #3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d10d      	bne.n	8002992 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
       ||
 800297a:	2b00      	cmp	r3, #0
 800297c:	d009      	beq.n	8002992 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800297e:	4b61      	ldr	r3, [pc, #388]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002980:	68db      	ldr	r3, [r3, #12]
 8002982:	091b      	lsrs	r3, r3, #4
 8002984:	f003 0307 	and.w	r3, r3, #7
 8002988:	1c5a      	adds	r2, r3, #1
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
       ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d047      	beq.n	8002a22 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	73fb      	strb	r3, [r7, #15]
 8002996:	e044      	b.n	8002a22 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2b03      	cmp	r3, #3
 800299e:	d018      	beq.n	80029d2 <RCCEx_PLLSAI2_Config+0x86>
 80029a0:	2b03      	cmp	r3, #3
 80029a2:	d825      	bhi.n	80029f0 <RCCEx_PLLSAI2_Config+0xa4>
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d002      	beq.n	80029ae <RCCEx_PLLSAI2_Config+0x62>
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d009      	beq.n	80029c0 <RCCEx_PLLSAI2_Config+0x74>
 80029ac:	e020      	b.n	80029f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029ae:	4b55      	ldr	r3, [pc, #340]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 0302 	and.w	r3, r3, #2
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d11d      	bne.n	80029f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029be:	e01a      	b.n	80029f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029c0:	4b50      	ldr	r3, [pc, #320]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d116      	bne.n	80029fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d0:	e013      	b.n	80029fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029d2:	4b4c      	ldr	r3, [pc, #304]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10f      	bne.n	80029fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029de:	4b49      	ldr	r3, [pc, #292]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029ee:	e006      	b.n	80029fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	73fb      	strb	r3, [r7, #15]
      break;
 80029f4:	e004      	b.n	8002a00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029f6:	bf00      	nop
 80029f8:	e002      	b.n	8002a00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029fa:	bf00      	nop
 80029fc:	e000      	b.n	8002a00 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a00:	7bfb      	ldrb	r3, [r7, #15]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d10d      	bne.n	8002a22 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a06:	4b3f      	ldr	r3, [pc, #252]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6819      	ldr	r1, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	3b01      	subs	r3, #1
 8002a18:	011b      	lsls	r3, r3, #4
 8002a1a:	430b      	orrs	r3, r1
 8002a1c:	4939      	ldr	r1, [pc, #228]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a22:	7bfb      	ldrb	r3, [r7, #15]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d167      	bne.n	8002af8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a28:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a35      	ldr	r2, [pc, #212]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a34:	f7fe f9da 	bl	8000dec <HAL_GetTick>
 8002a38:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a3a:	e009      	b.n	8002a50 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a3c:	f7fe f9d6 	bl	8000dec <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d902      	bls.n	8002a50 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	73fb      	strb	r3, [r7, #15]
        break;
 8002a4e:	e005      	b.n	8002a5c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a50:	4b2c      	ldr	r3, [pc, #176]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d1ef      	bne.n	8002a3c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a5c:	7bfb      	ldrb	r3, [r7, #15]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d14a      	bne.n	8002af8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d111      	bne.n	8002a8c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a68:	4b26      	ldr	r3, [pc, #152]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6a:	695b      	ldr	r3, [r3, #20]
 8002a6c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	6892      	ldr	r2, [r2, #8]
 8002a78:	0211      	lsls	r1, r2, #8
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	68d2      	ldr	r2, [r2, #12]
 8002a7e:	0912      	lsrs	r2, r2, #4
 8002a80:	0452      	lsls	r2, r2, #17
 8002a82:	430a      	orrs	r2, r1
 8002a84:	491f      	ldr	r1, [pc, #124]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	614b      	str	r3, [r1, #20]
 8002a8a:	e011      	b.n	8002ab0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a8e:	695b      	ldr	r3, [r3, #20]
 8002a90:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a94:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	6892      	ldr	r2, [r2, #8]
 8002a9c:	0211      	lsls	r1, r2, #8
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6912      	ldr	r2, [r2, #16]
 8002aa2:	0852      	lsrs	r2, r2, #1
 8002aa4:	3a01      	subs	r2, #1
 8002aa6:	0652      	lsls	r2, r2, #25
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	4916      	ldr	r1, [pc, #88]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ab0:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002abc:	f7fe f996 	bl	8000dec <HAL_GetTick>
 8002ac0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ac2:	e009      	b.n	8002ad8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ac4:	f7fe f992 	bl	8000dec <HAL_GetTick>
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d902      	bls.n	8002ad8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ad2:	2303      	movs	r3, #3
 8002ad4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ad6:	e005      	b.n	8002ae4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ad8:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0ef      	beq.n	8002ac4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ae4:	7bfb      	ldrb	r3, [r7, #15]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d106      	bne.n	8002af8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002aea:	4b06      	ldr	r3, [pc, #24]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aec:	695a      	ldr	r2, [r3, #20]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	695b      	ldr	r3, [r3, #20]
 8002af2:	4904      	ldr	r1, [pc, #16]	; (8002b04 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40021000 	.word	0x40021000

08002b08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e095      	b.n	8002c46 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d108      	bne.n	8002b34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b2a:	d009      	beq.n	8002b40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	61da      	str	r2, [r3, #28]
 8002b32:	e005      	b.n	8002b40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d106      	bne.n	8002b60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2200      	movs	r2, #0
 8002b56:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f7fd ff26 	bl	80009ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2202      	movs	r2, #2
 8002b64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b76:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b80:	d902      	bls.n	8002b88 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b82:	2300      	movs	r3, #0
 8002b84:	60fb      	str	r3, [r7, #12]
 8002b86:	e002      	b.n	8002b8e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b8c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002b96:	d007      	beq.n	8002ba8 <HAL_SPI_Init+0xa0>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ba0:	d002      	beq.n	8002ba8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	695b      	ldr	r3, [r3, #20]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	69db      	ldr	r3, [r3, #28]
 8002bdc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002be0:	431a      	orrs	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bea:	ea42 0103 	orr.w	r1, r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	699b      	ldr	r3, [r3, #24]
 8002c02:	0c1b      	lsrs	r3, r3, #16
 8002c04:	f003 0204 	and.w	r2, r3, #4
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	f003 0310 	and.w	r3, r3, #16
 8002c10:	431a      	orrs	r2, r3
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002c24:	ea42 0103 	orr.w	r1, r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	430a      	orrs	r2, r1
 8002c34:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b088      	sub	sp, #32
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	60f8      	str	r0, [r7, #12]
 8002c56:	60b9      	str	r1, [r7, #8]
 8002c58:	603b      	str	r3, [r7, #0]
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c68:	2b01      	cmp	r3, #1
 8002c6a:	d101      	bne.n	8002c70 <HAL_SPI_Transmit+0x22>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e158      	b.n	8002f22 <HAL_SPI_Transmit+0x2d4>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c78:	f7fe f8b8 	bl	8000dec <HAL_GetTick>
 8002c7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c7e:	88fb      	ldrh	r3, [r7, #6]
 8002c80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c88:	b2db      	uxtb	r3, r3
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d002      	beq.n	8002c94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c92:	e13d      	b.n	8002f10 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d002      	beq.n	8002ca0 <HAL_SPI_Transmit+0x52>
 8002c9a:	88fb      	ldrh	r3, [r7, #6]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d102      	bne.n	8002ca6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ca4:	e134      	b.n	8002f10 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2203      	movs	r2, #3
 8002caa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	68ba      	ldr	r2, [r7, #8]
 8002cb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	88fa      	ldrh	r2, [r7, #6]
 8002cbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	88fa      	ldrh	r2, [r7, #6]
 8002cc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cf0:	d10f      	bne.n	8002d12 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d1c:	2b40      	cmp	r3, #64	; 0x40
 8002d1e:	d007      	beq.n	8002d30 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d38:	d94b      	bls.n	8002dd2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d002      	beq.n	8002d48 <HAL_SPI_Transmit+0xfa>
 8002d42:	8afb      	ldrh	r3, [r7, #22]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d13e      	bne.n	8002dc6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d4c:	881a      	ldrh	r2, [r3, #0]
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d58:	1c9a      	adds	r2, r3, #2
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	3b01      	subs	r3, #1
 8002d66:	b29a      	uxth	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d6c:	e02b      	b.n	8002dc6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d112      	bne.n	8002da2 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d80:	881a      	ldrh	r2, [r3, #0]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d8c:	1c9a      	adds	r2, r3, #2
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	3b01      	subs	r3, #1
 8002d9a:	b29a      	uxth	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002da0:	e011      	b.n	8002dc6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002da2:	f7fe f823 	bl	8000dec <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d803      	bhi.n	8002dba <HAL_SPI_Transmit+0x16c>
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db8:	d102      	bne.n	8002dc0 <HAL_SPI_Transmit+0x172>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d102      	bne.n	8002dc6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002dc4:	e0a4      	b.n	8002f10 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1ce      	bne.n	8002d6e <HAL_SPI_Transmit+0x120>
 8002dd0:	e07c      	b.n	8002ecc <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d002      	beq.n	8002de0 <HAL_SPI_Transmit+0x192>
 8002dda:	8afb      	ldrh	r3, [r7, #22]
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d170      	bne.n	8002ec2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d912      	bls.n	8002e10 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dee:	881a      	ldrh	r2, [r3, #0]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dfa:	1c9a      	adds	r2, r3, #2
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	3b02      	subs	r3, #2
 8002e08:	b29a      	uxth	r2, r3
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e0e:	e058      	b.n	8002ec2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	330c      	adds	r3, #12
 8002e1a:	7812      	ldrb	r2, [r2, #0]
 8002e1c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e22:	1c5a      	adds	r2, r3, #1
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	3b01      	subs	r3, #1
 8002e30:	b29a      	uxth	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002e36:	e044      	b.n	8002ec2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d12b      	bne.n	8002e9e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d912      	bls.n	8002e76 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e54:	881a      	ldrh	r2, [r3, #0]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e60:	1c9a      	adds	r2, r3, #2
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e6a:	b29b      	uxth	r3, r3
 8002e6c:	3b02      	subs	r3, #2
 8002e6e:	b29a      	uxth	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e74:	e025      	b.n	8002ec2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	330c      	adds	r3, #12
 8002e80:	7812      	ldrb	r2, [r2, #0]
 8002e82:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e88:	1c5a      	adds	r2, r3, #1
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	3b01      	subs	r3, #1
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e9c:	e011      	b.n	8002ec2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e9e:	f7fd ffa5 	bl	8000dec <HAL_GetTick>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	1ad3      	subs	r3, r2, r3
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d803      	bhi.n	8002eb6 <HAL_SPI_Transmit+0x268>
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb4:	d102      	bne.n	8002ebc <HAL_SPI_Transmit+0x26e>
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d102      	bne.n	8002ec2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002ebc:	2303      	movs	r3, #3
 8002ebe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ec0:	e026      	b.n	8002f10 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec6:	b29b      	uxth	r3, r3
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1b5      	bne.n	8002e38 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	6839      	ldr	r1, [r7, #0]
 8002ed0:	68f8      	ldr	r0, [r7, #12]
 8002ed2:	f000 f949 	bl	8003168 <SPI_EndRxTxTransaction>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10a      	bne.n	8002f00 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002eea:	2300      	movs	r3, #0
 8002eec:	613b      	str	r3, [r7, #16]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68db      	ldr	r3, [r3, #12]
 8002ef4:	613b      	str	r3, [r7, #16]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	77fb      	strb	r3, [r7, #31]
 8002f0c:	e000      	b.n	8002f10 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002f0e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f20:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3720      	adds	r7, #32
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	603b      	str	r3, [r7, #0]
 8002f38:	4613      	mov	r3, r2
 8002f3a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f3c:	f7fd ff56 	bl	8000dec <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	1a9b      	subs	r3, r3, r2
 8002f46:	683a      	ldr	r2, [r7, #0]
 8002f48:	4413      	add	r3, r2
 8002f4a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f4c:	f7fd ff4e 	bl	8000dec <HAL_GetTick>
 8002f50:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f52:	4b39      	ldr	r3, [pc, #228]	; (8003038 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	015b      	lsls	r3, r3, #5
 8002f58:	0d1b      	lsrs	r3, r3, #20
 8002f5a:	69fa      	ldr	r2, [r7, #28]
 8002f5c:	fb02 f303 	mul.w	r3, r2, r3
 8002f60:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f62:	e054      	b.n	800300e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6a:	d050      	beq.n	800300e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f6c:	f7fd ff3e 	bl	8000dec <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	69fa      	ldr	r2, [r7, #28]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d902      	bls.n	8002f82 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d13d      	bne.n	8002ffe <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f90:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f9a:	d111      	bne.n	8002fc0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	689b      	ldr	r3, [r3, #8]
 8002fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fa4:	d004      	beq.n	8002fb0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fae:	d107      	bne.n	8002fc0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002fbe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fc8:	d10f      	bne.n	8002fea <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fd8:	601a      	str	r2, [r3, #0]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fe8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e017      	b.n	800302e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d101      	bne.n	8003008 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	3b01      	subs	r3, #1
 800300c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4013      	ands	r3, r2
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	429a      	cmp	r2, r3
 800301c:	bf0c      	ite	eq
 800301e:	2301      	moveq	r3, #1
 8003020:	2300      	movne	r3, #0
 8003022:	b2db      	uxtb	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	429a      	cmp	r2, r3
 800302a:	d19b      	bne.n	8002f64 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3720      	adds	r7, #32
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	20000018 	.word	0x20000018

0800303c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08a      	sub	sp, #40	; 0x28
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
 8003048:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800304e:	f7fd fecd 	bl	8000dec <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	4413      	add	r3, r2
 800305c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800305e:	f7fd fec5 	bl	8000dec <HAL_GetTick>
 8003062:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	330c      	adds	r3, #12
 800306a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800306c:	4b3d      	ldr	r3, [pc, #244]	; (8003164 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	4613      	mov	r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	4413      	add	r3, r2
 8003076:	00da      	lsls	r2, r3, #3
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	0d1b      	lsrs	r3, r3, #20
 800307c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307e:	fb02 f303 	mul.w	r3, r2, r3
 8003082:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003084:	e060      	b.n	8003148 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800308c:	d107      	bne.n	800309e <SPI_WaitFifoStateUntilTimeout+0x62>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d104      	bne.n	800309e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	b2db      	uxtb	r3, r3
 800309a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800309c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a4:	d050      	beq.n	8003148 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80030a6:	f7fd fea1 	bl	8000dec <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	6a3b      	ldr	r3, [r7, #32]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d902      	bls.n	80030bc <SPI_WaitFifoStateUntilTimeout+0x80>
 80030b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d13d      	bne.n	8003138 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030ca:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030d4:	d111      	bne.n	80030fa <SPI_WaitFifoStateUntilTimeout+0xbe>
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030de:	d004      	beq.n	80030ea <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030e8:	d107      	bne.n	80030fa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030f8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003102:	d10f      	bne.n	8003124 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003122:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e010      	b.n	800315a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003138:	69bb      	ldr	r3, [r7, #24]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d101      	bne.n	8003142 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800313e:	2300      	movs	r3, #0
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	3b01      	subs	r3, #1
 8003146:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	4013      	ands	r3, r2
 8003152:	687a      	ldr	r2, [r7, #4]
 8003154:	429a      	cmp	r2, r3
 8003156:	d196      	bne.n	8003086 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003158:	2300      	movs	r3, #0
}
 800315a:	4618      	mov	r0, r3
 800315c:	3728      	adds	r7, #40	; 0x28
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	20000018 	.word	0x20000018

08003168 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b086      	sub	sp, #24
 800316c:	af02      	add	r7, sp, #8
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	9300      	str	r3, [sp, #0]
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	2200      	movs	r2, #0
 800317c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003180:	68f8      	ldr	r0, [r7, #12]
 8003182:	f7ff ff5b 	bl	800303c <SPI_WaitFifoStateUntilTimeout>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d007      	beq.n	800319c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003190:	f043 0220 	orr.w	r2, r3, #32
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e027      	b.n	80031ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	9300      	str	r3, [sp, #0]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	2200      	movs	r2, #0
 80031a4:	2180      	movs	r1, #128	; 0x80
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f7ff fec0 	bl	8002f2c <SPI_WaitFlagStateUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d007      	beq.n	80031c2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031b6:	f043 0220 	orr.w	r2, r3, #32
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e014      	b.n	80031ec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	f7ff ff34 	bl	800303c <SPI_WaitFifoStateUntilTimeout>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d007      	beq.n	80031ea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031de:	f043 0220 	orr.w	r2, r3, #32
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031e6:	2303      	movs	r3, #3
 80031e8:	e000      	b.n	80031ec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d101      	bne.n	8003206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e040      	b.n	8003288 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800320a:	2b00      	cmp	r3, #0
 800320c:	d106      	bne.n	800321c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7fd fcc4 	bl	8000ba4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2224      	movs	r2, #36	; 0x24
 8003220:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0201 	bic.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 fbe8 	bl	8003a08 <UART_SetConfig>
 8003238:	4603      	mov	r3, r0
 800323a:	2b01      	cmp	r3, #1
 800323c:	d101      	bne.n	8003242 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	e022      	b.n	8003288 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	2b00      	cmp	r3, #0
 8003248:	d002      	beq.n	8003250 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f000 fe66 	bl	8003f1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685a      	ldr	r2, [r3, #4]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800325e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800326e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f042 0201 	orr.w	r2, r2, #1
 800327e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003280:	6878      	ldr	r0, [r7, #4]
 8003282:	f000 feed 	bl	8004060 <UART_CheckIdleState>
 8003286:	4603      	mov	r3, r0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003290:	b480      	push	{r7}
 8003292:	b08b      	sub	sp, #44	; 0x2c
 8003294:	af00      	add	r7, sp, #0
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	4613      	mov	r3, r2
 800329c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	d156      	bne.n	8003354 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <HAL_UART_Transmit_IT+0x22>
 80032ac:	88fb      	ldrh	r3, [r7, #6]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e04f      	b.n	8003356 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d101      	bne.n	80032c4 <HAL_UART_Transmit_IT+0x34>
 80032c0:	2302      	movs	r3, #2
 80032c2:	e048      	b.n	8003356 <HAL_UART_Transmit_IT+0xc6>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2201      	movs	r2, #1
 80032c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	68ba      	ldr	r2, [r7, #8]
 80032d0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	88fa      	ldrh	r2, [r7, #6]
 80032d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	88fa      	ldrh	r2, [r7, #6]
 80032de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2200      	movs	r2, #0
 80032e6:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2221      	movs	r2, #33	; 0x21
 80032f4:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032fe:	d107      	bne.n	8003310 <HAL_UART_Transmit_IT+0x80>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d103      	bne.n	8003310 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	4a16      	ldr	r2, [pc, #88]	; (8003364 <HAL_UART_Transmit_IT+0xd4>)
 800330c:	669a      	str	r2, [r3, #104]	; 0x68
 800330e:	e002      	b.n	8003316 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	4a15      	ldr	r2, [pc, #84]	; (8003368 <HAL_UART_Transmit_IT+0xd8>)
 8003314:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	e853 3f00 	ldrex	r3, [r3]
 800332a:	613b      	str	r3, [r7, #16]
   return(result);
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	623b      	str	r3, [r7, #32]
 800333e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003340:	69f9      	ldr	r1, [r7, #28]
 8003342:	6a3a      	ldr	r2, [r7, #32]
 8003344:	e841 2300 	strex	r3, r2, [r1]
 8003348:	61bb      	str	r3, [r7, #24]
   return(result);
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1e6      	bne.n	800331e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003350:	2300      	movs	r3, #0
 8003352:	e000      	b.n	8003356 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003354:	2302      	movs	r3, #2
  }
}
 8003356:	4618      	mov	r0, r3
 8003358:	372c      	adds	r7, #44	; 0x2c
 800335a:	46bd      	mov	sp, r7
 800335c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003360:	4770      	bx	lr
 8003362:	bf00      	nop
 8003364:	080045bb 	.word	0x080045bb
 8003368:	08004503 	.word	0x08004503

0800336c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b08a      	sub	sp, #40	; 0x28
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	4613      	mov	r3, r2
 8003378:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800337e:	2b20      	cmp	r3, #32
 8003380:	d142      	bne.n	8003408 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <HAL_UART_Receive_IT+0x22>
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e03b      	b.n	800340a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <HAL_UART_Receive_IT+0x34>
 800339c:	2302      	movs	r3, #2
 800339e:	e034      	b.n	800340a <HAL_UART_Receive_IT+0x9e>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2200      	movs	r2, #0
 80033ac:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a18      	ldr	r2, [pc, #96]	; (8003414 <HAL_UART_Receive_IT+0xa8>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d01f      	beq.n	80033f8 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d018      	beq.n	80033f8 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	e853 3f00 	ldrex	r3, [r3]
 80033d2:	613b      	str	r3, [r7, #16]
   return(result);
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	461a      	mov	r2, r3
 80033e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033e4:	623b      	str	r3, [r7, #32]
 80033e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e8:	69f9      	ldr	r1, [r7, #28]
 80033ea:	6a3a      	ldr	r2, [r7, #32]
 80033ec:	e841 2300 	strex	r3, r2, [r1]
 80033f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80033f2:	69bb      	ldr	r3, [r7, #24]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1e6      	bne.n	80033c6 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80033f8:	88fb      	ldrh	r3, [r7, #6]
 80033fa:	461a      	mov	r2, r3
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 ff3c 	bl	800427c <UART_Start_Receive_IT>
 8003404:	4603      	mov	r3, r0
 8003406:	e000      	b.n	800340a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003408:	2302      	movs	r3, #2
  }
}
 800340a:	4618      	mov	r0, r3
 800340c:	3728      	adds	r7, #40	; 0x28
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40008000 	.word	0x40008000

08003418 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b0ba      	sub	sp, #232	; 0xe8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800343e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003442:	f640 030f 	movw	r3, #2063	; 0x80f
 8003446:	4013      	ands	r3, r2
 8003448:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800344c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003450:	2b00      	cmp	r3, #0
 8003452:	d115      	bne.n	8003480 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003458:	f003 0320 	and.w	r3, r3, #32
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00f      	beq.n	8003480 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003464:	f003 0320 	and.w	r3, r3, #32
 8003468:	2b00      	cmp	r3, #0
 800346a:	d009      	beq.n	8003480 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 82a6 	beq.w	80039c2 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	4798      	blx	r3
      }
      return;
 800347e:	e2a0      	b.n	80039c2 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003480:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 8117 	beq.w	80036b8 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800348a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003496:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800349a:	4b85      	ldr	r3, [pc, #532]	; (80036b0 <HAL_UART_IRQHandler+0x298>)
 800349c:	4013      	ands	r3, r2
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f000 810a 	beq.w	80036b8 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034a8:	f003 0301 	and.w	r3, r3, #1
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d011      	beq.n	80034d4 <HAL_UART_IRQHandler+0xbc>
 80034b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d00b      	beq.n	80034d4 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	2201      	movs	r2, #1
 80034c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034ca:	f043 0201 	orr.w	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034d8:	f003 0302 	and.w	r3, r3, #2
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d011      	beq.n	8003504 <HAL_UART_IRQHandler+0xec>
 80034e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00b      	beq.n	8003504 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2202      	movs	r2, #2
 80034f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034fa:	f043 0204 	orr.w	r2, r3, #4
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003504:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d011      	beq.n	8003534 <HAL_UART_IRQHandler+0x11c>
 8003510:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00b      	beq.n	8003534 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2204      	movs	r2, #4
 8003522:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800352a:	f043 0202 	orr.w	r2, r3, #2
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003534:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d017      	beq.n	8003570 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003540:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b00      	cmp	r3, #0
 800354a:	d105      	bne.n	8003558 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800354c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003550:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003554:	2b00      	cmp	r3, #0
 8003556:	d00b      	beq.n	8003570 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	2208      	movs	r2, #8
 800355e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003566:	f043 0208 	orr.w	r2, r3, #8
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003578:	2b00      	cmp	r3, #0
 800357a:	d012      	beq.n	80035a2 <HAL_UART_IRQHandler+0x18a>
 800357c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003580:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d00c      	beq.n	80035a2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003590:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003598:	f043 0220 	orr.w	r2, r3, #32
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 820c 	beq.w	80039c6 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80035ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00d      	beq.n	80035d6 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035be:	f003 0320 	and.w	r3, r3, #32
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d007      	beq.n	80035d6 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035d2:	6878      	ldr	r0, [r7, #4]
 80035d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ea:	2b40      	cmp	r3, #64	; 0x40
 80035ec:	d005      	beq.n	80035fa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80035ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80035f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d04f      	beq.n	800369a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 ff08 	bl	8004410 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800360a:	2b40      	cmp	r3, #64	; 0x40
 800360c:	d141      	bne.n	8003692 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3308      	adds	r3, #8
 8003614:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003618:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800361c:	e853 3f00 	ldrex	r3, [r3]
 8003620:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003624:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003628:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800362c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	3308      	adds	r3, #8
 8003636:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800363a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800363e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003642:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003646:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800364a:	e841 2300 	strex	r3, r2, [r1]
 800364e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003652:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003656:	2b00      	cmp	r3, #0
 8003658:	d1d9      	bne.n	800360e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	2b00      	cmp	r3, #0
 8003660:	d013      	beq.n	800368a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003666:	4a13      	ldr	r2, [pc, #76]	; (80036b4 <HAL_UART_IRQHandler+0x29c>)
 8003668:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	4618      	mov	r0, r3
 8003670:	f7fd fd3b 	bl	80010ea <HAL_DMA_Abort_IT>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d017      	beq.n	80036aa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003680:	687a      	ldr	r2, [r7, #4]
 8003682:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003684:	4610      	mov	r0, r2
 8003686:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003688:	e00f      	b.n	80036aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f9a6 	bl	80039dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003690:	e00b      	b.n	80036aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 f9a2 	bl	80039dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003698:	e007      	b.n	80036aa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800369a:	6878      	ldr	r0, [r7, #4]
 800369c:	f000 f99e 	bl	80039dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80036a8:	e18d      	b.n	80039c6 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036aa:	bf00      	nop
    return;
 80036ac:	e18b      	b.n	80039c6 <HAL_UART_IRQHandler+0x5ae>
 80036ae:	bf00      	nop
 80036b0:	04000120 	.word	0x04000120
 80036b4:	080044d7 	.word	0x080044d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036bc:	2b01      	cmp	r3, #1
 80036be:	f040 8146 	bne.w	800394e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80036c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036c6:	f003 0310 	and.w	r3, r3, #16
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 813f 	beq.w	800394e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80036d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036d4:	f003 0310 	and.w	r3, r3, #16
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 8138 	beq.w	800394e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	2210      	movs	r2, #16
 80036e4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f0:	2b40      	cmp	r3, #64	; 0x40
 80036f2:	f040 80b4 	bne.w	800385e <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003702:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003706:	2b00      	cmp	r3, #0
 8003708:	f000 815f 	beq.w	80039ca <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003712:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003716:	429a      	cmp	r2, r3
 8003718:	f080 8157 	bcs.w	80039ca <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003722:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 0320 	and.w	r3, r3, #32
 8003732:	2b00      	cmp	r3, #0
 8003734:	f040 8085 	bne.w	8003842 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003740:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003744:	e853 3f00 	ldrex	r3, [r3]
 8003748:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800374c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003750:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003754:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	461a      	mov	r2, r3
 800375e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003762:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003766:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800376e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003772:	e841 2300 	strex	r3, r2, [r1]
 8003776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800377a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1da      	bne.n	8003738 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	3308      	adds	r3, #8
 8003788:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800378c:	e853 3f00 	ldrex	r3, [r3]
 8003790:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003792:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003794:	f023 0301 	bic.w	r3, r3, #1
 8003798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	3308      	adds	r3, #8
 80037a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80037b2:	e841 2300 	strex	r3, r2, [r1]
 80037b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80037b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1e1      	bne.n	8003782 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	3308      	adds	r3, #8
 80037c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037c8:	e853 3f00 	ldrex	r3, [r3]
 80037cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80037ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80037d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	3308      	adds	r3, #8
 80037de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80037e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80037e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80037e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80037ea:	e841 2300 	strex	r3, r2, [r1]
 80037ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80037f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1e3      	bne.n	80037be <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800380a:	e853 3f00 	ldrex	r3, [r3]
 800380e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003810:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003812:	f023 0310 	bic.w	r3, r3, #16
 8003816:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003824:	65bb      	str	r3, [r7, #88]	; 0x58
 8003826:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003828:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800382a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800382c:	e841 2300 	strex	r3, r2, [r1]
 8003830:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003832:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1e4      	bne.n	8003802 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383c:	4618      	mov	r0, r3
 800383e:	f7fd fc16 	bl	800106e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800384e:	b29b      	uxth	r3, r3
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	b29b      	uxth	r3, r3
 8003854:	4619      	mov	r1, r3
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 f8ca 	bl	80039f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800385c:	e0b5      	b.n	80039ca <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800386a:	b29b      	uxth	r3, r3
 800386c:	1ad3      	subs	r3, r2, r3
 800386e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	f000 80a7 	beq.w	80039ce <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003880:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80a2 	beq.w	80039ce <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003892:	e853 3f00 	ldrex	r3, [r3]
 8003896:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800389a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800389e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	461a      	mov	r2, r3
 80038a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80038ac:	647b      	str	r3, [r7, #68]	; 0x44
 80038ae:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038b0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80038b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80038b4:	e841 2300 	strex	r3, r2, [r1]
 80038b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80038ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1e4      	bne.n	800388a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3308      	adds	r3, #8
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ca:	e853 3f00 	ldrex	r3, [r3]
 80038ce:	623b      	str	r3, [r7, #32]
   return(result);
 80038d0:	6a3b      	ldr	r3, [r7, #32]
 80038d2:	f023 0301 	bic.w	r3, r3, #1
 80038d6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3308      	adds	r3, #8
 80038e0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80038e4:	633a      	str	r2, [r7, #48]	; 0x30
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80038ec:	e841 2300 	strex	r3, r2, [r1]
 80038f0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80038f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1e3      	bne.n	80038c0 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	e853 3f00 	ldrex	r3, [r3]
 8003916:	60fb      	str	r3, [r7, #12]
   return(result);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f023 0310 	bic.w	r3, r3, #16
 800391e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	461a      	mov	r2, r3
 8003928:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800392c:	61fb      	str	r3, [r7, #28]
 800392e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003930:	69b9      	ldr	r1, [r7, #24]
 8003932:	69fa      	ldr	r2, [r7, #28]
 8003934:	e841 2300 	strex	r3, r2, [r1]
 8003938:	617b      	str	r3, [r7, #20]
   return(result);
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1e4      	bne.n	800390a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003940:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003944:	4619      	mov	r1, r3
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f852 	bl	80039f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800394c:	e03f      	b.n	80039ce <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800394e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00e      	beq.n	8003978 <HAL_UART_IRQHandler+0x560>
 800395a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800395e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d008      	beq.n	8003978 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800396e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003970:	6878      	ldr	r0, [r7, #4]
 8003972:	f001 f80c 	bl	800498e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003976:	e02d      	b.n	80039d4 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003978:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800397c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00e      	beq.n	80039a2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003984:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003994:	2b00      	cmp	r3, #0
 8003996:	d01c      	beq.n	80039d2 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	4798      	blx	r3
    }
    return;
 80039a0:	e017      	b.n	80039d2 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80039a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d012      	beq.n	80039d4 <HAL_UART_IRQHandler+0x5bc>
 80039ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d00c      	beq.n	80039d4 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 fe5d 	bl	800467a <UART_EndTransmit_IT>
    return;
 80039c0:	e008      	b.n	80039d4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80039c2:	bf00      	nop
 80039c4:	e006      	b.n	80039d4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80039c6:	bf00      	nop
 80039c8:	e004      	b.n	80039d4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80039ca:	bf00      	nop
 80039cc:	e002      	b.n	80039d4 <HAL_UART_IRQHandler+0x5bc>
      return;
 80039ce:	bf00      	nop
 80039d0:	e000      	b.n	80039d4 <HAL_UART_IRQHandler+0x5bc>
    return;
 80039d2:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80039d4:	37e8      	adds	r7, #232	; 0xe8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop

080039dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80039e4:	bf00      	nop
 80039e6:	370c      	adds	r7, #12
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr

080039f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	460b      	mov	r3, r1
 80039fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a08:	b5b0      	push	{r4, r5, r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689a      	ldr	r2, [r3, #8]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	691b      	ldr	r3, [r3, #16]
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	431a      	orrs	r2, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	4bad      	ldr	r3, [pc, #692]	; (8003ce8 <UART_SetConfig+0x2e0>)
 8003a34:	4013      	ands	r3, r2
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	6812      	ldr	r2, [r2, #0]
 8003a3a:	69f9      	ldr	r1, [r7, #28]
 8003a3c:	430b      	orrs	r3, r1
 8003a3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68da      	ldr	r2, [r3, #12]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	699b      	ldr	r3, [r3, #24]
 8003a5a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4aa2      	ldr	r2, [pc, #648]	; (8003cec <UART_SetConfig+0x2e4>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d004      	beq.n	8003a70 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a1b      	ldr	r3, [r3, #32]
 8003a6a:	69fa      	ldr	r2, [r7, #28]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	69fa      	ldr	r2, [r7, #28]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a99      	ldr	r2, [pc, #612]	; (8003cf0 <UART_SetConfig+0x2e8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d121      	bne.n	8003ad2 <UART_SetConfig+0xca>
 8003a8e:	4b99      	ldr	r3, [pc, #612]	; (8003cf4 <UART_SetConfig+0x2ec>)
 8003a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a94:	f003 0303 	and.w	r3, r3, #3
 8003a98:	2b03      	cmp	r3, #3
 8003a9a:	d817      	bhi.n	8003acc <UART_SetConfig+0xc4>
 8003a9c:	a201      	add	r2, pc, #4	; (adr r2, 8003aa4 <UART_SetConfig+0x9c>)
 8003a9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa2:	bf00      	nop
 8003aa4:	08003ab5 	.word	0x08003ab5
 8003aa8:	08003ac1 	.word	0x08003ac1
 8003aac:	08003abb 	.word	0x08003abb
 8003ab0:	08003ac7 	.word	0x08003ac7
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	76fb      	strb	r3, [r7, #27]
 8003ab8:	e0e7      	b.n	8003c8a <UART_SetConfig+0x282>
 8003aba:	2302      	movs	r3, #2
 8003abc:	76fb      	strb	r3, [r7, #27]
 8003abe:	e0e4      	b.n	8003c8a <UART_SetConfig+0x282>
 8003ac0:	2304      	movs	r3, #4
 8003ac2:	76fb      	strb	r3, [r7, #27]
 8003ac4:	e0e1      	b.n	8003c8a <UART_SetConfig+0x282>
 8003ac6:	2308      	movs	r3, #8
 8003ac8:	76fb      	strb	r3, [r7, #27]
 8003aca:	e0de      	b.n	8003c8a <UART_SetConfig+0x282>
 8003acc:	2310      	movs	r3, #16
 8003ace:	76fb      	strb	r3, [r7, #27]
 8003ad0:	e0db      	b.n	8003c8a <UART_SetConfig+0x282>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a88      	ldr	r2, [pc, #544]	; (8003cf8 <UART_SetConfig+0x2f0>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d132      	bne.n	8003b42 <UART_SetConfig+0x13a>
 8003adc:	4b85      	ldr	r3, [pc, #532]	; (8003cf4 <UART_SetConfig+0x2ec>)
 8003ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae2:	f003 030c 	and.w	r3, r3, #12
 8003ae6:	2b0c      	cmp	r3, #12
 8003ae8:	d828      	bhi.n	8003b3c <UART_SetConfig+0x134>
 8003aea:	a201      	add	r2, pc, #4	; (adr r2, 8003af0 <UART_SetConfig+0xe8>)
 8003aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af0:	08003b25 	.word	0x08003b25
 8003af4:	08003b3d 	.word	0x08003b3d
 8003af8:	08003b3d 	.word	0x08003b3d
 8003afc:	08003b3d 	.word	0x08003b3d
 8003b00:	08003b31 	.word	0x08003b31
 8003b04:	08003b3d 	.word	0x08003b3d
 8003b08:	08003b3d 	.word	0x08003b3d
 8003b0c:	08003b3d 	.word	0x08003b3d
 8003b10:	08003b2b 	.word	0x08003b2b
 8003b14:	08003b3d 	.word	0x08003b3d
 8003b18:	08003b3d 	.word	0x08003b3d
 8003b1c:	08003b3d 	.word	0x08003b3d
 8003b20:	08003b37 	.word	0x08003b37
 8003b24:	2300      	movs	r3, #0
 8003b26:	76fb      	strb	r3, [r7, #27]
 8003b28:	e0af      	b.n	8003c8a <UART_SetConfig+0x282>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	76fb      	strb	r3, [r7, #27]
 8003b2e:	e0ac      	b.n	8003c8a <UART_SetConfig+0x282>
 8003b30:	2304      	movs	r3, #4
 8003b32:	76fb      	strb	r3, [r7, #27]
 8003b34:	e0a9      	b.n	8003c8a <UART_SetConfig+0x282>
 8003b36:	2308      	movs	r3, #8
 8003b38:	76fb      	strb	r3, [r7, #27]
 8003b3a:	e0a6      	b.n	8003c8a <UART_SetConfig+0x282>
 8003b3c:	2310      	movs	r3, #16
 8003b3e:	76fb      	strb	r3, [r7, #27]
 8003b40:	e0a3      	b.n	8003c8a <UART_SetConfig+0x282>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a6d      	ldr	r2, [pc, #436]	; (8003cfc <UART_SetConfig+0x2f4>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d120      	bne.n	8003b8e <UART_SetConfig+0x186>
 8003b4c:	4b69      	ldr	r3, [pc, #420]	; (8003cf4 <UART_SetConfig+0x2ec>)
 8003b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b52:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003b56:	2b30      	cmp	r3, #48	; 0x30
 8003b58:	d013      	beq.n	8003b82 <UART_SetConfig+0x17a>
 8003b5a:	2b30      	cmp	r3, #48	; 0x30
 8003b5c:	d814      	bhi.n	8003b88 <UART_SetConfig+0x180>
 8003b5e:	2b20      	cmp	r3, #32
 8003b60:	d009      	beq.n	8003b76 <UART_SetConfig+0x16e>
 8003b62:	2b20      	cmp	r3, #32
 8003b64:	d810      	bhi.n	8003b88 <UART_SetConfig+0x180>
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d002      	beq.n	8003b70 <UART_SetConfig+0x168>
 8003b6a:	2b10      	cmp	r3, #16
 8003b6c:	d006      	beq.n	8003b7c <UART_SetConfig+0x174>
 8003b6e:	e00b      	b.n	8003b88 <UART_SetConfig+0x180>
 8003b70:	2300      	movs	r3, #0
 8003b72:	76fb      	strb	r3, [r7, #27]
 8003b74:	e089      	b.n	8003c8a <UART_SetConfig+0x282>
 8003b76:	2302      	movs	r3, #2
 8003b78:	76fb      	strb	r3, [r7, #27]
 8003b7a:	e086      	b.n	8003c8a <UART_SetConfig+0x282>
 8003b7c:	2304      	movs	r3, #4
 8003b7e:	76fb      	strb	r3, [r7, #27]
 8003b80:	e083      	b.n	8003c8a <UART_SetConfig+0x282>
 8003b82:	2308      	movs	r3, #8
 8003b84:	76fb      	strb	r3, [r7, #27]
 8003b86:	e080      	b.n	8003c8a <UART_SetConfig+0x282>
 8003b88:	2310      	movs	r3, #16
 8003b8a:	76fb      	strb	r3, [r7, #27]
 8003b8c:	e07d      	b.n	8003c8a <UART_SetConfig+0x282>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a5b      	ldr	r2, [pc, #364]	; (8003d00 <UART_SetConfig+0x2f8>)
 8003b94:	4293      	cmp	r3, r2
 8003b96:	d120      	bne.n	8003bda <UART_SetConfig+0x1d2>
 8003b98:	4b56      	ldr	r3, [pc, #344]	; (8003cf4 <UART_SetConfig+0x2ec>)
 8003b9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b9e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ba2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ba4:	d013      	beq.n	8003bce <UART_SetConfig+0x1c6>
 8003ba6:	2bc0      	cmp	r3, #192	; 0xc0
 8003ba8:	d814      	bhi.n	8003bd4 <UART_SetConfig+0x1cc>
 8003baa:	2b80      	cmp	r3, #128	; 0x80
 8003bac:	d009      	beq.n	8003bc2 <UART_SetConfig+0x1ba>
 8003bae:	2b80      	cmp	r3, #128	; 0x80
 8003bb0:	d810      	bhi.n	8003bd4 <UART_SetConfig+0x1cc>
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <UART_SetConfig+0x1b4>
 8003bb6:	2b40      	cmp	r3, #64	; 0x40
 8003bb8:	d006      	beq.n	8003bc8 <UART_SetConfig+0x1c0>
 8003bba:	e00b      	b.n	8003bd4 <UART_SetConfig+0x1cc>
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	76fb      	strb	r3, [r7, #27]
 8003bc0:	e063      	b.n	8003c8a <UART_SetConfig+0x282>
 8003bc2:	2302      	movs	r3, #2
 8003bc4:	76fb      	strb	r3, [r7, #27]
 8003bc6:	e060      	b.n	8003c8a <UART_SetConfig+0x282>
 8003bc8:	2304      	movs	r3, #4
 8003bca:	76fb      	strb	r3, [r7, #27]
 8003bcc:	e05d      	b.n	8003c8a <UART_SetConfig+0x282>
 8003bce:	2308      	movs	r3, #8
 8003bd0:	76fb      	strb	r3, [r7, #27]
 8003bd2:	e05a      	b.n	8003c8a <UART_SetConfig+0x282>
 8003bd4:	2310      	movs	r3, #16
 8003bd6:	76fb      	strb	r3, [r7, #27]
 8003bd8:	e057      	b.n	8003c8a <UART_SetConfig+0x282>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a49      	ldr	r2, [pc, #292]	; (8003d04 <UART_SetConfig+0x2fc>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d125      	bne.n	8003c30 <UART_SetConfig+0x228>
 8003be4:	4b43      	ldr	r3, [pc, #268]	; (8003cf4 <UART_SetConfig+0x2ec>)
 8003be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bf2:	d017      	beq.n	8003c24 <UART_SetConfig+0x21c>
 8003bf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003bf8:	d817      	bhi.n	8003c2a <UART_SetConfig+0x222>
 8003bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bfe:	d00b      	beq.n	8003c18 <UART_SetConfig+0x210>
 8003c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c04:	d811      	bhi.n	8003c2a <UART_SetConfig+0x222>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <UART_SetConfig+0x20a>
 8003c0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c0e:	d006      	beq.n	8003c1e <UART_SetConfig+0x216>
 8003c10:	e00b      	b.n	8003c2a <UART_SetConfig+0x222>
 8003c12:	2300      	movs	r3, #0
 8003c14:	76fb      	strb	r3, [r7, #27]
 8003c16:	e038      	b.n	8003c8a <UART_SetConfig+0x282>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	76fb      	strb	r3, [r7, #27]
 8003c1c:	e035      	b.n	8003c8a <UART_SetConfig+0x282>
 8003c1e:	2304      	movs	r3, #4
 8003c20:	76fb      	strb	r3, [r7, #27]
 8003c22:	e032      	b.n	8003c8a <UART_SetConfig+0x282>
 8003c24:	2308      	movs	r3, #8
 8003c26:	76fb      	strb	r3, [r7, #27]
 8003c28:	e02f      	b.n	8003c8a <UART_SetConfig+0x282>
 8003c2a:	2310      	movs	r3, #16
 8003c2c:	76fb      	strb	r3, [r7, #27]
 8003c2e:	e02c      	b.n	8003c8a <UART_SetConfig+0x282>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a2d      	ldr	r2, [pc, #180]	; (8003cec <UART_SetConfig+0x2e4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d125      	bne.n	8003c86 <UART_SetConfig+0x27e>
 8003c3a:	4b2e      	ldr	r3, [pc, #184]	; (8003cf4 <UART_SetConfig+0x2ec>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c48:	d017      	beq.n	8003c7a <UART_SetConfig+0x272>
 8003c4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c4e:	d817      	bhi.n	8003c80 <UART_SetConfig+0x278>
 8003c50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c54:	d00b      	beq.n	8003c6e <UART_SetConfig+0x266>
 8003c56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c5a:	d811      	bhi.n	8003c80 <UART_SetConfig+0x278>
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <UART_SetConfig+0x260>
 8003c60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c64:	d006      	beq.n	8003c74 <UART_SetConfig+0x26c>
 8003c66:	e00b      	b.n	8003c80 <UART_SetConfig+0x278>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	76fb      	strb	r3, [r7, #27]
 8003c6c:	e00d      	b.n	8003c8a <UART_SetConfig+0x282>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	76fb      	strb	r3, [r7, #27]
 8003c72:	e00a      	b.n	8003c8a <UART_SetConfig+0x282>
 8003c74:	2304      	movs	r3, #4
 8003c76:	76fb      	strb	r3, [r7, #27]
 8003c78:	e007      	b.n	8003c8a <UART_SetConfig+0x282>
 8003c7a:	2308      	movs	r3, #8
 8003c7c:	76fb      	strb	r3, [r7, #27]
 8003c7e:	e004      	b.n	8003c8a <UART_SetConfig+0x282>
 8003c80:	2310      	movs	r3, #16
 8003c82:	76fb      	strb	r3, [r7, #27]
 8003c84:	e001      	b.n	8003c8a <UART_SetConfig+0x282>
 8003c86:	2310      	movs	r3, #16
 8003c88:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a17      	ldr	r2, [pc, #92]	; (8003cec <UART_SetConfig+0x2e4>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	f040 8087 	bne.w	8003da4 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c96:	7efb      	ldrb	r3, [r7, #27]
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d837      	bhi.n	8003d0c <UART_SetConfig+0x304>
 8003c9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <UART_SetConfig+0x29c>)
 8003c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca2:	bf00      	nop
 8003ca4:	08003cc9 	.word	0x08003cc9
 8003ca8:	08003d0d 	.word	0x08003d0d
 8003cac:	08003cd1 	.word	0x08003cd1
 8003cb0:	08003d0d 	.word	0x08003d0d
 8003cb4:	08003cd7 	.word	0x08003cd7
 8003cb8:	08003d0d 	.word	0x08003d0d
 8003cbc:	08003d0d 	.word	0x08003d0d
 8003cc0:	08003d0d 	.word	0x08003d0d
 8003cc4:	08003cdf 	.word	0x08003cdf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cc8:	f7fe f9d6 	bl	8002078 <HAL_RCC_GetPCLK1Freq>
 8003ccc:	6178      	str	r0, [r7, #20]
        break;
 8003cce:	e022      	b.n	8003d16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cd0:	4b0d      	ldr	r3, [pc, #52]	; (8003d08 <UART_SetConfig+0x300>)
 8003cd2:	617b      	str	r3, [r7, #20]
        break;
 8003cd4:	e01f      	b.n	8003d16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cd6:	f7fe f937 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8003cda:	6178      	str	r0, [r7, #20]
        break;
 8003cdc:	e01b      	b.n	8003d16 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ce2:	617b      	str	r3, [r7, #20]
        break;
 8003ce4:	e017      	b.n	8003d16 <UART_SetConfig+0x30e>
 8003ce6:	bf00      	nop
 8003ce8:	efff69f3 	.word	0xefff69f3
 8003cec:	40008000 	.word	0x40008000
 8003cf0:	40013800 	.word	0x40013800
 8003cf4:	40021000 	.word	0x40021000
 8003cf8:	40004400 	.word	0x40004400
 8003cfc:	40004800 	.word	0x40004800
 8003d00:	40004c00 	.word	0x40004c00
 8003d04:	40005000 	.word	0x40005000
 8003d08:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003d0c:	2300      	movs	r3, #0
 8003d0e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	76bb      	strb	r3, [r7, #26]
        break;
 8003d14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d16:	697b      	ldr	r3, [r7, #20]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80f1 	beq.w	8003f00 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	4413      	add	r3, r2
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d305      	bcc.n	8003d3a <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d902      	bls.n	8003d40 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	76bb      	strb	r3, [r7, #26]
 8003d3e:	e0df      	b.n	8003f00 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f04f 0100 	mov.w	r1, #0
 8003d48:	f04f 0200 	mov.w	r2, #0
 8003d4c:	f04f 0300 	mov.w	r3, #0
 8003d50:	020b      	lsls	r3, r1, #8
 8003d52:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003d56:	0202      	lsls	r2, r0, #8
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	6849      	ldr	r1, [r1, #4]
 8003d5c:	0849      	lsrs	r1, r1, #1
 8003d5e:	4608      	mov	r0, r1
 8003d60:	f04f 0100 	mov.w	r1, #0
 8003d64:	1814      	adds	r4, r2, r0
 8003d66:	eb43 0501 	adc.w	r5, r3, r1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f04f 0300 	mov.w	r3, #0
 8003d74:	4620      	mov	r0, r4
 8003d76:	4629      	mov	r1, r5
 8003d78:	f7fc fa26 	bl	80001c8 <__aeabi_uldivmod>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4613      	mov	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d8a:	d308      	bcc.n	8003d9e <UART_SetConfig+0x396>
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d92:	d204      	bcs.n	8003d9e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	693a      	ldr	r2, [r7, #16]
 8003d9a:	60da      	str	r2, [r3, #12]
 8003d9c:	e0b0      	b.n	8003f00 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	76bb      	strb	r3, [r7, #26]
 8003da2:	e0ad      	b.n	8003f00 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dac:	d15b      	bne.n	8003e66 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8003dae:	7efb      	ldrb	r3, [r7, #27]
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d828      	bhi.n	8003e06 <UART_SetConfig+0x3fe>
 8003db4:	a201      	add	r2, pc, #4	; (adr r2, 8003dbc <UART_SetConfig+0x3b4>)
 8003db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dba:	bf00      	nop
 8003dbc:	08003de1 	.word	0x08003de1
 8003dc0:	08003de9 	.word	0x08003de9
 8003dc4:	08003df1 	.word	0x08003df1
 8003dc8:	08003e07 	.word	0x08003e07
 8003dcc:	08003df7 	.word	0x08003df7
 8003dd0:	08003e07 	.word	0x08003e07
 8003dd4:	08003e07 	.word	0x08003e07
 8003dd8:	08003e07 	.word	0x08003e07
 8003ddc:	08003dff 	.word	0x08003dff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de0:	f7fe f94a 	bl	8002078 <HAL_RCC_GetPCLK1Freq>
 8003de4:	6178      	str	r0, [r7, #20]
        break;
 8003de6:	e013      	b.n	8003e10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003de8:	f7fe f95c 	bl	80020a4 <HAL_RCC_GetPCLK2Freq>
 8003dec:	6178      	str	r0, [r7, #20]
        break;
 8003dee:	e00f      	b.n	8003e10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003df0:	4b49      	ldr	r3, [pc, #292]	; (8003f18 <UART_SetConfig+0x510>)
 8003df2:	617b      	str	r3, [r7, #20]
        break;
 8003df4:	e00c      	b.n	8003e10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003df6:	f7fe f8a7 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8003dfa:	6178      	str	r0, [r7, #20]
        break;
 8003dfc:	e008      	b.n	8003e10 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e02:	617b      	str	r3, [r7, #20]
        break;
 8003e04:	e004      	b.n	8003e10 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	76bb      	strb	r3, [r7, #26]
        break;
 8003e0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d074      	beq.n	8003f00 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	005a      	lsls	r2, r3, #1
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	085b      	lsrs	r3, r3, #1
 8003e20:	441a      	add	r2, r3
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e2a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	2b0f      	cmp	r3, #15
 8003e30:	d916      	bls.n	8003e60 <UART_SetConfig+0x458>
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e38:	d212      	bcs.n	8003e60 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	b29b      	uxth	r3, r3
 8003e3e:	f023 030f 	bic.w	r3, r3, #15
 8003e42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	085b      	lsrs	r3, r3, #1
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	b29a      	uxth	r2, r3
 8003e50:	89fb      	ldrh	r3, [r7, #14]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	89fa      	ldrh	r2, [r7, #14]
 8003e5c:	60da      	str	r2, [r3, #12]
 8003e5e:	e04f      	b.n	8003f00 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	76bb      	strb	r3, [r7, #26]
 8003e64:	e04c      	b.n	8003f00 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e66:	7efb      	ldrb	r3, [r7, #27]
 8003e68:	2b08      	cmp	r3, #8
 8003e6a:	d828      	bhi.n	8003ebe <UART_SetConfig+0x4b6>
 8003e6c:	a201      	add	r2, pc, #4	; (adr r2, 8003e74 <UART_SetConfig+0x46c>)
 8003e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e72:	bf00      	nop
 8003e74:	08003e99 	.word	0x08003e99
 8003e78:	08003ea1 	.word	0x08003ea1
 8003e7c:	08003ea9 	.word	0x08003ea9
 8003e80:	08003ebf 	.word	0x08003ebf
 8003e84:	08003eaf 	.word	0x08003eaf
 8003e88:	08003ebf 	.word	0x08003ebf
 8003e8c:	08003ebf 	.word	0x08003ebf
 8003e90:	08003ebf 	.word	0x08003ebf
 8003e94:	08003eb7 	.word	0x08003eb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e98:	f7fe f8ee 	bl	8002078 <HAL_RCC_GetPCLK1Freq>
 8003e9c:	6178      	str	r0, [r7, #20]
        break;
 8003e9e:	e013      	b.n	8003ec8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ea0:	f7fe f900 	bl	80020a4 <HAL_RCC_GetPCLK2Freq>
 8003ea4:	6178      	str	r0, [r7, #20]
        break;
 8003ea6:	e00f      	b.n	8003ec8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea8:	4b1b      	ldr	r3, [pc, #108]	; (8003f18 <UART_SetConfig+0x510>)
 8003eaa:	617b      	str	r3, [r7, #20]
        break;
 8003eac:	e00c      	b.n	8003ec8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eae:	f7fe f84b 	bl	8001f48 <HAL_RCC_GetSysClockFreq>
 8003eb2:	6178      	str	r0, [r7, #20]
        break;
 8003eb4:	e008      	b.n	8003ec8 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eba:	617b      	str	r3, [r7, #20]
        break;
 8003ebc:	e004      	b.n	8003ec8 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	76bb      	strb	r3, [r7, #26]
        break;
 8003ec6:	bf00      	nop
    }

    if (pclk != 0U)
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d018      	beq.n	8003f00 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	085a      	lsrs	r2, r3, #1
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	441a      	add	r2, r3
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ee0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	2b0f      	cmp	r3, #15
 8003ee6:	d909      	bls.n	8003efc <UART_SetConfig+0x4f4>
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eee:	d205      	bcs.n	8003efc <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60da      	str	r2, [r3, #12]
 8003efa:	e001      	b.n	8003f00 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f0c:	7ebb      	ldrb	r3, [r7, #26]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3720      	adds	r7, #32
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bdb0      	pop	{r4, r5, r7, pc}
 8003f16:	bf00      	nop
 8003f18:	00f42400 	.word	0x00f42400

08003f1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d00a      	beq.n	8003f46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	430a      	orrs	r2, r1
 8003f66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	f003 0304 	and.w	r3, r3, #4
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00a      	beq.n	8003f8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	f003 0310 	and.w	r3, r3, #16
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d00a      	beq.n	8003fce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	f003 0320 	and.w	r3, r3, #32
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d00a      	beq.n	8003ff0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	430a      	orrs	r2, r1
 8003fee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d01a      	beq.n	8004032 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	430a      	orrs	r2, r1
 8004010:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800401a:	d10a      	bne.n	8004032 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	605a      	str	r2, [r3, #4]
  }
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af02      	add	r7, sp, #8
 8004066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2200      	movs	r2, #0
 800406c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004070:	f7fc febc 	bl	8000dec <HAL_GetTick>
 8004074:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f003 0308 	and.w	r3, r3, #8
 8004080:	2b08      	cmp	r3, #8
 8004082:	d10e      	bne.n	80040a2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004084:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f82d 	bl	80040f2 <UART_WaitOnFlagUntilTimeout>
 8004098:	4603      	mov	r3, r0
 800409a:	2b00      	cmp	r3, #0
 800409c:	d001      	beq.n	80040a2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e023      	b.n	80040ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0304 	and.w	r3, r3, #4
 80040ac:	2b04      	cmp	r3, #4
 80040ae:	d10e      	bne.n	80040ce <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040b4:	9300      	str	r3, [sp, #0]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 f817 	bl	80040f2 <UART_WaitOnFlagUntilTimeout>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e00d      	b.n	80040ea <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2220      	movs	r2, #32
 80040d2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3710      	adds	r7, #16
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b09c      	sub	sp, #112	; 0x70
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	603b      	str	r3, [r7, #0]
 80040fe:	4613      	mov	r3, r2
 8004100:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004102:	e0a5      	b.n	8004250 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004104:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004106:	f1b3 3fff 	cmp.w	r3, #4294967295
 800410a:	f000 80a1 	beq.w	8004250 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410e:	f7fc fe6d 	bl	8000dec <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800411a:	429a      	cmp	r2, r3
 800411c:	d302      	bcc.n	8004124 <UART_WaitOnFlagUntilTimeout+0x32>
 800411e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004120:	2b00      	cmp	r3, #0
 8004122:	d13e      	bne.n	80041a2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800412c:	e853 3f00 	ldrex	r3, [r3]
 8004130:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004132:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004134:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004138:	667b      	str	r3, [r7, #100]	; 0x64
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	461a      	mov	r2, r3
 8004140:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004142:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004144:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004146:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004148:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800414a:	e841 2300 	strex	r3, r2, [r1]
 800414e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004150:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004152:	2b00      	cmp	r3, #0
 8004154:	d1e6      	bne.n	8004124 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3308      	adds	r3, #8
 800415c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004168:	f023 0301 	bic.w	r3, r3, #1
 800416c:	663b      	str	r3, [r7, #96]	; 0x60
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	3308      	adds	r3, #8
 8004174:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004176:	64ba      	str	r2, [r7, #72]	; 0x48
 8004178:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800417c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e5      	bne.n	8004156 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2220      	movs	r2, #32
 800418e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e067      	b.n	8004272 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0304 	and.w	r3, r3, #4
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d04f      	beq.n	8004250 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041be:	d147      	bne.n	8004250 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041c8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041d2:	e853 3f00 	ldrex	r3, [r3]
 80041d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041de:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	461a      	mov	r2, r3
 80041e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80041e8:	637b      	str	r3, [r7, #52]	; 0x34
 80041ea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041f0:	e841 2300 	strex	r3, r2, [r1]
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d1e6      	bne.n	80041ca <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3308      	adds	r3, #8
 8004202:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	e853 3f00 	ldrex	r3, [r3]
 800420a:	613b      	str	r3, [r7, #16]
   return(result);
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	f023 0301 	bic.w	r3, r3, #1
 8004212:	66bb      	str	r3, [r7, #104]	; 0x68
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	3308      	adds	r3, #8
 800421a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800421c:	623a      	str	r2, [r7, #32]
 800421e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004220:	69f9      	ldr	r1, [r7, #28]
 8004222:	6a3a      	ldr	r2, [r7, #32]
 8004224:	e841 2300 	strex	r3, r2, [r1]
 8004228:	61bb      	str	r3, [r7, #24]
   return(result);
 800422a:	69bb      	ldr	r3, [r7, #24]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1e5      	bne.n	80041fc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2220      	movs	r2, #32
 8004234:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2220      	movs	r2, #32
 800423a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	2220      	movs	r2, #32
 8004240:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800424c:	2303      	movs	r3, #3
 800424e:	e010      	b.n	8004272 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	69da      	ldr	r2, [r3, #28]
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	4013      	ands	r3, r2
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	429a      	cmp	r2, r3
 800425e:	bf0c      	ite	eq
 8004260:	2301      	moveq	r3, #1
 8004262:	2300      	movne	r3, #0
 8004264:	b2db      	uxtb	r3, r3
 8004266:	461a      	mov	r2, r3
 8004268:	79fb      	ldrb	r3, [r7, #7]
 800426a:	429a      	cmp	r2, r3
 800426c:	f43f af4a 	beq.w	8004104 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3770      	adds	r7, #112	; 0x70
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
	...

0800427c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800427c:	b480      	push	{r7}
 800427e:	b097      	sub	sp, #92	; 0x5c
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	4613      	mov	r3, r2
 8004288:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	88fa      	ldrh	r2, [r7, #6]
 8004294:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	88fa      	ldrh	r2, [r7, #6]
 800429c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ae:	d10e      	bne.n	80042ce <UART_Start_Receive_IT+0x52>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d105      	bne.n	80042c4 <UART_Start_Receive_IT+0x48>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80042be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042c2:	e02d      	b.n	8004320 <UART_Start_Receive_IT+0xa4>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	22ff      	movs	r2, #255	; 0xff
 80042c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042cc:	e028      	b.n	8004320 <UART_Start_Receive_IT+0xa4>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10d      	bne.n	80042f2 <UART_Start_Receive_IT+0x76>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	691b      	ldr	r3, [r3, #16]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d104      	bne.n	80042e8 <UART_Start_Receive_IT+0x6c>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	22ff      	movs	r2, #255	; 0xff
 80042e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042e6:	e01b      	b.n	8004320 <UART_Start_Receive_IT+0xa4>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	227f      	movs	r2, #127	; 0x7f
 80042ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042f0:	e016      	b.n	8004320 <UART_Start_Receive_IT+0xa4>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042fa:	d10d      	bne.n	8004318 <UART_Start_Receive_IT+0x9c>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d104      	bne.n	800430e <UART_Start_Receive_IT+0x92>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	227f      	movs	r2, #127	; 0x7f
 8004308:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800430c:	e008      	b.n	8004320 <UART_Start_Receive_IT+0xa4>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	223f      	movs	r2, #63	; 0x3f
 8004312:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004316:	e003      	b.n	8004320 <UART_Start_Receive_IT+0xa4>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2222      	movs	r2, #34	; 0x22
 800432c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3308      	adds	r3, #8
 8004334:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004338:	e853 3f00 	ldrex	r3, [r3]
 800433c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800433e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004340:	f043 0301 	orr.w	r3, r3, #1
 8004344:	657b      	str	r3, [r7, #84]	; 0x54
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	3308      	adds	r3, #8
 800434c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800434e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004350:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004354:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004356:	e841 2300 	strex	r3, r2, [r1]
 800435a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800435c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1e5      	bne.n	800432e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436a:	d107      	bne.n	800437c <UART_Start_Receive_IT+0x100>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d103      	bne.n	800437c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4a24      	ldr	r2, [pc, #144]	; (8004408 <UART_Start_Receive_IT+0x18c>)
 8004378:	665a      	str	r2, [r3, #100]	; 0x64
 800437a:	e002      	b.n	8004382 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	4a23      	ldr	r2, [pc, #140]	; (800440c <UART_Start_Receive_IT+0x190>)
 8004380:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d019      	beq.n	80043c6 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439a:	e853 3f00 	ldrex	r3, [r3]
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80043a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	461a      	mov	r2, r3
 80043ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043b0:	637b      	str	r3, [r7, #52]	; 0x34
 80043b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043b8:	e841 2300 	strex	r3, r2, [r1]
 80043bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e6      	bne.n	8004392 <UART_Start_Receive_IT+0x116>
 80043c4:	e018      	b.n	80043f8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	e853 3f00 	ldrex	r3, [r3]
 80043d2:	613b      	str	r3, [r7, #16]
   return(result);
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f043 0320 	orr.w	r3, r3, #32
 80043da:	653b      	str	r3, [r7, #80]	; 0x50
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	461a      	mov	r2, r3
 80043e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043e4:	623b      	str	r3, [r7, #32]
 80043e6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e8:	69f9      	ldr	r1, [r7, #28]
 80043ea:	6a3a      	ldr	r2, [r7, #32]
 80043ec:	e841 2300 	strex	r3, r2, [r1]
 80043f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d1e6      	bne.n	80043c6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	375c      	adds	r7, #92	; 0x5c
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop
 8004408:	0800482f 	.word	0x0800482f
 800440c:	080046cf 	.word	0x080046cf

08004410 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004410:	b480      	push	{r7}
 8004412:	b095      	sub	sp, #84	; 0x54
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004420:	e853 3f00 	ldrex	r3, [r3]
 8004424:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004428:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800442c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	461a      	mov	r2, r3
 8004434:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004436:	643b      	str	r3, [r7, #64]	; 0x40
 8004438:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800443c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800443e:	e841 2300 	strex	r3, r2, [r1]
 8004442:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004446:	2b00      	cmp	r3, #0
 8004448:	d1e6      	bne.n	8004418 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3308      	adds	r3, #8
 8004450:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	e853 3f00 	ldrex	r3, [r3]
 8004458:	61fb      	str	r3, [r7, #28]
   return(result);
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	f023 0301 	bic.w	r3, r3, #1
 8004460:	64bb      	str	r3, [r7, #72]	; 0x48
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	3308      	adds	r3, #8
 8004468:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800446a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800446c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004470:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004472:	e841 2300 	strex	r3, r2, [r1]
 8004476:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447a:	2b00      	cmp	r3, #0
 800447c:	d1e5      	bne.n	800444a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004482:	2b01      	cmp	r3, #1
 8004484:	d118      	bne.n	80044b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	e853 3f00 	ldrex	r3, [r3]
 8004492:	60bb      	str	r3, [r7, #8]
   return(result);
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	f023 0310 	bic.w	r3, r3, #16
 800449a:	647b      	str	r3, [r7, #68]	; 0x44
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	461a      	mov	r2, r3
 80044a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044a4:	61bb      	str	r3, [r7, #24]
 80044a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	6979      	ldr	r1, [r7, #20]
 80044aa:	69ba      	ldr	r2, [r7, #24]
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	613b      	str	r3, [r7, #16]
   return(result);
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e6      	bne.n	8004486 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80044ca:	bf00      	nop
 80044cc:	3754      	adds	r7, #84	; 0x54
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr

080044d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b084      	sub	sp, #16
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f7ff fa71 	bl	80039dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044fa:	bf00      	nop
 80044fc:	3710      	adds	r7, #16
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004502:	b480      	push	{r7}
 8004504:	b08f      	sub	sp, #60	; 0x3c
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800450e:	2b21      	cmp	r3, #33	; 0x21
 8004510:	d14d      	bne.n	80045ae <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d132      	bne.n	8004584 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004524:	6a3b      	ldr	r3, [r7, #32]
 8004526:	e853 3f00 	ldrex	r3, [r3]
 800452a:	61fb      	str	r3, [r7, #28]
   return(result);
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004532:	637b      	str	r3, [r7, #52]	; 0x34
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	461a      	mov	r2, r3
 800453a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800453c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800453e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004540:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004544:	e841 2300 	strex	r3, r2, [r1]
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800454a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1e6      	bne.n	800451e <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	e853 3f00 	ldrex	r3, [r3]
 800455c:	60bb      	str	r3, [r7, #8]
   return(result);
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004564:	633b      	str	r3, [r7, #48]	; 0x30
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456e:	61bb      	str	r3, [r7, #24]
 8004570:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004572:	6979      	ldr	r1, [r7, #20]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	e841 2300 	strex	r3, r2, [r1]
 800457a:	613b      	str	r3, [r7, #16]
   return(result);
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1e6      	bne.n	8004550 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004582:	e014      	b.n	80045ae <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004588:	781a      	ldrb	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	b292      	uxth	r2, r2
 8004590:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80045ae:	bf00      	nop
 80045b0:	373c      	adds	r7, #60	; 0x3c
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b091      	sub	sp, #68	; 0x44
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045c6:	2b21      	cmp	r3, #33	; 0x21
 80045c8:	d151      	bne.n	800466e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045d0:	b29b      	uxth	r3, r3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d132      	bne.n	800463c <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	e853 3f00 	ldrex	r3, [r3]
 80045e2:	623b      	str	r3, [r7, #32]
   return(result);
 80045e4:	6a3b      	ldr	r3, [r7, #32]
 80045e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f4:	633b      	str	r3, [r7, #48]	; 0x30
 80045f6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045fc:	e841 2300 	strex	r3, r2, [r1]
 8004600:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1e6      	bne.n	80045d6 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	e853 3f00 	ldrex	r3, [r3]
 8004614:	60fb      	str	r3, [r7, #12]
   return(result);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800461c:	637b      	str	r3, [r7, #52]	; 0x34
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	461a      	mov	r2, r3
 8004624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004626:	61fb      	str	r3, [r7, #28]
 8004628:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800462a:	69b9      	ldr	r1, [r7, #24]
 800462c:	69fa      	ldr	r2, [r7, #28]
 800462e:	e841 2300 	strex	r3, r2, [r1]
 8004632:	617b      	str	r3, [r7, #20]
   return(result);
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1e6      	bne.n	8004608 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800463a:	e018      	b.n	800466e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004640:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004642:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004644:	881a      	ldrh	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800464e:	b292      	uxth	r2, r2
 8004650:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004656:	1c9a      	adds	r2, r3, #2
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004662:	b29b      	uxth	r3, r3
 8004664:	3b01      	subs	r3, #1
 8004666:	b29a      	uxth	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800466e:	bf00      	nop
 8004670:	3744      	adds	r7, #68	; 0x44
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800467a:	b580      	push	{r7, lr}
 800467c:	b088      	sub	sp, #32
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	e853 3f00 	ldrex	r3, [r3]
 800468e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004696:	61fb      	str	r3, [r7, #28]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	461a      	mov	r2, r3
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	61bb      	str	r3, [r7, #24]
 80046a2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046a4:	6979      	ldr	r1, [r7, #20]
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	e841 2300 	strex	r3, r2, [r1]
 80046ac:	613b      	str	r3, [r7, #16]
   return(result);
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d1e6      	bne.n	8004682 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2220      	movs	r2, #32
 80046b8:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2200      	movs	r2, #0
 80046be:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7fc f90f 	bl	80008e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046c6:	bf00      	nop
 80046c8:	3720      	adds	r7, #32
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b096      	sub	sp, #88	; 0x58
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046dc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046e4:	2b22      	cmp	r3, #34	; 0x22
 80046e6:	f040 8094 	bne.w	8004812 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80046f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80046f4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80046f8:	b2d9      	uxtb	r1, r3
 80046fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80046fe:	b2da      	uxtb	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004704:	400a      	ands	r2, r1
 8004706:	b2d2      	uxtb	r2, r2
 8004708:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470e:	1c5a      	adds	r2, r3, #1
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800471a:	b29b      	uxth	r3, r3
 800471c:	3b01      	subs	r3, #1
 800471e:	b29a      	uxth	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800472c:	b29b      	uxth	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d179      	bne.n	8004826 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004738:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800473a:	e853 3f00 	ldrex	r3, [r3]
 800473e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004742:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004746:	653b      	str	r3, [r7, #80]	; 0x50
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	461a      	mov	r2, r3
 800474e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004750:	647b      	str	r3, [r7, #68]	; 0x44
 8004752:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004754:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004758:	e841 2300 	strex	r3, r2, [r1]
 800475c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800475e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004760:	2b00      	cmp	r3, #0
 8004762:	d1e6      	bne.n	8004732 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	3308      	adds	r3, #8
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	e853 3f00 	ldrex	r3, [r3]
 8004772:	623b      	str	r3, [r7, #32]
   return(result);
 8004774:	6a3b      	ldr	r3, [r7, #32]
 8004776:	f023 0301 	bic.w	r3, r3, #1
 800477a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3308      	adds	r3, #8
 8004782:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004784:	633a      	str	r2, [r7, #48]	; 0x30
 8004786:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800478a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e5      	bne.n	8004764 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d12e      	bne.n	800480a <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2200      	movs	r2, #0
 80047b0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	e853 3f00 	ldrex	r3, [r3]
 80047be:	60fb      	str	r3, [r7, #12]
   return(result);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f023 0310 	bic.w	r3, r3, #16
 80047c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047d0:	61fb      	str	r3, [r7, #28]
 80047d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047d4:	69b9      	ldr	r1, [r7, #24]
 80047d6:	69fa      	ldr	r2, [r7, #28]
 80047d8:	e841 2300 	strex	r3, r2, [r1]
 80047dc:	617b      	str	r3, [r7, #20]
   return(result);
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1e6      	bne.n	80047b2 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f003 0310 	and.w	r3, r3, #16
 80047ee:	2b10      	cmp	r3, #16
 80047f0:	d103      	bne.n	80047fa <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2210      	movs	r2, #16
 80047f8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004800:	4619      	mov	r1, r3
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f7ff f8f4 	bl	80039f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004808:	e00d      	b.n	8004826 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f7fc f87a 	bl	8000904 <HAL_UART_RxCpltCallback>
}
 8004810:	e009      	b.n	8004826 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	8b1b      	ldrh	r3, [r3, #24]
 8004818:	b29a      	uxth	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f042 0208 	orr.w	r2, r2, #8
 8004822:	b292      	uxth	r2, r2
 8004824:	831a      	strh	r2, [r3, #24]
}
 8004826:	bf00      	nop
 8004828:	3758      	adds	r7, #88	; 0x58
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b096      	sub	sp, #88	; 0x58
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800483c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004844:	2b22      	cmp	r3, #34	; 0x22
 8004846:	f040 8094 	bne.w	8004972 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004850:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004858:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800485a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800485e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004862:	4013      	ands	r3, r2
 8004864:	b29a      	uxth	r2, r3
 8004866:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004868:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800486e:	1c9a      	adds	r2, r3, #2
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800487a:	b29b      	uxth	r3, r3
 800487c:	3b01      	subs	r3, #1
 800487e:	b29a      	uxth	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800488c:	b29b      	uxth	r3, r3
 800488e:	2b00      	cmp	r3, #0
 8004890:	d179      	bne.n	8004986 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004898:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800489a:	e853 3f00 	ldrex	r3, [r3]
 800489e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048a2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	461a      	mov	r2, r3
 80048ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048b0:	643b      	str	r3, [r7, #64]	; 0x40
 80048b2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048b6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048b8:	e841 2300 	strex	r3, r2, [r1]
 80048bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1e6      	bne.n	8004892 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3308      	adds	r3, #8
 80048ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	e853 3f00 	ldrex	r3, [r3]
 80048d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80048d4:	69fb      	ldr	r3, [r7, #28]
 80048d6:	f023 0301 	bic.w	r3, r3, #1
 80048da:	64bb      	str	r3, [r7, #72]	; 0x48
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	3308      	adds	r3, #8
 80048e2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80048e4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80048e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80048ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048ec:	e841 2300 	strex	r3, r2, [r1]
 80048f0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d1e5      	bne.n	80048c4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004908:	2b01      	cmp	r3, #1
 800490a:	d12e      	bne.n	800496a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	e853 3f00 	ldrex	r3, [r3]
 800491e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	f023 0310 	bic.w	r3, r3, #16
 8004926:	647b      	str	r3, [r7, #68]	; 0x44
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	461a      	mov	r2, r3
 800492e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	6979      	ldr	r1, [r7, #20]
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	613b      	str	r3, [r7, #16]
   return(result);
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e6      	bne.n	8004912 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	69db      	ldr	r3, [r3, #28]
 800494a:	f003 0310 	and.w	r3, r3, #16
 800494e:	2b10      	cmp	r3, #16
 8004950:	d103      	bne.n	800495a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	2210      	movs	r2, #16
 8004958:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004960:	4619      	mov	r1, r3
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff f844 	bl	80039f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004968:	e00d      	b.n	8004986 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fb ffca 	bl	8000904 <HAL_UART_RxCpltCallback>
}
 8004970:	e009      	b.n	8004986 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	8b1b      	ldrh	r3, [r3, #24]
 8004978:	b29a      	uxth	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f042 0208 	orr.w	r2, r2, #8
 8004982:	b292      	uxth	r2, r2
 8004984:	831a      	strh	r2, [r3, #24]
}
 8004986:	bf00      	nop
 8004988:	3758      	adds	r7, #88	; 0x58
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004996:	bf00      	nop
 8004998:	370c      	adds	r7, #12
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
	...

080049a4 <__libc_init_array>:
 80049a4:	b570      	push	{r4, r5, r6, lr}
 80049a6:	4d0d      	ldr	r5, [pc, #52]	; (80049dc <__libc_init_array+0x38>)
 80049a8:	4c0d      	ldr	r4, [pc, #52]	; (80049e0 <__libc_init_array+0x3c>)
 80049aa:	1b64      	subs	r4, r4, r5
 80049ac:	10a4      	asrs	r4, r4, #2
 80049ae:	2600      	movs	r6, #0
 80049b0:	42a6      	cmp	r6, r4
 80049b2:	d109      	bne.n	80049c8 <__libc_init_array+0x24>
 80049b4:	4d0b      	ldr	r5, [pc, #44]	; (80049e4 <__libc_init_array+0x40>)
 80049b6:	4c0c      	ldr	r4, [pc, #48]	; (80049e8 <__libc_init_array+0x44>)
 80049b8:	f000 f820 	bl	80049fc <_init>
 80049bc:	1b64      	subs	r4, r4, r5
 80049be:	10a4      	asrs	r4, r4, #2
 80049c0:	2600      	movs	r6, #0
 80049c2:	42a6      	cmp	r6, r4
 80049c4:	d105      	bne.n	80049d2 <__libc_init_array+0x2e>
 80049c6:	bd70      	pop	{r4, r5, r6, pc}
 80049c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80049cc:	4798      	blx	r3
 80049ce:	3601      	adds	r6, #1
 80049d0:	e7ee      	b.n	80049b0 <__libc_init_array+0xc>
 80049d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d6:	4798      	blx	r3
 80049d8:	3601      	adds	r6, #1
 80049da:	e7f2      	b.n	80049c2 <__libc_init_array+0x1e>
 80049dc:	08004a84 	.word	0x08004a84
 80049e0:	08004a84 	.word	0x08004a84
 80049e4:	08004a84 	.word	0x08004a84
 80049e8:	08004a88 	.word	0x08004a88

080049ec <memset>:
 80049ec:	4402      	add	r2, r0
 80049ee:	4603      	mov	r3, r0
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d100      	bne.n	80049f6 <memset+0xa>
 80049f4:	4770      	bx	lr
 80049f6:	f803 1b01 	strb.w	r1, [r3], #1
 80049fa:	e7f9      	b.n	80049f0 <memset+0x4>

080049fc <_init>:
 80049fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049fe:	bf00      	nop
 8004a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a02:	bc08      	pop	{r3}
 8004a04:	469e      	mov	lr, r3
 8004a06:	4770      	bx	lr

08004a08 <_fini>:
 8004a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0a:	bf00      	nop
 8004a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a0e:	bc08      	pop	{r3}
 8004a10:	469e      	mov	lr, r3
 8004a12:	4770      	bx	lr
