
IS1300-PROject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004968  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004af0  08004af0  00014af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b64  08004b64  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08004b64  08004b64  00014b64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b6c  08004b6c  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b6c  08004b6c  00014b6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b70  08004b70  00014b70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004b74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000024  08004b98  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08004b98  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001229e  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002662  00000000  00000000  000322f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c60  00000000  00000000  00034958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b58  00000000  00000000  000355b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c03  00000000  00000000  00036110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010785  00000000  00000000  0005cd13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb4f2  00000000  00000000  0006d498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015898a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003100  00000000  00000000  001589e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004ad8 	.word	0x08004ad8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08004ad8 	.word	0x08004ad8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <test_backlight>:


/**
 * @brief Test all backlight colors
 */
void test_backlight () {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af00      	add	r7, sp, #0
    GPIO_TypeDef* ports[] = {Disp_White_GPIO_Port, Disp_Green_GPIO_Port, Disp_Red_GPIO_Port};
 80004c6:	4a21      	ldr	r2, [pc, #132]	; (800054c <test_backlight+0x8c>)
 80004c8:	f107 0308 	add.w	r3, r7, #8
 80004cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80004ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t pins[] = {Disp_White_Pin, Disp_Green_Pin, Disp_Red_Pin};
 80004d2:	4a1f      	ldr	r2, [pc, #124]	; (8000550 <test_backlight+0x90>)
 80004d4:	463b      	mov	r3, r7
 80004d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004da:	6018      	str	r0, [r3, #0]
 80004dc:	3304      	adds	r3, #4
 80004de:	8019      	strh	r1, [r3, #0]
    for (int i = 0; i < 3; ++i) {
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	e029      	b.n	800053a <test_backlight+0x7a>
        HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);
 80004e6:	697b      	ldr	r3, [r7, #20]
 80004e8:	009b      	lsls	r3, r3, #2
 80004ea:	f107 0218 	add.w	r2, r7, #24
 80004ee:	4413      	add	r3, r2
 80004f0:	f853 0c10 	ldr.w	r0, [r3, #-16]
 80004f4:	697b      	ldr	r3, [r7, #20]
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	f107 0218 	add.w	r2, r7, #24
 80004fc:	4413      	add	r3, r2
 80004fe:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000502:	2201      	movs	r2, #1
 8000504:	4619      	mov	r1, r3
 8000506:	f001 f849 	bl	800159c <HAL_GPIO_WritePin>
        HAL_Delay(200);
 800050a:	20c8      	movs	r0, #200	; 0xc8
 800050c:	f000 fce8 	bl	8000ee0 <HAL_Delay>
        HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	f107 0218 	add.w	r2, r7, #24
 8000518:	4413      	add	r3, r2
 800051a:	f853 0c10 	ldr.w	r0, [r3, #-16]
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	005b      	lsls	r3, r3, #1
 8000522:	f107 0218 	add.w	r2, r7, #24
 8000526:	4413      	add	r3, r2
 8000528:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800052c:	2200      	movs	r2, #0
 800052e:	4619      	mov	r1, r3
 8000530:	f001 f834 	bl	800159c <HAL_GPIO_WritePin>
    for (int i = 0; i < 3; ++i) {
 8000534:	697b      	ldr	r3, [r7, #20]
 8000536:	3301      	adds	r3, #1
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	697b      	ldr	r3, [r7, #20]
 800053c:	2b02      	cmp	r3, #2
 800053e:	ddd2      	ble.n	80004e6 <test_backlight+0x26>
    }
}
 8000540:	bf00      	nop
 8000542:	bf00      	nop
 8000544:	3718      	adds	r7, #24
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	bf00      	nop
 800054c:	08004af0 	.word	0x08004af0
 8000550:	08004afc 	.word	0x08004afc

08000554 <init_backlight>:


/**
 * @brief Set the backlight to white
 */
void init_backlight () {
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
    test_backlight();
 8000558:	f7ff ffb2 	bl	80004c0 <test_backlight>
    HAL_GPIO_WritePin(Disp_White_GPIO_Port, Disp_White_Pin, GPIO_PIN_SET);
 800055c:	2201      	movs	r2, #1
 800055e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000562:	4802      	ldr	r0, [pc, #8]	; (800056c <init_backlight+0x18>)
 8000564:	f001 f81a 	bl	800159c <HAL_GPIO_WritePin>
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	48000800 	.word	0x48000800

08000570 <split_byte>:
/**
 * @brief Split a byte to send to the display
 * @param[in] byte The byte to split into two
 * @param[out] buffer Where to place the two new bytes
 */
void split_byte (uint8_t byte, uint8_t *buffer) {
 8000570:	b480      	push	{r7}
 8000572:	b083      	sub	sp, #12
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	6039      	str	r1, [r7, #0]
 800057a:	71fb      	strb	r3, [r7, #7]
    buffer[0] = byte & 0x0F;            // lower bits first
 800057c:	79fb      	ldrb	r3, [r7, #7]
 800057e:	f003 030f 	and.w	r3, r3, #15
 8000582:	b2da      	uxtb	r2, r3
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	701a      	strb	r2, [r3, #0]
    buffer[1] = (byte & 0xF0) >> 4;     // upper bits second
 8000588:	683b      	ldr	r3, [r7, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	79fa      	ldrb	r2, [r7, #7]
 800058e:	0912      	lsrs	r2, r2, #4
 8000590:	b2d2      	uxtb	r2, r2
 8000592:	701a      	strb	r2, [r3, #0]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <display_transmit>:
 * @brief Send the display data or instructions
 * @param[in] startbyte The byte setting that initiates the transmit
 * @param[in] bytes The bytes that will be sent to the display
 * @param[in] length The number of bytes to send
 */
int display_transmit (uint8_t startbyte, uint8_t *bytes, uint16_t length) {
 80005a0:	b5b0      	push	{r4, r5, r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	71fb      	strb	r3, [r7, #7]
 80005ac:	4613      	mov	r3, r2
 80005ae:	80bb      	strh	r3, [r7, #4]
 80005b0:	466b      	mov	r3, sp
 80005b2:	461d      	mov	r5, r3
    /* create message to transmit */
    uint16_t mes_length = length*2 +1; // +1 for start byte
 80005b4:	88bb      	ldrh	r3, [r7, #4]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	b29b      	uxth	r3, r3
 80005ba:	3301      	adds	r3, #1
 80005bc:	837b      	strh	r3, [r7, #26]
    uint8_t message[mes_length];
 80005be:	8b7c      	ldrh	r4, [r7, #26]
 80005c0:	4623      	mov	r3, r4
 80005c2:	3b01      	subs	r3, #1
 80005c4:	617b      	str	r3, [r7, #20]
 80005c6:	b2a0      	uxth	r0, r4
 80005c8:	f04f 0100 	mov.w	r1, #0
 80005cc:	f04f 0200 	mov.w	r2, #0
 80005d0:	f04f 0300 	mov.w	r3, #0
 80005d4:	00cb      	lsls	r3, r1, #3
 80005d6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80005da:	00c2      	lsls	r2, r0, #3
 80005dc:	b2a0      	uxth	r0, r4
 80005de:	f04f 0100 	mov.w	r1, #0
 80005e2:	f04f 0200 	mov.w	r2, #0
 80005e6:	f04f 0300 	mov.w	r3, #0
 80005ea:	00cb      	lsls	r3, r1, #3
 80005ec:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80005f0:	00c2      	lsls	r2, r0, #3
 80005f2:	4623      	mov	r3, r4
 80005f4:	3307      	adds	r3, #7
 80005f6:	08db      	lsrs	r3, r3, #3
 80005f8:	00db      	lsls	r3, r3, #3
 80005fa:	ebad 0d03 	sub.w	sp, sp, r3
 80005fe:	466b      	mov	r3, sp
 8000600:	3300      	adds	r3, #0
 8000602:	613b      	str	r3, [r7, #16]

    message[0] = startbyte;  // start byte
 8000604:	693b      	ldr	r3, [r7, #16]
 8000606:	79fa      	ldrb	r2, [r7, #7]
 8000608:	701a      	strb	r2, [r3, #0]

    uint8_t divided[2]; // for splitting a byte into two
    for (int i = 0; i < length; ++i) {
 800060a:	2300      	movs	r3, #0
 800060c:	61fb      	str	r3, [r7, #28]
 800060e:	e018      	b.n	8000642 <display_transmit+0xa2>
        split_byte(bytes[i], divided);
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	683a      	ldr	r2, [r7, #0]
 8000614:	4413      	add	r3, r2
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	f107 020c 	add.w	r2, r7, #12
 800061c:	4611      	mov	r1, r2
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff ffa6 	bl	8000570 <split_byte>
        message[1 + i*2] = divided[0];
 8000624:	69fb      	ldr	r3, [r7, #28]
 8000626:	005b      	lsls	r3, r3, #1
 8000628:	3301      	adds	r3, #1
 800062a:	7b39      	ldrb	r1, [r7, #12]
 800062c:	693a      	ldr	r2, [r7, #16]
 800062e:	54d1      	strb	r1, [r2, r3]
        message[1 + i*2 +1] = divided[1];
 8000630:	69fb      	ldr	r3, [r7, #28]
 8000632:	3301      	adds	r3, #1
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	7b79      	ldrb	r1, [r7, #13]
 8000638:	693a      	ldr	r2, [r7, #16]
 800063a:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < length; ++i) {
 800063c:	69fb      	ldr	r3, [r7, #28]
 800063e:	3301      	adds	r3, #1
 8000640:	61fb      	str	r3, [r7, #28]
 8000642:	88bb      	ldrh	r3, [r7, #4]
 8000644:	69fa      	ldr	r2, [r7, #28]
 8000646:	429a      	cmp	r2, r3
 8000648:	dbe2      	blt.n	8000610 <display_transmit+0x70>
    }

    if (HAL_SPI_Transmit(&hspi2, message, mes_length, 100) != HAL_OK) {
 800064a:	6939      	ldr	r1, [r7, #16]
 800064c:	8b7a      	ldrh	r2, [r7, #26]
 800064e:	2364      	movs	r3, #100	; 0x64
 8000650:	4806      	ldr	r0, [pc, #24]	; (800066c <display_transmit+0xcc>)
 8000652:	f002 fb6a 	bl	8002d2a <HAL_SPI_Transmit>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <display_transmit+0xc0>
        return 1;
 800065c:	2301      	movs	r3, #1
 800065e:	e000      	b.n	8000662 <display_transmit+0xc2>
    }
    return 0;
 8000660:	2300      	movs	r3, #0
 8000662:	46ad      	mov	sp, r5
}
 8000664:	4618      	mov	r0, r3
 8000666:	3720      	adds	r7, #32
 8000668:	46bd      	mov	sp, r7
 800066a:	bdb0      	pop	{r4, r5, r7, pc}
 800066c:	20000044 	.word	0x20000044

08000670 <display_send_instruction>:
/**
 * @brief Send instruction bytes via spi to the display
 * @param[in] instructions A pointer to the instructions to send to the display
 * @param[in] length The number of instructions
 */
int display_send_instruction (uint8_t *instructions, uint16_t length) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b082      	sub	sp, #8
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	460b      	mov	r3, r1
 800067a:	807b      	strh	r3, [r7, #2]
    return display_transmit(0x1F, instructions, length);
 800067c:	887b      	ldrh	r3, [r7, #2]
 800067e:	461a      	mov	r2, r3
 8000680:	6879      	ldr	r1, [r7, #4]
 8000682:	201f      	movs	r0, #31
 8000684:	f7ff ff8c 	bl	80005a0 <display_transmit>
 8000688:	4603      	mov	r3, r0
}
 800068a:	4618      	mov	r0, r3
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <display_write>:
/**
 * @brief Write characters to the display where the cursor currently are
 * @param characters The characters to write
 * @param length The number of characters
 */
int display_write (uint8_t *characters, uint16_t length) {
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	6078      	str	r0, [r7, #4]
 800069a:	460b      	mov	r3, r1
 800069c:	807b      	strh	r3, [r7, #2]
    return display_transmit(0b01011111, characters, length);
 800069e:	887b      	ldrh	r3, [r7, #2]
 80006a0:	461a      	mov	r2, r3
 80006a2:	6879      	ldr	r1, [r7, #4]
 80006a4:	205f      	movs	r0, #95	; 0x5f
 80006a6:	f7ff ff7b 	bl	80005a0 <display_transmit>
 80006aa:	4603      	mov	r3, r0
}
 80006ac:	4618      	mov	r0, r3
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}

080006b4 <set_row>:

/**
 * @brief Set the cursor on the display
 * @param row The row to write to
 */
int set_row (uint8_t row) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b084      	sub	sp, #16
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	71fb      	strb	r3, [r7, #7]
    /* the address range of DDARM is 00H-13H, 20H-33H, 40H53H, 60H-73H */
    uint8_t rows[] = {0b10000000, 0b10100000, 0b11000000, 0b11100000};
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <set_row+0x28>)
 80006c0:	60fb      	str	r3, [r7, #12]
    return display_send_instruction(&rows[row], 1);
 80006c2:	79fb      	ldrb	r3, [r7, #7]
 80006c4:	f107 020c 	add.w	r2, r7, #12
 80006c8:	4413      	add	r3, r2
 80006ca:	2101      	movs	r1, #1
 80006cc:	4618      	mov	r0, r3
 80006ce:	f7ff ffcf 	bl	8000670 <display_send_instruction>
 80006d2:	4603      	mov	r3, r0
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3710      	adds	r7, #16
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	e0c0a080 	.word	0xe0c0a080

080006e0 <clear_display>:

/**
 * @brief Clears the display
 */
int clear_display () {
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
    uint8_t ins = 0x01;
 80006e6:	2301      	movs	r3, #1
 80006e8:	71fb      	strb	r3, [r7, #7]
    display_send_instruction(&ins, 1);
 80006ea:	1dfb      	adds	r3, r7, #7
 80006ec:	2101      	movs	r1, #1
 80006ee:	4618      	mov	r0, r3
 80006f0:	f7ff ffbe 	bl	8000670 <display_send_instruction>
}
 80006f4:	bf00      	nop
 80006f6:	4618      	mov	r0, r3
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <init_display>:

/**
 * @brief Initialise the display
 */
void init_display () {
 8000700:	b580      	push	{r7, lr}
 8000702:	b086      	sub	sp, #24
 8000704:	af00      	add	r7, sp, #0
    HAL_Delay(5);
 8000706:	2005      	movs	r0, #5
 8000708:	f000 fbea 	bl	8000ee0 <HAL_Delay>
    init_backlight();
 800070c:	f7ff ff22 	bl	8000554 <init_backlight>

    uint16_t ins_length = 12;
 8000710:	230c      	movs	r3, #12
 8000712:	827b      	strh	r3, [r7, #18]
    uint8_t instructions[] = {
 8000714:	4a18      	ldr	r2, [pc, #96]	; (8000778 <init_display+0x78>)
 8000716:	1d3b      	adds	r3, r7, #4
 8000718:	ca07      	ldmia	r2, {r0, r1, r2}
 800071a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0x01,
        0x38,
        0x0F,
    };

    if (display_send_instruction(instructions, ins_length))
 800071e:	8a7a      	ldrh	r2, [r7, #18]
 8000720:	1d3b      	adds	r3, r7, #4
 8000722:	4611      	mov	r1, r2
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ffa3 	bl	8000670 <display_send_instruction>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <init_display+0x34>
        handle_error();
 8000730:	f000 f826 	bl	8000780 <handle_error>

    HAL_Delay(10);
 8000734:	200a      	movs	r0, #10
 8000736:	f000 fbd3 	bl	8000ee0 <HAL_Delay>

    for (int i = 0; i < 4; ++i) {
 800073a:	2300      	movs	r3, #0
 800073c:	617b      	str	r3, [r7, #20]
 800073e:	e00b      	b.n	8000758 <init_display+0x58>
        set_row(i);
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	b2db      	uxtb	r3, r3
 8000744:	4618      	mov	r0, r3
 8000746:	f7ff ffb5 	bl	80006b4 <set_row>
        display_write((uint8_t*) "0123456789", 10);
 800074a:	210a      	movs	r1, #10
 800074c:	480b      	ldr	r0, [pc, #44]	; (800077c <init_display+0x7c>)
 800074e:	f7ff ffa0 	bl	8000692 <display_write>
    for (int i = 0; i < 4; ++i) {
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	3301      	adds	r3, #1
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	697b      	ldr	r3, [r7, #20]
 800075a:	2b03      	cmp	r3, #3
 800075c:	ddf0      	ble.n	8000740 <init_display+0x40>
    }

    HAL_Delay(1000);
 800075e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000762:	f000 fbbd 	bl	8000ee0 <HAL_Delay>

    clear_display();
 8000766:	f7ff ffbb 	bl	80006e0 <clear_display>

    HAL_Delay(10);
 800076a:	200a      	movs	r0, #10
 800076c:	f000 fbb8 	bl	8000ee0 <HAL_Delay>
}
 8000770:	bf00      	nop
 8000772:	3718      	adds	r7, #24
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	08004b10 	.word	0x08004b10
 800077c:	08004b04 	.word	0x08004b04

08000780 <handle_error>:
 *      Author: Dell
 */

#include "main.h"

void handle_error( void ) {
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000784:	b672      	cpsid	i
}
 8000786:	bf00      	nop
    __disable_irq();
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000788:	2201      	movs	r2, #1
 800078a:	2120      	movs	r1, #32
 800078c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000790:	f000 ff04 	bl	800159c <HAL_GPIO_WritePin>
    while (1)
 8000794:	e7fe      	b.n	8000794 <handle_error+0x14>
	...

08000798 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08a      	sub	sp, #40	; 0x28
 800079c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
 80007a6:	605a      	str	r2, [r3, #4]
 80007a8:	609a      	str	r2, [r3, #8]
 80007aa:	60da      	str	r2, [r3, #12]
 80007ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	4b3c      	ldr	r3, [pc, #240]	; (80008a0 <MX_GPIO_Init+0x108>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	4a3b      	ldr	r2, [pc, #236]	; (80008a0 <MX_GPIO_Init+0x108>)
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ba:	4b39      	ldr	r3, [pc, #228]	; (80008a0 <MX_GPIO_Init+0x108>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	f003 0304 	and.w	r3, r3, #4
 80007c2:	613b      	str	r3, [r7, #16]
 80007c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007c6:	4b36      	ldr	r3, [pc, #216]	; (80008a0 <MX_GPIO_Init+0x108>)
 80007c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ca:	4a35      	ldr	r2, [pc, #212]	; (80008a0 <MX_GPIO_Init+0x108>)
 80007cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d2:	4b33      	ldr	r3, [pc, #204]	; (80008a0 <MX_GPIO_Init+0x108>)
 80007d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007da:	60fb      	str	r3, [r7, #12]
 80007dc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007de:	4b30      	ldr	r3, [pc, #192]	; (80008a0 <MX_GPIO_Init+0x108>)
 80007e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007e2:	4a2f      	ldr	r2, [pc, #188]	; (80008a0 <MX_GPIO_Init+0x108>)
 80007e4:	f043 0301 	orr.w	r3, r3, #1
 80007e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ea:	4b2d      	ldr	r3, [pc, #180]	; (80008a0 <MX_GPIO_Init+0x108>)
 80007ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	60bb      	str	r3, [r7, #8]
 80007f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f6:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <MX_GPIO_Init+0x108>)
 80007f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007fa:	4a29      	ldr	r2, [pc, #164]	; (80008a0 <MX_GPIO_Init+0x108>)
 80007fc:	f043 0302 	orr.w	r3, r3, #2
 8000800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000802:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <MX_GPIO_Init+0x108>)
 8000804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000806:	f003 0302 	and.w	r3, r3, #2
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <MX_GPIO_Init+0x108>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <MX_GPIO_Init+0x108>)
 8000814:	f043 0308 	orr.w	r3, r3, #8
 8000818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800081a:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <MX_GPIO_Init+0x108>)
 800081c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081e:	f003 0308 	and.w	r3, r3, #8
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000826:	2200      	movs	r2, #0
 8000828:	2120      	movs	r1, #32
 800082a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082e:	f000 feb5 	bl	800159c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Disp_Red_Pin|Disp_Green_Pin|Disp_White_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000838:	481a      	ldr	r0, [pc, #104]	; (80008a4 <MX_GPIO_Init+0x10c>)
 800083a:	f000 feaf 	bl	800159c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800083e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000844:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	4619      	mov	r1, r3
 8000854:	4813      	ldr	r0, [pc, #76]	; (80008a4 <MX_GPIO_Init+0x10c>)
 8000856:	f000 fcf7 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800085a:	2320      	movs	r3, #32
 800085c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800085e:	2301      	movs	r3, #1
 8000860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	4619      	mov	r1, r3
 8000870:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000874:	f000 fce8 	bl	8001248 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Disp_Red_Pin|Disp_Green_Pin|Disp_White_Pin;
 8000878:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800088a:	f107 0314 	add.w	r3, r7, #20
 800088e:	4619      	mov	r1, r3
 8000890:	4804      	ldr	r0, [pc, #16]	; (80008a4 <MX_GPIO_Init+0x10c>)
 8000892:	f000 fcd9 	bl	8001248 <HAL_GPIO_Init>

}
 8000896:	bf00      	nop
 8000898:	3728      	adds	r7, #40	; 0x28
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	40021000 	.word	0x40021000
 80008a4:	48000800 	.word	0x48000800

080008a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ac:	f000 fa9c 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008b0:	f000 f834 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008b4:	f7ff ff70 	bl	8000798 <MX_GPIO_Init>
  MX_UART5_Init();
 80008b8:	f000 f9b2 	bl	8000c20 <MX_UART5_Init>
  MX_SPI2_Init();
 80008bc:	f000 f8a6 	bl	8000a0c <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  init_display();
 80008c0:	f7ff ff1e 	bl	8000700 <init_display>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* Start the transmission process */
    if (HAL_UART_Transmit_IT(&huart5, (uint8_t*)buffer, BUFFERSIZE) != HAL_OK) {
 80008c4:	2216      	movs	r2, #22
 80008c6:	4912      	ldr	r1, [pc, #72]	; (8000910 <main+0x68>)
 80008c8:	4812      	ldr	r0, [pc, #72]	; (8000914 <main+0x6c>)
 80008ca:	f002 fd4f 	bl	800336c <HAL_UART_Transmit_IT>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <main+0x30>
        Error_Handler();
 80008d4:	f000 f894 	bl	8000a00 <Error_Handler>
    }
    /* Wait for the end of the transfer */
    while (uartReady != SET) {}
 80008d8:	bf00      	nop
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <main+0x70>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b01      	cmp	r3, #1
 80008e0:	d1fb      	bne.n	80008da <main+0x32>

    /* Reset transmission flag */
    uartReady = RESET;
 80008e2:	4b0d      	ldr	r3, [pc, #52]	; (8000918 <main+0x70>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]



    /* Put UART peripheral in reception process */
    if(HAL_UART_Receive_IT(&huart5, (uint8_t *)buffer, BUFFERSIZE) != HAL_OK) {
 80008e8:	2216      	movs	r2, #22
 80008ea:	4909      	ldr	r1, [pc, #36]	; (8000910 <main+0x68>)
 80008ec:	4809      	ldr	r0, [pc, #36]	; (8000914 <main+0x6c>)
 80008ee:	f002 fdab 	bl	8003448 <HAL_UART_Receive_IT>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <main+0x54>
        Error_Handler();
 80008f8:	f000 f882 	bl	8000a00 <Error_Handler>
    }
    /* Wait for the end of the transfer */
    while (uartReady != SET) {}
 80008fc:	bf00      	nop
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <main+0x70>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	2b01      	cmp	r3, #1
 8000904:	d1fb      	bne.n	80008fe <main+0x56>
    /* Reset transmission flag */
    uartReady = RESET;
 8000906:	4b04      	ldr	r3, [pc, #16]	; (8000918 <main+0x70>)
 8000908:	2200      	movs	r2, #0
 800090a:	701a      	strb	r2, [r3, #0]
    if (HAL_UART_Transmit_IT(&huart5, (uint8_t*)buffer, BUFFERSIZE) != HAL_OK) {
 800090c:	e7da      	b.n	80008c4 <main+0x1c>
 800090e:	bf00      	nop
 8000910:	20000000 	.word	0x20000000
 8000914:	200000a8 	.word	0x200000a8
 8000918:	20000040 	.word	0x20000040

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b096      	sub	sp, #88	; 0x58
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	2244      	movs	r2, #68	; 0x44
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f004 f8cc 	bl	8004ac8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800093e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000942:	f000 fe51 	bl	80015e8 <HAL_PWREx_ControlVoltageScaling>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800094c:	f000 f858 	bl	8000a00 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000950:	2302      	movs	r3, #2
 8000952:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000958:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095a:	2310      	movs	r3, #16
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095e:	2302      	movs	r3, #2
 8000960:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000962:	2302      	movs	r3, #2
 8000964:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000966:	2301      	movs	r3, #1
 8000968:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800096a:	230a      	movs	r3, #10
 800096c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800096e:	2307      	movs	r3, #7
 8000970:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000972:	2302      	movs	r3, #2
 8000974:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000976:	2302      	movs	r3, #2
 8000978:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4618      	mov	r0, r3
 8000980:	f000 fe88 	bl	8001694 <HAL_RCC_OscConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800098a:	f000 f839 	bl	8000a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098e:	230f      	movs	r3, #15
 8000990:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000992:	2303      	movs	r3, #3
 8000994:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009a2:	463b      	mov	r3, r7
 80009a4:	2104      	movs	r1, #4
 80009a6:	4618      	mov	r0, r3
 80009a8:	f001 fa5a 	bl	8001e60 <HAL_RCC_ClockConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009b2:	f000 f825 	bl	8000a00 <Error_Handler>
  }
}
 80009b6:	bf00      	nop
 80009b8:	3758      	adds	r7, #88	; 0x58
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <HAL_UART_TxCpltCallback>:
* @note This example shows a simple way to report end of IT Tx transfer, and
* you can add your own implementation.
* @retval None
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80009c0:	b480      	push	{r7}
 80009c2:	b083      	sub	sp, #12
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
    /* Set transmission flag: transfer complete*/
    uartReady = SET;
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <HAL_UART_TxCpltCallback+0x1c>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	701a      	strb	r2, [r3, #0]
}
 80009ce:	bf00      	nop
 80009d0:	370c      	adds	r7, #12
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	20000040 	.word	0x20000040

080009e0 <HAL_UART_RxCpltCallback>:
* @note This example shows a simple way to report end of IT Rx transfer, and
* you can add your own implementation.
* @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
    /* Set transmission flag: transfer complete*/
    uartReady = SET;
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <HAL_UART_RxCpltCallback+0x1c>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	701a      	strb	r2, [r3, #0]
}
 80009ee:	bf00      	nop
 80009f0:	370c      	adds	r7, #12
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	20000040 	.word	0x20000040

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    handle_error();
 8000a04:	f7ff febc 	bl	8000780 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8000a08:	bf00      	nop
 8000a0a:	bd80      	pop	{r7, pc}

08000a0c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <MX_SPI2_Init+0x74>)
 8000a12:	4a1c      	ldr	r2, [pc, #112]	; (8000a84 <MX_SPI2_Init+0x78>)
 8000a14:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a16:	4b1a      	ldr	r3, [pc, #104]	; (8000a80 <MX_SPI2_Init+0x74>)
 8000a18:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a1c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000a1e:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <MX_SPI2_Init+0x74>)
 8000a20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a24:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a26:	4b16      	ldr	r3, [pc, #88]	; (8000a80 <MX_SPI2_Init+0x74>)
 8000a28:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a2c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a2e:	4b14      	ldr	r3, [pc, #80]	; (8000a80 <MX_SPI2_Init+0x74>)
 8000a30:	2202      	movs	r2, #2
 8000a32:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <MX_SPI2_Init+0x74>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a3a:	4b11      	ldr	r3, [pc, #68]	; (8000a80 <MX_SPI2_Init+0x74>)
 8000a3c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a40:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <MX_SPI2_Init+0x74>)
 8000a44:	2230      	movs	r2, #48	; 0x30
 8000a46:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000a48:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <MX_SPI2_Init+0x74>)
 8000a4a:	2280      	movs	r2, #128	; 0x80
 8000a4c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <MX_SPI2_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a54:	4b0a      	ldr	r3, [pc, #40]	; (8000a80 <MX_SPI2_Init+0x74>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <MX_SPI2_Init+0x74>)
 8000a5c:	2207      	movs	r2, #7
 8000a5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a60:	4b07      	ldr	r3, [pc, #28]	; (8000a80 <MX_SPI2_Init+0x74>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <MX_SPI2_Init+0x74>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a6c:	4804      	ldr	r0, [pc, #16]	; (8000a80 <MX_SPI2_Init+0x74>)
 8000a6e:	f002 f8b9 	bl	8002be4 <HAL_SPI_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000a78:	f7ff ffc2 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000044 	.word	0x20000044
 8000a84:	40003800 	.word	0x40003800

08000a88 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b08a      	sub	sp, #40	; 0x28
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a90:	f107 0314 	add.w	r3, r7, #20
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	605a      	str	r2, [r3, #4]
 8000a9a:	609a      	str	r2, [r3, #8]
 8000a9c:	60da      	str	r2, [r3, #12]
 8000a9e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	4a25      	ldr	r2, [pc, #148]	; (8000b3c <HAL_SPI_MspInit+0xb4>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d144      	bne.n	8000b34 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000aaa:	4b25      	ldr	r3, [pc, #148]	; (8000b40 <HAL_SPI_MspInit+0xb8>)
 8000aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aae:	4a24      	ldr	r2, [pc, #144]	; (8000b40 <HAL_SPI_MspInit+0xb8>)
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ab6:	4b22      	ldr	r3, [pc, #136]	; (8000b40 <HAL_SPI_MspInit+0xb8>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	4b1f      	ldr	r3, [pc, #124]	; (8000b40 <HAL_SPI_MspInit+0xb8>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	4a1e      	ldr	r2, [pc, #120]	; (8000b40 <HAL_SPI_MspInit+0xb8>)
 8000ac8:	f043 0304 	orr.w	r3, r3, #4
 8000acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ace:	4b1c      	ldr	r3, [pc, #112]	; (8000b40 <HAL_SPI_MspInit+0xb8>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	f003 0304 	and.w	r3, r3, #4
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ada:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <HAL_SPI_MspInit+0xb8>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	4a18      	ldr	r2, [pc, #96]	; (8000b40 <HAL_SPI_MspInit+0xb8>)
 8000ae0:	f043 0302 	orr.w	r3, r3, #2
 8000ae4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae6:	4b16      	ldr	r3, [pc, #88]	; (8000b40 <HAL_SPI_MspInit+0xb8>)
 8000ae8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aea:	f003 0302 	and.w	r3, r3, #2
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = Display_OUT_Pin;
 8000af2:	2308      	movs	r3, #8
 8000af4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000af6:	2302      	movs	r3, #2
 8000af8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000afe:	2303      	movs	r3, #3
 8000b00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b02:	2305      	movs	r3, #5
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Display_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480d      	ldr	r0, [pc, #52]	; (8000b44 <HAL_SPI_MspInit+0xbc>)
 8000b0e:	f000 fb9b 	bl	8001248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Dispay_CLK_Pin|Display_CS_Pin;
 8000b12:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b24:	2305      	movs	r3, #5
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 0314 	add.w	r3, r7, #20
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <HAL_SPI_MspInit+0xc0>)
 8000b30:	f000 fb8a 	bl	8001248 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000b34:	bf00      	nop
 8000b36:	3728      	adds	r7, #40	; 0x28
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40003800 	.word	0x40003800
 8000b40:	40021000 	.word	0x40021000
 8000b44:	48000800 	.word	0x48000800
 8000b48:	48000400 	.word	0x48000400

08000b4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b083      	sub	sp, #12
 8000b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b52:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <HAL_MspInit+0x44>)
 8000b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b56:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <HAL_MspInit+0x44>)
 8000b58:	f043 0301 	orr.w	r3, r3, #1
 8000b5c:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <HAL_MspInit+0x44>)
 8000b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b62:	f003 0301 	and.w	r3, r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_MspInit+0x44>)
 8000b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6e:	4a08      	ldr	r2, [pc, #32]	; (8000b90 <HAL_MspInit+0x44>)
 8000b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b74:	6593      	str	r3, [r2, #88]	; 0x58
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <HAL_MspInit+0x44>)
 8000b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7e:	603b      	str	r3, [r7, #0]
 8000b80:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000

08000b94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b98:	e7fe      	b.n	8000b98 <NMI_Handler+0x4>

08000b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000be0:	f000 f95e 	bl	8000ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000bec:	4802      	ldr	r0, [pc, #8]	; (8000bf8 <UART5_IRQHandler+0x10>)
 8000bee:	f002 fc81 	bl	80034f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	200000a8 	.word	0x200000a8

08000bfc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	; (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_UART5_Init+0x58>)
 8000c26:	4a15      	ldr	r2, [pc, #84]	; (8000c7c <MX_UART5_Init+0x5c>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <MX_UART5_Init+0x58>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_UART5_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_UART5_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_UART5_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_UART5_Init+0x58>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_UART5_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_UART5_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MX_UART5_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_UART5_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_UART5_Init+0x58>)
 8000c64:	f002 fb34 	bl	80032d0 <HAL_UART_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000c6e:	f7ff fec7 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200000a8 	.word	0x200000a8
 8000c7c:	40005000 	.word	0x40005000

08000c80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0ac      	sub	sp, #176	; 0xb0
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2288      	movs	r2, #136	; 0x88
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f003 ff11 	bl	8004ac8 <memset>
  if(uartHandle->Instance==UART5)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a36      	ldr	r2, [pc, #216]	; (8000d84 <HAL_UART_MspInit+0x104>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d164      	bne.n	8000d7a <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000cb0:	2310      	movs	r3, #16
 8000cb2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f001 fad5 	bl	800226c <HAL_RCCEx_PeriphCLKConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cc8:	f7ff fe9a 	bl	8000a00 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000ccc:	4b2e      	ldr	r3, [pc, #184]	; (8000d88 <HAL_UART_MspInit+0x108>)
 8000cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd0:	4a2d      	ldr	r2, [pc, #180]	; (8000d88 <HAL_UART_MspInit+0x108>)
 8000cd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000cd6:	6593      	str	r3, [r2, #88]	; 0x58
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	; (8000d88 <HAL_UART_MspInit+0x108>)
 8000cda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cdc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ce0:	613b      	str	r3, [r7, #16]
 8000ce2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce4:	4b28      	ldr	r3, [pc, #160]	; (8000d88 <HAL_UART_MspInit+0x108>)
 8000ce6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce8:	4a27      	ldr	r2, [pc, #156]	; (8000d88 <HAL_UART_MspInit+0x108>)
 8000cea:	f043 0304 	orr.w	r3, r3, #4
 8000cee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf0:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <HAL_UART_MspInit+0x108>)
 8000cf2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf4:	f003 0304 	and.w	r3, r3, #4
 8000cf8:	60fb      	str	r3, [r7, #12]
 8000cfa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfc:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <HAL_UART_MspInit+0x108>)
 8000cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d00:	4a21      	ldr	r2, [pc, #132]	; (8000d88 <HAL_UART_MspInit+0x108>)
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d08:	4b1f      	ldr	r3, [pc, #124]	; (8000d88 <HAL_UART_MspInit+0x108>)
 8000d0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0c:	f003 0308 	and.w	r3, r3, #8
 8000d10:	60bb      	str	r3, [r7, #8]
 8000d12:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d2e:	2308      	movs	r3, #8
 8000d30:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d34:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4814      	ldr	r0, [pc, #80]	; (8000d8c <HAL_UART_MspInit+0x10c>)
 8000d3c:	f000 fa84 	bl	8001248 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d40:	2304      	movs	r3, #4
 8000d42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d46:	2302      	movs	r3, #2
 8000d48:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d52:	2303      	movs	r3, #3
 8000d54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d58:	2308      	movs	r3, #8
 8000d5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d5e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d62:	4619      	mov	r1, r3
 8000d64:	480a      	ldr	r0, [pc, #40]	; (8000d90 <HAL_UART_MspInit+0x110>)
 8000d66:	f000 fa6f 	bl	8001248 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	2035      	movs	r0, #53	; 0x35
 8000d70:	f000 f9b5 	bl	80010de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000d74:	2035      	movs	r0, #53	; 0x35
 8000d76:	f000 f9ce 	bl	8001116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	37b0      	adds	r7, #176	; 0xb0
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40005000 	.word	0x40005000
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	48000800 	.word	0x48000800
 8000d90:	48000c00 	.word	0x48000c00

08000d94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dcc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d98:	f7ff ff30 	bl	8000bfc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d9c:	480c      	ldr	r0, [pc, #48]	; (8000dd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d9e:	490d      	ldr	r1, [pc, #52]	; (8000dd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000da0:	4a0d      	ldr	r2, [pc, #52]	; (8000dd8 <LoopForever+0xe>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0a      	ldr	r2, [pc, #40]	; (8000ddc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000db4:	4c0a      	ldr	r4, [pc, #40]	; (8000de0 <LoopForever+0x16>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f003 fe5d 	bl	8004a80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dc6:	f7ff fd6f 	bl	80008a8 <main>

08000dca <LoopForever>:

LoopForever:
    b LoopForever
 8000dca:	e7fe      	b.n	8000dca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000dcc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000dd8:	08004b74 	.word	0x08004b74
  ldr r2, =_sbss
 8000ddc:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000de0:	20000130 	.word	0x20000130

08000de4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC1_2_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000dee:	2300      	movs	r3, #0
 8000df0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000df2:	4b0c      	ldr	r3, [pc, #48]	; (8000e24 <HAL_Init+0x3c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a0b      	ldr	r2, [pc, #44]	; (8000e24 <HAL_Init+0x3c>)
 8000df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfc:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dfe:	2003      	movs	r0, #3
 8000e00:	f000 f962 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e04:	2000      	movs	r0, #0
 8000e06:	f000 f80f 	bl	8000e28 <HAL_InitTick>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d002      	beq.n	8000e16 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	71fb      	strb	r3, [r7, #7]
 8000e14:	e001      	b.n	8000e1a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e16:	f7ff fe99 	bl	8000b4c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	40022000 	.word	0x40022000

08000e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e30:	2300      	movs	r3, #0
 8000e32:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e34:	4b17      	ldr	r3, [pc, #92]	; (8000e94 <HAL_InitTick+0x6c>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d023      	beq.n	8000e84 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e3c:	4b16      	ldr	r3, [pc, #88]	; (8000e98 <HAL_InitTick+0x70>)
 8000e3e:	681a      	ldr	r2, [r3, #0]
 8000e40:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <HAL_InitTick+0x6c>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4619      	mov	r1, r3
 8000e46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e52:	4618      	mov	r0, r3
 8000e54:	f000 f96d 	bl	8001132 <HAL_SYSTICK_Config>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d10f      	bne.n	8000e7e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2b0f      	cmp	r3, #15
 8000e62:	d809      	bhi.n	8000e78 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e64:	2200      	movs	r2, #0
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6c:	f000 f937 	bl	80010de <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e70:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <HAL_InitTick+0x74>)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	6013      	str	r3, [r2, #0]
 8000e76:	e007      	b.n	8000e88 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	73fb      	strb	r3, [r7, #15]
 8000e7c:	e004      	b.n	8000e88 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	73fb      	strb	r3, [r7, #15]
 8000e82:	e001      	b.n	8000e88 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3710      	adds	r7, #16
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	20000020 	.word	0x20000020
 8000e98:	20000018 	.word	0x20000018
 8000e9c:	2000001c 	.word	0x2000001c

08000ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x20>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x24>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <HAL_IncTick+0x24>)
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000020 	.word	0x20000020
 8000ec4:	2000012c 	.word	0x2000012c

08000ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <HAL_GetTick+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	2000012c 	.word	0x2000012c

08000ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee8:	f7ff ffee 	bl	8000ec8 <HAL_GetTick>
 8000eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef8:	d005      	beq.n	8000f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <HAL_Delay+0x44>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f06:	bf00      	nop
 8000f08:	f7ff ffde 	bl	8000ec8 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d8f7      	bhi.n	8000f08 <HAL_Delay+0x28>
  {
  }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000020 	.word	0x20000020

08000f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f44:	4013      	ands	r3, r2
 8000f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5a:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	60d3      	str	r3, [r2, #12]
}
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f74:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <__NVIC_GetPriorityGrouping+0x18>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	f003 0307 	and.w	r3, r3, #7
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db0b      	blt.n	8000fb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f003 021f 	and.w	r2, r3, #31
 8000fa4:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <__NVIC_EnableIRQ+0x38>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	2001      	movs	r0, #1
 8000fae:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db0a      	blt.n	8000ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	490c      	ldr	r1, [pc, #48]	; (8001014 <__NVIC_SetPriority+0x4c>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	0112      	lsls	r2, r2, #4
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff0:	e00a      	b.n	8001008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4908      	ldr	r1, [pc, #32]	; (8001018 <__NVIC_SetPriority+0x50>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	3b04      	subs	r3, #4
 8001000:	0112      	lsls	r2, r2, #4
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	440b      	add	r3, r1
 8001006:	761a      	strb	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000e100 	.word	0xe000e100
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f1c3 0307 	rsb	r3, r3, #7
 8001036:	2b04      	cmp	r3, #4
 8001038:	bf28      	it	cs
 800103a:	2304      	movcs	r3, #4
 800103c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3304      	adds	r3, #4
 8001042:	2b06      	cmp	r3, #6
 8001044:	d902      	bls.n	800104c <NVIC_EncodePriority+0x30>
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3b03      	subs	r3, #3
 800104a:	e000      	b.n	800104e <NVIC_EncodePriority+0x32>
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	f04f 32ff 	mov.w	r2, #4294967295
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001064:	f04f 31ff 	mov.w	r1, #4294967295
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43d9      	mvns	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	4313      	orrs	r3, r2
         );
}
 8001076:	4618      	mov	r0, r3
 8001078:	3724      	adds	r7, #36	; 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001094:	d301      	bcc.n	800109a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001096:	2301      	movs	r3, #1
 8001098:	e00f      	b.n	80010ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <SysTick_Config+0x40>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a2:	210f      	movs	r1, #15
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295
 80010a8:	f7ff ff8e 	bl	8000fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <SysTick_Config+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <SysTick_Config+0x40>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff29 	bl	8000f28 <__NVIC_SetPriorityGrouping>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010f0:	f7ff ff3e 	bl	8000f70 <__NVIC_GetPriorityGrouping>
 80010f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	6978      	ldr	r0, [r7, #20]
 80010fc:	f7ff ff8e 	bl	800101c <NVIC_EncodePriority>
 8001100:	4602      	mov	r2, r0
 8001102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff5d 	bl	8000fc8 <__NVIC_SetPriority>
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff31 	bl	8000f8c <__NVIC_EnableIRQ>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffa2 	bl	8001084 <SysTick_Config>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800114a:	b480      	push	{r7}
 800114c:	b085      	sub	sp, #20
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001152:	2300      	movs	r3, #0
 8001154:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800115c:	b2db      	uxtb	r3, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d008      	beq.n	8001174 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2204      	movs	r2, #4
 8001166:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e022      	b.n	80011ba <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 020e 	bic.w	r2, r2, #14
 8001182:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f022 0201 	bic.w	r2, r2, #1
 8001192:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001198:	f003 021c 	and.w	r2, r3, #28
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	2101      	movs	r1, #1
 80011a2:	fa01 f202 	lsl.w	r2, r1, r2
 80011a6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	2201      	movs	r2, #1
 80011ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80011b8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3714      	adds	r7, #20
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b084      	sub	sp, #16
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011ce:	2300      	movs	r3, #0
 80011d0:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011d8:	b2db      	uxtb	r3, r3
 80011da:	2b02      	cmp	r3, #2
 80011dc:	d005      	beq.n	80011ea <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2204      	movs	r2, #4
 80011e2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	e029      	b.n	800123e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f022 020e 	bic.w	r2, r2, #14
 80011f8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0201 	bic.w	r2, r2, #1
 8001208:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120e:	f003 021c 	and.w	r2, r3, #28
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	2101      	movs	r1, #1
 8001218:	fa01 f202 	lsl.w	r2, r1, r2
 800121c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2201      	movs	r2, #1
 8001222:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2200      	movs	r2, #0
 800122a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001232:	2b00      	cmp	r3, #0
 8001234:	d003      	beq.n	800123e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	4798      	blx	r3
    }
  }
  return status;
 800123e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001240:	4618      	mov	r0, r3
 8001242:	3710      	adds	r7, #16
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}

08001248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001248:	b480      	push	{r7}
 800124a:	b087      	sub	sp, #28
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001256:	e17f      	b.n	8001558 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001258:	683b      	ldr	r3, [r7, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	2101      	movs	r1, #1
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	fa01 f303 	lsl.w	r3, r1, r3
 8001264:	4013      	ands	r3, r2
 8001266:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	f000 8171 	beq.w	8001552 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b01      	cmp	r3, #1
 800127a:	d005      	beq.n	8001288 <HAL_GPIO_Init+0x40>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d130      	bne.n	80012ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43db      	mvns	r3, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4013      	ands	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012be:	2201      	movs	r2, #1
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	4013      	ands	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	091b      	lsrs	r3, r3, #4
 80012d4:	f003 0201 	and.w	r2, r3, #1
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	2b03      	cmp	r3, #3
 80012f4:	d118      	bne.n	8001328 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80012fc:	2201      	movs	r2, #1
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4013      	ands	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	08db      	lsrs	r3, r3, #3
 8001312:	f003 0201 	and.w	r2, r3, #1
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	693a      	ldr	r2, [r7, #16]
 8001326:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b03      	cmp	r3, #3
 8001332:	d017      	beq.n	8001364 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	2203      	movs	r2, #3
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43db      	mvns	r3, r3
 8001346:	693a      	ldr	r2, [r7, #16]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	689a      	ldr	r2, [r3, #8]
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	005b      	lsls	r3, r3, #1
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	693a      	ldr	r2, [r7, #16]
 8001362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f003 0303 	and.w	r3, r3, #3
 800136c:	2b02      	cmp	r3, #2
 800136e:	d123      	bne.n	80013b8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	08da      	lsrs	r2, r3, #3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3208      	adds	r2, #8
 8001378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	f003 0307 	and.w	r3, r3, #7
 8001384:	009b      	lsls	r3, r3, #2
 8001386:	220f      	movs	r2, #15
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	691a      	ldr	r2, [r3, #16]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	08da      	lsrs	r2, r3, #3
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	3208      	adds	r2, #8
 80013b2:	6939      	ldr	r1, [r7, #16]
 80013b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	2203      	movs	r2, #3
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	43db      	mvns	r3, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0203 	and.w	r2, r3, #3
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	693a      	ldr	r2, [r7, #16]
 80013e2:	4313      	orrs	r3, r2
 80013e4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	f000 80ac 	beq.w	8001552 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013fa:	4b5f      	ldr	r3, [pc, #380]	; (8001578 <HAL_GPIO_Init+0x330>)
 80013fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fe:	4a5e      	ldr	r2, [pc, #376]	; (8001578 <HAL_GPIO_Init+0x330>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6613      	str	r3, [r2, #96]	; 0x60
 8001406:	4b5c      	ldr	r3, [pc, #368]	; (8001578 <HAL_GPIO_Init+0x330>)
 8001408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001412:	4a5a      	ldr	r2, [pc, #360]	; (800157c <HAL_GPIO_Init+0x334>)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	089b      	lsrs	r3, r3, #2
 8001418:	3302      	adds	r3, #2
 800141a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f003 0303 	and.w	r3, r3, #3
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	220f      	movs	r2, #15
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800143c:	d025      	beq.n	800148a <HAL_GPIO_Init+0x242>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a4f      	ldr	r2, [pc, #316]	; (8001580 <HAL_GPIO_Init+0x338>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d01f      	beq.n	8001486 <HAL_GPIO_Init+0x23e>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a4e      	ldr	r2, [pc, #312]	; (8001584 <HAL_GPIO_Init+0x33c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d019      	beq.n	8001482 <HAL_GPIO_Init+0x23a>
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a4d      	ldr	r2, [pc, #308]	; (8001588 <HAL_GPIO_Init+0x340>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d013      	beq.n	800147e <HAL_GPIO_Init+0x236>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	4a4c      	ldr	r2, [pc, #304]	; (800158c <HAL_GPIO_Init+0x344>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d00d      	beq.n	800147a <HAL_GPIO_Init+0x232>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	4a4b      	ldr	r2, [pc, #300]	; (8001590 <HAL_GPIO_Init+0x348>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d007      	beq.n	8001476 <HAL_GPIO_Init+0x22e>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a4a      	ldr	r2, [pc, #296]	; (8001594 <HAL_GPIO_Init+0x34c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_GPIO_Init+0x22a>
 800146e:	2306      	movs	r3, #6
 8001470:	e00c      	b.n	800148c <HAL_GPIO_Init+0x244>
 8001472:	2307      	movs	r3, #7
 8001474:	e00a      	b.n	800148c <HAL_GPIO_Init+0x244>
 8001476:	2305      	movs	r3, #5
 8001478:	e008      	b.n	800148c <HAL_GPIO_Init+0x244>
 800147a:	2304      	movs	r3, #4
 800147c:	e006      	b.n	800148c <HAL_GPIO_Init+0x244>
 800147e:	2303      	movs	r3, #3
 8001480:	e004      	b.n	800148c <HAL_GPIO_Init+0x244>
 8001482:	2302      	movs	r3, #2
 8001484:	e002      	b.n	800148c <HAL_GPIO_Init+0x244>
 8001486:	2301      	movs	r3, #1
 8001488:	e000      	b.n	800148c <HAL_GPIO_Init+0x244>
 800148a:	2300      	movs	r3, #0
 800148c:	697a      	ldr	r2, [r7, #20]
 800148e:	f002 0203 	and.w	r2, r2, #3
 8001492:	0092      	lsls	r2, r2, #2
 8001494:	4093      	lsls	r3, r2
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800149c:	4937      	ldr	r1, [pc, #220]	; (800157c <HAL_GPIO_Init+0x334>)
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	089b      	lsrs	r3, r3, #2
 80014a2:	3302      	adds	r3, #2
 80014a4:	693a      	ldr	r2, [r7, #16]
 80014a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014aa:	4b3b      	ldr	r3, [pc, #236]	; (8001598 <HAL_GPIO_Init+0x350>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	43db      	mvns	r3, r3
 80014b4:	693a      	ldr	r2, [r7, #16]
 80014b6:	4013      	ands	r3, r2
 80014b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d003      	beq.n	80014ce <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014ce:	4a32      	ldr	r2, [pc, #200]	; (8001598 <HAL_GPIO_Init+0x350>)
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014d4:	4b30      	ldr	r3, [pc, #192]	; (8001598 <HAL_GPIO_Init+0x350>)
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	43db      	mvns	r3, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4013      	ands	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014f8:	4a27      	ldr	r2, [pc, #156]	; (8001598 <HAL_GPIO_Init+0x350>)
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80014fe:	4b26      	ldr	r3, [pc, #152]	; (8001598 <HAL_GPIO_Init+0x350>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	43db      	mvns	r3, r3
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	4013      	ands	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d003      	beq.n	8001522 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800151a:	693a      	ldr	r2, [r7, #16]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	4313      	orrs	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001522:	4a1d      	ldr	r2, [pc, #116]	; (8001598 <HAL_GPIO_Init+0x350>)
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001528:	4b1b      	ldr	r3, [pc, #108]	; (8001598 <HAL_GPIO_Init+0x350>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	43db      	mvns	r3, r3
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4013      	ands	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001540:	2b00      	cmp	r3, #0
 8001542:	d003      	beq.n	800154c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	4313      	orrs	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800154c:	4a12      	ldr	r2, [pc, #72]	; (8001598 <HAL_GPIO_Init+0x350>)
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001552:	697b      	ldr	r3, [r7, #20]
 8001554:	3301      	adds	r3, #1
 8001556:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	fa22 f303 	lsr.w	r3, r2, r3
 8001562:	2b00      	cmp	r3, #0
 8001564:	f47f ae78 	bne.w	8001258 <HAL_GPIO_Init+0x10>
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	371c      	adds	r7, #28
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000
 800157c:	40010000 	.word	0x40010000
 8001580:	48000400 	.word	0x48000400
 8001584:	48000800 	.word	0x48000800
 8001588:	48000c00 	.word	0x48000c00
 800158c:	48001000 	.word	0x48001000
 8001590:	48001400 	.word	0x48001400
 8001594:	48001800 	.word	0x48001800
 8001598:	40010400 	.word	0x40010400

0800159c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	807b      	strh	r3, [r7, #2]
 80015a8:	4613      	mov	r3, r2
 80015aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015ac:	787b      	ldrb	r3, [r7, #1]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015b2:	887a      	ldrh	r2, [r7, #2]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015b8:	e002      	b.n	80015c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015d0:	4b04      	ldr	r3, [pc, #16]	; (80015e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015d8:	4618      	mov	r0, r3
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40007000 	.word	0x40007000

080015e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015f6:	d130      	bne.n	800165a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80015f8:	4b23      	ldr	r3, [pc, #140]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001604:	d038      	beq.n	8001678 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001606:	4b20      	ldr	r3, [pc, #128]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800160e:	4a1e      	ldr	r2, [pc, #120]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001610:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001614:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001616:	4b1d      	ldr	r3, [pc, #116]	; (800168c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	2232      	movs	r2, #50	; 0x32
 800161c:	fb02 f303 	mul.w	r3, r2, r3
 8001620:	4a1b      	ldr	r2, [pc, #108]	; (8001690 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001622:	fba2 2303 	umull	r2, r3, r2, r3
 8001626:	0c9b      	lsrs	r3, r3, #18
 8001628:	3301      	adds	r3, #1
 800162a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800162c:	e002      	b.n	8001634 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	3b01      	subs	r3, #1
 8001632:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001636:	695b      	ldr	r3, [r3, #20]
 8001638:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800163c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001640:	d102      	bne.n	8001648 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d1f2      	bne.n	800162e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001654:	d110      	bne.n	8001678 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e00f      	b.n	800167a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001666:	d007      	beq.n	8001678 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001668:	4b07      	ldr	r3, [pc, #28]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001670:	4a05      	ldr	r2, [pc, #20]	; (8001688 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001672:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001676:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3714      	adds	r7, #20
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	40007000 	.word	0x40007000
 800168c:	20000018 	.word	0x20000018
 8001690:	431bde83 	.word	0x431bde83

08001694 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b088      	sub	sp, #32
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e3d4      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016a6:	4ba1      	ldr	r3, [pc, #644]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80016a8:	689b      	ldr	r3, [r3, #8]
 80016aa:	f003 030c 	and.w	r3, r3, #12
 80016ae:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016b0:	4b9e      	ldr	r3, [pc, #632]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	f003 0303 	and.w	r3, r3, #3
 80016b8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0310 	and.w	r3, r3, #16
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	f000 80e4 	beq.w	8001890 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d007      	beq.n	80016de <HAL_RCC_OscConfig+0x4a>
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	2b0c      	cmp	r3, #12
 80016d2:	f040 808b 	bne.w	80017ec <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	f040 8087 	bne.w	80017ec <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016de:	4b93      	ldr	r3, [pc, #588]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d005      	beq.n	80016f6 <HAL_RCC_OscConfig+0x62>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d101      	bne.n	80016f6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	e3ac      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6a1a      	ldr	r2, [r3, #32]
 80016fa:	4b8c      	ldr	r3, [pc, #560]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d004      	beq.n	8001710 <HAL_RCC_OscConfig+0x7c>
 8001706:	4b89      	ldr	r3, [pc, #548]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800170e:	e005      	b.n	800171c <HAL_RCC_OscConfig+0x88>
 8001710:	4b86      	ldr	r3, [pc, #536]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001712:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001716:	091b      	lsrs	r3, r3, #4
 8001718:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800171c:	4293      	cmp	r3, r2
 800171e:	d223      	bcs.n	8001768 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6a1b      	ldr	r3, [r3, #32]
 8001724:	4618      	mov	r0, r3
 8001726:	f000 fd41 	bl	80021ac <RCC_SetFlashLatencyFromMSIRange>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	e38d      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001734:	4b7d      	ldr	r3, [pc, #500]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a7c      	ldr	r2, [pc, #496]	; (800192c <HAL_RCC_OscConfig+0x298>)
 800173a:	f043 0308 	orr.w	r3, r3, #8
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b7a      	ldr	r3, [pc, #488]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a1b      	ldr	r3, [r3, #32]
 800174c:	4977      	ldr	r1, [pc, #476]	; (800192c <HAL_RCC_OscConfig+0x298>)
 800174e:	4313      	orrs	r3, r2
 8001750:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001752:	4b76      	ldr	r3, [pc, #472]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	021b      	lsls	r3, r3, #8
 8001760:	4972      	ldr	r1, [pc, #456]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001762:	4313      	orrs	r3, r2
 8001764:	604b      	str	r3, [r1, #4]
 8001766:	e025      	b.n	80017b4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001768:	4b70      	ldr	r3, [pc, #448]	; (800192c <HAL_RCC_OscConfig+0x298>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a6f      	ldr	r2, [pc, #444]	; (800192c <HAL_RCC_OscConfig+0x298>)
 800176e:	f043 0308 	orr.w	r3, r3, #8
 8001772:	6013      	str	r3, [r2, #0]
 8001774:	4b6d      	ldr	r3, [pc, #436]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	496a      	ldr	r1, [pc, #424]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001782:	4313      	orrs	r3, r2
 8001784:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001786:	4b69      	ldr	r3, [pc, #420]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	69db      	ldr	r3, [r3, #28]
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	4965      	ldr	r1, [pc, #404]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001796:	4313      	orrs	r3, r2
 8001798:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d109      	bne.n	80017b4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f000 fd01 	bl	80021ac <RCC_SetFlashLatencyFromMSIRange>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e34d      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017b4:	f000 fc36 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 80017b8:	4602      	mov	r2, r0
 80017ba:	4b5c      	ldr	r3, [pc, #368]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	091b      	lsrs	r3, r3, #4
 80017c0:	f003 030f 	and.w	r3, r3, #15
 80017c4:	495a      	ldr	r1, [pc, #360]	; (8001930 <HAL_RCC_OscConfig+0x29c>)
 80017c6:	5ccb      	ldrb	r3, [r1, r3]
 80017c8:	f003 031f 	and.w	r3, r3, #31
 80017cc:	fa22 f303 	lsr.w	r3, r2, r3
 80017d0:	4a58      	ldr	r2, [pc, #352]	; (8001934 <HAL_RCC_OscConfig+0x2a0>)
 80017d2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017d4:	4b58      	ldr	r3, [pc, #352]	; (8001938 <HAL_RCC_OscConfig+0x2a4>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7ff fb25 	bl	8000e28 <HAL_InitTick>
 80017de:	4603      	mov	r3, r0
 80017e0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d052      	beq.n	800188e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	e331      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d032      	beq.n	800185a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80017f4:	4b4d      	ldr	r3, [pc, #308]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a4c      	ldr	r2, [pc, #304]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001800:	f7ff fb62 	bl	8000ec8 <HAL_GetTick>
 8001804:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001808:	f7ff fb5e 	bl	8000ec8 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e31a      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800181a:	4b44      	ldr	r3, [pc, #272]	; (800192c <HAL_RCC_OscConfig+0x298>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	2b00      	cmp	r3, #0
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001826:	4b41      	ldr	r3, [pc, #260]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a40      	ldr	r2, [pc, #256]	; (800192c <HAL_RCC_OscConfig+0x298>)
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b3e      	ldr	r3, [pc, #248]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	493b      	ldr	r1, [pc, #236]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001844:	4b39      	ldr	r3, [pc, #228]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	4936      	ldr	r1, [pc, #216]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]
 8001858:	e01a      	b.n	8001890 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800185a:	4b34      	ldr	r3, [pc, #208]	; (800192c <HAL_RCC_OscConfig+0x298>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a33      	ldr	r2, [pc, #204]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001860:	f023 0301 	bic.w	r3, r3, #1
 8001864:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001866:	f7ff fb2f 	bl	8000ec8 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800186e:	f7ff fb2b 	bl	8000ec8 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e2e7      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001880:	4b2a      	ldr	r3, [pc, #168]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f0      	bne.n	800186e <HAL_RCC_OscConfig+0x1da>
 800188c:	e000      	b.n	8001890 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800188e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d074      	beq.n	8001986 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	2b08      	cmp	r3, #8
 80018a0:	d005      	beq.n	80018ae <HAL_RCC_OscConfig+0x21a>
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	2b0c      	cmp	r3, #12
 80018a6:	d10e      	bne.n	80018c6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d10b      	bne.n	80018c6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018ae:	4b1f      	ldr	r3, [pc, #124]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d064      	beq.n	8001984 <HAL_RCC_OscConfig+0x2f0>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d160      	bne.n	8001984 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e2c4      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018ce:	d106      	bne.n	80018de <HAL_RCC_OscConfig+0x24a>
 80018d0:	4b16      	ldr	r3, [pc, #88]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a15      	ldr	r2, [pc, #84]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80018d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018da:	6013      	str	r3, [r2, #0]
 80018dc:	e01d      	b.n	800191a <HAL_RCC_OscConfig+0x286>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018e6:	d10c      	bne.n	8001902 <HAL_RCC_OscConfig+0x26e>
 80018e8:	4b10      	ldr	r3, [pc, #64]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0f      	ldr	r2, [pc, #60]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80018ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b0d      	ldr	r3, [pc, #52]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a0c      	ldr	r2, [pc, #48]	; (800192c <HAL_RCC_OscConfig+0x298>)
 80018fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018fe:	6013      	str	r3, [r2, #0]
 8001900:	e00b      	b.n	800191a <HAL_RCC_OscConfig+0x286>
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a09      	ldr	r2, [pc, #36]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800190c:	6013      	str	r3, [r2, #0]
 800190e:	4b07      	ldr	r3, [pc, #28]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a06      	ldr	r2, [pc, #24]	; (800192c <HAL_RCC_OscConfig+0x298>)
 8001914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001918:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d01c      	beq.n	800195c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001922:	f7ff fad1 	bl	8000ec8 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001928:	e011      	b.n	800194e <HAL_RCC_OscConfig+0x2ba>
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000
 8001930:	08004b1c 	.word	0x08004b1c
 8001934:	20000018 	.word	0x20000018
 8001938:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800193c:	f7ff fac4 	bl	8000ec8 <HAL_GetTick>
 8001940:	4602      	mov	r2, r0
 8001942:	693b      	ldr	r3, [r7, #16]
 8001944:	1ad3      	subs	r3, r2, r3
 8001946:	2b64      	cmp	r3, #100	; 0x64
 8001948:	d901      	bls.n	800194e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800194a:	2303      	movs	r3, #3
 800194c:	e280      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800194e:	4baf      	ldr	r3, [pc, #700]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d0f0      	beq.n	800193c <HAL_RCC_OscConfig+0x2a8>
 800195a:	e014      	b.n	8001986 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800195c:	f7ff fab4 	bl	8000ec8 <HAL_GetTick>
 8001960:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001962:	e008      	b.n	8001976 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001964:	f7ff fab0 	bl	8000ec8 <HAL_GetTick>
 8001968:	4602      	mov	r2, r0
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b64      	cmp	r3, #100	; 0x64
 8001970:	d901      	bls.n	8001976 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e26c      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001976:	4ba5      	ldr	r3, [pc, #660]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f0      	bne.n	8001964 <HAL_RCC_OscConfig+0x2d0>
 8001982:	e000      	b.n	8001986 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001984:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d060      	beq.n	8001a54 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	2b04      	cmp	r3, #4
 8001996:	d005      	beq.n	80019a4 <HAL_RCC_OscConfig+0x310>
 8001998:	69bb      	ldr	r3, [r7, #24]
 800199a:	2b0c      	cmp	r3, #12
 800199c:	d119      	bne.n	80019d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800199e:	697b      	ldr	r3, [r7, #20]
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d116      	bne.n	80019d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019a4:	4b99      	ldr	r3, [pc, #612]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d005      	beq.n	80019bc <HAL_RCC_OscConfig+0x328>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e249      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019bc:	4b93      	ldr	r3, [pc, #588]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	691b      	ldr	r3, [r3, #16]
 80019c8:	061b      	lsls	r3, r3, #24
 80019ca:	4990      	ldr	r1, [pc, #576]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019d0:	e040      	b.n	8001a54 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68db      	ldr	r3, [r3, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d023      	beq.n	8001a22 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019da:	4b8c      	ldr	r3, [pc, #560]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a8b      	ldr	r2, [pc, #556]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 80019e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e6:	f7ff fa6f 	bl	8000ec8 <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019ec:	e008      	b.n	8001a00 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019ee:	f7ff fa6b 	bl	8000ec8 <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e227      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a00:	4b82      	ldr	r3, [pc, #520]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0f0      	beq.n	80019ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0c:	4b7f      	ldr	r3, [pc, #508]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	691b      	ldr	r3, [r3, #16]
 8001a18:	061b      	lsls	r3, r3, #24
 8001a1a:	497c      	ldr	r1, [pc, #496]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	604b      	str	r3, [r1, #4]
 8001a20:	e018      	b.n	8001a54 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a22:	4b7a      	ldr	r3, [pc, #488]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a79      	ldr	r2, [pc, #484]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001a28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fa4b 	bl	8000ec8 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a36:	f7ff fa47 	bl	8000ec8 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e203      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a48:	4b70      	ldr	r3, [pc, #448]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1f0      	bne.n	8001a36 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d03c      	beq.n	8001ada <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d01c      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a68:	4b68      	ldr	r3, [pc, #416]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001a6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a6e:	4a67      	ldr	r2, [pc, #412]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a78:	f7ff fa26 	bl	8000ec8 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a80:	f7ff fa22 	bl	8000ec8 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e1de      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a92:	4b5e      	ldr	r3, [pc, #376]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001a94:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d0ef      	beq.n	8001a80 <HAL_RCC_OscConfig+0x3ec>
 8001aa0:	e01b      	b.n	8001ada <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aa2:	4b5a      	ldr	r3, [pc, #360]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aa8:	4a58      	ldr	r2, [pc, #352]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001aaa:	f023 0301 	bic.w	r3, r3, #1
 8001aae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab2:	f7ff fa09 	bl	8000ec8 <HAL_GetTick>
 8001ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab8:	e008      	b.n	8001acc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aba:	f7ff fa05 	bl	8000ec8 <HAL_GetTick>
 8001abe:	4602      	mov	r2, r0
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	1ad3      	subs	r3, r2, r3
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d901      	bls.n	8001acc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ac8:	2303      	movs	r3, #3
 8001aca:	e1c1      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001acc:	4b4f      	ldr	r3, [pc, #316]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001ace:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d1ef      	bne.n	8001aba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 80a6 	beq.w	8001c34 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001aec:	4b47      	ldr	r3, [pc, #284]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001aee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d10d      	bne.n	8001b14 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af8:	4b44      	ldr	r3, [pc, #272]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afc:	4a43      	ldr	r2, [pc, #268]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b02:	6593      	str	r3, [r2, #88]	; 0x58
 8001b04:	4b41      	ldr	r3, [pc, #260]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b10:	2301      	movs	r3, #1
 8001b12:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b14:	4b3e      	ldr	r3, [pc, #248]	; (8001c10 <HAL_RCC_OscConfig+0x57c>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d118      	bne.n	8001b52 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b20:	4b3b      	ldr	r3, [pc, #236]	; (8001c10 <HAL_RCC_OscConfig+0x57c>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a3a      	ldr	r2, [pc, #232]	; (8001c10 <HAL_RCC_OscConfig+0x57c>)
 8001b26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b2a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2c:	f7ff f9cc 	bl	8000ec8 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b34:	f7ff f9c8 	bl	8000ec8 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e184      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b46:	4b32      	ldr	r3, [pc, #200]	; (8001c10 <HAL_RCC_OscConfig+0x57c>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d0f0      	beq.n	8001b34 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d108      	bne.n	8001b6c <HAL_RCC_OscConfig+0x4d8>
 8001b5a:	4b2c      	ldr	r3, [pc, #176]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b60:	4a2a      	ldr	r2, [pc, #168]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001b62:	f043 0301 	orr.w	r3, r3, #1
 8001b66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b6a:	e024      	b.n	8001bb6 <HAL_RCC_OscConfig+0x522>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	2b05      	cmp	r3, #5
 8001b72:	d110      	bne.n	8001b96 <HAL_RCC_OscConfig+0x502>
 8001b74:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001b76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b7a:	4a24      	ldr	r2, [pc, #144]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001b7c:	f043 0304 	orr.w	r3, r3, #4
 8001b80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b84:	4b21      	ldr	r3, [pc, #132]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8a:	4a20      	ldr	r2, [pc, #128]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b94:	e00f      	b.n	8001bb6 <HAL_RCC_OscConfig+0x522>
 8001b96:	4b1d      	ldr	r3, [pc, #116]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9c:	4a1b      	ldr	r2, [pc, #108]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ba6:	4b19      	ldr	r3, [pc, #100]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bac:	4a17      	ldr	r2, [pc, #92]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001bae:	f023 0304 	bic.w	r3, r3, #4
 8001bb2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d016      	beq.n	8001bec <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bbe:	f7ff f983 	bl	8000ec8 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bc4:	e00a      	b.n	8001bdc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bc6:	f7ff f97f 	bl	8000ec8 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d901      	bls.n	8001bdc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e139      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bdc:	4b0b      	ldr	r3, [pc, #44]	; (8001c0c <HAL_RCC_OscConfig+0x578>)
 8001bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0ed      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x532>
 8001bea:	e01a      	b.n	8001c22 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bec:	f7ff f96c 	bl	8000ec8 <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001bf2:	e00f      	b.n	8001c14 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf4:	f7ff f968 	bl	8000ec8 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d906      	bls.n	8001c14 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e122      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
 8001c0a:	bf00      	nop
 8001c0c:	40021000 	.word	0x40021000
 8001c10:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c14:	4b90      	ldr	r3, [pc, #576]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d1e8      	bne.n	8001bf4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c22:	7ffb      	ldrb	r3, [r7, #31]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d105      	bne.n	8001c34 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c28:	4b8b      	ldr	r3, [pc, #556]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c2c:	4a8a      	ldr	r2, [pc, #552]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001c2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c32:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	f000 8108 	beq.w	8001e4e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	f040 80d0 	bne.w	8001de8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c48:	4b83      	ldr	r3, [pc, #524]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 0203 	and.w	r2, r3, #3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d130      	bne.n	8001cbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	3b01      	subs	r3, #1
 8001c68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d127      	bne.n	8001cbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c78:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d11f      	bne.n	8001cbe <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c84:	687a      	ldr	r2, [r7, #4]
 8001c86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c88:	2a07      	cmp	r2, #7
 8001c8a:	bf14      	ite	ne
 8001c8c:	2201      	movne	r2, #1
 8001c8e:	2200      	moveq	r2, #0
 8001c90:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d113      	bne.n	8001cbe <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca0:	085b      	lsrs	r3, r3, #1
 8001ca2:	3b01      	subs	r3, #1
 8001ca4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d109      	bne.n	8001cbe <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb4:	085b      	lsrs	r3, r3, #1
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d06e      	beq.n	8001d9c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	2b0c      	cmp	r3, #12
 8001cc2:	d069      	beq.n	8001d98 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cc4:	4b64      	ldr	r3, [pc, #400]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d105      	bne.n	8001cdc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cd0:	4b61      	ldr	r3, [pc, #388]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0b7      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ce0:	4b5d      	ldr	r3, [pc, #372]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a5c      	ldr	r2, [pc, #368]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cea:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cec:	f7ff f8ec 	bl	8000ec8 <HAL_GetTick>
 8001cf0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf4:	f7ff f8e8 	bl	8000ec8 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e0a4      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d06:	4b54      	ldr	r3, [pc, #336]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f0      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d12:	4b51      	ldr	r3, [pc, #324]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	4b51      	ldr	r3, [pc, #324]	; (8001e5c <HAL_RCC_OscConfig+0x7c8>)
 8001d18:	4013      	ands	r3, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d22:	3a01      	subs	r2, #1
 8001d24:	0112      	lsls	r2, r2, #4
 8001d26:	4311      	orrs	r1, r2
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d2c:	0212      	lsls	r2, r2, #8
 8001d2e:	4311      	orrs	r1, r2
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d34:	0852      	lsrs	r2, r2, #1
 8001d36:	3a01      	subs	r2, #1
 8001d38:	0552      	lsls	r2, r2, #21
 8001d3a:	4311      	orrs	r1, r2
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d40:	0852      	lsrs	r2, r2, #1
 8001d42:	3a01      	subs	r2, #1
 8001d44:	0652      	lsls	r2, r2, #25
 8001d46:	4311      	orrs	r1, r2
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d4c:	0912      	lsrs	r2, r2, #4
 8001d4e:	0452      	lsls	r2, r2, #17
 8001d50:	430a      	orrs	r2, r1
 8001d52:	4941      	ldr	r1, [pc, #260]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d58:	4b3f      	ldr	r3, [pc, #252]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a3e      	ldr	r2, [pc, #248]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d62:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d64:	4b3c      	ldr	r3, [pc, #240]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	4a3b      	ldr	r2, [pc, #236]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001d6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d6e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d70:	f7ff f8aa 	bl	8000ec8 <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d78:	f7ff f8a6 	bl	8000ec8 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e062      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d8a:	4b33      	ldr	r3, [pc, #204]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d96:	e05a      	b.n	8001e4e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e059      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9c:	4b2e      	ldr	r3, [pc, #184]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d152      	bne.n	8001e4e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001da8:	4b2b      	ldr	r3, [pc, #172]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a2a      	ldr	r2, [pc, #168]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001dae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001db2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001db4:	4b28      	ldr	r3, [pc, #160]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4a27      	ldr	r2, [pc, #156]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001dba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dbe:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dc0:	f7ff f882 	bl	8000ec8 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dc6:	e008      	b.n	8001dda <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc8:	f7ff f87e 	bl	8000ec8 <HAL_GetTick>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	1ad3      	subs	r3, r2, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d901      	bls.n	8001dda <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001dd6:	2303      	movs	r3, #3
 8001dd8:	e03a      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dda:	4b1f      	ldr	r3, [pc, #124]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d0f0      	beq.n	8001dc8 <HAL_RCC_OscConfig+0x734>
 8001de6:	e032      	b.n	8001e4e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001de8:	69bb      	ldr	r3, [r7, #24]
 8001dea:	2b0c      	cmp	r3, #12
 8001dec:	d02d      	beq.n	8001e4a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dee:	4b1a      	ldr	r3, [pc, #104]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a19      	ldr	r2, [pc, #100]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001df4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001df8:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d105      	bne.n	8001e12 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e06:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4a13      	ldr	r2, [pc, #76]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001e0c:	f023 0303 	bic.w	r3, r3, #3
 8001e10:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e12:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	4a10      	ldr	r2, [pc, #64]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001e18:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e20:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e22:	f7ff f851 	bl	8000ec8 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e2a:	f7ff f84d 	bl	8000ec8 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e009      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_RCC_OscConfig+0x7c4>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f0      	bne.n	8001e2a <HAL_RCC_OscConfig+0x796>
 8001e48:	e001      	b.n	8001e4e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3720      	adds	r7, #32
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	f99d808c 	.word	0xf99d808c

08001e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0c8      	b.n	8002006 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e74:	4b66      	ldr	r3, [pc, #408]	; (8002010 <HAL_RCC_ClockConfig+0x1b0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d910      	bls.n	8001ea4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4b63      	ldr	r3, [pc, #396]	; (8002010 <HAL_RCC_ClockConfig+0x1b0>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 0207 	bic.w	r2, r3, #7
 8001e8a:	4961      	ldr	r1, [pc, #388]	; (8002010 <HAL_RCC_ClockConfig+0x1b0>)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b5f      	ldr	r3, [pc, #380]	; (8002010 <HAL_RCC_ClockConfig+0x1b0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0b0      	b.n	8002006 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d04c      	beq.n	8001f4a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d107      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb8:	4b56      	ldr	r3, [pc, #344]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d121      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e09e      	b.n	8002006 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d107      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ed0:	4b50      	ldr	r3, [pc, #320]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d115      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e092      	b.n	8002006 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d107      	bne.n	8001ef8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ee8:	4b4a      	ldr	r3, [pc, #296]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d109      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e086      	b.n	8002006 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ef8:	4b46      	ldr	r3, [pc, #280]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e07e      	b.n	8002006 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f08:	4b42      	ldr	r3, [pc, #264]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f023 0203 	bic.w	r2, r3, #3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	493f      	ldr	r1, [pc, #252]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f1a:	f7fe ffd5 	bl	8000ec8 <HAL_GetTick>
 8001f1e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f20:	e00a      	b.n	8001f38 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f22:	f7fe ffd1 	bl	8000ec8 <HAL_GetTick>
 8001f26:	4602      	mov	r2, r0
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e066      	b.n	8002006 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f38:	4b36      	ldr	r3, [pc, #216]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 020c 	and.w	r2, r3, #12
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d1eb      	bne.n	8001f22 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d008      	beq.n	8001f68 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f56:	4b2f      	ldr	r3, [pc, #188]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	689b      	ldr	r3, [r3, #8]
 8001f62:	492c      	ldr	r1, [pc, #176]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f68:	4b29      	ldr	r3, [pc, #164]	; (8002010 <HAL_RCC_ClockConfig+0x1b0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	683a      	ldr	r2, [r7, #0]
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d210      	bcs.n	8001f98 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f76:	4b26      	ldr	r3, [pc, #152]	; (8002010 <HAL_RCC_ClockConfig+0x1b0>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f023 0207 	bic.w	r2, r3, #7
 8001f7e:	4924      	ldr	r1, [pc, #144]	; (8002010 <HAL_RCC_ClockConfig+0x1b0>)
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <HAL_RCC_ClockConfig+0x1b0>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d001      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	e036      	b.n	8002006 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fa4:	4b1b      	ldr	r3, [pc, #108]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	4918      	ldr	r1, [pc, #96]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d009      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fc2:	4b14      	ldr	r3, [pc, #80]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4910      	ldr	r1, [pc, #64]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fd6:	f000 f825 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	4b0d      	ldr	r3, [pc, #52]	; (8002014 <HAL_RCC_ClockConfig+0x1b4>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	091b      	lsrs	r3, r3, #4
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	490c      	ldr	r1, [pc, #48]	; (8002018 <HAL_RCC_ClockConfig+0x1b8>)
 8001fe8:	5ccb      	ldrb	r3, [r1, r3]
 8001fea:	f003 031f 	and.w	r3, r3, #31
 8001fee:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff2:	4a0a      	ldr	r2, [pc, #40]	; (800201c <HAL_RCC_ClockConfig+0x1bc>)
 8001ff4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe ff14 	bl	8000e28 <HAL_InitTick>
 8002000:	4603      	mov	r3, r0
 8002002:	72fb      	strb	r3, [r7, #11]

  return status;
 8002004:	7afb      	ldrb	r3, [r7, #11]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40022000 	.word	0x40022000
 8002014:	40021000 	.word	0x40021000
 8002018:	08004b1c 	.word	0x08004b1c
 800201c:	20000018 	.word	0x20000018
 8002020:	2000001c 	.word	0x2000001c

08002024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002024:	b480      	push	{r7}
 8002026:	b089      	sub	sp, #36	; 0x24
 8002028:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
 800202e:	2300      	movs	r3, #0
 8002030:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002032:	4b3e      	ldr	r3, [pc, #248]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f003 030c 	and.w	r3, r3, #12
 800203a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800203c:	4b3b      	ldr	r3, [pc, #236]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 800203e:	68db      	ldr	r3, [r3, #12]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x34>
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	2b0c      	cmp	r3, #12
 8002050:	d121      	bne.n	8002096 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d11e      	bne.n	8002096 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002058:	4b34      	ldr	r3, [pc, #208]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0308 	and.w	r3, r3, #8
 8002060:	2b00      	cmp	r3, #0
 8002062:	d107      	bne.n	8002074 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002064:	4b31      	ldr	r3, [pc, #196]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 8002066:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800206a:	0a1b      	lsrs	r3, r3, #8
 800206c:	f003 030f 	and.w	r3, r3, #15
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	e005      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002074:	4b2d      	ldr	r3, [pc, #180]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002080:	4a2b      	ldr	r2, [pc, #172]	; (8002130 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002088:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	2b00      	cmp	r3, #0
 800208e:	d10d      	bne.n	80020ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002094:	e00a      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2b04      	cmp	r3, #4
 800209a:	d102      	bne.n	80020a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800209c:	4b25      	ldr	r3, [pc, #148]	; (8002134 <HAL_RCC_GetSysClockFreq+0x110>)
 800209e:	61bb      	str	r3, [r7, #24]
 80020a0:	e004      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d101      	bne.n	80020ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020a8:	4b23      	ldr	r3, [pc, #140]	; (8002138 <HAL_RCC_GetSysClockFreq+0x114>)
 80020aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	2b0c      	cmp	r3, #12
 80020b0:	d134      	bne.n	800211c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020b2:	4b1e      	ldr	r3, [pc, #120]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f003 0303 	and.w	r3, r3, #3
 80020ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d003      	beq.n	80020ca <HAL_RCC_GetSysClockFreq+0xa6>
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2b03      	cmp	r3, #3
 80020c6:	d003      	beq.n	80020d0 <HAL_RCC_GetSysClockFreq+0xac>
 80020c8:	e005      	b.n	80020d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020ca:	4b1a      	ldr	r3, [pc, #104]	; (8002134 <HAL_RCC_GetSysClockFreq+0x110>)
 80020cc:	617b      	str	r3, [r7, #20]
      break;
 80020ce:	e005      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020d0:	4b19      	ldr	r3, [pc, #100]	; (8002138 <HAL_RCC_GetSysClockFreq+0x114>)
 80020d2:	617b      	str	r3, [r7, #20]
      break;
 80020d4:	e002      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	617b      	str	r3, [r7, #20]
      break;
 80020da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020dc:	4b13      	ldr	r3, [pc, #76]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	091b      	lsrs	r3, r3, #4
 80020e2:	f003 0307 	and.w	r3, r3, #7
 80020e6:	3301      	adds	r3, #1
 80020e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020ea:	4b10      	ldr	r3, [pc, #64]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	0a1b      	lsrs	r3, r3, #8
 80020f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	fb02 f203 	mul.w	r2, r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002100:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002102:	4b0a      	ldr	r3, [pc, #40]	; (800212c <HAL_RCC_GetSysClockFreq+0x108>)
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	0e5b      	lsrs	r3, r3, #25
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	3301      	adds	r3, #1
 800210e:	005b      	lsls	r3, r3, #1
 8002110:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002112:	697a      	ldr	r2, [r7, #20]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	fbb2 f3f3 	udiv	r3, r2, r3
 800211a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800211c:	69bb      	ldr	r3, [r7, #24]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3724      	adds	r7, #36	; 0x24
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	08004b34 	.word	0x08004b34
 8002134:	00f42400 	.word	0x00f42400
 8002138:	007a1200 	.word	0x007a1200

0800213c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002140:	4b03      	ldr	r3, [pc, #12]	; (8002150 <HAL_RCC_GetHCLKFreq+0x14>)
 8002142:	681b      	ldr	r3, [r3, #0]
}
 8002144:	4618      	mov	r0, r3
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000018 	.word	0x20000018

08002154 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002158:	f7ff fff0 	bl	800213c <HAL_RCC_GetHCLKFreq>
 800215c:	4602      	mov	r2, r0
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	0a1b      	lsrs	r3, r3, #8
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	4904      	ldr	r1, [pc, #16]	; (800217c <HAL_RCC_GetPCLK1Freq+0x28>)
 800216a:	5ccb      	ldrb	r3, [r1, r3]
 800216c:	f003 031f 	and.w	r3, r3, #31
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40021000 	.word	0x40021000
 800217c:	08004b2c 	.word	0x08004b2c

08002180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002184:	f7ff ffda 	bl	800213c <HAL_RCC_GetHCLKFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	0adb      	lsrs	r3, r3, #11
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	4904      	ldr	r1, [pc, #16]	; (80021a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002196:	5ccb      	ldrb	r3, [r1, r3]
 8002198:	f003 031f 	and.w	r3, r3, #31
 800219c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40021000 	.word	0x40021000
 80021a8:	08004b2c 	.word	0x08004b2c

080021ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021b8:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021c4:	f7ff fa02 	bl	80015cc <HAL_PWREx_GetVoltageRange>
 80021c8:	6178      	str	r0, [r7, #20]
 80021ca:	e014      	b.n	80021f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021cc:	4b25      	ldr	r3, [pc, #148]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	4a24      	ldr	r2, [pc, #144]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d6:	6593      	str	r3, [r2, #88]	; 0x58
 80021d8:	4b22      	ldr	r3, [pc, #136]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021e4:	f7ff f9f2 	bl	80015cc <HAL_PWREx_GetVoltageRange>
 80021e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021ea:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ee:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021fc:	d10b      	bne.n	8002216 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b80      	cmp	r3, #128	; 0x80
 8002202:	d919      	bls.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2ba0      	cmp	r3, #160	; 0xa0
 8002208:	d902      	bls.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800220a:	2302      	movs	r3, #2
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	e013      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002210:	2301      	movs	r3, #1
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	e010      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b80      	cmp	r3, #128	; 0x80
 800221a:	d902      	bls.n	8002222 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800221c:	2303      	movs	r3, #3
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	e00a      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b80      	cmp	r3, #128	; 0x80
 8002226:	d102      	bne.n	800222e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002228:	2302      	movs	r3, #2
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	e004      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b70      	cmp	r3, #112	; 0x70
 8002232:	d101      	bne.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002234:	2301      	movs	r3, #1
 8002236:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f023 0207 	bic.w	r2, r3, #7
 8002240:	4909      	ldr	r1, [pc, #36]	; (8002268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	429a      	cmp	r2, r3
 8002254:	d001      	beq.n	800225a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	40022000 	.word	0x40022000

0800226c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002274:	2300      	movs	r3, #0
 8002276:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002278:	2300      	movs	r3, #0
 800227a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002284:	2b00      	cmp	r3, #0
 8002286:	d041      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800228c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002290:	d02a      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002292:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002296:	d824      	bhi.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002298:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800229c:	d008      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800229e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022a2:	d81e      	bhi.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00a      	beq.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022ac:	d010      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022ae:	e018      	b.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022b0:	4b86      	ldr	r3, [pc, #536]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4a85      	ldr	r2, [pc, #532]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022bc:	e015      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	3304      	adds	r3, #4
 80022c2:	2100      	movs	r1, #0
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fabb 	bl	8002840 <RCCEx_PLLSAI1_Config>
 80022ca:	4603      	mov	r3, r0
 80022cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022ce:	e00c      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3320      	adds	r3, #32
 80022d4:	2100      	movs	r1, #0
 80022d6:	4618      	mov	r0, r3
 80022d8:	f000 fba6 	bl	8002a28 <RCCEx_PLLSAI2_Config>
 80022dc:	4603      	mov	r3, r0
 80022de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022e0:	e003      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	74fb      	strb	r3, [r7, #19]
      break;
 80022e6:	e000      	b.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80022e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022ea:	7cfb      	ldrb	r3, [r7, #19]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10b      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022f0:	4b76      	ldr	r3, [pc, #472]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022fe:	4973      	ldr	r1, [pc, #460]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002306:	e001      	b.n	800230c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002308:	7cfb      	ldrb	r3, [r7, #19]
 800230a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d041      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800231c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002320:	d02a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002322:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002326:	d824      	bhi.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002328:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800232c:	d008      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800232e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002332:	d81e      	bhi.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002334:	2b00      	cmp	r3, #0
 8002336:	d00a      	beq.n	800234e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002338:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800233c:	d010      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800233e:	e018      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002340:	4b62      	ldr	r3, [pc, #392]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	4a61      	ldr	r2, [pc, #388]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002346:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800234a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800234c:	e015      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	3304      	adds	r3, #4
 8002352:	2100      	movs	r1, #0
 8002354:	4618      	mov	r0, r3
 8002356:	f000 fa73 	bl	8002840 <RCCEx_PLLSAI1_Config>
 800235a:	4603      	mov	r3, r0
 800235c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800235e:	e00c      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3320      	adds	r3, #32
 8002364:	2100      	movs	r1, #0
 8002366:	4618      	mov	r0, r3
 8002368:	f000 fb5e 	bl	8002a28 <RCCEx_PLLSAI2_Config>
 800236c:	4603      	mov	r3, r0
 800236e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002370:	e003      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	74fb      	strb	r3, [r7, #19]
      break;
 8002376:	e000      	b.n	800237a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002378:	bf00      	nop
    }

    if(ret == HAL_OK)
 800237a:	7cfb      	ldrb	r3, [r7, #19]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10b      	bne.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002380:	4b52      	ldr	r3, [pc, #328]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002386:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800238e:	494f      	ldr	r1, [pc, #316]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002390:	4313      	orrs	r3, r2
 8002392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002396:	e001      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002398:	7cfb      	ldrb	r3, [r7, #19]
 800239a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 80a0 	beq.w	80024ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023ae:	4b47      	ldr	r3, [pc, #284]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d101      	bne.n	80023be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80023be:	2300      	movs	r3, #0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d00d      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023c4:	4b41      	ldr	r3, [pc, #260]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c8:	4a40      	ldr	r2, [pc, #256]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ce:	6593      	str	r3, [r2, #88]	; 0x58
 80023d0:	4b3e      	ldr	r3, [pc, #248]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d8:	60bb      	str	r3, [r7, #8]
 80023da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023dc:	2301      	movs	r3, #1
 80023de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023e0:	4b3b      	ldr	r3, [pc, #236]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a3a      	ldr	r2, [pc, #232]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80023e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023ec:	f7fe fd6c 	bl	8000ec8 <HAL_GetTick>
 80023f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023f2:	e009      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023f4:	f7fe fd68 	bl	8000ec8 <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d902      	bls.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	74fb      	strb	r3, [r7, #19]
        break;
 8002406:	e005      	b.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002408:	4b31      	ldr	r3, [pc, #196]	; (80024d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0ef      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d15c      	bne.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800241a:	4b2c      	ldr	r3, [pc, #176]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002420:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002424:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d01f      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002432:	697a      	ldr	r2, [r7, #20]
 8002434:	429a      	cmp	r2, r3
 8002436:	d019      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002438:	4b24      	ldr	r3, [pc, #144]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800243a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002442:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002444:	4b21      	ldr	r3, [pc, #132]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244a:	4a20      	ldr	r2, [pc, #128]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800244c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002450:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002454:	4b1d      	ldr	r3, [pc, #116]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002456:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245a:	4a1c      	ldr	r2, [pc, #112]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800245c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002460:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002464:	4a19      	ldr	r2, [pc, #100]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d016      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002476:	f7fe fd27 	bl	8000ec8 <HAL_GetTick>
 800247a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800247c:	e00b      	b.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800247e:	f7fe fd23 	bl	8000ec8 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	f241 3288 	movw	r2, #5000	; 0x1388
 800248c:	4293      	cmp	r3, r2
 800248e:	d902      	bls.n	8002496 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002490:	2303      	movs	r3, #3
 8002492:	74fb      	strb	r3, [r7, #19]
            break;
 8002494:	e006      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002496:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0ec      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80024a4:	7cfb      	ldrb	r3, [r7, #19]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d10c      	bne.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ba:	4904      	ldr	r1, [pc, #16]	; (80024cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024c2:	e009      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	74bb      	strb	r3, [r7, #18]
 80024c8:	e006      	b.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024d4:	7cfb      	ldrb	r3, [r7, #19]
 80024d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024d8:	7c7b      	ldrb	r3, [r7, #17]
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d105      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024de:	4b9e      	ldr	r3, [pc, #632]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e2:	4a9d      	ldr	r2, [pc, #628]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0301 	and.w	r3, r3, #1
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00a      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024f6:	4b98      	ldr	r3, [pc, #608]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024fc:	f023 0203 	bic.w	r2, r3, #3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002504:	4994      	ldr	r1, [pc, #592]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002506:	4313      	orrs	r3, r2
 8002508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00a      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002518:	4b8f      	ldr	r3, [pc, #572]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251e:	f023 020c 	bic.w	r2, r3, #12
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002526:	498c      	ldr	r1, [pc, #560]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002528:	4313      	orrs	r3, r2
 800252a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0304 	and.w	r3, r3, #4
 8002536:	2b00      	cmp	r3, #0
 8002538:	d00a      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800253a:	4b87      	ldr	r3, [pc, #540]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800253c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002540:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	4983      	ldr	r1, [pc, #524]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254a:	4313      	orrs	r3, r2
 800254c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0308 	and.w	r3, r3, #8
 8002558:	2b00      	cmp	r3, #0
 800255a:	d00a      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800255c:	4b7e      	ldr	r3, [pc, #504]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002562:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800256a:	497b      	ldr	r1, [pc, #492]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256c:	4313      	orrs	r3, r2
 800256e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00a      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800257e:	4b76      	ldr	r3, [pc, #472]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002584:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800258c:	4972      	ldr	r1, [pc, #456]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258e:	4313      	orrs	r3, r2
 8002590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0320 	and.w	r3, r3, #32
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00a      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025a0:	4b6d      	ldr	r3, [pc, #436]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ae:	496a      	ldr	r1, [pc, #424]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d00a      	beq.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025c2:	4b65      	ldr	r3, [pc, #404]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d0:	4961      	ldr	r1, [pc, #388]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d2:	4313      	orrs	r3, r2
 80025d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00a      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80025e4:	4b5c      	ldr	r3, [pc, #368]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025f2:	4959      	ldr	r1, [pc, #356]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00a      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002606:	4b54      	ldr	r3, [pc, #336]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002614:	4950      	ldr	r1, [pc, #320]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00a      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002628:	4b4b      	ldr	r3, [pc, #300]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002636:	4948      	ldr	r1, [pc, #288]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00a      	beq.n	8002660 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800264a:	4b43      	ldr	r3, [pc, #268]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002650:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002658:	493f      	ldr	r1, [pc, #252]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d028      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800266c:	4b3a      	ldr	r3, [pc, #232]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002672:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800267a:	4937      	ldr	r1, [pc, #220]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002686:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800268a:	d106      	bne.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800268c:	4b32      	ldr	r3, [pc, #200]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4a31      	ldr	r2, [pc, #196]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002692:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002696:	60d3      	str	r3, [r2, #12]
 8002698:	e011      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800269e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026a2:	d10c      	bne.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3304      	adds	r3, #4
 80026a8:	2101      	movs	r1, #1
 80026aa:	4618      	mov	r0, r3
 80026ac:	f000 f8c8 	bl	8002840 <RCCEx_PLLSAI1_Config>
 80026b0:	4603      	mov	r3, r0
 80026b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026b4:	7cfb      	ldrb	r3, [r7, #19]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80026ba:	7cfb      	ldrb	r3, [r7, #19]
 80026bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d028      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026ca:	4b23      	ldr	r3, [pc, #140]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	491f      	ldr	r1, [pc, #124]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026da:	4313      	orrs	r3, r2
 80026dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026e8:	d106      	bne.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ea:	4b1b      	ldr	r3, [pc, #108]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	4a1a      	ldr	r2, [pc, #104]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026f4:	60d3      	str	r3, [r2, #12]
 80026f6:	e011      	b.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002700:	d10c      	bne.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	3304      	adds	r3, #4
 8002706:	2101      	movs	r1, #1
 8002708:	4618      	mov	r0, r3
 800270a:	f000 f899 	bl	8002840 <RCCEx_PLLSAI1_Config>
 800270e:	4603      	mov	r3, r0
 8002710:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002712:	7cfb      	ldrb	r3, [r7, #19]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d001      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002718:	7cfb      	ldrb	r3, [r7, #19]
 800271a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d02b      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002736:	4908      	ldr	r1, [pc, #32]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002742:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002746:	d109      	bne.n	800275c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002748:	4b03      	ldr	r3, [pc, #12]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	4a02      	ldr	r2, [pc, #8]	; (8002758 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800274e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002752:	60d3      	str	r3, [r2, #12]
 8002754:	e014      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002756:	bf00      	nop
 8002758:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002760:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002764:	d10c      	bne.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	3304      	adds	r3, #4
 800276a:	2101      	movs	r1, #1
 800276c:	4618      	mov	r0, r3
 800276e:	f000 f867 	bl	8002840 <RCCEx_PLLSAI1_Config>
 8002772:	4603      	mov	r3, r0
 8002774:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002776:	7cfb      	ldrb	r3, [r7, #19]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800277c:	7cfb      	ldrb	r3, [r7, #19]
 800277e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002788:	2b00      	cmp	r3, #0
 800278a:	d02f      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800278c:	4b2b      	ldr	r3, [pc, #172]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002792:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800279a:	4928      	ldr	r1, [pc, #160]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027aa:	d10d      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3304      	adds	r3, #4
 80027b0:	2102      	movs	r1, #2
 80027b2:	4618      	mov	r0, r3
 80027b4:	f000 f844 	bl	8002840 <RCCEx_PLLSAI1_Config>
 80027b8:	4603      	mov	r3, r0
 80027ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d014      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027c2:	7cfb      	ldrb	r3, [r7, #19]
 80027c4:	74bb      	strb	r3, [r7, #18]
 80027c6:	e011      	b.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027d0:	d10c      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3320      	adds	r3, #32
 80027d6:	2102      	movs	r1, #2
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 f925 	bl	8002a28 <RCCEx_PLLSAI2_Config>
 80027de:	4603      	mov	r3, r0
 80027e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027e2:	7cfb      	ldrb	r3, [r7, #19]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d001      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027e8:	7cfb      	ldrb	r3, [r7, #19]
 80027ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00a      	beq.n	800280e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027f8:	4b10      	ldr	r3, [pc, #64]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fe:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002806:	490d      	ldr	r1, [pc, #52]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002808:	4313      	orrs	r3, r2
 800280a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00b      	beq.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800281a:	4b08      	ldr	r3, [pc, #32]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800281c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002820:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800282a:	4904      	ldr	r1, [pc, #16]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800282c:	4313      	orrs	r3, r2
 800282e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002832:	7cbb      	ldrb	r3, [r7, #18]
}
 8002834:	4618      	mov	r0, r3
 8002836:	3718      	adds	r7, #24
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000

08002840 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800284a:	2300      	movs	r3, #0
 800284c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800284e:	4b75      	ldr	r3, [pc, #468]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	f003 0303 	and.w	r3, r3, #3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d018      	beq.n	800288c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800285a:	4b72      	ldr	r3, [pc, #456]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f003 0203 	and.w	r2, r3, #3
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	429a      	cmp	r2, r3
 8002868:	d10d      	bne.n	8002886 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
       ||
 800286e:	2b00      	cmp	r3, #0
 8002870:	d009      	beq.n	8002886 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002872:	4b6c      	ldr	r3, [pc, #432]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	091b      	lsrs	r3, r3, #4
 8002878:	f003 0307 	and.w	r3, r3, #7
 800287c:	1c5a      	adds	r2, r3, #1
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
       ||
 8002882:	429a      	cmp	r2, r3
 8002884:	d047      	beq.n	8002916 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	73fb      	strb	r3, [r7, #15]
 800288a:	e044      	b.n	8002916 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2b03      	cmp	r3, #3
 8002892:	d018      	beq.n	80028c6 <RCCEx_PLLSAI1_Config+0x86>
 8002894:	2b03      	cmp	r3, #3
 8002896:	d825      	bhi.n	80028e4 <RCCEx_PLLSAI1_Config+0xa4>
 8002898:	2b01      	cmp	r3, #1
 800289a:	d002      	beq.n	80028a2 <RCCEx_PLLSAI1_Config+0x62>
 800289c:	2b02      	cmp	r3, #2
 800289e:	d009      	beq.n	80028b4 <RCCEx_PLLSAI1_Config+0x74>
 80028a0:	e020      	b.n	80028e4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028a2:	4b60      	ldr	r3, [pc, #384]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d11d      	bne.n	80028ea <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028b2:	e01a      	b.n	80028ea <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028b4:	4b5b      	ldr	r3, [pc, #364]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d116      	bne.n	80028ee <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028c4:	e013      	b.n	80028ee <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028c6:	4b57      	ldr	r3, [pc, #348]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d10f      	bne.n	80028f2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028d2:	4b54      	ldr	r3, [pc, #336]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d109      	bne.n	80028f2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028e2:	e006      	b.n	80028f2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	73fb      	strb	r3, [r7, #15]
      break;
 80028e8:	e004      	b.n	80028f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028ea:	bf00      	nop
 80028ec:	e002      	b.n	80028f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028ee:	bf00      	nop
 80028f0:	e000      	b.n	80028f4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10d      	bne.n	8002916 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028fa:	4b4a      	ldr	r3, [pc, #296]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fc:	68db      	ldr	r3, [r3, #12]
 80028fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6819      	ldr	r1, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	3b01      	subs	r3, #1
 800290c:	011b      	lsls	r3, r3, #4
 800290e:	430b      	orrs	r3, r1
 8002910:	4944      	ldr	r1, [pc, #272]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002912:	4313      	orrs	r3, r2
 8002914:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d17d      	bne.n	8002a18 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800291c:	4b41      	ldr	r3, [pc, #260]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a40      	ldr	r2, [pc, #256]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002922:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002926:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002928:	f7fe face 	bl	8000ec8 <HAL_GetTick>
 800292c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800292e:	e009      	b.n	8002944 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002930:	f7fe faca 	bl	8000ec8 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d902      	bls.n	8002944 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	73fb      	strb	r3, [r7, #15]
        break;
 8002942:	e005      	b.n	8002950 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002944:	4b37      	ldr	r3, [pc, #220]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1ef      	bne.n	8002930 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002950:	7bfb      	ldrb	r3, [r7, #15]
 8002952:	2b00      	cmp	r3, #0
 8002954:	d160      	bne.n	8002a18 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d111      	bne.n	8002980 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800295c:	4b31      	ldr	r3, [pc, #196]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002964:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	6892      	ldr	r2, [r2, #8]
 800296c:	0211      	lsls	r1, r2, #8
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68d2      	ldr	r2, [r2, #12]
 8002972:	0912      	lsrs	r2, r2, #4
 8002974:	0452      	lsls	r2, r2, #17
 8002976:	430a      	orrs	r2, r1
 8002978:	492a      	ldr	r1, [pc, #168]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 800297a:	4313      	orrs	r3, r2
 800297c:	610b      	str	r3, [r1, #16]
 800297e:	e027      	b.n	80029d0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d112      	bne.n	80029ac <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002986:	4b27      	ldr	r3, [pc, #156]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800298e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6892      	ldr	r2, [r2, #8]
 8002996:	0211      	lsls	r1, r2, #8
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	6912      	ldr	r2, [r2, #16]
 800299c:	0852      	lsrs	r2, r2, #1
 800299e:	3a01      	subs	r2, #1
 80029a0:	0552      	lsls	r2, r2, #21
 80029a2:	430a      	orrs	r2, r1
 80029a4:	491f      	ldr	r1, [pc, #124]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a6:	4313      	orrs	r3, r2
 80029a8:	610b      	str	r3, [r1, #16]
 80029aa:	e011      	b.n	80029d0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029ac:	4b1d      	ldr	r3, [pc, #116]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	6892      	ldr	r2, [r2, #8]
 80029bc:	0211      	lsls	r1, r2, #8
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6952      	ldr	r2, [r2, #20]
 80029c2:	0852      	lsrs	r2, r2, #1
 80029c4:	3a01      	subs	r2, #1
 80029c6:	0652      	lsls	r2, r2, #25
 80029c8:	430a      	orrs	r2, r1
 80029ca:	4916      	ldr	r1, [pc, #88]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029d0:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a13      	ldr	r2, [pc, #76]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029da:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029dc:	f7fe fa74 	bl	8000ec8 <HAL_GetTick>
 80029e0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029e2:	e009      	b.n	80029f8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029e4:	f7fe fa70 	bl	8000ec8 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d902      	bls.n	80029f8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	73fb      	strb	r3, [r7, #15]
          break;
 80029f6:	e005      	b.n	8002a04 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029f8:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0ef      	beq.n	80029e4 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a04:	7bfb      	ldrb	r3, [r7, #15]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d106      	bne.n	8002a18 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a0a:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	4904      	ldr	r1, [pc, #16]	; (8002a24 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40021000 	.word	0x40021000

08002a28 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a32:	2300      	movs	r3, #0
 8002a34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a36:	4b6a      	ldr	r3, [pc, #424]	; (8002be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f003 0303 	and.w	r3, r3, #3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d018      	beq.n	8002a74 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a42:	4b67      	ldr	r3, [pc, #412]	; (8002be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	f003 0203 	and.w	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d10d      	bne.n	8002a6e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
       ||
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d009      	beq.n	8002a6e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a5a:	4b61      	ldr	r3, [pc, #388]	; (8002be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	091b      	lsrs	r3, r3, #4
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	1c5a      	adds	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
       ||
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d047      	beq.n	8002afe <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	73fb      	strb	r3, [r7, #15]
 8002a72:	e044      	b.n	8002afe <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b03      	cmp	r3, #3
 8002a7a:	d018      	beq.n	8002aae <RCCEx_PLLSAI2_Config+0x86>
 8002a7c:	2b03      	cmp	r3, #3
 8002a7e:	d825      	bhi.n	8002acc <RCCEx_PLLSAI2_Config+0xa4>
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d002      	beq.n	8002a8a <RCCEx_PLLSAI2_Config+0x62>
 8002a84:	2b02      	cmp	r3, #2
 8002a86:	d009      	beq.n	8002a9c <RCCEx_PLLSAI2_Config+0x74>
 8002a88:	e020      	b.n	8002acc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a8a:	4b55      	ldr	r3, [pc, #340]	; (8002be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0302 	and.w	r3, r3, #2
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d11d      	bne.n	8002ad2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a9a:	e01a      	b.n	8002ad2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a9c:	4b50      	ldr	r3, [pc, #320]	; (8002be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d116      	bne.n	8002ad6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aac:	e013      	b.n	8002ad6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002aae:	4b4c      	ldr	r3, [pc, #304]	; (8002be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d10f      	bne.n	8002ada <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002aba:	4b49      	ldr	r3, [pc, #292]	; (8002be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d109      	bne.n	8002ada <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002aca:	e006      	b.n	8002ada <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	73fb      	strb	r3, [r7, #15]
      break;
 8002ad0:	e004      	b.n	8002adc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ad2:	bf00      	nop
 8002ad4:	e002      	b.n	8002adc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ad6:	bf00      	nop
 8002ad8:	e000      	b.n	8002adc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002ada:	bf00      	nop
    }

    if(status == HAL_OK)
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10d      	bne.n	8002afe <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ae2:	4b3f      	ldr	r3, [pc, #252]	; (8002be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6819      	ldr	r1, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	3b01      	subs	r3, #1
 8002af4:	011b      	lsls	r3, r3, #4
 8002af6:	430b      	orrs	r3, r1
 8002af8:	4939      	ldr	r1, [pc, #228]	; (8002be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002afe:	7bfb      	ldrb	r3, [r7, #15]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d167      	bne.n	8002bd4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b04:	4b36      	ldr	r3, [pc, #216]	; (8002be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a35      	ldr	r2, [pc, #212]	; (8002be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b10:	f7fe f9da 	bl	8000ec8 <HAL_GetTick>
 8002b14:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b16:	e009      	b.n	8002b2c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b18:	f7fe f9d6 	bl	8000ec8 <HAL_GetTick>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	2b02      	cmp	r3, #2
 8002b24:	d902      	bls.n	8002b2c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	73fb      	strb	r3, [r7, #15]
        break;
 8002b2a:	e005      	b.n	8002b38 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b2c:	4b2c      	ldr	r3, [pc, #176]	; (8002be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1ef      	bne.n	8002b18 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b38:	7bfb      	ldrb	r3, [r7, #15]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d14a      	bne.n	8002bd4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d111      	bne.n	8002b68 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b44:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b46:	695b      	ldr	r3, [r3, #20]
 8002b48:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b50:	687a      	ldr	r2, [r7, #4]
 8002b52:	6892      	ldr	r2, [r2, #8]
 8002b54:	0211      	lsls	r1, r2, #8
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68d2      	ldr	r2, [r2, #12]
 8002b5a:	0912      	lsrs	r2, r2, #4
 8002b5c:	0452      	lsls	r2, r2, #17
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	491f      	ldr	r1, [pc, #124]	; (8002be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	614b      	str	r3, [r1, #20]
 8002b66:	e011      	b.n	8002b8c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b68:	4b1d      	ldr	r3, [pc, #116]	; (8002be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b70:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	6892      	ldr	r2, [r2, #8]
 8002b78:	0211      	lsls	r1, r2, #8
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	6912      	ldr	r2, [r2, #16]
 8002b7e:	0852      	lsrs	r2, r2, #1
 8002b80:	3a01      	subs	r2, #1
 8002b82:	0652      	lsls	r2, r2, #25
 8002b84:	430a      	orrs	r2, r1
 8002b86:	4916      	ldr	r1, [pc, #88]	; (8002be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b8c:	4b14      	ldr	r3, [pc, #80]	; (8002be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a13      	ldr	r2, [pc, #76]	; (8002be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b96:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b98:	f7fe f996 	bl	8000ec8 <HAL_GetTick>
 8002b9c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b9e:	e009      	b.n	8002bb4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ba0:	f7fe f992 	bl	8000ec8 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d902      	bls.n	8002bb4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	73fb      	strb	r3, [r7, #15]
          break;
 8002bb2:	e005      	b.n	8002bc0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bb4:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d0ef      	beq.n	8002ba0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d106      	bne.n	8002bd4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc8:	695a      	ldr	r2, [r3, #20]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	4904      	ldr	r1, [pc, #16]	; (8002be0 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	40021000 	.word	0x40021000

08002be4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d101      	bne.n	8002bf6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e095      	b.n	8002d22 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d108      	bne.n	8002c10 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c06:	d009      	beq.n	8002c1c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	61da      	str	r2, [r3, #28]
 8002c0e:	e005      	b.n	8002c1c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2200      	movs	r2, #0
 8002c1a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d106      	bne.n	8002c3c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f7fd ff26 	bl	8000a88 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2202      	movs	r2, #2
 8002c40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	681a      	ldr	r2, [r3, #0]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c52:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c5c:	d902      	bls.n	8002c64 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	e002      	b.n	8002c6a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c68:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c72:	d007      	beq.n	8002c84 <HAL_SPI_Init+0xa0>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c7c:	d002      	beq.n	8002c84 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c94:	431a      	orrs	r2, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cb2:	431a      	orrs	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	69db      	ldr	r3, [r3, #28]
 8002cb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cbc:	431a      	orrs	r2, r3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a1b      	ldr	r3, [r3, #32]
 8002cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc6:	ea42 0103 	orr.w	r1, r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	0c1b      	lsrs	r3, r3, #16
 8002ce0:	f003 0204 	and.w	r2, r3, #4
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	f003 0310 	and.w	r3, r3, #16
 8002cec:	431a      	orrs	r2, r3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002d00:	ea42 0103 	orr.w	r1, r2, r3
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b088      	sub	sp, #32
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	603b      	str	r3, [r7, #0]
 8002d36:	4613      	mov	r3, r2
 8002d38:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_SPI_Transmit+0x22>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e158      	b.n	8002ffe <HAL_SPI_Transmit+0x2d4>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d54:	f7fe f8b8 	bl	8000ec8 <HAL_GetTick>
 8002d58:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d5a:	88fb      	ldrh	r3, [r7, #6]
 8002d5c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	d002      	beq.n	8002d70 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002d6a:	2302      	movs	r3, #2
 8002d6c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d6e:	e13d      	b.n	8002fec <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_SPI_Transmit+0x52>
 8002d76:	88fb      	ldrh	r3, [r7, #6]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d102      	bne.n	8002d82 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d80:	e134      	b.n	8002fec <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	2203      	movs	r2, #3
 8002d86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	68ba      	ldr	r2, [r7, #8]
 8002d94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	88fa      	ldrh	r2, [r7, #6]
 8002d9a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	88fa      	ldrh	r2, [r7, #6]
 8002da0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dcc:	d10f      	bne.n	8002dee <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ddc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d007      	beq.n	8002e0c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e14:	d94b      	bls.n	8002eae <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <HAL_SPI_Transmit+0xfa>
 8002e1e:	8afb      	ldrh	r3, [r7, #22]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d13e      	bne.n	8002ea2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e28:	881a      	ldrh	r2, [r3, #0]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e34:	1c9a      	adds	r2, r3, #2
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e48:	e02b      	b.n	8002ea2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d112      	bne.n	8002e7e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5c:	881a      	ldrh	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e68:	1c9a      	adds	r2, r3, #2
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e7c:	e011      	b.n	8002ea2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e7e:	f7fe f823 	bl	8000ec8 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d803      	bhi.n	8002e96 <HAL_SPI_Transmit+0x16c>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e94:	d102      	bne.n	8002e9c <HAL_SPI_Transmit+0x172>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d102      	bne.n	8002ea2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ea0:	e0a4      	b.n	8002fec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1ce      	bne.n	8002e4a <HAL_SPI_Transmit+0x120>
 8002eac:	e07c      	b.n	8002fa8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d002      	beq.n	8002ebc <HAL_SPI_Transmit+0x192>
 8002eb6:	8afb      	ldrh	r3, [r7, #22]
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d170      	bne.n	8002f9e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d912      	bls.n	8002eec <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eca:	881a      	ldrh	r2, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed6:	1c9a      	adds	r2, r3, #2
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	3b02      	subs	r3, #2
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002eea:	e058      	b.n	8002f9e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	330c      	adds	r3, #12
 8002ef6:	7812      	ldrb	r2, [r2, #0]
 8002ef8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002f12:	e044      	b.n	8002f9e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d12b      	bne.n	8002f7a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	2b01      	cmp	r3, #1
 8002f2a:	d912      	bls.n	8002f52 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	881a      	ldrh	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	1c9a      	adds	r2, r3, #2
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	3b02      	subs	r3, #2
 8002f4a:	b29a      	uxth	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f50:	e025      	b.n	8002f9e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	330c      	adds	r3, #12
 8002f5c:	7812      	ldrb	r2, [r2, #0]
 8002f5e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f64:	1c5a      	adds	r2, r3, #1
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	3b01      	subs	r3, #1
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f78:	e011      	b.n	8002f9e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f7a:	f7fd ffa5 	bl	8000ec8 <HAL_GetTick>
 8002f7e:	4602      	mov	r2, r0
 8002f80:	69bb      	ldr	r3, [r7, #24]
 8002f82:	1ad3      	subs	r3, r2, r3
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d803      	bhi.n	8002f92 <HAL_SPI_Transmit+0x268>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f90:	d102      	bne.n	8002f98 <HAL_SPI_Transmit+0x26e>
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d102      	bne.n	8002f9e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f9c:	e026      	b.n	8002fec <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1b5      	bne.n	8002f14 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	6839      	ldr	r1, [r7, #0]
 8002fac:	68f8      	ldr	r0, [r7, #12]
 8002fae:	f000 f949 	bl	8003244 <SPI_EndRxTxTransaction>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d10a      	bne.n	8002fdc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d002      	beq.n	8002fea <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	77fb      	strb	r3, [r7, #31]
 8002fe8:	e000      	b.n	8002fec <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002fea:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002ffc:	7ffb      	ldrb	r3, [r7, #31]
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3720      	adds	r7, #32
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003008:	b580      	push	{r7, lr}
 800300a:	b088      	sub	sp, #32
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	603b      	str	r3, [r7, #0]
 8003014:	4613      	mov	r3, r2
 8003016:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003018:	f7fd ff56 	bl	8000ec8 <HAL_GetTick>
 800301c:	4602      	mov	r2, r0
 800301e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	4413      	add	r3, r2
 8003026:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003028:	f7fd ff4e 	bl	8000ec8 <HAL_GetTick>
 800302c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800302e:	4b39      	ldr	r3, [pc, #228]	; (8003114 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	015b      	lsls	r3, r3, #5
 8003034:	0d1b      	lsrs	r3, r3, #20
 8003036:	69fa      	ldr	r2, [r7, #28]
 8003038:	fb02 f303 	mul.w	r3, r2, r3
 800303c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800303e:	e054      	b.n	80030ea <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003046:	d050      	beq.n	80030ea <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003048:	f7fd ff3e 	bl	8000ec8 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	429a      	cmp	r2, r3
 8003056:	d902      	bls.n	800305e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d13d      	bne.n	80030da <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800306c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003076:	d111      	bne.n	800309c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003080:	d004      	beq.n	800308c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800308a:	d107      	bne.n	800309c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800309a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a4:	d10f      	bne.n	80030c6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80030c4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e017      	b.n	800310a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4013      	ands	r3, r2
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	bf0c      	ite	eq
 80030fa:	2301      	moveq	r3, #1
 80030fc:	2300      	movne	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	461a      	mov	r2, r3
 8003102:	79fb      	ldrb	r3, [r7, #7]
 8003104:	429a      	cmp	r2, r3
 8003106:	d19b      	bne.n	8003040 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3720      	adds	r7, #32
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}
 8003112:	bf00      	nop
 8003114:	20000018 	.word	0x20000018

08003118 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08a      	sub	sp, #40	; 0x28
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	60b9      	str	r1, [r7, #8]
 8003122:	607a      	str	r2, [r7, #4]
 8003124:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003126:	2300      	movs	r3, #0
 8003128:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800312a:	f7fd fecd 	bl	8000ec8 <HAL_GetTick>
 800312e:	4602      	mov	r2, r0
 8003130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003132:	1a9b      	subs	r3, r3, r2
 8003134:	683a      	ldr	r2, [r7, #0]
 8003136:	4413      	add	r3, r2
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800313a:	f7fd fec5 	bl	8000ec8 <HAL_GetTick>
 800313e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	330c      	adds	r3, #12
 8003146:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003148:	4b3d      	ldr	r3, [pc, #244]	; (8003240 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	4613      	mov	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	4413      	add	r3, r2
 8003152:	00da      	lsls	r2, r3, #3
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	0d1b      	lsrs	r3, r3, #20
 8003158:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003160:	e060      	b.n	8003224 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003168:	d107      	bne.n	800317a <SPI_WaitFifoStateUntilTimeout+0x62>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d104      	bne.n	800317a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003178:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003180:	d050      	beq.n	8003224 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003182:	f7fd fea1 	bl	8000ec8 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	6a3b      	ldr	r3, [r7, #32]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800318e:	429a      	cmp	r2, r3
 8003190:	d902      	bls.n	8003198 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	2b00      	cmp	r3, #0
 8003196:	d13d      	bne.n	8003214 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031a6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031b0:	d111      	bne.n	80031d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031ba:	d004      	beq.n	80031c6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031c4:	d107      	bne.n	80031d6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031d4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031de:	d10f      	bne.n	8003200 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2201      	movs	r2, #1
 8003204:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003210:	2303      	movs	r3, #3
 8003212:	e010      	b.n	8003236 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800321a:	2300      	movs	r3, #0
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	3b01      	subs	r3, #1
 8003222:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	4013      	ands	r3, r2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	429a      	cmp	r2, r3
 8003232:	d196      	bne.n	8003162 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3728      	adds	r7, #40	; 0x28
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	20000018 	.word	0x20000018

08003244 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af02      	add	r7, sp, #8
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	9300      	str	r3, [sp, #0]
 8003254:	68bb      	ldr	r3, [r7, #8]
 8003256:	2200      	movs	r2, #0
 8003258:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800325c:	68f8      	ldr	r0, [r7, #12]
 800325e:	f7ff ff5b 	bl	8003118 <SPI_WaitFifoStateUntilTimeout>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d007      	beq.n	8003278 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326c:	f043 0220 	orr.w	r2, r3, #32
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003274:	2303      	movs	r3, #3
 8003276:	e027      	b.n	80032c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	2200      	movs	r2, #0
 8003280:	2180      	movs	r1, #128	; 0x80
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f7ff fec0 	bl	8003008 <SPI_WaitFlagStateUntilTimeout>
 8003288:	4603      	mov	r3, r0
 800328a:	2b00      	cmp	r3, #0
 800328c:	d007      	beq.n	800329e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003292:	f043 0220 	orr.w	r2, r3, #32
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e014      	b.n	80032c8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	2200      	movs	r2, #0
 80032a6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f7ff ff34 	bl	8003118 <SPI_WaitFifoStateUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032ba:	f043 0220 	orr.w	r2, r3, #32
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e000      	b.n	80032c8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80032c6:	2300      	movs	r3, #0
}
 80032c8:	4618      	mov	r0, r3
 80032ca:	3710      	adds	r7, #16
 80032cc:	46bd      	mov	sp, r7
 80032ce:	bd80      	pop	{r7, pc}

080032d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b082      	sub	sp, #8
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e040      	b.n	8003364 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7fd fcc4 	bl	8000c80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2224      	movs	r2, #36	; 0x24
 80032fc:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0201 	bic.w	r2, r2, #1
 800330c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f000 fbe8 	bl	8003ae4 <UART_SetConfig>
 8003314:	4603      	mov	r3, r0
 8003316:	2b01      	cmp	r3, #1
 8003318:	d101      	bne.n	800331e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e022      	b.n	8003364 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003322:	2b00      	cmp	r3, #0
 8003324:	d002      	beq.n	800332c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fe66 	bl	8003ff8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	685a      	ldr	r2, [r3, #4]
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800333a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	689a      	ldr	r2, [r3, #8]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800334a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800335c:	6878      	ldr	r0, [r7, #4]
 800335e:	f000 feed 	bl	800413c <UART_CheckIdleState>
 8003362:	4603      	mov	r3, r0
}
 8003364:	4618      	mov	r0, r3
 8003366:	3708      	adds	r7, #8
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}

0800336c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800336c:	b480      	push	{r7}
 800336e:	b08b      	sub	sp, #44	; 0x2c
 8003370:	af00      	add	r7, sp, #0
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	60b9      	str	r1, [r7, #8]
 8003376:	4613      	mov	r3, r2
 8003378:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800337e:	2b20      	cmp	r3, #32
 8003380:	d156      	bne.n	8003430 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d002      	beq.n	800338e <HAL_UART_Transmit_IT+0x22>
 8003388:	88fb      	ldrh	r3, [r7, #6]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e04f      	b.n	8003432 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003398:	2b01      	cmp	r3, #1
 800339a:	d101      	bne.n	80033a0 <HAL_UART_Transmit_IT+0x34>
 800339c:	2302      	movs	r3, #2
 800339e:	e048      	b.n	8003432 <HAL_UART_Transmit_IT+0xc6>
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	88fa      	ldrh	r2, [r7, #6]
 80033b2:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	88fa      	ldrh	r2, [r7, #6]
 80033ba:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2221      	movs	r2, #33	; 0x21
 80033d0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033da:	d107      	bne.n	80033ec <HAL_UART_Transmit_IT+0x80>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	691b      	ldr	r3, [r3, #16]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d103      	bne.n	80033ec <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4a16      	ldr	r2, [pc, #88]	; (8003440 <HAL_UART_Transmit_IT+0xd4>)
 80033e8:	669a      	str	r2, [r3, #104]	; 0x68
 80033ea:	e002      	b.n	80033f2 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	4a15      	ldr	r2, [pc, #84]	; (8003444 <HAL_UART_Transmit_IT+0xd8>)
 80033f0:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	e853 3f00 	ldrex	r3, [r3]
 8003406:	613b      	str	r3, [r7, #16]
   return(result);
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800340e:	627b      	str	r3, [r7, #36]	; 0x24
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	461a      	mov	r2, r3
 8003416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003418:	623b      	str	r3, [r7, #32]
 800341a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800341c:	69f9      	ldr	r1, [r7, #28]
 800341e:	6a3a      	ldr	r2, [r7, #32]
 8003420:	e841 2300 	strex	r3, r2, [r1]
 8003424:	61bb      	str	r3, [r7, #24]
   return(result);
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1e6      	bne.n	80033fa <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800342c:	2300      	movs	r3, #0
 800342e:	e000      	b.n	8003432 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003430:	2302      	movs	r3, #2
  }
}
 8003432:	4618      	mov	r0, r3
 8003434:	372c      	adds	r7, #44	; 0x2c
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	08004697 	.word	0x08004697
 8003444:	080045df 	.word	0x080045df

08003448 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b08a      	sub	sp, #40	; 0x28
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	4613      	mov	r3, r2
 8003454:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800345a:	2b20      	cmp	r3, #32
 800345c:	d142      	bne.n	80034e4 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d002      	beq.n	800346a <HAL_UART_Receive_IT+0x22>
 8003464:	88fb      	ldrh	r3, [r7, #6]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e03b      	b.n	80034e6 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_UART_Receive_IT+0x34>
 8003478:	2302      	movs	r3, #2
 800347a:	e034      	b.n	80034e6 <HAL_UART_Receive_IT+0x9e>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2200      	movs	r2, #0
 8003488:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a18      	ldr	r2, [pc, #96]	; (80034f0 <HAL_UART_Receive_IT+0xa8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d01f      	beq.n	80034d4 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d018      	beq.n	80034d4 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	e853 3f00 	ldrex	r3, [r3]
 80034ae:	613b      	str	r3, [r7, #16]
   return(result);
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034b6:	627b      	str	r3, [r7, #36]	; 0x24
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	461a      	mov	r2, r3
 80034be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034c0:	623b      	str	r3, [r7, #32]
 80034c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c4:	69f9      	ldr	r1, [r7, #28]
 80034c6:	6a3a      	ldr	r2, [r7, #32]
 80034c8:	e841 2300 	strex	r3, r2, [r1]
 80034cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e6      	bne.n	80034a2 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80034d4:	88fb      	ldrh	r3, [r7, #6]
 80034d6:	461a      	mov	r2, r3
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 ff3c 	bl	8004358 <UART_Start_Receive_IT>
 80034e0:	4603      	mov	r3, r0
 80034e2:	e000      	b.n	80034e6 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80034e4:	2302      	movs	r3, #2
  }
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3728      	adds	r7, #40	; 0x28
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}
 80034ee:	bf00      	nop
 80034f0:	40008000 	.word	0x40008000

080034f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b0ba      	sub	sp, #232	; 0xe8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800351a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800351e:	f640 030f 	movw	r3, #2063	; 0x80f
 8003522:	4013      	ands	r3, r2
 8003524:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003528:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800352c:	2b00      	cmp	r3, #0
 800352e:	d115      	bne.n	800355c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00f      	beq.n	800355c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800353c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003540:	f003 0320 	and.w	r3, r3, #32
 8003544:	2b00      	cmp	r3, #0
 8003546:	d009      	beq.n	800355c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 82a6 	beq.w	8003a9e <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	4798      	blx	r3
      }
      return;
 800355a:	e2a0      	b.n	8003a9e <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800355c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 8117 	beq.w	8003794 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003566:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800356a:	f003 0301 	and.w	r3, r3, #1
 800356e:	2b00      	cmp	r3, #0
 8003570:	d106      	bne.n	8003580 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003572:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003576:	4b85      	ldr	r3, [pc, #532]	; (800378c <HAL_UART_IRQHandler+0x298>)
 8003578:	4013      	ands	r3, r2
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 810a 	beq.w	8003794 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b00      	cmp	r3, #0
 800358a:	d011      	beq.n	80035b0 <HAL_UART_IRQHandler+0xbc>
 800358c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00b      	beq.n	80035b0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2201      	movs	r2, #1
 800359e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035a6:	f043 0201 	orr.w	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b4:	f003 0302 	and.w	r3, r3, #2
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d011      	beq.n	80035e0 <HAL_UART_IRQHandler+0xec>
 80035bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035c0:	f003 0301 	and.w	r3, r3, #1
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00b      	beq.n	80035e0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	2202      	movs	r2, #2
 80035ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035d6:	f043 0204 	orr.w	r2, r3, #4
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e4:	f003 0304 	and.w	r3, r3, #4
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d011      	beq.n	8003610 <HAL_UART_IRQHandler+0x11c>
 80035ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00b      	beq.n	8003610 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2204      	movs	r2, #4
 80035fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003606:	f043 0202 	orr.w	r2, r3, #2
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003614:	f003 0308 	and.w	r3, r3, #8
 8003618:	2b00      	cmp	r3, #0
 800361a:	d017      	beq.n	800364c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800361c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003620:	f003 0320 	and.w	r3, r3, #32
 8003624:	2b00      	cmp	r3, #0
 8003626:	d105      	bne.n	8003634 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003628:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800362c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00b      	beq.n	800364c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2208      	movs	r2, #8
 800363a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003642:	f043 0208 	orr.w	r2, r3, #8
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800364c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003654:	2b00      	cmp	r3, #0
 8003656:	d012      	beq.n	800367e <HAL_UART_IRQHandler+0x18a>
 8003658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800365c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003660:	2b00      	cmp	r3, #0
 8003662:	d00c      	beq.n	800367e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800366c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003674:	f043 0220 	orr.w	r2, r3, #32
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 820c 	beq.w	8003aa2 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800368a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00d      	beq.n	80036b2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800369a:	f003 0320 	and.w	r3, r3, #32
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d007      	beq.n	80036b2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d003      	beq.n	80036b2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ae:	6878      	ldr	r0, [r7, #4]
 80036b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c6:	2b40      	cmp	r3, #64	; 0x40
 80036c8:	d005      	beq.n	80036d6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d04f      	beq.n	8003776 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 ff08 	bl	80044ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e6:	2b40      	cmp	r3, #64	; 0x40
 80036e8:	d141      	bne.n	800376e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3308      	adds	r3, #8
 80036f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036f8:	e853 3f00 	ldrex	r3, [r3]
 80036fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003700:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003704:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003708:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	3308      	adds	r3, #8
 8003712:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003716:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800371a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003722:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003726:	e841 2300 	strex	r3, r2, [r1]
 800372a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800372e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d1d9      	bne.n	80036ea <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373a:	2b00      	cmp	r3, #0
 800373c:	d013      	beq.n	8003766 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003742:	4a13      	ldr	r2, [pc, #76]	; (8003790 <HAL_UART_IRQHandler+0x29c>)
 8003744:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	4618      	mov	r0, r3
 800374c:	f7fd fd3b 	bl	80011c6 <HAL_DMA_Abort_IT>
 8003750:	4603      	mov	r3, r0
 8003752:	2b00      	cmp	r3, #0
 8003754:	d017      	beq.n	8003786 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003760:	4610      	mov	r0, r2
 8003762:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003764:	e00f      	b.n	8003786 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 f9a6 	bl	8003ab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800376c:	e00b      	b.n	8003786 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f9a2 	bl	8003ab8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003774:	e007      	b.n	8003786 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f99e 	bl	8003ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003784:	e18d      	b.n	8003aa2 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003786:	bf00      	nop
    return;
 8003788:	e18b      	b.n	8003aa2 <HAL_UART_IRQHandler+0x5ae>
 800378a:	bf00      	nop
 800378c:	04000120 	.word	0x04000120
 8003790:	080045b3 	.word	0x080045b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003798:	2b01      	cmp	r3, #1
 800379a:	f040 8146 	bne.w	8003a2a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800379e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a2:	f003 0310 	and.w	r3, r3, #16
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	f000 813f 	beq.w	8003a2a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80037ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037b0:	f003 0310 	and.w	r3, r3, #16
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 8138 	beq.w	8003a2a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2210      	movs	r2, #16
 80037c0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037cc:	2b40      	cmp	r3, #64	; 0x40
 80037ce:	f040 80b4 	bne.w	800393a <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037de:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 815f 	beq.w	8003aa6 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80037ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037f2:	429a      	cmp	r2, r3
 80037f4:	f080 8157 	bcs.w	8003aa6 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0320 	and.w	r3, r3, #32
 800380e:	2b00      	cmp	r3, #0
 8003810:	f040 8085 	bne.w	800391e <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003820:	e853 3f00 	ldrex	r3, [r3]
 8003824:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003828:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800382c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003830:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	461a      	mov	r2, r3
 800383a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800383e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003842:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003846:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800384a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003856:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1da      	bne.n	8003814 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	3308      	adds	r3, #8
 8003864:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003866:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003868:	e853 3f00 	ldrex	r3, [r3]
 800386c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800386e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003870:	f023 0301 	bic.w	r3, r3, #1
 8003874:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	3308      	adds	r3, #8
 800387e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003882:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003886:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003888:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800388a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800388e:	e841 2300 	strex	r3, r2, [r1]
 8003892:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003894:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1e1      	bne.n	800385e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3308      	adds	r3, #8
 80038a0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038a2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038a4:	e853 3f00 	ldrex	r3, [r3]
 80038a8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	3308      	adds	r3, #8
 80038ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038be:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038c0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038c2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038c4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038c6:	e841 2300 	strex	r3, r2, [r1]
 80038ca:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1e3      	bne.n	800389a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2220      	movs	r2, #32
 80038d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e6:	e853 3f00 	ldrex	r3, [r3]
 80038ea:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ee:	f023 0310 	bic.w	r3, r3, #16
 80038f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003900:	65bb      	str	r3, [r7, #88]	; 0x58
 8003902:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003904:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003906:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003908:	e841 2300 	strex	r3, r2, [r1]
 800390c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800390e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1e4      	bne.n	80038de <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003918:	4618      	mov	r0, r3
 800391a:	f7fd fc16 	bl	800114a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800392a:	b29b      	uxth	r3, r3
 800392c:	1ad3      	subs	r3, r2, r3
 800392e:	b29b      	uxth	r3, r3
 8003930:	4619      	mov	r1, r3
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f000 f8ca 	bl	8003acc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003938:	e0b5      	b.n	8003aa6 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003946:	b29b      	uxth	r3, r3
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003954:	b29b      	uxth	r3, r3
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 80a7 	beq.w	8003aaa <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 800395c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 80a2 	beq.w	8003aaa <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800396c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396e:	e853 3f00 	ldrex	r3, [r3]
 8003972:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003976:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800397a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003988:	647b      	str	r3, [r7, #68]	; 0x44
 800398a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800398e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003990:	e841 2300 	strex	r3, r2, [r1]
 8003994:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003996:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1e4      	bne.n	8003966 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3308      	adds	r3, #8
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a6:	e853 3f00 	ldrex	r3, [r3]
 80039aa:	623b      	str	r3, [r7, #32]
   return(result);
 80039ac:	6a3b      	ldr	r3, [r7, #32]
 80039ae:	f023 0301 	bic.w	r3, r3, #1
 80039b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	3308      	adds	r3, #8
 80039bc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039c0:	633a      	str	r2, [r7, #48]	; 0x30
 80039c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c8:	e841 2300 	strex	r3, r2, [r1]
 80039cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1e3      	bne.n	800399c <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2220      	movs	r2, #32
 80039d8:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	e853 3f00 	ldrex	r3, [r3]
 80039f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0310 	bic.w	r3, r3, #16
 80039fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	461a      	mov	r2, r3
 8003a04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a08:	61fb      	str	r3, [r7, #28]
 8003a0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0c:	69b9      	ldr	r1, [r7, #24]
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	e841 2300 	strex	r3, r2, [r1]
 8003a14:	617b      	str	r3, [r7, #20]
   return(result);
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e4      	bne.n	80039e6 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a20:	4619      	mov	r1, r3
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 f852 	bl	8003acc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a28:	e03f      	b.n	8003aaa <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00e      	beq.n	8003a54 <HAL_UART_IRQHandler+0x560>
 8003a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d008      	beq.n	8003a54 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f001 f80c 	bl	8004a6a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a52:	e02d      	b.n	8003ab0 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00e      	beq.n	8003a7e <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d008      	beq.n	8003a7e <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d01c      	beq.n	8003aae <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	4798      	blx	r3
    }
    return;
 8003a7c:	e017      	b.n	8003aae <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d012      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x5bc>
 8003a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d00c      	beq.n	8003ab0 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fe5d 	bl	8004756 <UART_EndTransmit_IT>
    return;
 8003a9c:	e008      	b.n	8003ab0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003a9e:	bf00      	nop
 8003aa0:	e006      	b.n	8003ab0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003aa2:	bf00      	nop
 8003aa4:	e004      	b.n	8003ab0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003aa6:	bf00      	nop
 8003aa8:	e002      	b.n	8003ab0 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003aaa:	bf00      	nop
 8003aac:	e000      	b.n	8003ab0 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003aae:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003ab0:	37e8      	adds	r7, #232	; 0xe8
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop

08003ab8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b083      	sub	sp, #12
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ae4:	b5b0      	push	{r4, r5, r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003aec:	2300      	movs	r3, #0
 8003aee:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689a      	ldr	r2, [r3, #8]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69db      	ldr	r3, [r3, #28]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	4bad      	ldr	r3, [pc, #692]	; (8003dc4 <UART_SetConfig+0x2e0>)
 8003b10:	4013      	ands	r3, r2
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	6812      	ldr	r2, [r2, #0]
 8003b16:	69f9      	ldr	r1, [r7, #28]
 8003b18:	430b      	orrs	r3, r1
 8003b1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4aa2      	ldr	r2, [pc, #648]	; (8003dc8 <UART_SetConfig+0x2e4>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d004      	beq.n	8003b4c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	69fa      	ldr	r2, [r7, #28]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a99      	ldr	r2, [pc, #612]	; (8003dcc <UART_SetConfig+0x2e8>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d121      	bne.n	8003bae <UART_SetConfig+0xca>
 8003b6a:	4b99      	ldr	r3, [pc, #612]	; (8003dd0 <UART_SetConfig+0x2ec>)
 8003b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	2b03      	cmp	r3, #3
 8003b76:	d817      	bhi.n	8003ba8 <UART_SetConfig+0xc4>
 8003b78:	a201      	add	r2, pc, #4	; (adr r2, 8003b80 <UART_SetConfig+0x9c>)
 8003b7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7e:	bf00      	nop
 8003b80:	08003b91 	.word	0x08003b91
 8003b84:	08003b9d 	.word	0x08003b9d
 8003b88:	08003b97 	.word	0x08003b97
 8003b8c:	08003ba3 	.word	0x08003ba3
 8003b90:	2301      	movs	r3, #1
 8003b92:	76fb      	strb	r3, [r7, #27]
 8003b94:	e0e7      	b.n	8003d66 <UART_SetConfig+0x282>
 8003b96:	2302      	movs	r3, #2
 8003b98:	76fb      	strb	r3, [r7, #27]
 8003b9a:	e0e4      	b.n	8003d66 <UART_SetConfig+0x282>
 8003b9c:	2304      	movs	r3, #4
 8003b9e:	76fb      	strb	r3, [r7, #27]
 8003ba0:	e0e1      	b.n	8003d66 <UART_SetConfig+0x282>
 8003ba2:	2308      	movs	r3, #8
 8003ba4:	76fb      	strb	r3, [r7, #27]
 8003ba6:	e0de      	b.n	8003d66 <UART_SetConfig+0x282>
 8003ba8:	2310      	movs	r3, #16
 8003baa:	76fb      	strb	r3, [r7, #27]
 8003bac:	e0db      	b.n	8003d66 <UART_SetConfig+0x282>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a88      	ldr	r2, [pc, #544]	; (8003dd4 <UART_SetConfig+0x2f0>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d132      	bne.n	8003c1e <UART_SetConfig+0x13a>
 8003bb8:	4b85      	ldr	r3, [pc, #532]	; (8003dd0 <UART_SetConfig+0x2ec>)
 8003bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbe:	f003 030c 	and.w	r3, r3, #12
 8003bc2:	2b0c      	cmp	r3, #12
 8003bc4:	d828      	bhi.n	8003c18 <UART_SetConfig+0x134>
 8003bc6:	a201      	add	r2, pc, #4	; (adr r2, 8003bcc <UART_SetConfig+0xe8>)
 8003bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bcc:	08003c01 	.word	0x08003c01
 8003bd0:	08003c19 	.word	0x08003c19
 8003bd4:	08003c19 	.word	0x08003c19
 8003bd8:	08003c19 	.word	0x08003c19
 8003bdc:	08003c0d 	.word	0x08003c0d
 8003be0:	08003c19 	.word	0x08003c19
 8003be4:	08003c19 	.word	0x08003c19
 8003be8:	08003c19 	.word	0x08003c19
 8003bec:	08003c07 	.word	0x08003c07
 8003bf0:	08003c19 	.word	0x08003c19
 8003bf4:	08003c19 	.word	0x08003c19
 8003bf8:	08003c19 	.word	0x08003c19
 8003bfc:	08003c13 	.word	0x08003c13
 8003c00:	2300      	movs	r3, #0
 8003c02:	76fb      	strb	r3, [r7, #27]
 8003c04:	e0af      	b.n	8003d66 <UART_SetConfig+0x282>
 8003c06:	2302      	movs	r3, #2
 8003c08:	76fb      	strb	r3, [r7, #27]
 8003c0a:	e0ac      	b.n	8003d66 <UART_SetConfig+0x282>
 8003c0c:	2304      	movs	r3, #4
 8003c0e:	76fb      	strb	r3, [r7, #27]
 8003c10:	e0a9      	b.n	8003d66 <UART_SetConfig+0x282>
 8003c12:	2308      	movs	r3, #8
 8003c14:	76fb      	strb	r3, [r7, #27]
 8003c16:	e0a6      	b.n	8003d66 <UART_SetConfig+0x282>
 8003c18:	2310      	movs	r3, #16
 8003c1a:	76fb      	strb	r3, [r7, #27]
 8003c1c:	e0a3      	b.n	8003d66 <UART_SetConfig+0x282>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a6d      	ldr	r2, [pc, #436]	; (8003dd8 <UART_SetConfig+0x2f4>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d120      	bne.n	8003c6a <UART_SetConfig+0x186>
 8003c28:	4b69      	ldr	r3, [pc, #420]	; (8003dd0 <UART_SetConfig+0x2ec>)
 8003c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c32:	2b30      	cmp	r3, #48	; 0x30
 8003c34:	d013      	beq.n	8003c5e <UART_SetConfig+0x17a>
 8003c36:	2b30      	cmp	r3, #48	; 0x30
 8003c38:	d814      	bhi.n	8003c64 <UART_SetConfig+0x180>
 8003c3a:	2b20      	cmp	r3, #32
 8003c3c:	d009      	beq.n	8003c52 <UART_SetConfig+0x16e>
 8003c3e:	2b20      	cmp	r3, #32
 8003c40:	d810      	bhi.n	8003c64 <UART_SetConfig+0x180>
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d002      	beq.n	8003c4c <UART_SetConfig+0x168>
 8003c46:	2b10      	cmp	r3, #16
 8003c48:	d006      	beq.n	8003c58 <UART_SetConfig+0x174>
 8003c4a:	e00b      	b.n	8003c64 <UART_SetConfig+0x180>
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	76fb      	strb	r3, [r7, #27]
 8003c50:	e089      	b.n	8003d66 <UART_SetConfig+0x282>
 8003c52:	2302      	movs	r3, #2
 8003c54:	76fb      	strb	r3, [r7, #27]
 8003c56:	e086      	b.n	8003d66 <UART_SetConfig+0x282>
 8003c58:	2304      	movs	r3, #4
 8003c5a:	76fb      	strb	r3, [r7, #27]
 8003c5c:	e083      	b.n	8003d66 <UART_SetConfig+0x282>
 8003c5e:	2308      	movs	r3, #8
 8003c60:	76fb      	strb	r3, [r7, #27]
 8003c62:	e080      	b.n	8003d66 <UART_SetConfig+0x282>
 8003c64:	2310      	movs	r3, #16
 8003c66:	76fb      	strb	r3, [r7, #27]
 8003c68:	e07d      	b.n	8003d66 <UART_SetConfig+0x282>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a5b      	ldr	r2, [pc, #364]	; (8003ddc <UART_SetConfig+0x2f8>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d120      	bne.n	8003cb6 <UART_SetConfig+0x1d2>
 8003c74:	4b56      	ldr	r3, [pc, #344]	; (8003dd0 <UART_SetConfig+0x2ec>)
 8003c76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c7a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c7e:	2bc0      	cmp	r3, #192	; 0xc0
 8003c80:	d013      	beq.n	8003caa <UART_SetConfig+0x1c6>
 8003c82:	2bc0      	cmp	r3, #192	; 0xc0
 8003c84:	d814      	bhi.n	8003cb0 <UART_SetConfig+0x1cc>
 8003c86:	2b80      	cmp	r3, #128	; 0x80
 8003c88:	d009      	beq.n	8003c9e <UART_SetConfig+0x1ba>
 8003c8a:	2b80      	cmp	r3, #128	; 0x80
 8003c8c:	d810      	bhi.n	8003cb0 <UART_SetConfig+0x1cc>
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d002      	beq.n	8003c98 <UART_SetConfig+0x1b4>
 8003c92:	2b40      	cmp	r3, #64	; 0x40
 8003c94:	d006      	beq.n	8003ca4 <UART_SetConfig+0x1c0>
 8003c96:	e00b      	b.n	8003cb0 <UART_SetConfig+0x1cc>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	76fb      	strb	r3, [r7, #27]
 8003c9c:	e063      	b.n	8003d66 <UART_SetConfig+0x282>
 8003c9e:	2302      	movs	r3, #2
 8003ca0:	76fb      	strb	r3, [r7, #27]
 8003ca2:	e060      	b.n	8003d66 <UART_SetConfig+0x282>
 8003ca4:	2304      	movs	r3, #4
 8003ca6:	76fb      	strb	r3, [r7, #27]
 8003ca8:	e05d      	b.n	8003d66 <UART_SetConfig+0x282>
 8003caa:	2308      	movs	r3, #8
 8003cac:	76fb      	strb	r3, [r7, #27]
 8003cae:	e05a      	b.n	8003d66 <UART_SetConfig+0x282>
 8003cb0:	2310      	movs	r3, #16
 8003cb2:	76fb      	strb	r3, [r7, #27]
 8003cb4:	e057      	b.n	8003d66 <UART_SetConfig+0x282>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a49      	ldr	r2, [pc, #292]	; (8003de0 <UART_SetConfig+0x2fc>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d125      	bne.n	8003d0c <UART_SetConfig+0x228>
 8003cc0:	4b43      	ldr	r3, [pc, #268]	; (8003dd0 <UART_SetConfig+0x2ec>)
 8003cc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003cca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cce:	d017      	beq.n	8003d00 <UART_SetConfig+0x21c>
 8003cd0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cd4:	d817      	bhi.n	8003d06 <UART_SetConfig+0x222>
 8003cd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cda:	d00b      	beq.n	8003cf4 <UART_SetConfig+0x210>
 8003cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ce0:	d811      	bhi.n	8003d06 <UART_SetConfig+0x222>
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <UART_SetConfig+0x20a>
 8003ce6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cea:	d006      	beq.n	8003cfa <UART_SetConfig+0x216>
 8003cec:	e00b      	b.n	8003d06 <UART_SetConfig+0x222>
 8003cee:	2300      	movs	r3, #0
 8003cf0:	76fb      	strb	r3, [r7, #27]
 8003cf2:	e038      	b.n	8003d66 <UART_SetConfig+0x282>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	76fb      	strb	r3, [r7, #27]
 8003cf8:	e035      	b.n	8003d66 <UART_SetConfig+0x282>
 8003cfa:	2304      	movs	r3, #4
 8003cfc:	76fb      	strb	r3, [r7, #27]
 8003cfe:	e032      	b.n	8003d66 <UART_SetConfig+0x282>
 8003d00:	2308      	movs	r3, #8
 8003d02:	76fb      	strb	r3, [r7, #27]
 8003d04:	e02f      	b.n	8003d66 <UART_SetConfig+0x282>
 8003d06:	2310      	movs	r3, #16
 8003d08:	76fb      	strb	r3, [r7, #27]
 8003d0a:	e02c      	b.n	8003d66 <UART_SetConfig+0x282>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a2d      	ldr	r2, [pc, #180]	; (8003dc8 <UART_SetConfig+0x2e4>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d125      	bne.n	8003d62 <UART_SetConfig+0x27e>
 8003d16:	4b2e      	ldr	r3, [pc, #184]	; (8003dd0 <UART_SetConfig+0x2ec>)
 8003d18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d1c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d20:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d24:	d017      	beq.n	8003d56 <UART_SetConfig+0x272>
 8003d26:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d2a:	d817      	bhi.n	8003d5c <UART_SetConfig+0x278>
 8003d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d30:	d00b      	beq.n	8003d4a <UART_SetConfig+0x266>
 8003d32:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d36:	d811      	bhi.n	8003d5c <UART_SetConfig+0x278>
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <UART_SetConfig+0x260>
 8003d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d40:	d006      	beq.n	8003d50 <UART_SetConfig+0x26c>
 8003d42:	e00b      	b.n	8003d5c <UART_SetConfig+0x278>
 8003d44:	2300      	movs	r3, #0
 8003d46:	76fb      	strb	r3, [r7, #27]
 8003d48:	e00d      	b.n	8003d66 <UART_SetConfig+0x282>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	76fb      	strb	r3, [r7, #27]
 8003d4e:	e00a      	b.n	8003d66 <UART_SetConfig+0x282>
 8003d50:	2304      	movs	r3, #4
 8003d52:	76fb      	strb	r3, [r7, #27]
 8003d54:	e007      	b.n	8003d66 <UART_SetConfig+0x282>
 8003d56:	2308      	movs	r3, #8
 8003d58:	76fb      	strb	r3, [r7, #27]
 8003d5a:	e004      	b.n	8003d66 <UART_SetConfig+0x282>
 8003d5c:	2310      	movs	r3, #16
 8003d5e:	76fb      	strb	r3, [r7, #27]
 8003d60:	e001      	b.n	8003d66 <UART_SetConfig+0x282>
 8003d62:	2310      	movs	r3, #16
 8003d64:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a17      	ldr	r2, [pc, #92]	; (8003dc8 <UART_SetConfig+0x2e4>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	f040 8087 	bne.w	8003e80 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003d72:	7efb      	ldrb	r3, [r7, #27]
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d837      	bhi.n	8003de8 <UART_SetConfig+0x304>
 8003d78:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <UART_SetConfig+0x29c>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003da5 	.word	0x08003da5
 8003d84:	08003de9 	.word	0x08003de9
 8003d88:	08003dad 	.word	0x08003dad
 8003d8c:	08003de9 	.word	0x08003de9
 8003d90:	08003db3 	.word	0x08003db3
 8003d94:	08003de9 	.word	0x08003de9
 8003d98:	08003de9 	.word	0x08003de9
 8003d9c:	08003de9 	.word	0x08003de9
 8003da0:	08003dbb 	.word	0x08003dbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003da4:	f7fe f9d6 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 8003da8:	6178      	str	r0, [r7, #20]
        break;
 8003daa:	e022      	b.n	8003df2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dac:	4b0d      	ldr	r3, [pc, #52]	; (8003de4 <UART_SetConfig+0x300>)
 8003dae:	617b      	str	r3, [r7, #20]
        break;
 8003db0:	e01f      	b.n	8003df2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003db2:	f7fe f937 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8003db6:	6178      	str	r0, [r7, #20]
        break;
 8003db8:	e01b      	b.n	8003df2 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dbe:	617b      	str	r3, [r7, #20]
        break;
 8003dc0:	e017      	b.n	8003df2 <UART_SetConfig+0x30e>
 8003dc2:	bf00      	nop
 8003dc4:	efff69f3 	.word	0xefff69f3
 8003dc8:	40008000 	.word	0x40008000
 8003dcc:	40013800 	.word	0x40013800
 8003dd0:	40021000 	.word	0x40021000
 8003dd4:	40004400 	.word	0x40004400
 8003dd8:	40004800 	.word	0x40004800
 8003ddc:	40004c00 	.word	0x40004c00
 8003de0:	40005000 	.word	0x40005000
 8003de4:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003dec:	2301      	movs	r3, #1
 8003dee:	76bb      	strb	r3, [r7, #26]
        break;
 8003df0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 80f1 	beq.w	8003fdc <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685a      	ldr	r2, [r3, #4]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	4413      	add	r3, r2
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d305      	bcc.n	8003e16 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d902      	bls.n	8003e1c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	76bb      	strb	r3, [r7, #26]
 8003e1a:	e0df      	b.n	8003fdc <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f04f 0100 	mov.w	r1, #0
 8003e24:	f04f 0200 	mov.w	r2, #0
 8003e28:	f04f 0300 	mov.w	r3, #0
 8003e2c:	020b      	lsls	r3, r1, #8
 8003e2e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e32:	0202      	lsls	r2, r0, #8
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	6849      	ldr	r1, [r1, #4]
 8003e38:	0849      	lsrs	r1, r1, #1
 8003e3a:	4608      	mov	r0, r1
 8003e3c:	f04f 0100 	mov.w	r1, #0
 8003e40:	1814      	adds	r4, r2, r0
 8003e42:	eb43 0501 	adc.w	r5, r3, r1
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	4620      	mov	r0, r4
 8003e52:	4629      	mov	r1, r5
 8003e54:	f7fc f9b8 	bl	80001c8 <__aeabi_uldivmod>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	460b      	mov	r3, r1
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e66:	d308      	bcc.n	8003e7a <UART_SetConfig+0x396>
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e6e:	d204      	bcs.n	8003e7a <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	60da      	str	r2, [r3, #12]
 8003e78:	e0b0      	b.n	8003fdc <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	76bb      	strb	r3, [r7, #26]
 8003e7e:	e0ad      	b.n	8003fdc <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	69db      	ldr	r3, [r3, #28]
 8003e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e88:	d15b      	bne.n	8003f42 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8003e8a:	7efb      	ldrb	r3, [r7, #27]
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d828      	bhi.n	8003ee2 <UART_SetConfig+0x3fe>
 8003e90:	a201      	add	r2, pc, #4	; (adr r2, 8003e98 <UART_SetConfig+0x3b4>)
 8003e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e96:	bf00      	nop
 8003e98:	08003ebd 	.word	0x08003ebd
 8003e9c:	08003ec5 	.word	0x08003ec5
 8003ea0:	08003ecd 	.word	0x08003ecd
 8003ea4:	08003ee3 	.word	0x08003ee3
 8003ea8:	08003ed3 	.word	0x08003ed3
 8003eac:	08003ee3 	.word	0x08003ee3
 8003eb0:	08003ee3 	.word	0x08003ee3
 8003eb4:	08003ee3 	.word	0x08003ee3
 8003eb8:	08003edb 	.word	0x08003edb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ebc:	f7fe f94a 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 8003ec0:	6178      	str	r0, [r7, #20]
        break;
 8003ec2:	e013      	b.n	8003eec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ec4:	f7fe f95c 	bl	8002180 <HAL_RCC_GetPCLK2Freq>
 8003ec8:	6178      	str	r0, [r7, #20]
        break;
 8003eca:	e00f      	b.n	8003eec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ecc:	4b49      	ldr	r3, [pc, #292]	; (8003ff4 <UART_SetConfig+0x510>)
 8003ece:	617b      	str	r3, [r7, #20]
        break;
 8003ed0:	e00c      	b.n	8003eec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ed2:	f7fe f8a7 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8003ed6:	6178      	str	r0, [r7, #20]
        break;
 8003ed8:	e008      	b.n	8003eec <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ede:	617b      	str	r3, [r7, #20]
        break;
 8003ee0:	e004      	b.n	8003eec <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	76bb      	strb	r3, [r7, #26]
        break;
 8003eea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d074      	beq.n	8003fdc <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	005a      	lsls	r2, r3, #1
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	085b      	lsrs	r3, r3, #1
 8003efc:	441a      	add	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f06:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	2b0f      	cmp	r3, #15
 8003f0c:	d916      	bls.n	8003f3c <UART_SetConfig+0x458>
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f14:	d212      	bcs.n	8003f3c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	b29b      	uxth	r3, r3
 8003f1a:	f023 030f 	bic.w	r3, r3, #15
 8003f1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	085b      	lsrs	r3, r3, #1
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	f003 0307 	and.w	r3, r3, #7
 8003f2a:	b29a      	uxth	r2, r3
 8003f2c:	89fb      	ldrh	r3, [r7, #14]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	89fa      	ldrh	r2, [r7, #14]
 8003f38:	60da      	str	r2, [r3, #12]
 8003f3a:	e04f      	b.n	8003fdc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	76bb      	strb	r3, [r7, #26]
 8003f40:	e04c      	b.n	8003fdc <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f42:	7efb      	ldrb	r3, [r7, #27]
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d828      	bhi.n	8003f9a <UART_SetConfig+0x4b6>
 8003f48:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <UART_SetConfig+0x46c>)
 8003f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4e:	bf00      	nop
 8003f50:	08003f75 	.word	0x08003f75
 8003f54:	08003f7d 	.word	0x08003f7d
 8003f58:	08003f85 	.word	0x08003f85
 8003f5c:	08003f9b 	.word	0x08003f9b
 8003f60:	08003f8b 	.word	0x08003f8b
 8003f64:	08003f9b 	.word	0x08003f9b
 8003f68:	08003f9b 	.word	0x08003f9b
 8003f6c:	08003f9b 	.word	0x08003f9b
 8003f70:	08003f93 	.word	0x08003f93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f74:	f7fe f8ee 	bl	8002154 <HAL_RCC_GetPCLK1Freq>
 8003f78:	6178      	str	r0, [r7, #20]
        break;
 8003f7a:	e013      	b.n	8003fa4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f7c:	f7fe f900 	bl	8002180 <HAL_RCC_GetPCLK2Freq>
 8003f80:	6178      	str	r0, [r7, #20]
        break;
 8003f82:	e00f      	b.n	8003fa4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f84:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <UART_SetConfig+0x510>)
 8003f86:	617b      	str	r3, [r7, #20]
        break;
 8003f88:	e00c      	b.n	8003fa4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f8a:	f7fe f84b 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8003f8e:	6178      	str	r0, [r7, #20]
        break;
 8003f90:	e008      	b.n	8003fa4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f96:	617b      	str	r3, [r7, #20]
        break;
 8003f98:	e004      	b.n	8003fa4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	76bb      	strb	r3, [r7, #26]
        break;
 8003fa2:	bf00      	nop
    }

    if (pclk != 0U)
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d018      	beq.n	8003fdc <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	085a      	lsrs	r2, r3, #1
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	441a      	add	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	2b0f      	cmp	r3, #15
 8003fc2:	d909      	bls.n	8003fd8 <UART_SetConfig+0x4f4>
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fca:	d205      	bcs.n	8003fd8 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	b29a      	uxth	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	60da      	str	r2, [r3, #12]
 8003fd6:	e001      	b.n	8003fdc <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003fe8:	7ebb      	ldrb	r3, [r7, #26]
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3720      	adds	r7, #32
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bdb0      	pop	{r4, r5, r7, pc}
 8003ff2:	bf00      	nop
 8003ff4:	00f42400 	.word	0x00f42400

08003ff8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004004:	f003 0301 	and.w	r3, r3, #1
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	430a      	orrs	r2, r1
 8004020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	f003 0304 	and.w	r3, r3, #4
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	430a      	orrs	r2, r1
 8004064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	430a      	orrs	r2, r1
 8004086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	430a      	orrs	r2, r1
 80040a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d01a      	beq.n	800410e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	430a      	orrs	r2, r1
 80040ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040f6:	d10a      	bne.n	800410e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	430a      	orrs	r2, r1
 800410c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004116:	2b00      	cmp	r3, #0
 8004118:	d00a      	beq.n	8004130 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	430a      	orrs	r2, r1
 800412e:	605a      	str	r2, [r3, #4]
  }
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af02      	add	r7, sp, #8
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800414c:	f7fc febc 	bl	8000ec8 <HAL_GetTick>
 8004150:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0308 	and.w	r3, r3, #8
 800415c:	2b08      	cmp	r3, #8
 800415e:	d10e      	bne.n	800417e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004160:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 f82d 	bl	80041ce <UART_WaitOnFlagUntilTimeout>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e023      	b.n	80041c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0304 	and.w	r3, r3, #4
 8004188:	2b04      	cmp	r3, #4
 800418a:	d10e      	bne.n	80041aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800418c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f000 f817 	bl	80041ce <UART_WaitOnFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e00d      	b.n	80041c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2220      	movs	r2, #32
 80041ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2220      	movs	r2, #32
 80041b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3710      	adds	r7, #16
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}

080041ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80041ce:	b580      	push	{r7, lr}
 80041d0:	b09c      	sub	sp, #112	; 0x70
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	60f8      	str	r0, [r7, #12]
 80041d6:	60b9      	str	r1, [r7, #8]
 80041d8:	603b      	str	r3, [r7, #0]
 80041da:	4613      	mov	r3, r2
 80041dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041de:	e0a5      	b.n	800432c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e6:	f000 80a1 	beq.w	800432c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ea:	f7fc fe6d 	bl	8000ec8 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d302      	bcc.n	8004200 <UART_WaitOnFlagUntilTimeout+0x32>
 80041fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d13e      	bne.n	800427e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004208:	e853 3f00 	ldrex	r3, [r3]
 800420c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800420e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004210:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004214:	667b      	str	r3, [r7, #100]	; 0x64
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	461a      	mov	r2, r3
 800421c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800421e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004220:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004222:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004224:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004226:	e841 2300 	strex	r3, r2, [r1]
 800422a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800422c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800422e:	2b00      	cmp	r3, #0
 8004230:	d1e6      	bne.n	8004200 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3308      	adds	r3, #8
 8004238:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800423c:	e853 3f00 	ldrex	r3, [r3]
 8004240:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004244:	f023 0301 	bic.w	r3, r3, #1
 8004248:	663b      	str	r3, [r7, #96]	; 0x60
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	3308      	adds	r3, #8
 8004250:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004252:	64ba      	str	r2, [r7, #72]	; 0x48
 8004254:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004256:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004258:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800425a:	e841 2300 	strex	r3, r2, [r1]
 800425e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1e5      	bne.n	8004232 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2220      	movs	r2, #32
 800426a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e067      	b.n	800434e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0304 	and.w	r3, r3, #4
 8004288:	2b00      	cmp	r3, #0
 800428a:	d04f      	beq.n	800432c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	69db      	ldr	r3, [r3, #28]
 8004292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800429a:	d147      	bne.n	800432c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042a4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ae:	e853 3f00 	ldrex	r3, [r3]
 80042b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	461a      	mov	r2, r3
 80042c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042c4:	637b      	str	r3, [r7, #52]	; 0x34
 80042c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042cc:	e841 2300 	strex	r3, r2, [r1]
 80042d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1e6      	bne.n	80042a6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	3308      	adds	r3, #8
 80042de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	e853 3f00 	ldrex	r3, [r3]
 80042e6:	613b      	str	r3, [r7, #16]
   return(result);
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	f023 0301 	bic.w	r3, r3, #1
 80042ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	3308      	adds	r3, #8
 80042f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80042f8:	623a      	str	r2, [r7, #32]
 80042fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042fc:	69f9      	ldr	r1, [r7, #28]
 80042fe:	6a3a      	ldr	r2, [r7, #32]
 8004300:	e841 2300 	strex	r3, r2, [r1]
 8004304:	61bb      	str	r3, [r7, #24]
   return(result);
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1e5      	bne.n	80042d8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2220      	movs	r2, #32
 8004310:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2220      	movs	r2, #32
 8004316:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004328:	2303      	movs	r3, #3
 800432a:	e010      	b.n	800434e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	69da      	ldr	r2, [r3, #28]
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	4013      	ands	r3, r2
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	429a      	cmp	r2, r3
 800433a:	bf0c      	ite	eq
 800433c:	2301      	moveq	r3, #1
 800433e:	2300      	movne	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	461a      	mov	r2, r3
 8004344:	79fb      	ldrb	r3, [r7, #7]
 8004346:	429a      	cmp	r2, r3
 8004348:	f43f af4a 	beq.w	80041e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3770      	adds	r7, #112	; 0x70
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004358:	b480      	push	{r7}
 800435a:	b097      	sub	sp, #92	; 0x5c
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	4613      	mov	r3, r2
 8004364:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	88fa      	ldrh	r2, [r7, #6]
 8004370:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	88fa      	ldrh	r2, [r7, #6]
 8004378:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800438a:	d10e      	bne.n	80043aa <UART_Start_Receive_IT+0x52>
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	691b      	ldr	r3, [r3, #16]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d105      	bne.n	80043a0 <UART_Start_Receive_IT+0x48>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f240 12ff 	movw	r2, #511	; 0x1ff
 800439a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800439e:	e02d      	b.n	80043fc <UART_Start_Receive_IT+0xa4>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	22ff      	movs	r2, #255	; 0xff
 80043a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043a8:	e028      	b.n	80043fc <UART_Start_Receive_IT+0xa4>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10d      	bne.n	80043ce <UART_Start_Receive_IT+0x76>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d104      	bne.n	80043c4 <UART_Start_Receive_IT+0x6c>
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	22ff      	movs	r2, #255	; 0xff
 80043be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043c2:	e01b      	b.n	80043fc <UART_Start_Receive_IT+0xa4>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	227f      	movs	r2, #127	; 0x7f
 80043c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043cc:	e016      	b.n	80043fc <UART_Start_Receive_IT+0xa4>
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	689b      	ldr	r3, [r3, #8]
 80043d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043d6:	d10d      	bne.n	80043f4 <UART_Start_Receive_IT+0x9c>
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d104      	bne.n	80043ea <UART_Start_Receive_IT+0x92>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	227f      	movs	r2, #127	; 0x7f
 80043e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043e8:	e008      	b.n	80043fc <UART_Start_Receive_IT+0xa4>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	223f      	movs	r2, #63	; 0x3f
 80043ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043f2:	e003      	b.n	80043fc <UART_Start_Receive_IT+0xa4>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2222      	movs	r2, #34	; 0x22
 8004408:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	3308      	adds	r3, #8
 8004410:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004414:	e853 3f00 	ldrex	r3, [r3]
 8004418:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800441a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441c:	f043 0301 	orr.w	r3, r3, #1
 8004420:	657b      	str	r3, [r7, #84]	; 0x54
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	3308      	adds	r3, #8
 8004428:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800442a:	64ba      	str	r2, [r7, #72]	; 0x48
 800442c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004432:	e841 2300 	strex	r3, r2, [r1]
 8004436:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d1e5      	bne.n	800440a <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004446:	d107      	bne.n	8004458 <UART_Start_Receive_IT+0x100>
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	691b      	ldr	r3, [r3, #16]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d103      	bne.n	8004458 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4a24      	ldr	r2, [pc, #144]	; (80044e4 <UART_Start_Receive_IT+0x18c>)
 8004454:	665a      	str	r2, [r3, #100]	; 0x64
 8004456:	e002      	b.n	800445e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4a23      	ldr	r2, [pc, #140]	; (80044e8 <UART_Start_Receive_IT+0x190>)
 800445c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2200      	movs	r2, #0
 8004462:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d019      	beq.n	80044a2 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004476:	e853 3f00 	ldrex	r3, [r3]
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	461a      	mov	r2, r3
 800448a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800448c:	637b      	str	r3, [r7, #52]	; 0x34
 800448e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004490:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004494:	e841 2300 	strex	r3, r2, [r1]
 8004498:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800449a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449c:	2b00      	cmp	r3, #0
 800449e:	d1e6      	bne.n	800446e <UART_Start_Receive_IT+0x116>
 80044a0:	e018      	b.n	80044d4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	e853 3f00 	ldrex	r3, [r3]
 80044ae:	613b      	str	r3, [r7, #16]
   return(result);
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	f043 0320 	orr.w	r3, r3, #32
 80044b6:	653b      	str	r3, [r7, #80]	; 0x50
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	461a      	mov	r2, r3
 80044be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044c0:	623b      	str	r3, [r7, #32]
 80044c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c4:	69f9      	ldr	r1, [r7, #28]
 80044c6:	6a3a      	ldr	r2, [r7, #32]
 80044c8:	e841 2300 	strex	r3, r2, [r1]
 80044cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d1e6      	bne.n	80044a2 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80044d4:	2300      	movs	r3, #0
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	375c      	adds	r7, #92	; 0x5c
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	0800490b 	.word	0x0800490b
 80044e8:	080047ab 	.word	0x080047ab

080044ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b095      	sub	sp, #84	; 0x54
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044fc:	e853 3f00 	ldrex	r3, [r3]
 8004500:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004504:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004508:	64fb      	str	r3, [r7, #76]	; 0x4c
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004512:	643b      	str	r3, [r7, #64]	; 0x40
 8004514:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004516:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004518:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800451a:	e841 2300 	strex	r3, r2, [r1]
 800451e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1e6      	bne.n	80044f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	3308      	adds	r3, #8
 800452c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452e:	6a3b      	ldr	r3, [r7, #32]
 8004530:	e853 3f00 	ldrex	r3, [r3]
 8004534:	61fb      	str	r3, [r7, #28]
   return(result);
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	f023 0301 	bic.w	r3, r3, #1
 800453c:	64bb      	str	r3, [r7, #72]	; 0x48
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3308      	adds	r3, #8
 8004544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004546:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004548:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800454a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800454c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800454e:	e841 2300 	strex	r3, r2, [r1]
 8004552:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1e5      	bne.n	8004526 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800455e:	2b01      	cmp	r3, #1
 8004560:	d118      	bne.n	8004594 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	e853 3f00 	ldrex	r3, [r3]
 800456e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f023 0310 	bic.w	r3, r3, #16
 8004576:	647b      	str	r3, [r7, #68]	; 0x44
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	461a      	mov	r2, r3
 800457e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004584:	6979      	ldr	r1, [r7, #20]
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	e841 2300 	strex	r3, r2, [r1]
 800458c:	613b      	str	r3, [r7, #16]
   return(result);
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d1e6      	bne.n	8004562 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80045a6:	bf00      	nop
 80045a8:	3754      	adds	r7, #84	; 0x54
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr

080045b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045b2:	b580      	push	{r7, lr}
 80045b4:	b084      	sub	sp, #16
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f7ff fa71 	bl	8003ab8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045d6:	bf00      	nop
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}

080045de <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80045de:	b480      	push	{r7}
 80045e0:	b08f      	sub	sp, #60	; 0x3c
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80045ea:	2b21      	cmp	r3, #33	; 0x21
 80045ec:	d14d      	bne.n	800468a <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d132      	bne.n	8004660 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	e853 3f00 	ldrex	r3, [r3]
 8004606:	61fb      	str	r3, [r7, #28]
   return(result);
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800460e:	637b      	str	r3, [r7, #52]	; 0x34
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	461a      	mov	r2, r3
 8004616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004618:	62fb      	str	r3, [r7, #44]	; 0x2c
 800461a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800461e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004620:	e841 2300 	strex	r3, r2, [r1]
 8004624:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1e6      	bne.n	80045fa <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	60bb      	str	r3, [r7, #8]
   return(result);
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004640:	633b      	str	r3, [r7, #48]	; 0x30
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	461a      	mov	r2, r3
 8004648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464a:	61bb      	str	r3, [r7, #24]
 800464c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464e:	6979      	ldr	r1, [r7, #20]
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	e841 2300 	strex	r3, r2, [r1]
 8004656:	613b      	str	r3, [r7, #16]
   return(result);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d1e6      	bne.n	800462c <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800465e:	e014      	b.n	800468a <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004664:	781a      	ldrb	r2, [r3, #0]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	b292      	uxth	r2, r2
 800466c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004672:	1c5a      	adds	r2, r3, #1
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800467e:	b29b      	uxth	r3, r3
 8004680:	3b01      	subs	r3, #1
 8004682:	b29a      	uxth	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800468a:	bf00      	nop
 800468c:	373c      	adds	r7, #60	; 0x3c
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004696:	b480      	push	{r7}
 8004698:	b091      	sub	sp, #68	; 0x44
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046a2:	2b21      	cmp	r3, #33	; 0x21
 80046a4:	d151      	bne.n	800474a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d132      	bne.n	8004718 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	e853 3f00 	ldrex	r3, [r3]
 80046be:	623b      	str	r3, [r7, #32]
   return(result);
 80046c0:	6a3b      	ldr	r3, [r7, #32]
 80046c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046c6:	63bb      	str	r3, [r7, #56]	; 0x38
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	461a      	mov	r2, r3
 80046ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d0:	633b      	str	r3, [r7, #48]	; 0x30
 80046d2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046d8:	e841 2300 	strex	r3, r2, [r1]
 80046dc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d1e6      	bne.n	80046b2 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	60fb      	str	r3, [r7, #12]
   return(result);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80046f8:	637b      	str	r3, [r7, #52]	; 0x34
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	461a      	mov	r2, r3
 8004700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004702:	61fb      	str	r3, [r7, #28]
 8004704:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	69b9      	ldr	r1, [r7, #24]
 8004708:	69fa      	ldr	r2, [r7, #28]
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	617b      	str	r3, [r7, #20]
   return(result);
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e6      	bne.n	80046e4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004716:	e018      	b.n	800474a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800471c:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800471e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004720:	881a      	ldrh	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800472a:	b292      	uxth	r2, r2
 800472c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004732:	1c9a      	adds	r2, r3, #2
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800473e:	b29b      	uxth	r3, r3
 8004740:	3b01      	subs	r3, #1
 8004742:	b29a      	uxth	r2, r3
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800474a:	bf00      	nop
 800474c:	3744      	adds	r7, #68	; 0x44
 800474e:	46bd      	mov	sp, r7
 8004750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004754:	4770      	bx	lr

08004756 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b088      	sub	sp, #32
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	e853 3f00 	ldrex	r3, [r3]
 800476a:	60bb      	str	r3, [r7, #8]
   return(result);
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004772:	61fb      	str	r3, [r7, #28]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	461a      	mov	r2, r3
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	61bb      	str	r3, [r7, #24]
 800477e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004780:	6979      	ldr	r1, [r7, #20]
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	e841 2300 	strex	r3, r2, [r1]
 8004788:	613b      	str	r3, [r7, #16]
   return(result);
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d1e6      	bne.n	800475e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2200      	movs	r2, #0
 800479a:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7fc f90f 	bl	80009c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047a2:	bf00      	nop
 80047a4:	3720      	adds	r7, #32
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}

080047aa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80047aa:	b580      	push	{r7, lr}
 80047ac:	b096      	sub	sp, #88	; 0x58
 80047ae:	af00      	add	r7, sp, #0
 80047b0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80047b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047c0:	2b22      	cmp	r3, #34	; 0x22
 80047c2:	f040 8094 	bne.w	80048ee <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80047cc:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80047d0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80047d4:	b2d9      	uxtb	r1, r3
 80047d6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80047da:	b2da      	uxtb	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e0:	400a      	ands	r2, r1
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ea:	1c5a      	adds	r2, r3, #1
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	3b01      	subs	r3, #1
 80047fa:	b29a      	uxth	r2, r3
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004808:	b29b      	uxth	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d179      	bne.n	8004902 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004816:	e853 3f00 	ldrex	r3, [r3]
 800481a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800481c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004822:	653b      	str	r3, [r7, #80]	; 0x50
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	461a      	mov	r2, r3
 800482a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800482c:	647b      	str	r3, [r7, #68]	; 0x44
 800482e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004830:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004832:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004834:	e841 2300 	strex	r3, r2, [r1]
 8004838:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800483a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e6      	bne.n	800480e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3308      	adds	r3, #8
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484a:	e853 3f00 	ldrex	r3, [r3]
 800484e:	623b      	str	r3, [r7, #32]
   return(result);
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	f023 0301 	bic.w	r3, r3, #1
 8004856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	3308      	adds	r3, #8
 800485e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004860:	633a      	str	r2, [r7, #48]	; 0x30
 8004862:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004864:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004868:	e841 2300 	strex	r3, r2, [r1]
 800486c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800486e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004870:	2b00      	cmp	r3, #0
 8004872:	d1e5      	bne.n	8004840 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2220      	movs	r2, #32
 8004878:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004884:	2b01      	cmp	r3, #1
 8004886:	d12e      	bne.n	80048e6 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	e853 3f00 	ldrex	r3, [r3]
 800489a:	60fb      	str	r3, [r7, #12]
   return(result);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f023 0310 	bic.w	r3, r3, #16
 80048a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	461a      	mov	r2, r3
 80048aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048ac:	61fb      	str	r3, [r7, #28]
 80048ae:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b0:	69b9      	ldr	r1, [r7, #24]
 80048b2:	69fa      	ldr	r2, [r7, #28]
 80048b4:	e841 2300 	strex	r3, r2, [r1]
 80048b8:	617b      	str	r3, [r7, #20]
   return(result);
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e6      	bne.n	800488e <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	69db      	ldr	r3, [r3, #28]
 80048c6:	f003 0310 	and.w	r3, r3, #16
 80048ca:	2b10      	cmp	r3, #16
 80048cc:	d103      	bne.n	80048d6 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2210      	movs	r2, #16
 80048d4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80048dc:	4619      	mov	r1, r3
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff f8f4 	bl	8003acc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048e4:	e00d      	b.n	8004902 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fc f87a 	bl	80009e0 <HAL_UART_RxCpltCallback>
}
 80048ec:	e009      	b.n	8004902 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	8b1b      	ldrh	r3, [r3, #24]
 80048f4:	b29a      	uxth	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f042 0208 	orr.w	r2, r2, #8
 80048fe:	b292      	uxth	r2, r2
 8004900:	831a      	strh	r2, [r3, #24]
}
 8004902:	bf00      	nop
 8004904:	3758      	adds	r7, #88	; 0x58
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}

0800490a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800490a:	b580      	push	{r7, lr}
 800490c:	b096      	sub	sp, #88	; 0x58
 800490e:	af00      	add	r7, sp, #0
 8004910:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004918:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004920:	2b22      	cmp	r3, #34	; 0x22
 8004922:	f040 8094 	bne.w	8004a4e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800492c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004934:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004936:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800493a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800493e:	4013      	ands	r3, r2
 8004940:	b29a      	uxth	r2, r3
 8004942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004944:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800494a:	1c9a      	adds	r2, r3, #2
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004956:	b29b      	uxth	r3, r3
 8004958:	3b01      	subs	r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004968:	b29b      	uxth	r3, r3
 800496a:	2b00      	cmp	r3, #0
 800496c:	d179      	bne.n	8004a62 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004976:	e853 3f00 	ldrex	r3, [r3]
 800497a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800497c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	461a      	mov	r2, r3
 800498a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800498c:	643b      	str	r3, [r7, #64]	; 0x40
 800498e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004990:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004992:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004994:	e841 2300 	strex	r3, r2, [r1]
 8004998:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800499a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499c:	2b00      	cmp	r3, #0
 800499e:	d1e6      	bne.n	800496e <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3308      	adds	r3, #8
 80049a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	e853 3f00 	ldrex	r3, [r3]
 80049ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	f023 0301 	bic.w	r3, r3, #1
 80049b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	3308      	adds	r3, #8
 80049be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80049c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80049c8:	e841 2300 	strex	r3, r2, [r1]
 80049cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1e5      	bne.n	80049a0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2220      	movs	r2, #32
 80049d8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d12e      	bne.n	8004a46 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f023 0310 	bic.w	r3, r3, #16
 8004a02:	647b      	str	r3, [r7, #68]	; 0x44
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0c:	61bb      	str	r3, [r7, #24]
 8004a0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6979      	ldr	r1, [r7, #20]
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	613b      	str	r3, [r7, #16]
   return(result);
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e6      	bne.n	80049ee <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	f003 0310 	and.w	r3, r3, #16
 8004a2a:	2b10      	cmp	r3, #16
 8004a2c:	d103      	bne.n	8004a36 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	2210      	movs	r2, #16
 8004a34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f7ff f844 	bl	8003acc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a44:	e00d      	b.n	8004a62 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7fb ffca 	bl	80009e0 <HAL_UART_RxCpltCallback>
}
 8004a4c:	e009      	b.n	8004a62 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	8b1b      	ldrh	r3, [r3, #24]
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f042 0208 	orr.w	r2, r2, #8
 8004a5e:	b292      	uxth	r2, r2
 8004a60:	831a      	strh	r2, [r3, #24]
}
 8004a62:	bf00      	nop
 8004a64:	3758      	adds	r7, #88	; 0x58
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a72:	bf00      	nop
 8004a74:	370c      	adds	r7, #12
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
	...

08004a80 <__libc_init_array>:
 8004a80:	b570      	push	{r4, r5, r6, lr}
 8004a82:	4d0d      	ldr	r5, [pc, #52]	; (8004ab8 <__libc_init_array+0x38>)
 8004a84:	4c0d      	ldr	r4, [pc, #52]	; (8004abc <__libc_init_array+0x3c>)
 8004a86:	1b64      	subs	r4, r4, r5
 8004a88:	10a4      	asrs	r4, r4, #2
 8004a8a:	2600      	movs	r6, #0
 8004a8c:	42a6      	cmp	r6, r4
 8004a8e:	d109      	bne.n	8004aa4 <__libc_init_array+0x24>
 8004a90:	4d0b      	ldr	r5, [pc, #44]	; (8004ac0 <__libc_init_array+0x40>)
 8004a92:	4c0c      	ldr	r4, [pc, #48]	; (8004ac4 <__libc_init_array+0x44>)
 8004a94:	f000 f820 	bl	8004ad8 <_init>
 8004a98:	1b64      	subs	r4, r4, r5
 8004a9a:	10a4      	asrs	r4, r4, #2
 8004a9c:	2600      	movs	r6, #0
 8004a9e:	42a6      	cmp	r6, r4
 8004aa0:	d105      	bne.n	8004aae <__libc_init_array+0x2e>
 8004aa2:	bd70      	pop	{r4, r5, r6, pc}
 8004aa4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004aa8:	4798      	blx	r3
 8004aaa:	3601      	adds	r6, #1
 8004aac:	e7ee      	b.n	8004a8c <__libc_init_array+0xc>
 8004aae:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ab2:	4798      	blx	r3
 8004ab4:	3601      	adds	r6, #1
 8004ab6:	e7f2      	b.n	8004a9e <__libc_init_array+0x1e>
 8004ab8:	08004b6c 	.word	0x08004b6c
 8004abc:	08004b6c 	.word	0x08004b6c
 8004ac0:	08004b6c 	.word	0x08004b6c
 8004ac4:	08004b70 	.word	0x08004b70

08004ac8 <memset>:
 8004ac8:	4402      	add	r2, r0
 8004aca:	4603      	mov	r3, r0
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d100      	bne.n	8004ad2 <memset+0xa>
 8004ad0:	4770      	bx	lr
 8004ad2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ad6:	e7f9      	b.n	8004acc <memset+0x4>

08004ad8 <_init>:
 8004ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ada:	bf00      	nop
 8004adc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ade:	bc08      	pop	{r3}
 8004ae0:	469e      	mov	lr, r3
 8004ae2:	4770      	bx	lr

08004ae4 <_fini>:
 8004ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ae6:	bf00      	nop
 8004ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aea:	bc08      	pop	{r3}
 8004aec:	469e      	mov	lr, r3
 8004aee:	4770      	bx	lr
