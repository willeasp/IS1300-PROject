
IS1300-PROject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000608c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  0800621c  0800621c  0001621c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064a4  080064a4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080064a4  080064a4  000164a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064ac  080064ac  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064ac  080064ac  000164ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064b0  080064b0  000164b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080064b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000074  08006528  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08006528  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000167de  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f54  00000000  00000000  00036882  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  000397d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  0003a5e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028795  00000000  00000000  0003b290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013b28  00000000  00000000  00063a25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2b70  00000000  00000000  0007754d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016a0bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f44  00000000  00000000  0016a110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006204 	.word	0x08006204

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006204 	.word	0x08006204

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <start_clock>:
static RTC_TimeTypeDef time;

/**
 * @brief start the RTC clock
 */
void start_clock (uint8_t hours, uint8_t minutes, uint8_t seconds) {
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	4603      	mov	r3, r0
 8000580:	71fb      	strb	r3, [r7, #7]
 8000582:	460b      	mov	r3, r1
 8000584:	71bb      	strb	r3, [r7, #6]
 8000586:	4613      	mov	r3, r2
 8000588:	717b      	strb	r3, [r7, #5]
    time.Hours = hours;
 800058a:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <start_clock+0x40>)
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	7013      	strb	r3, [r2, #0]
    time.Minutes = minutes;
 8000590:	4a09      	ldr	r2, [pc, #36]	; (80005b8 <start_clock+0x40>)
 8000592:	79bb      	ldrb	r3, [r7, #6]
 8000594:	7053      	strb	r3, [r2, #1]
    time.Seconds = seconds;
 8000596:	4a08      	ldr	r2, [pc, #32]	; (80005b8 <start_clock+0x40>)
 8000598:	797b      	ldrb	r3, [r7, #5]
 800059a:	7093      	strb	r3, [r2, #2]

    HAL_RTC_SetDate(&hrtc, NULL, 0);
 800059c:	2200      	movs	r2, #0
 800059e:	2100      	movs	r1, #0
 80005a0:	4806      	ldr	r0, [pc, #24]	; (80005bc <start_clock+0x44>)
 80005a2:	f002 feab 	bl	80032fc <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80005a6:	2200      	movs	r2, #0
 80005a8:	4903      	ldr	r1, [pc, #12]	; (80005b8 <start_clock+0x40>)
 80005aa:	4804      	ldr	r0, [pc, #16]	; (80005bc <start_clock+0x44>)
 80005ac:	f002 fdad 	bl	800310a <HAL_RTC_SetTime>
}
 80005b0:	bf00      	nop
 80005b2:	3708      	adds	r7, #8
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	20000090 	.word	0x20000090
 80005bc:	200000b4 	.word	0x200000b4

080005c0 <get_time>:

/**
 * @brief Get the current RTC time
 * @return Pointer to the time struct
 */
RTC_TimeTypeDef *get_time () {
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80005c4:	2200      	movs	r2, #0
 80005c6:	4903      	ldr	r1, [pc, #12]	; (80005d4 <get_time+0x14>)
 80005c8:	4803      	ldr	r0, [pc, #12]	; (80005d8 <get_time+0x18>)
 80005ca:	f002 fe3b 	bl	8003244 <HAL_RTC_GetTime>
    return &time;
 80005ce:	4b01      	ldr	r3, [pc, #4]	; (80005d4 <get_time+0x14>)
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000090 	.word	0x20000090
 80005d8:	200000b4 	.word	0x200000b4

080005dc <hardware_reset>:


/**
 * @brief Perform a hardware reset on the display
 */
void hardware_reset () {
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
    HAL_Delay(5);
 80005e0:	2005      	movs	r0, #5
 80005e2:	f000 fe95 	bl	8001310 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_RESET);
 80005e6:	2200      	movs	r2, #0
 80005e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f0:	f001 f9ec 	bl	80019cc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80005f4:	200a      	movs	r0, #10
 80005f6:	f000 fe8b 	bl	8001310 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 80005fa:	2201      	movs	r2, #1
 80005fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000600:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000604:	f001 f9e2 	bl	80019cc <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000608:	2001      	movs	r0, #1
 800060a:	f000 fe81 	bl	8001310 <HAL_Delay>
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
	...

08000614 <test_backlight>:


/**
 * @brief Test all backlight colors
 */
void test_backlight () {
 8000614:	b580      	push	{r7, lr}
 8000616:	b086      	sub	sp, #24
 8000618:	af00      	add	r7, sp, #0
    GPIO_TypeDef* ports[] = {Disp_White_GPIO_Port, Disp_Green_GPIO_Port, Disp_Red_GPIO_Port};
 800061a:	4a21      	ldr	r2, [pc, #132]	; (80006a0 <test_backlight+0x8c>)
 800061c:	f107 0308 	add.w	r3, r7, #8
 8000620:	ca07      	ldmia	r2, {r0, r1, r2}
 8000622:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t pins[] = {Disp_White_Pin, Disp_Green_Pin, Disp_Red_Pin};
 8000626:	4a1f      	ldr	r2, [pc, #124]	; (80006a4 <test_backlight+0x90>)
 8000628:	463b      	mov	r3, r7
 800062a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800062e:	6018      	str	r0, [r3, #0]
 8000630:	3304      	adds	r3, #4
 8000632:	8019      	strh	r1, [r3, #0]
    for (int i = 0; i < 3; ++i) {
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
 8000638:	e029      	b.n	800068e <test_backlight+0x7a>
        HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	009b      	lsls	r3, r3, #2
 800063e:	f107 0218 	add.w	r2, r7, #24
 8000642:	4413      	add	r3, r2
 8000644:	f853 0c10 	ldr.w	r0, [r3, #-16]
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	f107 0218 	add.w	r2, r7, #24
 8000650:	4413      	add	r3, r2
 8000652:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000656:	2201      	movs	r2, #1
 8000658:	4619      	mov	r1, r3
 800065a:	f001 f9b7 	bl	80019cc <HAL_GPIO_WritePin>
        HAL_Delay(200);
 800065e:	20c8      	movs	r0, #200	; 0xc8
 8000660:	f000 fe56 	bl	8001310 <HAL_Delay>
        HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 8000664:	697b      	ldr	r3, [r7, #20]
 8000666:	009b      	lsls	r3, r3, #2
 8000668:	f107 0218 	add.w	r2, r7, #24
 800066c:	4413      	add	r3, r2
 800066e:	f853 0c10 	ldr.w	r0, [r3, #-16]
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	f107 0218 	add.w	r2, r7, #24
 800067a:	4413      	add	r3, r2
 800067c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000680:	2200      	movs	r2, #0
 8000682:	4619      	mov	r1, r3
 8000684:	f001 f9a2 	bl	80019cc <HAL_GPIO_WritePin>
    for (int i = 0; i < 3; ++i) {
 8000688:	697b      	ldr	r3, [r7, #20]
 800068a:	3301      	adds	r3, #1
 800068c:	617b      	str	r3, [r7, #20]
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	2b02      	cmp	r3, #2
 8000692:	ddd2      	ble.n	800063a <test_backlight+0x26>
    }
}
 8000694:	bf00      	nop
 8000696:	bf00      	nop
 8000698:	3718      	adds	r7, #24
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	0800621c 	.word	0x0800621c
 80006a4:	08006228 	.word	0x08006228

080006a8 <init_backlight>:


/**
 * @brief Run through all colors and set the backlight to white
 */
void init_backlight () {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
    test_backlight();
 80006ac:	f7ff ffb2 	bl	8000614 <test_backlight>
    HAL_GPIO_WritePin(Disp_White_GPIO_Port, Disp_White_Pin, GPIO_PIN_SET);
 80006b0:	2201      	movs	r2, #1
 80006b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80006b6:	4802      	ldr	r0, [pc, #8]	; (80006c0 <init_backlight+0x18>)
 80006b8:	f001 f988 	bl	80019cc <HAL_GPIO_WritePin>
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	48000800 	.word	0x48000800

080006c4 <split_byte>:
/**
 * @brief Split a byte to send to the display
 * @param[in] byte The byte to split into two
 * @param[out] buffer Where to place the two new bytes
 */
void split_byte (uint8_t byte, uint8_t *buffer) {
 80006c4:	b480      	push	{r7}
 80006c6:	b083      	sub	sp, #12
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	4603      	mov	r3, r0
 80006cc:	6039      	str	r1, [r7, #0]
 80006ce:	71fb      	strb	r3, [r7, #7]
    buffer[0] = byte & 0x0F;            // lower bits first
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	f003 030f 	and.w	r3, r3, #15
 80006d6:	b2da      	uxtb	r2, r3
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	701a      	strb	r2, [r3, #0]
    buffer[1] = (byte & 0xF0) >> 4;     // upper bits second
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	3301      	adds	r3, #1
 80006e0:	79fa      	ldrb	r2, [r7, #7]
 80006e2:	0912      	lsrs	r2, r2, #4
 80006e4:	b2d2      	uxtb	r2, r2
 80006e6:	701a      	strb	r2, [r3, #0]
}
 80006e8:	bf00      	nop
 80006ea:	370c      	adds	r7, #12
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr

080006f4 <display_transmit>:
 * @brief Send the display data or instructions
 * @param[in] startbyte The byte setting that initiates the transmit
 * @param[in] bytes The bytes that will be sent to the display
 * @param[in] length The number of bytes to send
 */
int display_transmit (uint8_t startbyte, uint8_t *bytes, uint16_t length) {
 80006f4:	b5b0      	push	{r4, r5, r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	4603      	mov	r3, r0
 80006fc:	6039      	str	r1, [r7, #0]
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	4613      	mov	r3, r2
 8000702:	80bb      	strh	r3, [r7, #4]
 8000704:	466b      	mov	r3, sp
 8000706:	461d      	mov	r5, r3
    /* create message to transmit */
    uint16_t mes_length = length*2 +1; // +1 for start byte
 8000708:	88bb      	ldrh	r3, [r7, #4]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	b29b      	uxth	r3, r3
 800070e:	3301      	adds	r3, #1
 8000710:	837b      	strh	r3, [r7, #26]
    uint8_t message[mes_length];
 8000712:	8b7c      	ldrh	r4, [r7, #26]
 8000714:	4623      	mov	r3, r4
 8000716:	3b01      	subs	r3, #1
 8000718:	617b      	str	r3, [r7, #20]
 800071a:	b2a0      	uxth	r0, r4
 800071c:	f04f 0100 	mov.w	r1, #0
 8000720:	f04f 0200 	mov.w	r2, #0
 8000724:	f04f 0300 	mov.w	r3, #0
 8000728:	00cb      	lsls	r3, r1, #3
 800072a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800072e:	00c2      	lsls	r2, r0, #3
 8000730:	b2a0      	uxth	r0, r4
 8000732:	f04f 0100 	mov.w	r1, #0
 8000736:	f04f 0200 	mov.w	r2, #0
 800073a:	f04f 0300 	mov.w	r3, #0
 800073e:	00cb      	lsls	r3, r1, #3
 8000740:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000744:	00c2      	lsls	r2, r0, #3
 8000746:	4623      	mov	r3, r4
 8000748:	3307      	adds	r3, #7
 800074a:	08db      	lsrs	r3, r3, #3
 800074c:	00db      	lsls	r3, r3, #3
 800074e:	ebad 0d03 	sub.w	sp, sp, r3
 8000752:	466b      	mov	r3, sp
 8000754:	3300      	adds	r3, #0
 8000756:	613b      	str	r3, [r7, #16]

    message[0] = startbyte;  // start byte
 8000758:	693b      	ldr	r3, [r7, #16]
 800075a:	79fa      	ldrb	r2, [r7, #7]
 800075c:	701a      	strb	r2, [r3, #0]

    uint8_t divided[2]; // for splitting a byte into two
    for (int i = 0; i < length; ++i) {
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
 8000762:	e018      	b.n	8000796 <display_transmit+0xa2>
        split_byte(bytes[i], divided);
 8000764:	69fb      	ldr	r3, [r7, #28]
 8000766:	683a      	ldr	r2, [r7, #0]
 8000768:	4413      	add	r3, r2
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	f107 020c 	add.w	r2, r7, #12
 8000770:	4611      	mov	r1, r2
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff ffa6 	bl	80006c4 <split_byte>
        message[1 + i*2] = divided[0];
 8000778:	69fb      	ldr	r3, [r7, #28]
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	3301      	adds	r3, #1
 800077e:	7b39      	ldrb	r1, [r7, #12]
 8000780:	693a      	ldr	r2, [r7, #16]
 8000782:	54d1      	strb	r1, [r2, r3]
        message[1 + i*2 +1] = divided[1];
 8000784:	69fb      	ldr	r3, [r7, #28]
 8000786:	3301      	adds	r3, #1
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	7b79      	ldrb	r1, [r7, #13]
 800078c:	693a      	ldr	r2, [r7, #16]
 800078e:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < length; ++i) {
 8000790:	69fb      	ldr	r3, [r7, #28]
 8000792:	3301      	adds	r3, #1
 8000794:	61fb      	str	r3, [r7, #28]
 8000796:	88bb      	ldrh	r3, [r7, #4]
 8000798:	69fa      	ldr	r2, [r7, #28]
 800079a:	429a      	cmp	r2, r3
 800079c:	dbe2      	blt.n	8000764 <display_transmit+0x70>
    }

    if (HAL_SPI_Transmit(&hspi2, message, mes_length, 100) != HAL_OK) {
 800079e:	6939      	ldr	r1, [r7, #16]
 80007a0:	8b7a      	ldrh	r2, [r7, #26]
 80007a2:	2364      	movs	r3, #100	; 0x64
 80007a4:	4806      	ldr	r0, [pc, #24]	; (80007c0 <display_transmit+0xcc>)
 80007a6:	f002 ffa4 	bl	80036f2 <HAL_SPI_Transmit>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <display_transmit+0xc0>
        return 1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	e000      	b.n	80007b6 <display_transmit+0xc2>
    }
    return 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	46ad      	mov	sp, r5
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bdb0      	pop	{r4, r5, r7, pc}
 80007c0:	200000d8 	.word	0x200000d8

080007c4 <display_send_instruction>:
/**
 * @brief Send instruction bytes via spi to the display
 * @param[in] instructions A pointer to the instructions to send to the display
 * @param[in] length The number of instructions
 */
int display_send_instruction (uint8_t *instructions, uint16_t length) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
 80007cc:	460b      	mov	r3, r1
 80007ce:	807b      	strh	r3, [r7, #2]
    return display_transmit(0x1F, instructions, length);
 80007d0:	887b      	ldrh	r3, [r7, #2]
 80007d2:	461a      	mov	r2, r3
 80007d4:	6879      	ldr	r1, [r7, #4]
 80007d6:	201f      	movs	r0, #31
 80007d8:	f7ff ff8c 	bl	80006f4 <display_transmit>
 80007dc:	4603      	mov	r3, r0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <display_write>:
/**
 * @brief Write characters to the display where the cursor currently are
 * @param characters The characters to write
 * @param length The number of characters
 */
int display_write (char *characters, uint16_t length) {
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b082      	sub	sp, #8
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	460b      	mov	r3, r1
 80007f0:	807b      	strh	r3, [r7, #2]
    return display_transmit(0b01011111, (uint8_t*)characters, length);
 80007f2:	887b      	ldrh	r3, [r7, #2]
 80007f4:	461a      	mov	r2, r3
 80007f6:	6879      	ldr	r1, [r7, #4]
 80007f8:	205f      	movs	r0, #95	; 0x5f
 80007fa:	f7ff ff7b 	bl	80006f4 <display_transmit>
 80007fe:	4603      	mov	r3, r0
}
 8000800:	4618      	mov	r0, r3
 8000802:	3708      	adds	r7, #8
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <set_row>:
uint8_t rows[] = {0b10000000, 0b10100000, 0b11000000, 0b11100000};
/**
 * @brief Set the cursor on the display
 * @param row The row to write to
 */
int set_row (uint8_t row) {
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	4603      	mov	r3, r0
 8000810:	71fb      	strb	r3, [r7, #7]
    /* the address range of DDARM is 00H-13H, 20H-33H, 40H53H, 60H-73H */
    return display_send_instruction(&rows[row], 1);
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	4a05      	ldr	r2, [pc, #20]	; (800082c <set_row+0x24>)
 8000816:	4413      	add	r3, r2
 8000818:	2101      	movs	r1, #1
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff ffd2 	bl	80007c4 <display_send_instruction>
 8000820:	4603      	mov	r3, r0
}
 8000822:	4618      	mov	r0, r3
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000000 	.word	0x20000000

08000830 <display_write_row>:
 * @brief Write text to a specific row on the display
 * @param characters The characters to write
 * @param length The number of characters
 * @param row The row to write to
 */
int display_write_row (char *characters, uint16_t length, uint8_t row) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b082      	sub	sp, #8
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	807b      	strh	r3, [r7, #2]
 800083c:	4613      	mov	r3, r2
 800083e:	707b      	strb	r3, [r7, #1]
    set_row(row);
 8000840:	787b      	ldrb	r3, [r7, #1]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ffe0 	bl	8000808 <set_row>
    return display_write(characters, length);
 8000848:	887b      	ldrh	r3, [r7, #2]
 800084a:	4619      	mov	r1, r3
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ffca 	bl	80007e6 <display_write>
 8000852:	4603      	mov	r3, r0
}
 8000854:	4618      	mov	r0, r3
 8000856:	3708      	adds	r7, #8
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}

0800085c <clear_display>:

/**
 * @brief Clears the display
 */
int clear_display () {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
    uint8_t ins = 0x01;
 8000862:	2301      	movs	r3, #1
 8000864:	71fb      	strb	r3, [r7, #7]
    return display_send_instruction(&ins, 1);
 8000866:	1dfb      	adds	r3, r7, #7
 8000868:	2101      	movs	r1, #1
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff ffaa 	bl	80007c4 <display_send_instruction>
 8000870:	4603      	mov	r3, r0
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
	...

0800087c <init_display>:

/**
 * @brief Initialise the display
 */
void init_display () {
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
    hardware_reset();
 8000882:	f7ff feab 	bl	80005dc <hardware_reset>

    init_backlight();
 8000886:	f7ff ff0f 	bl	80006a8 <init_backlight>

    uint16_t ins_length = 12;
 800088a:	230c      	movs	r3, #12
 800088c:	827b      	strh	r3, [r7, #18]
    uint8_t instructions[] = {
 800088e:	4a19      	ldr	r2, [pc, #100]	; (80008f4 <init_display+0x78>)
 8000890:	1d3b      	adds	r3, r7, #4
 8000892:	ca07      	ldmia	r2, {r0, r1, r2}
 8000894:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0x01,
        0x38,
        0x0F,
    };

    if (display_send_instruction(instructions, ins_length))
 8000898:	8a7a      	ldrh	r2, [r7, #18]
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	4611      	mov	r1, r2
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff ff90 	bl	80007c4 <display_send_instruction>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <init_display+0x32>
        handle_error();
 80008aa:	f000 f827 	bl	80008fc <handle_error>

    HAL_Delay(10);
 80008ae:	200a      	movs	r0, #10
 80008b0:	f000 fd2e 	bl	8001310 <HAL_Delay>

    for (int i = 0; i < 4; ++i) {
 80008b4:	2300      	movs	r3, #0
 80008b6:	617b      	str	r3, [r7, #20]
 80008b8:	e00b      	b.n	80008d2 <init_display+0x56>
        set_row(i);
 80008ba:	697b      	ldr	r3, [r7, #20]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff ffa2 	bl	8000808 <set_row>
        display_write("0123456789", 10);
 80008c4:	210a      	movs	r1, #10
 80008c6:	480c      	ldr	r0, [pc, #48]	; (80008f8 <init_display+0x7c>)
 80008c8:	f7ff ff8d 	bl	80007e6 <display_write>
    for (int i = 0; i < 4; ++i) {
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	3301      	adds	r3, #1
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	ddf0      	ble.n	80008ba <init_display+0x3e>
    }

    HAL_Delay(1000);
 80008d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008dc:	f000 fd18 	bl	8001310 <HAL_Delay>

    clear_display();
 80008e0:	f7ff ffbc 	bl	800085c <clear_display>

//    display_write("bababoey", 8);

    HAL_Delay(10);
 80008e4:	200a      	movs	r0, #10
 80008e6:	f000 fd13 	bl	8001310 <HAL_Delay>
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	0800623c 	.word	0x0800623c
 80008f8:	08006230 	.word	0x08006230

080008fc <handle_error>:
 *      Author: Dell
 */

#include "main.h"

void handle_error( void ) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
}
 8000902:	bf00      	nop
    __disable_irq();
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000904:	2201      	movs	r2, #1
 8000906:	2120      	movs	r1, #32
 8000908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800090c:	f001 f85e 	bl	80019cc <HAL_GPIO_WritePin>
    while (1)
 8000910:	e7fe      	b.n	8000910 <handle_error+0x14>
	...

08000914 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
 8000922:	605a      	str	r2, [r3, #4]
 8000924:	609a      	str	r2, [r3, #8]
 8000926:	60da      	str	r2, [r3, #12]
 8000928:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092a:	4b40      	ldr	r3, [pc, #256]	; (8000a2c <MX_GPIO_Init+0x118>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	4a3f      	ldr	r2, [pc, #252]	; (8000a2c <MX_GPIO_Init+0x118>)
 8000930:	f043 0304 	orr.w	r3, r3, #4
 8000934:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000936:	4b3d      	ldr	r3, [pc, #244]	; (8000a2c <MX_GPIO_Init+0x118>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	f003 0304 	and.w	r3, r3, #4
 800093e:	613b      	str	r3, [r7, #16]
 8000940:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000942:	4b3a      	ldr	r3, [pc, #232]	; (8000a2c <MX_GPIO_Init+0x118>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a39      	ldr	r2, [pc, #228]	; (8000a2c <MX_GPIO_Init+0x118>)
 8000948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b37      	ldr	r3, [pc, #220]	; (8000a2c <MX_GPIO_Init+0x118>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000956:	60fb      	str	r3, [r7, #12]
 8000958:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b34      	ldr	r3, [pc, #208]	; (8000a2c <MX_GPIO_Init+0x118>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a33      	ldr	r2, [pc, #204]	; (8000a2c <MX_GPIO_Init+0x118>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b31      	ldr	r3, [pc, #196]	; (8000a2c <MX_GPIO_Init+0x118>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000972:	4b2e      	ldr	r3, [pc, #184]	; (8000a2c <MX_GPIO_Init+0x118>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4a2d      	ldr	r2, [pc, #180]	; (8000a2c <MX_GPIO_Init+0x118>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4b2b      	ldr	r3, [pc, #172]	; (8000a2c <MX_GPIO_Init+0x118>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800098a:	4b28      	ldr	r3, [pc, #160]	; (8000a2c <MX_GPIO_Init+0x118>)
 800098c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098e:	4a27      	ldr	r2, [pc, #156]	; (8000a2c <MX_GPIO_Init+0x118>)
 8000990:	f043 0308 	orr.w	r3, r3, #8
 8000994:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000996:	4b25      	ldr	r3, [pc, #148]	; (8000a2c <MX_GPIO_Init+0x118>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	f003 0308 	and.w	r3, r3, #8
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2120      	movs	r1, #32
 80009a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009aa:	f001 f80f 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Disp_Red_Pin|Disp_Green_Pin|Disp_White_Pin, GPIO_PIN_RESET);
 80009ae:	2200      	movs	r2, #0
 80009b0:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 80009b4:	481e      	ldr	r0, [pc, #120]	; (8000a30 <MX_GPIO_Init+0x11c>)
 80009b6:	f001 f809 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 80009ba:	2201      	movs	r2, #1
 80009bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c4:	f001 f802 	bl	80019cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ce:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d4:	2300      	movs	r3, #0
 80009d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	4619      	mov	r1, r3
 80009de:	4814      	ldr	r0, [pc, #80]	; (8000a30 <MX_GPIO_Init+0x11c>)
 80009e0:	f000 fe4a 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Disp_Reset_Pin;
 80009e4:	f248 0320 	movw	r3, #32800	; 0x8020
 80009e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ee:	2300      	movs	r3, #0
 80009f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f2:	2300      	movs	r3, #0
 80009f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a00:	f000 fe3a 	bl	8001678 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Disp_Red_Pin|Disp_Green_Pin|Disp_White_Pin;
 8000a04:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8000a08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a16:	f107 0314 	add.w	r3, r7, #20
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4804      	ldr	r0, [pc, #16]	; (8000a30 <MX_GPIO_Init+0x11c>)
 8000a1e:	f000 fe2b 	bl	8001678 <HAL_GPIO_Init>

}
 8000a22:	bf00      	nop
 8000a24:	3728      	adds	r7, #40	; 0x28
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	48000800 	.word	0x48000800

08000a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a34:	b590      	push	{r4, r7, lr}
 8000a36:	b08b      	sub	sp, #44	; 0x2c
 8000a38:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3a:	f000 fbed 	bl	8001218 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3e:	f000 f889 	bl	8000b54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a42:	f7ff ff67 	bl	8000914 <MX_GPIO_Init>
  MX_UART5_Init();
 8000a46:	f000 fb03 	bl	8001050 <MX_UART5_Init>
  MX_SPI2_Init();
 8000a4a:	f000 f947 	bl	8000cdc <MX_SPI2_Init>
  MX_RTC_Init();
 8000a4e:	f000 f8eb 	bl	8000c28 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  init_display();
 8000a52:	f7ff ff13 	bl	800087c <init_display>


  uart_println("Hello World!");
 8000a56:	483b      	ldr	r0, [pc, #236]	; (8000b44 <main+0x110>)
 8000a58:	f000 faa8 	bl	8000fac <uart_println>


  uint8_t buf_len = 8;
 8000a5c:	2308      	movs	r3, #8
 8000a5e:	77fb      	strb	r3, [r7, #31]
  char buf[buf_len];
 8000a60:	7ffc      	ldrb	r4, [r7, #31]
 8000a62:	4623      	mov	r3, r4
 8000a64:	3b01      	subs	r3, #1
 8000a66:	61bb      	str	r3, [r7, #24]
 8000a68:	b2e0      	uxtb	r0, r4
 8000a6a:	f04f 0100 	mov.w	r1, #0
 8000a6e:	f04f 0200 	mov.w	r2, #0
 8000a72:	f04f 0300 	mov.w	r3, #0
 8000a76:	00cb      	lsls	r3, r1, #3
 8000a78:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a7c:	00c2      	lsls	r2, r0, #3
 8000a7e:	b2e0      	uxtb	r0, r4
 8000a80:	f04f 0100 	mov.w	r1, #0
 8000a84:	f04f 0200 	mov.w	r2, #0
 8000a88:	f04f 0300 	mov.w	r3, #0
 8000a8c:	00cb      	lsls	r3, r1, #3
 8000a8e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a92:	00c2      	lsls	r2, r0, #3
 8000a94:	4623      	mov	r3, r4
 8000a96:	3307      	adds	r3, #7
 8000a98:	08db      	lsrs	r3, r3, #3
 8000a9a:	00db      	lsls	r3, r3, #3
 8000a9c:	ebad 0d03 	sub.w	sp, sp, r3
 8000aa0:	ab02      	add	r3, sp, #8
 8000aa2:	3300      	adds	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]

  /* initialise time */
  int h;
  int m;
  int s;
  uart_get_clock_input(buf);
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 fa97 	bl	8000fdc <uart_get_clock_input>
  uart_println("");
 8000aae:	4826      	ldr	r0, [pc, #152]	; (8000b48 <main+0x114>)
 8000ab0:	f000 fa7c 	bl	8000fac <uart_println>
  uart_println(buf);
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f000 fa78 	bl	8000fac <uart_println>
  sscanf(buf, "%02d:%02d:%02d", &h, &m, &s);
 8000abc:	6978      	ldr	r0, [r7, #20]
 8000abe:	1d39      	adds	r1, r7, #4
 8000ac0:	f107 0208 	add.w	r2, r7, #8
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	9300      	str	r3, [sp, #0]
 8000ac8:	460b      	mov	r3, r1
 8000aca:	4920      	ldr	r1, [pc, #128]	; (8000b4c <main+0x118>)
 8000acc:	f004 fac8 	bl	8005060 <siscanf>
  start_clock(h, m, s);
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	687a      	ldr	r2, [r7, #4]
 8000ad6:	b2d1      	uxtb	r1, r2
 8000ad8:	683a      	ldr	r2, [r7, #0]
 8000ada:	b2d2      	uxtb	r2, r2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fd4b 	bl	8000578 <start_clock>
  /* USER CODE END 2 */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      uart_receive(&c, 1);
 8000ae2:	f107 030f 	add.w	r3, r7, #15
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f000 fa4b 	bl	8000f84 <uart_receive>
      if (c == '\r')
 8000aee:	7bfb      	ldrb	r3, [r7, #15]
 8000af0:	2b0d      	cmp	r3, #13
 8000af2:	d104      	bne.n	8000afe <main+0xca>
          uart_send("\r\n", 2);
 8000af4:	2102      	movs	r1, #2
 8000af6:	4816      	ldr	r0, [pc, #88]	; (8000b50 <main+0x11c>)
 8000af8:	f000 fa30 	bl	8000f5c <uart_send>
 8000afc:	e005      	b.n	8000b0a <main+0xd6>
      else
          uart_send(&c, 1);
 8000afe:	f107 030f 	add.w	r3, r7, #15
 8000b02:	2101      	movs	r1, #1
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 fa29 	bl	8000f5c <uart_send>


      /* get and write time */
      time = get_time();
 8000b0a:	f7ff fd59 	bl	80005c0 <get_time>
 8000b0e:	6138      	str	r0, [r7, #16]
      sprintf(buf, "%02d:%02d:%02d", time->Hours, time->Minutes, time->Seconds);
 8000b10:	6978      	ldr	r0, [r7, #20]
 8000b12:	693b      	ldr	r3, [r7, #16]
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	461a      	mov	r2, r3
 8000b18:	693b      	ldr	r3, [r7, #16]
 8000b1a:	785b      	ldrb	r3, [r3, #1]
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	693b      	ldr	r3, [r7, #16]
 8000b20:	789b      	ldrb	r3, [r3, #2]
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	460b      	mov	r3, r1
 8000b26:	4909      	ldr	r1, [pc, #36]	; (8000b4c <main+0x118>)
 8000b28:	f004 fa7a 	bl	8005020 <siprintf>
      uart_println(buf);
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f000 fa3c 	bl	8000fac <uart_println>
      display_write_row(buf, buf_len, 0);
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	7ffa      	ldrb	r2, [r7, #31]
 8000b38:	b291      	uxth	r1, r2
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff fe77 	bl	8000830 <display_write_row>
      uart_receive(&c, 1);
 8000b42:	e7ce      	b.n	8000ae2 <main+0xae>
 8000b44:	08006248 	.word	0x08006248
 8000b48:	08006258 	.word	0x08006258
 8000b4c:	0800625c 	.word	0x0800625c
 8000b50:	0800626c 	.word	0x0800626c

08000b54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b096      	sub	sp, #88	; 0x58
 8000b58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b5a:	f107 0314 	add.w	r3, r7, #20
 8000b5e:	2244      	movs	r2, #68	; 0x44
 8000b60:	2100      	movs	r1, #0
 8000b62:	4618      	mov	r0, r3
 8000b64:	f004 fa54 	bl	8005010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b68:	463b      	mov	r3, r7
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b76:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b7a:	f000 ff4d 	bl	8001a18 <HAL_PWREx_ControlVoltageScaling>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b84:	f000 f84a 	bl	8000c1c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000b88:	230a      	movs	r3, #10
 8000b8a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b92:	2310      	movs	r3, #16
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b96:	2301      	movs	r3, #1
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ba6:	230a      	movs	r3, #10
 8000ba8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000baa:	2307      	movs	r3, #7
 8000bac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bb2:	2302      	movs	r3, #2
 8000bb4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bb6:	f107 0314 	add.w	r3, r7, #20
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f000 ff82 	bl	8001ac4 <HAL_RCC_OscConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000bc6:	f000 f829 	bl	8000c1c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bca:	230f      	movs	r3, #15
 8000bcc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bde:	463b      	mov	r3, r7
 8000be0:	2104      	movs	r1, #4
 8000be2:	4618      	mov	r0, r3
 8000be4:	f001 fb54 	bl	8002290 <HAL_RCC_ClockConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bee:	f000 f815 	bl	8000c1c <Error_Handler>
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	3758      	adds	r7, #88	; 0x58
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <HAL_UART_TxCpltCallback>:
* @note This example shows a simple way to report end of IT Tx transfer, and
* you can add your own implementation.
* @retval None
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
    /* Set transmission flag: transfer complete*/
    uartReady = SET;
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <HAL_UART_TxCpltCallback+0x1c>)
 8000c06:	2201      	movs	r2, #1
 8000c08:	701a      	strb	r2, [r3, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	200000a4 	.word	0x200000a4

08000c1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    handle_error();
 8000c20:	f7ff fe6c 	bl	80008fc <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8000c24:	bf00      	nop
 8000c26:	bd80      	pop	{r7, pc}

08000c28 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000c2c:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <MX_RTC_Init+0x48>)
 8000c2e:	4a11      	ldr	r2, [pc, #68]	; (8000c74 <MX_RTC_Init+0x4c>)
 8000c30:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_RTC_Init+0x48>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000c38:	4b0d      	ldr	r3, [pc, #52]	; (8000c70 <MX_RTC_Init+0x48>)
 8000c3a:	227f      	movs	r2, #127	; 0x7f
 8000c3c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000c3e:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_RTC_Init+0x48>)
 8000c40:	22ff      	movs	r2, #255	; 0xff
 8000c42:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <MX_RTC_Init+0x48>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_RTC_Init+0x48>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <MX_RTC_Init+0x48>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_RTC_Init+0x48>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_RTC_Init+0x48>)
 8000c5e:	f002 f9d9 	bl	8003014 <HAL_RTC_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000c68:	f7ff ffd8 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	200000b4 	.word	0x200000b4
 8000c74:	40002800 	.word	0x40002800

08000c78 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b0a4      	sub	sp, #144	; 0x90
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	2288      	movs	r2, #136	; 0x88
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f004 f9c1 	bl	8005010 <memset>
  if(rtcHandle->Instance==RTC)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a10      	ldr	r2, [pc, #64]	; (8000cd4 <HAL_RTC_MspInit+0x5c>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d118      	bne.n	8000cca <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c9c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ca6:	f107 0308 	add.w	r3, r7, #8
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 fcf6 	bl	800269c <HAL_RCCEx_PeriphCLKConfig>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000cb6:	f7ff ffb1 	bl	8000c1c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000cba:	4b07      	ldr	r3, [pc, #28]	; (8000cd8 <HAL_RTC_MspInit+0x60>)
 8000cbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000cc0:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <HAL_RTC_MspInit+0x60>)
 8000cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000cca:	bf00      	nop
 8000ccc:	3790      	adds	r7, #144	; 0x90
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40002800 	.word	0x40002800
 8000cd8:	40021000 	.word	0x40021000

08000cdc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <MX_SPI2_Init+0x74>)
 8000ce2:	4a1c      	ldr	r2, [pc, #112]	; (8000d54 <MX_SPI2_Init+0x78>)
 8000ce4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ce6:	4b1a      	ldr	r3, [pc, #104]	; (8000d50 <MX_SPI2_Init+0x74>)
 8000ce8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000cee:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <MX_SPI2_Init+0x74>)
 8000cf0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cf4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cf6:	4b16      	ldr	r3, [pc, #88]	; (8000d50 <MX_SPI2_Init+0x74>)
 8000cf8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cfc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000cfe:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <MX_SPI2_Init+0x74>)
 8000d00:	2202      	movs	r2, #2
 8000d02:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <MX_SPI2_Init+0x74>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d0a:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_SPI2_Init+0x74>)
 8000d0c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000d10:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000d12:	4b0f      	ldr	r3, [pc, #60]	; (8000d50 <MX_SPI2_Init+0x74>)
 8000d14:	2230      	movs	r2, #48	; 0x30
 8000d16:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000d18:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <MX_SPI2_Init+0x74>)
 8000d1a:	2280      	movs	r2, #128	; 0x80
 8000d1c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d1e:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MX_SPI2_Init+0x74>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d24:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <MX_SPI2_Init+0x74>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_SPI2_Init+0x74>)
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000d30:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <MX_SPI2_Init+0x74>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_SPI2_Init+0x74>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d3c:	4804      	ldr	r0, [pc, #16]	; (8000d50 <MX_SPI2_Init+0x74>)
 8000d3e:	f002 fc35 	bl	80035ac <HAL_SPI_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000d48:	f7ff ff68 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}
 8000d50:	200000d8 	.word	0x200000d8
 8000d54:	40003800 	.word	0x40003800

08000d58 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a25      	ldr	r2, [pc, #148]	; (8000e0c <HAL_SPI_MspInit+0xb4>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d144      	bne.n	8000e04 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d7a:	4b25      	ldr	r3, [pc, #148]	; (8000e10 <HAL_SPI_MspInit+0xb8>)
 8000d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d7e:	4a24      	ldr	r2, [pc, #144]	; (8000e10 <HAL_SPI_MspInit+0xb8>)
 8000d80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d84:	6593      	str	r3, [r2, #88]	; 0x58
 8000d86:	4b22      	ldr	r3, [pc, #136]	; (8000e10 <HAL_SPI_MspInit+0xb8>)
 8000d88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d92:	4b1f      	ldr	r3, [pc, #124]	; (8000e10 <HAL_SPI_MspInit+0xb8>)
 8000d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d96:	4a1e      	ldr	r2, [pc, #120]	; (8000e10 <HAL_SPI_MspInit+0xb8>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9e:	4b1c      	ldr	r3, [pc, #112]	; (8000e10 <HAL_SPI_MspInit+0xb8>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	4b19      	ldr	r3, [pc, #100]	; (8000e10 <HAL_SPI_MspInit+0xb8>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	4a18      	ldr	r2, [pc, #96]	; (8000e10 <HAL_SPI_MspInit+0xb8>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db6:	4b16      	ldr	r3, [pc, #88]	; (8000e10 <HAL_SPI_MspInit+0xb8>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = Display_OUT_Pin;
 8000dc2:	2308      	movs	r3, #8
 8000dc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000dd2:	2305      	movs	r3, #5
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Display_OUT_GPIO_Port, &GPIO_InitStruct);
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480d      	ldr	r0, [pc, #52]	; (8000e14 <HAL_SPI_MspInit+0xbc>)
 8000dde:	f000 fc4b 	bl	8001678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Dispay_CLK_Pin|Display_CS_Pin;
 8000de2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000df4:	2305      	movs	r3, #5
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4806      	ldr	r0, [pc, #24]	; (8000e18 <HAL_SPI_MspInit+0xc0>)
 8000e00:	f000 fc3a 	bl	8001678 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000e04:	bf00      	nop
 8000e06:	3728      	adds	r7, #40	; 0x28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40003800 	.word	0x40003800
 8000e10:	40021000 	.word	0x40021000
 8000e14:	48000800 	.word	0x48000800
 8000e18:	48000400 	.word	0x48000400

08000e1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b083      	sub	sp, #12
 8000e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e22:	4b0f      	ldr	r3, [pc, #60]	; (8000e60 <HAL_MspInit+0x44>)
 8000e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e26:	4a0e      	ldr	r2, [pc, #56]	; (8000e60 <HAL_MspInit+0x44>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e2e:	4b0c      	ldr	r3, [pc, #48]	; (8000e60 <HAL_MspInit+0x44>)
 8000e30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	607b      	str	r3, [r7, #4]
 8000e38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e3a:	4b09      	ldr	r3, [pc, #36]	; (8000e60 <HAL_MspInit+0x44>)
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e3e:	4a08      	ldr	r2, [pc, #32]	; (8000e60 <HAL_MspInit+0x44>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e44:	6593      	str	r3, [r2, #88]	; 0x58
 8000e46:	4b06      	ldr	r3, [pc, #24]	; (8000e60 <HAL_MspInit+0x44>)
 8000e48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <NMI_Handler+0x4>

08000e6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <HardFault_Handler+0x4>

08000e70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <MemManage_Handler+0x4>

08000e76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e7a:	e7fe      	b.n	8000e7a <BusFault_Handler+0x4>

08000e7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <UsageFault_Handler+0x4>

08000e82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e82:	b480      	push	{r7}
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e86:	bf00      	nop
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8e:	4770      	bx	lr

08000e90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eb0:	f000 fa0e 	bl	80012d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb4:	bf00      	nop
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <UART5_IRQHandler+0x10>)
 8000ebe:	f003 f89f 	bl	8004000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	2000013c 	.word	0x2000013c

08000ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed4:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <_sbrk+0x5c>)
 8000ed6:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <_sbrk+0x60>)
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee0:	4b13      	ldr	r3, [pc, #76]	; (8000f30 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <_sbrk+0x64>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <_sbrk+0x68>)
 8000eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d207      	bcs.n	8000f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000efc:	f004 f85e 	bl	8004fbc <__errno>
 8000f00:	4603      	mov	r3, r0
 8000f02:	220c      	movs	r2, #12
 8000f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0a:	e009      	b.n	8000f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f0c:	4b08      	ldr	r3, [pc, #32]	; (8000f30 <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f12:	4b07      	ldr	r3, [pc, #28]	; (8000f30 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a05      	ldr	r2, [pc, #20]	; (8000f30 <_sbrk+0x64>)
 8000f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20018000 	.word	0x20018000
 8000f2c:	00000400 	.word	0x00000400
 8000f30:	200000a8 	.word	0x200000a8
 8000f34:	200001d8 	.word	0x200001d8

08000f38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <SystemInit+0x20>)
 8000f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <SystemInit+0x20>)
 8000f44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <uart_send>:

/**
 * @brief Send a string over uart
 * @param[in] message The character array to send
 */
int uart_send (char *buffer, uint16_t length) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Transmit(&huart5, (uint8_t*)buffer, length, TIMEOUT);
 8000f68:	887a      	ldrh	r2, [r7, #2]
 8000f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f6e:	6879      	ldr	r1, [r7, #4]
 8000f70:	4803      	ldr	r0, [pc, #12]	; (8000f80 <uart_send+0x24>)
 8000f72:	f002 fedf 	bl	8003d34 <HAL_UART_Transmit>
 8000f76:	4603      	mov	r3, r0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	2000013c 	.word	0x2000013c

08000f84 <uart_receive>:
/**
 * @brief Recieve a string over uart
 * @param[out] buffer The place to write the recieved string
 * @param[in] length The amount of data to read
 */
int uart_receive (char *buffer, uint16_t length) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
 8000f8c:	460b      	mov	r3, r1
 8000f8e:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Receive(&huart5, (uint8_t *)buffer, length, TIMEOUT);
 8000f90:	887a      	ldrh	r2, [r7, #2]
 8000f92:	f04f 33ff 	mov.w	r3, #4294967295
 8000f96:	6879      	ldr	r1, [r7, #4]
 8000f98:	4803      	ldr	r0, [pc, #12]	; (8000fa8 <uart_receive+0x24>)
 8000f9a:	f002 ff5f 	bl	8003e5c <HAL_UART_Receive>
 8000f9e:	4603      	mov	r3, r0
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	2000013c 	.word	0x2000013c

08000fac <uart_println>:

/**
 * @brief send a string line to uart
 * @param[in] string The string to send
 */
int uart_println (char *string) {
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
    uart_send(string, strlen(string));
 8000fb4:	6878      	ldr	r0, [r7, #4]
 8000fb6:	f7ff f90b 	bl	80001d0 <strlen>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	b29b      	uxth	r3, r3
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	6878      	ldr	r0, [r7, #4]
 8000fc2:	f7ff ffcb 	bl	8000f5c <uart_send>
    return uart_send("\r\n", 2);
 8000fc6:	2102      	movs	r1, #2
 8000fc8:	4803      	ldr	r0, [pc, #12]	; (8000fd8 <uart_println+0x2c>)
 8000fca:	f7ff ffc7 	bl	8000f5c <uart_send>
 8000fce:	4603      	mov	r3, r0
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3708      	adds	r7, #8
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	08006270 	.word	0x08006270

08000fdc <uart_get_clock_input>:

/**
 * @brief Let user input the time
 * @param[out] buffer The buffer to write to
 */
void uart_get_clock_input (char *buffer) {
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
    uart_println("Please enter the time in HH:MM:SS format!");
 8000fe4:	4819      	ldr	r0, [pc, #100]	; (800104c <uart_get_clock_input+0x70>)
 8000fe6:	f7ff ffe1 	bl	8000fac <uart_println>

    char c;
    uint8_t i = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]
    while (1) {
        uart_receive(&c, 1);
 8000fee:	f107 030e 	add.w	r3, r7, #14
 8000ff2:	2101      	movs	r1, #1
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff ffc5 	bl	8000f84 <uart_receive>
        /* as long as i < 8 and c != \r
         * If a char 127 (backspace) is written
         * move cursor back */

        /* check if done */
        if (i == 8) {
 8000ffa:	7bfb      	ldrb	r3, [r7, #15]
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d105      	bne.n	800100c <uart_get_clock_input+0x30>
            if (c == '\r')
 8001000:	7bbb      	ldrb	r3, [r7, #14]
 8001002:	2b0d      	cmp	r3, #13
 8001004:	d01d      	beq.n	8001042 <uart_get_clock_input+0x66>
                break;
            else if (c != 127)
 8001006:	7bbb      	ldrb	r3, [r7, #14]
 8001008:	2b7f      	cmp	r3, #127	; 0x7f
 800100a:	d118      	bne.n	800103e <uart_get_clock_input+0x62>
                continue;
        }

        uart_send(&c, 1);
 800100c:	f107 030e 	add.w	r3, r7, #14
 8001010:	2101      	movs	r1, #1
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff ffa2 	bl	8000f5c <uart_send>

        /* write to buffer */
        if (c == 127) {
 8001018:	7bbb      	ldrb	r3, [r7, #14]
 800101a:	2b7f      	cmp	r3, #127	; 0x7f
 800101c:	d106      	bne.n	800102c <uart_get_clock_input+0x50>
            if (i != 0)
 800101e:	7bfb      	ldrb	r3, [r7, #15]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0e4      	beq.n	8000fee <uart_get_clock_input+0x12>
                --i;
 8001024:	7bfb      	ldrb	r3, [r7, #15]
 8001026:	3b01      	subs	r3, #1
 8001028:	73fb      	strb	r3, [r7, #15]
 800102a:	e7e0      	b.n	8000fee <uart_get_clock_input+0x12>
        }
        else
            buffer[i++] = c;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	73fa      	strb	r2, [r7, #15]
 8001032:	461a      	mov	r2, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4413      	add	r3, r2
 8001038:	7bba      	ldrb	r2, [r7, #14]
 800103a:	701a      	strb	r2, [r3, #0]
 800103c:	e7d7      	b.n	8000fee <uart_get_clock_input+0x12>
                continue;
 800103e:	bf00      	nop
        uart_receive(&c, 1);
 8001040:	e7d5      	b.n	8000fee <uart_get_clock_input+0x12>
                break;
 8001042:	bf00      	nop
    }
}
 8001044:	bf00      	nop
 8001046:	3710      	adds	r7, #16
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	08006274 	.word	0x08006274

08001050 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001054:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <MX_UART5_Init+0x58>)
 8001056:	4a15      	ldr	r2, [pc, #84]	; (80010ac <MX_UART5_Init+0x5c>)
 8001058:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <MX_UART5_Init+0x58>)
 800105c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001060:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001062:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_UART5_Init+0x58>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <MX_UART5_Init+0x58>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_UART5_Init+0x58>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <MX_UART5_Init+0x58>)
 8001076:	220c      	movs	r2, #12
 8001078:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <MX_UART5_Init+0x58>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001080:	4b09      	ldr	r3, [pc, #36]	; (80010a8 <MX_UART5_Init+0x58>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <MX_UART5_Init+0x58>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800108c:	4b06      	ldr	r3, [pc, #24]	; (80010a8 <MX_UART5_Init+0x58>)
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001092:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_UART5_Init+0x58>)
 8001094:	f002 fe00 	bl	8003c98 <HAL_UART_Init>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 800109e:	f7ff fdbd 	bl	8000c1c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000013c 	.word	0x2000013c
 80010ac:	40005000 	.word	0x40005000

080010b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b0ac      	sub	sp, #176	; 0xb0
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c8:	f107 0314 	add.w	r3, r7, #20
 80010cc:	2288      	movs	r2, #136	; 0x88
 80010ce:	2100      	movs	r1, #0
 80010d0:	4618      	mov	r0, r3
 80010d2:	f003 ff9d 	bl	8005010 <memset>
  if(uartHandle->Instance==UART5)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a36      	ldr	r2, [pc, #216]	; (80011b4 <HAL_UART_MspInit+0x104>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d164      	bne.n	80011aa <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80010e0:	2310      	movs	r3, #16
 80010e2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80010e4:	2300      	movs	r3, #0
 80010e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	4618      	mov	r0, r3
 80010ee:	f001 fad5 	bl	800269c <HAL_RCCEx_PeriphCLKConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010f8:	f7ff fd90 	bl	8000c1c <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80010fc:	4b2e      	ldr	r3, [pc, #184]	; (80011b8 <HAL_UART_MspInit+0x108>)
 80010fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001100:	4a2d      	ldr	r2, [pc, #180]	; (80011b8 <HAL_UART_MspInit+0x108>)
 8001102:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001106:	6593      	str	r3, [r2, #88]	; 0x58
 8001108:	4b2b      	ldr	r3, [pc, #172]	; (80011b8 <HAL_UART_MspInit+0x108>)
 800110a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001114:	4b28      	ldr	r3, [pc, #160]	; (80011b8 <HAL_UART_MspInit+0x108>)
 8001116:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001118:	4a27      	ldr	r2, [pc, #156]	; (80011b8 <HAL_UART_MspInit+0x108>)
 800111a:	f043 0304 	orr.w	r3, r3, #4
 800111e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001120:	4b25      	ldr	r3, [pc, #148]	; (80011b8 <HAL_UART_MspInit+0x108>)
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	f003 0304 	and.w	r3, r3, #4
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800112c:	4b22      	ldr	r3, [pc, #136]	; (80011b8 <HAL_UART_MspInit+0x108>)
 800112e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001130:	4a21      	ldr	r2, [pc, #132]	; (80011b8 <HAL_UART_MspInit+0x108>)
 8001132:	f043 0308 	orr.w	r3, r3, #8
 8001136:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001138:	4b1f      	ldr	r3, [pc, #124]	; (80011b8 <HAL_UART_MspInit+0x108>)
 800113a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113c:	f003 0308 	and.w	r3, r3, #8
 8001140:	60bb      	str	r3, [r7, #8]
 8001142:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001144:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001148:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800114c:	2302      	movs	r3, #2
 800114e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001152:	2300      	movs	r3, #0
 8001154:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001158:	2303      	movs	r3, #3
 800115a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800115e:	2308      	movs	r3, #8
 8001160:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001164:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001168:	4619      	mov	r1, r3
 800116a:	4814      	ldr	r0, [pc, #80]	; (80011bc <HAL_UART_MspInit+0x10c>)
 800116c:	f000 fa84 	bl	8001678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001170:	2304      	movs	r3, #4
 8001172:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001176:	2302      	movs	r3, #2
 8001178:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001182:	2303      	movs	r3, #3
 8001184:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001188:	2308      	movs	r3, #8
 800118a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800118e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001192:	4619      	mov	r1, r3
 8001194:	480a      	ldr	r0, [pc, #40]	; (80011c0 <HAL_UART_MspInit+0x110>)
 8001196:	f000 fa6f 	bl	8001678 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800119a:	2200      	movs	r2, #0
 800119c:	2100      	movs	r1, #0
 800119e:	2035      	movs	r0, #53	; 0x35
 80011a0:	f000 f9b5 	bl	800150e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80011a4:	2035      	movs	r0, #53	; 0x35
 80011a6:	f000 f9ce 	bl	8001546 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80011aa:	bf00      	nop
 80011ac:	37b0      	adds	r7, #176	; 0xb0
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40005000 	.word	0x40005000
 80011b8:	40021000 	.word	0x40021000
 80011bc:	48000800 	.word	0x48000800
 80011c0:	48000c00 	.word	0x48000c00

080011c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011c8:	f7ff feb6 	bl	8000f38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011cc:	480c      	ldr	r0, [pc, #48]	; (8001200 <LoopForever+0x6>)
  ldr r1, =_edata
 80011ce:	490d      	ldr	r1, [pc, #52]	; (8001204 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011d0:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <LoopForever+0xe>)
  movs r3, #0
 80011d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d4:	e002      	b.n	80011dc <LoopCopyDataInit>

080011d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011da:	3304      	adds	r3, #4

080011dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011e0:	d3f9      	bcc.n	80011d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011e2:	4a0a      	ldr	r2, [pc, #40]	; (800120c <LoopForever+0x12>)
  ldr r4, =_ebss
 80011e4:	4c0a      	ldr	r4, [pc, #40]	; (8001210 <LoopForever+0x16>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e8:	e001      	b.n	80011ee <LoopFillZerobss>

080011ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011ec:	3204      	adds	r2, #4

080011ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011f0:	d3fb      	bcc.n	80011ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011f2:	f003 fee9 	bl	8004fc8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011f6:	f7ff fc1d 	bl	8000a34 <main>

080011fa <LoopForever>:

LoopForever:
    b LoopForever
 80011fa:	e7fe      	b.n	80011fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001200:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001204:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001208:	080064b4 	.word	0x080064b4
  ldr r2, =_sbss
 800120c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001210:	200001d4 	.word	0x200001d4

08001214 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001214:	e7fe      	b.n	8001214 <ADC1_2_IRQHandler>
	...

08001218 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b082      	sub	sp, #8
 800121c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800121e:	2300      	movs	r3, #0
 8001220:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001222:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <HAL_Init+0x3c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <HAL_Init+0x3c>)
 8001228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800122c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800122e:	2003      	movs	r0, #3
 8001230:	f000 f962 	bl	80014f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001234:	2000      	movs	r0, #0
 8001236:	f000 f80f 	bl	8001258 <HAL_InitTick>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d002      	beq.n	8001246 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	71fb      	strb	r3, [r7, #7]
 8001244:	e001      	b.n	800124a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001246:	f7ff fde9 	bl	8000e1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800124a:	79fb      	ldrb	r3, [r7, #7]
}
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	40022000 	.word	0x40022000

08001258 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001264:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <HAL_InitTick+0x6c>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d023      	beq.n	80012b4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800126c:	4b16      	ldr	r3, [pc, #88]	; (80012c8 <HAL_InitTick+0x70>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <HAL_InitTick+0x6c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f96d 	bl	8001562 <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d10f      	bne.n	80012ae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b0f      	cmp	r3, #15
 8001292:	d809      	bhi.n	80012a8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001294:	2200      	movs	r2, #0
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	f04f 30ff 	mov.w	r0, #4294967295
 800129c:	f000 f937 	bl	800150e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012a0:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <HAL_InitTick+0x74>)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6013      	str	r3, [r2, #0]
 80012a6:	e007      	b.n	80012b8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012a8:	2301      	movs	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e004      	b.n	80012b8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	73fb      	strb	r3, [r7, #15]
 80012b2:	e001      	b.n	80012b8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3710      	adds	r7, #16
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000000c 	.word	0x2000000c
 80012c8:	20000004 	.word	0x20000004
 80012cc:	20000008 	.word	0x20000008

080012d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_IncTick+0x20>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_IncTick+0x24>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <HAL_IncTick+0x24>)
 80012e2:	6013      	str	r3, [r2, #0]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	2000000c 	.word	0x2000000c
 80012f4:	200001c0 	.word	0x200001c0

080012f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return uwTick;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <HAL_GetTick+0x14>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	200001c0 	.word	0x200001c0

08001310 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001318:	f7ff ffee 	bl	80012f8 <HAL_GetTick>
 800131c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001328:	d005      	beq.n	8001336 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800132a:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <HAL_Delay+0x44>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	461a      	mov	r2, r3
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4413      	add	r3, r2
 8001334:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001336:	bf00      	nop
 8001338:	f7ff ffde 	bl	80012f8 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	429a      	cmp	r2, r3
 8001346:	d8f7      	bhi.n	8001338 <HAL_Delay+0x28>
  {
  }
}
 8001348:	bf00      	nop
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	2000000c 	.word	0x2000000c

08001358 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b480      	push	{r7}
 800135a:	b085      	sub	sp, #20
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001368:	4b0c      	ldr	r3, [pc, #48]	; (800139c <__NVIC_SetPriorityGrouping+0x44>)
 800136a:	68db      	ldr	r3, [r3, #12]
 800136c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001374:	4013      	ands	r3, r2
 8001376:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001380:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001388:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800138a:	4a04      	ldr	r2, [pc, #16]	; (800139c <__NVIC_SetPriorityGrouping+0x44>)
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	60d3      	str	r3, [r2, #12]
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a4:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <__NVIC_GetPriorityGrouping+0x18>)
 80013a6:	68db      	ldr	r3, [r3, #12]
 80013a8:	0a1b      	lsrs	r3, r3, #8
 80013aa:	f003 0307 	and.w	r3, r3, #7
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	4603      	mov	r3, r0
 80013c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	db0b      	blt.n	80013e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	f003 021f 	and.w	r2, r3, #31
 80013d4:	4907      	ldr	r1, [pc, #28]	; (80013f4 <__NVIC_EnableIRQ+0x38>)
 80013d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013da:	095b      	lsrs	r3, r3, #5
 80013dc:	2001      	movs	r0, #1
 80013de:	fa00 f202 	lsl.w	r2, r0, r2
 80013e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013e6:	bf00      	nop
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr
 80013f2:	bf00      	nop
 80013f4:	e000e100 	.word	0xe000e100

080013f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	6039      	str	r1, [r7, #0]
 8001402:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001408:	2b00      	cmp	r3, #0
 800140a:	db0a      	blt.n	8001422 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	b2da      	uxtb	r2, r3
 8001410:	490c      	ldr	r1, [pc, #48]	; (8001444 <__NVIC_SetPriority+0x4c>)
 8001412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001416:	0112      	lsls	r2, r2, #4
 8001418:	b2d2      	uxtb	r2, r2
 800141a:	440b      	add	r3, r1
 800141c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001420:	e00a      	b.n	8001438 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	b2da      	uxtb	r2, r3
 8001426:	4908      	ldr	r1, [pc, #32]	; (8001448 <__NVIC_SetPriority+0x50>)
 8001428:	79fb      	ldrb	r3, [r7, #7]
 800142a:	f003 030f 	and.w	r3, r3, #15
 800142e:	3b04      	subs	r3, #4
 8001430:	0112      	lsls	r2, r2, #4
 8001432:	b2d2      	uxtb	r2, r2
 8001434:	440b      	add	r3, r1
 8001436:	761a      	strb	r2, [r3, #24]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000e100 	.word	0xe000e100
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144c:	b480      	push	{r7}
 800144e:	b089      	sub	sp, #36	; 0x24
 8001450:	af00      	add	r7, sp, #0
 8001452:	60f8      	str	r0, [r7, #12]
 8001454:	60b9      	str	r1, [r7, #8]
 8001456:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	f003 0307 	and.w	r3, r3, #7
 800145e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	f1c3 0307 	rsb	r3, r3, #7
 8001466:	2b04      	cmp	r3, #4
 8001468:	bf28      	it	cs
 800146a:	2304      	movcs	r3, #4
 800146c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3304      	adds	r3, #4
 8001472:	2b06      	cmp	r3, #6
 8001474:	d902      	bls.n	800147c <NVIC_EncodePriority+0x30>
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	3b03      	subs	r3, #3
 800147a:	e000      	b.n	800147e <NVIC_EncodePriority+0x32>
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001480:	f04f 32ff 	mov.w	r2, #4294967295
 8001484:	69bb      	ldr	r3, [r7, #24]
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43da      	mvns	r2, r3
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	401a      	ands	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001494:	f04f 31ff 	mov.w	r1, #4294967295
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa01 f303 	lsl.w	r3, r1, r3
 800149e:	43d9      	mvns	r1, r3
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014a4:	4313      	orrs	r3, r2
         );
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3724      	adds	r7, #36	; 0x24
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
	...

080014b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b082      	sub	sp, #8
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	3b01      	subs	r3, #1
 80014c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014c4:	d301      	bcc.n	80014ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014c6:	2301      	movs	r3, #1
 80014c8:	e00f      	b.n	80014ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014ca:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <SysTick_Config+0x40>)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	3b01      	subs	r3, #1
 80014d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014d2:	210f      	movs	r1, #15
 80014d4:	f04f 30ff 	mov.w	r0, #4294967295
 80014d8:	f7ff ff8e 	bl	80013f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <SysTick_Config+0x40>)
 80014de:	2200      	movs	r2, #0
 80014e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014e2:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <SysTick_Config+0x40>)
 80014e4:	2207      	movs	r2, #7
 80014e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	e000e010 	.word	0xe000e010

080014f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f7ff ff29 	bl	8001358 <__NVIC_SetPriorityGrouping>
}
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}

0800150e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800150e:	b580      	push	{r7, lr}
 8001510:	b086      	sub	sp, #24
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001520:	f7ff ff3e 	bl	80013a0 <__NVIC_GetPriorityGrouping>
 8001524:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	68b9      	ldr	r1, [r7, #8]
 800152a:	6978      	ldr	r0, [r7, #20]
 800152c:	f7ff ff8e 	bl	800144c <NVIC_EncodePriority>
 8001530:	4602      	mov	r2, r0
 8001532:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001536:	4611      	mov	r1, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff ff5d 	bl	80013f8 <__NVIC_SetPriority>
}
 800153e:	bf00      	nop
 8001540:	3718      	adds	r7, #24
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}

08001546 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
 800154c:	4603      	mov	r3, r0
 800154e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff ff31 	bl	80013bc <__NVIC_EnableIRQ>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}

08001562 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b082      	sub	sp, #8
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f7ff ffa2 	bl	80014b4 <SysTick_Config>
 8001570:	4603      	mov	r3, r0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800157a:	b480      	push	{r7}
 800157c:	b085      	sub	sp, #20
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001582:	2300      	movs	r3, #0
 8001584:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800158c:	b2db      	uxtb	r3, r3
 800158e:	2b02      	cmp	r3, #2
 8001590:	d008      	beq.n	80015a4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2204      	movs	r2, #4
 8001596:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2200      	movs	r2, #0
 800159c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e022      	b.n	80015ea <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f022 020e 	bic.w	r2, r2, #14
 80015b2:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0201 	bic.w	r2, r2, #1
 80015c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c8:	f003 021c 	and.w	r2, r3, #28
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	2101      	movs	r1, #1
 80015d2:	fa01 f202 	lsl.w	r2, r1, r2
 80015d6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015fe:	2300      	movs	r3, #0
 8001600:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d005      	beq.n	800161a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	2204      	movs	r2, #4
 8001612:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	73fb      	strb	r3, [r7, #15]
 8001618:	e029      	b.n	800166e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 020e 	bic.w	r2, r2, #14
 8001628:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f022 0201 	bic.w	r2, r2, #1
 8001638:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f003 021c 	and.w	r2, r3, #28
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	2101      	movs	r1, #1
 8001648:	fa01 f202 	lsl.w	r2, r1, r2
 800164c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	2201      	movs	r2, #1
 8001652:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001662:	2b00      	cmp	r3, #0
 8001664:	d003      	beq.n	800166e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	4798      	blx	r3
    }
  }
  return status;
 800166e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001678:	b480      	push	{r7}
 800167a:	b087      	sub	sp, #28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001686:	e17f      	b.n	8001988 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	2101      	movs	r1, #1
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	fa01 f303 	lsl.w	r3, r1, r3
 8001694:	4013      	ands	r3, r2
 8001696:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	2b00      	cmp	r3, #0
 800169c:	f000 8171 	beq.w	8001982 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d005      	beq.n	80016b8 <HAL_GPIO_Init+0x40>
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 0303 	and.w	r3, r3, #3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d130      	bne.n	800171a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	2203      	movs	r2, #3
 80016c4:	fa02 f303 	lsl.w	r3, r2, r3
 80016c8:	43db      	mvns	r3, r3
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	4013      	ands	r3, r2
 80016ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	68da      	ldr	r2, [r3, #12]
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	fa02 f303 	lsl.w	r3, r2, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4313      	orrs	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016ee:	2201      	movs	r2, #1
 80016f0:	697b      	ldr	r3, [r7, #20]
 80016f2:	fa02 f303 	lsl.w	r3, r2, r3
 80016f6:	43db      	mvns	r3, r3
 80016f8:	693a      	ldr	r2, [r7, #16]
 80016fa:	4013      	ands	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	091b      	lsrs	r3, r3, #4
 8001704:	f003 0201 	and.w	r2, r3, #1
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	693a      	ldr	r2, [r7, #16]
 8001718:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	2b03      	cmp	r3, #3
 8001724:	d118      	bne.n	8001758 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800172a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800172c:	2201      	movs	r2, #1
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	08db      	lsrs	r3, r3, #3
 8001742:	f003 0201 	and.w	r2, r3, #1
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	2b03      	cmp	r3, #3
 8001762:	d017      	beq.n	8001794 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	68db      	ldr	r3, [r3, #12]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	2203      	movs	r2, #3
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	689a      	ldr	r2, [r3, #8]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d123      	bne.n	80017e8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	08da      	lsrs	r2, r3, #3
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3208      	adds	r2, #8
 80017a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	f003 0307 	and.w	r3, r3, #7
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	220f      	movs	r2, #15
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	693a      	ldr	r2, [r7, #16]
 80017c0:	4013      	ands	r3, r2
 80017c2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	691a      	ldr	r2, [r3, #16]
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	08da      	lsrs	r2, r3, #3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	3208      	adds	r2, #8
 80017e2:	6939      	ldr	r1, [r7, #16]
 80017e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	2203      	movs	r2, #3
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	43db      	mvns	r3, r3
 80017fa:	693a      	ldr	r2, [r7, #16]
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f003 0203 	and.w	r2, r3, #3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001824:	2b00      	cmp	r3, #0
 8001826:	f000 80ac 	beq.w	8001982 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800182a:	4b5f      	ldr	r3, [pc, #380]	; (80019a8 <HAL_GPIO_Init+0x330>)
 800182c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182e:	4a5e      	ldr	r2, [pc, #376]	; (80019a8 <HAL_GPIO_Init+0x330>)
 8001830:	f043 0301 	orr.w	r3, r3, #1
 8001834:	6613      	str	r3, [r2, #96]	; 0x60
 8001836:	4b5c      	ldr	r3, [pc, #368]	; (80019a8 <HAL_GPIO_Init+0x330>)
 8001838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001842:	4a5a      	ldr	r2, [pc, #360]	; (80019ac <HAL_GPIO_Init+0x334>)
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	3302      	adds	r3, #2
 800184a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	220f      	movs	r2, #15
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	4013      	ands	r3, r2
 8001864:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800186c:	d025      	beq.n	80018ba <HAL_GPIO_Init+0x242>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	4a4f      	ldr	r2, [pc, #316]	; (80019b0 <HAL_GPIO_Init+0x338>)
 8001872:	4293      	cmp	r3, r2
 8001874:	d01f      	beq.n	80018b6 <HAL_GPIO_Init+0x23e>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a4e      	ldr	r2, [pc, #312]	; (80019b4 <HAL_GPIO_Init+0x33c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d019      	beq.n	80018b2 <HAL_GPIO_Init+0x23a>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a4d      	ldr	r2, [pc, #308]	; (80019b8 <HAL_GPIO_Init+0x340>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d013      	beq.n	80018ae <HAL_GPIO_Init+0x236>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a4c      	ldr	r2, [pc, #304]	; (80019bc <HAL_GPIO_Init+0x344>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d00d      	beq.n	80018aa <HAL_GPIO_Init+0x232>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4b      	ldr	r2, [pc, #300]	; (80019c0 <HAL_GPIO_Init+0x348>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d007      	beq.n	80018a6 <HAL_GPIO_Init+0x22e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4a      	ldr	r2, [pc, #296]	; (80019c4 <HAL_GPIO_Init+0x34c>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d101      	bne.n	80018a2 <HAL_GPIO_Init+0x22a>
 800189e:	2306      	movs	r3, #6
 80018a0:	e00c      	b.n	80018bc <HAL_GPIO_Init+0x244>
 80018a2:	2307      	movs	r3, #7
 80018a4:	e00a      	b.n	80018bc <HAL_GPIO_Init+0x244>
 80018a6:	2305      	movs	r3, #5
 80018a8:	e008      	b.n	80018bc <HAL_GPIO_Init+0x244>
 80018aa:	2304      	movs	r3, #4
 80018ac:	e006      	b.n	80018bc <HAL_GPIO_Init+0x244>
 80018ae:	2303      	movs	r3, #3
 80018b0:	e004      	b.n	80018bc <HAL_GPIO_Init+0x244>
 80018b2:	2302      	movs	r3, #2
 80018b4:	e002      	b.n	80018bc <HAL_GPIO_Init+0x244>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e000      	b.n	80018bc <HAL_GPIO_Init+0x244>
 80018ba:	2300      	movs	r3, #0
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	f002 0203 	and.w	r2, r2, #3
 80018c2:	0092      	lsls	r2, r2, #2
 80018c4:	4093      	lsls	r3, r2
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018cc:	4937      	ldr	r1, [pc, #220]	; (80019ac <HAL_GPIO_Init+0x334>)
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	089b      	lsrs	r3, r3, #2
 80018d2:	3302      	adds	r3, #2
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018da:	4b3b      	ldr	r3, [pc, #236]	; (80019c8 <HAL_GPIO_Init+0x350>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	43db      	mvns	r3, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4013      	ands	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018fe:	4a32      	ldr	r2, [pc, #200]	; (80019c8 <HAL_GPIO_Init+0x350>)
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001904:	4b30      	ldr	r3, [pc, #192]	; (80019c8 <HAL_GPIO_Init+0x350>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	43db      	mvns	r3, r3
 800190e:	693a      	ldr	r2, [r7, #16]
 8001910:	4013      	ands	r3, r2
 8001912:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d003      	beq.n	8001928 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001928:	4a27      	ldr	r2, [pc, #156]	; (80019c8 <HAL_GPIO_Init+0x350>)
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800192e:	4b26      	ldr	r3, [pc, #152]	; (80019c8 <HAL_GPIO_Init+0x350>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	43db      	mvns	r3, r3
 8001938:	693a      	ldr	r2, [r7, #16]
 800193a:	4013      	ands	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	4313      	orrs	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001952:	4a1d      	ldr	r2, [pc, #116]	; (80019c8 <HAL_GPIO_Init+0x350>)
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001958:	4b1b      	ldr	r3, [pc, #108]	; (80019c8 <HAL_GPIO_Init+0x350>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	43db      	mvns	r3, r3
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	4013      	ands	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001974:	693a      	ldr	r2, [r7, #16]
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	4313      	orrs	r3, r2
 800197a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800197c:	4a12      	ldr	r2, [pc, #72]	; (80019c8 <HAL_GPIO_Init+0x350>)
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	3301      	adds	r3, #1
 8001986:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	fa22 f303 	lsr.w	r3, r2, r3
 8001992:	2b00      	cmp	r3, #0
 8001994:	f47f ae78 	bne.w	8001688 <HAL_GPIO_Init+0x10>
  }
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	371c      	adds	r7, #28
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40021000 	.word	0x40021000
 80019ac:	40010000 	.word	0x40010000
 80019b0:	48000400 	.word	0x48000400
 80019b4:	48000800 	.word	0x48000800
 80019b8:	48000c00 	.word	0x48000c00
 80019bc:	48001000 	.word	0x48001000
 80019c0:	48001400 	.word	0x48001400
 80019c4:	48001800 	.word	0x48001800
 80019c8:	40010400 	.word	0x40010400

080019cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	807b      	strh	r3, [r7, #2]
 80019d8:	4613      	mov	r3, r2
 80019da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019dc:	787b      	ldrb	r3, [r7, #1]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d003      	beq.n	80019ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019e2:	887a      	ldrh	r2, [r7, #2]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019e8:	e002      	b.n	80019f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019ea:	887a      	ldrh	r2, [r7, #2]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019f0:	bf00      	nop
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001a00:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <HAL_PWREx_GetVoltageRange+0x18>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40007000 	.word	0x40007000

08001a18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a26:	d130      	bne.n	8001a8a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a28:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a34:	d038      	beq.n	8001aa8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a36:	4b20      	ldr	r3, [pc, #128]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a3e:	4a1e      	ldr	r2, [pc, #120]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a44:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a46:	4b1d      	ldr	r3, [pc, #116]	; (8001abc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	2232      	movs	r2, #50	; 0x32
 8001a4c:	fb02 f303 	mul.w	r3, r2, r3
 8001a50:	4a1b      	ldr	r2, [pc, #108]	; (8001ac0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a52:	fba2 2303 	umull	r2, r3, r2, r3
 8001a56:	0c9b      	lsrs	r3, r3, #18
 8001a58:	3301      	adds	r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a5c:	e002      	b.n	8001a64 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	3b01      	subs	r3, #1
 8001a62:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a66:	695b      	ldr	r3, [r3, #20]
 8001a68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a70:	d102      	bne.n	8001a78 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d1f2      	bne.n	8001a5e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a78:	4b0f      	ldr	r3, [pc, #60]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a7a:	695b      	ldr	r3, [r3, #20]
 8001a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a84:	d110      	bne.n	8001aa8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e00f      	b.n	8001aaa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a96:	d007      	beq.n	8001aa8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001aa0:	4a05      	ldr	r2, [pc, #20]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001aa2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001aa6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3714      	adds	r7, #20
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40007000 	.word	0x40007000
 8001abc:	20000004 	.word	0x20000004
 8001ac0:	431bde83 	.word	0x431bde83

08001ac4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e3d4      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad6:	4ba1      	ldr	r3, [pc, #644]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	f003 030c 	and.w	r3, r3, #12
 8001ade:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ae0:	4b9e      	ldr	r3, [pc, #632]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0310 	and.w	r3, r3, #16
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 80e4 	beq.w	8001cc0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d007      	beq.n	8001b0e <HAL_RCC_OscConfig+0x4a>
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	2b0c      	cmp	r3, #12
 8001b02:	f040 808b 	bne.w	8001c1c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	f040 8087 	bne.w	8001c1c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b0e:	4b93      	ldr	r3, [pc, #588]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d005      	beq.n	8001b26 <HAL_RCC_OscConfig+0x62>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	699b      	ldr	r3, [r3, #24]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e3ac      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1a      	ldr	r2, [r3, #32]
 8001b2a:	4b8c      	ldr	r3, [pc, #560]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0308 	and.w	r3, r3, #8
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d004      	beq.n	8001b40 <HAL_RCC_OscConfig+0x7c>
 8001b36:	4b89      	ldr	r3, [pc, #548]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b3e:	e005      	b.n	8001b4c <HAL_RCC_OscConfig+0x88>
 8001b40:	4b86      	ldr	r3, [pc, #536]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d223      	bcs.n	8001b98 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a1b      	ldr	r3, [r3, #32]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f000 fd41 	bl	80025dc <RCC_SetFlashLatencyFromMSIRange>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e38d      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b64:	4b7d      	ldr	r3, [pc, #500]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a7c      	ldr	r2, [pc, #496]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b6a:	f043 0308 	orr.w	r3, r3, #8
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	4b7a      	ldr	r3, [pc, #488]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4977      	ldr	r1, [pc, #476]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b82:	4b76      	ldr	r3, [pc, #472]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69db      	ldr	r3, [r3, #28]
 8001b8e:	021b      	lsls	r3, r3, #8
 8001b90:	4972      	ldr	r1, [pc, #456]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b92:	4313      	orrs	r3, r2
 8001b94:	604b      	str	r3, [r1, #4]
 8001b96:	e025      	b.n	8001be4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b98:	4b70      	ldr	r3, [pc, #448]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a6f      	ldr	r2, [pc, #444]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001b9e:	f043 0308 	orr.w	r3, r3, #8
 8001ba2:	6013      	str	r3, [r2, #0]
 8001ba4:	4b6d      	ldr	r3, [pc, #436]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	496a      	ldr	r1, [pc, #424]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb6:	4b69      	ldr	r3, [pc, #420]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	69db      	ldr	r3, [r3, #28]
 8001bc2:	021b      	lsls	r3, r3, #8
 8001bc4:	4965      	ldr	r1, [pc, #404]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d109      	bne.n	8001be4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a1b      	ldr	r3, [r3, #32]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 fd01 	bl	80025dc <RCC_SetFlashLatencyFromMSIRange>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e34d      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001be4:	f000 fc36 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 8001be8:	4602      	mov	r2, r0
 8001bea:	4b5c      	ldr	r3, [pc, #368]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	091b      	lsrs	r3, r3, #4
 8001bf0:	f003 030f 	and.w	r3, r3, #15
 8001bf4:	495a      	ldr	r1, [pc, #360]	; (8001d60 <HAL_RCC_OscConfig+0x29c>)
 8001bf6:	5ccb      	ldrb	r3, [r1, r3]
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	fa22 f303 	lsr.w	r3, r2, r3
 8001c00:	4a58      	ldr	r2, [pc, #352]	; (8001d64 <HAL_RCC_OscConfig+0x2a0>)
 8001c02:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001c04:	4b58      	ldr	r3, [pc, #352]	; (8001d68 <HAL_RCC_OscConfig+0x2a4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fb25 	bl	8001258 <HAL_InitTick>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d052      	beq.n	8001cbe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001c18:	7bfb      	ldrb	r3, [r7, #15]
 8001c1a:	e331      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d032      	beq.n	8001c8a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c24:	4b4d      	ldr	r3, [pc, #308]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a4c      	ldr	r2, [pc, #304]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001c2a:	f043 0301 	orr.w	r3, r3, #1
 8001c2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c30:	f7ff fb62 	bl	80012f8 <HAL_GetTick>
 8001c34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c36:	e008      	b.n	8001c4a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c38:	f7ff fb5e 	bl	80012f8 <HAL_GetTick>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	1ad3      	subs	r3, r2, r3
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e31a      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c4a:	4b44      	ldr	r3, [pc, #272]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0f0      	beq.n	8001c38 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c56:	4b41      	ldr	r3, [pc, #260]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a40      	ldr	r2, [pc, #256]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001c5c:	f043 0308 	orr.w	r3, r3, #8
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	4b3e      	ldr	r3, [pc, #248]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a1b      	ldr	r3, [r3, #32]
 8001c6e:	493b      	ldr	r1, [pc, #236]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001c70:	4313      	orrs	r3, r2
 8001c72:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c74:	4b39      	ldr	r3, [pc, #228]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	69db      	ldr	r3, [r3, #28]
 8001c80:	021b      	lsls	r3, r3, #8
 8001c82:	4936      	ldr	r1, [pc, #216]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001c84:	4313      	orrs	r3, r2
 8001c86:	604b      	str	r3, [r1, #4]
 8001c88:	e01a      	b.n	8001cc0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c8a:	4b34      	ldr	r3, [pc, #208]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a33      	ldr	r2, [pc, #204]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001c90:	f023 0301 	bic.w	r3, r3, #1
 8001c94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c96:	f7ff fb2f 	bl	80012f8 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c9e:	f7ff fb2b 	bl	80012f8 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e2e7      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d1f0      	bne.n	8001c9e <HAL_RCC_OscConfig+0x1da>
 8001cbc:	e000      	b.n	8001cc0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cbe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f003 0301 	and.w	r3, r3, #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d074      	beq.n	8001db6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	2b08      	cmp	r3, #8
 8001cd0:	d005      	beq.n	8001cde <HAL_RCC_OscConfig+0x21a>
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	2b0c      	cmp	r3, #12
 8001cd6:	d10e      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cd8:	697b      	ldr	r3, [r7, #20]
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d10b      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cde:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d064      	beq.n	8001db4 <HAL_RCC_OscConfig+0x2f0>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d160      	bne.n	8001db4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e2c4      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	685b      	ldr	r3, [r3, #4]
 8001cfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cfe:	d106      	bne.n	8001d0e <HAL_RCC_OscConfig+0x24a>
 8001d00:	4b16      	ldr	r3, [pc, #88]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a15      	ldr	r2, [pc, #84]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0a:	6013      	str	r3, [r2, #0]
 8001d0c:	e01d      	b.n	8001d4a <HAL_RCC_OscConfig+0x286>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d16:	d10c      	bne.n	8001d32 <HAL_RCC_OscConfig+0x26e>
 8001d18:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a0f      	ldr	r2, [pc, #60]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001d1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d22:	6013      	str	r3, [r2, #0]
 8001d24:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0c      	ldr	r2, [pc, #48]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001d2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d2e:	6013      	str	r3, [r2, #0]
 8001d30:	e00b      	b.n	8001d4a <HAL_RCC_OscConfig+0x286>
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a09      	ldr	r2, [pc, #36]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d3c:	6013      	str	r3, [r2, #0]
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a06      	ldr	r2, [pc, #24]	; (8001d5c <HAL_RCC_OscConfig+0x298>)
 8001d44:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d48:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d01c      	beq.n	8001d8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d52:	f7ff fad1 	bl	80012f8 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d58:	e011      	b.n	8001d7e <HAL_RCC_OscConfig+0x2ba>
 8001d5a:	bf00      	nop
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	080062ac 	.word	0x080062ac
 8001d64:	20000004 	.word	0x20000004
 8001d68:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d6c:	f7ff fac4 	bl	80012f8 <HAL_GetTick>
 8001d70:	4602      	mov	r2, r0
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	2b64      	cmp	r3, #100	; 0x64
 8001d78:	d901      	bls.n	8001d7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e280      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d7e:	4baf      	ldr	r3, [pc, #700]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d0f0      	beq.n	8001d6c <HAL_RCC_OscConfig+0x2a8>
 8001d8a:	e014      	b.n	8001db6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d8c:	f7ff fab4 	bl	80012f8 <HAL_GetTick>
 8001d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d94:	f7ff fab0 	bl	80012f8 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b64      	cmp	r3, #100	; 0x64
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e26c      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001da6:	4ba5      	ldr	r3, [pc, #660]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f0      	bne.n	8001d94 <HAL_RCC_OscConfig+0x2d0>
 8001db2:	e000      	b.n	8001db6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d060      	beq.n	8001e84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	2b04      	cmp	r3, #4
 8001dc6:	d005      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x310>
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	2b0c      	cmp	r3, #12
 8001dcc:	d119      	bne.n	8001e02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d116      	bne.n	8001e02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dd4:	4b99      	ldr	r3, [pc, #612]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d005      	beq.n	8001dec <HAL_RCC_OscConfig+0x328>
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e249      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dec:	4b93      	ldr	r3, [pc, #588]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	061b      	lsls	r3, r3, #24
 8001dfa:	4990      	ldr	r1, [pc, #576]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001dfc:	4313      	orrs	r3, r2
 8001dfe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e00:	e040      	b.n	8001e84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	68db      	ldr	r3, [r3, #12]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d023      	beq.n	8001e52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e0a:	4b8c      	ldr	r3, [pc, #560]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a8b      	ldr	r2, [pc, #556]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e16:	f7ff fa6f 	bl	80012f8 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1e:	f7ff fa6b 	bl	80012f8 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e227      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e30:	4b82      	ldr	r3, [pc, #520]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3c:	4b7f      	ldr	r3, [pc, #508]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	691b      	ldr	r3, [r3, #16]
 8001e48:	061b      	lsls	r3, r3, #24
 8001e4a:	497c      	ldr	r1, [pc, #496]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	604b      	str	r3, [r1, #4]
 8001e50:	e018      	b.n	8001e84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e52:	4b7a      	ldr	r3, [pc, #488]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a79      	ldr	r2, [pc, #484]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001e58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e5e:	f7ff fa4b 	bl	80012f8 <HAL_GetTick>
 8001e62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e64:	e008      	b.n	8001e78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e66:	f7ff fa47 	bl	80012f8 <HAL_GetTick>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	2b02      	cmp	r3, #2
 8001e72:	d901      	bls.n	8001e78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e74:	2303      	movs	r3, #3
 8001e76:	e203      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e78:	4b70      	ldr	r3, [pc, #448]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1f0      	bne.n	8001e66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d03c      	beq.n	8001f0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	695b      	ldr	r3, [r3, #20]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d01c      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e98:	4b68      	ldr	r3, [pc, #416]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e9e:	4a67      	ldr	r2, [pc, #412]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001ea0:	f043 0301 	orr.w	r3, r3, #1
 8001ea4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea8:	f7ff fa26 	bl	80012f8 <HAL_GetTick>
 8001eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eae:	e008      	b.n	8001ec2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eb0:	f7ff fa22 	bl	80012f8 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	2b02      	cmp	r3, #2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e1de      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ec2:	4b5e      	ldr	r3, [pc, #376]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0ef      	beq.n	8001eb0 <HAL_RCC_OscConfig+0x3ec>
 8001ed0:	e01b      	b.n	8001f0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ed2:	4b5a      	ldr	r3, [pc, #360]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001ed4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed8:	4a58      	ldr	r2, [pc, #352]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001eda:	f023 0301 	bic.w	r3, r3, #1
 8001ede:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee2:	f7ff fa09 	bl	80012f8 <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ee8:	e008      	b.n	8001efc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001eea:	f7ff fa05 	bl	80012f8 <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d901      	bls.n	8001efc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ef8:	2303      	movs	r3, #3
 8001efa:	e1c1      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001efc:	4b4f      	ldr	r3, [pc, #316]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1ef      	bne.n	8001eea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	f000 80a6 	beq.w	8002064 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f1c:	4b47      	ldr	r3, [pc, #284]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d10d      	bne.n	8001f44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f28:	4b44      	ldr	r3, [pc, #272]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2c:	4a43      	ldr	r2, [pc, #268]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001f2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f32:	6593      	str	r3, [r2, #88]	; 0x58
 8001f34:	4b41      	ldr	r3, [pc, #260]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001f36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f3c:	60bb      	str	r3, [r7, #8]
 8001f3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f40:	2301      	movs	r3, #1
 8001f42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f44:	4b3e      	ldr	r3, [pc, #248]	; (8002040 <HAL_RCC_OscConfig+0x57c>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d118      	bne.n	8001f82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f50:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <HAL_RCC_OscConfig+0x57c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a3a      	ldr	r2, [pc, #232]	; (8002040 <HAL_RCC_OscConfig+0x57c>)
 8001f56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f5c:	f7ff f9cc 	bl	80012f8 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f64:	f7ff f9c8 	bl	80012f8 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b02      	cmp	r3, #2
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e184      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f76:	4b32      	ldr	r3, [pc, #200]	; (8002040 <HAL_RCC_OscConfig+0x57c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	2b01      	cmp	r3, #1
 8001f88:	d108      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4d8>
 8001f8a:	4b2c      	ldr	r3, [pc, #176]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f90:	4a2a      	ldr	r2, [pc, #168]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001f92:	f043 0301 	orr.w	r3, r3, #1
 8001f96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f9a:	e024      	b.n	8001fe6 <HAL_RCC_OscConfig+0x522>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b05      	cmp	r3, #5
 8001fa2:	d110      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x502>
 8001fa4:	4b25      	ldr	r3, [pc, #148]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001faa:	4a24      	ldr	r2, [pc, #144]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001fac:	f043 0304 	orr.w	r3, r3, #4
 8001fb0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fb4:	4b21      	ldr	r3, [pc, #132]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fba:	4a20      	ldr	r2, [pc, #128]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001fbc:	f043 0301 	orr.w	r3, r3, #1
 8001fc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fc4:	e00f      	b.n	8001fe6 <HAL_RCC_OscConfig+0x522>
 8001fc6:	4b1d      	ldr	r3, [pc, #116]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fcc:	4a1b      	ldr	r2, [pc, #108]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001fce:	f023 0301 	bic.w	r3, r3, #1
 8001fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fd6:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fdc:	4a17      	ldr	r2, [pc, #92]	; (800203c <HAL_RCC_OscConfig+0x578>)
 8001fde:	f023 0304 	bic.w	r3, r3, #4
 8001fe2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d016      	beq.n	800201c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fee:	f7ff f983 	bl	80012f8 <HAL_GetTick>
 8001ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff4:	e00a      	b.n	800200c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f7ff f97f 	bl	80012f8 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	693b      	ldr	r3, [r7, #16]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	f241 3288 	movw	r2, #5000	; 0x1388
 8002004:	4293      	cmp	r3, r2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e139      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCC_OscConfig+0x578>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d0ed      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x532>
 800201a:	e01a      	b.n	8002052 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201c:	f7ff f96c 	bl	80012f8 <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002022:	e00f      	b.n	8002044 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002024:	f7ff f968 	bl	80012f8 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002032:	4293      	cmp	r3, r2
 8002034:	d906      	bls.n	8002044 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e122      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
 800203a:	bf00      	nop
 800203c:	40021000 	.word	0x40021000
 8002040:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002044:	4b90      	ldr	r3, [pc, #576]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d1e8      	bne.n	8002024 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002052:	7ffb      	ldrb	r3, [r7, #31]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d105      	bne.n	8002064 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002058:	4b8b      	ldr	r3, [pc, #556]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	4a8a      	ldr	r2, [pc, #552]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 800205e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002062:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002068:	2b00      	cmp	r3, #0
 800206a:	f000 8108 	beq.w	800227e <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002072:	2b02      	cmp	r3, #2
 8002074:	f040 80d0 	bne.w	8002218 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002078:	4b83      	ldr	r3, [pc, #524]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	f003 0203 	and.w	r2, r3, #3
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	429a      	cmp	r2, r3
 800208a:	d130      	bne.n	80020ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	3b01      	subs	r3, #1
 8002098:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d127      	bne.n	80020ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020a8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d11f      	bne.n	80020ee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020b8:	2a07      	cmp	r2, #7
 80020ba:	bf14      	ite	ne
 80020bc:	2201      	movne	r2, #1
 80020be:	2200      	moveq	r2, #0
 80020c0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d113      	bne.n	80020ee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d0:	085b      	lsrs	r3, r3, #1
 80020d2:	3b01      	subs	r3, #1
 80020d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d109      	bne.n	80020ee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	3b01      	subs	r3, #1
 80020e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d06e      	beq.n	80021cc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	2b0c      	cmp	r3, #12
 80020f2:	d069      	beq.n	80021c8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020f4:	4b64      	ldr	r3, [pc, #400]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d105      	bne.n	800210c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002100:	4b61      	ldr	r3, [pc, #388]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0b7      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002110:	4b5d      	ldr	r3, [pc, #372]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a5c      	ldr	r2, [pc, #368]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002116:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800211a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800211c:	f7ff f8ec 	bl	80012f8 <HAL_GetTick>
 8002120:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002124:	f7ff f8e8 	bl	80012f8 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e0a4      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002136:	4b54      	ldr	r3, [pc, #336]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f0      	bne.n	8002124 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002142:	4b51      	ldr	r3, [pc, #324]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002144:	68da      	ldr	r2, [r3, #12]
 8002146:	4b51      	ldr	r3, [pc, #324]	; (800228c <HAL_RCC_OscConfig+0x7c8>)
 8002148:	4013      	ands	r3, r2
 800214a:	687a      	ldr	r2, [r7, #4]
 800214c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002152:	3a01      	subs	r2, #1
 8002154:	0112      	lsls	r2, r2, #4
 8002156:	4311      	orrs	r1, r2
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800215c:	0212      	lsls	r2, r2, #8
 800215e:	4311      	orrs	r1, r2
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002164:	0852      	lsrs	r2, r2, #1
 8002166:	3a01      	subs	r2, #1
 8002168:	0552      	lsls	r2, r2, #21
 800216a:	4311      	orrs	r1, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002170:	0852      	lsrs	r2, r2, #1
 8002172:	3a01      	subs	r2, #1
 8002174:	0652      	lsls	r2, r2, #25
 8002176:	4311      	orrs	r1, r2
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800217c:	0912      	lsrs	r2, r2, #4
 800217e:	0452      	lsls	r2, r2, #17
 8002180:	430a      	orrs	r2, r1
 8002182:	4941      	ldr	r1, [pc, #260]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002184:	4313      	orrs	r3, r2
 8002186:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002188:	4b3f      	ldr	r3, [pc, #252]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a3e      	ldr	r2, [pc, #248]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 800218e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002192:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002194:	4b3c      	ldr	r3, [pc, #240]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	4a3b      	ldr	r2, [pc, #236]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 800219a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800219e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021a0:	f7ff f8aa 	bl	80012f8 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a8:	f7ff f8a6 	bl	80012f8 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e062      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021ba:	4b33      	ldr	r3, [pc, #204]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021c6:	e05a      	b.n	800227e <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e059      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021cc:	4b2e      	ldr	r3, [pc, #184]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d152      	bne.n	800227e <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80021d8:	4b2b      	ldr	r3, [pc, #172]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a2a      	ldr	r2, [pc, #168]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 80021de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021e2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021e4:	4b28      	ldr	r3, [pc, #160]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	4a27      	ldr	r2, [pc, #156]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 80021ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021f0:	f7ff f882 	bl	80012f8 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f8:	f7ff f87e 	bl	80012f8 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e03a      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220a:	4b1f      	ldr	r3, [pc, #124]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d0f0      	beq.n	80021f8 <HAL_RCC_OscConfig+0x734>
 8002216:	e032      	b.n	800227e <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2b0c      	cmp	r3, #12
 800221c:	d02d      	beq.n	800227a <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800221e:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a19      	ldr	r2, [pc, #100]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002224:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002228:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800222a:	4b17      	ldr	r3, [pc, #92]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d105      	bne.n	8002242 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002236:	4b14      	ldr	r3, [pc, #80]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	4a13      	ldr	r2, [pc, #76]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 800223c:	f023 0303 	bic.w	r3, r3, #3
 8002240:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002244:	68db      	ldr	r3, [r3, #12]
 8002246:	4a10      	ldr	r2, [pc, #64]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 8002248:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800224c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002250:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002252:	f7ff f851 	bl	80012f8 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002258:	e008      	b.n	800226c <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225a:	f7ff f84d 	bl	80012f8 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	2b02      	cmp	r3, #2
 8002266:	d901      	bls.n	800226c <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002268:	2303      	movs	r3, #3
 800226a:	e009      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800226c:	4b06      	ldr	r3, [pc, #24]	; (8002288 <HAL_RCC_OscConfig+0x7c4>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d1f0      	bne.n	800225a <HAL_RCC_OscConfig+0x796>
 8002278:	e001      	b.n	800227e <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e000      	b.n	8002280 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3720      	adds	r7, #32
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40021000 	.word	0x40021000
 800228c:	f99d808c 	.word	0xf99d808c

08002290 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d101      	bne.n	80022a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
 80022a2:	e0c8      	b.n	8002436 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022a4:	4b66      	ldr	r3, [pc, #408]	; (8002440 <HAL_RCC_ClockConfig+0x1b0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d910      	bls.n	80022d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022b2:	4b63      	ldr	r3, [pc, #396]	; (8002440 <HAL_RCC_ClockConfig+0x1b0>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f023 0207 	bic.w	r2, r3, #7
 80022ba:	4961      	ldr	r1, [pc, #388]	; (8002440 <HAL_RCC_ClockConfig+0x1b0>)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	4313      	orrs	r3, r2
 80022c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c2:	4b5f      	ldr	r3, [pc, #380]	; (8002440 <HAL_RCC_ClockConfig+0x1b0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	683a      	ldr	r2, [r7, #0]
 80022cc:	429a      	cmp	r2, r3
 80022ce:	d001      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0b0      	b.n	8002436 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d04c      	beq.n	800237a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2b03      	cmp	r3, #3
 80022e6:	d107      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e8:	4b56      	ldr	r3, [pc, #344]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d121      	bne.n	8002338 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e09e      	b.n	8002436 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	d107      	bne.n	8002310 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002300:	4b50      	ldr	r3, [pc, #320]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002308:	2b00      	cmp	r3, #0
 800230a:	d115      	bne.n	8002338 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e092      	b.n	8002436 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d107      	bne.n	8002328 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002318:	4b4a      	ldr	r3, [pc, #296]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d109      	bne.n	8002338 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e086      	b.n	8002436 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002328:	4b46      	ldr	r3, [pc, #280]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002330:	2b00      	cmp	r3, #0
 8002332:	d101      	bne.n	8002338 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e07e      	b.n	8002436 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002338:	4b42      	ldr	r3, [pc, #264]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f023 0203 	bic.w	r2, r3, #3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	493f      	ldr	r1, [pc, #252]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 8002346:	4313      	orrs	r3, r2
 8002348:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800234a:	f7fe ffd5 	bl	80012f8 <HAL_GetTick>
 800234e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002350:	e00a      	b.n	8002368 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002352:	f7fe ffd1 	bl	80012f8 <HAL_GetTick>
 8002356:	4602      	mov	r2, r0
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002360:	4293      	cmp	r3, r2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e066      	b.n	8002436 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002368:	4b36      	ldr	r3, [pc, #216]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	f003 020c 	and.w	r2, r3, #12
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	429a      	cmp	r2, r3
 8002378:	d1eb      	bne.n	8002352 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d008      	beq.n	8002398 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002386:	4b2f      	ldr	r3, [pc, #188]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 8002388:	689b      	ldr	r3, [r3, #8]
 800238a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	492c      	ldr	r1, [pc, #176]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 8002394:	4313      	orrs	r3, r2
 8002396:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002398:	4b29      	ldr	r3, [pc, #164]	; (8002440 <HAL_RCC_ClockConfig+0x1b0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0307 	and.w	r3, r3, #7
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d210      	bcs.n	80023c8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023a6:	4b26      	ldr	r3, [pc, #152]	; (8002440 <HAL_RCC_ClockConfig+0x1b0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f023 0207 	bic.w	r2, r3, #7
 80023ae:	4924      	ldr	r1, [pc, #144]	; (8002440 <HAL_RCC_ClockConfig+0x1b0>)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b22      	ldr	r3, [pc, #136]	; (8002440 <HAL_RCC_ClockConfig+0x1b0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e036      	b.n	8002436 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023d4:	4b1b      	ldr	r3, [pc, #108]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 80023d6:	689b      	ldr	r3, [r3, #8]
 80023d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	4918      	ldr	r1, [pc, #96]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d009      	beq.n	8002406 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023f2:	4b14      	ldr	r3, [pc, #80]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	00db      	lsls	r3, r3, #3
 8002400:	4910      	ldr	r1, [pc, #64]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 8002402:	4313      	orrs	r3, r2
 8002404:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002406:	f000 f825 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 800240a:	4602      	mov	r2, r0
 800240c:	4b0d      	ldr	r3, [pc, #52]	; (8002444 <HAL_RCC_ClockConfig+0x1b4>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	091b      	lsrs	r3, r3, #4
 8002412:	f003 030f 	and.w	r3, r3, #15
 8002416:	490c      	ldr	r1, [pc, #48]	; (8002448 <HAL_RCC_ClockConfig+0x1b8>)
 8002418:	5ccb      	ldrb	r3, [r1, r3]
 800241a:	f003 031f 	and.w	r3, r3, #31
 800241e:	fa22 f303 	lsr.w	r3, r2, r3
 8002422:	4a0a      	ldr	r2, [pc, #40]	; (800244c <HAL_RCC_ClockConfig+0x1bc>)
 8002424:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002426:	4b0a      	ldr	r3, [pc, #40]	; (8002450 <HAL_RCC_ClockConfig+0x1c0>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f7fe ff14 	bl	8001258 <HAL_InitTick>
 8002430:	4603      	mov	r3, r0
 8002432:	72fb      	strb	r3, [r7, #11]

  return status;
 8002434:	7afb      	ldrb	r3, [r7, #11]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	40022000 	.word	0x40022000
 8002444:	40021000 	.word	0x40021000
 8002448:	080062ac 	.word	0x080062ac
 800244c:	20000004 	.word	0x20000004
 8002450:	20000008 	.word	0x20000008

08002454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002462:	4b3e      	ldr	r3, [pc, #248]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800246c:	4b3b      	ldr	r3, [pc, #236]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	f003 0303 	and.w	r3, r3, #3
 8002474:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0x34>
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	2b0c      	cmp	r3, #12
 8002480:	d121      	bne.n	80024c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b01      	cmp	r3, #1
 8002486:	d11e      	bne.n	80024c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002488:	4b34      	ldr	r3, [pc, #208]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b00      	cmp	r3, #0
 8002492:	d107      	bne.n	80024a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002494:	4b31      	ldr	r3, [pc, #196]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 8002496:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800249a:	0a1b      	lsrs	r3, r3, #8
 800249c:	f003 030f 	and.w	r3, r3, #15
 80024a0:	61fb      	str	r3, [r7, #28]
 80024a2:	e005      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80024a4:	4b2d      	ldr	r3, [pc, #180]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 030f 	and.w	r3, r3, #15
 80024ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80024b0:	4a2b      	ldr	r2, [pc, #172]	; (8002560 <HAL_RCC_GetSysClockFreq+0x10c>)
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10d      	bne.n	80024dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024c4:	e00a      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	2b04      	cmp	r3, #4
 80024ca:	d102      	bne.n	80024d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024cc:	4b25      	ldr	r3, [pc, #148]	; (8002564 <HAL_RCC_GetSysClockFreq+0x110>)
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	e004      	b.n	80024dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d101      	bne.n	80024dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024d8:	4b23      	ldr	r3, [pc, #140]	; (8002568 <HAL_RCC_GetSysClockFreq+0x114>)
 80024da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	2b0c      	cmp	r3, #12
 80024e0:	d134      	bne.n	800254c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024e2:	4b1e      	ldr	r3, [pc, #120]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f003 0303 	and.w	r3, r3, #3
 80024ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d003      	beq.n	80024fa <HAL_RCC_GetSysClockFreq+0xa6>
 80024f2:	68bb      	ldr	r3, [r7, #8]
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d003      	beq.n	8002500 <HAL_RCC_GetSysClockFreq+0xac>
 80024f8:	e005      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80024fa:	4b1a      	ldr	r3, [pc, #104]	; (8002564 <HAL_RCC_GetSysClockFreq+0x110>)
 80024fc:	617b      	str	r3, [r7, #20]
      break;
 80024fe:	e005      	b.n	800250c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002500:	4b19      	ldr	r3, [pc, #100]	; (8002568 <HAL_RCC_GetSysClockFreq+0x114>)
 8002502:	617b      	str	r3, [r7, #20]
      break;
 8002504:	e002      	b.n	800250c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	617b      	str	r3, [r7, #20]
      break;
 800250a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800250c:	4b13      	ldr	r3, [pc, #76]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	091b      	lsrs	r3, r3, #4
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	3301      	adds	r3, #1
 8002518:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800251a:	4b10      	ldr	r3, [pc, #64]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	0a1b      	lsrs	r3, r3, #8
 8002520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002524:	697a      	ldr	r2, [r7, #20]
 8002526:	fb02 f203 	mul.w	r2, r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002530:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <HAL_RCC_GetSysClockFreq+0x108>)
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	0e5b      	lsrs	r3, r3, #25
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	3301      	adds	r3, #1
 800253e:	005b      	lsls	r3, r3, #1
 8002540:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	fbb2 f3f3 	udiv	r3, r2, r3
 800254a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800254c:	69bb      	ldr	r3, [r7, #24]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3724      	adds	r7, #36	; 0x24
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	40021000 	.word	0x40021000
 8002560:	080062c4 	.word	0x080062c4
 8002564:	00f42400 	.word	0x00f42400
 8002568:	007a1200 	.word	0x007a1200

0800256c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002570:	4b03      	ldr	r3, [pc, #12]	; (8002580 <HAL_RCC_GetHCLKFreq+0x14>)
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20000004 	.word	0x20000004

08002584 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002588:	f7ff fff0 	bl	800256c <HAL_RCC_GetHCLKFreq>
 800258c:	4602      	mov	r2, r0
 800258e:	4b06      	ldr	r3, [pc, #24]	; (80025a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	0a1b      	lsrs	r3, r3, #8
 8002594:	f003 0307 	and.w	r3, r3, #7
 8002598:	4904      	ldr	r1, [pc, #16]	; (80025ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800259a:	5ccb      	ldrb	r3, [r1, r3]
 800259c:	f003 031f 	and.w	r3, r3, #31
 80025a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000
 80025ac:	080062bc 	.word	0x080062bc

080025b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025b4:	f7ff ffda 	bl	800256c <HAL_RCC_GetHCLKFreq>
 80025b8:	4602      	mov	r2, r0
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	0adb      	lsrs	r3, r3, #11
 80025c0:	f003 0307 	and.w	r3, r3, #7
 80025c4:	4904      	ldr	r1, [pc, #16]	; (80025d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025c6:	5ccb      	ldrb	r3, [r1, r3]
 80025c8:	f003 031f 	and.w	r3, r3, #31
 80025cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40021000 	.word	0x40021000
 80025d8:	080062bc 	.word	0x080062bc

080025dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80025e8:	4b2a      	ldr	r3, [pc, #168]	; (8002694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80025f4:	f7ff fa02 	bl	80019fc <HAL_PWREx_GetVoltageRange>
 80025f8:	6178      	str	r0, [r7, #20]
 80025fa:	e014      	b.n	8002626 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80025fc:	4b25      	ldr	r3, [pc, #148]	; (8002694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80025fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002600:	4a24      	ldr	r2, [pc, #144]	; (8002694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002602:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002606:	6593      	str	r3, [r2, #88]	; 0x58
 8002608:	4b22      	ldr	r3, [pc, #136]	; (8002694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800260a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002610:	60fb      	str	r3, [r7, #12]
 8002612:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002614:	f7ff f9f2 	bl	80019fc <HAL_PWREx_GetVoltageRange>
 8002618:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800261a:	4b1e      	ldr	r3, [pc, #120]	; (8002694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800261c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800261e:	4a1d      	ldr	r2, [pc, #116]	; (8002694 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002620:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002624:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800262c:	d10b      	bne.n	8002646 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2b80      	cmp	r3, #128	; 0x80
 8002632:	d919      	bls.n	8002668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2ba0      	cmp	r3, #160	; 0xa0
 8002638:	d902      	bls.n	8002640 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800263a:	2302      	movs	r3, #2
 800263c:	613b      	str	r3, [r7, #16]
 800263e:	e013      	b.n	8002668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002640:	2301      	movs	r3, #1
 8002642:	613b      	str	r3, [r7, #16]
 8002644:	e010      	b.n	8002668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2b80      	cmp	r3, #128	; 0x80
 800264a:	d902      	bls.n	8002652 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800264c:	2303      	movs	r3, #3
 800264e:	613b      	str	r3, [r7, #16]
 8002650:	e00a      	b.n	8002668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2b80      	cmp	r3, #128	; 0x80
 8002656:	d102      	bne.n	800265e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002658:	2302      	movs	r3, #2
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	e004      	b.n	8002668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2b70      	cmp	r3, #112	; 0x70
 8002662:	d101      	bne.n	8002668 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002664:	2301      	movs	r3, #1
 8002666:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002668:	4b0b      	ldr	r3, [pc, #44]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f023 0207 	bic.w	r2, r3, #7
 8002670:	4909      	ldr	r1, [pc, #36]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	4313      	orrs	r3, r2
 8002676:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002678:	4b07      	ldr	r3, [pc, #28]	; (8002698 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0307 	and.w	r3, r3, #7
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	429a      	cmp	r2, r3
 8002684:	d001      	beq.n	800268a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3718      	adds	r7, #24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40021000 	.word	0x40021000
 8002698:	40022000 	.word	0x40022000

0800269c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b086      	sub	sp, #24
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80026a4:	2300      	movs	r3, #0
 80026a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026a8:	2300      	movs	r3, #0
 80026aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d041      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026c0:	d02a      	beq.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80026c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80026c6:	d824      	bhi.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026cc:	d008      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80026ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80026d2:	d81e      	bhi.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d00a      	beq.n	80026ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80026d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026dc:	d010      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80026de:	e018      	b.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026e0:	4b86      	ldr	r3, [pc, #536]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	4a85      	ldr	r2, [pc, #532]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026ec:	e015      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2100      	movs	r1, #0
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 fabb 	bl	8002c70 <RCCEx_PLLSAI1_Config>
 80026fa:	4603      	mov	r3, r0
 80026fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80026fe:	e00c      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3320      	adds	r3, #32
 8002704:	2100      	movs	r1, #0
 8002706:	4618      	mov	r0, r3
 8002708:	f000 fba6 	bl	8002e58 <RCCEx_PLLSAI2_Config>
 800270c:	4603      	mov	r3, r0
 800270e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002710:	e003      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	74fb      	strb	r3, [r7, #19]
      break;
 8002716:	e000      	b.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002718:	bf00      	nop
    }

    if(ret == HAL_OK)
 800271a:	7cfb      	ldrb	r3, [r7, #19]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10b      	bne.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002720:	4b76      	ldr	r3, [pc, #472]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002726:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800272e:	4973      	ldr	r1, [pc, #460]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002736:	e001      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d041      	beq.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800274c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002750:	d02a      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002752:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002756:	d824      	bhi.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002758:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800275c:	d008      	beq.n	8002770 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800275e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002762:	d81e      	bhi.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00a      	beq.n	800277e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002768:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800276c:	d010      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800276e:	e018      	b.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002770:	4b62      	ldr	r3, [pc, #392]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	4a61      	ldr	r2, [pc, #388]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002776:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800277c:	e015      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3304      	adds	r3, #4
 8002782:	2100      	movs	r1, #0
 8002784:	4618      	mov	r0, r3
 8002786:	f000 fa73 	bl	8002c70 <RCCEx_PLLSAI1_Config>
 800278a:	4603      	mov	r3, r0
 800278c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800278e:	e00c      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	3320      	adds	r3, #32
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f000 fb5e 	bl	8002e58 <RCCEx_PLLSAI2_Config>
 800279c:	4603      	mov	r3, r0
 800279e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80027a0:	e003      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	74fb      	strb	r3, [r7, #19]
      break;
 80027a6:	e000      	b.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80027a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027aa:	7cfb      	ldrb	r3, [r7, #19]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d10b      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80027b0:	4b52      	ldr	r3, [pc, #328]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027be:	494f      	ldr	r1, [pc, #316]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027c6:	e001      	b.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027c8:	7cfb      	ldrb	r3, [r7, #19]
 80027ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80a0 	beq.w	800291a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027da:	2300      	movs	r3, #0
 80027dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80027de:	4b47      	ldr	r3, [pc, #284]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d101      	bne.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x152>
 80027ea:	2301      	movs	r3, #1
 80027ec:	e000      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80027ee:	2300      	movs	r3, #0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00d      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f4:	4b41      	ldr	r3, [pc, #260]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	4a40      	ldr	r2, [pc, #256]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002800:	4b3e      	ldr	r3, [pc, #248]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002808:	60bb      	str	r3, [r7, #8]
 800280a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800280c:	2301      	movs	r3, #1
 800280e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002810:	4b3b      	ldr	r3, [pc, #236]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a3a      	ldr	r2, [pc, #232]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002816:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800281a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800281c:	f7fe fd6c 	bl	80012f8 <HAL_GetTick>
 8002820:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002822:	e009      	b.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002824:	f7fe fd68 	bl	80012f8 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	2b02      	cmp	r3, #2
 8002830:	d902      	bls.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	74fb      	strb	r3, [r7, #19]
        break;
 8002836:	e005      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002838:	4b31      	ldr	r3, [pc, #196]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0ef      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002844:	7cfb      	ldrb	r3, [r7, #19]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d15c      	bne.n	8002904 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800284a:	4b2c      	ldr	r3, [pc, #176]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002850:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002854:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01f      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	429a      	cmp	r2, r3
 8002866:	d019      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002868:	4b24      	ldr	r3, [pc, #144]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800286a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800286e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002872:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002874:	4b21      	ldr	r3, [pc, #132]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800287a:	4a20      	ldr	r2, [pc, #128]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800287c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002880:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002884:	4b1d      	ldr	r3, [pc, #116]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800288a:	4a1c      	ldr	r2, [pc, #112]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800288c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002890:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002894:	4a19      	ldr	r2, [pc, #100]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	f003 0301 	and.w	r3, r3, #1
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d016      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a6:	f7fe fd27 	bl	80012f8 <HAL_GetTick>
 80028aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ac:	e00b      	b.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ae:	f7fe fd23 	bl	80012f8 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80028bc:	4293      	cmp	r3, r2
 80028be:	d902      	bls.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	74fb      	strb	r3, [r7, #19]
            break;
 80028c4:	e006      	b.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028c6:	4b0d      	ldr	r3, [pc, #52]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0ec      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80028d4:	7cfb      	ldrb	r3, [r7, #19]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d10c      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80028da:	4b08      	ldr	r3, [pc, #32]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028ea:	4904      	ldr	r1, [pc, #16]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80028f2:	e009      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80028f4:	7cfb      	ldrb	r3, [r7, #19]
 80028f6:	74bb      	strb	r3, [r7, #18]
 80028f8:	e006      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80028fa:	bf00      	nop
 80028fc:	40021000 	.word	0x40021000
 8002900:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002904:	7cfb      	ldrb	r3, [r7, #19]
 8002906:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002908:	7c7b      	ldrb	r3, [r7, #17]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d105      	bne.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800290e:	4b9e      	ldr	r3, [pc, #632]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002912:	4a9d      	ldr	r2, [pc, #628]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002914:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002918:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00a      	beq.n	800293c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002926:	4b98      	ldr	r3, [pc, #608]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002928:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292c:	f023 0203 	bic.w	r2, r3, #3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002934:	4994      	ldr	r1, [pc, #592]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002936:	4313      	orrs	r3, r2
 8002938:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00a      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002948:	4b8f      	ldr	r3, [pc, #572]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800294a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800294e:	f023 020c 	bic.w	r2, r3, #12
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002956:	498c      	ldr	r1, [pc, #560]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002958:	4313      	orrs	r3, r2
 800295a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0304 	and.w	r3, r3, #4
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800296a:	4b87      	ldr	r3, [pc, #540]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800296c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002970:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002978:	4983      	ldr	r1, [pc, #524]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0308 	and.w	r3, r3, #8
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00a      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800298c:	4b7e      	ldr	r3, [pc, #504]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	497b      	ldr	r1, [pc, #492]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0310 	and.w	r3, r3, #16
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d00a      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80029ae:	4b76      	ldr	r3, [pc, #472]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029bc:	4972      	ldr	r1, [pc, #456]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d00a      	beq.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029d0:	4b6d      	ldr	r3, [pc, #436]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029de:	496a      	ldr	r1, [pc, #424]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00a      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029f2:	4b65      	ldr	r3, [pc, #404]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a00:	4961      	ldr	r1, [pc, #388]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a02:	4313      	orrs	r3, r2
 8002a04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d00a      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002a14:	4b5c      	ldr	r3, [pc, #368]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a22:	4959      	ldr	r1, [pc, #356]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a24:	4313      	orrs	r3, r2
 8002a26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d00a      	beq.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a36:	4b54      	ldr	r3, [pc, #336]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a44:	4950      	ldr	r1, [pc, #320]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00a      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002a58:	4b4b      	ldr	r3, [pc, #300]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a66:	4948      	ldr	r1, [pc, #288]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d00a      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a7a:	4b43      	ldr	r3, [pc, #268]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a88:	493f      	ldr	r1, [pc, #252]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d028      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a9c:	4b3a      	ldr	r3, [pc, #232]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002aaa:	4937      	ldr	r1, [pc, #220]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ab6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002aba:	d106      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002abc:	4b32      	ldr	r3, [pc, #200]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abe:	68db      	ldr	r3, [r3, #12]
 8002ac0:	4a31      	ldr	r2, [pc, #196]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ac2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ac6:	60d3      	str	r3, [r2, #12]
 8002ac8:	e011      	b.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ace:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ad2:	d10c      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3304      	adds	r3, #4
 8002ad8:	2101      	movs	r1, #1
 8002ada:	4618      	mov	r0, r3
 8002adc:	f000 f8c8 	bl	8002c70 <RCCEx_PLLSAI1_Config>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ae4:	7cfb      	ldrb	r3, [r7, #19]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002aea:	7cfb      	ldrb	r3, [r7, #19]
 8002aec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d028      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002afa:	4b23      	ldr	r3, [pc, #140]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b00:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b08:	491f      	ldr	r1, [pc, #124]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b14:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b18:	d106      	bne.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b1a:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	4a1a      	ldr	r2, [pc, #104]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b24:	60d3      	str	r3, [r2, #12]
 8002b26:	e011      	b.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b30:	d10c      	bne.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	3304      	adds	r3, #4
 8002b36:	2101      	movs	r1, #1
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 f899 	bl	8002c70 <RCCEx_PLLSAI1_Config>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b42:	7cfb      	ldrb	r3, [r7, #19]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002b48:	7cfb      	ldrb	r3, [r7, #19]
 8002b4a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d02b      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b58:	4b0b      	ldr	r3, [pc, #44]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b66:	4908      	ldr	r1, [pc, #32]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b76:	d109      	bne.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b78:	4b03      	ldr	r3, [pc, #12]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4a02      	ldr	r2, [pc, #8]	; (8002b88 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b82:	60d3      	str	r3, [r2, #12]
 8002b84:	e014      	b.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002b86:	bf00      	nop
 8002b88:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b90:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b94:	d10c      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3304      	adds	r3, #4
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 f867 	bl	8002c70 <RCCEx_PLLSAI1_Config>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ba6:	7cfb      	ldrb	r3, [r7, #19]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002bac:	7cfb      	ldrb	r3, [r7, #19]
 8002bae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d02f      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bbc:	4b2b      	ldr	r3, [pc, #172]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bca:	4928      	ldr	r1, [pc, #160]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002bda:	d10d      	bne.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3304      	adds	r3, #4
 8002be0:	2102      	movs	r1, #2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f844 	bl	8002c70 <RCCEx_PLLSAI1_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002bec:	7cfb      	ldrb	r3, [r7, #19]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d014      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002bf2:	7cfb      	ldrb	r3, [r7, #19]
 8002bf4:	74bb      	strb	r3, [r7, #18]
 8002bf6:	e011      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c00:	d10c      	bne.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	3320      	adds	r3, #32
 8002c06:	2102      	movs	r1, #2
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f000 f925 	bl	8002e58 <RCCEx_PLLSAI2_Config>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c12:	7cfb      	ldrb	r3, [r7, #19]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002c18:	7cfb      	ldrb	r3, [r7, #19]
 8002c1a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00a      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002c28:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c2e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c36:	490d      	ldr	r1, [pc, #52]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00b      	beq.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002c4a:	4b08      	ldr	r3, [pc, #32]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c50:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c5a:	4904      	ldr	r1, [pc, #16]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002c62:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3718      	adds	r7, #24
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40021000 	.word	0x40021000

08002c70 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c7e:	4b75      	ldr	r3, [pc, #468]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d018      	beq.n	8002cbc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002c8a:	4b72      	ldr	r3, [pc, #456]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	f003 0203 	and.w	r2, r3, #3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d10d      	bne.n	8002cb6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
       ||
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d009      	beq.n	8002cb6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002ca2:	4b6c      	ldr	r3, [pc, #432]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	685b      	ldr	r3, [r3, #4]
       ||
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d047      	beq.n	8002d46 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	73fb      	strb	r3, [r7, #15]
 8002cba:	e044      	b.n	8002d46 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d018      	beq.n	8002cf6 <RCCEx_PLLSAI1_Config+0x86>
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d825      	bhi.n	8002d14 <RCCEx_PLLSAI1_Config+0xa4>
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d002      	beq.n	8002cd2 <RCCEx_PLLSAI1_Config+0x62>
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d009      	beq.n	8002ce4 <RCCEx_PLLSAI1_Config+0x74>
 8002cd0:	e020      	b.n	8002d14 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002cd2:	4b60      	ldr	r3, [pc, #384]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d11d      	bne.n	8002d1a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ce2:	e01a      	b.n	8002d1a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ce4:	4b5b      	ldr	r3, [pc, #364]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d116      	bne.n	8002d1e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf4:	e013      	b.n	8002d1e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002cf6:	4b57      	ldr	r3, [pc, #348]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d10f      	bne.n	8002d22 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d02:	4b54      	ldr	r3, [pc, #336]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d109      	bne.n	8002d22 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d12:	e006      	b.n	8002d22 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
      break;
 8002d18:	e004      	b.n	8002d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d1a:	bf00      	nop
 8002d1c:	e002      	b.n	8002d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d1e:	bf00      	nop
 8002d20:	e000      	b.n	8002d24 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002d22:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d24:	7bfb      	ldrb	r3, [r7, #15]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d10d      	bne.n	8002d46 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d2a:	4b4a      	ldr	r3, [pc, #296]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6819      	ldr	r1, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	430b      	orrs	r3, r1
 8002d40:	4944      	ldr	r1, [pc, #272]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002d46:	7bfb      	ldrb	r3, [r7, #15]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d17d      	bne.n	8002e48 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002d4c:	4b41      	ldr	r3, [pc, #260]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a40      	ldr	r2, [pc, #256]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d52:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002d56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d58:	f7fe face 	bl	80012f8 <HAL_GetTick>
 8002d5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d5e:	e009      	b.n	8002d74 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d60:	f7fe faca 	bl	80012f8 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d902      	bls.n	8002d74 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	73fb      	strb	r3, [r7, #15]
        break;
 8002d72:	e005      	b.n	8002d80 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002d74:	4b37      	ldr	r3, [pc, #220]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d1ef      	bne.n	8002d60 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002d80:	7bfb      	ldrb	r3, [r7, #15]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d160      	bne.n	8002e48 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d111      	bne.n	8002db0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d8c:	4b31      	ldr	r3, [pc, #196]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d8e:	691b      	ldr	r3, [r3, #16]
 8002d90:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	6892      	ldr	r2, [r2, #8]
 8002d9c:	0211      	lsls	r1, r2, #8
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	68d2      	ldr	r2, [r2, #12]
 8002da2:	0912      	lsrs	r2, r2, #4
 8002da4:	0452      	lsls	r2, r2, #17
 8002da6:	430a      	orrs	r2, r1
 8002da8:	492a      	ldr	r1, [pc, #168]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	610b      	str	r3, [r1, #16]
 8002dae:	e027      	b.n	8002e00 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d112      	bne.n	8002ddc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002db6:	4b27      	ldr	r3, [pc, #156]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db8:	691b      	ldr	r3, [r3, #16]
 8002dba:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002dbe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6892      	ldr	r2, [r2, #8]
 8002dc6:	0211      	lsls	r1, r2, #8
 8002dc8:	687a      	ldr	r2, [r7, #4]
 8002dca:	6912      	ldr	r2, [r2, #16]
 8002dcc:	0852      	lsrs	r2, r2, #1
 8002dce:	3a01      	subs	r2, #1
 8002dd0:	0552      	lsls	r2, r2, #21
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	491f      	ldr	r1, [pc, #124]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd6:	4313      	orrs	r3, r2
 8002dd8:	610b      	str	r3, [r1, #16]
 8002dda:	e011      	b.n	8002e00 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ddc:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dde:	691b      	ldr	r3, [r3, #16]
 8002de0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002de4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	6892      	ldr	r2, [r2, #8]
 8002dec:	0211      	lsls	r1, r2, #8
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	6952      	ldr	r2, [r2, #20]
 8002df2:	0852      	lsrs	r2, r2, #1
 8002df4:	3a01      	subs	r2, #1
 8002df6:	0652      	lsls	r2, r2, #25
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	4916      	ldr	r1, [pc, #88]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002e00:	4b14      	ldr	r3, [pc, #80]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a13      	ldr	r2, [pc, #76]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e0a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e0c:	f7fe fa74 	bl	80012f8 <HAL_GetTick>
 8002e10:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e12:	e009      	b.n	8002e28 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e14:	f7fe fa70 	bl	80012f8 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d902      	bls.n	8002e28 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	73fb      	strb	r3, [r7, #15]
          break;
 8002e26:	e005      	b.n	8002e34 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e28:	4b0a      	ldr	r3, [pc, #40]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0ef      	beq.n	8002e14 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002e34:	7bfb      	ldrb	r3, [r7, #15]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d106      	bne.n	8002e48 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002e3a:	4b06      	ldr	r3, [pc, #24]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e3c:	691a      	ldr	r2, [r3, #16]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	4904      	ldr	r1, [pc, #16]	; (8002e54 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e44:	4313      	orrs	r3, r2
 8002e46:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}
 8002e52:	bf00      	nop
 8002e54:	40021000 	.word	0x40021000

08002e58 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b084      	sub	sp, #16
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e66:	4b6a      	ldr	r3, [pc, #424]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d018      	beq.n	8002ea4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002e72:	4b67      	ldr	r3, [pc, #412]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	f003 0203 	and.w	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d10d      	bne.n	8002e9e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
       ||
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d009      	beq.n	8002e9e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002e8a:	4b61      	ldr	r3, [pc, #388]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e8c:	68db      	ldr	r3, [r3, #12]
 8002e8e:	091b      	lsrs	r3, r3, #4
 8002e90:	f003 0307 	and.w	r3, r3, #7
 8002e94:	1c5a      	adds	r2, r3, #1
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	685b      	ldr	r3, [r3, #4]
       ||
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d047      	beq.n	8002f2e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	73fb      	strb	r3, [r7, #15]
 8002ea2:	e044      	b.n	8002f2e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2b03      	cmp	r3, #3
 8002eaa:	d018      	beq.n	8002ede <RCCEx_PLLSAI2_Config+0x86>
 8002eac:	2b03      	cmp	r3, #3
 8002eae:	d825      	bhi.n	8002efc <RCCEx_PLLSAI2_Config+0xa4>
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d002      	beq.n	8002eba <RCCEx_PLLSAI2_Config+0x62>
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d009      	beq.n	8002ecc <RCCEx_PLLSAI2_Config+0x74>
 8002eb8:	e020      	b.n	8002efc <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002eba:	4b55      	ldr	r3, [pc, #340]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d11d      	bne.n	8002f02 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eca:	e01a      	b.n	8002f02 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ecc:	4b50      	ldr	r3, [pc, #320]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d116      	bne.n	8002f06 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002edc:	e013      	b.n	8002f06 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ede:	4b4c      	ldr	r3, [pc, #304]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10f      	bne.n	8002f0a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002eea:	4b49      	ldr	r3, [pc, #292]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d109      	bne.n	8002f0a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002efa:	e006      	b.n	8002f0a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	73fb      	strb	r3, [r7, #15]
      break;
 8002f00:	e004      	b.n	8002f0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f02:	bf00      	nop
 8002f04:	e002      	b.n	8002f0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f06:	bf00      	nop
 8002f08:	e000      	b.n	8002f0c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002f0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f0c:	7bfb      	ldrb	r3, [r7, #15]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10d      	bne.n	8002f2e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f12:	4b3f      	ldr	r3, [pc, #252]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6819      	ldr	r1, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	011b      	lsls	r3, r3, #4
 8002f26:	430b      	orrs	r3, r1
 8002f28:	4939      	ldr	r1, [pc, #228]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f2e:	7bfb      	ldrb	r3, [r7, #15]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d167      	bne.n	8003004 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002f34:	4b36      	ldr	r3, [pc, #216]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a35      	ldr	r2, [pc, #212]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f40:	f7fe f9da 	bl	80012f8 <HAL_GetTick>
 8002f44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f46:	e009      	b.n	8002f5c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f48:	f7fe f9d6 	bl	80012f8 <HAL_GetTick>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	1ad3      	subs	r3, r2, r3
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d902      	bls.n	8002f5c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	73fb      	strb	r3, [r7, #15]
        break;
 8002f5a:	e005      	b.n	8002f68 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002f5c:	4b2c      	ldr	r3, [pc, #176]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1ef      	bne.n	8002f48 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f68:	7bfb      	ldrb	r3, [r7, #15]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d14a      	bne.n	8003004 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d111      	bne.n	8002f98 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f74:	4b26      	ldr	r3, [pc, #152]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f76:	695b      	ldr	r3, [r3, #20]
 8002f78:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f80:	687a      	ldr	r2, [r7, #4]
 8002f82:	6892      	ldr	r2, [r2, #8]
 8002f84:	0211      	lsls	r1, r2, #8
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68d2      	ldr	r2, [r2, #12]
 8002f8a:	0912      	lsrs	r2, r2, #4
 8002f8c:	0452      	lsls	r2, r2, #17
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	491f      	ldr	r1, [pc, #124]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	614b      	str	r3, [r1, #20]
 8002f96:	e011      	b.n	8002fbc <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002f98:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f9a:	695b      	ldr	r3, [r3, #20]
 8002f9c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fa0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6892      	ldr	r2, [r2, #8]
 8002fa8:	0211      	lsls	r1, r2, #8
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6912      	ldr	r2, [r2, #16]
 8002fae:	0852      	lsrs	r2, r2, #1
 8002fb0:	3a01      	subs	r2, #1
 8002fb2:	0652      	lsls	r2, r2, #25
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	4916      	ldr	r1, [pc, #88]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002fbc:	4b14      	ldr	r3, [pc, #80]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a13      	ldr	r2, [pc, #76]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7fe f996 	bl	80012f8 <HAL_GetTick>
 8002fcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fce:	e009      	b.n	8002fe4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002fd0:	f7fe f992 	bl	80012f8 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d902      	bls.n	8002fe4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	73fb      	strb	r3, [r7, #15]
          break;
 8002fe2:	e005      	b.n	8002ff0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002fe4:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0ef      	beq.n	8002fd0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ff8:	695a      	ldr	r2, [r3, #20]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	695b      	ldr	r3, [r3, #20]
 8002ffe:	4904      	ldr	r1, [pc, #16]	; (8003010 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003000:	4313      	orrs	r3, r2
 8003002:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003004:	7bfb      	ldrb	r3, [r7, #15]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000

08003014 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d06c      	beq.n	8003100 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7fd fe1c 	bl	8000c78 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	22ca      	movs	r2, #202	; 0xca
 800304e:	625a      	str	r2, [r3, #36]	; 0x24
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2253      	movs	r2, #83	; 0x53
 8003056:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f000 f9fc 	bl	8003456 <RTC_EnterInitMode>
 800305e:	4603      	mov	r3, r0
 8003060:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003062:	7bfb      	ldrb	r3, [r7, #15]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d14b      	bne.n	8003100 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689b      	ldr	r3, [r3, #8]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	6812      	ldr	r2, [r2, #0]
 8003072:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003076:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800307a:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6899      	ldr	r1, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685a      	ldr	r2, [r3, #4]
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	691b      	ldr	r3, [r3, #16]
 800308a:	431a      	orrs	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	699b      	ldr	r3, [r3, #24]
 8003090:	431a      	orrs	r2, r3
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	430a      	orrs	r2, r1
 8003098:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	68d2      	ldr	r2, [r2, #12]
 80030a2:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6919      	ldr	r1, [r3, #16]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	041a      	lsls	r2, r3, #16
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	430a      	orrs	r2, r1
 80030b6:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 f9ff 	bl	80034bc <RTC_ExitInitMode>
 80030be:	4603      	mov	r3, r0
 80030c0:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80030c2:	7bfb      	ldrb	r3, [r7, #15]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d11b      	bne.n	8003100 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0203 	bic.w	r2, r2, #3
 80030d6:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69da      	ldr	r2, [r3, #28]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	22ff      	movs	r2, #255	; 0xff
 80030f6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003100:	7bfb      	ldrb	r3, [r7, #15]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3710      	adds	r7, #16
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800310a:	b590      	push	{r4, r7, lr}
 800310c:	b087      	sub	sp, #28
 800310e:	af00      	add	r7, sp, #0
 8003110:	60f8      	str	r0, [r7, #12]
 8003112:	60b9      	str	r1, [r7, #8]
 8003114:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f893 3020 	ldrb.w	r3, [r3, #32]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d101      	bne.n	8003124 <HAL_RTC_SetTime+0x1a>
 8003120:	2302      	movs	r3, #2
 8003122:	e08b      	b.n	800323c <HAL_RTC_SetTime+0x132>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2202      	movs	r2, #2
 8003130:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	22ca      	movs	r2, #202	; 0xca
 800313a:	625a      	str	r2, [r3, #36]	; 0x24
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2253      	movs	r2, #83	; 0x53
 8003142:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f986 	bl	8003456 <RTC_EnterInitMode>
 800314a:	4603      	mov	r3, r0
 800314c:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800314e:	7cfb      	ldrb	r3, [r7, #19]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d163      	bne.n	800321c <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d126      	bne.n	80031a8 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689b      	ldr	r3, [r3, #8]
 8003160:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003164:	2b00      	cmp	r3, #0
 8003166:	d102      	bne.n	800316e <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2200      	movs	r2, #0
 800316c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f000 f9e0 	bl	8003538 <RTC_ByteToBcd2>
 8003178:	4603      	mov	r3, r0
 800317a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	785b      	ldrb	r3, [r3, #1]
 8003180:	4618      	mov	r0, r3
 8003182:	f000 f9d9 	bl	8003538 <RTC_ByteToBcd2>
 8003186:	4603      	mov	r3, r0
 8003188:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800318a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	789b      	ldrb	r3, [r3, #2]
 8003190:	4618      	mov	r0, r3
 8003192:	f000 f9d1 	bl	8003538 <RTC_ByteToBcd2>
 8003196:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003198:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	78db      	ldrb	r3, [r3, #3]
 80031a0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80031a2:	4313      	orrs	r3, r2
 80031a4:	617b      	str	r3, [r7, #20]
 80031a6:	e018      	b.n	80031da <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d102      	bne.n	80031bc <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2200      	movs	r2, #0
 80031ba:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	785b      	ldrb	r3, [r3, #1]
 80031c6:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80031c8:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80031ca:	68ba      	ldr	r2, [r7, #8]
 80031cc:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80031ce:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	78db      	ldrb	r3, [r3, #3]
 80031d4:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80031d6:	4313      	orrs	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	697b      	ldr	r3, [r7, #20]
 80031e0:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80031e4:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80031e8:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	689a      	ldr	r2, [r3, #8]
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031f8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	6899      	ldr	r1, [r3, #8]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	431a      	orrs	r2, r3
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	430a      	orrs	r2, r1
 8003210:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 f952 	bl	80034bc <RTC_ExitInitMode>
 8003218:	4603      	mov	r3, r0
 800321a:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	22ff      	movs	r2, #255	; 0xff
 8003222:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003224:	7cfb      	ldrb	r3, [r7, #19]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800323a:	7cfb      	ldrb	r3, [r7, #19]
}
 800323c:	4618      	mov	r0, r3
 800323e:	371c      	adds	r7, #28
 8003240:	46bd      	mov	sp, r7
 8003242:	bd90      	pop	{r4, r7, pc}

08003244 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b086      	sub	sp, #24
 8003248:	af00      	add	r7, sp, #0
 800324a:	60f8      	str	r0, [r7, #12]
 800324c:	60b9      	str	r1, [r7, #8]
 800324e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	691b      	ldr	r3, [r3, #16]
 8003260:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003272:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003276:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	0c1b      	lsrs	r3, r3, #16
 800327c:	b2db      	uxtb	r3, r3
 800327e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003282:	b2da      	uxtb	r2, r3
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003288:	697b      	ldr	r3, [r7, #20]
 800328a:	0a1b      	lsrs	r3, r3, #8
 800328c:	b2db      	uxtb	r3, r3
 800328e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003292:	b2da      	uxtb	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	b2db      	uxtb	r3, r3
 800329c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	0d9b      	lsrs	r3, r3, #22
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	f003 0301 	and.w	r3, r3, #1
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d11a      	bne.n	80032f2 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	4618      	mov	r0, r3
 80032c2:	f000 f959 	bl	8003578 <RTC_Bcd2ToByte>
 80032c6:	4603      	mov	r3, r0
 80032c8:	461a      	mov	r2, r3
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	785b      	ldrb	r3, [r3, #1]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f000 f950 	bl	8003578 <RTC_Bcd2ToByte>
 80032d8:	4603      	mov	r3, r0
 80032da:	461a      	mov	r2, r3
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	789b      	ldrb	r3, [r3, #2]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 f947 	bl	8003578 <RTC_Bcd2ToByte>
 80032ea:	4603      	mov	r3, r0
 80032ec:	461a      	mov	r2, r3
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80032f2:	2300      	movs	r3, #0
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3718      	adds	r7, #24
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032fc:	b590      	push	{r4, r7, lr}
 80032fe:	b087      	sub	sp, #28
 8003300:	af00      	add	r7, sp, #0
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_RTC_SetDate+0x1a>
 8003312:	2302      	movs	r3, #2
 8003314:	e075      	b.n	8003402 <HAL_RTC_SetDate+0x106>
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2202      	movs	r2, #2
 8003322:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10e      	bne.n	800334a <HAL_RTC_SetDate+0x4e>
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	785b      	ldrb	r3, [r3, #1]
 8003330:	f003 0310 	and.w	r3, r3, #16
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	785b      	ldrb	r3, [r3, #1]
 800333c:	f023 0310 	bic.w	r3, r3, #16
 8003340:	b2db      	uxtb	r3, r3
 8003342:	330a      	adds	r3, #10
 8003344:	b2da      	uxtb	r2, r3
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d11c      	bne.n	800338a <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	78db      	ldrb	r3, [r3, #3]
 8003354:	4618      	mov	r0, r3
 8003356:	f000 f8ef 	bl	8003538 <RTC_ByteToBcd2>
 800335a:	4603      	mov	r3, r0
 800335c:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	785b      	ldrb	r3, [r3, #1]
 8003362:	4618      	mov	r0, r3
 8003364:	f000 f8e8 	bl	8003538 <RTC_ByteToBcd2>
 8003368:	4603      	mov	r3, r0
 800336a:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800336c:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	789b      	ldrb	r3, [r3, #2]
 8003372:	4618      	mov	r0, r3
 8003374:	f000 f8e0 	bl	8003538 <RTC_ByteToBcd2>
 8003378:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800337a:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003384:	4313      	orrs	r3, r2
 8003386:	617b      	str	r3, [r7, #20]
 8003388:	e00e      	b.n	80033a8 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	78db      	ldrb	r3, [r3, #3]
 800338e:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	785b      	ldrb	r3, [r3, #1]
 8003394:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003396:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 800339c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80033a4:	4313      	orrs	r3, r2
 80033a6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	22ca      	movs	r2, #202	; 0xca
 80033ae:	625a      	str	r2, [r3, #36]	; 0x24
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2253      	movs	r2, #83	; 0x53
 80033b6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 f84c 	bl	8003456 <RTC_EnterInitMode>
 80033be:	4603      	mov	r3, r0
 80033c0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80033c2:	7cfb      	ldrb	r3, [r7, #19]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d10c      	bne.n	80033e2 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033d2:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80033d6:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80033d8:	68f8      	ldr	r0, [r7, #12]
 80033da:	f000 f86f 	bl	80034bc <RTC_ExitInitMode>
 80033de:	4603      	mov	r3, r0
 80033e0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	22ff      	movs	r2, #255	; 0xff
 80033e8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80033ea:	7cfb      	ldrb	r3, [r7, #19]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d103      	bne.n	80033f8 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003400:	7cfb      	ldrb	r3, [r7, #19]
}
 8003402:	4618      	mov	r0, r3
 8003404:	371c      	adds	r7, #28
 8003406:	46bd      	mov	sp, r7
 8003408:	bd90      	pop	{r4, r7, pc}

0800340a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b084      	sub	sp, #16
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68da      	ldr	r2, [r3, #12]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003420:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003422:	f7fd ff69 	bl	80012f8 <HAL_GetTick>
 8003426:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003428:	e009      	b.n	800343e <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800342a:	f7fd ff65 	bl	80012f8 <HAL_GetTick>
 800342e:	4602      	mov	r2, r0
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003438:	d901      	bls.n	800343e <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e007      	b.n	800344e <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	f003 0320 	and.w	r3, r3, #32
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0ee      	beq.n	800342a <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 800344c:	2300      	movs	r3, #0
}
 800344e:	4618      	mov	r0, r3
 8003450:	3710      	adds	r7, #16
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}

08003456 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003456:	b580      	push	{r7, lr}
 8003458:	b084      	sub	sp, #16
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800345e:	2300      	movs	r3, #0
 8003460:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346c:	2b00      	cmp	r3, #0
 800346e:	d120      	bne.n	80034b2 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f04f 32ff 	mov.w	r2, #4294967295
 8003478:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800347a:	f7fd ff3d 	bl	80012f8 <HAL_GetTick>
 800347e:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003480:	e00d      	b.n	800349e <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003482:	f7fd ff39 	bl	80012f8 <HAL_GetTick>
 8003486:	4602      	mov	r2, r0
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003490:	d905      	bls.n	800349e <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2203      	movs	r2, #3
 800349a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d102      	bne.n	80034b2 <RTC_EnterInitMode+0x5c>
 80034ac:	7bfb      	ldrb	r3, [r7, #15]
 80034ae:	2b03      	cmp	r3, #3
 80034b0:	d1e7      	bne.n	8003482 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80034b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034c4:	2300      	movs	r3, #0
 80034c6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 80034c8:	4b1a      	ldr	r3, [pc, #104]	; (8003534 <RTC_ExitInitMode+0x78>)
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4a19      	ldr	r2, [pc, #100]	; (8003534 <RTC_ExitInitMode+0x78>)
 80034ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034d2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80034d4:	4b17      	ldr	r3, [pc, #92]	; (8003534 <RTC_ExitInitMode+0x78>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f003 0320 	and.w	r3, r3, #32
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d10c      	bne.n	80034fa <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f7ff ff92 	bl	800340a <HAL_RTC_WaitForSynchro>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d01e      	beq.n	800352a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2203      	movs	r2, #3
 80034f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	73fb      	strb	r3, [r7, #15]
 80034f8:	e017      	b.n	800352a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80034fa:	4b0e      	ldr	r3, [pc, #56]	; (8003534 <RTC_ExitInitMode+0x78>)
 80034fc:	689b      	ldr	r3, [r3, #8]
 80034fe:	4a0d      	ldr	r2, [pc, #52]	; (8003534 <RTC_ExitInitMode+0x78>)
 8003500:	f023 0320 	bic.w	r3, r3, #32
 8003504:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f7ff ff7f 	bl	800340a <HAL_RTC_WaitForSynchro>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d005      	beq.n	800351e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2203      	movs	r2, #3
 8003516:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800351e:	4b05      	ldr	r3, [pc, #20]	; (8003534 <RTC_ExitInitMode+0x78>)
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	4a04      	ldr	r2, [pc, #16]	; (8003534 <RTC_ExitInitMode+0x78>)
 8003524:	f043 0320 	orr.w	r3, r3, #32
 8003528:	6093      	str	r3, [r2, #8]
  }

  return status;
 800352a:	7bfb      	ldrb	r3, [r7, #15]
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	40002800 	.word	0x40002800

08003538 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003542:	2300      	movs	r3, #0
 8003544:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800354a:	e005      	b.n	8003558 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	3301      	adds	r3, #1
 8003550:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8003552:	7afb      	ldrb	r3, [r7, #11]
 8003554:	3b0a      	subs	r3, #10
 8003556:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003558:	7afb      	ldrb	r3, [r7, #11]
 800355a:	2b09      	cmp	r3, #9
 800355c:	d8f6      	bhi.n	800354c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	b2db      	uxtb	r3, r3
 8003562:	011b      	lsls	r3, r3, #4
 8003564:	b2da      	uxtb	r2, r3
 8003566:	7afb      	ldrb	r3, [r7, #11]
 8003568:	4313      	orrs	r3, r2
 800356a:	b2db      	uxtb	r3, r3
}
 800356c:	4618      	mov	r0, r3
 800356e:	3714      	adds	r7, #20
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003578:	b480      	push	{r7}
 800357a:	b085      	sub	sp, #20
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8003582:	79fb      	ldrb	r3, [r7, #7]
 8003584:	091b      	lsrs	r3, r3, #4
 8003586:	b2db      	uxtb	r3, r3
 8003588:	461a      	mov	r2, r3
 800358a:	0092      	lsls	r2, r2, #2
 800358c:	4413      	add	r3, r2
 800358e:	005b      	lsls	r3, r3, #1
 8003590:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 8003592:	79fb      	ldrb	r3, [r7, #7]
 8003594:	f003 030f 	and.w	r3, r3, #15
 8003598:	b2da      	uxtb	r2, r3
 800359a:	7bfb      	ldrb	r3, [r7, #15]
 800359c:	4413      	add	r3, r2
 800359e:	b2db      	uxtb	r3, r3
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b084      	sub	sp, #16
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e095      	b.n	80036ea <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d108      	bne.n	80035d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035ce:	d009      	beq.n	80035e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	61da      	str	r2, [r3, #28]
 80035d6:	e005      	b.n	80035e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d106      	bne.n	8003604 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7fd fbaa 	bl	8000d58 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800361a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003624:	d902      	bls.n	800362c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	e002      	b.n	8003632 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800362c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003630:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	68db      	ldr	r3, [r3, #12]
 8003636:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800363a:	d007      	beq.n	800364c <HAL_SPI_Init+0xa0>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003644:	d002      	beq.n	800364c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800365c:	431a      	orrs	r2, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	691b      	ldr	r3, [r3, #16]
 8003662:	f003 0302 	and.w	r3, r3, #2
 8003666:	431a      	orrs	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	f003 0301 	and.w	r3, r3, #1
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	699b      	ldr	r3, [r3, #24]
 8003676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800367a:	431a      	orrs	r2, r3
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800368e:	ea42 0103 	orr.w	r1, r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003696:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	699b      	ldr	r3, [r3, #24]
 80036a6:	0c1b      	lsrs	r3, r3, #16
 80036a8:	f003 0204 	and.w	r2, r3, #4
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b0:	f003 0310 	and.w	r3, r3, #16
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036ba:	f003 0308 	and.w	r3, r3, #8
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80036c8:	ea42 0103 	orr.w	r1, r2, r3
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80036e8:	2300      	movs	r3, #0
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b088      	sub	sp, #32
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	60b9      	str	r1, [r7, #8]
 80036fc:	603b      	str	r3, [r7, #0]
 80036fe:	4613      	mov	r3, r2
 8003700:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003702:	2300      	movs	r3, #0
 8003704:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800370c:	2b01      	cmp	r3, #1
 800370e:	d101      	bne.n	8003714 <HAL_SPI_Transmit+0x22>
 8003710:	2302      	movs	r3, #2
 8003712:	e158      	b.n	80039c6 <HAL_SPI_Transmit+0x2d4>
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2201      	movs	r2, #1
 8003718:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800371c:	f7fd fdec 	bl	80012f8 <HAL_GetTick>
 8003720:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003722:	88fb      	ldrh	r3, [r7, #6]
 8003724:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b01      	cmp	r3, #1
 8003730:	d002      	beq.n	8003738 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003732:	2302      	movs	r3, #2
 8003734:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003736:	e13d      	b.n	80039b4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d002      	beq.n	8003744 <HAL_SPI_Transmit+0x52>
 800373e:	88fb      	ldrh	r3, [r7, #6]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d102      	bne.n	800374a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003748:	e134      	b.n	80039b4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2203      	movs	r2, #3
 800374e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	68ba      	ldr	r2, [r7, #8]
 800375c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	88fa      	ldrh	r2, [r7, #6]
 8003762:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	88fa      	ldrh	r2, [r7, #6]
 8003768:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2200      	movs	r2, #0
 8003774:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2200      	movs	r2, #0
 800378a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003794:	d10f      	bne.n	80037b6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	681a      	ldr	r2, [r3, #0]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c0:	2b40      	cmp	r3, #64	; 0x40
 80037c2:	d007      	beq.n	80037d4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037dc:	d94b      	bls.n	8003876 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_SPI_Transmit+0xfa>
 80037e6:	8afb      	ldrh	r3, [r7, #22]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d13e      	bne.n	800386a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f0:	881a      	ldrh	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fc:	1c9a      	adds	r2, r3, #2
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003810:	e02b      	b.n	800386a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 0302 	and.w	r3, r3, #2
 800381c:	2b02      	cmp	r3, #2
 800381e:	d112      	bne.n	8003846 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	881a      	ldrh	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	1c9a      	adds	r2, r3, #2
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800383a:	b29b      	uxth	r3, r3
 800383c:	3b01      	subs	r3, #1
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003844:	e011      	b.n	800386a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003846:	f7fd fd57 	bl	80012f8 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d803      	bhi.n	800385e <HAL_SPI_Transmit+0x16c>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385c:	d102      	bne.n	8003864 <HAL_SPI_Transmit+0x172>
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d102      	bne.n	800386a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003868:	e0a4      	b.n	80039b4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800386e:	b29b      	uxth	r3, r3
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1ce      	bne.n	8003812 <HAL_SPI_Transmit+0x120>
 8003874:	e07c      	b.n	8003970 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d002      	beq.n	8003884 <HAL_SPI_Transmit+0x192>
 800387e:	8afb      	ldrh	r3, [r7, #22]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d170      	bne.n	8003966 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b01      	cmp	r3, #1
 800388c:	d912      	bls.n	80038b4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003892:	881a      	ldrh	r2, [r3, #0]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800389e:	1c9a      	adds	r2, r3, #2
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	3b02      	subs	r3, #2
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80038b2:	e058      	b.n	8003966 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	330c      	adds	r3, #12
 80038be:	7812      	ldrb	r2, [r2, #0]
 80038c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	3b01      	subs	r3, #1
 80038d4:	b29a      	uxth	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80038da:	e044      	b.n	8003966 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b02      	cmp	r3, #2
 80038e8:	d12b      	bne.n	8003942 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d912      	bls.n	800391a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f8:	881a      	ldrh	r2, [r3, #0]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	1c9a      	adds	r2, r3, #2
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b02      	subs	r3, #2
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003918:	e025      	b.n	8003966 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	330c      	adds	r3, #12
 8003924:	7812      	ldrb	r2, [r2, #0]
 8003926:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003936:	b29b      	uxth	r3, r3
 8003938:	3b01      	subs	r3, #1
 800393a:	b29a      	uxth	r2, r3
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003940:	e011      	b.n	8003966 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003942:	f7fd fcd9 	bl	80012f8 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	429a      	cmp	r2, r3
 8003950:	d803      	bhi.n	800395a <HAL_SPI_Transmit+0x268>
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003958:	d102      	bne.n	8003960 <HAL_SPI_Transmit+0x26e>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d102      	bne.n	8003966 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003964:	e026      	b.n	80039b4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800396a:	b29b      	uxth	r3, r3
 800396c:	2b00      	cmp	r3, #0
 800396e:	d1b5      	bne.n	80038dc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	6839      	ldr	r1, [r7, #0]
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f000 f949 	bl	8003c0c <SPI_EndRxTxTransaction>
 800397a:	4603      	mov	r3, r0
 800397c:	2b00      	cmp	r3, #0
 800397e:	d002      	beq.n	8003986 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10a      	bne.n	80039a4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800398e:	2300      	movs	r3, #0
 8003990:	613b      	str	r3, [r7, #16]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	613b      	str	r3, [r7, #16]
 80039a2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d002      	beq.n	80039b2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	77fb      	strb	r3, [r7, #31]
 80039b0:	e000      	b.n	80039b4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80039b2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80039c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3720      	adds	r7, #32
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
	...

080039d0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b088      	sub	sp, #32
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	603b      	str	r3, [r7, #0]
 80039dc:	4613      	mov	r3, r2
 80039de:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039e0:	f7fd fc8a 	bl	80012f8 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	4413      	add	r3, r2
 80039ee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039f0:	f7fd fc82 	bl	80012f8 <HAL_GetTick>
 80039f4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039f6:	4b39      	ldr	r3, [pc, #228]	; (8003adc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	015b      	lsls	r3, r3, #5
 80039fc:	0d1b      	lsrs	r3, r3, #20
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	fb02 f303 	mul.w	r3, r2, r3
 8003a04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a06:	e054      	b.n	8003ab2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a0e:	d050      	beq.n	8003ab2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a10:	f7fd fc72 	bl	80012f8 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	69bb      	ldr	r3, [r7, #24]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	69fa      	ldr	r2, [r7, #28]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d902      	bls.n	8003a26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d13d      	bne.n	8003aa2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a3e:	d111      	bne.n	8003a64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a48:	d004      	beq.n	8003a54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a52:	d107      	bne.n	8003a64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6c:	d10f      	bne.n	8003a8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e017      	b.n	8003ad2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d101      	bne.n	8003aac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	3b01      	subs	r3, #1
 8003ab0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	4013      	ands	r3, r2
 8003abc:	68ba      	ldr	r2, [r7, #8]
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	bf0c      	ite	eq
 8003ac2:	2301      	moveq	r3, #1
 8003ac4:	2300      	movne	r3, #0
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	461a      	mov	r2, r3
 8003aca:	79fb      	ldrb	r3, [r7, #7]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d19b      	bne.n	8003a08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3720      	adds	r7, #32
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000004 	.word	0x20000004

08003ae0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b08a      	sub	sp, #40	; 0x28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	60f8      	str	r0, [r7, #12]
 8003ae8:	60b9      	str	r1, [r7, #8]
 8003aea:	607a      	str	r2, [r7, #4]
 8003aec:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003aee:	2300      	movs	r3, #0
 8003af0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003af2:	f7fd fc01 	bl	80012f8 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afa:	1a9b      	subs	r3, r3, r2
 8003afc:	683a      	ldr	r2, [r7, #0]
 8003afe:	4413      	add	r3, r2
 8003b00:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003b02:	f7fd fbf9 	bl	80012f8 <HAL_GetTick>
 8003b06:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	330c      	adds	r3, #12
 8003b0e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b10:	4b3d      	ldr	r3, [pc, #244]	; (8003c08 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	00da      	lsls	r2, r3, #3
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	0d1b      	lsrs	r3, r3, #20
 8003b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b22:	fb02 f303 	mul.w	r3, r2, r3
 8003b26:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003b28:	e060      	b.n	8003bec <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b30:	d107      	bne.n	8003b42 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d104      	bne.n	8003b42 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003b40:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b48:	d050      	beq.n	8003bec <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b4a:	f7fd fbd5 	bl	80012f8 <HAL_GetTick>
 8003b4e:	4602      	mov	r2, r0
 8003b50:	6a3b      	ldr	r3, [r7, #32]
 8003b52:	1ad3      	subs	r3, r2, r3
 8003b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d902      	bls.n	8003b60 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d13d      	bne.n	8003bdc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685a      	ldr	r2, [r3, #4]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b6e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b78:	d111      	bne.n	8003b9e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b82:	d004      	beq.n	8003b8e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b8c:	d107      	bne.n	8003b9e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b9c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba6:	d10f      	bne.n	8003bc8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bc6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e010      	b.n	8003bfe <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003be2:	2300      	movs	r3, #0
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	3b01      	subs	r3, #1
 8003bea:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4013      	ands	r3, r2
 8003bf6:	687a      	ldr	r2, [r7, #4]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d196      	bne.n	8003b2a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003bfc:	2300      	movs	r3, #0
}
 8003bfe:	4618      	mov	r0, r3
 8003c00:	3728      	adds	r7, #40	; 0x28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	20000004 	.word	0x20000004

08003c0c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af02      	add	r7, sp, #8
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	9300      	str	r3, [sp, #0]
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f7ff ff5b 	bl	8003ae0 <SPI_WaitFifoStateUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d007      	beq.n	8003c40 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c34:	f043 0220 	orr.w	r2, r3, #32
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e027      	b.n	8003c90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2200      	movs	r2, #0
 8003c48:	2180      	movs	r1, #128	; 0x80
 8003c4a:	68f8      	ldr	r0, [r7, #12]
 8003c4c:	f7ff fec0 	bl	80039d0 <SPI_WaitFlagStateUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d007      	beq.n	8003c66 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c5a:	f043 0220 	orr.w	r2, r3, #32
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c62:	2303      	movs	r3, #3
 8003c64:	e014      	b.n	8003c90 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003c72:	68f8      	ldr	r0, [r7, #12]
 8003c74:	f7ff ff34 	bl	8003ae0 <SPI_WaitFifoStateUntilTimeout>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d007      	beq.n	8003c8e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c82:	f043 0220 	orr.w	r2, r3, #32
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c8a:	2303      	movs	r3, #3
 8003c8c:	e000      	b.n	8003c90 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d101      	bne.n	8003caa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e040      	b.n	8003d2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d106      	bne.n	8003cc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fd f9f8 	bl	80010b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2224      	movs	r2, #36	; 0x24
 8003cc4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f022 0201 	bic.w	r2, r2, #1
 8003cd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 fc8a 	bl	80045f0 <UART_SetConfig>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e022      	b.n	8003d2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d002      	beq.n	8003cf4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 ff08 	bl	8004b04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685a      	ldr	r2, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689a      	ldr	r2, [r3, #8]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f042 0201 	orr.w	r2, r2, #1
 8003d22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 ff8f 	bl	8004c48 <UART_CheckIdleState>
 8003d2a:	4603      	mov	r3, r0
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b08a      	sub	sp, #40	; 0x28
 8003d38:	af02      	add	r7, sp, #8
 8003d3a:	60f8      	str	r0, [r7, #12]
 8003d3c:	60b9      	str	r1, [r7, #8]
 8003d3e:	603b      	str	r3, [r7, #0]
 8003d40:	4613      	mov	r3, r2
 8003d42:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d48:	2b20      	cmp	r3, #32
 8003d4a:	f040 8082 	bne.w	8003e52 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d002      	beq.n	8003d5a <HAL_UART_Transmit+0x26>
 8003d54:	88fb      	ldrh	r3, [r7, #6]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e07a      	b.n	8003e54 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d101      	bne.n	8003d6c <HAL_UART_Transmit+0x38>
 8003d68:	2302      	movs	r3, #2
 8003d6a:	e073      	b.n	8003e54 <HAL_UART_Transmit+0x120>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2221      	movs	r2, #33	; 0x21
 8003d80:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d82:	f7fd fab9 	bl	80012f8 <HAL_GetTick>
 8003d86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	88fa      	ldrh	r2, [r7, #6]
 8003d8c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	88fa      	ldrh	r2, [r7, #6]
 8003d94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da0:	d108      	bne.n	8003db4 <HAL_UART_Transmit+0x80>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d104      	bne.n	8003db4 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003daa:	2300      	movs	r3, #0
 8003dac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	61bb      	str	r3, [r7, #24]
 8003db2:	e003      	b.n	8003dbc <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003dc4:	e02d      	b.n	8003e22 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	2180      	movs	r1, #128	; 0x80
 8003dd0:	68f8      	ldr	r0, [r7, #12]
 8003dd2:	f000 ff82 	bl	8004cda <UART_WaitOnFlagUntilTimeout>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d001      	beq.n	8003de0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e039      	b.n	8003e54 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d10b      	bne.n	8003dfe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003de6:	69bb      	ldr	r3, [r7, #24]
 8003de8:	881a      	ldrh	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003df2:	b292      	uxth	r2, r2
 8003df4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	3302      	adds	r3, #2
 8003dfa:	61bb      	str	r3, [r7, #24]
 8003dfc:	e008      	b.n	8003e10 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	781a      	ldrb	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	b292      	uxth	r2, r2
 8003e08:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e0a:	69fb      	ldr	r3, [r7, #28]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1cb      	bne.n	8003dc6 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	2200      	movs	r2, #0
 8003e36:	2140      	movs	r1, #64	; 0x40
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 ff4e 	bl	8004cda <UART_WaitOnFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e005      	b.n	8003e54 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	e000      	b.n	8003e54 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003e52:	2302      	movs	r3, #2
  }
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3720      	adds	r7, #32
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}

08003e5c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b08a      	sub	sp, #40	; 0x28
 8003e60:	af02      	add	r7, sp, #8
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	60b9      	str	r1, [r7, #8]
 8003e66:	603b      	str	r3, [r7, #0]
 8003e68:	4613      	mov	r3, r2
 8003e6a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e70:	2b20      	cmp	r3, #32
 8003e72:	f040 80bf 	bne.w	8003ff4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d002      	beq.n	8003e82 <HAL_UART_Receive+0x26>
 8003e7c:	88fb      	ldrh	r3, [r7, #6]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d101      	bne.n	8003e86 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e0b7      	b.n	8003ff6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d101      	bne.n	8003e94 <HAL_UART_Receive+0x38>
 8003e90:	2302      	movs	r3, #2
 8003e92:	e0b0      	b.n	8003ff6 <HAL_UART_Receive+0x19a>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	2222      	movs	r2, #34	; 0x22
 8003ea8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eb0:	f7fd fa22 	bl	80012f8 <HAL_GetTick>
 8003eb4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	88fa      	ldrh	r2, [r7, #6]
 8003eba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	88fa      	ldrh	r2, [r7, #6]
 8003ec2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ece:	d10e      	bne.n	8003eee <HAL_UART_Receive+0x92>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d105      	bne.n	8003ee4 <HAL_UART_Receive+0x88>
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003ede:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003ee2:	e02d      	b.n	8003f40 <HAL_UART_Receive+0xe4>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	22ff      	movs	r2, #255	; 0xff
 8003ee8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003eec:	e028      	b.n	8003f40 <HAL_UART_Receive+0xe4>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d10d      	bne.n	8003f12 <HAL_UART_Receive+0xb6>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d104      	bne.n	8003f08 <HAL_UART_Receive+0xac>
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	22ff      	movs	r2, #255	; 0xff
 8003f02:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f06:	e01b      	b.n	8003f40 <HAL_UART_Receive+0xe4>
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	227f      	movs	r2, #127	; 0x7f
 8003f0c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f10:	e016      	b.n	8003f40 <HAL_UART_Receive+0xe4>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f1a:	d10d      	bne.n	8003f38 <HAL_UART_Receive+0xdc>
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	691b      	ldr	r3, [r3, #16]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d104      	bne.n	8003f2e <HAL_UART_Receive+0xd2>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	227f      	movs	r2, #127	; 0x7f
 8003f28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f2c:	e008      	b.n	8003f40 <HAL_UART_Receive+0xe4>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	223f      	movs	r2, #63	; 0x3f
 8003f32:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f36:	e003      	b.n	8003f40 <HAL_UART_Receive+0xe4>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f46:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f50:	d108      	bne.n	8003f64 <HAL_UART_Receive+0x108>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d104      	bne.n	8003f64 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	e003      	b.n	8003f6c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003f74:	e033      	b.n	8003fde <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	2120      	movs	r1, #32
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f000 feaa 	bl	8004cda <UART_WaitOnFlagUntilTimeout>
 8003f86:	4603      	mov	r3, r0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d001      	beq.n	8003f90 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e032      	b.n	8003ff6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10c      	bne.n	8003fb0 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	8a7b      	ldrh	r3, [r7, #18]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	3302      	adds	r3, #2
 8003fac:	61bb      	str	r3, [r7, #24]
 8003fae:	e00d      	b.n	8003fcc <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	8a7b      	ldrh	r3, [r7, #18]
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	b2da      	uxtb	r2, r3
 8003fc2:	69fb      	ldr	r3, [r7, #28]
 8003fc4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1c5      	bne.n	8003f76 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2220      	movs	r2, #32
 8003fee:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e000      	b.n	8003ff6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003ff4:	2302      	movs	r3, #2
  }
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3720      	adds	r7, #32
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b0ba      	sub	sp, #232	; 0xe8
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004026:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800402a:	f640 030f 	movw	r3, #2063	; 0x80f
 800402e:	4013      	ands	r3, r2
 8004030:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004034:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004038:	2b00      	cmp	r3, #0
 800403a:	d115      	bne.n	8004068 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800403c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004040:	f003 0320 	and.w	r3, r3, #32
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00f      	beq.n	8004068 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b00      	cmp	r3, #0
 8004052:	d009      	beq.n	8004068 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004058:	2b00      	cmp	r3, #0
 800405a:	f000 82a6 	beq.w	80045aa <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	4798      	blx	r3
      }
      return;
 8004066:	e2a0      	b.n	80045aa <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8004068:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 8117 	beq.w	80042a0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004076:	f003 0301 	and.w	r3, r3, #1
 800407a:	2b00      	cmp	r3, #0
 800407c:	d106      	bne.n	800408c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800407e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004082:	4b85      	ldr	r3, [pc, #532]	; (8004298 <HAL_UART_IRQHandler+0x298>)
 8004084:	4013      	ands	r3, r2
 8004086:	2b00      	cmp	r3, #0
 8004088:	f000 810a 	beq.w	80042a0 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800408c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004090:	f003 0301 	and.w	r3, r3, #1
 8004094:	2b00      	cmp	r3, #0
 8004096:	d011      	beq.n	80040bc <HAL_UART_IRQHandler+0xbc>
 8004098:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800409c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d00b      	beq.n	80040bc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	2201      	movs	r2, #1
 80040aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040b2:	f043 0201 	orr.w	r2, r3, #1
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d011      	beq.n	80040ec <HAL_UART_IRQHandler+0xec>
 80040c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040cc:	f003 0301 	and.w	r3, r3, #1
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d00b      	beq.n	80040ec <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	2202      	movs	r2, #2
 80040da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040e2:	f043 0204 	orr.w	r2, r3, #4
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d011      	beq.n	800411c <HAL_UART_IRQHandler+0x11c>
 80040f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040fc:	f003 0301 	and.w	r3, r3, #1
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00b      	beq.n	800411c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2204      	movs	r2, #4
 800410a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004112:	f043 0202 	orr.w	r2, r3, #2
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800411c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b00      	cmp	r3, #0
 8004126:	d017      	beq.n	8004158 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d105      	bne.n	8004140 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004134:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004138:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00b      	beq.n	8004158 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	2208      	movs	r2, #8
 8004146:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800414e:	f043 0208 	orr.w	r2, r3, #8
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004158:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800415c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004160:	2b00      	cmp	r3, #0
 8004162:	d012      	beq.n	800418a <HAL_UART_IRQHandler+0x18a>
 8004164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004168:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d00c      	beq.n	800418a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004178:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004180:	f043 0220 	orr.w	r2, r3, #32
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 820c 	beq.w	80045ae <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004196:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800419a:	f003 0320 	and.w	r3, r3, #32
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00d      	beq.n	80041be <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d007      	beq.n	80041be <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d003      	beq.n	80041be <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041ba:	6878      	ldr	r0, [r7, #4]
 80041bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80041c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d2:	2b40      	cmp	r3, #64	; 0x40
 80041d4:	d005      	beq.n	80041e2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d04f      	beq.n	8004282 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 fe3d 	bl	8004e62 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	689b      	ldr	r3, [r3, #8]
 80041ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f2:	2b40      	cmp	r3, #64	; 0x40
 80041f4:	d141      	bne.n	800427a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3308      	adds	r3, #8
 80041fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004200:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004204:	e853 3f00 	ldrex	r3, [r3]
 8004208:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800420c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004210:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004214:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	3308      	adds	r3, #8
 800421e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004222:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004226:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800422e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800423a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1d9      	bne.n	80041f6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004246:	2b00      	cmp	r3, #0
 8004248:	d013      	beq.n	8004272 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	4a13      	ldr	r2, [pc, #76]	; (800429c <HAL_UART_IRQHandler+0x29c>)
 8004250:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	4618      	mov	r0, r3
 8004258:	f7fd f9cd 	bl	80015f6 <HAL_DMA_Abort_IT>
 800425c:	4603      	mov	r3, r0
 800425e:	2b00      	cmp	r3, #0
 8004260:	d017      	beq.n	8004292 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800426c:	4610      	mov	r0, r2
 800426e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004270:	e00f      	b.n	8004292 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f000 f9a6 	bl	80045c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004278:	e00b      	b.n	8004292 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 f9a2 	bl	80045c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004280:	e007      	b.n	8004292 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f99e 	bl	80045c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2200      	movs	r2, #0
 800428c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004290:	e18d      	b.n	80045ae <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004292:	bf00      	nop
    return;
 8004294:	e18b      	b.n	80045ae <HAL_UART_IRQHandler+0x5ae>
 8004296:	bf00      	nop
 8004298:	04000120 	.word	0x04000120
 800429c:	08004f29 	.word	0x08004f29

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	f040 8146 	bne.w	8004536 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80042aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 813f 	beq.w	8004536 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80042b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042bc:	f003 0310 	and.w	r3, r3, #16
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f000 8138 	beq.w	8004536 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2210      	movs	r2, #16
 80042cc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d8:	2b40      	cmp	r3, #64	; 0x40
 80042da:	f040 80b4 	bne.w	8004446 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042ea:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 815f 	beq.w	80045b2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80042fa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80042fe:	429a      	cmp	r2, r3
 8004300:	f080 8157 	bcs.w	80045b2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800430a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0320 	and.w	r3, r3, #32
 800431a:	2b00      	cmp	r3, #0
 800431c:	f040 8085 	bne.w	800442a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004328:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800432c:	e853 3f00 	ldrex	r3, [r3]
 8004330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004334:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800433c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	461a      	mov	r2, r3
 8004346:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800434a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800434e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004352:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004356:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800435a:	e841 2300 	strex	r3, r2, [r1]
 800435e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004366:	2b00      	cmp	r3, #0
 8004368:	d1da      	bne.n	8004320 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3308      	adds	r3, #8
 8004370:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004374:	e853 3f00 	ldrex	r3, [r3]
 8004378:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800437a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800437c:	f023 0301 	bic.w	r3, r3, #1
 8004380:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	3308      	adds	r3, #8
 800438a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800438e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004392:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004394:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004396:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800439a:	e841 2300 	strex	r3, r2, [r1]
 800439e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1e1      	bne.n	800436a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	3308      	adds	r3, #8
 80043ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043b0:	e853 3f00 	ldrex	r3, [r3]
 80043b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	3308      	adds	r3, #8
 80043c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80043ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043d2:	e841 2300 	strex	r3, r2, [r1]
 80043d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80043d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1e3      	bne.n	80043a6 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2220      	movs	r2, #32
 80043e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043f2:	e853 3f00 	ldrex	r3, [r3]
 80043f6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043fa:	f023 0310 	bic.w	r3, r3, #16
 80043fe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	461a      	mov	r2, r3
 8004408:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800440c:	65bb      	str	r3, [r7, #88]	; 0x58
 800440e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004410:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004412:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004414:	e841 2300 	strex	r3, r2, [r1]
 8004418:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800441a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800441c:	2b00      	cmp	r3, #0
 800441e:	d1e4      	bne.n	80043ea <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004424:	4618      	mov	r0, r3
 8004426:	f7fd f8a8 	bl	800157a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004436:	b29b      	uxth	r3, r3
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	b29b      	uxth	r3, r3
 800443c:	4619      	mov	r1, r3
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f000 f8ca 	bl	80045d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004444:	e0b5      	b.n	80045b2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004452:	b29b      	uxth	r3, r3
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	f000 80a7 	beq.w	80045b6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004468:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 80a2 	beq.w	80045b6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800447a:	e853 3f00 	ldrex	r3, [r3]
 800447e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004480:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004482:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004486:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004494:	647b      	str	r3, [r7, #68]	; 0x44
 8004496:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004498:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800449a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800449c:	e841 2300 	strex	r3, r2, [r1]
 80044a0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d1e4      	bne.n	8004472 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3308      	adds	r3, #8
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	623b      	str	r3, [r7, #32]
   return(result);
 80044b8:	6a3b      	ldr	r3, [r7, #32]
 80044ba:	f023 0301 	bic.w	r3, r3, #1
 80044be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3308      	adds	r3, #8
 80044c8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80044cc:	633a      	str	r2, [r7, #48]	; 0x30
 80044ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044d4:	e841 2300 	strex	r3, r2, [r1]
 80044d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d1e3      	bne.n	80044a8 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2220      	movs	r2, #32
 80044e4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	e853 3f00 	ldrex	r3, [r3]
 80044fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f023 0310 	bic.w	r3, r3, #16
 8004506:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	461a      	mov	r2, r3
 8004510:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004514:	61fb      	str	r3, [r7, #28]
 8004516:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004518:	69b9      	ldr	r1, [r7, #24]
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	e841 2300 	strex	r3, r2, [r1]
 8004520:	617b      	str	r3, [r7, #20]
   return(result);
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d1e4      	bne.n	80044f2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004528:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800452c:	4619      	mov	r1, r3
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f852 	bl	80045d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004534:	e03f      	b.n	80045b6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800453a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00e      	beq.n	8004560 <HAL_UART_IRQHandler+0x560>
 8004542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004546:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800454a:	2b00      	cmp	r3, #0
 800454c:	d008      	beq.n	8004560 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004556:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 fd25 	bl	8004fa8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800455e:	e02d      	b.n	80045bc <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004564:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004568:	2b00      	cmp	r3, #0
 800456a:	d00e      	beq.n	800458a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800456c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004574:	2b00      	cmp	r3, #0
 8004576:	d008      	beq.n	800458a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01c      	beq.n	80045ba <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	4798      	blx	r3
    }
    return;
 8004588:	e017      	b.n	80045ba <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800458a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800458e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004592:	2b00      	cmp	r3, #0
 8004594:	d012      	beq.n	80045bc <HAL_UART_IRQHandler+0x5bc>
 8004596:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800459a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00c      	beq.n	80045bc <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 fcd6 	bl	8004f54 <UART_EndTransmit_IT>
    return;
 80045a8:	e008      	b.n	80045bc <HAL_UART_IRQHandler+0x5bc>
      return;
 80045aa:	bf00      	nop
 80045ac:	e006      	b.n	80045bc <HAL_UART_IRQHandler+0x5bc>
    return;
 80045ae:	bf00      	nop
 80045b0:	e004      	b.n	80045bc <HAL_UART_IRQHandler+0x5bc>
      return;
 80045b2:	bf00      	nop
 80045b4:	e002      	b.n	80045bc <HAL_UART_IRQHandler+0x5bc>
      return;
 80045b6:	bf00      	nop
 80045b8:	e000      	b.n	80045bc <HAL_UART_IRQHandler+0x5bc>
    return;
 80045ba:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80045bc:	37e8      	adds	r7, #232	; 0xe8
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop

080045c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	460b      	mov	r3, r1
 80045e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f0:	b5b0      	push	{r4, r5, r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	4313      	orrs	r3, r2
 8004612:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4bad      	ldr	r3, [pc, #692]	; (80048d0 <UART_SetConfig+0x2e0>)
 800461c:	4013      	ands	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6812      	ldr	r2, [r2, #0]
 8004622:	69f9      	ldr	r1, [r7, #28]
 8004624:	430b      	orrs	r3, r1
 8004626:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4aa2      	ldr	r2, [pc, #648]	; (80048d4 <UART_SetConfig+0x2e4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d004      	beq.n	8004658 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6a1b      	ldr	r3, [r3, #32]
 8004652:	69fa      	ldr	r2, [r7, #28]
 8004654:	4313      	orrs	r3, r2
 8004656:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69fa      	ldr	r2, [r7, #28]
 8004668:	430a      	orrs	r2, r1
 800466a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a99      	ldr	r2, [pc, #612]	; (80048d8 <UART_SetConfig+0x2e8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d121      	bne.n	80046ba <UART_SetConfig+0xca>
 8004676:	4b99      	ldr	r3, [pc, #612]	; (80048dc <UART_SetConfig+0x2ec>)
 8004678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800467c:	f003 0303 	and.w	r3, r3, #3
 8004680:	2b03      	cmp	r3, #3
 8004682:	d817      	bhi.n	80046b4 <UART_SetConfig+0xc4>
 8004684:	a201      	add	r2, pc, #4	; (adr r2, 800468c <UART_SetConfig+0x9c>)
 8004686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468a:	bf00      	nop
 800468c:	0800469d 	.word	0x0800469d
 8004690:	080046a9 	.word	0x080046a9
 8004694:	080046a3 	.word	0x080046a3
 8004698:	080046af 	.word	0x080046af
 800469c:	2301      	movs	r3, #1
 800469e:	76fb      	strb	r3, [r7, #27]
 80046a0:	e0e7      	b.n	8004872 <UART_SetConfig+0x282>
 80046a2:	2302      	movs	r3, #2
 80046a4:	76fb      	strb	r3, [r7, #27]
 80046a6:	e0e4      	b.n	8004872 <UART_SetConfig+0x282>
 80046a8:	2304      	movs	r3, #4
 80046aa:	76fb      	strb	r3, [r7, #27]
 80046ac:	e0e1      	b.n	8004872 <UART_SetConfig+0x282>
 80046ae:	2308      	movs	r3, #8
 80046b0:	76fb      	strb	r3, [r7, #27]
 80046b2:	e0de      	b.n	8004872 <UART_SetConfig+0x282>
 80046b4:	2310      	movs	r3, #16
 80046b6:	76fb      	strb	r3, [r7, #27]
 80046b8:	e0db      	b.n	8004872 <UART_SetConfig+0x282>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a88      	ldr	r2, [pc, #544]	; (80048e0 <UART_SetConfig+0x2f0>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d132      	bne.n	800472a <UART_SetConfig+0x13a>
 80046c4:	4b85      	ldr	r3, [pc, #532]	; (80048dc <UART_SetConfig+0x2ec>)
 80046c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	2b0c      	cmp	r3, #12
 80046d0:	d828      	bhi.n	8004724 <UART_SetConfig+0x134>
 80046d2:	a201      	add	r2, pc, #4	; (adr r2, 80046d8 <UART_SetConfig+0xe8>)
 80046d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d8:	0800470d 	.word	0x0800470d
 80046dc:	08004725 	.word	0x08004725
 80046e0:	08004725 	.word	0x08004725
 80046e4:	08004725 	.word	0x08004725
 80046e8:	08004719 	.word	0x08004719
 80046ec:	08004725 	.word	0x08004725
 80046f0:	08004725 	.word	0x08004725
 80046f4:	08004725 	.word	0x08004725
 80046f8:	08004713 	.word	0x08004713
 80046fc:	08004725 	.word	0x08004725
 8004700:	08004725 	.word	0x08004725
 8004704:	08004725 	.word	0x08004725
 8004708:	0800471f 	.word	0x0800471f
 800470c:	2300      	movs	r3, #0
 800470e:	76fb      	strb	r3, [r7, #27]
 8004710:	e0af      	b.n	8004872 <UART_SetConfig+0x282>
 8004712:	2302      	movs	r3, #2
 8004714:	76fb      	strb	r3, [r7, #27]
 8004716:	e0ac      	b.n	8004872 <UART_SetConfig+0x282>
 8004718:	2304      	movs	r3, #4
 800471a:	76fb      	strb	r3, [r7, #27]
 800471c:	e0a9      	b.n	8004872 <UART_SetConfig+0x282>
 800471e:	2308      	movs	r3, #8
 8004720:	76fb      	strb	r3, [r7, #27]
 8004722:	e0a6      	b.n	8004872 <UART_SetConfig+0x282>
 8004724:	2310      	movs	r3, #16
 8004726:	76fb      	strb	r3, [r7, #27]
 8004728:	e0a3      	b.n	8004872 <UART_SetConfig+0x282>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a6d      	ldr	r2, [pc, #436]	; (80048e4 <UART_SetConfig+0x2f4>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d120      	bne.n	8004776 <UART_SetConfig+0x186>
 8004734:	4b69      	ldr	r3, [pc, #420]	; (80048dc <UART_SetConfig+0x2ec>)
 8004736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800473e:	2b30      	cmp	r3, #48	; 0x30
 8004740:	d013      	beq.n	800476a <UART_SetConfig+0x17a>
 8004742:	2b30      	cmp	r3, #48	; 0x30
 8004744:	d814      	bhi.n	8004770 <UART_SetConfig+0x180>
 8004746:	2b20      	cmp	r3, #32
 8004748:	d009      	beq.n	800475e <UART_SetConfig+0x16e>
 800474a:	2b20      	cmp	r3, #32
 800474c:	d810      	bhi.n	8004770 <UART_SetConfig+0x180>
 800474e:	2b00      	cmp	r3, #0
 8004750:	d002      	beq.n	8004758 <UART_SetConfig+0x168>
 8004752:	2b10      	cmp	r3, #16
 8004754:	d006      	beq.n	8004764 <UART_SetConfig+0x174>
 8004756:	e00b      	b.n	8004770 <UART_SetConfig+0x180>
 8004758:	2300      	movs	r3, #0
 800475a:	76fb      	strb	r3, [r7, #27]
 800475c:	e089      	b.n	8004872 <UART_SetConfig+0x282>
 800475e:	2302      	movs	r3, #2
 8004760:	76fb      	strb	r3, [r7, #27]
 8004762:	e086      	b.n	8004872 <UART_SetConfig+0x282>
 8004764:	2304      	movs	r3, #4
 8004766:	76fb      	strb	r3, [r7, #27]
 8004768:	e083      	b.n	8004872 <UART_SetConfig+0x282>
 800476a:	2308      	movs	r3, #8
 800476c:	76fb      	strb	r3, [r7, #27]
 800476e:	e080      	b.n	8004872 <UART_SetConfig+0x282>
 8004770:	2310      	movs	r3, #16
 8004772:	76fb      	strb	r3, [r7, #27]
 8004774:	e07d      	b.n	8004872 <UART_SetConfig+0x282>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a5b      	ldr	r2, [pc, #364]	; (80048e8 <UART_SetConfig+0x2f8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d120      	bne.n	80047c2 <UART_SetConfig+0x1d2>
 8004780:	4b56      	ldr	r3, [pc, #344]	; (80048dc <UART_SetConfig+0x2ec>)
 8004782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004786:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800478a:	2bc0      	cmp	r3, #192	; 0xc0
 800478c:	d013      	beq.n	80047b6 <UART_SetConfig+0x1c6>
 800478e:	2bc0      	cmp	r3, #192	; 0xc0
 8004790:	d814      	bhi.n	80047bc <UART_SetConfig+0x1cc>
 8004792:	2b80      	cmp	r3, #128	; 0x80
 8004794:	d009      	beq.n	80047aa <UART_SetConfig+0x1ba>
 8004796:	2b80      	cmp	r3, #128	; 0x80
 8004798:	d810      	bhi.n	80047bc <UART_SetConfig+0x1cc>
 800479a:	2b00      	cmp	r3, #0
 800479c:	d002      	beq.n	80047a4 <UART_SetConfig+0x1b4>
 800479e:	2b40      	cmp	r3, #64	; 0x40
 80047a0:	d006      	beq.n	80047b0 <UART_SetConfig+0x1c0>
 80047a2:	e00b      	b.n	80047bc <UART_SetConfig+0x1cc>
 80047a4:	2300      	movs	r3, #0
 80047a6:	76fb      	strb	r3, [r7, #27]
 80047a8:	e063      	b.n	8004872 <UART_SetConfig+0x282>
 80047aa:	2302      	movs	r3, #2
 80047ac:	76fb      	strb	r3, [r7, #27]
 80047ae:	e060      	b.n	8004872 <UART_SetConfig+0x282>
 80047b0:	2304      	movs	r3, #4
 80047b2:	76fb      	strb	r3, [r7, #27]
 80047b4:	e05d      	b.n	8004872 <UART_SetConfig+0x282>
 80047b6:	2308      	movs	r3, #8
 80047b8:	76fb      	strb	r3, [r7, #27]
 80047ba:	e05a      	b.n	8004872 <UART_SetConfig+0x282>
 80047bc:	2310      	movs	r3, #16
 80047be:	76fb      	strb	r3, [r7, #27]
 80047c0:	e057      	b.n	8004872 <UART_SetConfig+0x282>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a49      	ldr	r2, [pc, #292]	; (80048ec <UART_SetConfig+0x2fc>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d125      	bne.n	8004818 <UART_SetConfig+0x228>
 80047cc:	4b43      	ldr	r3, [pc, #268]	; (80048dc <UART_SetConfig+0x2ec>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047da:	d017      	beq.n	800480c <UART_SetConfig+0x21c>
 80047dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047e0:	d817      	bhi.n	8004812 <UART_SetConfig+0x222>
 80047e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e6:	d00b      	beq.n	8004800 <UART_SetConfig+0x210>
 80047e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047ec:	d811      	bhi.n	8004812 <UART_SetConfig+0x222>
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <UART_SetConfig+0x20a>
 80047f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047f6:	d006      	beq.n	8004806 <UART_SetConfig+0x216>
 80047f8:	e00b      	b.n	8004812 <UART_SetConfig+0x222>
 80047fa:	2300      	movs	r3, #0
 80047fc:	76fb      	strb	r3, [r7, #27]
 80047fe:	e038      	b.n	8004872 <UART_SetConfig+0x282>
 8004800:	2302      	movs	r3, #2
 8004802:	76fb      	strb	r3, [r7, #27]
 8004804:	e035      	b.n	8004872 <UART_SetConfig+0x282>
 8004806:	2304      	movs	r3, #4
 8004808:	76fb      	strb	r3, [r7, #27]
 800480a:	e032      	b.n	8004872 <UART_SetConfig+0x282>
 800480c:	2308      	movs	r3, #8
 800480e:	76fb      	strb	r3, [r7, #27]
 8004810:	e02f      	b.n	8004872 <UART_SetConfig+0x282>
 8004812:	2310      	movs	r3, #16
 8004814:	76fb      	strb	r3, [r7, #27]
 8004816:	e02c      	b.n	8004872 <UART_SetConfig+0x282>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a2d      	ldr	r2, [pc, #180]	; (80048d4 <UART_SetConfig+0x2e4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d125      	bne.n	800486e <UART_SetConfig+0x27e>
 8004822:	4b2e      	ldr	r3, [pc, #184]	; (80048dc <UART_SetConfig+0x2ec>)
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004828:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800482c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004830:	d017      	beq.n	8004862 <UART_SetConfig+0x272>
 8004832:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004836:	d817      	bhi.n	8004868 <UART_SetConfig+0x278>
 8004838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800483c:	d00b      	beq.n	8004856 <UART_SetConfig+0x266>
 800483e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004842:	d811      	bhi.n	8004868 <UART_SetConfig+0x278>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <UART_SetConfig+0x260>
 8004848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484c:	d006      	beq.n	800485c <UART_SetConfig+0x26c>
 800484e:	e00b      	b.n	8004868 <UART_SetConfig+0x278>
 8004850:	2300      	movs	r3, #0
 8004852:	76fb      	strb	r3, [r7, #27]
 8004854:	e00d      	b.n	8004872 <UART_SetConfig+0x282>
 8004856:	2302      	movs	r3, #2
 8004858:	76fb      	strb	r3, [r7, #27]
 800485a:	e00a      	b.n	8004872 <UART_SetConfig+0x282>
 800485c:	2304      	movs	r3, #4
 800485e:	76fb      	strb	r3, [r7, #27]
 8004860:	e007      	b.n	8004872 <UART_SetConfig+0x282>
 8004862:	2308      	movs	r3, #8
 8004864:	76fb      	strb	r3, [r7, #27]
 8004866:	e004      	b.n	8004872 <UART_SetConfig+0x282>
 8004868:	2310      	movs	r3, #16
 800486a:	76fb      	strb	r3, [r7, #27]
 800486c:	e001      	b.n	8004872 <UART_SetConfig+0x282>
 800486e:	2310      	movs	r3, #16
 8004870:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a17      	ldr	r2, [pc, #92]	; (80048d4 <UART_SetConfig+0x2e4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	f040 8087 	bne.w	800498c <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800487e:	7efb      	ldrb	r3, [r7, #27]
 8004880:	2b08      	cmp	r3, #8
 8004882:	d837      	bhi.n	80048f4 <UART_SetConfig+0x304>
 8004884:	a201      	add	r2, pc, #4	; (adr r2, 800488c <UART_SetConfig+0x29c>)
 8004886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800488a:	bf00      	nop
 800488c:	080048b1 	.word	0x080048b1
 8004890:	080048f5 	.word	0x080048f5
 8004894:	080048b9 	.word	0x080048b9
 8004898:	080048f5 	.word	0x080048f5
 800489c:	080048bf 	.word	0x080048bf
 80048a0:	080048f5 	.word	0x080048f5
 80048a4:	080048f5 	.word	0x080048f5
 80048a8:	080048f5 	.word	0x080048f5
 80048ac:	080048c7 	.word	0x080048c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048b0:	f7fd fe68 	bl	8002584 <HAL_RCC_GetPCLK1Freq>
 80048b4:	6178      	str	r0, [r7, #20]
        break;
 80048b6:	e022      	b.n	80048fe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048b8:	4b0d      	ldr	r3, [pc, #52]	; (80048f0 <UART_SetConfig+0x300>)
 80048ba:	617b      	str	r3, [r7, #20]
        break;
 80048bc:	e01f      	b.n	80048fe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048be:	f7fd fdc9 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 80048c2:	6178      	str	r0, [r7, #20]
        break;
 80048c4:	e01b      	b.n	80048fe <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048ca:	617b      	str	r3, [r7, #20]
        break;
 80048cc:	e017      	b.n	80048fe <UART_SetConfig+0x30e>
 80048ce:	bf00      	nop
 80048d0:	efff69f3 	.word	0xefff69f3
 80048d4:	40008000 	.word	0x40008000
 80048d8:	40013800 	.word	0x40013800
 80048dc:	40021000 	.word	0x40021000
 80048e0:	40004400 	.word	0x40004400
 80048e4:	40004800 	.word	0x40004800
 80048e8:	40004c00 	.word	0x40004c00
 80048ec:	40005000 	.word	0x40005000
 80048f0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	76bb      	strb	r3, [r7, #26]
        break;
 80048fc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	2b00      	cmp	r3, #0
 8004902:	f000 80f1 	beq.w	8004ae8 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685a      	ldr	r2, [r3, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	4413      	add	r3, r2
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	429a      	cmp	r2, r3
 8004914:	d305      	bcc.n	8004922 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800491c:	697a      	ldr	r2, [r7, #20]
 800491e:	429a      	cmp	r2, r3
 8004920:	d902      	bls.n	8004928 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	76bb      	strb	r3, [r7, #26]
 8004926:	e0df      	b.n	8004ae8 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	4618      	mov	r0, r3
 800492c:	f04f 0100 	mov.w	r1, #0
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	020b      	lsls	r3, r1, #8
 800493a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800493e:	0202      	lsls	r2, r0, #8
 8004940:	6879      	ldr	r1, [r7, #4]
 8004942:	6849      	ldr	r1, [r1, #4]
 8004944:	0849      	lsrs	r1, r1, #1
 8004946:	4608      	mov	r0, r1
 8004948:	f04f 0100 	mov.w	r1, #0
 800494c:	1814      	adds	r4, r2, r0
 800494e:	eb43 0501 	adc.w	r5, r3, r1
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	461a      	mov	r2, r3
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	4620      	mov	r0, r4
 800495e:	4629      	mov	r1, r5
 8004960:	f7fb fc8e 	bl	8000280 <__aeabi_uldivmod>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4613      	mov	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004972:	d308      	bcc.n	8004986 <UART_SetConfig+0x396>
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800497a:	d204      	bcs.n	8004986 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	60da      	str	r2, [r3, #12]
 8004984:	e0b0      	b.n	8004ae8 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	76bb      	strb	r3, [r7, #26]
 800498a:	e0ad      	b.n	8004ae8 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004994:	d15b      	bne.n	8004a4e <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8004996:	7efb      	ldrb	r3, [r7, #27]
 8004998:	2b08      	cmp	r3, #8
 800499a:	d828      	bhi.n	80049ee <UART_SetConfig+0x3fe>
 800499c:	a201      	add	r2, pc, #4	; (adr r2, 80049a4 <UART_SetConfig+0x3b4>)
 800499e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a2:	bf00      	nop
 80049a4:	080049c9 	.word	0x080049c9
 80049a8:	080049d1 	.word	0x080049d1
 80049ac:	080049d9 	.word	0x080049d9
 80049b0:	080049ef 	.word	0x080049ef
 80049b4:	080049df 	.word	0x080049df
 80049b8:	080049ef 	.word	0x080049ef
 80049bc:	080049ef 	.word	0x080049ef
 80049c0:	080049ef 	.word	0x080049ef
 80049c4:	080049e7 	.word	0x080049e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c8:	f7fd fddc 	bl	8002584 <HAL_RCC_GetPCLK1Freq>
 80049cc:	6178      	str	r0, [r7, #20]
        break;
 80049ce:	e013      	b.n	80049f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049d0:	f7fd fdee 	bl	80025b0 <HAL_RCC_GetPCLK2Freq>
 80049d4:	6178      	str	r0, [r7, #20]
        break;
 80049d6:	e00f      	b.n	80049f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049d8:	4b49      	ldr	r3, [pc, #292]	; (8004b00 <UART_SetConfig+0x510>)
 80049da:	617b      	str	r3, [r7, #20]
        break;
 80049dc:	e00c      	b.n	80049f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049de:	f7fd fd39 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 80049e2:	6178      	str	r0, [r7, #20]
        break;
 80049e4:	e008      	b.n	80049f8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ea:	617b      	str	r3, [r7, #20]
        break;
 80049ec:	e004      	b.n	80049f8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80049ee:	2300      	movs	r3, #0
 80049f0:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
 80049f4:	76bb      	strb	r3, [r7, #26]
        break;
 80049f6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d074      	beq.n	8004ae8 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	005a      	lsls	r2, r3, #1
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	085b      	lsrs	r3, r3, #1
 8004a08:	441a      	add	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a12:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	2b0f      	cmp	r3, #15
 8004a18:	d916      	bls.n	8004a48 <UART_SetConfig+0x458>
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a20:	d212      	bcs.n	8004a48 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	f023 030f 	bic.w	r3, r3, #15
 8004a2a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	085b      	lsrs	r3, r3, #1
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	b29a      	uxth	r2, r3
 8004a38:	89fb      	ldrh	r3, [r7, #14]
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	89fa      	ldrh	r2, [r7, #14]
 8004a44:	60da      	str	r2, [r3, #12]
 8004a46:	e04f      	b.n	8004ae8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004a48:	2301      	movs	r3, #1
 8004a4a:	76bb      	strb	r3, [r7, #26]
 8004a4c:	e04c      	b.n	8004ae8 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a4e:	7efb      	ldrb	r3, [r7, #27]
 8004a50:	2b08      	cmp	r3, #8
 8004a52:	d828      	bhi.n	8004aa6 <UART_SetConfig+0x4b6>
 8004a54:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <UART_SetConfig+0x46c>)
 8004a56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5a:	bf00      	nop
 8004a5c:	08004a81 	.word	0x08004a81
 8004a60:	08004a89 	.word	0x08004a89
 8004a64:	08004a91 	.word	0x08004a91
 8004a68:	08004aa7 	.word	0x08004aa7
 8004a6c:	08004a97 	.word	0x08004a97
 8004a70:	08004aa7 	.word	0x08004aa7
 8004a74:	08004aa7 	.word	0x08004aa7
 8004a78:	08004aa7 	.word	0x08004aa7
 8004a7c:	08004a9f 	.word	0x08004a9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a80:	f7fd fd80 	bl	8002584 <HAL_RCC_GetPCLK1Freq>
 8004a84:	6178      	str	r0, [r7, #20]
        break;
 8004a86:	e013      	b.n	8004ab0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a88:	f7fd fd92 	bl	80025b0 <HAL_RCC_GetPCLK2Freq>
 8004a8c:	6178      	str	r0, [r7, #20]
        break;
 8004a8e:	e00f      	b.n	8004ab0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a90:	4b1b      	ldr	r3, [pc, #108]	; (8004b00 <UART_SetConfig+0x510>)
 8004a92:	617b      	str	r3, [r7, #20]
        break;
 8004a94:	e00c      	b.n	8004ab0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a96:	f7fd fcdd 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 8004a9a:	6178      	str	r0, [r7, #20]
        break;
 8004a9c:	e008      	b.n	8004ab0 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aa2:	617b      	str	r3, [r7, #20]
        break;
 8004aa4:	e004      	b.n	8004ab0 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	76bb      	strb	r3, [r7, #26]
        break;
 8004aae:	bf00      	nop
    }

    if (pclk != 0U)
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d018      	beq.n	8004ae8 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	085a      	lsrs	r2, r3, #1
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	441a      	add	r2, r3
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ac8:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	2b0f      	cmp	r3, #15
 8004ace:	d909      	bls.n	8004ae4 <UART_SetConfig+0x4f4>
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad6:	d205      	bcs.n	8004ae4 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004ad8:	693b      	ldr	r3, [r7, #16]
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	60da      	str	r2, [r3, #12]
 8004ae2:	e001      	b.n	8004ae8 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2200      	movs	r2, #0
 8004aec:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2200      	movs	r2, #0
 8004af2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004af4:	7ebb      	ldrb	r3, [r7, #26]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3720      	adds	r7, #32
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bdb0      	pop	{r4, r5, r7, pc}
 8004afe:	bf00      	nop
 8004b00:	00f42400 	.word	0x00f42400

08004b04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d00a      	beq.n	8004b2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	430a      	orrs	r2, r1
 8004b2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d00a      	beq.n	8004b50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d00a      	beq.n	8004b72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	430a      	orrs	r2, r1
 8004b70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b76:	f003 0308 	and.w	r3, r3, #8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00a      	beq.n	8004b94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	f003 0310 	and.w	r3, r3, #16
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00a      	beq.n	8004bb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	f003 0320 	and.w	r3, r3, #32
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d00a      	beq.n	8004bd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	430a      	orrs	r2, r1
 8004bd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01a      	beq.n	8004c1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c02:	d10a      	bne.n	8004c1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00a      	beq.n	8004c3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	430a      	orrs	r2, r1
 8004c3a:	605a      	str	r2, [r3, #4]
  }
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af02      	add	r7, sp, #8
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c58:	f7fc fb4e 	bl	80012f8 <HAL_GetTick>
 8004c5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 0308 	and.w	r3, r3, #8
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d10e      	bne.n	8004c8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c70:	9300      	str	r3, [sp, #0]
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f82d 	bl	8004cda <UART_WaitOnFlagUntilTimeout>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d001      	beq.n	8004c8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e023      	b.n	8004cd2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b04      	cmp	r3, #4
 8004c96:	d10e      	bne.n	8004cb6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c9c:	9300      	str	r3, [sp, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f817 	bl	8004cda <UART_WaitOnFlagUntilTimeout>
 8004cac:	4603      	mov	r3, r0
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e00d      	b.n	8004cd2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b09c      	sub	sp, #112	; 0x70
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	603b      	str	r3, [r7, #0]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cea:	e0a5      	b.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cf2:	f000 80a1 	beq.w	8004e38 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cf6:	f7fc faff 	bl	80012f8 <HAL_GetTick>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	1ad3      	subs	r3, r2, r3
 8004d00:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d302      	bcc.n	8004d0c <UART_WaitOnFlagUntilTimeout+0x32>
 8004d06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d13e      	bne.n	8004d8a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d14:	e853 3f00 	ldrex	r3, [r3]
 8004d18:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d20:	667b      	str	r3, [r7, #100]	; 0x64
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	461a      	mov	r2, r3
 8004d28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d2c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d32:	e841 2300 	strex	r3, r2, [r1]
 8004d36:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d1e6      	bne.n	8004d0c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	3308      	adds	r3, #8
 8004d44:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d48:	e853 3f00 	ldrex	r3, [r3]
 8004d4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d50:	f023 0301 	bic.w	r3, r3, #1
 8004d54:	663b      	str	r3, [r7, #96]	; 0x60
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3308      	adds	r3, #8
 8004d5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d5e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d60:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d64:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e5      	bne.n	8004d3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2220      	movs	r2, #32
 8004d76:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2220      	movs	r2, #32
 8004d7c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e067      	b.n	8004e5a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f003 0304 	and.w	r3, r3, #4
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d04f      	beq.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	69db      	ldr	r3, [r3, #28]
 8004d9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004da2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004da6:	d147      	bne.n	8004e38 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004db0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dba:	e853 3f00 	ldrex	r3, [r3]
 8004dbe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dc6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	461a      	mov	r2, r3
 8004dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8004dd2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dd6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dd8:	e841 2300 	strex	r3, r2, [r1]
 8004ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d1e6      	bne.n	8004db2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3308      	adds	r3, #8
 8004dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	e853 3f00 	ldrex	r3, [r3]
 8004df2:	613b      	str	r3, [r7, #16]
   return(result);
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	f023 0301 	bic.w	r3, r3, #1
 8004dfa:	66bb      	str	r3, [r7, #104]	; 0x68
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	3308      	adds	r3, #8
 8004e02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e04:	623a      	str	r2, [r7, #32]
 8004e06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e08:	69f9      	ldr	r1, [r7, #28]
 8004e0a:	6a3a      	ldr	r2, [r7, #32]
 8004e0c:	e841 2300 	strex	r3, r2, [r1]
 8004e10:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1e5      	bne.n	8004de4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2220      	movs	r2, #32
 8004e22:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e34:	2303      	movs	r3, #3
 8004e36:	e010      	b.n	8004e5a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	69da      	ldr	r2, [r3, #28]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	4013      	ands	r3, r2
 8004e42:	68ba      	ldr	r2, [r7, #8]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	bf0c      	ite	eq
 8004e48:	2301      	moveq	r3, #1
 8004e4a:	2300      	movne	r3, #0
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	461a      	mov	r2, r3
 8004e50:	79fb      	ldrb	r3, [r7, #7]
 8004e52:	429a      	cmp	r2, r3
 8004e54:	f43f af4a 	beq.w	8004cec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e58:	2300      	movs	r3, #0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3770      	adds	r7, #112	; 0x70
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}

08004e62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b095      	sub	sp, #84	; 0x54
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e72:	e853 3f00 	ldrex	r3, [r3]
 8004e76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	461a      	mov	r2, r3
 8004e86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e88:	643b      	str	r3, [r7, #64]	; 0x40
 8004e8a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e90:	e841 2300 	strex	r3, r2, [r1]
 8004e94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1e6      	bne.n	8004e6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	3308      	adds	r3, #8
 8004ea2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	e853 3f00 	ldrex	r3, [r3]
 8004eaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f023 0301 	bic.w	r3, r3, #1
 8004eb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	3308      	adds	r3, #8
 8004eba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ebc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004ebe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ec2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ec4:	e841 2300 	strex	r3, r2, [r1]
 8004ec8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d1e5      	bne.n	8004e9c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d118      	bne.n	8004f0a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f023 0310 	bic.w	r3, r3, #16
 8004eec:	647b      	str	r3, [r7, #68]	; 0x44
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ef6:	61bb      	str	r3, [r7, #24]
 8004ef8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6979      	ldr	r1, [r7, #20]
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	613b      	str	r3, [r7, #16]
   return(result);
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e6      	bne.n	8004ed8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004f1c:	bf00      	nop
 8004f1e:	3754      	adds	r7, #84	; 0x54
 8004f20:	46bd      	mov	sp, r7
 8004f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f26:	4770      	bx	lr

08004f28 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f34:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f46:	68f8      	ldr	r0, [r7, #12]
 8004f48:	f7ff fb3c 	bl	80045c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f4c:	bf00      	nop
 8004f4e:	3710      	adds	r7, #16
 8004f50:	46bd      	mov	sp, r7
 8004f52:	bd80      	pop	{r7, pc}

08004f54 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	e853 3f00 	ldrex	r3, [r3]
 8004f68:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f70:	61fb      	str	r3, [r7, #28]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	61bb      	str	r3, [r7, #24]
 8004f7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f7e:	6979      	ldr	r1, [r7, #20]
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	e841 2300 	strex	r3, r2, [r1]
 8004f86:	613b      	str	r3, [r7, #16]
   return(result);
 8004f88:	693b      	ldr	r3, [r7, #16]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d1e6      	bne.n	8004f5c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2220      	movs	r2, #32
 8004f92:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f9a:	6878      	ldr	r0, [r7, #4]
 8004f9c:	f7fb fe2e 	bl	8000bfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fa0:	bf00      	nop
 8004fa2:	3720      	adds	r7, #32
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <__errno>:
 8004fbc:	4b01      	ldr	r3, [pc, #4]	; (8004fc4 <__errno+0x8>)
 8004fbe:	6818      	ldr	r0, [r3, #0]
 8004fc0:	4770      	bx	lr
 8004fc2:	bf00      	nop
 8004fc4:	20000010 	.word	0x20000010

08004fc8 <__libc_init_array>:
 8004fc8:	b570      	push	{r4, r5, r6, lr}
 8004fca:	4d0d      	ldr	r5, [pc, #52]	; (8005000 <__libc_init_array+0x38>)
 8004fcc:	4c0d      	ldr	r4, [pc, #52]	; (8005004 <__libc_init_array+0x3c>)
 8004fce:	1b64      	subs	r4, r4, r5
 8004fd0:	10a4      	asrs	r4, r4, #2
 8004fd2:	2600      	movs	r6, #0
 8004fd4:	42a6      	cmp	r6, r4
 8004fd6:	d109      	bne.n	8004fec <__libc_init_array+0x24>
 8004fd8:	4d0b      	ldr	r5, [pc, #44]	; (8005008 <__libc_init_array+0x40>)
 8004fda:	4c0c      	ldr	r4, [pc, #48]	; (800500c <__libc_init_array+0x44>)
 8004fdc:	f001 f912 	bl	8006204 <_init>
 8004fe0:	1b64      	subs	r4, r4, r5
 8004fe2:	10a4      	asrs	r4, r4, #2
 8004fe4:	2600      	movs	r6, #0
 8004fe6:	42a6      	cmp	r6, r4
 8004fe8:	d105      	bne.n	8004ff6 <__libc_init_array+0x2e>
 8004fea:	bd70      	pop	{r4, r5, r6, pc}
 8004fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ff0:	4798      	blx	r3
 8004ff2:	3601      	adds	r6, #1
 8004ff4:	e7ee      	b.n	8004fd4 <__libc_init_array+0xc>
 8004ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ffa:	4798      	blx	r3
 8004ffc:	3601      	adds	r6, #1
 8004ffe:	e7f2      	b.n	8004fe6 <__libc_init_array+0x1e>
 8005000:	080064ac 	.word	0x080064ac
 8005004:	080064ac 	.word	0x080064ac
 8005008:	080064ac 	.word	0x080064ac
 800500c:	080064b0 	.word	0x080064b0

08005010 <memset>:
 8005010:	4402      	add	r2, r0
 8005012:	4603      	mov	r3, r0
 8005014:	4293      	cmp	r3, r2
 8005016:	d100      	bne.n	800501a <memset+0xa>
 8005018:	4770      	bx	lr
 800501a:	f803 1b01 	strb.w	r1, [r3], #1
 800501e:	e7f9      	b.n	8005014 <memset+0x4>

08005020 <siprintf>:
 8005020:	b40e      	push	{r1, r2, r3}
 8005022:	b500      	push	{lr}
 8005024:	b09c      	sub	sp, #112	; 0x70
 8005026:	ab1d      	add	r3, sp, #116	; 0x74
 8005028:	9002      	str	r0, [sp, #8]
 800502a:	9006      	str	r0, [sp, #24]
 800502c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005030:	4809      	ldr	r0, [pc, #36]	; (8005058 <siprintf+0x38>)
 8005032:	9107      	str	r1, [sp, #28]
 8005034:	9104      	str	r1, [sp, #16]
 8005036:	4909      	ldr	r1, [pc, #36]	; (800505c <siprintf+0x3c>)
 8005038:	f853 2b04 	ldr.w	r2, [r3], #4
 800503c:	9105      	str	r1, [sp, #20]
 800503e:	6800      	ldr	r0, [r0, #0]
 8005040:	9301      	str	r3, [sp, #4]
 8005042:	a902      	add	r1, sp, #8
 8005044:	f000 f896 	bl	8005174 <_svfiprintf_r>
 8005048:	9b02      	ldr	r3, [sp, #8]
 800504a:	2200      	movs	r2, #0
 800504c:	701a      	strb	r2, [r3, #0]
 800504e:	b01c      	add	sp, #112	; 0x70
 8005050:	f85d eb04 	ldr.w	lr, [sp], #4
 8005054:	b003      	add	sp, #12
 8005056:	4770      	bx	lr
 8005058:	20000010 	.word	0x20000010
 800505c:	ffff0208 	.word	0xffff0208

08005060 <siscanf>:
 8005060:	b40e      	push	{r1, r2, r3}
 8005062:	b510      	push	{r4, lr}
 8005064:	b09f      	sub	sp, #124	; 0x7c
 8005066:	ac21      	add	r4, sp, #132	; 0x84
 8005068:	f44f 7101 	mov.w	r1, #516	; 0x204
 800506c:	f854 2b04 	ldr.w	r2, [r4], #4
 8005070:	9201      	str	r2, [sp, #4]
 8005072:	f8ad 101c 	strh.w	r1, [sp, #28]
 8005076:	9004      	str	r0, [sp, #16]
 8005078:	9008      	str	r0, [sp, #32]
 800507a:	f7fb f8a9 	bl	80001d0 <strlen>
 800507e:	4b0c      	ldr	r3, [pc, #48]	; (80050b0 <siscanf+0x50>)
 8005080:	9005      	str	r0, [sp, #20]
 8005082:	9009      	str	r0, [sp, #36]	; 0x24
 8005084:	930d      	str	r3, [sp, #52]	; 0x34
 8005086:	480b      	ldr	r0, [pc, #44]	; (80050b4 <siscanf+0x54>)
 8005088:	9a01      	ldr	r2, [sp, #4]
 800508a:	6800      	ldr	r0, [r0, #0]
 800508c:	9403      	str	r4, [sp, #12]
 800508e:	2300      	movs	r3, #0
 8005090:	9311      	str	r3, [sp, #68]	; 0x44
 8005092:	9316      	str	r3, [sp, #88]	; 0x58
 8005094:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005098:	f8ad 301e 	strh.w	r3, [sp, #30]
 800509c:	a904      	add	r1, sp, #16
 800509e:	4623      	mov	r3, r4
 80050a0:	f000 f9c2 	bl	8005428 <__ssvfiscanf_r>
 80050a4:	b01f      	add	sp, #124	; 0x7c
 80050a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80050aa:	b003      	add	sp, #12
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	080050b9 	.word	0x080050b9
 80050b4:	20000010 	.word	0x20000010

080050b8 <__seofread>:
 80050b8:	2000      	movs	r0, #0
 80050ba:	4770      	bx	lr

080050bc <__ssputs_r>:
 80050bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c0:	688e      	ldr	r6, [r1, #8]
 80050c2:	429e      	cmp	r6, r3
 80050c4:	4682      	mov	sl, r0
 80050c6:	460c      	mov	r4, r1
 80050c8:	4690      	mov	r8, r2
 80050ca:	461f      	mov	r7, r3
 80050cc:	d838      	bhi.n	8005140 <__ssputs_r+0x84>
 80050ce:	898a      	ldrh	r2, [r1, #12]
 80050d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050d4:	d032      	beq.n	800513c <__ssputs_r+0x80>
 80050d6:	6825      	ldr	r5, [r4, #0]
 80050d8:	6909      	ldr	r1, [r1, #16]
 80050da:	eba5 0901 	sub.w	r9, r5, r1
 80050de:	6965      	ldr	r5, [r4, #20]
 80050e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050e8:	3301      	adds	r3, #1
 80050ea:	444b      	add	r3, r9
 80050ec:	106d      	asrs	r5, r5, #1
 80050ee:	429d      	cmp	r5, r3
 80050f0:	bf38      	it	cc
 80050f2:	461d      	movcc	r5, r3
 80050f4:	0553      	lsls	r3, r2, #21
 80050f6:	d531      	bpl.n	800515c <__ssputs_r+0xa0>
 80050f8:	4629      	mov	r1, r5
 80050fa:	f000 ffdf 	bl	80060bc <_malloc_r>
 80050fe:	4606      	mov	r6, r0
 8005100:	b950      	cbnz	r0, 8005118 <__ssputs_r+0x5c>
 8005102:	230c      	movs	r3, #12
 8005104:	f8ca 3000 	str.w	r3, [sl]
 8005108:	89a3      	ldrh	r3, [r4, #12]
 800510a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800510e:	81a3      	strh	r3, [r4, #12]
 8005110:	f04f 30ff 	mov.w	r0, #4294967295
 8005114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005118:	6921      	ldr	r1, [r4, #16]
 800511a:	464a      	mov	r2, r9
 800511c:	f000 ff56 	bl	8005fcc <memcpy>
 8005120:	89a3      	ldrh	r3, [r4, #12]
 8005122:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800512a:	81a3      	strh	r3, [r4, #12]
 800512c:	6126      	str	r6, [r4, #16]
 800512e:	6165      	str	r5, [r4, #20]
 8005130:	444e      	add	r6, r9
 8005132:	eba5 0509 	sub.w	r5, r5, r9
 8005136:	6026      	str	r6, [r4, #0]
 8005138:	60a5      	str	r5, [r4, #8]
 800513a:	463e      	mov	r6, r7
 800513c:	42be      	cmp	r6, r7
 800513e:	d900      	bls.n	8005142 <__ssputs_r+0x86>
 8005140:	463e      	mov	r6, r7
 8005142:	4632      	mov	r2, r6
 8005144:	6820      	ldr	r0, [r4, #0]
 8005146:	4641      	mov	r1, r8
 8005148:	f000 ff4e 	bl	8005fe8 <memmove>
 800514c:	68a3      	ldr	r3, [r4, #8]
 800514e:	6822      	ldr	r2, [r4, #0]
 8005150:	1b9b      	subs	r3, r3, r6
 8005152:	4432      	add	r2, r6
 8005154:	60a3      	str	r3, [r4, #8]
 8005156:	6022      	str	r2, [r4, #0]
 8005158:	2000      	movs	r0, #0
 800515a:	e7db      	b.n	8005114 <__ssputs_r+0x58>
 800515c:	462a      	mov	r2, r5
 800515e:	f001 f807 	bl	8006170 <_realloc_r>
 8005162:	4606      	mov	r6, r0
 8005164:	2800      	cmp	r0, #0
 8005166:	d1e1      	bne.n	800512c <__ssputs_r+0x70>
 8005168:	6921      	ldr	r1, [r4, #16]
 800516a:	4650      	mov	r0, sl
 800516c:	f000 ff56 	bl	800601c <_free_r>
 8005170:	e7c7      	b.n	8005102 <__ssputs_r+0x46>
	...

08005174 <_svfiprintf_r>:
 8005174:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005178:	4698      	mov	r8, r3
 800517a:	898b      	ldrh	r3, [r1, #12]
 800517c:	061b      	lsls	r3, r3, #24
 800517e:	b09d      	sub	sp, #116	; 0x74
 8005180:	4607      	mov	r7, r0
 8005182:	460d      	mov	r5, r1
 8005184:	4614      	mov	r4, r2
 8005186:	d50e      	bpl.n	80051a6 <_svfiprintf_r+0x32>
 8005188:	690b      	ldr	r3, [r1, #16]
 800518a:	b963      	cbnz	r3, 80051a6 <_svfiprintf_r+0x32>
 800518c:	2140      	movs	r1, #64	; 0x40
 800518e:	f000 ff95 	bl	80060bc <_malloc_r>
 8005192:	6028      	str	r0, [r5, #0]
 8005194:	6128      	str	r0, [r5, #16]
 8005196:	b920      	cbnz	r0, 80051a2 <_svfiprintf_r+0x2e>
 8005198:	230c      	movs	r3, #12
 800519a:	603b      	str	r3, [r7, #0]
 800519c:	f04f 30ff 	mov.w	r0, #4294967295
 80051a0:	e0d1      	b.n	8005346 <_svfiprintf_r+0x1d2>
 80051a2:	2340      	movs	r3, #64	; 0x40
 80051a4:	616b      	str	r3, [r5, #20]
 80051a6:	2300      	movs	r3, #0
 80051a8:	9309      	str	r3, [sp, #36]	; 0x24
 80051aa:	2320      	movs	r3, #32
 80051ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80051b4:	2330      	movs	r3, #48	; 0x30
 80051b6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005360 <_svfiprintf_r+0x1ec>
 80051ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051be:	f04f 0901 	mov.w	r9, #1
 80051c2:	4623      	mov	r3, r4
 80051c4:	469a      	mov	sl, r3
 80051c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051ca:	b10a      	cbz	r2, 80051d0 <_svfiprintf_r+0x5c>
 80051cc:	2a25      	cmp	r2, #37	; 0x25
 80051ce:	d1f9      	bne.n	80051c4 <_svfiprintf_r+0x50>
 80051d0:	ebba 0b04 	subs.w	fp, sl, r4
 80051d4:	d00b      	beq.n	80051ee <_svfiprintf_r+0x7a>
 80051d6:	465b      	mov	r3, fp
 80051d8:	4622      	mov	r2, r4
 80051da:	4629      	mov	r1, r5
 80051dc:	4638      	mov	r0, r7
 80051de:	f7ff ff6d 	bl	80050bc <__ssputs_r>
 80051e2:	3001      	adds	r0, #1
 80051e4:	f000 80aa 	beq.w	800533c <_svfiprintf_r+0x1c8>
 80051e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051ea:	445a      	add	r2, fp
 80051ec:	9209      	str	r2, [sp, #36]	; 0x24
 80051ee:	f89a 3000 	ldrb.w	r3, [sl]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f000 80a2 	beq.w	800533c <_svfiprintf_r+0x1c8>
 80051f8:	2300      	movs	r3, #0
 80051fa:	f04f 32ff 	mov.w	r2, #4294967295
 80051fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005202:	f10a 0a01 	add.w	sl, sl, #1
 8005206:	9304      	str	r3, [sp, #16]
 8005208:	9307      	str	r3, [sp, #28]
 800520a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800520e:	931a      	str	r3, [sp, #104]	; 0x68
 8005210:	4654      	mov	r4, sl
 8005212:	2205      	movs	r2, #5
 8005214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005218:	4851      	ldr	r0, [pc, #324]	; (8005360 <_svfiprintf_r+0x1ec>)
 800521a:	f7fa ffe1 	bl	80001e0 <memchr>
 800521e:	9a04      	ldr	r2, [sp, #16]
 8005220:	b9d8      	cbnz	r0, 800525a <_svfiprintf_r+0xe6>
 8005222:	06d0      	lsls	r0, r2, #27
 8005224:	bf44      	itt	mi
 8005226:	2320      	movmi	r3, #32
 8005228:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800522c:	0711      	lsls	r1, r2, #28
 800522e:	bf44      	itt	mi
 8005230:	232b      	movmi	r3, #43	; 0x2b
 8005232:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005236:	f89a 3000 	ldrb.w	r3, [sl]
 800523a:	2b2a      	cmp	r3, #42	; 0x2a
 800523c:	d015      	beq.n	800526a <_svfiprintf_r+0xf6>
 800523e:	9a07      	ldr	r2, [sp, #28]
 8005240:	4654      	mov	r4, sl
 8005242:	2000      	movs	r0, #0
 8005244:	f04f 0c0a 	mov.w	ip, #10
 8005248:	4621      	mov	r1, r4
 800524a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800524e:	3b30      	subs	r3, #48	; 0x30
 8005250:	2b09      	cmp	r3, #9
 8005252:	d94e      	bls.n	80052f2 <_svfiprintf_r+0x17e>
 8005254:	b1b0      	cbz	r0, 8005284 <_svfiprintf_r+0x110>
 8005256:	9207      	str	r2, [sp, #28]
 8005258:	e014      	b.n	8005284 <_svfiprintf_r+0x110>
 800525a:	eba0 0308 	sub.w	r3, r0, r8
 800525e:	fa09 f303 	lsl.w	r3, r9, r3
 8005262:	4313      	orrs	r3, r2
 8005264:	9304      	str	r3, [sp, #16]
 8005266:	46a2      	mov	sl, r4
 8005268:	e7d2      	b.n	8005210 <_svfiprintf_r+0x9c>
 800526a:	9b03      	ldr	r3, [sp, #12]
 800526c:	1d19      	adds	r1, r3, #4
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	9103      	str	r1, [sp, #12]
 8005272:	2b00      	cmp	r3, #0
 8005274:	bfbb      	ittet	lt
 8005276:	425b      	neglt	r3, r3
 8005278:	f042 0202 	orrlt.w	r2, r2, #2
 800527c:	9307      	strge	r3, [sp, #28]
 800527e:	9307      	strlt	r3, [sp, #28]
 8005280:	bfb8      	it	lt
 8005282:	9204      	strlt	r2, [sp, #16]
 8005284:	7823      	ldrb	r3, [r4, #0]
 8005286:	2b2e      	cmp	r3, #46	; 0x2e
 8005288:	d10c      	bne.n	80052a4 <_svfiprintf_r+0x130>
 800528a:	7863      	ldrb	r3, [r4, #1]
 800528c:	2b2a      	cmp	r3, #42	; 0x2a
 800528e:	d135      	bne.n	80052fc <_svfiprintf_r+0x188>
 8005290:	9b03      	ldr	r3, [sp, #12]
 8005292:	1d1a      	adds	r2, r3, #4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	9203      	str	r2, [sp, #12]
 8005298:	2b00      	cmp	r3, #0
 800529a:	bfb8      	it	lt
 800529c:	f04f 33ff 	movlt.w	r3, #4294967295
 80052a0:	3402      	adds	r4, #2
 80052a2:	9305      	str	r3, [sp, #20]
 80052a4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005370 <_svfiprintf_r+0x1fc>
 80052a8:	7821      	ldrb	r1, [r4, #0]
 80052aa:	2203      	movs	r2, #3
 80052ac:	4650      	mov	r0, sl
 80052ae:	f7fa ff97 	bl	80001e0 <memchr>
 80052b2:	b140      	cbz	r0, 80052c6 <_svfiprintf_r+0x152>
 80052b4:	2340      	movs	r3, #64	; 0x40
 80052b6:	eba0 000a 	sub.w	r0, r0, sl
 80052ba:	fa03 f000 	lsl.w	r0, r3, r0
 80052be:	9b04      	ldr	r3, [sp, #16]
 80052c0:	4303      	orrs	r3, r0
 80052c2:	3401      	adds	r4, #1
 80052c4:	9304      	str	r3, [sp, #16]
 80052c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052ca:	4826      	ldr	r0, [pc, #152]	; (8005364 <_svfiprintf_r+0x1f0>)
 80052cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052d0:	2206      	movs	r2, #6
 80052d2:	f7fa ff85 	bl	80001e0 <memchr>
 80052d6:	2800      	cmp	r0, #0
 80052d8:	d038      	beq.n	800534c <_svfiprintf_r+0x1d8>
 80052da:	4b23      	ldr	r3, [pc, #140]	; (8005368 <_svfiprintf_r+0x1f4>)
 80052dc:	bb1b      	cbnz	r3, 8005326 <_svfiprintf_r+0x1b2>
 80052de:	9b03      	ldr	r3, [sp, #12]
 80052e0:	3307      	adds	r3, #7
 80052e2:	f023 0307 	bic.w	r3, r3, #7
 80052e6:	3308      	adds	r3, #8
 80052e8:	9303      	str	r3, [sp, #12]
 80052ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ec:	4433      	add	r3, r6
 80052ee:	9309      	str	r3, [sp, #36]	; 0x24
 80052f0:	e767      	b.n	80051c2 <_svfiprintf_r+0x4e>
 80052f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80052f6:	460c      	mov	r4, r1
 80052f8:	2001      	movs	r0, #1
 80052fa:	e7a5      	b.n	8005248 <_svfiprintf_r+0xd4>
 80052fc:	2300      	movs	r3, #0
 80052fe:	3401      	adds	r4, #1
 8005300:	9305      	str	r3, [sp, #20]
 8005302:	4619      	mov	r1, r3
 8005304:	f04f 0c0a 	mov.w	ip, #10
 8005308:	4620      	mov	r0, r4
 800530a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800530e:	3a30      	subs	r2, #48	; 0x30
 8005310:	2a09      	cmp	r2, #9
 8005312:	d903      	bls.n	800531c <_svfiprintf_r+0x1a8>
 8005314:	2b00      	cmp	r3, #0
 8005316:	d0c5      	beq.n	80052a4 <_svfiprintf_r+0x130>
 8005318:	9105      	str	r1, [sp, #20]
 800531a:	e7c3      	b.n	80052a4 <_svfiprintf_r+0x130>
 800531c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005320:	4604      	mov	r4, r0
 8005322:	2301      	movs	r3, #1
 8005324:	e7f0      	b.n	8005308 <_svfiprintf_r+0x194>
 8005326:	ab03      	add	r3, sp, #12
 8005328:	9300      	str	r3, [sp, #0]
 800532a:	462a      	mov	r2, r5
 800532c:	4b0f      	ldr	r3, [pc, #60]	; (800536c <_svfiprintf_r+0x1f8>)
 800532e:	a904      	add	r1, sp, #16
 8005330:	4638      	mov	r0, r7
 8005332:	f3af 8000 	nop.w
 8005336:	1c42      	adds	r2, r0, #1
 8005338:	4606      	mov	r6, r0
 800533a:	d1d6      	bne.n	80052ea <_svfiprintf_r+0x176>
 800533c:	89ab      	ldrh	r3, [r5, #12]
 800533e:	065b      	lsls	r3, r3, #25
 8005340:	f53f af2c 	bmi.w	800519c <_svfiprintf_r+0x28>
 8005344:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005346:	b01d      	add	sp, #116	; 0x74
 8005348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800534c:	ab03      	add	r3, sp, #12
 800534e:	9300      	str	r3, [sp, #0]
 8005350:	462a      	mov	r2, r5
 8005352:	4b06      	ldr	r3, [pc, #24]	; (800536c <_svfiprintf_r+0x1f8>)
 8005354:	a904      	add	r1, sp, #16
 8005356:	4638      	mov	r0, r7
 8005358:	f000 fa4c 	bl	80057f4 <_printf_i>
 800535c:	e7eb      	b.n	8005336 <_svfiprintf_r+0x1c2>
 800535e:	bf00      	nop
 8005360:	080062f4 	.word	0x080062f4
 8005364:	080062fe 	.word	0x080062fe
 8005368:	00000000 	.word	0x00000000
 800536c:	080050bd 	.word	0x080050bd
 8005370:	080062fa 	.word	0x080062fa

08005374 <_sungetc_r>:
 8005374:	b538      	push	{r3, r4, r5, lr}
 8005376:	1c4b      	adds	r3, r1, #1
 8005378:	4614      	mov	r4, r2
 800537a:	d103      	bne.n	8005384 <_sungetc_r+0x10>
 800537c:	f04f 35ff 	mov.w	r5, #4294967295
 8005380:	4628      	mov	r0, r5
 8005382:	bd38      	pop	{r3, r4, r5, pc}
 8005384:	8993      	ldrh	r3, [r2, #12]
 8005386:	f023 0320 	bic.w	r3, r3, #32
 800538a:	8193      	strh	r3, [r2, #12]
 800538c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800538e:	6852      	ldr	r2, [r2, #4]
 8005390:	b2cd      	uxtb	r5, r1
 8005392:	b18b      	cbz	r3, 80053b8 <_sungetc_r+0x44>
 8005394:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005396:	4293      	cmp	r3, r2
 8005398:	dd08      	ble.n	80053ac <_sungetc_r+0x38>
 800539a:	6823      	ldr	r3, [r4, #0]
 800539c:	1e5a      	subs	r2, r3, #1
 800539e:	6022      	str	r2, [r4, #0]
 80053a0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80053a4:	6863      	ldr	r3, [r4, #4]
 80053a6:	3301      	adds	r3, #1
 80053a8:	6063      	str	r3, [r4, #4]
 80053aa:	e7e9      	b.n	8005380 <_sungetc_r+0xc>
 80053ac:	4621      	mov	r1, r4
 80053ae:	f000 fdd1 	bl	8005f54 <__submore>
 80053b2:	2800      	cmp	r0, #0
 80053b4:	d0f1      	beq.n	800539a <_sungetc_r+0x26>
 80053b6:	e7e1      	b.n	800537c <_sungetc_r+0x8>
 80053b8:	6921      	ldr	r1, [r4, #16]
 80053ba:	6823      	ldr	r3, [r4, #0]
 80053bc:	b151      	cbz	r1, 80053d4 <_sungetc_r+0x60>
 80053be:	4299      	cmp	r1, r3
 80053c0:	d208      	bcs.n	80053d4 <_sungetc_r+0x60>
 80053c2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80053c6:	42a9      	cmp	r1, r5
 80053c8:	d104      	bne.n	80053d4 <_sungetc_r+0x60>
 80053ca:	3b01      	subs	r3, #1
 80053cc:	3201      	adds	r2, #1
 80053ce:	6023      	str	r3, [r4, #0]
 80053d0:	6062      	str	r2, [r4, #4]
 80053d2:	e7d5      	b.n	8005380 <_sungetc_r+0xc>
 80053d4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80053d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053dc:	6363      	str	r3, [r4, #52]	; 0x34
 80053de:	2303      	movs	r3, #3
 80053e0:	63a3      	str	r3, [r4, #56]	; 0x38
 80053e2:	4623      	mov	r3, r4
 80053e4:	f803 5f46 	strb.w	r5, [r3, #70]!
 80053e8:	6023      	str	r3, [r4, #0]
 80053ea:	2301      	movs	r3, #1
 80053ec:	e7dc      	b.n	80053a8 <_sungetc_r+0x34>

080053ee <__ssrefill_r>:
 80053ee:	b510      	push	{r4, lr}
 80053f0:	460c      	mov	r4, r1
 80053f2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80053f4:	b169      	cbz	r1, 8005412 <__ssrefill_r+0x24>
 80053f6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80053fa:	4299      	cmp	r1, r3
 80053fc:	d001      	beq.n	8005402 <__ssrefill_r+0x14>
 80053fe:	f000 fe0d 	bl	800601c <_free_r>
 8005402:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005404:	6063      	str	r3, [r4, #4]
 8005406:	2000      	movs	r0, #0
 8005408:	6360      	str	r0, [r4, #52]	; 0x34
 800540a:	b113      	cbz	r3, 8005412 <__ssrefill_r+0x24>
 800540c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800540e:	6023      	str	r3, [r4, #0]
 8005410:	bd10      	pop	{r4, pc}
 8005412:	6923      	ldr	r3, [r4, #16]
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	2300      	movs	r3, #0
 8005418:	6063      	str	r3, [r4, #4]
 800541a:	89a3      	ldrh	r3, [r4, #12]
 800541c:	f043 0320 	orr.w	r3, r3, #32
 8005420:	81a3      	strh	r3, [r4, #12]
 8005422:	f04f 30ff 	mov.w	r0, #4294967295
 8005426:	e7f3      	b.n	8005410 <__ssrefill_r+0x22>

08005428 <__ssvfiscanf_r>:
 8005428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542c:	460c      	mov	r4, r1
 800542e:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8005432:	2100      	movs	r1, #0
 8005434:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005438:	49b2      	ldr	r1, [pc, #712]	; (8005704 <__ssvfiscanf_r+0x2dc>)
 800543a:	91a0      	str	r1, [sp, #640]	; 0x280
 800543c:	f10d 0804 	add.w	r8, sp, #4
 8005440:	49b1      	ldr	r1, [pc, #708]	; (8005708 <__ssvfiscanf_r+0x2e0>)
 8005442:	4fb2      	ldr	r7, [pc, #712]	; (800570c <__ssvfiscanf_r+0x2e4>)
 8005444:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 8005710 <__ssvfiscanf_r+0x2e8>
 8005448:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800544c:	4606      	mov	r6, r0
 800544e:	91a1      	str	r1, [sp, #644]	; 0x284
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	f892 a000 	ldrb.w	sl, [r2]
 8005456:	f1ba 0f00 	cmp.w	sl, #0
 800545a:	f000 8151 	beq.w	8005700 <__ssvfiscanf_r+0x2d8>
 800545e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8005462:	f013 0308 	ands.w	r3, r3, #8
 8005466:	f102 0501 	add.w	r5, r2, #1
 800546a:	d019      	beq.n	80054a0 <__ssvfiscanf_r+0x78>
 800546c:	6863      	ldr	r3, [r4, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	dd0f      	ble.n	8005492 <__ssvfiscanf_r+0x6a>
 8005472:	6823      	ldr	r3, [r4, #0]
 8005474:	781a      	ldrb	r2, [r3, #0]
 8005476:	5cba      	ldrb	r2, [r7, r2]
 8005478:	0712      	lsls	r2, r2, #28
 800547a:	d401      	bmi.n	8005480 <__ssvfiscanf_r+0x58>
 800547c:	462a      	mov	r2, r5
 800547e:	e7e8      	b.n	8005452 <__ssvfiscanf_r+0x2a>
 8005480:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005482:	3201      	adds	r2, #1
 8005484:	9245      	str	r2, [sp, #276]	; 0x114
 8005486:	6862      	ldr	r2, [r4, #4]
 8005488:	3301      	adds	r3, #1
 800548a:	3a01      	subs	r2, #1
 800548c:	6062      	str	r2, [r4, #4]
 800548e:	6023      	str	r3, [r4, #0]
 8005490:	e7ec      	b.n	800546c <__ssvfiscanf_r+0x44>
 8005492:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005494:	4621      	mov	r1, r4
 8005496:	4630      	mov	r0, r6
 8005498:	4798      	blx	r3
 800549a:	2800      	cmp	r0, #0
 800549c:	d0e9      	beq.n	8005472 <__ssvfiscanf_r+0x4a>
 800549e:	e7ed      	b.n	800547c <__ssvfiscanf_r+0x54>
 80054a0:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 80054a4:	f040 8083 	bne.w	80055ae <__ssvfiscanf_r+0x186>
 80054a8:	9341      	str	r3, [sp, #260]	; 0x104
 80054aa:	9343      	str	r3, [sp, #268]	; 0x10c
 80054ac:	7853      	ldrb	r3, [r2, #1]
 80054ae:	2b2a      	cmp	r3, #42	; 0x2a
 80054b0:	bf02      	ittt	eq
 80054b2:	2310      	moveq	r3, #16
 80054b4:	1c95      	addeq	r5, r2, #2
 80054b6:	9341      	streq	r3, [sp, #260]	; 0x104
 80054b8:	220a      	movs	r2, #10
 80054ba:	46ab      	mov	fp, r5
 80054bc:	f81b 1b01 	ldrb.w	r1, [fp], #1
 80054c0:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80054c4:	2b09      	cmp	r3, #9
 80054c6:	d91d      	bls.n	8005504 <__ssvfiscanf_r+0xdc>
 80054c8:	4891      	ldr	r0, [pc, #580]	; (8005710 <__ssvfiscanf_r+0x2e8>)
 80054ca:	2203      	movs	r2, #3
 80054cc:	f7fa fe88 	bl	80001e0 <memchr>
 80054d0:	b140      	cbz	r0, 80054e4 <__ssvfiscanf_r+0xbc>
 80054d2:	2301      	movs	r3, #1
 80054d4:	eba0 0009 	sub.w	r0, r0, r9
 80054d8:	fa03 f000 	lsl.w	r0, r3, r0
 80054dc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80054de:	4318      	orrs	r0, r3
 80054e0:	9041      	str	r0, [sp, #260]	; 0x104
 80054e2:	465d      	mov	r5, fp
 80054e4:	f815 3b01 	ldrb.w	r3, [r5], #1
 80054e8:	2b78      	cmp	r3, #120	; 0x78
 80054ea:	d806      	bhi.n	80054fa <__ssvfiscanf_r+0xd2>
 80054ec:	2b57      	cmp	r3, #87	; 0x57
 80054ee:	d810      	bhi.n	8005512 <__ssvfiscanf_r+0xea>
 80054f0:	2b25      	cmp	r3, #37	; 0x25
 80054f2:	d05c      	beq.n	80055ae <__ssvfiscanf_r+0x186>
 80054f4:	d856      	bhi.n	80055a4 <__ssvfiscanf_r+0x17c>
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d074      	beq.n	80055e4 <__ssvfiscanf_r+0x1bc>
 80054fa:	2303      	movs	r3, #3
 80054fc:	9347      	str	r3, [sp, #284]	; 0x11c
 80054fe:	230a      	movs	r3, #10
 8005500:	9342      	str	r3, [sp, #264]	; 0x108
 8005502:	e081      	b.n	8005608 <__ssvfiscanf_r+0x1e0>
 8005504:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005506:	fb02 1303 	mla	r3, r2, r3, r1
 800550a:	3b30      	subs	r3, #48	; 0x30
 800550c:	9343      	str	r3, [sp, #268]	; 0x10c
 800550e:	465d      	mov	r5, fp
 8005510:	e7d3      	b.n	80054ba <__ssvfiscanf_r+0x92>
 8005512:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005516:	2a20      	cmp	r2, #32
 8005518:	d8ef      	bhi.n	80054fa <__ssvfiscanf_r+0xd2>
 800551a:	a101      	add	r1, pc, #4	; (adr r1, 8005520 <__ssvfiscanf_r+0xf8>)
 800551c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005520:	080055f3 	.word	0x080055f3
 8005524:	080054fb 	.word	0x080054fb
 8005528:	080054fb 	.word	0x080054fb
 800552c:	08005651 	.word	0x08005651
 8005530:	080054fb 	.word	0x080054fb
 8005534:	080054fb 	.word	0x080054fb
 8005538:	080054fb 	.word	0x080054fb
 800553c:	080054fb 	.word	0x080054fb
 8005540:	080054fb 	.word	0x080054fb
 8005544:	080054fb 	.word	0x080054fb
 8005548:	080054fb 	.word	0x080054fb
 800554c:	08005667 	.word	0x08005667
 8005550:	0800563d 	.word	0x0800563d
 8005554:	080055ab 	.word	0x080055ab
 8005558:	080055ab 	.word	0x080055ab
 800555c:	080055ab 	.word	0x080055ab
 8005560:	080054fb 	.word	0x080054fb
 8005564:	08005641 	.word	0x08005641
 8005568:	080054fb 	.word	0x080054fb
 800556c:	080054fb 	.word	0x080054fb
 8005570:	080054fb 	.word	0x080054fb
 8005574:	080054fb 	.word	0x080054fb
 8005578:	08005677 	.word	0x08005677
 800557c:	08005649 	.word	0x08005649
 8005580:	080055eb 	.word	0x080055eb
 8005584:	080054fb 	.word	0x080054fb
 8005588:	080054fb 	.word	0x080054fb
 800558c:	08005673 	.word	0x08005673
 8005590:	080054fb 	.word	0x080054fb
 8005594:	0800563d 	.word	0x0800563d
 8005598:	080054fb 	.word	0x080054fb
 800559c:	080054fb 	.word	0x080054fb
 80055a0:	080055f3 	.word	0x080055f3
 80055a4:	3b45      	subs	r3, #69	; 0x45
 80055a6:	2b02      	cmp	r3, #2
 80055a8:	d8a7      	bhi.n	80054fa <__ssvfiscanf_r+0xd2>
 80055aa:	2305      	movs	r3, #5
 80055ac:	e02b      	b.n	8005606 <__ssvfiscanf_r+0x1de>
 80055ae:	6863      	ldr	r3, [r4, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	dd0d      	ble.n	80055d0 <__ssvfiscanf_r+0x1a8>
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	781a      	ldrb	r2, [r3, #0]
 80055b8:	4552      	cmp	r2, sl
 80055ba:	f040 80a1 	bne.w	8005700 <__ssvfiscanf_r+0x2d8>
 80055be:	3301      	adds	r3, #1
 80055c0:	6862      	ldr	r2, [r4, #4]
 80055c2:	6023      	str	r3, [r4, #0]
 80055c4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80055c6:	3a01      	subs	r2, #1
 80055c8:	3301      	adds	r3, #1
 80055ca:	6062      	str	r2, [r4, #4]
 80055cc:	9345      	str	r3, [sp, #276]	; 0x114
 80055ce:	e755      	b.n	800547c <__ssvfiscanf_r+0x54>
 80055d0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80055d2:	4621      	mov	r1, r4
 80055d4:	4630      	mov	r0, r6
 80055d6:	4798      	blx	r3
 80055d8:	2800      	cmp	r0, #0
 80055da:	d0eb      	beq.n	80055b4 <__ssvfiscanf_r+0x18c>
 80055dc:	9844      	ldr	r0, [sp, #272]	; 0x110
 80055de:	2800      	cmp	r0, #0
 80055e0:	f040 8084 	bne.w	80056ec <__ssvfiscanf_r+0x2c4>
 80055e4:	f04f 30ff 	mov.w	r0, #4294967295
 80055e8:	e086      	b.n	80056f8 <__ssvfiscanf_r+0x2d0>
 80055ea:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80055ec:	f042 0220 	orr.w	r2, r2, #32
 80055f0:	9241      	str	r2, [sp, #260]	; 0x104
 80055f2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80055f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055f8:	9241      	str	r2, [sp, #260]	; 0x104
 80055fa:	2210      	movs	r2, #16
 80055fc:	2b6f      	cmp	r3, #111	; 0x6f
 80055fe:	9242      	str	r2, [sp, #264]	; 0x108
 8005600:	bf34      	ite	cc
 8005602:	2303      	movcc	r3, #3
 8005604:	2304      	movcs	r3, #4
 8005606:	9347      	str	r3, [sp, #284]	; 0x11c
 8005608:	6863      	ldr	r3, [r4, #4]
 800560a:	2b00      	cmp	r3, #0
 800560c:	dd41      	ble.n	8005692 <__ssvfiscanf_r+0x26a>
 800560e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005610:	0659      	lsls	r1, r3, #25
 8005612:	d404      	bmi.n	800561e <__ssvfiscanf_r+0x1f6>
 8005614:	6823      	ldr	r3, [r4, #0]
 8005616:	781a      	ldrb	r2, [r3, #0]
 8005618:	5cba      	ldrb	r2, [r7, r2]
 800561a:	0712      	lsls	r2, r2, #28
 800561c:	d440      	bmi.n	80056a0 <__ssvfiscanf_r+0x278>
 800561e:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005620:	2b02      	cmp	r3, #2
 8005622:	dc4f      	bgt.n	80056c4 <__ssvfiscanf_r+0x29c>
 8005624:	466b      	mov	r3, sp
 8005626:	4622      	mov	r2, r4
 8005628:	a941      	add	r1, sp, #260	; 0x104
 800562a:	4630      	mov	r0, r6
 800562c:	f000 fa08 	bl	8005a40 <_scanf_chars>
 8005630:	2801      	cmp	r0, #1
 8005632:	d065      	beq.n	8005700 <__ssvfiscanf_r+0x2d8>
 8005634:	2802      	cmp	r0, #2
 8005636:	f47f af21 	bne.w	800547c <__ssvfiscanf_r+0x54>
 800563a:	e7cf      	b.n	80055dc <__ssvfiscanf_r+0x1b4>
 800563c:	220a      	movs	r2, #10
 800563e:	e7dd      	b.n	80055fc <__ssvfiscanf_r+0x1d4>
 8005640:	2300      	movs	r3, #0
 8005642:	9342      	str	r3, [sp, #264]	; 0x108
 8005644:	2303      	movs	r3, #3
 8005646:	e7de      	b.n	8005606 <__ssvfiscanf_r+0x1de>
 8005648:	2308      	movs	r3, #8
 800564a:	9342      	str	r3, [sp, #264]	; 0x108
 800564c:	2304      	movs	r3, #4
 800564e:	e7da      	b.n	8005606 <__ssvfiscanf_r+0x1de>
 8005650:	4629      	mov	r1, r5
 8005652:	4640      	mov	r0, r8
 8005654:	f000 fb40 	bl	8005cd8 <__sccl>
 8005658:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800565a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800565e:	9341      	str	r3, [sp, #260]	; 0x104
 8005660:	4605      	mov	r5, r0
 8005662:	2301      	movs	r3, #1
 8005664:	e7cf      	b.n	8005606 <__ssvfiscanf_r+0x1de>
 8005666:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800566c:	9341      	str	r3, [sp, #260]	; 0x104
 800566e:	2300      	movs	r3, #0
 8005670:	e7c9      	b.n	8005606 <__ssvfiscanf_r+0x1de>
 8005672:	2302      	movs	r3, #2
 8005674:	e7c7      	b.n	8005606 <__ssvfiscanf_r+0x1de>
 8005676:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005678:	06c3      	lsls	r3, r0, #27
 800567a:	f53f aeff 	bmi.w	800547c <__ssvfiscanf_r+0x54>
 800567e:	9b00      	ldr	r3, [sp, #0]
 8005680:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005682:	1d19      	adds	r1, r3, #4
 8005684:	9100      	str	r1, [sp, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	07c0      	lsls	r0, r0, #31
 800568a:	bf4c      	ite	mi
 800568c:	801a      	strhmi	r2, [r3, #0]
 800568e:	601a      	strpl	r2, [r3, #0]
 8005690:	e6f4      	b.n	800547c <__ssvfiscanf_r+0x54>
 8005692:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005694:	4621      	mov	r1, r4
 8005696:	4630      	mov	r0, r6
 8005698:	4798      	blx	r3
 800569a:	2800      	cmp	r0, #0
 800569c:	d0b7      	beq.n	800560e <__ssvfiscanf_r+0x1e6>
 800569e:	e79d      	b.n	80055dc <__ssvfiscanf_r+0x1b4>
 80056a0:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80056a2:	3201      	adds	r2, #1
 80056a4:	9245      	str	r2, [sp, #276]	; 0x114
 80056a6:	6862      	ldr	r2, [r4, #4]
 80056a8:	3a01      	subs	r2, #1
 80056aa:	2a00      	cmp	r2, #0
 80056ac:	6062      	str	r2, [r4, #4]
 80056ae:	dd02      	ble.n	80056b6 <__ssvfiscanf_r+0x28e>
 80056b0:	3301      	adds	r3, #1
 80056b2:	6023      	str	r3, [r4, #0]
 80056b4:	e7ae      	b.n	8005614 <__ssvfiscanf_r+0x1ec>
 80056b6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80056b8:	4621      	mov	r1, r4
 80056ba:	4630      	mov	r0, r6
 80056bc:	4798      	blx	r3
 80056be:	2800      	cmp	r0, #0
 80056c0:	d0a8      	beq.n	8005614 <__ssvfiscanf_r+0x1ec>
 80056c2:	e78b      	b.n	80055dc <__ssvfiscanf_r+0x1b4>
 80056c4:	2b04      	cmp	r3, #4
 80056c6:	dc06      	bgt.n	80056d6 <__ssvfiscanf_r+0x2ae>
 80056c8:	466b      	mov	r3, sp
 80056ca:	4622      	mov	r2, r4
 80056cc:	a941      	add	r1, sp, #260	; 0x104
 80056ce:	4630      	mov	r0, r6
 80056d0:	f000 fa0e 	bl	8005af0 <_scanf_i>
 80056d4:	e7ac      	b.n	8005630 <__ssvfiscanf_r+0x208>
 80056d6:	4b0f      	ldr	r3, [pc, #60]	; (8005714 <__ssvfiscanf_r+0x2ec>)
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f43f aecf 	beq.w	800547c <__ssvfiscanf_r+0x54>
 80056de:	466b      	mov	r3, sp
 80056e0:	4622      	mov	r2, r4
 80056e2:	a941      	add	r1, sp, #260	; 0x104
 80056e4:	4630      	mov	r0, r6
 80056e6:	f3af 8000 	nop.w
 80056ea:	e7a1      	b.n	8005630 <__ssvfiscanf_r+0x208>
 80056ec:	89a3      	ldrh	r3, [r4, #12]
 80056ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 80056f2:	bf18      	it	ne
 80056f4:	f04f 30ff 	movne.w	r0, #4294967295
 80056f8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80056fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005700:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005702:	e7f9      	b.n	80056f8 <__ssvfiscanf_r+0x2d0>
 8005704:	08005375 	.word	0x08005375
 8005708:	080053ef 	.word	0x080053ef
 800570c:	08006343 	.word	0x08006343
 8005710:	080062fa 	.word	0x080062fa
 8005714:	00000000 	.word	0x00000000

08005718 <_printf_common>:
 8005718:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800571c:	4616      	mov	r6, r2
 800571e:	4699      	mov	r9, r3
 8005720:	688a      	ldr	r2, [r1, #8]
 8005722:	690b      	ldr	r3, [r1, #16]
 8005724:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005728:	4293      	cmp	r3, r2
 800572a:	bfb8      	it	lt
 800572c:	4613      	movlt	r3, r2
 800572e:	6033      	str	r3, [r6, #0]
 8005730:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005734:	4607      	mov	r7, r0
 8005736:	460c      	mov	r4, r1
 8005738:	b10a      	cbz	r2, 800573e <_printf_common+0x26>
 800573a:	3301      	adds	r3, #1
 800573c:	6033      	str	r3, [r6, #0]
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	0699      	lsls	r1, r3, #26
 8005742:	bf42      	ittt	mi
 8005744:	6833      	ldrmi	r3, [r6, #0]
 8005746:	3302      	addmi	r3, #2
 8005748:	6033      	strmi	r3, [r6, #0]
 800574a:	6825      	ldr	r5, [r4, #0]
 800574c:	f015 0506 	ands.w	r5, r5, #6
 8005750:	d106      	bne.n	8005760 <_printf_common+0x48>
 8005752:	f104 0a19 	add.w	sl, r4, #25
 8005756:	68e3      	ldr	r3, [r4, #12]
 8005758:	6832      	ldr	r2, [r6, #0]
 800575a:	1a9b      	subs	r3, r3, r2
 800575c:	42ab      	cmp	r3, r5
 800575e:	dc26      	bgt.n	80057ae <_printf_common+0x96>
 8005760:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005764:	1e13      	subs	r3, r2, #0
 8005766:	6822      	ldr	r2, [r4, #0]
 8005768:	bf18      	it	ne
 800576a:	2301      	movne	r3, #1
 800576c:	0692      	lsls	r2, r2, #26
 800576e:	d42b      	bmi.n	80057c8 <_printf_common+0xb0>
 8005770:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005774:	4649      	mov	r1, r9
 8005776:	4638      	mov	r0, r7
 8005778:	47c0      	blx	r8
 800577a:	3001      	adds	r0, #1
 800577c:	d01e      	beq.n	80057bc <_printf_common+0xa4>
 800577e:	6823      	ldr	r3, [r4, #0]
 8005780:	68e5      	ldr	r5, [r4, #12]
 8005782:	6832      	ldr	r2, [r6, #0]
 8005784:	f003 0306 	and.w	r3, r3, #6
 8005788:	2b04      	cmp	r3, #4
 800578a:	bf08      	it	eq
 800578c:	1aad      	subeq	r5, r5, r2
 800578e:	68a3      	ldr	r3, [r4, #8]
 8005790:	6922      	ldr	r2, [r4, #16]
 8005792:	bf0c      	ite	eq
 8005794:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005798:	2500      	movne	r5, #0
 800579a:	4293      	cmp	r3, r2
 800579c:	bfc4      	itt	gt
 800579e:	1a9b      	subgt	r3, r3, r2
 80057a0:	18ed      	addgt	r5, r5, r3
 80057a2:	2600      	movs	r6, #0
 80057a4:	341a      	adds	r4, #26
 80057a6:	42b5      	cmp	r5, r6
 80057a8:	d11a      	bne.n	80057e0 <_printf_common+0xc8>
 80057aa:	2000      	movs	r0, #0
 80057ac:	e008      	b.n	80057c0 <_printf_common+0xa8>
 80057ae:	2301      	movs	r3, #1
 80057b0:	4652      	mov	r2, sl
 80057b2:	4649      	mov	r1, r9
 80057b4:	4638      	mov	r0, r7
 80057b6:	47c0      	blx	r8
 80057b8:	3001      	adds	r0, #1
 80057ba:	d103      	bne.n	80057c4 <_printf_common+0xac>
 80057bc:	f04f 30ff 	mov.w	r0, #4294967295
 80057c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057c4:	3501      	adds	r5, #1
 80057c6:	e7c6      	b.n	8005756 <_printf_common+0x3e>
 80057c8:	18e1      	adds	r1, r4, r3
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	2030      	movs	r0, #48	; 0x30
 80057ce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057d2:	4422      	add	r2, r4
 80057d4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057d8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057dc:	3302      	adds	r3, #2
 80057de:	e7c7      	b.n	8005770 <_printf_common+0x58>
 80057e0:	2301      	movs	r3, #1
 80057e2:	4622      	mov	r2, r4
 80057e4:	4649      	mov	r1, r9
 80057e6:	4638      	mov	r0, r7
 80057e8:	47c0      	blx	r8
 80057ea:	3001      	adds	r0, #1
 80057ec:	d0e6      	beq.n	80057bc <_printf_common+0xa4>
 80057ee:	3601      	adds	r6, #1
 80057f0:	e7d9      	b.n	80057a6 <_printf_common+0x8e>
	...

080057f4 <_printf_i>:
 80057f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057f8:	460c      	mov	r4, r1
 80057fa:	4691      	mov	r9, r2
 80057fc:	7e27      	ldrb	r7, [r4, #24]
 80057fe:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005800:	2f78      	cmp	r7, #120	; 0x78
 8005802:	4680      	mov	r8, r0
 8005804:	469a      	mov	sl, r3
 8005806:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800580a:	d807      	bhi.n	800581c <_printf_i+0x28>
 800580c:	2f62      	cmp	r7, #98	; 0x62
 800580e:	d80a      	bhi.n	8005826 <_printf_i+0x32>
 8005810:	2f00      	cmp	r7, #0
 8005812:	f000 80d8 	beq.w	80059c6 <_printf_i+0x1d2>
 8005816:	2f58      	cmp	r7, #88	; 0x58
 8005818:	f000 80a3 	beq.w	8005962 <_printf_i+0x16e>
 800581c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005820:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005824:	e03a      	b.n	800589c <_printf_i+0xa8>
 8005826:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800582a:	2b15      	cmp	r3, #21
 800582c:	d8f6      	bhi.n	800581c <_printf_i+0x28>
 800582e:	a001      	add	r0, pc, #4	; (adr r0, 8005834 <_printf_i+0x40>)
 8005830:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005834:	0800588d 	.word	0x0800588d
 8005838:	080058a1 	.word	0x080058a1
 800583c:	0800581d 	.word	0x0800581d
 8005840:	0800581d 	.word	0x0800581d
 8005844:	0800581d 	.word	0x0800581d
 8005848:	0800581d 	.word	0x0800581d
 800584c:	080058a1 	.word	0x080058a1
 8005850:	0800581d 	.word	0x0800581d
 8005854:	0800581d 	.word	0x0800581d
 8005858:	0800581d 	.word	0x0800581d
 800585c:	0800581d 	.word	0x0800581d
 8005860:	080059ad 	.word	0x080059ad
 8005864:	080058d1 	.word	0x080058d1
 8005868:	0800598f 	.word	0x0800598f
 800586c:	0800581d 	.word	0x0800581d
 8005870:	0800581d 	.word	0x0800581d
 8005874:	080059cf 	.word	0x080059cf
 8005878:	0800581d 	.word	0x0800581d
 800587c:	080058d1 	.word	0x080058d1
 8005880:	0800581d 	.word	0x0800581d
 8005884:	0800581d 	.word	0x0800581d
 8005888:	08005997 	.word	0x08005997
 800588c:	680b      	ldr	r3, [r1, #0]
 800588e:	1d1a      	adds	r2, r3, #4
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	600a      	str	r2, [r1, #0]
 8005894:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005898:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800589c:	2301      	movs	r3, #1
 800589e:	e0a3      	b.n	80059e8 <_printf_i+0x1f4>
 80058a0:	6825      	ldr	r5, [r4, #0]
 80058a2:	6808      	ldr	r0, [r1, #0]
 80058a4:	062e      	lsls	r6, r5, #24
 80058a6:	f100 0304 	add.w	r3, r0, #4
 80058aa:	d50a      	bpl.n	80058c2 <_printf_i+0xce>
 80058ac:	6805      	ldr	r5, [r0, #0]
 80058ae:	600b      	str	r3, [r1, #0]
 80058b0:	2d00      	cmp	r5, #0
 80058b2:	da03      	bge.n	80058bc <_printf_i+0xc8>
 80058b4:	232d      	movs	r3, #45	; 0x2d
 80058b6:	426d      	negs	r5, r5
 80058b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058bc:	485e      	ldr	r0, [pc, #376]	; (8005a38 <_printf_i+0x244>)
 80058be:	230a      	movs	r3, #10
 80058c0:	e019      	b.n	80058f6 <_printf_i+0x102>
 80058c2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80058c6:	6805      	ldr	r5, [r0, #0]
 80058c8:	600b      	str	r3, [r1, #0]
 80058ca:	bf18      	it	ne
 80058cc:	b22d      	sxthne	r5, r5
 80058ce:	e7ef      	b.n	80058b0 <_printf_i+0xbc>
 80058d0:	680b      	ldr	r3, [r1, #0]
 80058d2:	6825      	ldr	r5, [r4, #0]
 80058d4:	1d18      	adds	r0, r3, #4
 80058d6:	6008      	str	r0, [r1, #0]
 80058d8:	0628      	lsls	r0, r5, #24
 80058da:	d501      	bpl.n	80058e0 <_printf_i+0xec>
 80058dc:	681d      	ldr	r5, [r3, #0]
 80058de:	e002      	b.n	80058e6 <_printf_i+0xf2>
 80058e0:	0669      	lsls	r1, r5, #25
 80058e2:	d5fb      	bpl.n	80058dc <_printf_i+0xe8>
 80058e4:	881d      	ldrh	r5, [r3, #0]
 80058e6:	4854      	ldr	r0, [pc, #336]	; (8005a38 <_printf_i+0x244>)
 80058e8:	2f6f      	cmp	r7, #111	; 0x6f
 80058ea:	bf0c      	ite	eq
 80058ec:	2308      	moveq	r3, #8
 80058ee:	230a      	movne	r3, #10
 80058f0:	2100      	movs	r1, #0
 80058f2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058f6:	6866      	ldr	r6, [r4, #4]
 80058f8:	60a6      	str	r6, [r4, #8]
 80058fa:	2e00      	cmp	r6, #0
 80058fc:	bfa2      	ittt	ge
 80058fe:	6821      	ldrge	r1, [r4, #0]
 8005900:	f021 0104 	bicge.w	r1, r1, #4
 8005904:	6021      	strge	r1, [r4, #0]
 8005906:	b90d      	cbnz	r5, 800590c <_printf_i+0x118>
 8005908:	2e00      	cmp	r6, #0
 800590a:	d04d      	beq.n	80059a8 <_printf_i+0x1b4>
 800590c:	4616      	mov	r6, r2
 800590e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005912:	fb03 5711 	mls	r7, r3, r1, r5
 8005916:	5dc7      	ldrb	r7, [r0, r7]
 8005918:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800591c:	462f      	mov	r7, r5
 800591e:	42bb      	cmp	r3, r7
 8005920:	460d      	mov	r5, r1
 8005922:	d9f4      	bls.n	800590e <_printf_i+0x11a>
 8005924:	2b08      	cmp	r3, #8
 8005926:	d10b      	bne.n	8005940 <_printf_i+0x14c>
 8005928:	6823      	ldr	r3, [r4, #0]
 800592a:	07df      	lsls	r7, r3, #31
 800592c:	d508      	bpl.n	8005940 <_printf_i+0x14c>
 800592e:	6923      	ldr	r3, [r4, #16]
 8005930:	6861      	ldr	r1, [r4, #4]
 8005932:	4299      	cmp	r1, r3
 8005934:	bfde      	ittt	le
 8005936:	2330      	movle	r3, #48	; 0x30
 8005938:	f806 3c01 	strble.w	r3, [r6, #-1]
 800593c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005940:	1b92      	subs	r2, r2, r6
 8005942:	6122      	str	r2, [r4, #16]
 8005944:	f8cd a000 	str.w	sl, [sp]
 8005948:	464b      	mov	r3, r9
 800594a:	aa03      	add	r2, sp, #12
 800594c:	4621      	mov	r1, r4
 800594e:	4640      	mov	r0, r8
 8005950:	f7ff fee2 	bl	8005718 <_printf_common>
 8005954:	3001      	adds	r0, #1
 8005956:	d14c      	bne.n	80059f2 <_printf_i+0x1fe>
 8005958:	f04f 30ff 	mov.w	r0, #4294967295
 800595c:	b004      	add	sp, #16
 800595e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005962:	4835      	ldr	r0, [pc, #212]	; (8005a38 <_printf_i+0x244>)
 8005964:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005968:	6823      	ldr	r3, [r4, #0]
 800596a:	680e      	ldr	r6, [r1, #0]
 800596c:	061f      	lsls	r7, r3, #24
 800596e:	f856 5b04 	ldr.w	r5, [r6], #4
 8005972:	600e      	str	r6, [r1, #0]
 8005974:	d514      	bpl.n	80059a0 <_printf_i+0x1ac>
 8005976:	07d9      	lsls	r1, r3, #31
 8005978:	bf44      	itt	mi
 800597a:	f043 0320 	orrmi.w	r3, r3, #32
 800597e:	6023      	strmi	r3, [r4, #0]
 8005980:	b91d      	cbnz	r5, 800598a <_printf_i+0x196>
 8005982:	6823      	ldr	r3, [r4, #0]
 8005984:	f023 0320 	bic.w	r3, r3, #32
 8005988:	6023      	str	r3, [r4, #0]
 800598a:	2310      	movs	r3, #16
 800598c:	e7b0      	b.n	80058f0 <_printf_i+0xfc>
 800598e:	6823      	ldr	r3, [r4, #0]
 8005990:	f043 0320 	orr.w	r3, r3, #32
 8005994:	6023      	str	r3, [r4, #0]
 8005996:	2378      	movs	r3, #120	; 0x78
 8005998:	4828      	ldr	r0, [pc, #160]	; (8005a3c <_printf_i+0x248>)
 800599a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800599e:	e7e3      	b.n	8005968 <_printf_i+0x174>
 80059a0:	065e      	lsls	r6, r3, #25
 80059a2:	bf48      	it	mi
 80059a4:	b2ad      	uxthmi	r5, r5
 80059a6:	e7e6      	b.n	8005976 <_printf_i+0x182>
 80059a8:	4616      	mov	r6, r2
 80059aa:	e7bb      	b.n	8005924 <_printf_i+0x130>
 80059ac:	680b      	ldr	r3, [r1, #0]
 80059ae:	6826      	ldr	r6, [r4, #0]
 80059b0:	6960      	ldr	r0, [r4, #20]
 80059b2:	1d1d      	adds	r5, r3, #4
 80059b4:	600d      	str	r5, [r1, #0]
 80059b6:	0635      	lsls	r5, r6, #24
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	d501      	bpl.n	80059c0 <_printf_i+0x1cc>
 80059bc:	6018      	str	r0, [r3, #0]
 80059be:	e002      	b.n	80059c6 <_printf_i+0x1d2>
 80059c0:	0671      	lsls	r1, r6, #25
 80059c2:	d5fb      	bpl.n	80059bc <_printf_i+0x1c8>
 80059c4:	8018      	strh	r0, [r3, #0]
 80059c6:	2300      	movs	r3, #0
 80059c8:	6123      	str	r3, [r4, #16]
 80059ca:	4616      	mov	r6, r2
 80059cc:	e7ba      	b.n	8005944 <_printf_i+0x150>
 80059ce:	680b      	ldr	r3, [r1, #0]
 80059d0:	1d1a      	adds	r2, r3, #4
 80059d2:	600a      	str	r2, [r1, #0]
 80059d4:	681e      	ldr	r6, [r3, #0]
 80059d6:	6862      	ldr	r2, [r4, #4]
 80059d8:	2100      	movs	r1, #0
 80059da:	4630      	mov	r0, r6
 80059dc:	f7fa fc00 	bl	80001e0 <memchr>
 80059e0:	b108      	cbz	r0, 80059e6 <_printf_i+0x1f2>
 80059e2:	1b80      	subs	r0, r0, r6
 80059e4:	6060      	str	r0, [r4, #4]
 80059e6:	6863      	ldr	r3, [r4, #4]
 80059e8:	6123      	str	r3, [r4, #16]
 80059ea:	2300      	movs	r3, #0
 80059ec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059f0:	e7a8      	b.n	8005944 <_printf_i+0x150>
 80059f2:	6923      	ldr	r3, [r4, #16]
 80059f4:	4632      	mov	r2, r6
 80059f6:	4649      	mov	r1, r9
 80059f8:	4640      	mov	r0, r8
 80059fa:	47d0      	blx	sl
 80059fc:	3001      	adds	r0, #1
 80059fe:	d0ab      	beq.n	8005958 <_printf_i+0x164>
 8005a00:	6823      	ldr	r3, [r4, #0]
 8005a02:	079b      	lsls	r3, r3, #30
 8005a04:	d413      	bmi.n	8005a2e <_printf_i+0x23a>
 8005a06:	68e0      	ldr	r0, [r4, #12]
 8005a08:	9b03      	ldr	r3, [sp, #12]
 8005a0a:	4298      	cmp	r0, r3
 8005a0c:	bfb8      	it	lt
 8005a0e:	4618      	movlt	r0, r3
 8005a10:	e7a4      	b.n	800595c <_printf_i+0x168>
 8005a12:	2301      	movs	r3, #1
 8005a14:	4632      	mov	r2, r6
 8005a16:	4649      	mov	r1, r9
 8005a18:	4640      	mov	r0, r8
 8005a1a:	47d0      	blx	sl
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d09b      	beq.n	8005958 <_printf_i+0x164>
 8005a20:	3501      	adds	r5, #1
 8005a22:	68e3      	ldr	r3, [r4, #12]
 8005a24:	9903      	ldr	r1, [sp, #12]
 8005a26:	1a5b      	subs	r3, r3, r1
 8005a28:	42ab      	cmp	r3, r5
 8005a2a:	dcf2      	bgt.n	8005a12 <_printf_i+0x21e>
 8005a2c:	e7eb      	b.n	8005a06 <_printf_i+0x212>
 8005a2e:	2500      	movs	r5, #0
 8005a30:	f104 0619 	add.w	r6, r4, #25
 8005a34:	e7f5      	b.n	8005a22 <_printf_i+0x22e>
 8005a36:	bf00      	nop
 8005a38:	08006305 	.word	0x08006305
 8005a3c:	08006316 	.word	0x08006316

08005a40 <_scanf_chars>:
 8005a40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a44:	4615      	mov	r5, r2
 8005a46:	688a      	ldr	r2, [r1, #8]
 8005a48:	4680      	mov	r8, r0
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	b932      	cbnz	r2, 8005a5c <_scanf_chars+0x1c>
 8005a4e:	698a      	ldr	r2, [r1, #24]
 8005a50:	2a00      	cmp	r2, #0
 8005a52:	bf0c      	ite	eq
 8005a54:	2201      	moveq	r2, #1
 8005a56:	f04f 32ff 	movne.w	r2, #4294967295
 8005a5a:	608a      	str	r2, [r1, #8]
 8005a5c:	6822      	ldr	r2, [r4, #0]
 8005a5e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8005aec <_scanf_chars+0xac>
 8005a62:	06d1      	lsls	r1, r2, #27
 8005a64:	bf5f      	itttt	pl
 8005a66:	681a      	ldrpl	r2, [r3, #0]
 8005a68:	1d11      	addpl	r1, r2, #4
 8005a6a:	6019      	strpl	r1, [r3, #0]
 8005a6c:	6816      	ldrpl	r6, [r2, #0]
 8005a6e:	2700      	movs	r7, #0
 8005a70:	69a0      	ldr	r0, [r4, #24]
 8005a72:	b188      	cbz	r0, 8005a98 <_scanf_chars+0x58>
 8005a74:	2801      	cmp	r0, #1
 8005a76:	d107      	bne.n	8005a88 <_scanf_chars+0x48>
 8005a78:	682b      	ldr	r3, [r5, #0]
 8005a7a:	781a      	ldrb	r2, [r3, #0]
 8005a7c:	6963      	ldr	r3, [r4, #20]
 8005a7e:	5c9b      	ldrb	r3, [r3, r2]
 8005a80:	b953      	cbnz	r3, 8005a98 <_scanf_chars+0x58>
 8005a82:	bb27      	cbnz	r7, 8005ace <_scanf_chars+0x8e>
 8005a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a88:	2802      	cmp	r0, #2
 8005a8a:	d120      	bne.n	8005ace <_scanf_chars+0x8e>
 8005a8c:	682b      	ldr	r3, [r5, #0]
 8005a8e:	781b      	ldrb	r3, [r3, #0]
 8005a90:	f813 3009 	ldrb.w	r3, [r3, r9]
 8005a94:	071b      	lsls	r3, r3, #28
 8005a96:	d41a      	bmi.n	8005ace <_scanf_chars+0x8e>
 8005a98:	6823      	ldr	r3, [r4, #0]
 8005a9a:	06da      	lsls	r2, r3, #27
 8005a9c:	bf5e      	ittt	pl
 8005a9e:	682b      	ldrpl	r3, [r5, #0]
 8005aa0:	781b      	ldrbpl	r3, [r3, #0]
 8005aa2:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005aa6:	682a      	ldr	r2, [r5, #0]
 8005aa8:	686b      	ldr	r3, [r5, #4]
 8005aaa:	3201      	adds	r2, #1
 8005aac:	602a      	str	r2, [r5, #0]
 8005aae:	68a2      	ldr	r2, [r4, #8]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	3a01      	subs	r2, #1
 8005ab4:	606b      	str	r3, [r5, #4]
 8005ab6:	3701      	adds	r7, #1
 8005ab8:	60a2      	str	r2, [r4, #8]
 8005aba:	b142      	cbz	r2, 8005ace <_scanf_chars+0x8e>
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	dcd7      	bgt.n	8005a70 <_scanf_chars+0x30>
 8005ac0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005ac4:	4629      	mov	r1, r5
 8005ac6:	4640      	mov	r0, r8
 8005ac8:	4798      	blx	r3
 8005aca:	2800      	cmp	r0, #0
 8005acc:	d0d0      	beq.n	8005a70 <_scanf_chars+0x30>
 8005ace:	6823      	ldr	r3, [r4, #0]
 8005ad0:	f013 0310 	ands.w	r3, r3, #16
 8005ad4:	d105      	bne.n	8005ae2 <_scanf_chars+0xa2>
 8005ad6:	68e2      	ldr	r2, [r4, #12]
 8005ad8:	3201      	adds	r2, #1
 8005ada:	60e2      	str	r2, [r4, #12]
 8005adc:	69a2      	ldr	r2, [r4, #24]
 8005ade:	b102      	cbz	r2, 8005ae2 <_scanf_chars+0xa2>
 8005ae0:	7033      	strb	r3, [r6, #0]
 8005ae2:	6923      	ldr	r3, [r4, #16]
 8005ae4:	441f      	add	r7, r3
 8005ae6:	6127      	str	r7, [r4, #16]
 8005ae8:	2000      	movs	r0, #0
 8005aea:	e7cb      	b.n	8005a84 <_scanf_chars+0x44>
 8005aec:	08006343 	.word	0x08006343

08005af0 <_scanf_i>:
 8005af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af4:	4698      	mov	r8, r3
 8005af6:	4b74      	ldr	r3, [pc, #464]	; (8005cc8 <_scanf_i+0x1d8>)
 8005af8:	460c      	mov	r4, r1
 8005afa:	4682      	mov	sl, r0
 8005afc:	4616      	mov	r6, r2
 8005afe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005b02:	b087      	sub	sp, #28
 8005b04:	ab03      	add	r3, sp, #12
 8005b06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005b0a:	4b70      	ldr	r3, [pc, #448]	; (8005ccc <_scanf_i+0x1dc>)
 8005b0c:	69a1      	ldr	r1, [r4, #24]
 8005b0e:	4a70      	ldr	r2, [pc, #448]	; (8005cd0 <_scanf_i+0x1e0>)
 8005b10:	2903      	cmp	r1, #3
 8005b12:	bf18      	it	ne
 8005b14:	461a      	movne	r2, r3
 8005b16:	68a3      	ldr	r3, [r4, #8]
 8005b18:	9201      	str	r2, [sp, #4]
 8005b1a:	1e5a      	subs	r2, r3, #1
 8005b1c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005b20:	bf88      	it	hi
 8005b22:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005b26:	4627      	mov	r7, r4
 8005b28:	bf82      	ittt	hi
 8005b2a:	eb03 0905 	addhi.w	r9, r3, r5
 8005b2e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005b32:	60a3      	strhi	r3, [r4, #8]
 8005b34:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005b38:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005b3c:	bf98      	it	ls
 8005b3e:	f04f 0900 	movls.w	r9, #0
 8005b42:	6023      	str	r3, [r4, #0]
 8005b44:	463d      	mov	r5, r7
 8005b46:	f04f 0b00 	mov.w	fp, #0
 8005b4a:	6831      	ldr	r1, [r6, #0]
 8005b4c:	ab03      	add	r3, sp, #12
 8005b4e:	7809      	ldrb	r1, [r1, #0]
 8005b50:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005b54:	2202      	movs	r2, #2
 8005b56:	f7fa fb43 	bl	80001e0 <memchr>
 8005b5a:	b328      	cbz	r0, 8005ba8 <_scanf_i+0xb8>
 8005b5c:	f1bb 0f01 	cmp.w	fp, #1
 8005b60:	d159      	bne.n	8005c16 <_scanf_i+0x126>
 8005b62:	6862      	ldr	r2, [r4, #4]
 8005b64:	b92a      	cbnz	r2, 8005b72 <_scanf_i+0x82>
 8005b66:	6822      	ldr	r2, [r4, #0]
 8005b68:	2308      	movs	r3, #8
 8005b6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b6e:	6063      	str	r3, [r4, #4]
 8005b70:	6022      	str	r2, [r4, #0]
 8005b72:	6822      	ldr	r2, [r4, #0]
 8005b74:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005b78:	6022      	str	r2, [r4, #0]
 8005b7a:	68a2      	ldr	r2, [r4, #8]
 8005b7c:	1e51      	subs	r1, r2, #1
 8005b7e:	60a1      	str	r1, [r4, #8]
 8005b80:	b192      	cbz	r2, 8005ba8 <_scanf_i+0xb8>
 8005b82:	6832      	ldr	r2, [r6, #0]
 8005b84:	1c51      	adds	r1, r2, #1
 8005b86:	6031      	str	r1, [r6, #0]
 8005b88:	7812      	ldrb	r2, [r2, #0]
 8005b8a:	f805 2b01 	strb.w	r2, [r5], #1
 8005b8e:	6872      	ldr	r2, [r6, #4]
 8005b90:	3a01      	subs	r2, #1
 8005b92:	2a00      	cmp	r2, #0
 8005b94:	6072      	str	r2, [r6, #4]
 8005b96:	dc07      	bgt.n	8005ba8 <_scanf_i+0xb8>
 8005b98:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005b9c:	4631      	mov	r1, r6
 8005b9e:	4650      	mov	r0, sl
 8005ba0:	4790      	blx	r2
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	f040 8085 	bne.w	8005cb2 <_scanf_i+0x1c2>
 8005ba8:	f10b 0b01 	add.w	fp, fp, #1
 8005bac:	f1bb 0f03 	cmp.w	fp, #3
 8005bb0:	d1cb      	bne.n	8005b4a <_scanf_i+0x5a>
 8005bb2:	6863      	ldr	r3, [r4, #4]
 8005bb4:	b90b      	cbnz	r3, 8005bba <_scanf_i+0xca>
 8005bb6:	230a      	movs	r3, #10
 8005bb8:	6063      	str	r3, [r4, #4]
 8005bba:	6863      	ldr	r3, [r4, #4]
 8005bbc:	4945      	ldr	r1, [pc, #276]	; (8005cd4 <_scanf_i+0x1e4>)
 8005bbe:	6960      	ldr	r0, [r4, #20]
 8005bc0:	1ac9      	subs	r1, r1, r3
 8005bc2:	f000 f889 	bl	8005cd8 <__sccl>
 8005bc6:	f04f 0b00 	mov.w	fp, #0
 8005bca:	68a3      	ldr	r3, [r4, #8]
 8005bcc:	6822      	ldr	r2, [r4, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d03d      	beq.n	8005c4e <_scanf_i+0x15e>
 8005bd2:	6831      	ldr	r1, [r6, #0]
 8005bd4:	6960      	ldr	r0, [r4, #20]
 8005bd6:	f891 c000 	ldrb.w	ip, [r1]
 8005bda:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d035      	beq.n	8005c4e <_scanf_i+0x15e>
 8005be2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005be6:	d124      	bne.n	8005c32 <_scanf_i+0x142>
 8005be8:	0510      	lsls	r0, r2, #20
 8005bea:	d522      	bpl.n	8005c32 <_scanf_i+0x142>
 8005bec:	f10b 0b01 	add.w	fp, fp, #1
 8005bf0:	f1b9 0f00 	cmp.w	r9, #0
 8005bf4:	d003      	beq.n	8005bfe <_scanf_i+0x10e>
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	f109 39ff 	add.w	r9, r9, #4294967295
 8005bfc:	60a3      	str	r3, [r4, #8]
 8005bfe:	6873      	ldr	r3, [r6, #4]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	6073      	str	r3, [r6, #4]
 8005c06:	dd1b      	ble.n	8005c40 <_scanf_i+0x150>
 8005c08:	6833      	ldr	r3, [r6, #0]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	6033      	str	r3, [r6, #0]
 8005c0e:	68a3      	ldr	r3, [r4, #8]
 8005c10:	3b01      	subs	r3, #1
 8005c12:	60a3      	str	r3, [r4, #8]
 8005c14:	e7d9      	b.n	8005bca <_scanf_i+0xda>
 8005c16:	f1bb 0f02 	cmp.w	fp, #2
 8005c1a:	d1ae      	bne.n	8005b7a <_scanf_i+0x8a>
 8005c1c:	6822      	ldr	r2, [r4, #0]
 8005c1e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005c22:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005c26:	d1bf      	bne.n	8005ba8 <_scanf_i+0xb8>
 8005c28:	2310      	movs	r3, #16
 8005c2a:	6063      	str	r3, [r4, #4]
 8005c2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c30:	e7a2      	b.n	8005b78 <_scanf_i+0x88>
 8005c32:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005c36:	6022      	str	r2, [r4, #0]
 8005c38:	780b      	ldrb	r3, [r1, #0]
 8005c3a:	f805 3b01 	strb.w	r3, [r5], #1
 8005c3e:	e7de      	b.n	8005bfe <_scanf_i+0x10e>
 8005c40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005c44:	4631      	mov	r1, r6
 8005c46:	4650      	mov	r0, sl
 8005c48:	4798      	blx	r3
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	d0df      	beq.n	8005c0e <_scanf_i+0x11e>
 8005c4e:	6823      	ldr	r3, [r4, #0]
 8005c50:	05d9      	lsls	r1, r3, #23
 8005c52:	d50d      	bpl.n	8005c70 <_scanf_i+0x180>
 8005c54:	42bd      	cmp	r5, r7
 8005c56:	d909      	bls.n	8005c6c <_scanf_i+0x17c>
 8005c58:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005c5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005c60:	4632      	mov	r2, r6
 8005c62:	4650      	mov	r0, sl
 8005c64:	4798      	blx	r3
 8005c66:	f105 39ff 	add.w	r9, r5, #4294967295
 8005c6a:	464d      	mov	r5, r9
 8005c6c:	42bd      	cmp	r5, r7
 8005c6e:	d028      	beq.n	8005cc2 <_scanf_i+0x1d2>
 8005c70:	6822      	ldr	r2, [r4, #0]
 8005c72:	f012 0210 	ands.w	r2, r2, #16
 8005c76:	d113      	bne.n	8005ca0 <_scanf_i+0x1b0>
 8005c78:	702a      	strb	r2, [r5, #0]
 8005c7a:	6863      	ldr	r3, [r4, #4]
 8005c7c:	9e01      	ldr	r6, [sp, #4]
 8005c7e:	4639      	mov	r1, r7
 8005c80:	4650      	mov	r0, sl
 8005c82:	47b0      	blx	r6
 8005c84:	f8d8 3000 	ldr.w	r3, [r8]
 8005c88:	6821      	ldr	r1, [r4, #0]
 8005c8a:	1d1a      	adds	r2, r3, #4
 8005c8c:	f8c8 2000 	str.w	r2, [r8]
 8005c90:	f011 0f20 	tst.w	r1, #32
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	d00f      	beq.n	8005cb8 <_scanf_i+0x1c8>
 8005c98:	6018      	str	r0, [r3, #0]
 8005c9a:	68e3      	ldr	r3, [r4, #12]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	60e3      	str	r3, [r4, #12]
 8005ca0:	1bed      	subs	r5, r5, r7
 8005ca2:	44ab      	add	fp, r5
 8005ca4:	6925      	ldr	r5, [r4, #16]
 8005ca6:	445d      	add	r5, fp
 8005ca8:	6125      	str	r5, [r4, #16]
 8005caa:	2000      	movs	r0, #0
 8005cac:	b007      	add	sp, #28
 8005cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cb2:	f04f 0b00 	mov.w	fp, #0
 8005cb6:	e7ca      	b.n	8005c4e <_scanf_i+0x15e>
 8005cb8:	07ca      	lsls	r2, r1, #31
 8005cba:	bf4c      	ite	mi
 8005cbc:	8018      	strhmi	r0, [r3, #0]
 8005cbe:	6018      	strpl	r0, [r3, #0]
 8005cc0:	e7eb      	b.n	8005c9a <_scanf_i+0x1aa>
 8005cc2:	2001      	movs	r0, #1
 8005cc4:	e7f2      	b.n	8005cac <_scanf_i+0x1bc>
 8005cc6:	bf00      	nop
 8005cc8:	080062a0 	.word	0x080062a0
 8005ccc:	08005f51 	.word	0x08005f51
 8005cd0:	08005e55 	.word	0x08005e55
 8005cd4:	08006340 	.word	0x08006340

08005cd8 <__sccl>:
 8005cd8:	b570      	push	{r4, r5, r6, lr}
 8005cda:	780b      	ldrb	r3, [r1, #0]
 8005cdc:	4604      	mov	r4, r0
 8005cde:	2b5e      	cmp	r3, #94	; 0x5e
 8005ce0:	bf0b      	itete	eq
 8005ce2:	784b      	ldrbeq	r3, [r1, #1]
 8005ce4:	1c48      	addne	r0, r1, #1
 8005ce6:	1c88      	addeq	r0, r1, #2
 8005ce8:	2200      	movne	r2, #0
 8005cea:	bf08      	it	eq
 8005cec:	2201      	moveq	r2, #1
 8005cee:	1e61      	subs	r1, r4, #1
 8005cf0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005cf4:	f801 2f01 	strb.w	r2, [r1, #1]!
 8005cf8:	42a9      	cmp	r1, r5
 8005cfa:	d1fb      	bne.n	8005cf4 <__sccl+0x1c>
 8005cfc:	b90b      	cbnz	r3, 8005d02 <__sccl+0x2a>
 8005cfe:	3801      	subs	r0, #1
 8005d00:	bd70      	pop	{r4, r5, r6, pc}
 8005d02:	f082 0101 	eor.w	r1, r2, #1
 8005d06:	54e1      	strb	r1, [r4, r3]
 8005d08:	1c42      	adds	r2, r0, #1
 8005d0a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8005d0e:	2d2d      	cmp	r5, #45	; 0x2d
 8005d10:	f102 36ff 	add.w	r6, r2, #4294967295
 8005d14:	4610      	mov	r0, r2
 8005d16:	d006      	beq.n	8005d26 <__sccl+0x4e>
 8005d18:	2d5d      	cmp	r5, #93	; 0x5d
 8005d1a:	d0f1      	beq.n	8005d00 <__sccl+0x28>
 8005d1c:	b90d      	cbnz	r5, 8005d22 <__sccl+0x4a>
 8005d1e:	4630      	mov	r0, r6
 8005d20:	e7ee      	b.n	8005d00 <__sccl+0x28>
 8005d22:	462b      	mov	r3, r5
 8005d24:	e7ef      	b.n	8005d06 <__sccl+0x2e>
 8005d26:	7816      	ldrb	r6, [r2, #0]
 8005d28:	2e5d      	cmp	r6, #93	; 0x5d
 8005d2a:	d0fa      	beq.n	8005d22 <__sccl+0x4a>
 8005d2c:	42b3      	cmp	r3, r6
 8005d2e:	dcf8      	bgt.n	8005d22 <__sccl+0x4a>
 8005d30:	4618      	mov	r0, r3
 8005d32:	3001      	adds	r0, #1
 8005d34:	4286      	cmp	r6, r0
 8005d36:	5421      	strb	r1, [r4, r0]
 8005d38:	dcfb      	bgt.n	8005d32 <__sccl+0x5a>
 8005d3a:	43d8      	mvns	r0, r3
 8005d3c:	4430      	add	r0, r6
 8005d3e:	1c5d      	adds	r5, r3, #1
 8005d40:	42b3      	cmp	r3, r6
 8005d42:	bfa8      	it	ge
 8005d44:	2000      	movge	r0, #0
 8005d46:	182b      	adds	r3, r5, r0
 8005d48:	3202      	adds	r2, #2
 8005d4a:	e7de      	b.n	8005d0a <__sccl+0x32>

08005d4c <_strtol_l.isra.0>:
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d52:	d001      	beq.n	8005d58 <_strtol_l.isra.0+0xc>
 8005d54:	2b24      	cmp	r3, #36	; 0x24
 8005d56:	d906      	bls.n	8005d66 <_strtol_l.isra.0+0x1a>
 8005d58:	f7ff f930 	bl	8004fbc <__errno>
 8005d5c:	2316      	movs	r3, #22
 8005d5e:	6003      	str	r3, [r0, #0]
 8005d60:	2000      	movs	r0, #0
 8005d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d66:	4f3a      	ldr	r7, [pc, #232]	; (8005e50 <_strtol_l.isra.0+0x104>)
 8005d68:	468e      	mov	lr, r1
 8005d6a:	4676      	mov	r6, lr
 8005d6c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005d70:	5de5      	ldrb	r5, [r4, r7]
 8005d72:	f015 0508 	ands.w	r5, r5, #8
 8005d76:	d1f8      	bne.n	8005d6a <_strtol_l.isra.0+0x1e>
 8005d78:	2c2d      	cmp	r4, #45	; 0x2d
 8005d7a:	d134      	bne.n	8005de6 <_strtol_l.isra.0+0x9a>
 8005d7c:	f89e 4000 	ldrb.w	r4, [lr]
 8005d80:	f04f 0801 	mov.w	r8, #1
 8005d84:	f106 0e02 	add.w	lr, r6, #2
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d05c      	beq.n	8005e46 <_strtol_l.isra.0+0xfa>
 8005d8c:	2b10      	cmp	r3, #16
 8005d8e:	d10c      	bne.n	8005daa <_strtol_l.isra.0+0x5e>
 8005d90:	2c30      	cmp	r4, #48	; 0x30
 8005d92:	d10a      	bne.n	8005daa <_strtol_l.isra.0+0x5e>
 8005d94:	f89e 4000 	ldrb.w	r4, [lr]
 8005d98:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005d9c:	2c58      	cmp	r4, #88	; 0x58
 8005d9e:	d14d      	bne.n	8005e3c <_strtol_l.isra.0+0xf0>
 8005da0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8005da4:	2310      	movs	r3, #16
 8005da6:	f10e 0e02 	add.w	lr, lr, #2
 8005daa:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8005dae:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005db2:	2600      	movs	r6, #0
 8005db4:	fbbc f9f3 	udiv	r9, ip, r3
 8005db8:	4635      	mov	r5, r6
 8005dba:	fb03 ca19 	mls	sl, r3, r9, ip
 8005dbe:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8005dc2:	2f09      	cmp	r7, #9
 8005dc4:	d818      	bhi.n	8005df8 <_strtol_l.isra.0+0xac>
 8005dc6:	463c      	mov	r4, r7
 8005dc8:	42a3      	cmp	r3, r4
 8005dca:	dd24      	ble.n	8005e16 <_strtol_l.isra.0+0xca>
 8005dcc:	2e00      	cmp	r6, #0
 8005dce:	db1f      	blt.n	8005e10 <_strtol_l.isra.0+0xc4>
 8005dd0:	45a9      	cmp	r9, r5
 8005dd2:	d31d      	bcc.n	8005e10 <_strtol_l.isra.0+0xc4>
 8005dd4:	d101      	bne.n	8005dda <_strtol_l.isra.0+0x8e>
 8005dd6:	45a2      	cmp	sl, r4
 8005dd8:	db1a      	blt.n	8005e10 <_strtol_l.isra.0+0xc4>
 8005dda:	fb05 4503 	mla	r5, r5, r3, r4
 8005dde:	2601      	movs	r6, #1
 8005de0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8005de4:	e7eb      	b.n	8005dbe <_strtol_l.isra.0+0x72>
 8005de6:	2c2b      	cmp	r4, #43	; 0x2b
 8005de8:	bf08      	it	eq
 8005dea:	f89e 4000 	ldrbeq.w	r4, [lr]
 8005dee:	46a8      	mov	r8, r5
 8005df0:	bf08      	it	eq
 8005df2:	f106 0e02 	addeq.w	lr, r6, #2
 8005df6:	e7c7      	b.n	8005d88 <_strtol_l.isra.0+0x3c>
 8005df8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8005dfc:	2f19      	cmp	r7, #25
 8005dfe:	d801      	bhi.n	8005e04 <_strtol_l.isra.0+0xb8>
 8005e00:	3c37      	subs	r4, #55	; 0x37
 8005e02:	e7e1      	b.n	8005dc8 <_strtol_l.isra.0+0x7c>
 8005e04:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8005e08:	2f19      	cmp	r7, #25
 8005e0a:	d804      	bhi.n	8005e16 <_strtol_l.isra.0+0xca>
 8005e0c:	3c57      	subs	r4, #87	; 0x57
 8005e0e:	e7db      	b.n	8005dc8 <_strtol_l.isra.0+0x7c>
 8005e10:	f04f 36ff 	mov.w	r6, #4294967295
 8005e14:	e7e4      	b.n	8005de0 <_strtol_l.isra.0+0x94>
 8005e16:	2e00      	cmp	r6, #0
 8005e18:	da05      	bge.n	8005e26 <_strtol_l.isra.0+0xda>
 8005e1a:	2322      	movs	r3, #34	; 0x22
 8005e1c:	6003      	str	r3, [r0, #0]
 8005e1e:	4665      	mov	r5, ip
 8005e20:	b942      	cbnz	r2, 8005e34 <_strtol_l.isra.0+0xe8>
 8005e22:	4628      	mov	r0, r5
 8005e24:	e79d      	b.n	8005d62 <_strtol_l.isra.0+0x16>
 8005e26:	f1b8 0f00 	cmp.w	r8, #0
 8005e2a:	d000      	beq.n	8005e2e <_strtol_l.isra.0+0xe2>
 8005e2c:	426d      	negs	r5, r5
 8005e2e:	2a00      	cmp	r2, #0
 8005e30:	d0f7      	beq.n	8005e22 <_strtol_l.isra.0+0xd6>
 8005e32:	b10e      	cbz	r6, 8005e38 <_strtol_l.isra.0+0xec>
 8005e34:	f10e 31ff 	add.w	r1, lr, #4294967295
 8005e38:	6011      	str	r1, [r2, #0]
 8005e3a:	e7f2      	b.n	8005e22 <_strtol_l.isra.0+0xd6>
 8005e3c:	2430      	movs	r4, #48	; 0x30
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d1b3      	bne.n	8005daa <_strtol_l.isra.0+0x5e>
 8005e42:	2308      	movs	r3, #8
 8005e44:	e7b1      	b.n	8005daa <_strtol_l.isra.0+0x5e>
 8005e46:	2c30      	cmp	r4, #48	; 0x30
 8005e48:	d0a4      	beq.n	8005d94 <_strtol_l.isra.0+0x48>
 8005e4a:	230a      	movs	r3, #10
 8005e4c:	e7ad      	b.n	8005daa <_strtol_l.isra.0+0x5e>
 8005e4e:	bf00      	nop
 8005e50:	08006343 	.word	0x08006343

08005e54 <_strtol_r>:
 8005e54:	f7ff bf7a 	b.w	8005d4c <_strtol_l.isra.0>

08005e58 <_strtoul_l.isra.0>:
 8005e58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005e5c:	4e3b      	ldr	r6, [pc, #236]	; (8005f4c <_strtoul_l.isra.0+0xf4>)
 8005e5e:	4686      	mov	lr, r0
 8005e60:	468c      	mov	ip, r1
 8005e62:	4660      	mov	r0, ip
 8005e64:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005e68:	5da5      	ldrb	r5, [r4, r6]
 8005e6a:	f015 0508 	ands.w	r5, r5, #8
 8005e6e:	d1f8      	bne.n	8005e62 <_strtoul_l.isra.0+0xa>
 8005e70:	2c2d      	cmp	r4, #45	; 0x2d
 8005e72:	d134      	bne.n	8005ede <_strtoul_l.isra.0+0x86>
 8005e74:	f89c 4000 	ldrb.w	r4, [ip]
 8005e78:	f04f 0801 	mov.w	r8, #1
 8005e7c:	f100 0c02 	add.w	ip, r0, #2
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d05e      	beq.n	8005f42 <_strtoul_l.isra.0+0xea>
 8005e84:	2b10      	cmp	r3, #16
 8005e86:	d10c      	bne.n	8005ea2 <_strtoul_l.isra.0+0x4a>
 8005e88:	2c30      	cmp	r4, #48	; 0x30
 8005e8a:	d10a      	bne.n	8005ea2 <_strtoul_l.isra.0+0x4a>
 8005e8c:	f89c 0000 	ldrb.w	r0, [ip]
 8005e90:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005e94:	2858      	cmp	r0, #88	; 0x58
 8005e96:	d14f      	bne.n	8005f38 <_strtoul_l.isra.0+0xe0>
 8005e98:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8005e9c:	2310      	movs	r3, #16
 8005e9e:	f10c 0c02 	add.w	ip, ip, #2
 8005ea2:	f04f 37ff 	mov.w	r7, #4294967295
 8005ea6:	2500      	movs	r5, #0
 8005ea8:	fbb7 f7f3 	udiv	r7, r7, r3
 8005eac:	fb03 f907 	mul.w	r9, r3, r7
 8005eb0:	ea6f 0909 	mvn.w	r9, r9
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8005eba:	2e09      	cmp	r6, #9
 8005ebc:	d818      	bhi.n	8005ef0 <_strtoul_l.isra.0+0x98>
 8005ebe:	4634      	mov	r4, r6
 8005ec0:	42a3      	cmp	r3, r4
 8005ec2:	dd24      	ble.n	8005f0e <_strtoul_l.isra.0+0xb6>
 8005ec4:	2d00      	cmp	r5, #0
 8005ec6:	db1f      	blt.n	8005f08 <_strtoul_l.isra.0+0xb0>
 8005ec8:	4287      	cmp	r7, r0
 8005eca:	d31d      	bcc.n	8005f08 <_strtoul_l.isra.0+0xb0>
 8005ecc:	d101      	bne.n	8005ed2 <_strtoul_l.isra.0+0x7a>
 8005ece:	45a1      	cmp	r9, r4
 8005ed0:	db1a      	blt.n	8005f08 <_strtoul_l.isra.0+0xb0>
 8005ed2:	fb00 4003 	mla	r0, r0, r3, r4
 8005ed6:	2501      	movs	r5, #1
 8005ed8:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8005edc:	e7eb      	b.n	8005eb6 <_strtoul_l.isra.0+0x5e>
 8005ede:	2c2b      	cmp	r4, #43	; 0x2b
 8005ee0:	bf08      	it	eq
 8005ee2:	f89c 4000 	ldrbeq.w	r4, [ip]
 8005ee6:	46a8      	mov	r8, r5
 8005ee8:	bf08      	it	eq
 8005eea:	f100 0c02 	addeq.w	ip, r0, #2
 8005eee:	e7c7      	b.n	8005e80 <_strtoul_l.isra.0+0x28>
 8005ef0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8005ef4:	2e19      	cmp	r6, #25
 8005ef6:	d801      	bhi.n	8005efc <_strtoul_l.isra.0+0xa4>
 8005ef8:	3c37      	subs	r4, #55	; 0x37
 8005efa:	e7e1      	b.n	8005ec0 <_strtoul_l.isra.0+0x68>
 8005efc:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8005f00:	2e19      	cmp	r6, #25
 8005f02:	d804      	bhi.n	8005f0e <_strtoul_l.isra.0+0xb6>
 8005f04:	3c57      	subs	r4, #87	; 0x57
 8005f06:	e7db      	b.n	8005ec0 <_strtoul_l.isra.0+0x68>
 8005f08:	f04f 35ff 	mov.w	r5, #4294967295
 8005f0c:	e7e4      	b.n	8005ed8 <_strtoul_l.isra.0+0x80>
 8005f0e:	2d00      	cmp	r5, #0
 8005f10:	da07      	bge.n	8005f22 <_strtoul_l.isra.0+0xca>
 8005f12:	2322      	movs	r3, #34	; 0x22
 8005f14:	f8ce 3000 	str.w	r3, [lr]
 8005f18:	f04f 30ff 	mov.w	r0, #4294967295
 8005f1c:	b942      	cbnz	r2, 8005f30 <_strtoul_l.isra.0+0xd8>
 8005f1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005f22:	f1b8 0f00 	cmp.w	r8, #0
 8005f26:	d000      	beq.n	8005f2a <_strtoul_l.isra.0+0xd2>
 8005f28:	4240      	negs	r0, r0
 8005f2a:	2a00      	cmp	r2, #0
 8005f2c:	d0f7      	beq.n	8005f1e <_strtoul_l.isra.0+0xc6>
 8005f2e:	b10d      	cbz	r5, 8005f34 <_strtoul_l.isra.0+0xdc>
 8005f30:	f10c 31ff 	add.w	r1, ip, #4294967295
 8005f34:	6011      	str	r1, [r2, #0]
 8005f36:	e7f2      	b.n	8005f1e <_strtoul_l.isra.0+0xc6>
 8005f38:	2430      	movs	r4, #48	; 0x30
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d1b1      	bne.n	8005ea2 <_strtoul_l.isra.0+0x4a>
 8005f3e:	2308      	movs	r3, #8
 8005f40:	e7af      	b.n	8005ea2 <_strtoul_l.isra.0+0x4a>
 8005f42:	2c30      	cmp	r4, #48	; 0x30
 8005f44:	d0a2      	beq.n	8005e8c <_strtoul_l.isra.0+0x34>
 8005f46:	230a      	movs	r3, #10
 8005f48:	e7ab      	b.n	8005ea2 <_strtoul_l.isra.0+0x4a>
 8005f4a:	bf00      	nop
 8005f4c:	08006343 	.word	0x08006343

08005f50 <_strtoul_r>:
 8005f50:	f7ff bf82 	b.w	8005e58 <_strtoul_l.isra.0>

08005f54 <__submore>:
 8005f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f58:	460c      	mov	r4, r1
 8005f5a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005f5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005f60:	4299      	cmp	r1, r3
 8005f62:	d11d      	bne.n	8005fa0 <__submore+0x4c>
 8005f64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005f68:	f000 f8a8 	bl	80060bc <_malloc_r>
 8005f6c:	b918      	cbnz	r0, 8005f76 <__submore+0x22>
 8005f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005f72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f7a:	63a3      	str	r3, [r4, #56]	; 0x38
 8005f7c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005f80:	6360      	str	r0, [r4, #52]	; 0x34
 8005f82:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8005f86:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8005f8a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005f8e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005f92:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8005f96:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8005f9a:	6020      	str	r0, [r4, #0]
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	e7e8      	b.n	8005f72 <__submore+0x1e>
 8005fa0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005fa2:	0077      	lsls	r7, r6, #1
 8005fa4:	463a      	mov	r2, r7
 8005fa6:	f000 f8e3 	bl	8006170 <_realloc_r>
 8005faa:	4605      	mov	r5, r0
 8005fac:	2800      	cmp	r0, #0
 8005fae:	d0de      	beq.n	8005f6e <__submore+0x1a>
 8005fb0:	eb00 0806 	add.w	r8, r0, r6
 8005fb4:	4601      	mov	r1, r0
 8005fb6:	4632      	mov	r2, r6
 8005fb8:	4640      	mov	r0, r8
 8005fba:	f000 f807 	bl	8005fcc <memcpy>
 8005fbe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005fc2:	f8c4 8000 	str.w	r8, [r4]
 8005fc6:	e7e9      	b.n	8005f9c <__submore+0x48>

08005fc8 <__retarget_lock_acquire_recursive>:
 8005fc8:	4770      	bx	lr

08005fca <__retarget_lock_release_recursive>:
 8005fca:	4770      	bx	lr

08005fcc <memcpy>:
 8005fcc:	440a      	add	r2, r1
 8005fce:	4291      	cmp	r1, r2
 8005fd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005fd4:	d100      	bne.n	8005fd8 <memcpy+0xc>
 8005fd6:	4770      	bx	lr
 8005fd8:	b510      	push	{r4, lr}
 8005fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005fe2:	4291      	cmp	r1, r2
 8005fe4:	d1f9      	bne.n	8005fda <memcpy+0xe>
 8005fe6:	bd10      	pop	{r4, pc}

08005fe8 <memmove>:
 8005fe8:	4288      	cmp	r0, r1
 8005fea:	b510      	push	{r4, lr}
 8005fec:	eb01 0402 	add.w	r4, r1, r2
 8005ff0:	d902      	bls.n	8005ff8 <memmove+0x10>
 8005ff2:	4284      	cmp	r4, r0
 8005ff4:	4623      	mov	r3, r4
 8005ff6:	d807      	bhi.n	8006008 <memmove+0x20>
 8005ff8:	1e43      	subs	r3, r0, #1
 8005ffa:	42a1      	cmp	r1, r4
 8005ffc:	d008      	beq.n	8006010 <memmove+0x28>
 8005ffe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006002:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006006:	e7f8      	b.n	8005ffa <memmove+0x12>
 8006008:	4402      	add	r2, r0
 800600a:	4601      	mov	r1, r0
 800600c:	428a      	cmp	r2, r1
 800600e:	d100      	bne.n	8006012 <memmove+0x2a>
 8006010:	bd10      	pop	{r4, pc}
 8006012:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006016:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800601a:	e7f7      	b.n	800600c <memmove+0x24>

0800601c <_free_r>:
 800601c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800601e:	2900      	cmp	r1, #0
 8006020:	d048      	beq.n	80060b4 <_free_r+0x98>
 8006022:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006026:	9001      	str	r0, [sp, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	f1a1 0404 	sub.w	r4, r1, #4
 800602e:	bfb8      	it	lt
 8006030:	18e4      	addlt	r4, r4, r3
 8006032:	f000 f8d3 	bl	80061dc <__malloc_lock>
 8006036:	4a20      	ldr	r2, [pc, #128]	; (80060b8 <_free_r+0x9c>)
 8006038:	9801      	ldr	r0, [sp, #4]
 800603a:	6813      	ldr	r3, [r2, #0]
 800603c:	4615      	mov	r5, r2
 800603e:	b933      	cbnz	r3, 800604e <_free_r+0x32>
 8006040:	6063      	str	r3, [r4, #4]
 8006042:	6014      	str	r4, [r2, #0]
 8006044:	b003      	add	sp, #12
 8006046:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800604a:	f000 b8cd 	b.w	80061e8 <__malloc_unlock>
 800604e:	42a3      	cmp	r3, r4
 8006050:	d90b      	bls.n	800606a <_free_r+0x4e>
 8006052:	6821      	ldr	r1, [r4, #0]
 8006054:	1862      	adds	r2, r4, r1
 8006056:	4293      	cmp	r3, r2
 8006058:	bf04      	itt	eq
 800605a:	681a      	ldreq	r2, [r3, #0]
 800605c:	685b      	ldreq	r3, [r3, #4]
 800605e:	6063      	str	r3, [r4, #4]
 8006060:	bf04      	itt	eq
 8006062:	1852      	addeq	r2, r2, r1
 8006064:	6022      	streq	r2, [r4, #0]
 8006066:	602c      	str	r4, [r5, #0]
 8006068:	e7ec      	b.n	8006044 <_free_r+0x28>
 800606a:	461a      	mov	r2, r3
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	b10b      	cbz	r3, 8006074 <_free_r+0x58>
 8006070:	42a3      	cmp	r3, r4
 8006072:	d9fa      	bls.n	800606a <_free_r+0x4e>
 8006074:	6811      	ldr	r1, [r2, #0]
 8006076:	1855      	adds	r5, r2, r1
 8006078:	42a5      	cmp	r5, r4
 800607a:	d10b      	bne.n	8006094 <_free_r+0x78>
 800607c:	6824      	ldr	r4, [r4, #0]
 800607e:	4421      	add	r1, r4
 8006080:	1854      	adds	r4, r2, r1
 8006082:	42a3      	cmp	r3, r4
 8006084:	6011      	str	r1, [r2, #0]
 8006086:	d1dd      	bne.n	8006044 <_free_r+0x28>
 8006088:	681c      	ldr	r4, [r3, #0]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	6053      	str	r3, [r2, #4]
 800608e:	4421      	add	r1, r4
 8006090:	6011      	str	r1, [r2, #0]
 8006092:	e7d7      	b.n	8006044 <_free_r+0x28>
 8006094:	d902      	bls.n	800609c <_free_r+0x80>
 8006096:	230c      	movs	r3, #12
 8006098:	6003      	str	r3, [r0, #0]
 800609a:	e7d3      	b.n	8006044 <_free_r+0x28>
 800609c:	6825      	ldr	r5, [r4, #0]
 800609e:	1961      	adds	r1, r4, r5
 80060a0:	428b      	cmp	r3, r1
 80060a2:	bf04      	itt	eq
 80060a4:	6819      	ldreq	r1, [r3, #0]
 80060a6:	685b      	ldreq	r3, [r3, #4]
 80060a8:	6063      	str	r3, [r4, #4]
 80060aa:	bf04      	itt	eq
 80060ac:	1949      	addeq	r1, r1, r5
 80060ae:	6021      	streq	r1, [r4, #0]
 80060b0:	6054      	str	r4, [r2, #4]
 80060b2:	e7c7      	b.n	8006044 <_free_r+0x28>
 80060b4:	b003      	add	sp, #12
 80060b6:	bd30      	pop	{r4, r5, pc}
 80060b8:	200000ac 	.word	0x200000ac

080060bc <_malloc_r>:
 80060bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060be:	1ccd      	adds	r5, r1, #3
 80060c0:	f025 0503 	bic.w	r5, r5, #3
 80060c4:	3508      	adds	r5, #8
 80060c6:	2d0c      	cmp	r5, #12
 80060c8:	bf38      	it	cc
 80060ca:	250c      	movcc	r5, #12
 80060cc:	2d00      	cmp	r5, #0
 80060ce:	4606      	mov	r6, r0
 80060d0:	db01      	blt.n	80060d6 <_malloc_r+0x1a>
 80060d2:	42a9      	cmp	r1, r5
 80060d4:	d903      	bls.n	80060de <_malloc_r+0x22>
 80060d6:	230c      	movs	r3, #12
 80060d8:	6033      	str	r3, [r6, #0]
 80060da:	2000      	movs	r0, #0
 80060dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060de:	f000 f87d 	bl	80061dc <__malloc_lock>
 80060e2:	4921      	ldr	r1, [pc, #132]	; (8006168 <_malloc_r+0xac>)
 80060e4:	680a      	ldr	r2, [r1, #0]
 80060e6:	4614      	mov	r4, r2
 80060e8:	b99c      	cbnz	r4, 8006112 <_malloc_r+0x56>
 80060ea:	4f20      	ldr	r7, [pc, #128]	; (800616c <_malloc_r+0xb0>)
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	b923      	cbnz	r3, 80060fa <_malloc_r+0x3e>
 80060f0:	4621      	mov	r1, r4
 80060f2:	4630      	mov	r0, r6
 80060f4:	f000 f862 	bl	80061bc <_sbrk_r>
 80060f8:	6038      	str	r0, [r7, #0]
 80060fa:	4629      	mov	r1, r5
 80060fc:	4630      	mov	r0, r6
 80060fe:	f000 f85d 	bl	80061bc <_sbrk_r>
 8006102:	1c43      	adds	r3, r0, #1
 8006104:	d123      	bne.n	800614e <_malloc_r+0x92>
 8006106:	230c      	movs	r3, #12
 8006108:	6033      	str	r3, [r6, #0]
 800610a:	4630      	mov	r0, r6
 800610c:	f000 f86c 	bl	80061e8 <__malloc_unlock>
 8006110:	e7e3      	b.n	80060da <_malloc_r+0x1e>
 8006112:	6823      	ldr	r3, [r4, #0]
 8006114:	1b5b      	subs	r3, r3, r5
 8006116:	d417      	bmi.n	8006148 <_malloc_r+0x8c>
 8006118:	2b0b      	cmp	r3, #11
 800611a:	d903      	bls.n	8006124 <_malloc_r+0x68>
 800611c:	6023      	str	r3, [r4, #0]
 800611e:	441c      	add	r4, r3
 8006120:	6025      	str	r5, [r4, #0]
 8006122:	e004      	b.n	800612e <_malloc_r+0x72>
 8006124:	6863      	ldr	r3, [r4, #4]
 8006126:	42a2      	cmp	r2, r4
 8006128:	bf0c      	ite	eq
 800612a:	600b      	streq	r3, [r1, #0]
 800612c:	6053      	strne	r3, [r2, #4]
 800612e:	4630      	mov	r0, r6
 8006130:	f000 f85a 	bl	80061e8 <__malloc_unlock>
 8006134:	f104 000b 	add.w	r0, r4, #11
 8006138:	1d23      	adds	r3, r4, #4
 800613a:	f020 0007 	bic.w	r0, r0, #7
 800613e:	1ac2      	subs	r2, r0, r3
 8006140:	d0cc      	beq.n	80060dc <_malloc_r+0x20>
 8006142:	1a1b      	subs	r3, r3, r0
 8006144:	50a3      	str	r3, [r4, r2]
 8006146:	e7c9      	b.n	80060dc <_malloc_r+0x20>
 8006148:	4622      	mov	r2, r4
 800614a:	6864      	ldr	r4, [r4, #4]
 800614c:	e7cc      	b.n	80060e8 <_malloc_r+0x2c>
 800614e:	1cc4      	adds	r4, r0, #3
 8006150:	f024 0403 	bic.w	r4, r4, #3
 8006154:	42a0      	cmp	r0, r4
 8006156:	d0e3      	beq.n	8006120 <_malloc_r+0x64>
 8006158:	1a21      	subs	r1, r4, r0
 800615a:	4630      	mov	r0, r6
 800615c:	f000 f82e 	bl	80061bc <_sbrk_r>
 8006160:	3001      	adds	r0, #1
 8006162:	d1dd      	bne.n	8006120 <_malloc_r+0x64>
 8006164:	e7cf      	b.n	8006106 <_malloc_r+0x4a>
 8006166:	bf00      	nop
 8006168:	200000ac 	.word	0x200000ac
 800616c:	200000b0 	.word	0x200000b0

08006170 <_realloc_r>:
 8006170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006172:	4607      	mov	r7, r0
 8006174:	4614      	mov	r4, r2
 8006176:	460e      	mov	r6, r1
 8006178:	b921      	cbnz	r1, 8006184 <_realloc_r+0x14>
 800617a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800617e:	4611      	mov	r1, r2
 8006180:	f7ff bf9c 	b.w	80060bc <_malloc_r>
 8006184:	b922      	cbnz	r2, 8006190 <_realloc_r+0x20>
 8006186:	f7ff ff49 	bl	800601c <_free_r>
 800618a:	4625      	mov	r5, r4
 800618c:	4628      	mov	r0, r5
 800618e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006190:	f000 f830 	bl	80061f4 <_malloc_usable_size_r>
 8006194:	42a0      	cmp	r0, r4
 8006196:	d20f      	bcs.n	80061b8 <_realloc_r+0x48>
 8006198:	4621      	mov	r1, r4
 800619a:	4638      	mov	r0, r7
 800619c:	f7ff ff8e 	bl	80060bc <_malloc_r>
 80061a0:	4605      	mov	r5, r0
 80061a2:	2800      	cmp	r0, #0
 80061a4:	d0f2      	beq.n	800618c <_realloc_r+0x1c>
 80061a6:	4631      	mov	r1, r6
 80061a8:	4622      	mov	r2, r4
 80061aa:	f7ff ff0f 	bl	8005fcc <memcpy>
 80061ae:	4631      	mov	r1, r6
 80061b0:	4638      	mov	r0, r7
 80061b2:	f7ff ff33 	bl	800601c <_free_r>
 80061b6:	e7e9      	b.n	800618c <_realloc_r+0x1c>
 80061b8:	4635      	mov	r5, r6
 80061ba:	e7e7      	b.n	800618c <_realloc_r+0x1c>

080061bc <_sbrk_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	4d06      	ldr	r5, [pc, #24]	; (80061d8 <_sbrk_r+0x1c>)
 80061c0:	2300      	movs	r3, #0
 80061c2:	4604      	mov	r4, r0
 80061c4:	4608      	mov	r0, r1
 80061c6:	602b      	str	r3, [r5, #0]
 80061c8:	f7fa fe80 	bl	8000ecc <_sbrk>
 80061cc:	1c43      	adds	r3, r0, #1
 80061ce:	d102      	bne.n	80061d6 <_sbrk_r+0x1a>
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	b103      	cbz	r3, 80061d6 <_sbrk_r+0x1a>
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	bd38      	pop	{r3, r4, r5, pc}
 80061d8:	200001c4 	.word	0x200001c4

080061dc <__malloc_lock>:
 80061dc:	4801      	ldr	r0, [pc, #4]	; (80061e4 <__malloc_lock+0x8>)
 80061de:	f7ff bef3 	b.w	8005fc8 <__retarget_lock_acquire_recursive>
 80061e2:	bf00      	nop
 80061e4:	200001cc 	.word	0x200001cc

080061e8 <__malloc_unlock>:
 80061e8:	4801      	ldr	r0, [pc, #4]	; (80061f0 <__malloc_unlock+0x8>)
 80061ea:	f7ff beee 	b.w	8005fca <__retarget_lock_release_recursive>
 80061ee:	bf00      	nop
 80061f0:	200001cc 	.word	0x200001cc

080061f4 <_malloc_usable_size_r>:
 80061f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80061f8:	1f18      	subs	r0, r3, #4
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	bfbc      	itt	lt
 80061fe:	580b      	ldrlt	r3, [r1, r0]
 8006200:	18c0      	addlt	r0, r0, r3
 8006202:	4770      	bx	lr

08006204 <_init>:
 8006204:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006206:	bf00      	nop
 8006208:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800620a:	bc08      	pop	{r3}
 800620c:	469e      	mov	lr, r3
 800620e:	4770      	bx	lr

08006210 <_fini>:
 8006210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006212:	bf00      	nop
 8006214:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006216:	bc08      	pop	{r3}
 8006218:	469e      	mov	lr, r3
 800621a:	4770      	bx	lr
