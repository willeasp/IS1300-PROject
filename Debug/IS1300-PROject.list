
IS1300-PROject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048f0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004a78  08004a78  00014a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ae8  08004ae8  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08004ae8  08004ae8  00014ae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004af0  08004af0  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004af0  08004af0  00014af0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004af4  08004af4  00014af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004af8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000024  08004b1c  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08004b1c  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012218  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000262e  00000000  00000000  0003226c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c50  00000000  00000000  000348a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b48  00000000  00000000  000354f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c03  00000000  00000000  00036038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001072a  00000000  00000000  0005cc3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb4d7  00000000  00000000  0006d365  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015883c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030b8  00000000  00000000  00158890  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a60 	.word	0x08004a60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08004a60 	.word	0x08004a60

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <init_backlight>:


/**
 * @brief Set the backlight to white
 */
void init_backlight () {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(Disp_White_GPIO_Port, Disp_White_Pin, GPIO_PIN_SET);
 80004c4:	2201      	movs	r2, #1
 80004c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80004ca:	4802      	ldr	r0, [pc, #8]	; (80004d4 <init_backlight+0x14>)
 80004cc:	f001 f82a 	bl	8001524 <HAL_GPIO_WritePin>
}
 80004d0:	bf00      	nop
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	48000800 	.word	0x48000800

080004d8 <test_backlight>:


/**
 * @brief Test all backlight colors
 */
void test_backlight () {
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
    GPIO_TypeDef* ports[] = {Disp_White_GPIO_Port, Disp_Green_GPIO_Port, Disp_Red_GPIO_Port};
 80004de:	4a21      	ldr	r2, [pc, #132]	; (8000564 <test_backlight+0x8c>)
 80004e0:	f107 0308 	add.w	r3, r7, #8
 80004e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80004e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t pins[] = {Disp_White_Pin, Disp_Green_Pin, Disp_Red_Pin};
 80004ea:	4a1f      	ldr	r2, [pc, #124]	; (8000568 <test_backlight+0x90>)
 80004ec:	463b      	mov	r3, r7
 80004ee:	e892 0003 	ldmia.w	r2, {r0, r1}
 80004f2:	6018      	str	r0, [r3, #0]
 80004f4:	3304      	adds	r3, #4
 80004f6:	8019      	strh	r1, [r3, #0]
    for (int i = 0; i < 3; ++i) {
 80004f8:	2300      	movs	r3, #0
 80004fa:	617b      	str	r3, [r7, #20]
 80004fc:	e029      	b.n	8000552 <test_backlight+0x7a>
        HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);
 80004fe:	697b      	ldr	r3, [r7, #20]
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	f107 0218 	add.w	r2, r7, #24
 8000506:	4413      	add	r3, r2
 8000508:	f853 0c10 	ldr.w	r0, [r3, #-16]
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	f107 0218 	add.w	r2, r7, #24
 8000514:	4413      	add	r3, r2
 8000516:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800051a:	2201      	movs	r2, #1
 800051c:	4619      	mov	r1, r3
 800051e:	f001 f801 	bl	8001524 <HAL_GPIO_WritePin>
        HAL_Delay(200);
 8000522:	20c8      	movs	r0, #200	; 0xc8
 8000524:	f000 fca0 	bl	8000e68 <HAL_Delay>
        HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	009b      	lsls	r3, r3, #2
 800052c:	f107 0218 	add.w	r2, r7, #24
 8000530:	4413      	add	r3, r2
 8000532:	f853 0c10 	ldr.w	r0, [r3, #-16]
 8000536:	697b      	ldr	r3, [r7, #20]
 8000538:	005b      	lsls	r3, r3, #1
 800053a:	f107 0218 	add.w	r2, r7, #24
 800053e:	4413      	add	r3, r2
 8000540:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000544:	2200      	movs	r2, #0
 8000546:	4619      	mov	r1, r3
 8000548:	f000 ffec 	bl	8001524 <HAL_GPIO_WritePin>
    for (int i = 0; i < 3; ++i) {
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	3301      	adds	r3, #1
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	697b      	ldr	r3, [r7, #20]
 8000554:	2b02      	cmp	r3, #2
 8000556:	ddd2      	ble.n	80004fe <test_backlight+0x26>
    }
}
 8000558:	bf00      	nop
 800055a:	bf00      	nop
 800055c:	3718      	adds	r7, #24
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	08004a78 	.word	0x08004a78
 8000568:	08004a84 	.word	0x08004a84

0800056c <split_byte>:
/**
 * @brief Split a byte to send to the display
 * @param[in] byte The byte to split into two
 * @param[out] buffer Where to place the two new bytes
 */
void split_byte (uint8_t byte, uint8_t *buffer) {
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	71fb      	strb	r3, [r7, #7]
    buffer[0] = byte & 0x0F;            // lower bits first
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	f003 030f 	and.w	r3, r3, #15
 800057e:	b2da      	uxtb	r2, r3
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	701a      	strb	r2, [r3, #0]
    buffer[1] = (byte & 0xF0) >> 4;     // upper bits second
 8000584:	683b      	ldr	r3, [r7, #0]
 8000586:	3301      	adds	r3, #1
 8000588:	79fa      	ldrb	r2, [r7, #7]
 800058a:	0912      	lsrs	r2, r2, #4
 800058c:	b2d2      	uxtb	r2, r2
 800058e:	701a      	strb	r2, [r3, #0]
}
 8000590:	bf00      	nop
 8000592:	370c      	adds	r7, #12
 8000594:	46bd      	mov	sp, r7
 8000596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059a:	4770      	bx	lr

0800059c <display_transmit>:
 * @brief Send the display data or instructions
 * @param[in] startbyte The byte setting that initiates the transmit
 * @param[in] bytes The bytes that will be sent to the display
 * @param[in] length The number of bytes to send
 */
int display_transmit (uint8_t startbyte, uint8_t *bytes, uint16_t length) {
 800059c:	b5b0      	push	{r4, r5, r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	6039      	str	r1, [r7, #0]
 80005a6:	71fb      	strb	r3, [r7, #7]
 80005a8:	4613      	mov	r3, r2
 80005aa:	80bb      	strh	r3, [r7, #4]
 80005ac:	466b      	mov	r3, sp
 80005ae:	461d      	mov	r5, r3
    /* create message to transmit */
    uint16_t mes_length = length*2 +1; // +1 for start byte
 80005b0:	88bb      	ldrh	r3, [r7, #4]
 80005b2:	005b      	lsls	r3, r3, #1
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	3301      	adds	r3, #1
 80005b8:	837b      	strh	r3, [r7, #26]
    uint8_t message[mes_length];
 80005ba:	8b7c      	ldrh	r4, [r7, #26]
 80005bc:	4623      	mov	r3, r4
 80005be:	3b01      	subs	r3, #1
 80005c0:	617b      	str	r3, [r7, #20]
 80005c2:	b2a0      	uxth	r0, r4
 80005c4:	f04f 0100 	mov.w	r1, #0
 80005c8:	f04f 0200 	mov.w	r2, #0
 80005cc:	f04f 0300 	mov.w	r3, #0
 80005d0:	00cb      	lsls	r3, r1, #3
 80005d2:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80005d6:	00c2      	lsls	r2, r0, #3
 80005d8:	b2a0      	uxth	r0, r4
 80005da:	f04f 0100 	mov.w	r1, #0
 80005de:	f04f 0200 	mov.w	r2, #0
 80005e2:	f04f 0300 	mov.w	r3, #0
 80005e6:	00cb      	lsls	r3, r1, #3
 80005e8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80005ec:	00c2      	lsls	r2, r0, #3
 80005ee:	4623      	mov	r3, r4
 80005f0:	3307      	adds	r3, #7
 80005f2:	08db      	lsrs	r3, r3, #3
 80005f4:	00db      	lsls	r3, r3, #3
 80005f6:	ebad 0d03 	sub.w	sp, sp, r3
 80005fa:	466b      	mov	r3, sp
 80005fc:	3300      	adds	r3, #0
 80005fe:	613b      	str	r3, [r7, #16]

    message[0] = startbyte;  // start byte
 8000600:	693b      	ldr	r3, [r7, #16]
 8000602:	79fa      	ldrb	r2, [r7, #7]
 8000604:	701a      	strb	r2, [r3, #0]

    uint8_t divided[2]; // for splitting a byte into two
    for (int i = 0; i < length; ++i) {
 8000606:	2300      	movs	r3, #0
 8000608:	61fb      	str	r3, [r7, #28]
 800060a:	e018      	b.n	800063e <display_transmit+0xa2>
        split_byte(bytes[i], divided);
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	683a      	ldr	r2, [r7, #0]
 8000610:	4413      	add	r3, r2
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	f107 020c 	add.w	r2, r7, #12
 8000618:	4611      	mov	r1, r2
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff ffa6 	bl	800056c <split_byte>
        message[1 + i*2] = divided[0];
 8000620:	69fb      	ldr	r3, [r7, #28]
 8000622:	005b      	lsls	r3, r3, #1
 8000624:	3301      	adds	r3, #1
 8000626:	7b39      	ldrb	r1, [r7, #12]
 8000628:	693a      	ldr	r2, [r7, #16]
 800062a:	54d1      	strb	r1, [r2, r3]
        message[1 + i*2 +1] = divided[1];
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	3301      	adds	r3, #1
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	7b79      	ldrb	r1, [r7, #13]
 8000634:	693a      	ldr	r2, [r7, #16]
 8000636:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < length; ++i) {
 8000638:	69fb      	ldr	r3, [r7, #28]
 800063a:	3301      	adds	r3, #1
 800063c:	61fb      	str	r3, [r7, #28]
 800063e:	88bb      	ldrh	r3, [r7, #4]
 8000640:	69fa      	ldr	r2, [r7, #28]
 8000642:	429a      	cmp	r2, r3
 8000644:	dbe2      	blt.n	800060c <display_transmit+0x70>
    }

    if (HAL_SPI_Transmit(&hspi2, message, mes_length, 100) != HAL_OK) {
 8000646:	6939      	ldr	r1, [r7, #16]
 8000648:	8b7a      	ldrh	r2, [r7, #26]
 800064a:	2364      	movs	r3, #100	; 0x64
 800064c:	4806      	ldr	r0, [pc, #24]	; (8000668 <display_transmit+0xcc>)
 800064e:	f002 fb30 	bl	8002cb2 <HAL_SPI_Transmit>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <display_transmit+0xc0>
        return 1;
 8000658:	2301      	movs	r3, #1
 800065a:	e000      	b.n	800065e <display_transmit+0xc2>
    }
    return 0;
 800065c:	2300      	movs	r3, #0
 800065e:	46ad      	mov	sp, r5
}
 8000660:	4618      	mov	r0, r3
 8000662:	3720      	adds	r7, #32
 8000664:	46bd      	mov	sp, r7
 8000666:	bdb0      	pop	{r4, r5, r7, pc}
 8000668:	20000044 	.word	0x20000044

0800066c <display_send_instruction>:
/**
 * @brief Send instruction bytes via spi to the display
 * @param[in] instructions A pointer to the instructions to send to the display
 * @param[in] length The number of instructions
 */
int display_send_instruction (uint8_t *instructions, uint16_t length) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	807b      	strh	r3, [r7, #2]
    return display_transmit(0x1F, instructions, length);
 8000678:	887b      	ldrh	r3, [r7, #2]
 800067a:	461a      	mov	r2, r3
 800067c:	6879      	ldr	r1, [r7, #4]
 800067e:	201f      	movs	r0, #31
 8000680:	f7ff ff8c 	bl	800059c <display_transmit>
 8000684:	4603      	mov	r3, r0
}
 8000686:	4618      	mov	r0, r3
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <display_write>:
/**
 * @brief Write characters to the display where the cursor currently are
 * @param characters The characters to write
 * @param length The number of characters
 */
int display_write (uint8_t *characters, uint16_t length) {
 800068e:	b580      	push	{r7, lr}
 8000690:	b082      	sub	sp, #8
 8000692:	af00      	add	r7, sp, #0
 8000694:	6078      	str	r0, [r7, #4]
 8000696:	460b      	mov	r3, r1
 8000698:	807b      	strh	r3, [r7, #2]
    return display_transmit(0b01011111, characters, length);
 800069a:	887b      	ldrh	r3, [r7, #2]
 800069c:	461a      	mov	r2, r3
 800069e:	6879      	ldr	r1, [r7, #4]
 80006a0:	205f      	movs	r0, #95	; 0x5f
 80006a2:	f7ff ff7b 	bl	800059c <display_transmit>
 80006a6:	4603      	mov	r3, r0
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}

080006b0 <init_display>:

/**
 * @brief Initialise the display
 */
void init_display () {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b084      	sub	sp, #16
 80006b4:	af00      	add	r7, sp, #0
    HAL_Delay(5);
 80006b6:	2005      	movs	r0, #5
 80006b8:	f000 fbd6 	bl	8000e68 <HAL_Delay>
    init_backlight();
 80006bc:	f7ff ff00 	bl	80004c0 <init_backlight>

    uint16_t ins_length = 12;
 80006c0:	230c      	movs	r3, #12
 80006c2:	81fb      	strh	r3, [r7, #14]
    uint8_t instructions[] = {
 80006c4:	4a0d      	ldr	r2, [pc, #52]	; (80006fc <init_display+0x4c>)
 80006c6:	463b      	mov	r3, r7
 80006c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80006ca:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0x01,
        0x38,
        0x0F,
    };

    if (display_send_instruction(instructions, ins_length))
 80006ce:	89fa      	ldrh	r2, [r7, #14]
 80006d0:	463b      	mov	r3, r7
 80006d2:	4611      	mov	r1, r2
 80006d4:	4618      	mov	r0, r3
 80006d6:	f7ff ffc9 	bl	800066c <display_send_instruction>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <init_display+0x34>
        handle_error();
 80006e0:	f000 f810 	bl	8000704 <handle_error>

    HAL_Delay(10);
 80006e4:	200a      	movs	r0, #10
 80006e6:	f000 fbbf 	bl	8000e68 <HAL_Delay>

    display_write((uint8_t*) "init mf", 7);
 80006ea:	2107      	movs	r1, #7
 80006ec:	4804      	ldr	r0, [pc, #16]	; (8000700 <init_display+0x50>)
 80006ee:	f7ff ffce 	bl	800068e <display_write>
}
 80006f2:	bf00      	nop
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	08004a94 	.word	0x08004a94
 8000700:	08004a8c 	.word	0x08004a8c

08000704 <handle_error>:
 *      Author: Dell
 */

#include "main.h"

void handle_error( void ) {
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
    __disable_irq();
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 800070c:	2201      	movs	r2, #1
 800070e:	2120      	movs	r1, #32
 8000710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000714:	f000 ff06 	bl	8001524 <HAL_GPIO_WritePin>
    while (1)
 8000718:	e7fe      	b.n	8000718 <handle_error+0x14>
	...

0800071c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	; 0x28
 8000720:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000722:	f107 0314 	add.w	r3, r7, #20
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
 8000730:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000732:	4b3c      	ldr	r3, [pc, #240]	; (8000824 <MX_GPIO_Init+0x108>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	4a3b      	ldr	r2, [pc, #236]	; (8000824 <MX_GPIO_Init+0x108>)
 8000738:	f043 0304 	orr.w	r3, r3, #4
 800073c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073e:	4b39      	ldr	r3, [pc, #228]	; (8000824 <MX_GPIO_Init+0x108>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	f003 0304 	and.w	r3, r3, #4
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074a:	4b36      	ldr	r3, [pc, #216]	; (8000824 <MX_GPIO_Init+0x108>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a35      	ldr	r2, [pc, #212]	; (8000824 <MX_GPIO_Init+0x108>)
 8000750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b33      	ldr	r3, [pc, #204]	; (8000824 <MX_GPIO_Init+0x108>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000762:	4b30      	ldr	r3, [pc, #192]	; (8000824 <MX_GPIO_Init+0x108>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	4a2f      	ldr	r2, [pc, #188]	; (8000824 <MX_GPIO_Init+0x108>)
 8000768:	f043 0301 	orr.w	r3, r3, #1
 800076c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076e:	4b2d      	ldr	r3, [pc, #180]	; (8000824 <MX_GPIO_Init+0x108>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	f003 0301 	and.w	r3, r3, #1
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077a:	4b2a      	ldr	r3, [pc, #168]	; (8000824 <MX_GPIO_Init+0x108>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	4a29      	ldr	r2, [pc, #164]	; (8000824 <MX_GPIO_Init+0x108>)
 8000780:	f043 0302 	orr.w	r3, r3, #2
 8000784:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000786:	4b27      	ldr	r3, [pc, #156]	; (8000824 <MX_GPIO_Init+0x108>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	f003 0302 	and.w	r3, r3, #2
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000792:	4b24      	ldr	r3, [pc, #144]	; (8000824 <MX_GPIO_Init+0x108>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	4a23      	ldr	r2, [pc, #140]	; (8000824 <MX_GPIO_Init+0x108>)
 8000798:	f043 0308 	orr.w	r3, r3, #8
 800079c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079e:	4b21      	ldr	r3, [pc, #132]	; (8000824 <MX_GPIO_Init+0x108>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	f003 0308 	and.w	r3, r3, #8
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2120      	movs	r1, #32
 80007ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b2:	f000 feb7 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Disp_Red_Pin|Disp_Green_Pin|Disp_White_Pin, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 80007bc:	481a      	ldr	r0, [pc, #104]	; (8000828 <MX_GPIO_Init+0x10c>)
 80007be:	f000 feb1 	bl	8001524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	4813      	ldr	r0, [pc, #76]	; (8000828 <MX_GPIO_Init+0x10c>)
 80007da:	f000 fcf9 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007de:	2320      	movs	r3, #32
 80007e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e2:	2301      	movs	r3, #1
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f8:	f000 fcea 	bl	80011d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Disp_Red_Pin|Disp_Green_Pin|Disp_White_Pin;
 80007fc:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8000800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000802:	2301      	movs	r3, #1
 8000804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080a:	2300      	movs	r3, #0
 800080c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080e:	f107 0314 	add.w	r3, r7, #20
 8000812:	4619      	mov	r1, r3
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_GPIO_Init+0x10c>)
 8000816:	f000 fcdb 	bl	80011d0 <HAL_GPIO_Init>

}
 800081a:	bf00      	nop
 800081c:	3728      	adds	r7, #40	; 0x28
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40021000 	.word	0x40021000
 8000828:	48000800 	.word	0x48000800

0800082c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000830:	f000 fa9e 	bl	8000d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000834:	f000 f836 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000838:	f7ff ff70 	bl	800071c <MX_GPIO_Init>
  MX_UART5_Init();
 800083c:	f000 f9b4 	bl	8000ba8 <MX_UART5_Init>
  MX_SPI2_Init();
 8000840:	f000 f8a8 	bl	8000994 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  test_backlight();
 8000844:	f7ff fe48 	bl	80004d8 <test_backlight>
  init_display();
 8000848:	f7ff ff32 	bl	80006b0 <init_display>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* Start the transmission process */
    if (HAL_UART_Transmit_IT(&huart5, (uint8_t*)buffer, BUFFERSIZE) != HAL_OK) {
 800084c:	2216      	movs	r2, #22
 800084e:	4912      	ldr	r1, [pc, #72]	; (8000898 <main+0x6c>)
 8000850:	4812      	ldr	r0, [pc, #72]	; (800089c <main+0x70>)
 8000852:	f002 fd4f 	bl	80032f4 <HAL_UART_Transmit_IT>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <main+0x34>
        Error_Handler();
 800085c:	f000 f894 	bl	8000988 <Error_Handler>
    }
    /* Wait for the end of the transfer */
    while (uartReady != SET) {}
 8000860:	bf00      	nop
 8000862:	4b0f      	ldr	r3, [pc, #60]	; (80008a0 <main+0x74>)
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d1fb      	bne.n	8000862 <main+0x36>

    /* Reset transmission flag */
    uartReady = RESET;
 800086a:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <main+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	701a      	strb	r2, [r3, #0]



    /* Put UART peripheral in reception process */
    if(HAL_UART_Receive_IT(&huart5, (uint8_t *)buffer, BUFFERSIZE) != HAL_OK) {
 8000870:	2216      	movs	r2, #22
 8000872:	4909      	ldr	r1, [pc, #36]	; (8000898 <main+0x6c>)
 8000874:	4809      	ldr	r0, [pc, #36]	; (800089c <main+0x70>)
 8000876:	f002 fdab 	bl	80033d0 <HAL_UART_Receive_IT>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <main+0x58>
        Error_Handler();
 8000880:	f000 f882 	bl	8000988 <Error_Handler>
    }
    /* Wait for the end of the transfer */
    while (uartReady != SET) {}
 8000884:	bf00      	nop
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <main+0x74>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b01      	cmp	r3, #1
 800088c:	d1fb      	bne.n	8000886 <main+0x5a>
    /* Reset transmission flag */
    uartReady = RESET;
 800088e:	4b04      	ldr	r3, [pc, #16]	; (80008a0 <main+0x74>)
 8000890:	2200      	movs	r2, #0
 8000892:	701a      	strb	r2, [r3, #0]
    if (HAL_UART_Transmit_IT(&huart5, (uint8_t*)buffer, BUFFERSIZE) != HAL_OK) {
 8000894:	e7da      	b.n	800084c <main+0x20>
 8000896:	bf00      	nop
 8000898:	20000000 	.word	0x20000000
 800089c:	200000a8 	.word	0x200000a8
 80008a0:	20000040 	.word	0x20000040

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b096      	sub	sp, #88	; 0x58
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 0314 	add.w	r3, r7, #20
 80008ae:	2244      	movs	r2, #68	; 0x44
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f004 f8cc 	bl	8004a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	463b      	mov	r3, r7
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80008c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80008ca:	f000 fe51 	bl	8001570 <HAL_PWREx_ControlVoltageScaling>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80008d4:	f000 f858 	bl	8000988 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008d8:	2302      	movs	r3, #2
 80008da:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008e0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008e2:	2310      	movs	r3, #16
 80008e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008e6:	2302      	movs	r3, #2
 80008e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008ea:	2302      	movs	r3, #2
 80008ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008ee:	2301      	movs	r3, #1
 80008f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80008f2:	230a      	movs	r3, #10
 80008f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008f6:	2307      	movs	r3, #7
 80008f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008fa:	2302      	movs	r3, #2
 80008fc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008fe:	2302      	movs	r3, #2
 8000900:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fe88 	bl	800161c <HAL_RCC_OscConfig>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000912:	f000 f839 	bl	8000988 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000916:	230f      	movs	r3, #15
 8000918:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800091a:	2303      	movs	r3, #3
 800091c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800091e:	2300      	movs	r3, #0
 8000920:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000922:	2300      	movs	r3, #0
 8000924:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000926:	2300      	movs	r3, #0
 8000928:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800092a:	463b      	mov	r3, r7
 800092c:	2104      	movs	r1, #4
 800092e:	4618      	mov	r0, r3
 8000930:	f001 fa5a 	bl	8001de8 <HAL_RCC_ClockConfig>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800093a:	f000 f825 	bl	8000988 <Error_Handler>
  }
}
 800093e:	bf00      	nop
 8000940:	3758      	adds	r7, #88	; 0x58
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
	...

08000948 <HAL_UART_TxCpltCallback>:
* @note This example shows a simple way to report end of IT Tx transfer, and
* you can add your own implementation.
* @retval None
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
    /* Set transmission flag: transfer complete*/
    uartReady = SET;
 8000950:	4b04      	ldr	r3, [pc, #16]	; (8000964 <HAL_UART_TxCpltCallback+0x1c>)
 8000952:	2201      	movs	r2, #1
 8000954:	701a      	strb	r2, [r3, #0]
}
 8000956:	bf00      	nop
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	20000040 	.word	0x20000040

08000968 <HAL_UART_RxCpltCallback>:
* @note This example shows a simple way to report end of IT Rx transfer, and
* you can add your own implementation.
* @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
    /* Set transmission flag: transfer complete*/
    uartReady = SET;
 8000970:	4b04      	ldr	r3, [pc, #16]	; (8000984 <HAL_UART_RxCpltCallback+0x1c>)
 8000972:	2201      	movs	r2, #1
 8000974:	701a      	strb	r2, [r3, #0]
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	20000040 	.word	0x20000040

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    handle_error();
 800098c:	f7ff feba 	bl	8000704 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}

08000994 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_SPI2_Init+0x74>)
 800099a:	4a1c      	ldr	r2, [pc, #112]	; (8000a0c <MX_SPI2_Init+0x78>)
 800099c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_SPI2_Init+0x74>)
 80009a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80009a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80009a6:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_SPI2_Init+0x74>)
 80009a8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80009ac:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009ae:	4b16      	ldr	r3, [pc, #88]	; (8000a08 <MX_SPI2_Init+0x74>)
 80009b0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009b4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_SPI2_Init+0x74>)
 80009b8:	2202      	movs	r2, #2
 80009ba:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_SPI2_Init+0x74>)
 80009be:	2201      	movs	r2, #1
 80009c0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80009c2:	4b11      	ldr	r3, [pc, #68]	; (8000a08 <MX_SPI2_Init+0x74>)
 80009c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80009c8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_SPI2_Init+0x74>)
 80009cc:	2230      	movs	r2, #48	; 0x30
 80009ce:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80009d0:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <MX_SPI2_Init+0x74>)
 80009d2:	2280      	movs	r2, #128	; 0x80
 80009d4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009d6:	4b0c      	ldr	r3, [pc, #48]	; (8000a08 <MX_SPI2_Init+0x74>)
 80009d8:	2200      	movs	r2, #0
 80009da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009dc:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <MX_SPI2_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009e2:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <MX_SPI2_Init+0x74>)
 80009e4:	2207      	movs	r2, #7
 80009e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <MX_SPI2_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80009ee:	4b06      	ldr	r3, [pc, #24]	; (8000a08 <MX_SPI2_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_SPI2_Init+0x74>)
 80009f6:	f002 f8b9 	bl	8002b6c <HAL_SPI_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000a00:	f7ff ffc2 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000044 	.word	0x20000044
 8000a0c:	40003800 	.word	0x40003800

08000a10 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b08a      	sub	sp, #40	; 0x28
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
 8000a26:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a25      	ldr	r2, [pc, #148]	; (8000ac4 <HAL_SPI_MspInit+0xb4>)
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	d144      	bne.n	8000abc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000a32:	4b25      	ldr	r3, [pc, #148]	; (8000ac8 <HAL_SPI_MspInit+0xb8>)
 8000a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a36:	4a24      	ldr	r2, [pc, #144]	; (8000ac8 <HAL_SPI_MspInit+0xb8>)
 8000a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a3e:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <HAL_SPI_MspInit+0xb8>)
 8000a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a46:	613b      	str	r3, [r7, #16]
 8000a48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a4a:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <HAL_SPI_MspInit+0xb8>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a1e      	ldr	r2, [pc, #120]	; (8000ac8 <HAL_SPI_MspInit+0xb8>)
 8000a50:	f043 0304 	orr.w	r3, r3, #4
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b1c      	ldr	r3, [pc, #112]	; (8000ac8 <HAL_SPI_MspInit+0xb8>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0304 	and.w	r3, r3, #4
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <HAL_SPI_MspInit+0xb8>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	4a18      	ldr	r2, [pc, #96]	; (8000ac8 <HAL_SPI_MspInit+0xb8>)
 8000a68:	f043 0302 	orr.w	r3, r3, #2
 8000a6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <HAL_SPI_MspInit+0xb8>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = Display_OUT_Pin;
 8000a7a:	2308      	movs	r3, #8
 8000a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a8a:	2305      	movs	r3, #5
 8000a8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Display_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	480d      	ldr	r0, [pc, #52]	; (8000acc <HAL_SPI_MspInit+0xbc>)
 8000a96:	f000 fb9b 	bl	80011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Dispay_CLK_Pin|Display_CS_Pin;
 8000a9a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa8:	2303      	movs	r3, #3
 8000aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000aac:	2305      	movs	r3, #5
 8000aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4806      	ldr	r0, [pc, #24]	; (8000ad0 <HAL_SPI_MspInit+0xc0>)
 8000ab8:	f000 fb8a 	bl	80011d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	; 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40003800 	.word	0x40003800
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	48000800 	.word	0x48000800
 8000ad0:	48000400 	.word	0x48000400

08000ad4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ada:	4b0f      	ldr	r3, [pc, #60]	; (8000b18 <HAL_MspInit+0x44>)
 8000adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ade:	4a0e      	ldr	r2, [pc, #56]	; (8000b18 <HAL_MspInit+0x44>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_MspInit+0x44>)
 8000ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af2:	4b09      	ldr	r3, [pc, #36]	; (8000b18 <HAL_MspInit+0x44>)
 8000af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af6:	4a08      	ldr	r2, [pc, #32]	; (8000b18 <HAL_MspInit+0x44>)
 8000af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afc:	6593      	str	r3, [r2, #88]	; 0x58
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_MspInit+0x44>)
 8000b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b06:	603b      	str	r3, [r7, #0]
 8000b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	370c      	adds	r7, #12
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	40021000 	.word	0x40021000

08000b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <NMI_Handler+0x4>

08000b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <HardFault_Handler+0x4>

08000b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <MemManage_Handler+0x4>

08000b2e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b32:	e7fe      	b.n	8000b32 <BusFault_Handler+0x4>

08000b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <UsageFault_Handler+0x4>

08000b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr

08000b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b68:	f000 f95e 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}

08000b70 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000b74:	4802      	ldr	r0, [pc, #8]	; (8000b80 <UART5_IRQHandler+0x10>)
 8000b76:	f002 fc81 	bl	800347c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000b7a:	bf00      	nop
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200000a8 	.word	0x200000a8

08000b84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <SystemInit+0x20>)
 8000b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b8e:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <SystemInit+0x20>)
 8000b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	e000ed00 	.word	0xe000ed00

08000ba8 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_UART5_Init+0x58>)
 8000bae:	4a15      	ldr	r2, [pc, #84]	; (8000c04 <MX_UART5_Init+0x5c>)
 8000bb0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <MX_UART5_Init+0x58>)
 8000bb4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000bba:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_UART5_Init+0x58>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_UART5_Init+0x58>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <MX_UART5_Init+0x58>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000bcc:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_UART5_Init+0x58>)
 8000bce:	220c      	movs	r2, #12
 8000bd0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd2:	4b0b      	ldr	r3, [pc, #44]	; (8000c00 <MX_UART5_Init+0x58>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd8:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_UART5_Init+0x58>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bde:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <MX_UART5_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_UART5_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000bea:	4805      	ldr	r0, [pc, #20]	; (8000c00 <MX_UART5_Init+0x58>)
 8000bec:	f002 fb34 	bl	8003258 <HAL_UART_Init>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000bf6:	f7ff fec7 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	200000a8 	.word	0x200000a8
 8000c04:	40005000 	.word	0x40005000

08000c08 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b0ac      	sub	sp, #176	; 0xb0
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c20:	f107 0314 	add.w	r3, r7, #20
 8000c24:	2288      	movs	r2, #136	; 0x88
 8000c26:	2100      	movs	r1, #0
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f003 ff11 	bl	8004a50 <memset>
  if(uartHandle->Instance==UART5)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a36      	ldr	r2, [pc, #216]	; (8000d0c <HAL_UART_MspInit+0x104>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d164      	bne.n	8000d02 <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000c38:	2310      	movs	r3, #16
 8000c3a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4618      	mov	r0, r3
 8000c46:	f001 fad5 	bl	80021f4 <HAL_RCCEx_PeriphCLKConfig>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c50:	f7ff fe9a 	bl	8000988 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000c54:	4b2e      	ldr	r3, [pc, #184]	; (8000d10 <HAL_UART_MspInit+0x108>)
 8000c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c58:	4a2d      	ldr	r2, [pc, #180]	; (8000d10 <HAL_UART_MspInit+0x108>)
 8000c5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c60:	4b2b      	ldr	r3, [pc, #172]	; (8000d10 <HAL_UART_MspInit+0x108>)
 8000c62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c6c:	4b28      	ldr	r3, [pc, #160]	; (8000d10 <HAL_UART_MspInit+0x108>)
 8000c6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c70:	4a27      	ldr	r2, [pc, #156]	; (8000d10 <HAL_UART_MspInit+0x108>)
 8000c72:	f043 0304 	orr.w	r3, r3, #4
 8000c76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c78:	4b25      	ldr	r3, [pc, #148]	; (8000d10 <HAL_UART_MspInit+0x108>)
 8000c7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c7c:	f003 0304 	and.w	r3, r3, #4
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c84:	4b22      	ldr	r3, [pc, #136]	; (8000d10 <HAL_UART_MspInit+0x108>)
 8000c86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c88:	4a21      	ldr	r2, [pc, #132]	; (8000d10 <HAL_UART_MspInit+0x108>)
 8000c8a:	f043 0308 	orr.w	r3, r3, #8
 8000c8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c90:	4b1f      	ldr	r3, [pc, #124]	; (8000d10 <HAL_UART_MspInit+0x108>)
 8000c92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c94:	f003 0308 	and.w	r3, r3, #8
 8000c98:	60bb      	str	r3, [r7, #8]
 8000c9a:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ca0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb0:	2303      	movs	r3, #3
 8000cb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000cb6:	2308      	movs	r3, #8
 8000cb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cbc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4814      	ldr	r0, [pc, #80]	; (8000d14 <HAL_UART_MspInit+0x10c>)
 8000cc4:	f000 fa84 	bl	80011d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cc8:	2304      	movs	r3, #4
 8000cca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cda:	2303      	movs	r3, #3
 8000cdc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000ce0:	2308      	movs	r3, #8
 8000ce2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cea:	4619      	mov	r1, r3
 8000cec:	480a      	ldr	r0, [pc, #40]	; (8000d18 <HAL_UART_MspInit+0x110>)
 8000cee:	f000 fa6f 	bl	80011d0 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2035      	movs	r0, #53	; 0x35
 8000cf8:	f000 f9b5 	bl	8001066 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000cfc:	2035      	movs	r0, #53	; 0x35
 8000cfe:	f000 f9ce 	bl	800109e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8000d02:	bf00      	nop
 8000d04:	37b0      	adds	r7, #176	; 0xb0
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40005000 	.word	0x40005000
 8000d10:	40021000 	.word	0x40021000
 8000d14:	48000800 	.word	0x48000800
 8000d18:	48000c00 	.word	0x48000c00

08000d1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d20:	f7ff ff30 	bl	8000b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d24:	480c      	ldr	r0, [pc, #48]	; (8000d58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d26:	490d      	ldr	r1, [pc, #52]	; (8000d5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d28:	4a0d      	ldr	r2, [pc, #52]	; (8000d60 <LoopForever+0xe>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d3c:	4c0a      	ldr	r4, [pc, #40]	; (8000d68 <LoopForever+0x16>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d4a:	f003 fe5d 	bl	8004a08 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d4e:	f7ff fd6d 	bl	800082c <main>

08000d52 <LoopForever>:

LoopForever:
    b LoopForever
 8000d52:	e7fe      	b.n	8000d52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d54:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d5c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000d60:	08004af8 	.word	0x08004af8
  ldr r2, =_sbss
 8000d64:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000d68:	20000130 	.word	0x20000130

08000d6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC1_2_IRQHandler>
	...

08000d70 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d76:	2300      	movs	r3, #0
 8000d78:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d7a:	4b0c      	ldr	r3, [pc, #48]	; (8000dac <HAL_Init+0x3c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a0b      	ldr	r2, [pc, #44]	; (8000dac <HAL_Init+0x3c>)
 8000d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d84:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d86:	2003      	movs	r0, #3
 8000d88:	f000 f962 	bl	8001050 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f000 f80f 	bl	8000db0 <HAL_InitTick>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d002      	beq.n	8000d9e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d98:	2301      	movs	r3, #1
 8000d9a:	71fb      	strb	r3, [r7, #7]
 8000d9c:	e001      	b.n	8000da2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d9e:	f7ff fe99 	bl	8000ad4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000da2:	79fb      	ldrb	r3, [r7, #7]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40022000 	.word	0x40022000

08000db0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b084      	sub	sp, #16
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db8:	2300      	movs	r3, #0
 8000dba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000dbc:	4b17      	ldr	r3, [pc, #92]	; (8000e1c <HAL_InitTick+0x6c>)
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d023      	beq.n	8000e0c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000dc4:	4b16      	ldr	r3, [pc, #88]	; (8000e20 <HAL_InitTick+0x70>)
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <HAL_InitTick+0x6c>)
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	4619      	mov	r1, r3
 8000dce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f000 f96d 	bl	80010ba <HAL_SYSTICK_Config>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10f      	bne.n	8000e06 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2b0f      	cmp	r3, #15
 8000dea:	d809      	bhi.n	8000e00 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dec:	2200      	movs	r2, #0
 8000dee:	6879      	ldr	r1, [r7, #4]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	f000 f937 	bl	8001066 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df8:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <HAL_InitTick+0x74>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e007      	b.n	8000e10 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	e004      	b.n	8000e10 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]
 8000e0a:	e001      	b.n	8000e10 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3710      	adds	r7, #16
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000020 	.word	0x20000020
 8000e20:	20000018 	.word	0x20000018
 8000e24:	2000001c 	.word	0x2000001c

08000e28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <HAL_IncTick+0x20>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <HAL_IncTick+0x24>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a04      	ldr	r2, [pc, #16]	; (8000e4c <HAL_IncTick+0x24>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000020 	.word	0x20000020
 8000e4c:	2000012c 	.word	0x2000012c

08000e50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  return uwTick;
 8000e54:	4b03      	ldr	r3, [pc, #12]	; (8000e64 <HAL_GetTick+0x14>)
 8000e56:	681b      	ldr	r3, [r3, #0]
}
 8000e58:	4618      	mov	r0, r3
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop
 8000e64:	2000012c 	.word	0x2000012c

08000e68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b084      	sub	sp, #16
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e70:	f7ff ffee 	bl	8000e50 <HAL_GetTick>
 8000e74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e80:	d005      	beq.n	8000e8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e82:	4b0a      	ldr	r3, [pc, #40]	; (8000eac <HAL_Delay+0x44>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	461a      	mov	r2, r3
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	4413      	add	r3, r2
 8000e8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e8e:	bf00      	nop
 8000e90:	f7ff ffde 	bl	8000e50 <HAL_GetTick>
 8000e94:	4602      	mov	r2, r0
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	68fa      	ldr	r2, [r7, #12]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d8f7      	bhi.n	8000e90 <HAL_Delay+0x28>
  {
  }
}
 8000ea0:	bf00      	nop
 8000ea2:	bf00      	nop
 8000ea4:	3710      	adds	r7, #16
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000020 	.word	0x20000020

08000eb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	f003 0307 	and.w	r3, r3, #7
 8000ebe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ec0:	4b0c      	ldr	r3, [pc, #48]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ecc:	4013      	ands	r3, r2
 8000ece:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000edc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ee0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ee2:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ee4:	68bb      	ldr	r3, [r7, #8]
 8000ee6:	60d3      	str	r3, [r2, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	3714      	adds	r7, #20
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <__NVIC_GetPriorityGrouping+0x18>)
 8000efe:	68db      	ldr	r3, [r3, #12]
 8000f00:	0a1b      	lsrs	r3, r3, #8
 8000f02:	f003 0307 	and.w	r3, r3, #7
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b083      	sub	sp, #12
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	db0b      	blt.n	8000f3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	f003 021f 	and.w	r2, r3, #31
 8000f2c:	4907      	ldr	r1, [pc, #28]	; (8000f4c <__NVIC_EnableIRQ+0x38>)
 8000f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f32:	095b      	lsrs	r3, r3, #5
 8000f34:	2001      	movs	r0, #1
 8000f36:	fa00 f202 	lsl.w	r2, r0, r2
 8000f3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f3e:	bf00      	nop
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	e000e100 	.word	0xe000e100

08000f50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	6039      	str	r1, [r7, #0]
 8000f5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	db0a      	blt.n	8000f7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	490c      	ldr	r1, [pc, #48]	; (8000f9c <__NVIC_SetPriority+0x4c>)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	0112      	lsls	r2, r2, #4
 8000f70:	b2d2      	uxtb	r2, r2
 8000f72:	440b      	add	r3, r1
 8000f74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f78:	e00a      	b.n	8000f90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	b2da      	uxtb	r2, r3
 8000f7e:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <__NVIC_SetPriority+0x50>)
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	f003 030f 	and.w	r3, r3, #15
 8000f86:	3b04      	subs	r3, #4
 8000f88:	0112      	lsls	r2, r2, #4
 8000f8a:	b2d2      	uxtb	r2, r2
 8000f8c:	440b      	add	r3, r1
 8000f8e:	761a      	strb	r2, [r3, #24]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000e100 	.word	0xe000e100
 8000fa0:	e000ed00 	.word	0xe000ed00

08000fa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b089      	sub	sp, #36	; 0x24
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	60f8      	str	r0, [r7, #12]
 8000fac:	60b9      	str	r1, [r7, #8]
 8000fae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	f1c3 0307 	rsb	r3, r3, #7
 8000fbe:	2b04      	cmp	r3, #4
 8000fc0:	bf28      	it	cs
 8000fc2:	2304      	movcs	r3, #4
 8000fc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	3304      	adds	r3, #4
 8000fca:	2b06      	cmp	r3, #6
 8000fcc:	d902      	bls.n	8000fd4 <NVIC_EncodePriority+0x30>
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3b03      	subs	r3, #3
 8000fd2:	e000      	b.n	8000fd6 <NVIC_EncodePriority+0x32>
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	f04f 32ff 	mov.w	r2, #4294967295
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe2:	43da      	mvns	r2, r3
 8000fe4:	68bb      	ldr	r3, [r7, #8]
 8000fe6:	401a      	ands	r2, r3
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fec:	f04f 31ff 	mov.w	r1, #4294967295
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ff6:	43d9      	mvns	r1, r3
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ffc:	4313      	orrs	r3, r2
         );
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
	...

0800100c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800101c:	d301      	bcc.n	8001022 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800101e:	2301      	movs	r3, #1
 8001020:	e00f      	b.n	8001042 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001022:	4a0a      	ldr	r2, [pc, #40]	; (800104c <SysTick_Config+0x40>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3b01      	subs	r3, #1
 8001028:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102a:	210f      	movs	r1, #15
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f7ff ff8e 	bl	8000f50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001034:	4b05      	ldr	r3, [pc, #20]	; (800104c <SysTick_Config+0x40>)
 8001036:	2200      	movs	r2, #0
 8001038:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103a:	4b04      	ldr	r3, [pc, #16]	; (800104c <SysTick_Config+0x40>)
 800103c:	2207      	movs	r2, #7
 800103e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	e000e010 	.word	0xe000e010

08001050 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f7ff ff29 	bl	8000eb0 <__NVIC_SetPriorityGrouping>
}
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}

08001066 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	b086      	sub	sp, #24
 800106a:	af00      	add	r7, sp, #0
 800106c:	4603      	mov	r3, r0
 800106e:	60b9      	str	r1, [r7, #8]
 8001070:	607a      	str	r2, [r7, #4]
 8001072:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001078:	f7ff ff3e 	bl	8000ef8 <__NVIC_GetPriorityGrouping>
 800107c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800107e:	687a      	ldr	r2, [r7, #4]
 8001080:	68b9      	ldr	r1, [r7, #8]
 8001082:	6978      	ldr	r0, [r7, #20]
 8001084:	f7ff ff8e 	bl	8000fa4 <NVIC_EncodePriority>
 8001088:	4602      	mov	r2, r0
 800108a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800108e:	4611      	mov	r1, r2
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff ff5d 	bl	8000f50 <__NVIC_SetPriority>
}
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}

0800109e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109e:	b580      	push	{r7, lr}
 80010a0:	b082      	sub	sp, #8
 80010a2:	af00      	add	r7, sp, #0
 80010a4:	4603      	mov	r3, r0
 80010a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff ff31 	bl	8000f14 <__NVIC_EnableIRQ>
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}

080010ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ba:	b580      	push	{r7, lr}
 80010bc:	b082      	sub	sp, #8
 80010be:	af00      	add	r7, sp, #0
 80010c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff ffa2 	bl	800100c <SysTick_Config>
 80010c8:	4603      	mov	r3, r0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010d2:	b480      	push	{r7}
 80010d4:	b085      	sub	sp, #20
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010da:	2300      	movs	r3, #0
 80010dc:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d008      	beq.n	80010fc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2204      	movs	r2, #4
 80010ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	2200      	movs	r2, #0
 80010f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e022      	b.n	8001142 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 020e 	bic.w	r2, r2, #14
 800110a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f022 0201 	bic.w	r2, r2, #1
 800111a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001120:	f003 021c 	and.w	r2, r3, #28
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001128:	2101      	movs	r1, #1
 800112a:	fa01 f202 	lsl.w	r2, r1, r2
 800112e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2201      	movs	r2, #1
 8001134:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2200      	movs	r2, #0
 800113c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001140:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001142:	4618      	mov	r0, r3
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800114e:	b580      	push	{r7, lr}
 8001150:	b084      	sub	sp, #16
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001156:	2300      	movs	r3, #0
 8001158:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b02      	cmp	r3, #2
 8001164:	d005      	beq.n	8001172 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2204      	movs	r2, #4
 800116a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800116c:	2301      	movs	r3, #1
 800116e:	73fb      	strb	r3, [r7, #15]
 8001170:	e029      	b.n	80011c6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f022 020e 	bic.w	r2, r2, #14
 8001180:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f022 0201 	bic.w	r2, r2, #1
 8001190:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f003 021c 	and.w	r2, r3, #28
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	2101      	movs	r1, #1
 80011a0:	fa01 f202 	lsl.w	r2, r1, r2
 80011a4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2201      	movs	r2, #1
 80011aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2200      	movs	r2, #0
 80011b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	4798      	blx	r3
    }
  }
  return status;
 80011c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}

080011d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b087      	sub	sp, #28
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011da:	2300      	movs	r3, #0
 80011dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011de:	e17f      	b.n	80014e0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2101      	movs	r1, #1
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	fa01 f303 	lsl.w	r3, r1, r3
 80011ec:	4013      	ands	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 8171 	beq.w	80014da <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b01      	cmp	r3, #1
 8001202:	d005      	beq.n	8001210 <HAL_GPIO_Init+0x40>
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d130      	bne.n	8001272 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	2203      	movs	r2, #3
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	43db      	mvns	r3, r3
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	68da      	ldr	r2, [r3, #12]
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	693a      	ldr	r2, [r7, #16]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001246:	2201      	movs	r2, #1
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	091b      	lsrs	r3, r3, #4
 800125c:	f003 0201 	and.w	r2, r3, #1
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f003 0303 	and.w	r3, r3, #3
 800127a:	2b03      	cmp	r3, #3
 800127c:	d118      	bne.n	80012b0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001282:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001284:	2201      	movs	r2, #1
 8001286:	697b      	ldr	r3, [r7, #20]
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	4013      	ands	r3, r2
 8001292:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	08db      	lsrs	r3, r3, #3
 800129a:	f003 0201 	and.w	r2, r3, #1
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	693a      	ldr	r2, [r7, #16]
 80012a6:	4313      	orrs	r3, r2
 80012a8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	693a      	ldr	r2, [r7, #16]
 80012ae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f003 0303 	and.w	r3, r3, #3
 80012b8:	2b03      	cmp	r3, #3
 80012ba:	d017      	beq.n	80012ec <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	2203      	movs	r2, #3
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	43db      	mvns	r3, r3
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4013      	ands	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	005b      	lsls	r3, r3, #1
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	693a      	ldr	r2, [r7, #16]
 80012ea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	f003 0303 	and.w	r3, r3, #3
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d123      	bne.n	8001340 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012f8:	697b      	ldr	r3, [r7, #20]
 80012fa:	08da      	lsrs	r2, r3, #3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3208      	adds	r2, #8
 8001300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	f003 0307 	and.w	r3, r3, #7
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	220f      	movs	r2, #15
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	691a      	ldr	r2, [r3, #16]
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f003 0307 	and.w	r3, r3, #7
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	693a      	ldr	r2, [r7, #16]
 800132e:	4313      	orrs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	08da      	lsrs	r2, r3, #3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	3208      	adds	r2, #8
 800133a:	6939      	ldr	r1, [r7, #16]
 800133c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4013      	ands	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f003 0203 	and.w	r2, r3, #3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	693a      	ldr	r2, [r7, #16]
 800136a:	4313      	orrs	r3, r2
 800136c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	693a      	ldr	r2, [r7, #16]
 8001372:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 80ac 	beq.w	80014da <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001382:	4b5f      	ldr	r3, [pc, #380]	; (8001500 <HAL_GPIO_Init+0x330>)
 8001384:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001386:	4a5e      	ldr	r2, [pc, #376]	; (8001500 <HAL_GPIO_Init+0x330>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6613      	str	r3, [r2, #96]	; 0x60
 800138e:	4b5c      	ldr	r3, [pc, #368]	; (8001500 <HAL_GPIO_Init+0x330>)
 8001390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800139a:	4a5a      	ldr	r2, [pc, #360]	; (8001504 <HAL_GPIO_Init+0x334>)
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	3302      	adds	r3, #2
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	220f      	movs	r2, #15
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013c4:	d025      	beq.n	8001412 <HAL_GPIO_Init+0x242>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a4f      	ldr	r2, [pc, #316]	; (8001508 <HAL_GPIO_Init+0x338>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d01f      	beq.n	800140e <HAL_GPIO_Init+0x23e>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a4e      	ldr	r2, [pc, #312]	; (800150c <HAL_GPIO_Init+0x33c>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d019      	beq.n	800140a <HAL_GPIO_Init+0x23a>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a4d      	ldr	r2, [pc, #308]	; (8001510 <HAL_GPIO_Init+0x340>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d013      	beq.n	8001406 <HAL_GPIO_Init+0x236>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a4c      	ldr	r2, [pc, #304]	; (8001514 <HAL_GPIO_Init+0x344>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d00d      	beq.n	8001402 <HAL_GPIO_Init+0x232>
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a4b      	ldr	r2, [pc, #300]	; (8001518 <HAL_GPIO_Init+0x348>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d007      	beq.n	80013fe <HAL_GPIO_Init+0x22e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4a      	ldr	r2, [pc, #296]	; (800151c <HAL_GPIO_Init+0x34c>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d101      	bne.n	80013fa <HAL_GPIO_Init+0x22a>
 80013f6:	2306      	movs	r3, #6
 80013f8:	e00c      	b.n	8001414 <HAL_GPIO_Init+0x244>
 80013fa:	2307      	movs	r3, #7
 80013fc:	e00a      	b.n	8001414 <HAL_GPIO_Init+0x244>
 80013fe:	2305      	movs	r3, #5
 8001400:	e008      	b.n	8001414 <HAL_GPIO_Init+0x244>
 8001402:	2304      	movs	r3, #4
 8001404:	e006      	b.n	8001414 <HAL_GPIO_Init+0x244>
 8001406:	2303      	movs	r3, #3
 8001408:	e004      	b.n	8001414 <HAL_GPIO_Init+0x244>
 800140a:	2302      	movs	r3, #2
 800140c:	e002      	b.n	8001414 <HAL_GPIO_Init+0x244>
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <HAL_GPIO_Init+0x244>
 8001412:	2300      	movs	r3, #0
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	f002 0203 	and.w	r2, r2, #3
 800141a:	0092      	lsls	r2, r2, #2
 800141c:	4093      	lsls	r3, r2
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4313      	orrs	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001424:	4937      	ldr	r1, [pc, #220]	; (8001504 <HAL_GPIO_Init+0x334>)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	3302      	adds	r3, #2
 800142c:	693a      	ldr	r2, [r7, #16]
 800142e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001432:	4b3b      	ldr	r3, [pc, #236]	; (8001520 <HAL_GPIO_Init+0x350>)
 8001434:	689b      	ldr	r3, [r3, #8]
 8001436:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	43db      	mvns	r3, r3
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	4013      	ands	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d003      	beq.n	8001456 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	4313      	orrs	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001456:	4a32      	ldr	r2, [pc, #200]	; (8001520 <HAL_GPIO_Init+0x350>)
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800145c:	4b30      	ldr	r3, [pc, #192]	; (8001520 <HAL_GPIO_Init+0x350>)
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	43db      	mvns	r3, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	685b      	ldr	r3, [r3, #4]
 8001470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001474:	2b00      	cmp	r3, #0
 8001476:	d003      	beq.n	8001480 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	4313      	orrs	r3, r2
 800147e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001480:	4a27      	ldr	r2, [pc, #156]	; (8001520 <HAL_GPIO_Init+0x350>)
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001486:	4b26      	ldr	r3, [pc, #152]	; (8001520 <HAL_GPIO_Init+0x350>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	43db      	mvns	r3, r3
 8001490:	693a      	ldr	r2, [r7, #16]
 8001492:	4013      	ands	r3, r2
 8001494:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	4313      	orrs	r3, r2
 80014a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014aa:	4a1d      	ldr	r2, [pc, #116]	; (8001520 <HAL_GPIO_Init+0x350>)
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	; (8001520 <HAL_GPIO_Init+0x350>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014d4:	4a12      	ldr	r2, [pc, #72]	; (8001520 <HAL_GPIO_Init+0x350>)
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	3301      	adds	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	697b      	ldr	r3, [r7, #20]
 80014e6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	f47f ae78 	bne.w	80011e0 <HAL_GPIO_Init+0x10>
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	371c      	adds	r7, #28
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000
 8001504:	40010000 	.word	0x40010000
 8001508:	48000400 	.word	0x48000400
 800150c:	48000800 	.word	0x48000800
 8001510:	48000c00 	.word	0x48000c00
 8001514:	48001000 	.word	0x48001000
 8001518:	48001400 	.word	0x48001400
 800151c:	48001800 	.word	0x48001800
 8001520:	40010400 	.word	0x40010400

08001524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	807b      	strh	r3, [r7, #2]
 8001530:	4613      	mov	r3, r2
 8001532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001534:	787b      	ldrb	r3, [r7, #1]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800153a:	887a      	ldrh	r2, [r7, #2]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001540:	e002      	b.n	8001548 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001542:	887a      	ldrh	r2, [r7, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr

08001554 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001558:	4b04      	ldr	r3, [pc, #16]	; (800156c <HAL_PWREx_GetVoltageRange+0x18>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001560:	4618      	mov	r0, r3
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	40007000 	.word	0x40007000

08001570 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800157e:	d130      	bne.n	80015e2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001580:	4b23      	ldr	r3, [pc, #140]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800158c:	d038      	beq.n	8001600 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800158e:	4b20      	ldr	r3, [pc, #128]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001596:	4a1e      	ldr	r2, [pc, #120]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001598:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800159c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800159e:	4b1d      	ldr	r3, [pc, #116]	; (8001614 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2232      	movs	r2, #50	; 0x32
 80015a4:	fb02 f303 	mul.w	r3, r2, r3
 80015a8:	4a1b      	ldr	r2, [pc, #108]	; (8001618 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80015aa:	fba2 2303 	umull	r2, r3, r2, r3
 80015ae:	0c9b      	lsrs	r3, r3, #18
 80015b0:	3301      	adds	r3, #1
 80015b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015b4:	e002      	b.n	80015bc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	3b01      	subs	r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015bc:	4b14      	ldr	r3, [pc, #80]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015be:	695b      	ldr	r3, [r3, #20]
 80015c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c8:	d102      	bne.n	80015d0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d1f2      	bne.n	80015b6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d2:	695b      	ldr	r3, [r3, #20]
 80015d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015dc:	d110      	bne.n	8001600 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e00f      	b.n	8001602 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015e2:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ee:	d007      	beq.n	8001600 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015f0:	4b07      	ldr	r3, [pc, #28]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015f8:	4a05      	ldr	r2, [pc, #20]	; (8001610 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015fe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3714      	adds	r7, #20
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40007000 	.word	0x40007000
 8001614:	20000018 	.word	0x20000018
 8001618:	431bde83 	.word	0x431bde83

0800161c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d101      	bne.n	800162e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e3d4      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800162e:	4ba1      	ldr	r3, [pc, #644]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	f003 030c 	and.w	r3, r3, #12
 8001636:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001638:	4b9e      	ldr	r3, [pc, #632]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0310 	and.w	r3, r3, #16
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 80e4 	beq.w	8001818 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d007      	beq.n	8001666 <HAL_RCC_OscConfig+0x4a>
 8001656:	69bb      	ldr	r3, [r7, #24]
 8001658:	2b0c      	cmp	r3, #12
 800165a:	f040 808b 	bne.w	8001774 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	2b01      	cmp	r3, #1
 8001662:	f040 8087 	bne.w	8001774 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001666:	4b93      	ldr	r3, [pc, #588]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d005      	beq.n	800167e <HAL_RCC_OscConfig+0x62>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e3ac      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a1a      	ldr	r2, [r3, #32]
 8001682:	4b8c      	ldr	r3, [pc, #560]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d004      	beq.n	8001698 <HAL_RCC_OscConfig+0x7c>
 800168e:	4b89      	ldr	r3, [pc, #548]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001696:	e005      	b.n	80016a4 <HAL_RCC_OscConfig+0x88>
 8001698:	4b86      	ldr	r3, [pc, #536]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 800169a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800169e:	091b      	lsrs	r3, r3, #4
 80016a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d223      	bcs.n	80016f0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f000 fd41 	bl	8002134 <RCC_SetFlashLatencyFromMSIRange>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e38d      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016bc:	4b7d      	ldr	r3, [pc, #500]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a7c      	ldr	r2, [pc, #496]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 80016c2:	f043 0308 	orr.w	r3, r3, #8
 80016c6:	6013      	str	r3, [r2, #0]
 80016c8:	4b7a      	ldr	r3, [pc, #488]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a1b      	ldr	r3, [r3, #32]
 80016d4:	4977      	ldr	r1, [pc, #476]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 80016d6:	4313      	orrs	r3, r2
 80016d8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016da:	4b76      	ldr	r3, [pc, #472]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	021b      	lsls	r3, r3, #8
 80016e8:	4972      	ldr	r1, [pc, #456]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 80016ea:	4313      	orrs	r3, r2
 80016ec:	604b      	str	r3, [r1, #4]
 80016ee:	e025      	b.n	800173c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016f0:	4b70      	ldr	r3, [pc, #448]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a6f      	ldr	r2, [pc, #444]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 80016f6:	f043 0308 	orr.w	r3, r3, #8
 80016fa:	6013      	str	r3, [r2, #0]
 80016fc:	4b6d      	ldr	r3, [pc, #436]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	496a      	ldr	r1, [pc, #424]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 800170a:	4313      	orrs	r3, r2
 800170c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800170e:	4b69      	ldr	r3, [pc, #420]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69db      	ldr	r3, [r3, #28]
 800171a:	021b      	lsls	r3, r3, #8
 800171c:	4965      	ldr	r1, [pc, #404]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 800171e:	4313      	orrs	r3, r2
 8001720:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d109      	bne.n	800173c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4618      	mov	r0, r3
 800172e:	f000 fd01 	bl	8002134 <RCC_SetFlashLatencyFromMSIRange>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e34d      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800173c:	f000 fc36 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 8001740:	4602      	mov	r2, r0
 8001742:	4b5c      	ldr	r3, [pc, #368]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	091b      	lsrs	r3, r3, #4
 8001748:	f003 030f 	and.w	r3, r3, #15
 800174c:	495a      	ldr	r1, [pc, #360]	; (80018b8 <HAL_RCC_OscConfig+0x29c>)
 800174e:	5ccb      	ldrb	r3, [r1, r3]
 8001750:	f003 031f 	and.w	r3, r3, #31
 8001754:	fa22 f303 	lsr.w	r3, r2, r3
 8001758:	4a58      	ldr	r2, [pc, #352]	; (80018bc <HAL_RCC_OscConfig+0x2a0>)
 800175a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800175c:	4b58      	ldr	r3, [pc, #352]	; (80018c0 <HAL_RCC_OscConfig+0x2a4>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fb25 	bl	8000db0 <HAL_InitTick>
 8001766:	4603      	mov	r3, r0
 8001768:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d052      	beq.n	8001816 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001770:	7bfb      	ldrb	r3, [r7, #15]
 8001772:	e331      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d032      	beq.n	80017e2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800177c:	4b4d      	ldr	r3, [pc, #308]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a4c      	ldr	r2, [pc, #304]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 8001782:	f043 0301 	orr.w	r3, r3, #1
 8001786:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001788:	f7ff fb62 	bl	8000e50 <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001790:	f7ff fb5e 	bl	8000e50 <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e31a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80017a2:	4b44      	ldr	r3, [pc, #272]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f003 0302 	and.w	r3, r3, #2
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ae:	4b41      	ldr	r3, [pc, #260]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a40      	ldr	r2, [pc, #256]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 80017b4:	f043 0308 	orr.w	r3, r3, #8
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	4b3e      	ldr	r3, [pc, #248]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6a1b      	ldr	r3, [r3, #32]
 80017c6:	493b      	ldr	r1, [pc, #236]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 80017c8:	4313      	orrs	r3, r2
 80017ca:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017cc:	4b39      	ldr	r3, [pc, #228]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	69db      	ldr	r3, [r3, #28]
 80017d8:	021b      	lsls	r3, r3, #8
 80017da:	4936      	ldr	r1, [pc, #216]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	604b      	str	r3, [r1, #4]
 80017e0:	e01a      	b.n	8001818 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017e2:	4b34      	ldr	r3, [pc, #208]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a33      	ldr	r2, [pc, #204]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 80017e8:	f023 0301 	bic.w	r3, r3, #1
 80017ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017ee:	f7ff fb2f 	bl	8000e50 <HAL_GetTick>
 80017f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017f6:	f7ff fb2b 	bl	8000e50 <HAL_GetTick>
 80017fa:	4602      	mov	r2, r0
 80017fc:	693b      	ldr	r3, [r7, #16]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e2e7      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001808:	4b2a      	ldr	r3, [pc, #168]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0302 	and.w	r3, r3, #2
 8001810:	2b00      	cmp	r3, #0
 8001812:	d1f0      	bne.n	80017f6 <HAL_RCC_OscConfig+0x1da>
 8001814:	e000      	b.n	8001818 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001816:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f003 0301 	and.w	r3, r3, #1
 8001820:	2b00      	cmp	r3, #0
 8001822:	d074      	beq.n	800190e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b08      	cmp	r3, #8
 8001828:	d005      	beq.n	8001836 <HAL_RCC_OscConfig+0x21a>
 800182a:	69bb      	ldr	r3, [r7, #24]
 800182c:	2b0c      	cmp	r3, #12
 800182e:	d10e      	bne.n	800184e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	2b03      	cmp	r3, #3
 8001834:	d10b      	bne.n	800184e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001836:	4b1f      	ldr	r3, [pc, #124]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d064      	beq.n	800190c <HAL_RCC_OscConfig+0x2f0>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d160      	bne.n	800190c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e2c4      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001856:	d106      	bne.n	8001866 <HAL_RCC_OscConfig+0x24a>
 8001858:	4b16      	ldr	r3, [pc, #88]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a15      	ldr	r2, [pc, #84]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 800185e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	e01d      	b.n	80018a2 <HAL_RCC_OscConfig+0x286>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800186e:	d10c      	bne.n	800188a <HAL_RCC_OscConfig+0x26e>
 8001870:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a0f      	ldr	r2, [pc, #60]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 8001876:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a0c      	ldr	r2, [pc, #48]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 8001882:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001886:	6013      	str	r3, [r2, #0]
 8001888:	e00b      	b.n	80018a2 <HAL_RCC_OscConfig+0x286>
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a09      	ldr	r2, [pc, #36]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 8001890:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001894:	6013      	str	r3, [r2, #0]
 8001896:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4a06      	ldr	r2, [pc, #24]	; (80018b4 <HAL_RCC_OscConfig+0x298>)
 800189c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d01c      	beq.n	80018e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018aa:	f7ff fad1 	bl	8000e50 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018b0:	e011      	b.n	80018d6 <HAL_RCC_OscConfig+0x2ba>
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000
 80018b8:	08004aa0 	.word	0x08004aa0
 80018bc:	20000018 	.word	0x20000018
 80018c0:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c4:	f7ff fac4 	bl	8000e50 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b64      	cmp	r3, #100	; 0x64
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e280      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018d6:	4baf      	ldr	r3, [pc, #700]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x2a8>
 80018e2:	e014      	b.n	800190e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e4:	f7ff fab4 	bl	8000e50 <HAL_GetTick>
 80018e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ea:	e008      	b.n	80018fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018ec:	f7ff fab0 	bl	8000e50 <HAL_GetTick>
 80018f0:	4602      	mov	r2, r0
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	1ad3      	subs	r3, r2, r3
 80018f6:	2b64      	cmp	r3, #100	; 0x64
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e26c      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018fe:	4ba5      	ldr	r3, [pc, #660]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d1f0      	bne.n	80018ec <HAL_RCC_OscConfig+0x2d0>
 800190a:	e000      	b.n	800190e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800190c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d060      	beq.n	80019dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	2b04      	cmp	r3, #4
 800191e:	d005      	beq.n	800192c <HAL_RCC_OscConfig+0x310>
 8001920:	69bb      	ldr	r3, [r7, #24]
 8001922:	2b0c      	cmp	r3, #12
 8001924:	d119      	bne.n	800195a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d116      	bne.n	800195a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800192c:	4b99      	ldr	r3, [pc, #612]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001934:	2b00      	cmp	r3, #0
 8001936:	d005      	beq.n	8001944 <HAL_RCC_OscConfig+0x328>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e249      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001944:	4b93      	ldr	r3, [pc, #588]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	691b      	ldr	r3, [r3, #16]
 8001950:	061b      	lsls	r3, r3, #24
 8001952:	4990      	ldr	r1, [pc, #576]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001954:	4313      	orrs	r3, r2
 8001956:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001958:	e040      	b.n	80019dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	68db      	ldr	r3, [r3, #12]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d023      	beq.n	80019aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001962:	4b8c      	ldr	r3, [pc, #560]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a8b      	ldr	r2, [pc, #556]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001968:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800196c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196e:	f7ff fa6f 	bl	8000e50 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001976:	f7ff fa6b 	bl	8000e50 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e227      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001988:	4b82      	ldr	r3, [pc, #520]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001994:	4b7f      	ldr	r3, [pc, #508]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	691b      	ldr	r3, [r3, #16]
 80019a0:	061b      	lsls	r3, r3, #24
 80019a2:	497c      	ldr	r1, [pc, #496]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 80019a4:	4313      	orrs	r3, r2
 80019a6:	604b      	str	r3, [r1, #4]
 80019a8:	e018      	b.n	80019dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019aa:	4b7a      	ldr	r3, [pc, #488]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a79      	ldr	r2, [pc, #484]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 80019b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b6:	f7ff fa4b 	bl	8000e50 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019be:	f7ff fa47 	bl	8000e50 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e203      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019d0:	4b70      	ldr	r3, [pc, #448]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d1f0      	bne.n	80019be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0308 	and.w	r3, r3, #8
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d03c      	beq.n	8001a62 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	695b      	ldr	r3, [r3, #20]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d01c      	beq.n	8001a2a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019f0:	4b68      	ldr	r3, [pc, #416]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 80019f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019f6:	4a67      	ldr	r2, [pc, #412]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 80019f8:	f043 0301 	orr.w	r3, r3, #1
 80019fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a00:	f7ff fa26 	bl	8000e50 <HAL_GetTick>
 8001a04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a08:	f7ff fa22 	bl	8000e50 <HAL_GetTick>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e1de      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a1a:	4b5e      	ldr	r3, [pc, #376]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a20:	f003 0302 	and.w	r3, r3, #2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0ef      	beq.n	8001a08 <HAL_RCC_OscConfig+0x3ec>
 8001a28:	e01b      	b.n	8001a62 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a2a:	4b5a      	ldr	r3, [pc, #360]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a30:	4a58      	ldr	r2, [pc, #352]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001a32:	f023 0301 	bic.w	r3, r3, #1
 8001a36:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a3a:	f7ff fa09 	bl	8000e50 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a42:	f7ff fa05 	bl	8000e50 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e1c1      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a54:	4b4f      	ldr	r3, [pc, #316]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001a56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a5a:	f003 0302 	and.w	r3, r3, #2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1ef      	bne.n	8001a42 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f003 0304 	and.w	r3, r3, #4
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f000 80a6 	beq.w	8001bbc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a70:	2300      	movs	r3, #0
 8001a72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a74:	4b47      	ldr	r3, [pc, #284]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d10d      	bne.n	8001a9c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a80:	4b44      	ldr	r3, [pc, #272]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a84:	4a43      	ldr	r2, [pc, #268]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001a86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a8a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a8c:	4b41      	ldr	r3, [pc, #260]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a94:	60bb      	str	r3, [r7, #8]
 8001a96:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a9c:	4b3e      	ldr	r3, [pc, #248]	; (8001b98 <HAL_RCC_OscConfig+0x57c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d118      	bne.n	8001ada <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aa8:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <HAL_RCC_OscConfig+0x57c>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a3a      	ldr	r2, [pc, #232]	; (8001b98 <HAL_RCC_OscConfig+0x57c>)
 8001aae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ab2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ab4:	f7ff f9cc 	bl	8000e50 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001abc:	f7ff f9c8 	bl	8000e50 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e184      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ace:	4b32      	ldr	r3, [pc, #200]	; (8001b98 <HAL_RCC_OscConfig+0x57c>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d108      	bne.n	8001af4 <HAL_RCC_OscConfig+0x4d8>
 8001ae2:	4b2c      	ldr	r3, [pc, #176]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae8:	4a2a      	ldr	r2, [pc, #168]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001aea:	f043 0301 	orr.w	r3, r3, #1
 8001aee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001af2:	e024      	b.n	8001b3e <HAL_RCC_OscConfig+0x522>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b05      	cmp	r3, #5
 8001afa:	d110      	bne.n	8001b1e <HAL_RCC_OscConfig+0x502>
 8001afc:	4b25      	ldr	r3, [pc, #148]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001afe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b02:	4a24      	ldr	r2, [pc, #144]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001b04:	f043 0304 	orr.w	r3, r3, #4
 8001b08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b0c:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b12:	4a20      	ldr	r2, [pc, #128]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b1c:	e00f      	b.n	8001b3e <HAL_RCC_OscConfig+0x522>
 8001b1e:	4b1d      	ldr	r3, [pc, #116]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b24:	4a1b      	ldr	r2, [pc, #108]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b2e:	4b19      	ldr	r3, [pc, #100]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001b30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b34:	4a17      	ldr	r2, [pc, #92]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001b36:	f023 0304 	bic.w	r3, r3, #4
 8001b3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d016      	beq.n	8001b74 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b46:	f7ff f983 	bl	8000e50 <HAL_GetTick>
 8001b4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b4c:	e00a      	b.n	8001b64 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b4e:	f7ff f97f 	bl	8000e50 <HAL_GetTick>
 8001b52:	4602      	mov	r2, r0
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	1ad3      	subs	r3, r2, r3
 8001b58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e139      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b64:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <HAL_RCC_OscConfig+0x578>)
 8001b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b6a:	f003 0302 	and.w	r3, r3, #2
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d0ed      	beq.n	8001b4e <HAL_RCC_OscConfig+0x532>
 8001b72:	e01a      	b.n	8001baa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b74:	f7ff f96c 	bl	8000e50 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b7a:	e00f      	b.n	8001b9c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7c:	f7ff f968 	bl	8000e50 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d906      	bls.n	8001b9c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e122      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
 8001b92:	bf00      	nop
 8001b94:	40021000 	.word	0x40021000
 8001b98:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b9c:	4b90      	ldr	r3, [pc, #576]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001b9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba2:	f003 0302 	and.w	r3, r3, #2
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1e8      	bne.n	8001b7c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001baa:	7ffb      	ldrb	r3, [r7, #31]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d105      	bne.n	8001bbc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb0:	4b8b      	ldr	r3, [pc, #556]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb4:	4a8a      	ldr	r2, [pc, #552]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001bb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bba:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 8108 	beq.w	8001dd6 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	f040 80d0 	bne.w	8001d70 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bd0:	4b83      	ldr	r3, [pc, #524]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	f003 0203 	and.w	r2, r3, #3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d130      	bne.n	8001c46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf2:	429a      	cmp	r2, r3
 8001bf4:	d127      	bne.n	8001c46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c00:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d11f      	bne.n	8001c46 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c10:	2a07      	cmp	r2, #7
 8001c12:	bf14      	ite	ne
 8001c14:	2201      	movne	r2, #1
 8001c16:	2200      	moveq	r2, #0
 8001c18:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d113      	bne.n	8001c46 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c28:	085b      	lsrs	r3, r3, #1
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d109      	bne.n	8001c46 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	085b      	lsrs	r3, r3, #1
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d06e      	beq.n	8001d24 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	2b0c      	cmp	r3, #12
 8001c4a:	d069      	beq.n	8001d20 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c4c:	4b64      	ldr	r3, [pc, #400]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d105      	bne.n	8001c64 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001c58:	4b61      	ldr	r3, [pc, #388]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001c64:	2301      	movs	r3, #1
 8001c66:	e0b7      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c68:	4b5d      	ldr	r3, [pc, #372]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a5c      	ldr	r2, [pc, #368]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001c6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c72:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c74:	f7ff f8ec 	bl	8000e50 <HAL_GetTick>
 8001c78:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c7a:	e008      	b.n	8001c8e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c7c:	f7ff f8e8 	bl	8000e50 <HAL_GetTick>
 8001c80:	4602      	mov	r2, r0
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d901      	bls.n	8001c8e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	e0a4      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c8e:	4b54      	ldr	r3, [pc, #336]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d1f0      	bne.n	8001c7c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c9a:	4b51      	ldr	r3, [pc, #324]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	4b51      	ldr	r3, [pc, #324]	; (8001de4 <HAL_RCC_OscConfig+0x7c8>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001caa:	3a01      	subs	r2, #1
 8001cac:	0112      	lsls	r2, r2, #4
 8001cae:	4311      	orrs	r1, r2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cb4:	0212      	lsls	r2, r2, #8
 8001cb6:	4311      	orrs	r1, r2
 8001cb8:	687a      	ldr	r2, [r7, #4]
 8001cba:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cbc:	0852      	lsrs	r2, r2, #1
 8001cbe:	3a01      	subs	r2, #1
 8001cc0:	0552      	lsls	r2, r2, #21
 8001cc2:	4311      	orrs	r1, r2
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cc8:	0852      	lsrs	r2, r2, #1
 8001cca:	3a01      	subs	r2, #1
 8001ccc:	0652      	lsls	r2, r2, #25
 8001cce:	4311      	orrs	r1, r2
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cd4:	0912      	lsrs	r2, r2, #4
 8001cd6:	0452      	lsls	r2, r2, #17
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	4941      	ldr	r1, [pc, #260]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ce0:	4b3f      	ldr	r3, [pc, #252]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a3e      	ldr	r2, [pc, #248]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001ce6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cec:	4b3c      	ldr	r3, [pc, #240]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	4a3b      	ldr	r2, [pc, #236]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001cf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cf6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cf8:	f7ff f8aa 	bl	8000e50 <HAL_GetTick>
 8001cfc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d00:	f7ff f8a6 	bl	8000e50 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b02      	cmp	r3, #2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e062      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d12:	4b33      	ldr	r3, [pc, #204]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d1e:	e05a      	b.n	8001dd6 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e059      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d24:	4b2e      	ldr	r3, [pc, #184]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d152      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d30:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a2a      	ldr	r2, [pc, #168]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d3c:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	4a27      	ldr	r2, [pc, #156]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d48:	f7ff f882 	bl	8000e50 <HAL_GetTick>
 8001d4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d50:	f7ff f87e 	bl	8000e50 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e03a      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d62:	4b1f      	ldr	r3, [pc, #124]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x734>
 8001d6e:	e032      	b.n	8001dd6 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	2b0c      	cmp	r3, #12
 8001d74:	d02d      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d76:	4b1a      	ldr	r3, [pc, #104]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001d7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d80:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001d82:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d105      	bne.n	8001d9a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001d8e:	4b14      	ldr	r3, [pc, #80]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	4a13      	ldr	r2, [pc, #76]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001d94:	f023 0303 	bic.w	r3, r3, #3
 8001d98:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	4a10      	ldr	r2, [pc, #64]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001da0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001da8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001daa:	f7ff f851 	bl	8000e50 <HAL_GetTick>
 8001dae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001db0:	e008      	b.n	8001dc4 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db2:	f7ff f84d 	bl	8000e50 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b02      	cmp	r3, #2
 8001dbe:	d901      	bls.n	8001dc4 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e009      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_RCC_OscConfig+0x7c4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1f0      	bne.n	8001db2 <HAL_RCC_OscConfig+0x796>
 8001dd0:	e001      	b.n	8001dd6 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001dd6:	2300      	movs	r3, #0
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	3720      	adds	r7, #32
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40021000 	.word	0x40021000
 8001de4:	f99d808c 	.word	0xf99d808c

08001de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0c8      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dfc:	4b66      	ldr	r3, [pc, #408]	; (8001f98 <HAL_RCC_ClockConfig+0x1b0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d910      	bls.n	8001e2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	4b63      	ldr	r3, [pc, #396]	; (8001f98 <HAL_RCC_ClockConfig+0x1b0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f023 0207 	bic.w	r2, r3, #7
 8001e12:	4961      	ldr	r1, [pc, #388]	; (8001f98 <HAL_RCC_ClockConfig+0x1b0>)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1a:	4b5f      	ldr	r3, [pc, #380]	; (8001f98 <HAL_RCC_ClockConfig+0x1b0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0b0      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d04c      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	2b03      	cmp	r3, #3
 8001e3e:	d107      	bne.n	8001e50 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e40:	4b56      	ldr	r3, [pc, #344]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d121      	bne.n	8001e90 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e09e      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b02      	cmp	r3, #2
 8001e56:	d107      	bne.n	8001e68 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e58:	4b50      	ldr	r3, [pc, #320]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d115      	bne.n	8001e90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e092      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d107      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e70:	4b4a      	ldr	r3, [pc, #296]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d109      	bne.n	8001e90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e086      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e80:	4b46      	ldr	r3, [pc, #280]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e07e      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e90:	4b42      	ldr	r3, [pc, #264]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f023 0203 	bic.w	r2, r3, #3
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	493f      	ldr	r1, [pc, #252]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ea2:	f7fe ffd5 	bl	8000e50 <HAL_GetTick>
 8001ea6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eaa:	f7fe ffd1 	bl	8000e50 <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e066      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec0:	4b36      	ldr	r3, [pc, #216]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f003 020c 	and.w	r2, r3, #12
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	009b      	lsls	r3, r3, #2
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d1eb      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0302 	and.w	r3, r3, #2
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d008      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ede:	4b2f      	ldr	r3, [pc, #188]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	492c      	ldr	r1, [pc, #176]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ef0:	4b29      	ldr	r3, [pc, #164]	; (8001f98 <HAL_RCC_ClockConfig+0x1b0>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	683a      	ldr	r2, [r7, #0]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d210      	bcs.n	8001f20 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efe:	4b26      	ldr	r3, [pc, #152]	; (8001f98 <HAL_RCC_ClockConfig+0x1b0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f023 0207 	bic.w	r2, r3, #7
 8001f06:	4924      	ldr	r1, [pc, #144]	; (8001f98 <HAL_RCC_ClockConfig+0x1b0>)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0e:	4b22      	ldr	r3, [pc, #136]	; (8001f98 <HAL_RCC_ClockConfig+0x1b0>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 0307 	and.w	r3, r3, #7
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d001      	beq.n	8001f20 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	e036      	b.n	8001f8e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0304 	and.w	r3, r3, #4
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d008      	beq.n	8001f3e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f2c:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	4918      	ldr	r1, [pc, #96]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d009      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f4a:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4910      	ldr	r1, [pc, #64]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f5e:	f000 f825 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 8001f62:	4602      	mov	r2, r0
 8001f64:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <HAL_RCC_ClockConfig+0x1b4>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	091b      	lsrs	r3, r3, #4
 8001f6a:	f003 030f 	and.w	r3, r3, #15
 8001f6e:	490c      	ldr	r1, [pc, #48]	; (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f70:	5ccb      	ldrb	r3, [r1, r3]
 8001f72:	f003 031f 	and.w	r3, r3, #31
 8001f76:	fa22 f303 	lsr.w	r3, r2, r3
 8001f7a:	4a0a      	ldr	r2, [pc, #40]	; (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe ff14 	bl	8000db0 <HAL_InitTick>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f8c:	7afb      	ldrb	r3, [r7, #11]
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3710      	adds	r7, #16
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	40022000 	.word	0x40022000
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	08004aa0 	.word	0x08004aa0
 8001fa4:	20000018 	.word	0x20000018
 8001fa8:	2000001c 	.word	0x2000001c

08001fac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	; 0x24
 8001fb0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61fb      	str	r3, [r7, #28]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fba:	4b3e      	ldr	r3, [pc, #248]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc4:	4b3b      	ldr	r3, [pc, #236]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x34>
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	2b0c      	cmp	r3, #12
 8001fd8:	d121      	bne.n	800201e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2b01      	cmp	r3, #1
 8001fde:	d11e      	bne.n	800201e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001fe0:	4b34      	ldr	r3, [pc, #208]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d107      	bne.n	8001ffc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fec:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff2:	0a1b      	lsrs	r3, r3, #8
 8001ff4:	f003 030f 	and.w	r3, r3, #15
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	e005      	b.n	8002008 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ffc:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002008:	4a2b      	ldr	r2, [pc, #172]	; (80020b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002010:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d10d      	bne.n	8002034 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800201c:	e00a      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	2b04      	cmp	r3, #4
 8002022:	d102      	bne.n	800202a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002024:	4b25      	ldr	r3, [pc, #148]	; (80020bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	e004      	b.n	8002034 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	2b08      	cmp	r3, #8
 800202e:	d101      	bne.n	8002034 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002030:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002032:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	2b0c      	cmp	r3, #12
 8002038:	d134      	bne.n	80020a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800203a:	4b1e      	ldr	r3, [pc, #120]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d003      	beq.n	8002052 <HAL_RCC_GetSysClockFreq+0xa6>
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2b03      	cmp	r3, #3
 800204e:	d003      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0xac>
 8002050:	e005      	b.n	800205e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002052:	4b1a      	ldr	r3, [pc, #104]	; (80020bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002054:	617b      	str	r3, [r7, #20]
      break;
 8002056:	e005      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002058:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800205a:	617b      	str	r3, [r7, #20]
      break;
 800205c:	e002      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800205e:	69fb      	ldr	r3, [r7, #28]
 8002060:	617b      	str	r3, [r7, #20]
      break;
 8002062:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002064:	4b13      	ldr	r3, [pc, #76]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	091b      	lsrs	r3, r3, #4
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	3301      	adds	r3, #1
 8002070:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002072:	4b10      	ldr	r3, [pc, #64]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	0a1b      	lsrs	r3, r3, #8
 8002078:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	fb02 f203 	mul.w	r2, r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	fbb2 f3f3 	udiv	r3, r2, r3
 8002088:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800208a:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800208c:	68db      	ldr	r3, [r3, #12]
 800208e:	0e5b      	lsrs	r3, r3, #25
 8002090:	f003 0303 	and.w	r3, r3, #3
 8002094:	3301      	adds	r3, #1
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800209a:	697a      	ldr	r2, [r7, #20]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020a4:	69bb      	ldr	r3, [r7, #24]
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3724      	adds	r7, #36	; 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000
 80020b8:	08004ab8 	.word	0x08004ab8
 80020bc:	00f42400 	.word	0x00f42400
 80020c0:	007a1200 	.word	0x007a1200

080020c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020c8:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020ca:	681b      	ldr	r3, [r3, #0]
}
 80020cc:	4618      	mov	r0, r3
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000018 	.word	0x20000018

080020dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020e0:	f7ff fff0 	bl	80020c4 <HAL_RCC_GetHCLKFreq>
 80020e4:	4602      	mov	r2, r0
 80020e6:	4b06      	ldr	r3, [pc, #24]	; (8002100 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	0a1b      	lsrs	r3, r3, #8
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	4904      	ldr	r1, [pc, #16]	; (8002104 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020f2:	5ccb      	ldrb	r3, [r1, r3]
 80020f4:	f003 031f 	and.w	r3, r3, #31
 80020f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	40021000 	.word	0x40021000
 8002104:	08004ab0 	.word	0x08004ab0

08002108 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800210c:	f7ff ffda 	bl	80020c4 <HAL_RCC_GetHCLKFreq>
 8002110:	4602      	mov	r2, r0
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	0adb      	lsrs	r3, r3, #11
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	4904      	ldr	r1, [pc, #16]	; (8002130 <HAL_RCC_GetPCLK2Freq+0x28>)
 800211e:	5ccb      	ldrb	r3, [r1, r3]
 8002120:	f003 031f 	and.w	r3, r3, #31
 8002124:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002128:	4618      	mov	r0, r3
 800212a:	bd80      	pop	{r7, pc}
 800212c:	40021000 	.word	0x40021000
 8002130:	08004ab0 	.word	0x08004ab0

08002134 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800213c:	2300      	movs	r3, #0
 800213e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002140:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800214c:	f7ff fa02 	bl	8001554 <HAL_PWREx_GetVoltageRange>
 8002150:	6178      	str	r0, [r7, #20]
 8002152:	e014      	b.n	800217e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002154:	4b25      	ldr	r3, [pc, #148]	; (80021ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002158:	4a24      	ldr	r2, [pc, #144]	; (80021ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800215a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215e:	6593      	str	r3, [r2, #88]	; 0x58
 8002160:	4b22      	ldr	r3, [pc, #136]	; (80021ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002162:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002164:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002168:	60fb      	str	r3, [r7, #12]
 800216a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800216c:	f7ff f9f2 	bl	8001554 <HAL_PWREx_GetVoltageRange>
 8002170:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002172:	4b1e      	ldr	r3, [pc, #120]	; (80021ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002176:	4a1d      	ldr	r2, [pc, #116]	; (80021ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800217c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002184:	d10b      	bne.n	800219e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b80      	cmp	r3, #128	; 0x80
 800218a:	d919      	bls.n	80021c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2ba0      	cmp	r3, #160	; 0xa0
 8002190:	d902      	bls.n	8002198 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002192:	2302      	movs	r3, #2
 8002194:	613b      	str	r3, [r7, #16]
 8002196:	e013      	b.n	80021c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002198:	2301      	movs	r3, #1
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	e010      	b.n	80021c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2b80      	cmp	r3, #128	; 0x80
 80021a2:	d902      	bls.n	80021aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80021a4:	2303      	movs	r3, #3
 80021a6:	613b      	str	r3, [r7, #16]
 80021a8:	e00a      	b.n	80021c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2b80      	cmp	r3, #128	; 0x80
 80021ae:	d102      	bne.n	80021b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80021b0:	2302      	movs	r3, #2
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	e004      	b.n	80021c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b70      	cmp	r3, #112	; 0x70
 80021ba:	d101      	bne.n	80021c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80021bc:	2301      	movs	r3, #1
 80021be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f023 0207 	bic.w	r2, r3, #7
 80021c8:	4909      	ldr	r1, [pc, #36]	; (80021f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80021d0:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	693a      	ldr	r2, [r7, #16]
 80021da:	429a      	cmp	r2, r3
 80021dc:	d001      	beq.n	80021e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	40022000 	.word	0x40022000

080021f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021fc:	2300      	movs	r3, #0
 80021fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002200:	2300      	movs	r3, #0
 8002202:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800220c:	2b00      	cmp	r3, #0
 800220e:	d041      	beq.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002214:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002218:	d02a      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800221a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800221e:	d824      	bhi.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002220:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002224:	d008      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002226:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800222a:	d81e      	bhi.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002230:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002234:	d010      	beq.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002236:	e018      	b.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002238:	4b86      	ldr	r3, [pc, #536]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4a85      	ldr	r2, [pc, #532]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800223e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002242:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002244:	e015      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	3304      	adds	r3, #4
 800224a:	2100      	movs	r1, #0
 800224c:	4618      	mov	r0, r3
 800224e:	f000 fabb 	bl	80027c8 <RCCEx_PLLSAI1_Config>
 8002252:	4603      	mov	r3, r0
 8002254:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002256:	e00c      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3320      	adds	r3, #32
 800225c:	2100      	movs	r1, #0
 800225e:	4618      	mov	r0, r3
 8002260:	f000 fba6 	bl	80029b0 <RCCEx_PLLSAI2_Config>
 8002264:	4603      	mov	r3, r0
 8002266:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002268:	e003      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800226a:	2301      	movs	r3, #1
 800226c:	74fb      	strb	r3, [r7, #19]
      break;
 800226e:	e000      	b.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002270:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002272:	7cfb      	ldrb	r3, [r7, #19]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10b      	bne.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002278:	4b76      	ldr	r3, [pc, #472]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002286:	4973      	ldr	r1, [pc, #460]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800228e:	e001      	b.n	8002294 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002290:	7cfb      	ldrb	r3, [r7, #19]
 8002292:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d041      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022a4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022a8:	d02a      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80022aa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80022ae:	d824      	bhi.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022b4:	d008      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80022b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80022ba:	d81e      	bhi.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x106>
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d00a      	beq.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80022c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022c4:	d010      	beq.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022c6:	e018      	b.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022c8:	4b62      	ldr	r3, [pc, #392]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	4a61      	ldr	r2, [pc, #388]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022d4:	e015      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3304      	adds	r3, #4
 80022da:	2100      	movs	r1, #0
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 fa73 	bl	80027c8 <RCCEx_PLLSAI1_Config>
 80022e2:	4603      	mov	r3, r0
 80022e4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022e6:	e00c      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	3320      	adds	r3, #32
 80022ec:	2100      	movs	r1, #0
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 fb5e 	bl	80029b0 <RCCEx_PLLSAI2_Config>
 80022f4:	4603      	mov	r3, r0
 80022f6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80022f8:	e003      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	74fb      	strb	r3, [r7, #19]
      break;
 80022fe:	e000      	b.n	8002302 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002300:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002302:	7cfb      	ldrb	r3, [r7, #19]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d10b      	bne.n	8002320 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002308:	4b52      	ldr	r3, [pc, #328]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800230a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800230e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002316:	494f      	ldr	r1, [pc, #316]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002318:	4313      	orrs	r3, r2
 800231a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800231e:	e001      	b.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232c:	2b00      	cmp	r3, #0
 800232e:	f000 80a0 	beq.w	8002472 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002336:	4b47      	ldr	r3, [pc, #284]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d101      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002342:	2301      	movs	r3, #1
 8002344:	e000      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002346:	2300      	movs	r3, #0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00d      	beq.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234c:	4b41      	ldr	r3, [pc, #260]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800234e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002350:	4a40      	ldr	r2, [pc, #256]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002356:	6593      	str	r3, [r2, #88]	; 0x58
 8002358:	4b3e      	ldr	r3, [pc, #248]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800235c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002364:	2301      	movs	r3, #1
 8002366:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002368:	4b3b      	ldr	r3, [pc, #236]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a3a      	ldr	r2, [pc, #232]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800236e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002372:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002374:	f7fe fd6c 	bl	8000e50 <HAL_GetTick>
 8002378:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800237a:	e009      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800237c:	f7fe fd68 	bl	8000e50 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d902      	bls.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	74fb      	strb	r3, [r7, #19]
        break;
 800238e:	e005      	b.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002390:	4b31      	ldr	r3, [pc, #196]	; (8002458 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0ef      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800239c:	7cfb      	ldrb	r3, [r7, #19]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d15c      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023a2:	4b2c      	ldr	r3, [pc, #176]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d01f      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d019      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023c0:	4b24      	ldr	r3, [pc, #144]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023cc:	4b21      	ldr	r3, [pc, #132]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d2:	4a20      	ldr	r2, [pc, #128]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023dc:	4b1d      	ldr	r3, [pc, #116]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023e2:	4a1c      	ldr	r2, [pc, #112]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023ec:	4a19      	ldr	r2, [pc, #100]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ee:	697b      	ldr	r3, [r7, #20]
 80023f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d016      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023fe:	f7fe fd27 	bl	8000e50 <HAL_GetTick>
 8002402:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002404:	e00b      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002406:	f7fe fd23 	bl	8000e50 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	f241 3288 	movw	r2, #5000	; 0x1388
 8002414:	4293      	cmp	r3, r2
 8002416:	d902      	bls.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	74fb      	strb	r3, [r7, #19]
            break;
 800241c:	e006      	b.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800241e:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002420:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d0ec      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800242c:	7cfb      	ldrb	r3, [r7, #19]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10c      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002432:	4b08      	ldr	r3, [pc, #32]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002438:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002442:	4904      	ldr	r1, [pc, #16]	; (8002454 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800244a:	e009      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800244c:	7cfb      	ldrb	r3, [r7, #19]
 800244e:	74bb      	strb	r3, [r7, #18]
 8002450:	e006      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000
 8002458:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800245c:	7cfb      	ldrb	r3, [r7, #19]
 800245e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002460:	7c7b      	ldrb	r3, [r7, #17]
 8002462:	2b01      	cmp	r3, #1
 8002464:	d105      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002466:	4b9e      	ldr	r3, [pc, #632]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246a:	4a9d      	ldr	r2, [pc, #628]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002470:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d00a      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800247e:	4b98      	ldr	r3, [pc, #608]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002484:	f023 0203 	bic.w	r2, r3, #3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800248c:	4994      	ldr	r1, [pc, #592]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248e:	4313      	orrs	r3, r2
 8002490:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0302 	and.w	r3, r3, #2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00a      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024a0:	4b8f      	ldr	r3, [pc, #572]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a6:	f023 020c 	bic.w	r2, r3, #12
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ae:	498c      	ldr	r1, [pc, #560]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0304 	and.w	r3, r3, #4
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00a      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024c2:	4b87      	ldr	r3, [pc, #540]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d0:	4983      	ldr	r1, [pc, #524]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0308 	and.w	r3, r3, #8
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d00a      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024e4:	4b7e      	ldr	r3, [pc, #504]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f2:	497b      	ldr	r1, [pc, #492]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f4:	4313      	orrs	r3, r2
 80024f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0310 	and.w	r3, r3, #16
 8002502:	2b00      	cmp	r3, #0
 8002504:	d00a      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002506:	4b76      	ldr	r3, [pc, #472]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002514:	4972      	ldr	r1, [pc, #456]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002516:	4313      	orrs	r3, r2
 8002518:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0320 	and.w	r3, r3, #32
 8002524:	2b00      	cmp	r3, #0
 8002526:	d00a      	beq.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002528:	4b6d      	ldr	r3, [pc, #436]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002536:	496a      	ldr	r1, [pc, #424]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002538:	4313      	orrs	r3, r2
 800253a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002546:	2b00      	cmp	r3, #0
 8002548:	d00a      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800254a:	4b65      	ldr	r3, [pc, #404]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002550:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002558:	4961      	ldr	r1, [pc, #388]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800255a:	4313      	orrs	r3, r2
 800255c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002568:	2b00      	cmp	r3, #0
 800256a:	d00a      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800256c:	4b5c      	ldr	r3, [pc, #368]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002572:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800257a:	4959      	ldr	r1, [pc, #356]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257c:	4313      	orrs	r3, r2
 800257e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800258a:	2b00      	cmp	r3, #0
 800258c:	d00a      	beq.n	80025a4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800258e:	4b54      	ldr	r3, [pc, #336]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002594:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800259c:	4950      	ldr	r1, [pc, #320]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d00a      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025b0:	4b4b      	ldr	r3, [pc, #300]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025be:	4948      	ldr	r1, [pc, #288]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d00a      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025d2:	4b43      	ldr	r3, [pc, #268]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e0:	493f      	ldr	r1, [pc, #252]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025e2:	4313      	orrs	r3, r2
 80025e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d028      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025f4:	4b3a      	ldr	r3, [pc, #232]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002602:	4937      	ldr	r1, [pc, #220]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002604:	4313      	orrs	r3, r2
 8002606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800260e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002612:	d106      	bne.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002614:	4b32      	ldr	r3, [pc, #200]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002616:	68db      	ldr	r3, [r3, #12]
 8002618:	4a31      	ldr	r2, [pc, #196]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800261e:	60d3      	str	r3, [r2, #12]
 8002620:	e011      	b.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002626:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800262a:	d10c      	bne.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3304      	adds	r3, #4
 8002630:	2101      	movs	r1, #1
 8002632:	4618      	mov	r0, r3
 8002634:	f000 f8c8 	bl	80027c8 <RCCEx_PLLSAI1_Config>
 8002638:	4603      	mov	r3, r0
 800263a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800263c:	7cfb      	ldrb	r3, [r7, #19]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d001      	beq.n	8002646 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002642:	7cfb      	ldrb	r3, [r7, #19]
 8002644:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d028      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002652:	4b23      	ldr	r3, [pc, #140]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002658:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002660:	491f      	ldr	r1, [pc, #124]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002662:	4313      	orrs	r3, r2
 8002664:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002670:	d106      	bne.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002672:	4b1b      	ldr	r3, [pc, #108]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	4a1a      	ldr	r2, [pc, #104]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002678:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800267c:	60d3      	str	r3, [r2, #12]
 800267e:	e011      	b.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002684:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002688:	d10c      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	3304      	adds	r3, #4
 800268e:	2101      	movs	r1, #1
 8002690:	4618      	mov	r0, r3
 8002692:	f000 f899 	bl	80027c8 <RCCEx_PLLSAI1_Config>
 8002696:	4603      	mov	r3, r0
 8002698:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800269a:	7cfb      	ldrb	r3, [r7, #19]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80026a0:	7cfb      	ldrb	r3, [r7, #19]
 80026a2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d02b      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80026b0:	4b0b      	ldr	r3, [pc, #44]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026be:	4908      	ldr	r1, [pc, #32]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026ce:	d109      	bne.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	4a02      	ldr	r2, [pc, #8]	; (80026e0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026da:	60d3      	str	r3, [r2, #12]
 80026dc:	e014      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80026de:	bf00      	nop
 80026e0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026ec:	d10c      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3304      	adds	r3, #4
 80026f2:	2101      	movs	r1, #1
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 f867 	bl	80027c8 <RCCEx_PLLSAI1_Config>
 80026fa:	4603      	mov	r3, r0
 80026fc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026fe:	7cfb      	ldrb	r3, [r7, #19]
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002704:	7cfb      	ldrb	r3, [r7, #19]
 8002706:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d02f      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002714:	4b2b      	ldr	r3, [pc, #172]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002722:	4928      	ldr	r1, [pc, #160]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800272e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002732:	d10d      	bne.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	3304      	adds	r3, #4
 8002738:	2102      	movs	r1, #2
 800273a:	4618      	mov	r0, r3
 800273c:	f000 f844 	bl	80027c8 <RCCEx_PLLSAI1_Config>
 8002740:	4603      	mov	r3, r0
 8002742:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002744:	7cfb      	ldrb	r3, [r7, #19]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d014      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800274a:	7cfb      	ldrb	r3, [r7, #19]
 800274c:	74bb      	strb	r3, [r7, #18]
 800274e:	e011      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002754:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002758:	d10c      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	3320      	adds	r3, #32
 800275e:	2102      	movs	r1, #2
 8002760:	4618      	mov	r0, r3
 8002762:	f000 f925 	bl	80029b0 <RCCEx_PLLSAI2_Config>
 8002766:	4603      	mov	r3, r0
 8002768:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800276a:	7cfb      	ldrb	r3, [r7, #19]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d001      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002770:	7cfb      	ldrb	r3, [r7, #19]
 8002772:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d00a      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002780:	4b10      	ldr	r3, [pc, #64]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800278e:	490d      	ldr	r1, [pc, #52]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d00b      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80027a2:	4b08      	ldr	r3, [pc, #32]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027b2:	4904      	ldr	r1, [pc, #16]	; (80027c4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80027ba:	7cbb      	ldrb	r3, [r7, #18]
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000

080027c8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80027d2:	2300      	movs	r3, #0
 80027d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80027d6:	4b75      	ldr	r3, [pc, #468]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d018      	beq.n	8002814 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80027e2:	4b72      	ldr	r3, [pc, #456]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f003 0203 	and.w	r2, r3, #3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	429a      	cmp	r2, r3
 80027f0:	d10d      	bne.n	800280e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
       ||
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d009      	beq.n	800280e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80027fa:	4b6c      	ldr	r3, [pc, #432]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	091b      	lsrs	r3, r3, #4
 8002800:	f003 0307 	and.w	r3, r3, #7
 8002804:	1c5a      	adds	r2, r3, #1
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
       ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d047      	beq.n	800289e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	73fb      	strb	r3, [r7, #15]
 8002812:	e044      	b.n	800289e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2b03      	cmp	r3, #3
 800281a:	d018      	beq.n	800284e <RCCEx_PLLSAI1_Config+0x86>
 800281c:	2b03      	cmp	r3, #3
 800281e:	d825      	bhi.n	800286c <RCCEx_PLLSAI1_Config+0xa4>
 8002820:	2b01      	cmp	r3, #1
 8002822:	d002      	beq.n	800282a <RCCEx_PLLSAI1_Config+0x62>
 8002824:	2b02      	cmp	r3, #2
 8002826:	d009      	beq.n	800283c <RCCEx_PLLSAI1_Config+0x74>
 8002828:	e020      	b.n	800286c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800282a:	4b60      	ldr	r3, [pc, #384]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d11d      	bne.n	8002872 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800283a:	e01a      	b.n	8002872 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800283c:	4b5b      	ldr	r3, [pc, #364]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002844:	2b00      	cmp	r3, #0
 8002846:	d116      	bne.n	8002876 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800284c:	e013      	b.n	8002876 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800284e:	4b57      	ldr	r3, [pc, #348]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d10f      	bne.n	800287a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800285a:	4b54      	ldr	r3, [pc, #336]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d109      	bne.n	800287a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800286a:	e006      	b.n	800287a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	73fb      	strb	r3, [r7, #15]
      break;
 8002870:	e004      	b.n	800287c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002872:	bf00      	nop
 8002874:	e002      	b.n	800287c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002876:	bf00      	nop
 8002878:	e000      	b.n	800287c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800287a:	bf00      	nop
    }

    if(status == HAL_OK)
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d10d      	bne.n	800289e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002882:	4b4a      	ldr	r3, [pc, #296]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6819      	ldr	r1, [r3, #0]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	3b01      	subs	r3, #1
 8002894:	011b      	lsls	r3, r3, #4
 8002896:	430b      	orrs	r3, r1
 8002898:	4944      	ldr	r1, [pc, #272]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800289e:	7bfb      	ldrb	r3, [r7, #15]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d17d      	bne.n	80029a0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028a4:	4b41      	ldr	r3, [pc, #260]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a40      	ldr	r2, [pc, #256]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80028aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028b0:	f7fe face 	bl	8000e50 <HAL_GetTick>
 80028b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028b6:	e009      	b.n	80028cc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028b8:	f7fe faca 	bl	8000e50 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d902      	bls.n	80028cc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	73fb      	strb	r3, [r7, #15]
        break;
 80028ca:	e005      	b.n	80028d8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028cc:	4b37      	ldr	r3, [pc, #220]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d1ef      	bne.n	80028b8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80028d8:	7bfb      	ldrb	r3, [r7, #15]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d160      	bne.n	80029a0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d111      	bne.n	8002908 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028e4:	4b31      	ldr	r3, [pc, #196]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80028ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6892      	ldr	r2, [r2, #8]
 80028f4:	0211      	lsls	r1, r2, #8
 80028f6:	687a      	ldr	r2, [r7, #4]
 80028f8:	68d2      	ldr	r2, [r2, #12]
 80028fa:	0912      	lsrs	r2, r2, #4
 80028fc:	0452      	lsls	r2, r2, #17
 80028fe:	430a      	orrs	r2, r1
 8002900:	492a      	ldr	r1, [pc, #168]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002902:	4313      	orrs	r3, r2
 8002904:	610b      	str	r3, [r1, #16]
 8002906:	e027      	b.n	8002958 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d112      	bne.n	8002934 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800290e:	4b27      	ldr	r3, [pc, #156]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002916:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6892      	ldr	r2, [r2, #8]
 800291e:	0211      	lsls	r1, r2, #8
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	6912      	ldr	r2, [r2, #16]
 8002924:	0852      	lsrs	r2, r2, #1
 8002926:	3a01      	subs	r2, #1
 8002928:	0552      	lsls	r2, r2, #21
 800292a:	430a      	orrs	r2, r1
 800292c:	491f      	ldr	r1, [pc, #124]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800292e:	4313      	orrs	r3, r2
 8002930:	610b      	str	r3, [r1, #16]
 8002932:	e011      	b.n	8002958 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002934:	4b1d      	ldr	r3, [pc, #116]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800293c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	6892      	ldr	r2, [r2, #8]
 8002944:	0211      	lsls	r1, r2, #8
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	6952      	ldr	r2, [r2, #20]
 800294a:	0852      	lsrs	r2, r2, #1
 800294c:	3a01      	subs	r2, #1
 800294e:	0652      	lsls	r2, r2, #25
 8002950:	430a      	orrs	r2, r1
 8002952:	4916      	ldr	r1, [pc, #88]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002954:	4313      	orrs	r3, r2
 8002956:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002958:	4b14      	ldr	r3, [pc, #80]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a13      	ldr	r2, [pc, #76]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800295e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002962:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002964:	f7fe fa74 	bl	8000e50 <HAL_GetTick>
 8002968:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800296a:	e009      	b.n	8002980 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800296c:	f7fe fa70 	bl	8000e50 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d902      	bls.n	8002980 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	73fb      	strb	r3, [r7, #15]
          break;
 800297e:	e005      	b.n	800298c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002980:	4b0a      	ldr	r3, [pc, #40]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d0ef      	beq.n	800296c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d106      	bne.n	80029a0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	4904      	ldr	r1, [pc, #16]	; (80029ac <RCCEx_PLLSAI1_Config+0x1e4>)
 800299c:	4313      	orrs	r3, r2
 800299e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40021000 	.word	0x40021000

080029b0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80029be:	4b6a      	ldr	r3, [pc, #424]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d018      	beq.n	80029fc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80029ca:	4b67      	ldr	r3, [pc, #412]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	f003 0203 	and.w	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	429a      	cmp	r2, r3
 80029d8:	d10d      	bne.n	80029f6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
       ||
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d009      	beq.n	80029f6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80029e2:	4b61      	ldr	r3, [pc, #388]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	091b      	lsrs	r3, r3, #4
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
       ||
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d047      	beq.n	8002a86 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	73fb      	strb	r3, [r7, #15]
 80029fa:	e044      	b.n	8002a86 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b03      	cmp	r3, #3
 8002a02:	d018      	beq.n	8002a36 <RCCEx_PLLSAI2_Config+0x86>
 8002a04:	2b03      	cmp	r3, #3
 8002a06:	d825      	bhi.n	8002a54 <RCCEx_PLLSAI2_Config+0xa4>
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d002      	beq.n	8002a12 <RCCEx_PLLSAI2_Config+0x62>
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d009      	beq.n	8002a24 <RCCEx_PLLSAI2_Config+0x74>
 8002a10:	e020      	b.n	8002a54 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a12:	4b55      	ldr	r3, [pc, #340]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d11d      	bne.n	8002a5a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a22:	e01a      	b.n	8002a5a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a24:	4b50      	ldr	r3, [pc, #320]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d116      	bne.n	8002a5e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a34:	e013      	b.n	8002a5e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a36:	4b4c      	ldr	r3, [pc, #304]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10f      	bne.n	8002a62 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002a42:	4b49      	ldr	r3, [pc, #292]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002a52:	e006      	b.n	8002a62 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      break;
 8002a58:	e004      	b.n	8002a64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a5a:	bf00      	nop
 8002a5c:	e002      	b.n	8002a64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a5e:	bf00      	nop
 8002a60:	e000      	b.n	8002a64 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002a62:	bf00      	nop
    }

    if(status == HAL_OK)
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d10d      	bne.n	8002a86 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a6a:	4b3f      	ldr	r3, [pc, #252]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6c:	68db      	ldr	r3, [r3, #12]
 8002a6e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6819      	ldr	r1, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	430b      	orrs	r3, r1
 8002a80:	4939      	ldr	r1, [pc, #228]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d167      	bne.n	8002b5c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a8c:	4b36      	ldr	r3, [pc, #216]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a35      	ldr	r2, [pc, #212]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a98:	f7fe f9da 	bl	8000e50 <HAL_GetTick>
 8002a9c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a9e:	e009      	b.n	8002ab4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002aa0:	f7fe f9d6 	bl	8000e50 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d902      	bls.n	8002ab4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002aae:	2303      	movs	r3, #3
 8002ab0:	73fb      	strb	r3, [r7, #15]
        break;
 8002ab2:	e005      	b.n	8002ac0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ab4:	4b2c      	ldr	r3, [pc, #176]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d1ef      	bne.n	8002aa0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d14a      	bne.n	8002b5c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d111      	bne.n	8002af0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002acc:	4b26      	ldr	r3, [pc, #152]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ace:	695b      	ldr	r3, [r3, #20]
 8002ad0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6892      	ldr	r2, [r2, #8]
 8002adc:	0211      	lsls	r1, r2, #8
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	68d2      	ldr	r2, [r2, #12]
 8002ae2:	0912      	lsrs	r2, r2, #4
 8002ae4:	0452      	lsls	r2, r2, #17
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	491f      	ldr	r1, [pc, #124]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	614b      	str	r3, [r1, #20]
 8002aee:	e011      	b.n	8002b14 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002af0:	4b1d      	ldr	r3, [pc, #116]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002af8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	6892      	ldr	r2, [r2, #8]
 8002b00:	0211      	lsls	r1, r2, #8
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6912      	ldr	r2, [r2, #16]
 8002b06:	0852      	lsrs	r2, r2, #1
 8002b08:	3a01      	subs	r2, #1
 8002b0a:	0652      	lsls	r2, r2, #25
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	4916      	ldr	r1, [pc, #88]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b14:	4b14      	ldr	r3, [pc, #80]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a13      	ldr	r2, [pc, #76]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b1e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b20:	f7fe f996 	bl	8000e50 <HAL_GetTick>
 8002b24:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b26:	e009      	b.n	8002b3c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b28:	f7fe f992 	bl	8000e50 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d902      	bls.n	8002b3c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	73fb      	strb	r3, [r7, #15]
          break;
 8002b3a:	e005      	b.n	8002b48 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002b3c:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d0ef      	beq.n	8002b28 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002b48:	7bfb      	ldrb	r3, [r7, #15]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002b4e:	4b06      	ldr	r3, [pc, #24]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	695b      	ldr	r3, [r3, #20]
 8002b56:	4904      	ldr	r1, [pc, #16]	; (8002b68 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40021000 	.word	0x40021000

08002b6c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e095      	b.n	8002caa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d108      	bne.n	8002b98 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b8e:	d009      	beq.n	8002ba4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	61da      	str	r2, [r3, #28]
 8002b96:	e005      	b.n	8002ba4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002bb0:	b2db      	uxtb	r3, r3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d106      	bne.n	8002bc4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fd ff26 	bl	8000a10 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2202      	movs	r2, #2
 8002bc8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bda:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002be4:	d902      	bls.n	8002bec <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002be6:	2300      	movs	r3, #0
 8002be8:	60fb      	str	r3, [r7, #12]
 8002bea:	e002      	b.n	8002bf2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002bec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bf0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002bfa:	d007      	beq.n	8002c0c <HAL_SPI_Init+0xa0>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	68db      	ldr	r3, [r3, #12]
 8002c00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c04:	d002      	beq.n	8002c0c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c1c:	431a      	orrs	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	431a      	orrs	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	695b      	ldr	r3, [r3, #20]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	431a      	orrs	r2, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c3a:	431a      	orrs	r2, r3
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	69db      	ldr	r3, [r3, #28]
 8002c40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c44:	431a      	orrs	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4e:	ea42 0103 	orr.w	r1, r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	699b      	ldr	r3, [r3, #24]
 8002c66:	0c1b      	lsrs	r3, r3, #16
 8002c68:	f003 0204 	and.w	r2, r3, #4
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	431a      	orrs	r2, r3
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7a:	f003 0308 	and.w	r3, r3, #8
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002c88:	ea42 0103 	orr.w	r1, r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b088      	sub	sp, #32
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	60f8      	str	r0, [r7, #12]
 8002cba:	60b9      	str	r1, [r7, #8]
 8002cbc:	603b      	str	r3, [r7, #0]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d101      	bne.n	8002cd4 <HAL_SPI_Transmit+0x22>
 8002cd0:	2302      	movs	r3, #2
 8002cd2:	e158      	b.n	8002f86 <HAL_SPI_Transmit+0x2d4>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cdc:	f7fe f8b8 	bl	8000e50 <HAL_GetTick>
 8002ce0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002ce2:	88fb      	ldrh	r3, [r7, #6]
 8002ce4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d002      	beq.n	8002cf8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cf6:	e13d      	b.n	8002f74 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d002      	beq.n	8002d04 <HAL_SPI_Transmit+0x52>
 8002cfe:	88fb      	ldrh	r3, [r7, #6]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d102      	bne.n	8002d0a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002d08:	e134      	b.n	8002f74 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2203      	movs	r2, #3
 8002d0e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	68ba      	ldr	r2, [r7, #8]
 8002d1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	88fa      	ldrh	r2, [r7, #6]
 8002d22:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	88fa      	ldrh	r2, [r7, #6]
 8002d28:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	2200      	movs	r2, #0
 8002d44:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d54:	d10f      	bne.n	8002d76 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681a      	ldr	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d64:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d74:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d80:	2b40      	cmp	r3, #64	; 0x40
 8002d82:	d007      	beq.n	8002d94 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d92:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d9c:	d94b      	bls.n	8002e36 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d002      	beq.n	8002dac <HAL_SPI_Transmit+0xfa>
 8002da6:	8afb      	ldrh	r3, [r7, #22]
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d13e      	bne.n	8002e2a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db0:	881a      	ldrh	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dbc:	1c9a      	adds	r2, r3, #2
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002dd0:	e02b      	b.n	8002e2a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d112      	bne.n	8002e06 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de4:	881a      	ldrh	r2, [r3, #0]
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df0:	1c9a      	adds	r2, r3, #2
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dfa:	b29b      	uxth	r3, r3
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e04:	e011      	b.n	8002e2a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e06:	f7fe f823 	bl	8000e50 <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	683a      	ldr	r2, [r7, #0]
 8002e12:	429a      	cmp	r2, r3
 8002e14:	d803      	bhi.n	8002e1e <HAL_SPI_Transmit+0x16c>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e1c:	d102      	bne.n	8002e24 <HAL_SPI_Transmit+0x172>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d102      	bne.n	8002e2a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e28:	e0a4      	b.n	8002f74 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d1ce      	bne.n	8002dd2 <HAL_SPI_Transmit+0x120>
 8002e34:	e07c      	b.n	8002f30 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_SPI_Transmit+0x192>
 8002e3e:	8afb      	ldrh	r3, [r7, #22]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d170      	bne.n	8002f26 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d912      	bls.n	8002e74 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	881a      	ldrh	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5e:	1c9a      	adds	r2, r3, #2
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	3b02      	subs	r3, #2
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e72:	e058      	b.n	8002f26 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	330c      	adds	r3, #12
 8002e7e:	7812      	ldrb	r2, [r2, #0]
 8002e80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	3b01      	subs	r3, #1
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002e9a:	e044      	b.n	8002f26 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b02      	cmp	r3, #2
 8002ea8:	d12b      	bne.n	8002f02 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d912      	bls.n	8002eda <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb8:	881a      	ldrh	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ec4:	1c9a      	adds	r2, r3, #2
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b02      	subs	r3, #2
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ed8:	e025      	b.n	8002f26 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	330c      	adds	r3, #12
 8002ee4:	7812      	ldrb	r2, [r2, #0]
 8002ee6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ef6:	b29b      	uxth	r3, r3
 8002ef8:	3b01      	subs	r3, #1
 8002efa:	b29a      	uxth	r2, r3
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f00:	e011      	b.n	8002f26 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f02:	f7fd ffa5 	bl	8000e50 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	683a      	ldr	r2, [r7, #0]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d803      	bhi.n	8002f1a <HAL_SPI_Transmit+0x268>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f18:	d102      	bne.n	8002f20 <HAL_SPI_Transmit+0x26e>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d102      	bne.n	8002f26 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002f24:	e026      	b.n	8002f74 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d1b5      	bne.n	8002e9c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	6839      	ldr	r1, [r7, #0]
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 f949 	bl	80031cc <SPI_EndRxTxTransaction>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d002      	beq.n	8002f46 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10a      	bne.n	8002f64 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f4e:	2300      	movs	r3, #0
 8002f50:	613b      	str	r3, [r7, #16]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	613b      	str	r3, [r7, #16]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	613b      	str	r3, [r7, #16]
 8002f62:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d002      	beq.n	8002f72 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	77fb      	strb	r3, [r7, #31]
 8002f70:	e000      	b.n	8002f74 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002f72:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f84:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3720      	adds	r7, #32
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
	...

08002f90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b088      	sub	sp, #32
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002fa0:	f7fd ff56 	bl	8000e50 <HAL_GetTick>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	683a      	ldr	r2, [r7, #0]
 8002fac:	4413      	add	r3, r2
 8002fae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002fb0:	f7fd ff4e 	bl	8000e50 <HAL_GetTick>
 8002fb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002fb6:	4b39      	ldr	r3, [pc, #228]	; (800309c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	015b      	lsls	r3, r3, #5
 8002fbc:	0d1b      	lsrs	r3, r3, #20
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	fb02 f303 	mul.w	r3, r2, r3
 8002fc4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fc6:	e054      	b.n	8003072 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fce:	d050      	beq.n	8003072 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002fd0:	f7fd ff3e 	bl	8000e50 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	69fa      	ldr	r2, [r7, #28]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d902      	bls.n	8002fe6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d13d      	bne.n	8003062 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002ff4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ffe:	d111      	bne.n	8003024 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003008:	d004      	beq.n	8003014 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003012:	d107      	bne.n	8003024 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003022:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003028:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800302c:	d10f      	bne.n	800304e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800303c:	601a      	str	r2, [r3, #0]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681a      	ldr	r2, [r3, #0]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800304c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e017      	b.n	8003092 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d101      	bne.n	800306c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003068:	2300      	movs	r3, #0
 800306a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	3b01      	subs	r3, #1
 8003070:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	689a      	ldr	r2, [r3, #8]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4013      	ands	r3, r2
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	429a      	cmp	r2, r3
 8003080:	bf0c      	ite	eq
 8003082:	2301      	moveq	r3, #1
 8003084:	2300      	movne	r3, #0
 8003086:	b2db      	uxtb	r3, r3
 8003088:	461a      	mov	r2, r3
 800308a:	79fb      	ldrb	r3, [r7, #7]
 800308c:	429a      	cmp	r2, r3
 800308e:	d19b      	bne.n	8002fc8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003090:	2300      	movs	r3, #0
}
 8003092:	4618      	mov	r0, r3
 8003094:	3720      	adds	r7, #32
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	20000018 	.word	0x20000018

080030a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	; 0x28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80030ae:	2300      	movs	r3, #0
 80030b0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80030b2:	f7fd fecd 	bl	8000e50 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030ba:	1a9b      	subs	r3, r3, r2
 80030bc:	683a      	ldr	r2, [r7, #0]
 80030be:	4413      	add	r3, r2
 80030c0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80030c2:	f7fd fec5 	bl	8000e50 <HAL_GetTick>
 80030c6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	330c      	adds	r3, #12
 80030ce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80030d0:	4b3d      	ldr	r3, [pc, #244]	; (80031c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80030d2:	681a      	ldr	r2, [r3, #0]
 80030d4:	4613      	mov	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	4413      	add	r3, r2
 80030da:	00da      	lsls	r2, r3, #3
 80030dc:	1ad3      	subs	r3, r2, r3
 80030de:	0d1b      	lsrs	r3, r3, #20
 80030e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e2:	fb02 f303 	mul.w	r3, r2, r3
 80030e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80030e8:	e060      	b.n	80031ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80030f0:	d107      	bne.n	8003102 <SPI_WaitFifoStateUntilTimeout+0x62>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d104      	bne.n	8003102 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003100:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003108:	d050      	beq.n	80031ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800310a:	f7fd fea1 	bl	8000e50 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	6a3b      	ldr	r3, [r7, #32]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003116:	429a      	cmp	r2, r3
 8003118:	d902      	bls.n	8003120 <SPI_WaitFifoStateUntilTimeout+0x80>
 800311a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800311c:	2b00      	cmp	r3, #0
 800311e:	d13d      	bne.n	800319c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800312e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003138:	d111      	bne.n	800315e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003142:	d004      	beq.n	800314e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800314c:	d107      	bne.n	800315e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800315c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003162:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003166:	d10f      	bne.n	8003188 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003176:	601a      	str	r2, [r3, #0]
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003186:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003198:	2303      	movs	r3, #3
 800319a:	e010      	b.n	80031be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689a      	ldr	r2, [r3, #8]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	4013      	ands	r3, r2
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d196      	bne.n	80030ea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3728      	adds	r7, #40	; 0x28
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	20000018 	.word	0x20000018

080031cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af02      	add	r7, sp, #8
 80031d2:	60f8      	str	r0, [r7, #12]
 80031d4:	60b9      	str	r1, [r7, #8]
 80031d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2200      	movs	r2, #0
 80031e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f7ff ff5b 	bl	80030a0 <SPI_WaitFifoStateUntilTimeout>
 80031ea:	4603      	mov	r3, r0
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d007      	beq.n	8003200 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031f4:	f043 0220 	orr.w	r2, r3, #32
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80031fc:	2303      	movs	r3, #3
 80031fe:	e027      	b.n	8003250 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	2200      	movs	r2, #0
 8003208:	2180      	movs	r1, #128	; 0x80
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f7ff fec0 	bl	8002f90 <SPI_WaitFlagStateUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d007      	beq.n	8003226 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321a:	f043 0220 	orr.w	r2, r3, #32
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e014      	b.n	8003250 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	9300      	str	r3, [sp, #0]
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2200      	movs	r2, #0
 800322e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f7ff ff34 	bl	80030a0 <SPI_WaitFifoStateUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003242:	f043 0220 	orr.w	r2, r3, #32
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e000      	b.n	8003250 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800324e:	2300      	movs	r3, #0
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b082      	sub	sp, #8
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e040      	b.n	80032ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800326e:	2b00      	cmp	r3, #0
 8003270:	d106      	bne.n	8003280 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fd fcc4 	bl	8000c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2224      	movs	r2, #36	; 0x24
 8003284:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 0201 	bic.w	r2, r2, #1
 8003294:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f000 fbe8 	bl	8003a6c <UART_SetConfig>
 800329c:	4603      	mov	r3, r0
 800329e:	2b01      	cmp	r3, #1
 80032a0:	d101      	bne.n	80032a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e022      	b.n	80032ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d002      	beq.n	80032b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f000 fe66 	bl	8003f80 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685a      	ldr	r2, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689a      	ldr	r2, [r3, #8]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	f000 feed 	bl	80040c4 <UART_CheckIdleState>
 80032ea:	4603      	mov	r3, r0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b08b      	sub	sp, #44	; 0x2c
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	60f8      	str	r0, [r7, #12]
 80032fc:	60b9      	str	r1, [r7, #8]
 80032fe:	4613      	mov	r3, r2
 8003300:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003306:	2b20      	cmp	r3, #32
 8003308:	d156      	bne.n	80033b8 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d002      	beq.n	8003316 <HAL_UART_Transmit_IT+0x22>
 8003310:	88fb      	ldrh	r3, [r7, #6]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e04f      	b.n	80033ba <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003320:	2b01      	cmp	r3, #1
 8003322:	d101      	bne.n	8003328 <HAL_UART_Transmit_IT+0x34>
 8003324:	2302      	movs	r3, #2
 8003326:	e048      	b.n	80033ba <HAL_UART_Transmit_IT+0xc6>
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	68ba      	ldr	r2, [r7, #8]
 8003334:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	88fa      	ldrh	r2, [r7, #6]
 800333a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	88fa      	ldrh	r2, [r7, #6]
 8003342:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2221      	movs	r2, #33	; 0x21
 8003358:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003362:	d107      	bne.n	8003374 <HAL_UART_Transmit_IT+0x80>
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d103      	bne.n	8003374 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	4a16      	ldr	r2, [pc, #88]	; (80033c8 <HAL_UART_Transmit_IT+0xd4>)
 8003370:	669a      	str	r2, [r3, #104]	; 0x68
 8003372:	e002      	b.n	800337a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	4a15      	ldr	r2, [pc, #84]	; (80033cc <HAL_UART_Transmit_IT+0xd8>)
 8003378:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	e853 3f00 	ldrex	r3, [r3]
 800338e:	613b      	str	r3, [r7, #16]
   return(result);
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003396:	627b      	str	r3, [r7, #36]	; 0x24
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	461a      	mov	r2, r3
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	623b      	str	r3, [r7, #32]
 80033a2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a4:	69f9      	ldr	r1, [r7, #28]
 80033a6:	6a3a      	ldr	r2, [r7, #32]
 80033a8:	e841 2300 	strex	r3, r2, [r1]
 80033ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1e6      	bne.n	8003382 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80033b4:	2300      	movs	r3, #0
 80033b6:	e000      	b.n	80033ba <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80033b8:	2302      	movs	r3, #2
  }
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	372c      	adds	r7, #44	; 0x2c
 80033be:	46bd      	mov	sp, r7
 80033c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	0800461f 	.word	0x0800461f
 80033cc:	08004567 	.word	0x08004567

080033d0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b08a      	sub	sp, #40	; 0x28
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	60f8      	str	r0, [r7, #12]
 80033d8:	60b9      	str	r1, [r7, #8]
 80033da:	4613      	mov	r3, r2
 80033dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033e2:	2b20      	cmp	r3, #32
 80033e4:	d142      	bne.n	800346c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <HAL_UART_Receive_IT+0x22>
 80033ec:	88fb      	ldrh	r3, [r7, #6]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e03b      	b.n	800346e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_UART_Receive_IT+0x34>
 8003400:	2302      	movs	r3, #2
 8003402:	e034      	b.n	800346e <HAL_UART_Receive_IT+0x9e>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a18      	ldr	r2, [pc, #96]	; (8003478 <HAL_UART_Receive_IT+0xa8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d01f      	beq.n	800345c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d018      	beq.n	800345c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	e853 3f00 	ldrex	r3, [r3]
 8003436:	613b      	str	r3, [r7, #16]
   return(result);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	461a      	mov	r2, r3
 8003446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003448:	623b      	str	r3, [r7, #32]
 800344a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	69f9      	ldr	r1, [r7, #28]
 800344e:	6a3a      	ldr	r2, [r7, #32]
 8003450:	e841 2300 	strex	r3, r2, [r1]
 8003454:	61bb      	str	r3, [r7, #24]
   return(result);
 8003456:	69bb      	ldr	r3, [r7, #24]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1e6      	bne.n	800342a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800345c:	88fb      	ldrh	r3, [r7, #6]
 800345e:	461a      	mov	r2, r3
 8003460:	68b9      	ldr	r1, [r7, #8]
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f000 ff3c 	bl	80042e0 <UART_Start_Receive_IT>
 8003468:	4603      	mov	r3, r0
 800346a:	e000      	b.n	800346e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800346c:	2302      	movs	r3, #2
  }
}
 800346e:	4618      	mov	r0, r3
 8003470:	3728      	adds	r7, #40	; 0x28
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40008000 	.word	0x40008000

0800347c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b0ba      	sub	sp, #232	; 0xe8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80034a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80034a6:	f640 030f 	movw	r3, #2063	; 0x80f
 80034aa:	4013      	ands	r3, r2
 80034ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80034b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d115      	bne.n	80034e4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80034b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034bc:	f003 0320 	and.w	r3, r3, #32
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00f      	beq.n	80034e4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034c8:	f003 0320 	and.w	r3, r3, #32
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d009      	beq.n	80034e4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 82a6 	beq.w	8003a26 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
      }
      return;
 80034e2:	e2a0      	b.n	8003a26 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80034e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	f000 8117 	beq.w	800371c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d106      	bne.n	8003508 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034fa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80034fe:	4b85      	ldr	r3, [pc, #532]	; (8003714 <HAL_UART_IRQHandler+0x298>)
 8003500:	4013      	ands	r3, r2
 8003502:	2b00      	cmp	r3, #0
 8003504:	f000 810a 	beq.w	800371c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003508:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d011      	beq.n	8003538 <HAL_UART_IRQHandler+0xbc>
 8003514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003518:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351c:	2b00      	cmp	r3, #0
 800351e:	d00b      	beq.n	8003538 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2201      	movs	r2, #1
 8003526:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800352e:	f043 0201 	orr.w	r2, r3, #1
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003538:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800353c:	f003 0302 	and.w	r3, r3, #2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d011      	beq.n	8003568 <HAL_UART_IRQHandler+0xec>
 8003544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00b      	beq.n	8003568 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2202      	movs	r2, #2
 8003556:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800355e:	f043 0204 	orr.w	r2, r3, #4
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b00      	cmp	r3, #0
 8003572:	d011      	beq.n	8003598 <HAL_UART_IRQHandler+0x11c>
 8003574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b00      	cmp	r3, #0
 800357e:	d00b      	beq.n	8003598 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	2204      	movs	r2, #4
 8003586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800358e:	f043 0202 	orr.w	r2, r3, #2
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d017      	beq.n	80035d4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035a8:	f003 0320 	and.w	r3, r3, #32
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d105      	bne.n	80035bc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80035b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035b4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00b      	beq.n	80035d4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2208      	movs	r2, #8
 80035c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ca:	f043 0208 	orr.w	r2, r3, #8
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d012      	beq.n	8003606 <HAL_UART_IRQHandler+0x18a>
 80035e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00c      	beq.n	8003606 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035fc:	f043 0220 	orr.w	r2, r3, #32
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800360c:	2b00      	cmp	r3, #0
 800360e:	f000 820c 	beq.w	8003a2a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003612:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003616:	f003 0320 	and.w	r3, r3, #32
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00d      	beq.n	800363a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800361e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	d007      	beq.n	800363a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003640:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364e:	2b40      	cmp	r3, #64	; 0x40
 8003650:	d005      	beq.n	800365e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003652:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003656:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800365a:	2b00      	cmp	r3, #0
 800365c:	d04f      	beq.n	80036fe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 ff08 	bl	8004474 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800366e:	2b40      	cmp	r3, #64	; 0x40
 8003670:	d141      	bne.n	80036f6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	3308      	adds	r3, #8
 8003678:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800367c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003680:	e853 3f00 	ldrex	r3, [r3]
 8003684:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003688:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800368c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003690:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	3308      	adds	r3, #8
 800369a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800369e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80036a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80036aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80036ae:	e841 2300 	strex	r3, r2, [r1]
 80036b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80036b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d1d9      	bne.n	8003672 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d013      	beq.n	80036ee <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	4a13      	ldr	r2, [pc, #76]	; (8003718 <HAL_UART_IRQHandler+0x29c>)
 80036cc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fd fd3b 	bl	800114e <HAL_DMA_Abort_IT>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d017      	beq.n	800370e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80036e8:	4610      	mov	r0, r2
 80036ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ec:	e00f      	b.n	800370e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f9a6 	bl	8003a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f4:	e00b      	b.n	800370e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 f9a2 	bl	8003a40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fc:	e007      	b.n	800370e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f99e 	bl	8003a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800370c:	e18d      	b.n	8003a2a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800370e:	bf00      	nop
    return;
 8003710:	e18b      	b.n	8003a2a <HAL_UART_IRQHandler+0x5ae>
 8003712:	bf00      	nop
 8003714:	04000120 	.word	0x04000120
 8003718:	0800453b 	.word	0x0800453b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003720:	2b01      	cmp	r3, #1
 8003722:	f040 8146 	bne.w	80039b2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372a:	f003 0310 	and.w	r3, r3, #16
 800372e:	2b00      	cmp	r3, #0
 8003730:	f000 813f 	beq.w	80039b2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003738:	f003 0310 	and.w	r3, r3, #16
 800373c:	2b00      	cmp	r3, #0
 800373e:	f000 8138 	beq.w	80039b2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2210      	movs	r2, #16
 8003748:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003754:	2b40      	cmp	r3, #64	; 0x40
 8003756:	f040 80b4 	bne.w	80038c2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003766:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800376a:	2b00      	cmp	r3, #0
 800376c:	f000 815f 	beq.w	8003a2e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003776:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800377a:	429a      	cmp	r2, r3
 800377c:	f080 8157 	bcs.w	8003a2e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003786:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0320 	and.w	r3, r3, #32
 8003796:	2b00      	cmp	r3, #0
 8003798:	f040 8085 	bne.w	80038a6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037a8:	e853 3f00 	ldrex	r3, [r3]
 80037ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80037b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037b8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	461a      	mov	r2, r3
 80037c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80037c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80037ca:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037d6:	e841 2300 	strex	r3, r2, [r1]
 80037da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037de:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1da      	bne.n	800379c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3308      	adds	r3, #8
 80037ec:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037f0:	e853 3f00 	ldrex	r3, [r3]
 80037f4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037f8:	f023 0301 	bic.w	r3, r3, #1
 80037fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3308      	adds	r3, #8
 8003806:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800380a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800380e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003810:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003812:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003816:	e841 2300 	strex	r3, r2, [r1]
 800381a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800381c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1e1      	bne.n	80037e6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3308      	adds	r3, #8
 8003828:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800382c:	e853 3f00 	ldrex	r3, [r3]
 8003830:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003832:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003834:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003838:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3308      	adds	r3, #8
 8003842:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003846:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003848:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800384c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003854:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1e3      	bne.n	8003822 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800386e:	e853 3f00 	ldrex	r3, [r3]
 8003872:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003876:	f023 0310 	bic.w	r3, r3, #16
 800387a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	461a      	mov	r2, r3
 8003884:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003888:	65bb      	str	r3, [r7, #88]	; 0x58
 800388a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800388e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003890:	e841 2300 	strex	r3, r2, [r1]
 8003894:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003896:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1e4      	bne.n	8003866 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a0:	4618      	mov	r0, r3
 80038a2:	f7fd fc16 	bl	80010d2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	1ad3      	subs	r3, r2, r3
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	4619      	mov	r1, r3
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f8ca 	bl	8003a54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038c0:	e0b5      	b.n	8003a2e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038dc:	b29b      	uxth	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	f000 80a7 	beq.w	8003a32 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80038e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 80a2 	beq.w	8003a32 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f6:	e853 3f00 	ldrex	r3, [r3]
 80038fa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003902:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	461a      	mov	r2, r3
 800390c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003910:	647b      	str	r3, [r7, #68]	; 0x44
 8003912:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003914:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003916:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003918:	e841 2300 	strex	r3, r2, [r1]
 800391c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800391e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1e4      	bne.n	80038ee <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3308      	adds	r3, #8
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	623b      	str	r3, [r7, #32]
   return(result);
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	f023 0301 	bic.w	r3, r3, #1
 800393a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	3308      	adds	r3, #8
 8003944:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003948:	633a      	str	r2, [r7, #48]	; 0x30
 800394a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800394e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e3      	bne.n	8003924 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2220      	movs	r2, #32
 8003960:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	e853 3f00 	ldrex	r3, [r3]
 800397a:	60fb      	str	r3, [r7, #12]
   return(result);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	f023 0310 	bic.w	r3, r3, #16
 8003982:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003994:	69b9      	ldr	r1, [r7, #24]
 8003996:	69fa      	ldr	r2, [r7, #28]
 8003998:	e841 2300 	strex	r3, r2, [r1]
 800399c:	617b      	str	r3, [r7, #20]
   return(result);
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1e4      	bne.n	800396e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80039a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039a8:	4619      	mov	r1, r3
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f852 	bl	8003a54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039b0:	e03f      	b.n	8003a32 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80039b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00e      	beq.n	80039dc <HAL_UART_IRQHandler+0x560>
 80039be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d008      	beq.n	80039dc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80039d2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f001 f80c 	bl	80049f2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039da:	e02d      	b.n	8003a38 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80039dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00e      	beq.n	8003a06 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80039e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d008      	beq.n	8003a06 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d01c      	beq.n	8003a36 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	4798      	blx	r3
    }
    return;
 8003a04:	e017      	b.n	8003a36 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d012      	beq.n	8003a38 <HAL_UART_IRQHandler+0x5bc>
 8003a12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00c      	beq.n	8003a38 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 fe5d 	bl	80046de <UART_EndTransmit_IT>
    return;
 8003a24:	e008      	b.n	8003a38 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003a26:	bf00      	nop
 8003a28:	e006      	b.n	8003a38 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003a2a:	bf00      	nop
 8003a2c:	e004      	b.n	8003a38 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003a2e:	bf00      	nop
 8003a30:	e002      	b.n	8003a38 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003a32:	bf00      	nop
 8003a34:	e000      	b.n	8003a38 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003a36:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003a38:	37e8      	adds	r7, #232	; 0xe8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop

08003a40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a60:	bf00      	nop
 8003a62:	370c      	adds	r7, #12
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a6c:	b5b0      	push	{r4, r5, r7, lr}
 8003a6e:	b088      	sub	sp, #32
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a74:	2300      	movs	r3, #0
 8003a76:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	431a      	orrs	r2, r3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	695b      	ldr	r3, [r3, #20]
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	4bad      	ldr	r3, [pc, #692]	; (8003d4c <UART_SetConfig+0x2e0>)
 8003a98:	4013      	ands	r3, r2
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6812      	ldr	r2, [r2, #0]
 8003a9e:	69f9      	ldr	r1, [r7, #28]
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	68da      	ldr	r2, [r3, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4aa2      	ldr	r2, [pc, #648]	; (8003d50 <UART_SetConfig+0x2e4>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d004      	beq.n	8003ad4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a1b      	ldr	r3, [r3, #32]
 8003ace:	69fa      	ldr	r2, [r7, #28]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	69fa      	ldr	r2, [r7, #28]
 8003ae4:	430a      	orrs	r2, r1
 8003ae6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a99      	ldr	r2, [pc, #612]	; (8003d54 <UART_SetConfig+0x2e8>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d121      	bne.n	8003b36 <UART_SetConfig+0xca>
 8003af2:	4b99      	ldr	r3, [pc, #612]	; (8003d58 <UART_SetConfig+0x2ec>)
 8003af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003af8:	f003 0303 	and.w	r3, r3, #3
 8003afc:	2b03      	cmp	r3, #3
 8003afe:	d817      	bhi.n	8003b30 <UART_SetConfig+0xc4>
 8003b00:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <UART_SetConfig+0x9c>)
 8003b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b06:	bf00      	nop
 8003b08:	08003b19 	.word	0x08003b19
 8003b0c:	08003b25 	.word	0x08003b25
 8003b10:	08003b1f 	.word	0x08003b1f
 8003b14:	08003b2b 	.word	0x08003b2b
 8003b18:	2301      	movs	r3, #1
 8003b1a:	76fb      	strb	r3, [r7, #27]
 8003b1c:	e0e7      	b.n	8003cee <UART_SetConfig+0x282>
 8003b1e:	2302      	movs	r3, #2
 8003b20:	76fb      	strb	r3, [r7, #27]
 8003b22:	e0e4      	b.n	8003cee <UART_SetConfig+0x282>
 8003b24:	2304      	movs	r3, #4
 8003b26:	76fb      	strb	r3, [r7, #27]
 8003b28:	e0e1      	b.n	8003cee <UART_SetConfig+0x282>
 8003b2a:	2308      	movs	r3, #8
 8003b2c:	76fb      	strb	r3, [r7, #27]
 8003b2e:	e0de      	b.n	8003cee <UART_SetConfig+0x282>
 8003b30:	2310      	movs	r3, #16
 8003b32:	76fb      	strb	r3, [r7, #27]
 8003b34:	e0db      	b.n	8003cee <UART_SetConfig+0x282>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a88      	ldr	r2, [pc, #544]	; (8003d5c <UART_SetConfig+0x2f0>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d132      	bne.n	8003ba6 <UART_SetConfig+0x13a>
 8003b40:	4b85      	ldr	r3, [pc, #532]	; (8003d58 <UART_SetConfig+0x2ec>)
 8003b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b46:	f003 030c 	and.w	r3, r3, #12
 8003b4a:	2b0c      	cmp	r3, #12
 8003b4c:	d828      	bhi.n	8003ba0 <UART_SetConfig+0x134>
 8003b4e:	a201      	add	r2, pc, #4	; (adr r2, 8003b54 <UART_SetConfig+0xe8>)
 8003b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b54:	08003b89 	.word	0x08003b89
 8003b58:	08003ba1 	.word	0x08003ba1
 8003b5c:	08003ba1 	.word	0x08003ba1
 8003b60:	08003ba1 	.word	0x08003ba1
 8003b64:	08003b95 	.word	0x08003b95
 8003b68:	08003ba1 	.word	0x08003ba1
 8003b6c:	08003ba1 	.word	0x08003ba1
 8003b70:	08003ba1 	.word	0x08003ba1
 8003b74:	08003b8f 	.word	0x08003b8f
 8003b78:	08003ba1 	.word	0x08003ba1
 8003b7c:	08003ba1 	.word	0x08003ba1
 8003b80:	08003ba1 	.word	0x08003ba1
 8003b84:	08003b9b 	.word	0x08003b9b
 8003b88:	2300      	movs	r3, #0
 8003b8a:	76fb      	strb	r3, [r7, #27]
 8003b8c:	e0af      	b.n	8003cee <UART_SetConfig+0x282>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	76fb      	strb	r3, [r7, #27]
 8003b92:	e0ac      	b.n	8003cee <UART_SetConfig+0x282>
 8003b94:	2304      	movs	r3, #4
 8003b96:	76fb      	strb	r3, [r7, #27]
 8003b98:	e0a9      	b.n	8003cee <UART_SetConfig+0x282>
 8003b9a:	2308      	movs	r3, #8
 8003b9c:	76fb      	strb	r3, [r7, #27]
 8003b9e:	e0a6      	b.n	8003cee <UART_SetConfig+0x282>
 8003ba0:	2310      	movs	r3, #16
 8003ba2:	76fb      	strb	r3, [r7, #27]
 8003ba4:	e0a3      	b.n	8003cee <UART_SetConfig+0x282>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a6d      	ldr	r2, [pc, #436]	; (8003d60 <UART_SetConfig+0x2f4>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d120      	bne.n	8003bf2 <UART_SetConfig+0x186>
 8003bb0:	4b69      	ldr	r3, [pc, #420]	; (8003d58 <UART_SetConfig+0x2ec>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bba:	2b30      	cmp	r3, #48	; 0x30
 8003bbc:	d013      	beq.n	8003be6 <UART_SetConfig+0x17a>
 8003bbe:	2b30      	cmp	r3, #48	; 0x30
 8003bc0:	d814      	bhi.n	8003bec <UART_SetConfig+0x180>
 8003bc2:	2b20      	cmp	r3, #32
 8003bc4:	d009      	beq.n	8003bda <UART_SetConfig+0x16e>
 8003bc6:	2b20      	cmp	r3, #32
 8003bc8:	d810      	bhi.n	8003bec <UART_SetConfig+0x180>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <UART_SetConfig+0x168>
 8003bce:	2b10      	cmp	r3, #16
 8003bd0:	d006      	beq.n	8003be0 <UART_SetConfig+0x174>
 8003bd2:	e00b      	b.n	8003bec <UART_SetConfig+0x180>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	76fb      	strb	r3, [r7, #27]
 8003bd8:	e089      	b.n	8003cee <UART_SetConfig+0x282>
 8003bda:	2302      	movs	r3, #2
 8003bdc:	76fb      	strb	r3, [r7, #27]
 8003bde:	e086      	b.n	8003cee <UART_SetConfig+0x282>
 8003be0:	2304      	movs	r3, #4
 8003be2:	76fb      	strb	r3, [r7, #27]
 8003be4:	e083      	b.n	8003cee <UART_SetConfig+0x282>
 8003be6:	2308      	movs	r3, #8
 8003be8:	76fb      	strb	r3, [r7, #27]
 8003bea:	e080      	b.n	8003cee <UART_SetConfig+0x282>
 8003bec:	2310      	movs	r3, #16
 8003bee:	76fb      	strb	r3, [r7, #27]
 8003bf0:	e07d      	b.n	8003cee <UART_SetConfig+0x282>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	4a5b      	ldr	r2, [pc, #364]	; (8003d64 <UART_SetConfig+0x2f8>)
 8003bf8:	4293      	cmp	r3, r2
 8003bfa:	d120      	bne.n	8003c3e <UART_SetConfig+0x1d2>
 8003bfc:	4b56      	ldr	r3, [pc, #344]	; (8003d58 <UART_SetConfig+0x2ec>)
 8003bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c06:	2bc0      	cmp	r3, #192	; 0xc0
 8003c08:	d013      	beq.n	8003c32 <UART_SetConfig+0x1c6>
 8003c0a:	2bc0      	cmp	r3, #192	; 0xc0
 8003c0c:	d814      	bhi.n	8003c38 <UART_SetConfig+0x1cc>
 8003c0e:	2b80      	cmp	r3, #128	; 0x80
 8003c10:	d009      	beq.n	8003c26 <UART_SetConfig+0x1ba>
 8003c12:	2b80      	cmp	r3, #128	; 0x80
 8003c14:	d810      	bhi.n	8003c38 <UART_SetConfig+0x1cc>
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d002      	beq.n	8003c20 <UART_SetConfig+0x1b4>
 8003c1a:	2b40      	cmp	r3, #64	; 0x40
 8003c1c:	d006      	beq.n	8003c2c <UART_SetConfig+0x1c0>
 8003c1e:	e00b      	b.n	8003c38 <UART_SetConfig+0x1cc>
 8003c20:	2300      	movs	r3, #0
 8003c22:	76fb      	strb	r3, [r7, #27]
 8003c24:	e063      	b.n	8003cee <UART_SetConfig+0x282>
 8003c26:	2302      	movs	r3, #2
 8003c28:	76fb      	strb	r3, [r7, #27]
 8003c2a:	e060      	b.n	8003cee <UART_SetConfig+0x282>
 8003c2c:	2304      	movs	r3, #4
 8003c2e:	76fb      	strb	r3, [r7, #27]
 8003c30:	e05d      	b.n	8003cee <UART_SetConfig+0x282>
 8003c32:	2308      	movs	r3, #8
 8003c34:	76fb      	strb	r3, [r7, #27]
 8003c36:	e05a      	b.n	8003cee <UART_SetConfig+0x282>
 8003c38:	2310      	movs	r3, #16
 8003c3a:	76fb      	strb	r3, [r7, #27]
 8003c3c:	e057      	b.n	8003cee <UART_SetConfig+0x282>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a49      	ldr	r2, [pc, #292]	; (8003d68 <UART_SetConfig+0x2fc>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d125      	bne.n	8003c94 <UART_SetConfig+0x228>
 8003c48:	4b43      	ldr	r3, [pc, #268]	; (8003d58 <UART_SetConfig+0x2ec>)
 8003c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c56:	d017      	beq.n	8003c88 <UART_SetConfig+0x21c>
 8003c58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c5c:	d817      	bhi.n	8003c8e <UART_SetConfig+0x222>
 8003c5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c62:	d00b      	beq.n	8003c7c <UART_SetConfig+0x210>
 8003c64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c68:	d811      	bhi.n	8003c8e <UART_SetConfig+0x222>
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d003      	beq.n	8003c76 <UART_SetConfig+0x20a>
 8003c6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c72:	d006      	beq.n	8003c82 <UART_SetConfig+0x216>
 8003c74:	e00b      	b.n	8003c8e <UART_SetConfig+0x222>
 8003c76:	2300      	movs	r3, #0
 8003c78:	76fb      	strb	r3, [r7, #27]
 8003c7a:	e038      	b.n	8003cee <UART_SetConfig+0x282>
 8003c7c:	2302      	movs	r3, #2
 8003c7e:	76fb      	strb	r3, [r7, #27]
 8003c80:	e035      	b.n	8003cee <UART_SetConfig+0x282>
 8003c82:	2304      	movs	r3, #4
 8003c84:	76fb      	strb	r3, [r7, #27]
 8003c86:	e032      	b.n	8003cee <UART_SetConfig+0x282>
 8003c88:	2308      	movs	r3, #8
 8003c8a:	76fb      	strb	r3, [r7, #27]
 8003c8c:	e02f      	b.n	8003cee <UART_SetConfig+0x282>
 8003c8e:	2310      	movs	r3, #16
 8003c90:	76fb      	strb	r3, [r7, #27]
 8003c92:	e02c      	b.n	8003cee <UART_SetConfig+0x282>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a2d      	ldr	r2, [pc, #180]	; (8003d50 <UART_SetConfig+0x2e4>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d125      	bne.n	8003cea <UART_SetConfig+0x27e>
 8003c9e:	4b2e      	ldr	r3, [pc, #184]	; (8003d58 <UART_SetConfig+0x2ec>)
 8003ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ca8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cac:	d017      	beq.n	8003cde <UART_SetConfig+0x272>
 8003cae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cb2:	d817      	bhi.n	8003ce4 <UART_SetConfig+0x278>
 8003cb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cb8:	d00b      	beq.n	8003cd2 <UART_SetConfig+0x266>
 8003cba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cbe:	d811      	bhi.n	8003ce4 <UART_SetConfig+0x278>
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d003      	beq.n	8003ccc <UART_SetConfig+0x260>
 8003cc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cc8:	d006      	beq.n	8003cd8 <UART_SetConfig+0x26c>
 8003cca:	e00b      	b.n	8003ce4 <UART_SetConfig+0x278>
 8003ccc:	2300      	movs	r3, #0
 8003cce:	76fb      	strb	r3, [r7, #27]
 8003cd0:	e00d      	b.n	8003cee <UART_SetConfig+0x282>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	76fb      	strb	r3, [r7, #27]
 8003cd6:	e00a      	b.n	8003cee <UART_SetConfig+0x282>
 8003cd8:	2304      	movs	r3, #4
 8003cda:	76fb      	strb	r3, [r7, #27]
 8003cdc:	e007      	b.n	8003cee <UART_SetConfig+0x282>
 8003cde:	2308      	movs	r3, #8
 8003ce0:	76fb      	strb	r3, [r7, #27]
 8003ce2:	e004      	b.n	8003cee <UART_SetConfig+0x282>
 8003ce4:	2310      	movs	r3, #16
 8003ce6:	76fb      	strb	r3, [r7, #27]
 8003ce8:	e001      	b.n	8003cee <UART_SetConfig+0x282>
 8003cea:	2310      	movs	r3, #16
 8003cec:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a17      	ldr	r2, [pc, #92]	; (8003d50 <UART_SetConfig+0x2e4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	f040 8087 	bne.w	8003e08 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cfa:	7efb      	ldrb	r3, [r7, #27]
 8003cfc:	2b08      	cmp	r3, #8
 8003cfe:	d837      	bhi.n	8003d70 <UART_SetConfig+0x304>
 8003d00:	a201      	add	r2, pc, #4	; (adr r2, 8003d08 <UART_SetConfig+0x29c>)
 8003d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d06:	bf00      	nop
 8003d08:	08003d2d 	.word	0x08003d2d
 8003d0c:	08003d71 	.word	0x08003d71
 8003d10:	08003d35 	.word	0x08003d35
 8003d14:	08003d71 	.word	0x08003d71
 8003d18:	08003d3b 	.word	0x08003d3b
 8003d1c:	08003d71 	.word	0x08003d71
 8003d20:	08003d71 	.word	0x08003d71
 8003d24:	08003d71 	.word	0x08003d71
 8003d28:	08003d43 	.word	0x08003d43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d2c:	f7fe f9d6 	bl	80020dc <HAL_RCC_GetPCLK1Freq>
 8003d30:	6178      	str	r0, [r7, #20]
        break;
 8003d32:	e022      	b.n	8003d7a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d34:	4b0d      	ldr	r3, [pc, #52]	; (8003d6c <UART_SetConfig+0x300>)
 8003d36:	617b      	str	r3, [r7, #20]
        break;
 8003d38:	e01f      	b.n	8003d7a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d3a:	f7fe f937 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 8003d3e:	6178      	str	r0, [r7, #20]
        break;
 8003d40:	e01b      	b.n	8003d7a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d46:	617b      	str	r3, [r7, #20]
        break;
 8003d48:	e017      	b.n	8003d7a <UART_SetConfig+0x30e>
 8003d4a:	bf00      	nop
 8003d4c:	efff69f3 	.word	0xefff69f3
 8003d50:	40008000 	.word	0x40008000
 8003d54:	40013800 	.word	0x40013800
 8003d58:	40021000 	.word	0x40021000
 8003d5c:	40004400 	.word	0x40004400
 8003d60:	40004800 	.word	0x40004800
 8003d64:	40004c00 	.word	0x40004c00
 8003d68:	40005000 	.word	0x40005000
 8003d6c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003d70:	2300      	movs	r3, #0
 8003d72:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	76bb      	strb	r3, [r7, #26]
        break;
 8003d78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	f000 80f1 	beq.w	8003f64 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	685a      	ldr	r2, [r3, #4]
 8003d86:	4613      	mov	r3, r2
 8003d88:	005b      	lsls	r3, r3, #1
 8003d8a:	4413      	add	r3, r2
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	429a      	cmp	r2, r3
 8003d90:	d305      	bcc.n	8003d9e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d902      	bls.n	8003da4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	76bb      	strb	r3, [r7, #26]
 8003da2:	e0df      	b.n	8003f64 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f04f 0100 	mov.w	r1, #0
 8003dac:	f04f 0200 	mov.w	r2, #0
 8003db0:	f04f 0300 	mov.w	r3, #0
 8003db4:	020b      	lsls	r3, r1, #8
 8003db6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003dba:	0202      	lsls	r2, r0, #8
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	6849      	ldr	r1, [r1, #4]
 8003dc0:	0849      	lsrs	r1, r1, #1
 8003dc2:	4608      	mov	r0, r1
 8003dc4:	f04f 0100 	mov.w	r1, #0
 8003dc8:	1814      	adds	r4, r2, r0
 8003dca:	eb43 0501 	adc.w	r5, r3, r1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	461a      	mov	r2, r3
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	4620      	mov	r0, r4
 8003dda:	4629      	mov	r1, r5
 8003ddc:	f7fc f9f4 	bl	80001c8 <__aeabi_uldivmod>
 8003de0:	4602      	mov	r2, r0
 8003de2:	460b      	mov	r3, r1
 8003de4:	4613      	mov	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dee:	d308      	bcc.n	8003e02 <UART_SetConfig+0x396>
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003df6:	d204      	bcs.n	8003e02 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	693a      	ldr	r2, [r7, #16]
 8003dfe:	60da      	str	r2, [r3, #12]
 8003e00:	e0b0      	b.n	8003f64 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	76bb      	strb	r3, [r7, #26]
 8003e06:	e0ad      	b.n	8003f64 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e10:	d15b      	bne.n	8003eca <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8003e12:	7efb      	ldrb	r3, [r7, #27]
 8003e14:	2b08      	cmp	r3, #8
 8003e16:	d828      	bhi.n	8003e6a <UART_SetConfig+0x3fe>
 8003e18:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <UART_SetConfig+0x3b4>)
 8003e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1e:	bf00      	nop
 8003e20:	08003e45 	.word	0x08003e45
 8003e24:	08003e4d 	.word	0x08003e4d
 8003e28:	08003e55 	.word	0x08003e55
 8003e2c:	08003e6b 	.word	0x08003e6b
 8003e30:	08003e5b 	.word	0x08003e5b
 8003e34:	08003e6b 	.word	0x08003e6b
 8003e38:	08003e6b 	.word	0x08003e6b
 8003e3c:	08003e6b 	.word	0x08003e6b
 8003e40:	08003e63 	.word	0x08003e63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e44:	f7fe f94a 	bl	80020dc <HAL_RCC_GetPCLK1Freq>
 8003e48:	6178      	str	r0, [r7, #20]
        break;
 8003e4a:	e013      	b.n	8003e74 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e4c:	f7fe f95c 	bl	8002108 <HAL_RCC_GetPCLK2Freq>
 8003e50:	6178      	str	r0, [r7, #20]
        break;
 8003e52:	e00f      	b.n	8003e74 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e54:	4b49      	ldr	r3, [pc, #292]	; (8003f7c <UART_SetConfig+0x510>)
 8003e56:	617b      	str	r3, [r7, #20]
        break;
 8003e58:	e00c      	b.n	8003e74 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e5a:	f7fe f8a7 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 8003e5e:	6178      	str	r0, [r7, #20]
        break;
 8003e60:	e008      	b.n	8003e74 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e66:	617b      	str	r3, [r7, #20]
        break;
 8003e68:	e004      	b.n	8003e74 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	76bb      	strb	r3, [r7, #26]
        break;
 8003e72:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d074      	beq.n	8003f64 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	005a      	lsls	r2, r3, #1
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	085b      	lsrs	r3, r3, #1
 8003e84:	441a      	add	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	2b0f      	cmp	r3, #15
 8003e94:	d916      	bls.n	8003ec4 <UART_SetConfig+0x458>
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e9c:	d212      	bcs.n	8003ec4 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	f023 030f 	bic.w	r3, r3, #15
 8003ea6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	085b      	lsrs	r3, r3, #1
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	b29a      	uxth	r2, r3
 8003eb4:	89fb      	ldrh	r3, [r7, #14]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	89fa      	ldrh	r2, [r7, #14]
 8003ec0:	60da      	str	r2, [r3, #12]
 8003ec2:	e04f      	b.n	8003f64 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	76bb      	strb	r3, [r7, #26]
 8003ec8:	e04c      	b.n	8003f64 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003eca:	7efb      	ldrb	r3, [r7, #27]
 8003ecc:	2b08      	cmp	r3, #8
 8003ece:	d828      	bhi.n	8003f22 <UART_SetConfig+0x4b6>
 8003ed0:	a201      	add	r2, pc, #4	; (adr r2, 8003ed8 <UART_SetConfig+0x46c>)
 8003ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed6:	bf00      	nop
 8003ed8:	08003efd 	.word	0x08003efd
 8003edc:	08003f05 	.word	0x08003f05
 8003ee0:	08003f0d 	.word	0x08003f0d
 8003ee4:	08003f23 	.word	0x08003f23
 8003ee8:	08003f13 	.word	0x08003f13
 8003eec:	08003f23 	.word	0x08003f23
 8003ef0:	08003f23 	.word	0x08003f23
 8003ef4:	08003f23 	.word	0x08003f23
 8003ef8:	08003f1b 	.word	0x08003f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003efc:	f7fe f8ee 	bl	80020dc <HAL_RCC_GetPCLK1Freq>
 8003f00:	6178      	str	r0, [r7, #20]
        break;
 8003f02:	e013      	b.n	8003f2c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f04:	f7fe f900 	bl	8002108 <HAL_RCC_GetPCLK2Freq>
 8003f08:	6178      	str	r0, [r7, #20]
        break;
 8003f0a:	e00f      	b.n	8003f2c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f0c:	4b1b      	ldr	r3, [pc, #108]	; (8003f7c <UART_SetConfig+0x510>)
 8003f0e:	617b      	str	r3, [r7, #20]
        break;
 8003f10:	e00c      	b.n	8003f2c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f12:	f7fe f84b 	bl	8001fac <HAL_RCC_GetSysClockFreq>
 8003f16:	6178      	str	r0, [r7, #20]
        break;
 8003f18:	e008      	b.n	8003f2c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f1e:	617b      	str	r3, [r7, #20]
        break;
 8003f20:	e004      	b.n	8003f2c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	76bb      	strb	r3, [r7, #26]
        break;
 8003f2a:	bf00      	nop
    }

    if (pclk != 0U)
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d018      	beq.n	8003f64 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	685b      	ldr	r3, [r3, #4]
 8003f36:	085a      	lsrs	r2, r3, #1
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	441a      	add	r2, r3
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f44:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b0f      	cmp	r3, #15
 8003f4a:	d909      	bls.n	8003f60 <UART_SetConfig+0x4f4>
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f52:	d205      	bcs.n	8003f60 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	60da      	str	r2, [r3, #12]
 8003f5e:	e001      	b.n	8003f64 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f70:	7ebb      	ldrb	r3, [r7, #26]
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3720      	adds	r7, #32
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bdb0      	pop	{r4, r5, r7, pc}
 8003f7a:	bf00      	nop
 8003f7c:	00f42400 	.word	0x00f42400

08003f80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d00a      	beq.n	8003faa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	685b      	ldr	r3, [r3, #4]
 8003f9a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	430a      	orrs	r2, r1
 8003fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	430a      	orrs	r2, r1
 8003fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd0:	f003 0304 	and.w	r3, r3, #4
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d00a      	beq.n	8003fee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	430a      	orrs	r2, r1
 8003fec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00a      	beq.n	8004010 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	430a      	orrs	r2, r1
 800400e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00a      	beq.n	8004032 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	430a      	orrs	r2, r1
 8004030:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00a      	beq.n	8004054 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d01a      	beq.n	8004096 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	430a      	orrs	r2, r1
 8004074:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800407e:	d10a      	bne.n	8004096 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	605a      	str	r2, [r3, #4]
  }
}
 80040b8:	bf00      	nop
 80040ba:	370c      	adds	r7, #12
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b086      	sub	sp, #24
 80040c8:	af02      	add	r7, sp, #8
 80040ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040d4:	f7fc febc 	bl	8000e50 <HAL_GetTick>
 80040d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b08      	cmp	r3, #8
 80040e6:	d10e      	bne.n	8004106 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040ec:	9300      	str	r3, [sp, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 f82d 	bl	8004156 <UART_WaitOnFlagUntilTimeout>
 80040fc:	4603      	mov	r3, r0
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e023      	b.n	800414e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b04      	cmp	r3, #4
 8004112:	d10e      	bne.n	8004132 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004114:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004118:	9300      	str	r3, [sp, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f817 	bl	8004156 <UART_WaitOnFlagUntilTimeout>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e00d      	b.n	800414e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2220      	movs	r2, #32
 8004136:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2220      	movs	r2, #32
 800413c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2200      	movs	r2, #0
 8004142:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3710      	adds	r7, #16
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b09c      	sub	sp, #112	; 0x70
 800415a:	af00      	add	r7, sp, #0
 800415c:	60f8      	str	r0, [r7, #12]
 800415e:	60b9      	str	r1, [r7, #8]
 8004160:	603b      	str	r3, [r7, #0]
 8004162:	4613      	mov	r3, r2
 8004164:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004166:	e0a5      	b.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004168:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800416a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416e:	f000 80a1 	beq.w	80042b4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004172:	f7fc fe6d 	bl	8000e50 <HAL_GetTick>
 8004176:	4602      	mov	r2, r0
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	1ad3      	subs	r3, r2, r3
 800417c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800417e:	429a      	cmp	r2, r3
 8004180:	d302      	bcc.n	8004188 <UART_WaitOnFlagUntilTimeout+0x32>
 8004182:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004184:	2b00      	cmp	r3, #0
 8004186:	d13e      	bne.n	8004206 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004198:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800419c:	667b      	str	r3, [r7, #100]	; 0x64
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80041a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80041a8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80041ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80041b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e6      	bne.n	8004188 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3308      	adds	r3, #8
 80041c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041c4:	e853 3f00 	ldrex	r3, [r3]
 80041c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041cc:	f023 0301 	bic.w	r3, r3, #1
 80041d0:	663b      	str	r3, [r7, #96]	; 0x60
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	3308      	adds	r3, #8
 80041d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041da:	64ba      	str	r2, [r7, #72]	; 0x48
 80041dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041e2:	e841 2300 	strex	r3, r2, [r1]
 80041e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1e5      	bne.n	80041ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2220      	movs	r2, #32
 80041f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e067      	b.n	80042d6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0304 	and.w	r3, r3, #4
 8004210:	2b00      	cmp	r3, #0
 8004212:	d04f      	beq.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800421e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004222:	d147      	bne.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800422c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004236:	e853 3f00 	ldrex	r3, [r3]
 800423a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004242:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	461a      	mov	r2, r3
 800424a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800424c:	637b      	str	r3, [r7, #52]	; 0x34
 800424e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004250:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004252:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004254:	e841 2300 	strex	r3, r2, [r1]
 8004258:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800425a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1e6      	bne.n	800422e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	3308      	adds	r3, #8
 8004266:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	e853 3f00 	ldrex	r3, [r3]
 800426e:	613b      	str	r3, [r7, #16]
   return(result);
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	f023 0301 	bic.w	r3, r3, #1
 8004276:	66bb      	str	r3, [r7, #104]	; 0x68
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	3308      	adds	r3, #8
 800427e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004280:	623a      	str	r2, [r7, #32]
 8004282:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004284:	69f9      	ldr	r1, [r7, #28]
 8004286:	6a3a      	ldr	r2, [r7, #32]
 8004288:	e841 2300 	strex	r3, r2, [r1]
 800428c:	61bb      	str	r3, [r7, #24]
   return(result);
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1e5      	bne.n	8004260 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2220      	movs	r2, #32
 8004298:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2220      	movs	r2, #32
 800429e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80042b0:	2303      	movs	r3, #3
 80042b2:	e010      	b.n	80042d6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	69da      	ldr	r2, [r3, #28]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	4013      	ands	r3, r2
 80042be:	68ba      	ldr	r2, [r7, #8]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	bf0c      	ite	eq
 80042c4:	2301      	moveq	r3, #1
 80042c6:	2300      	movne	r3, #0
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	461a      	mov	r2, r3
 80042cc:	79fb      	ldrb	r3, [r7, #7]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	f43f af4a 	beq.w	8004168 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042d4:	2300      	movs	r3, #0
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3770      	adds	r7, #112	; 0x70
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
	...

080042e0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b097      	sub	sp, #92	; 0x5c
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	4613      	mov	r3, r2
 80042ec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	88fa      	ldrh	r2, [r7, #6]
 80042f8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	88fa      	ldrh	r2, [r7, #6]
 8004300:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2200      	movs	r2, #0
 8004308:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004312:	d10e      	bne.n	8004332 <UART_Start_Receive_IT+0x52>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d105      	bne.n	8004328 <UART_Start_Receive_IT+0x48>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004322:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004326:	e02d      	b.n	8004384 <UART_Start_Receive_IT+0xa4>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	22ff      	movs	r2, #255	; 0xff
 800432c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004330:	e028      	b.n	8004384 <UART_Start_Receive_IT+0xa4>
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	689b      	ldr	r3, [r3, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10d      	bne.n	8004356 <UART_Start_Receive_IT+0x76>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	691b      	ldr	r3, [r3, #16]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d104      	bne.n	800434c <UART_Start_Receive_IT+0x6c>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	22ff      	movs	r2, #255	; 0xff
 8004346:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800434a:	e01b      	b.n	8004384 <UART_Start_Receive_IT+0xa4>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	227f      	movs	r2, #127	; 0x7f
 8004350:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004354:	e016      	b.n	8004384 <UART_Start_Receive_IT+0xa4>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800435e:	d10d      	bne.n	800437c <UART_Start_Receive_IT+0x9c>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d104      	bne.n	8004372 <UART_Start_Receive_IT+0x92>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	227f      	movs	r2, #127	; 0x7f
 800436c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004370:	e008      	b.n	8004384 <UART_Start_Receive_IT+0xa4>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	223f      	movs	r2, #63	; 0x3f
 8004376:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800437a:	e003      	b.n	8004384 <UART_Start_Receive_IT+0xa4>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2222      	movs	r2, #34	; 0x22
 8004390:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3308      	adds	r3, #8
 8004398:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	657b      	str	r3, [r7, #84]	; 0x54
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3308      	adds	r3, #8
 80043b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80043b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80043b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043ba:	e841 2300 	strex	r3, r2, [r1]
 80043be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1e5      	bne.n	8004392 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	689b      	ldr	r3, [r3, #8]
 80043ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ce:	d107      	bne.n	80043e0 <UART_Start_Receive_IT+0x100>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d103      	bne.n	80043e0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	4a24      	ldr	r2, [pc, #144]	; (800446c <UART_Start_Receive_IT+0x18c>)
 80043dc:	665a      	str	r2, [r3, #100]	; 0x64
 80043de:	e002      	b.n	80043e6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	4a23      	ldr	r2, [pc, #140]	; (8004470 <UART_Start_Receive_IT+0x190>)
 80043e4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d019      	beq.n	800442a <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800440a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004414:	637b      	str	r3, [r7, #52]	; 0x34
 8004416:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800441a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e6      	bne.n	80043f6 <UART_Start_Receive_IT+0x116>
 8004428:	e018      	b.n	800445c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	e853 3f00 	ldrex	r3, [r3]
 8004436:	613b      	str	r3, [r7, #16]
   return(result);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	f043 0320 	orr.w	r3, r3, #32
 800443e:	653b      	str	r3, [r7, #80]	; 0x50
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	461a      	mov	r2, r3
 8004446:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004448:	623b      	str	r3, [r7, #32]
 800444a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444c:	69f9      	ldr	r1, [r7, #28]
 800444e:	6a3a      	ldr	r2, [r7, #32]
 8004450:	e841 2300 	strex	r3, r2, [r1]
 8004454:	61bb      	str	r3, [r7, #24]
   return(result);
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1e6      	bne.n	800442a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	375c      	adds	r7, #92	; 0x5c
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	08004893 	.word	0x08004893
 8004470:	08004733 	.word	0x08004733

08004474 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004474:	b480      	push	{r7}
 8004476:	b095      	sub	sp, #84	; 0x54
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004490:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	461a      	mov	r2, r3
 8004498:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800449a:	643b      	str	r3, [r7, #64]	; 0x40
 800449c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e6      	bne.n	800447c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3308      	adds	r3, #8
 80044b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b6:	6a3b      	ldr	r3, [r7, #32]
 80044b8:	e853 3f00 	ldrex	r3, [r3]
 80044bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	f023 0301 	bic.w	r3, r3, #1
 80044c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3308      	adds	r3, #8
 80044cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80044ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80044d0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044d6:	e841 2300 	strex	r3, r2, [r1]
 80044da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1e5      	bne.n	80044ae <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d118      	bne.n	800451c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	e853 3f00 	ldrex	r3, [r3]
 80044f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	f023 0310 	bic.w	r3, r3, #16
 80044fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	461a      	mov	r2, r3
 8004506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004508:	61bb      	str	r3, [r7, #24]
 800450a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	6979      	ldr	r1, [r7, #20]
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	e841 2300 	strex	r3, r2, [r1]
 8004514:	613b      	str	r3, [r7, #16]
   return(result);
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e6      	bne.n	80044ea <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800452e:	bf00      	nop
 8004530:	3754      	adds	r7, #84	; 0x54
 8004532:	46bd      	mov	sp, r7
 8004534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004538:	4770      	bx	lr

0800453a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b084      	sub	sp, #16
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004546:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	2200      	movs	r2, #0
 800454c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2200      	movs	r2, #0
 8004554:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004558:	68f8      	ldr	r0, [r7, #12]
 800455a:	f7ff fa71 	bl	8003a40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800455e:	bf00      	nop
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004566:	b480      	push	{r7}
 8004568:	b08f      	sub	sp, #60	; 0x3c
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004572:	2b21      	cmp	r3, #33	; 0x21
 8004574:	d14d      	bne.n	8004612 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800457c:	b29b      	uxth	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d132      	bne.n	80045e8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	e853 3f00 	ldrex	r3, [r3]
 800458e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004596:	637b      	str	r3, [r7, #52]	; 0x34
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	461a      	mov	r2, r3
 800459e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045a2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80045a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80045a8:	e841 2300 	strex	r3, r2, [r1]
 80045ac:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d1e6      	bne.n	8004582 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	e853 3f00 	ldrex	r3, [r3]
 80045c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80045c2:	68bb      	ldr	r3, [r7, #8]
 80045c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045c8:	633b      	str	r3, [r7, #48]	; 0x30
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	461a      	mov	r2, r3
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	61bb      	str	r3, [r7, #24]
 80045d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045d6:	6979      	ldr	r1, [r7, #20]
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	e841 2300 	strex	r3, r2, [r1]
 80045de:	613b      	str	r3, [r7, #16]
   return(result);
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d1e6      	bne.n	80045b4 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80045e6:	e014      	b.n	8004612 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ec:	781a      	ldrb	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	b292      	uxth	r2, r2
 80045f4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004612:	bf00      	nop
 8004614:	373c      	adds	r7, #60	; 0x3c
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr

0800461e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800461e:	b480      	push	{r7}
 8004620:	b091      	sub	sp, #68	; 0x44
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800462a:	2b21      	cmp	r3, #33	; 0x21
 800462c:	d151      	bne.n	80046d2 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004634:	b29b      	uxth	r3, r3
 8004636:	2b00      	cmp	r3, #0
 8004638:	d132      	bne.n	80046a0 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	e853 3f00 	ldrex	r3, [r3]
 8004646:	623b      	str	r3, [r7, #32]
   return(result);
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800464e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	461a      	mov	r2, r3
 8004656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004658:	633b      	str	r3, [r7, #48]	; 0x30
 800465a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800465e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004660:	e841 2300 	strex	r3, r2, [r1]
 8004664:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e6      	bne.n	800463a <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	e853 3f00 	ldrex	r3, [r3]
 8004678:	60fb      	str	r3, [r7, #12]
   return(result);
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004680:	637b      	str	r3, [r7, #52]	; 0x34
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	461a      	mov	r2, r3
 8004688:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468a:	61fb      	str	r3, [r7, #28]
 800468c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468e:	69b9      	ldr	r1, [r7, #24]
 8004690:	69fa      	ldr	r2, [r7, #28]
 8004692:	e841 2300 	strex	r3, r2, [r1]
 8004696:	617b      	str	r3, [r7, #20]
   return(result);
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d1e6      	bne.n	800466c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800469e:	e018      	b.n	80046d2 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a4:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80046a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a8:	881a      	ldrh	r2, [r3, #0]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046b2:	b292      	uxth	r2, r2
 80046b4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ba:	1c9a      	adds	r2, r3, #2
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80046d2:	bf00      	nop
 80046d4:	3744      	adds	r7, #68	; 0x44
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b088      	sub	sp, #32
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	e853 3f00 	ldrex	r3, [r3]
 80046f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046fa:	61fb      	str	r3, [r7, #28]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	461a      	mov	r2, r3
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004708:	6979      	ldr	r1, [r7, #20]
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	e841 2300 	strex	r3, r2, [r1]
 8004710:	613b      	str	r3, [r7, #16]
   return(result);
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1e6      	bne.n	80046e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2200      	movs	r2, #0
 8004722:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f7fc f90f 	bl	8000948 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800472a:	bf00      	nop
 800472c:	3720      	adds	r7, #32
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}

08004732 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004732:	b580      	push	{r7, lr}
 8004734:	b096      	sub	sp, #88	; 0x58
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004740:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004748:	2b22      	cmp	r3, #34	; 0x22
 800474a:	f040 8094 	bne.w	8004876 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004754:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004758:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800475c:	b2d9      	uxtb	r1, r3
 800475e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004762:	b2da      	uxtb	r2, r3
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004768:	400a      	ands	r2, r1
 800476a:	b2d2      	uxtb	r2, r2
 800476c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004772:	1c5a      	adds	r2, r3, #1
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800477e:	b29b      	uxth	r3, r3
 8004780:	3b01      	subs	r3, #1
 8004782:	b29a      	uxth	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d179      	bne.n	800488a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800479c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479e:	e853 3f00 	ldrex	r3, [r3]
 80047a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80047a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047aa:	653b      	str	r3, [r7, #80]	; 0x50
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	461a      	mov	r2, r3
 80047b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80047b4:	647b      	str	r3, [r7, #68]	; 0x44
 80047b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80047ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80047bc:	e841 2300 	strex	r3, r2, [r1]
 80047c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80047c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d1e6      	bne.n	8004796 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3308      	adds	r3, #8
 80047ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d2:	e853 3f00 	ldrex	r3, [r3]
 80047d6:	623b      	str	r3, [r7, #32]
   return(result);
 80047d8:	6a3b      	ldr	r3, [r7, #32]
 80047da:	f023 0301 	bic.w	r3, r3, #1
 80047de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3308      	adds	r3, #8
 80047e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047e8:	633a      	str	r2, [r7, #48]	; 0x30
 80047ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80047f0:	e841 2300 	strex	r3, r2, [r1]
 80047f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80047f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1e5      	bne.n	80047c8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2220      	movs	r2, #32
 8004800:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800480c:	2b01      	cmp	r3, #1
 800480e:	d12e      	bne.n	800486e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	e853 3f00 	ldrex	r3, [r3]
 8004822:	60fb      	str	r3, [r7, #12]
   return(result);
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f023 0310 	bic.w	r3, r3, #16
 800482a:	64bb      	str	r3, [r7, #72]	; 0x48
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004834:	61fb      	str	r3, [r7, #28]
 8004836:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004838:	69b9      	ldr	r1, [r7, #24]
 800483a:	69fa      	ldr	r2, [r7, #28]
 800483c:	e841 2300 	strex	r3, r2, [r1]
 8004840:	617b      	str	r3, [r7, #20]
   return(result);
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d1e6      	bne.n	8004816 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	69db      	ldr	r3, [r3, #28]
 800484e:	f003 0310 	and.w	r3, r3, #16
 8004852:	2b10      	cmp	r3, #16
 8004854:	d103      	bne.n	800485e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	2210      	movs	r2, #16
 800485c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004864:	4619      	mov	r1, r3
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff f8f4 	bl	8003a54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800486c:	e00d      	b.n	800488a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fc f87a 	bl	8000968 <HAL_UART_RxCpltCallback>
}
 8004874:	e009      	b.n	800488a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	8b1b      	ldrh	r3, [r3, #24]
 800487c:	b29a      	uxth	r2, r3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0208 	orr.w	r2, r2, #8
 8004886:	b292      	uxth	r2, r2
 8004888:	831a      	strh	r2, [r3, #24]
}
 800488a:	bf00      	nop
 800488c:	3758      	adds	r7, #88	; 0x58
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}

08004892 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b096      	sub	sp, #88	; 0x58
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80048a0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048a8:	2b22      	cmp	r3, #34	; 0x22
 80048aa:	f040 8094 	bne.w	80049d6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80048b4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048bc:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80048be:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80048c2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80048c6:	4013      	ands	r3, r2
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d2:	1c9a      	adds	r2, r3, #2
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048de:	b29b      	uxth	r3, r3
 80048e0:	3b01      	subs	r3, #1
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80048f0:	b29b      	uxth	r3, r3
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d179      	bne.n	80049ea <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048fe:	e853 3f00 	ldrex	r3, [r3]
 8004902:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800490a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004914:	643b      	str	r3, [r7, #64]	; 0x40
 8004916:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004918:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800491a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800491c:	e841 2300 	strex	r3, r2, [r1]
 8004920:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1e6      	bne.n	80048f6 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	3308      	adds	r3, #8
 800492e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	6a3b      	ldr	r3, [r7, #32]
 8004932:	e853 3f00 	ldrex	r3, [r3]
 8004936:	61fb      	str	r3, [r7, #28]
   return(result);
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f023 0301 	bic.w	r3, r3, #1
 800493e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	3308      	adds	r3, #8
 8004946:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004948:	62fa      	str	r2, [r7, #44]	; 0x2c
 800494a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800494e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004950:	e841 2300 	strex	r3, r2, [r1]
 8004954:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004958:	2b00      	cmp	r3, #0
 800495a:	d1e5      	bne.n	8004928 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2220      	movs	r2, #32
 8004960:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800496c:	2b01      	cmp	r3, #1
 800496e:	d12e      	bne.n	80049ce <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	e853 3f00 	ldrex	r3, [r3]
 8004982:	60bb      	str	r3, [r7, #8]
   return(result);
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f023 0310 	bic.w	r3, r3, #16
 800498a:	647b      	str	r3, [r7, #68]	; 0x44
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	461a      	mov	r2, r3
 8004992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004994:	61bb      	str	r3, [r7, #24]
 8004996:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004998:	6979      	ldr	r1, [r7, #20]
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	e841 2300 	strex	r3, r2, [r1]
 80049a0:	613b      	str	r3, [r7, #16]
   return(result);
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1e6      	bne.n	8004976 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f003 0310 	and.w	r3, r3, #16
 80049b2:	2b10      	cmp	r3, #16
 80049b4:	d103      	bne.n	80049be <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2210      	movs	r2, #16
 80049bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80049c4:	4619      	mov	r1, r3
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7ff f844 	bl	8003a54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80049cc:	e00d      	b.n	80049ea <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f7fb ffca 	bl	8000968 <HAL_UART_RxCpltCallback>
}
 80049d4:	e009      	b.n	80049ea <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	8b1b      	ldrh	r3, [r3, #24]
 80049dc:	b29a      	uxth	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0208 	orr.w	r2, r2, #8
 80049e6:	b292      	uxth	r2, r2
 80049e8:	831a      	strh	r2, [r3, #24]
}
 80049ea:	bf00      	nop
 80049ec:	3758      	adds	r7, #88	; 0x58
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80049f2:	b480      	push	{r7}
 80049f4:	b083      	sub	sp, #12
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80049fa:	bf00      	nop
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr
	...

08004a08 <__libc_init_array>:
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	4d0d      	ldr	r5, [pc, #52]	; (8004a40 <__libc_init_array+0x38>)
 8004a0c:	4c0d      	ldr	r4, [pc, #52]	; (8004a44 <__libc_init_array+0x3c>)
 8004a0e:	1b64      	subs	r4, r4, r5
 8004a10:	10a4      	asrs	r4, r4, #2
 8004a12:	2600      	movs	r6, #0
 8004a14:	42a6      	cmp	r6, r4
 8004a16:	d109      	bne.n	8004a2c <__libc_init_array+0x24>
 8004a18:	4d0b      	ldr	r5, [pc, #44]	; (8004a48 <__libc_init_array+0x40>)
 8004a1a:	4c0c      	ldr	r4, [pc, #48]	; (8004a4c <__libc_init_array+0x44>)
 8004a1c:	f000 f820 	bl	8004a60 <_init>
 8004a20:	1b64      	subs	r4, r4, r5
 8004a22:	10a4      	asrs	r4, r4, #2
 8004a24:	2600      	movs	r6, #0
 8004a26:	42a6      	cmp	r6, r4
 8004a28:	d105      	bne.n	8004a36 <__libc_init_array+0x2e>
 8004a2a:	bd70      	pop	{r4, r5, r6, pc}
 8004a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a30:	4798      	blx	r3
 8004a32:	3601      	adds	r6, #1
 8004a34:	e7ee      	b.n	8004a14 <__libc_init_array+0xc>
 8004a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a3a:	4798      	blx	r3
 8004a3c:	3601      	adds	r6, #1
 8004a3e:	e7f2      	b.n	8004a26 <__libc_init_array+0x1e>
 8004a40:	08004af0 	.word	0x08004af0
 8004a44:	08004af0 	.word	0x08004af0
 8004a48:	08004af0 	.word	0x08004af0
 8004a4c:	08004af4 	.word	0x08004af4

08004a50 <memset>:
 8004a50:	4402      	add	r2, r0
 8004a52:	4603      	mov	r3, r0
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d100      	bne.n	8004a5a <memset+0xa>
 8004a58:	4770      	bx	lr
 8004a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a5e:	e7f9      	b.n	8004a54 <memset+0x4>

08004a60 <_init>:
 8004a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a62:	bf00      	nop
 8004a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a66:	bc08      	pop	{r3}
 8004a68:	469e      	mov	lr, r3
 8004a6a:	4770      	bx	lr

08004a6c <_fini>:
 8004a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a6e:	bf00      	nop
 8004a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a72:	bc08      	pop	{r3}
 8004a74:	469e      	mov	lr, r3
 8004a76:	4770      	bx	lr
