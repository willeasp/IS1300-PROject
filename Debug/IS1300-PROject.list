
IS1300-PROject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049b0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bac  08004bac  00020024  2**0
                  CONTENTS
  4 .ARM          00000008  08004bac  08004bac  00014bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bb4  08004bb4  00020024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bb4  08004bb4  00014bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bb8  08004bb8  00014bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000024  20000000  08004bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  20000024  08004be0  00020024  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08004be0  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
 12 .debug_info   000122b4  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000265b  00000000  00000000  00032308  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00034968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b60  00000000  00000000  000355d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026c0f  00000000  00000000  00036130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107a1  00000000  00000000  0005cd3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb531  00000000  00000000  0006d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00158a11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000311c  00000000  00000000  00158a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000024 	.word	0x20000024
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b20 	.word	0x08004b20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000028 	.word	0x20000028
 80001c4:	08004b20 	.word	0x08004b20

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <hardware_reset>:


/**
 * @brief Perform a hardware reset on the display
 */
void hardware_reset () {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
    HAL_Delay(5);
 80004c4:	2005      	movs	r0, #5
 80004c6:	f000 fd2f 	bl	8000f28 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_RESET);
 80004ca:	2200      	movs	r2, #0
 80004cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004d4:	f001 f886 	bl	80015e4 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80004d8:	200a      	movs	r0, #10
 80004da:	f000 fd25 	bl	8000f28 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 80004de:	2201      	movs	r2, #1
 80004e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e8:	f001 f87c 	bl	80015e4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80004ec:	2001      	movs	r0, #1
 80004ee:	f000 fd1b 	bl	8000f28 <HAL_Delay>
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
	...

080004f8 <test_backlight>:


/**
 * @brief Test all backlight colors
 */
void test_backlight () {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af00      	add	r7, sp, #0
    GPIO_TypeDef* ports[] = {Disp_White_GPIO_Port, Disp_Green_GPIO_Port, Disp_Red_GPIO_Port};
 80004fe:	4a21      	ldr	r2, [pc, #132]	; (8000584 <test_backlight+0x8c>)
 8000500:	f107 0308 	add.w	r3, r7, #8
 8000504:	ca07      	ldmia	r2, {r0, r1, r2}
 8000506:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t pins[] = {Disp_White_Pin, Disp_Green_Pin, Disp_Red_Pin};
 800050a:	4a1f      	ldr	r2, [pc, #124]	; (8000588 <test_backlight+0x90>)
 800050c:	463b      	mov	r3, r7
 800050e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000512:	6018      	str	r0, [r3, #0]
 8000514:	3304      	adds	r3, #4
 8000516:	8019      	strh	r1, [r3, #0]
    for (int i = 0; i < 3; ++i) {
 8000518:	2300      	movs	r3, #0
 800051a:	617b      	str	r3, [r7, #20]
 800051c:	e029      	b.n	8000572 <test_backlight+0x7a>
        HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	009b      	lsls	r3, r3, #2
 8000522:	f107 0218 	add.w	r2, r7, #24
 8000526:	4413      	add	r3, r2
 8000528:	f853 0c10 	ldr.w	r0, [r3, #-16]
 800052c:	697b      	ldr	r3, [r7, #20]
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	f107 0218 	add.w	r2, r7, #24
 8000534:	4413      	add	r3, r2
 8000536:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800053a:	2201      	movs	r2, #1
 800053c:	4619      	mov	r1, r3
 800053e:	f001 f851 	bl	80015e4 <HAL_GPIO_WritePin>
        HAL_Delay(200);
 8000542:	20c8      	movs	r0, #200	; 0xc8
 8000544:	f000 fcf0 	bl	8000f28 <HAL_Delay>
        HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	f107 0218 	add.w	r2, r7, #24
 8000550:	4413      	add	r3, r2
 8000552:	f853 0c10 	ldr.w	r0, [r3, #-16]
 8000556:	697b      	ldr	r3, [r7, #20]
 8000558:	005b      	lsls	r3, r3, #1
 800055a:	f107 0218 	add.w	r2, r7, #24
 800055e:	4413      	add	r3, r2
 8000560:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000564:	2200      	movs	r2, #0
 8000566:	4619      	mov	r1, r3
 8000568:	f001 f83c 	bl	80015e4 <HAL_GPIO_WritePin>
    for (int i = 0; i < 3; ++i) {
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	3301      	adds	r3, #1
 8000570:	617b      	str	r3, [r7, #20]
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	2b02      	cmp	r3, #2
 8000576:	ddd2      	ble.n	800051e <test_backlight+0x26>
    }
}
 8000578:	bf00      	nop
 800057a:	bf00      	nop
 800057c:	3718      	adds	r7, #24
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	08004b38 	.word	0x08004b38
 8000588:	08004b44 	.word	0x08004b44

0800058c <init_backlight>:


/**
 * @brief Set the backlight to white
 */
void init_backlight () {
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
    test_backlight();
 8000590:	f7ff ffb2 	bl	80004f8 <test_backlight>
    HAL_GPIO_WritePin(Disp_White_GPIO_Port, Disp_White_Pin, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800059a:	4802      	ldr	r0, [pc, #8]	; (80005a4 <init_backlight+0x18>)
 800059c:	f001 f822 	bl	80015e4 <HAL_GPIO_WritePin>
}
 80005a0:	bf00      	nop
 80005a2:	bd80      	pop	{r7, pc}
 80005a4:	48000800 	.word	0x48000800

080005a8 <split_byte>:
/**
 * @brief Split a byte to send to the display
 * @param[in] byte The byte to split into two
 * @param[out] buffer Where to place the two new bytes
 */
void split_byte (uint8_t byte, uint8_t *buffer) {
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	6039      	str	r1, [r7, #0]
 80005b2:	71fb      	strb	r3, [r7, #7]
    buffer[0] = byte & 0x0F;            // lower bits first
 80005b4:	79fb      	ldrb	r3, [r7, #7]
 80005b6:	f003 030f 	and.w	r3, r3, #15
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	701a      	strb	r2, [r3, #0]
    buffer[1] = (byte & 0xF0) >> 4;     // upper bits second
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	3301      	adds	r3, #1
 80005c4:	79fa      	ldrb	r2, [r7, #7]
 80005c6:	0912      	lsrs	r2, r2, #4
 80005c8:	b2d2      	uxtb	r2, r2
 80005ca:	701a      	strb	r2, [r3, #0]
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <display_transmit>:
 * @brief Send the display data or instructions
 * @param[in] startbyte The byte setting that initiates the transmit
 * @param[in] bytes The bytes that will be sent to the display
 * @param[in] length The number of bytes to send
 */
int display_transmit (uint8_t startbyte, uint8_t *bytes, uint16_t length) {
 80005d8:	b5b0      	push	{r4, r5, r7, lr}
 80005da:	b088      	sub	sp, #32
 80005dc:	af00      	add	r7, sp, #0
 80005de:	4603      	mov	r3, r0
 80005e0:	6039      	str	r1, [r7, #0]
 80005e2:	71fb      	strb	r3, [r7, #7]
 80005e4:	4613      	mov	r3, r2
 80005e6:	80bb      	strh	r3, [r7, #4]
 80005e8:	466b      	mov	r3, sp
 80005ea:	461d      	mov	r5, r3
    /* create message to transmit */
    uint16_t mes_length = length*2 +1; // +1 for start byte
 80005ec:	88bb      	ldrh	r3, [r7, #4]
 80005ee:	005b      	lsls	r3, r3, #1
 80005f0:	b29b      	uxth	r3, r3
 80005f2:	3301      	adds	r3, #1
 80005f4:	837b      	strh	r3, [r7, #26]
    uint8_t message[mes_length];
 80005f6:	8b7c      	ldrh	r4, [r7, #26]
 80005f8:	4623      	mov	r3, r4
 80005fa:	3b01      	subs	r3, #1
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	b2a0      	uxth	r0, r4
 8000600:	f04f 0100 	mov.w	r1, #0
 8000604:	f04f 0200 	mov.w	r2, #0
 8000608:	f04f 0300 	mov.w	r3, #0
 800060c:	00cb      	lsls	r3, r1, #3
 800060e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000612:	00c2      	lsls	r2, r0, #3
 8000614:	b2a0      	uxth	r0, r4
 8000616:	f04f 0100 	mov.w	r1, #0
 800061a:	f04f 0200 	mov.w	r2, #0
 800061e:	f04f 0300 	mov.w	r3, #0
 8000622:	00cb      	lsls	r3, r1, #3
 8000624:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000628:	00c2      	lsls	r2, r0, #3
 800062a:	4623      	mov	r3, r4
 800062c:	3307      	adds	r3, #7
 800062e:	08db      	lsrs	r3, r3, #3
 8000630:	00db      	lsls	r3, r3, #3
 8000632:	ebad 0d03 	sub.w	sp, sp, r3
 8000636:	466b      	mov	r3, sp
 8000638:	3300      	adds	r3, #0
 800063a:	613b      	str	r3, [r7, #16]

    message[0] = startbyte;  // start byte
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	79fa      	ldrb	r2, [r7, #7]
 8000640:	701a      	strb	r2, [r3, #0]

    uint8_t divided[2]; // for splitting a byte into two
    for (int i = 0; i < length; ++i) {
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
 8000646:	e018      	b.n	800067a <display_transmit+0xa2>
        split_byte(bytes[i], divided);
 8000648:	69fb      	ldr	r3, [r7, #28]
 800064a:	683a      	ldr	r2, [r7, #0]
 800064c:	4413      	add	r3, r2
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	f107 020c 	add.w	r2, r7, #12
 8000654:	4611      	mov	r1, r2
 8000656:	4618      	mov	r0, r3
 8000658:	f7ff ffa6 	bl	80005a8 <split_byte>
        message[1 + i*2] = divided[0];
 800065c:	69fb      	ldr	r3, [r7, #28]
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	3301      	adds	r3, #1
 8000662:	7b39      	ldrb	r1, [r7, #12]
 8000664:	693a      	ldr	r2, [r7, #16]
 8000666:	54d1      	strb	r1, [r2, r3]
        message[1 + i*2 +1] = divided[1];
 8000668:	69fb      	ldr	r3, [r7, #28]
 800066a:	3301      	adds	r3, #1
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	7b79      	ldrb	r1, [r7, #13]
 8000670:	693a      	ldr	r2, [r7, #16]
 8000672:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < length; ++i) {
 8000674:	69fb      	ldr	r3, [r7, #28]
 8000676:	3301      	adds	r3, #1
 8000678:	61fb      	str	r3, [r7, #28]
 800067a:	88bb      	ldrh	r3, [r7, #4]
 800067c:	69fa      	ldr	r2, [r7, #28]
 800067e:	429a      	cmp	r2, r3
 8000680:	dbe2      	blt.n	8000648 <display_transmit+0x70>
    }

    if (HAL_SPI_Transmit(&hspi2, message, mes_length, 100) != HAL_OK) {
 8000682:	6939      	ldr	r1, [r7, #16]
 8000684:	8b7a      	ldrh	r2, [r7, #26]
 8000686:	2364      	movs	r3, #100	; 0x64
 8000688:	4806      	ldr	r0, [pc, #24]	; (80006a4 <display_transmit+0xcc>)
 800068a:	f002 fb72 	bl	8002d72 <HAL_SPI_Transmit>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <display_transmit+0xc0>
        return 1;
 8000694:	2301      	movs	r3, #1
 8000696:	e000      	b.n	800069a <display_transmit+0xc2>
    }
    return 0;
 8000698:	2300      	movs	r3, #0
 800069a:	46ad      	mov	sp, r5
}
 800069c:	4618      	mov	r0, r3
 800069e:	3720      	adds	r7, #32
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bdb0      	pop	{r4, r5, r7, pc}
 80006a4:	20000044 	.word	0x20000044

080006a8 <display_send_instruction>:
/**
 * @brief Send instruction bytes via spi to the display
 * @param[in] instructions A pointer to the instructions to send to the display
 * @param[in] length The number of instructions
 */
int display_send_instruction (uint8_t *instructions, uint16_t length) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
 80006b0:	460b      	mov	r3, r1
 80006b2:	807b      	strh	r3, [r7, #2]
    return display_transmit(0x1F, instructions, length);
 80006b4:	887b      	ldrh	r3, [r7, #2]
 80006b6:	461a      	mov	r2, r3
 80006b8:	6879      	ldr	r1, [r7, #4]
 80006ba:	201f      	movs	r0, #31
 80006bc:	f7ff ff8c 	bl	80005d8 <display_transmit>
 80006c0:	4603      	mov	r3, r0
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}

080006ca <display_write>:
/**
 * @brief Write characters to the display where the cursor currently are
 * @param characters The characters to write
 * @param length The number of characters
 */
int display_write (uint8_t *characters, uint16_t length) {
 80006ca:	b580      	push	{r7, lr}
 80006cc:	b082      	sub	sp, #8
 80006ce:	af00      	add	r7, sp, #0
 80006d0:	6078      	str	r0, [r7, #4]
 80006d2:	460b      	mov	r3, r1
 80006d4:	807b      	strh	r3, [r7, #2]
    return display_transmit(0b01011111, characters, length);
 80006d6:	887b      	ldrh	r3, [r7, #2]
 80006d8:	461a      	mov	r2, r3
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	205f      	movs	r0, #95	; 0x5f
 80006de:	f7ff ff7b 	bl	80005d8 <display_transmit>
 80006e2:	4603      	mov	r3, r0
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <set_row>:

/**
 * @brief Set the cursor on the display
 * @param row The row to write to
 */
int set_row (uint8_t row) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b084      	sub	sp, #16
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
    /* the address range of DDARM is 00H-13H, 20H-33H, 40H53H, 60H-73H */
    uint8_t rows[] = {0b10000000, 0b10100000, 0b11000000, 0b11100000};
 80006f6:	4b07      	ldr	r3, [pc, #28]	; (8000714 <set_row+0x28>)
 80006f8:	60fb      	str	r3, [r7, #12]
    return display_send_instruction(&rows[row], 1);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	f107 020c 	add.w	r2, r7, #12
 8000700:	4413      	add	r3, r2
 8000702:	2101      	movs	r1, #1
 8000704:	4618      	mov	r0, r3
 8000706:	f7ff ffcf 	bl	80006a8 <display_send_instruction>
 800070a:	4603      	mov	r3, r0
}
 800070c:	4618      	mov	r0, r3
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	e0c0a080 	.word	0xe0c0a080

08000718 <clear_display>:

/**
 * @brief Clears the display
 */
int clear_display () {
 8000718:	b580      	push	{r7, lr}
 800071a:	b082      	sub	sp, #8
 800071c:	af00      	add	r7, sp, #0
    uint8_t ins = 0x01;
 800071e:	2301      	movs	r3, #1
 8000720:	71fb      	strb	r3, [r7, #7]
    display_send_instruction(&ins, 1);
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	2101      	movs	r1, #1
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ffbe 	bl	80006a8 <display_send_instruction>
}
 800072c:	bf00      	nop
 800072e:	4618      	mov	r0, r3
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <init_display>:

/**
 * @brief Initialise the display
 */
void init_display () {
 8000738:	b580      	push	{r7, lr}
 800073a:	b086      	sub	sp, #24
 800073c:	af00      	add	r7, sp, #0
    hardware_reset();
 800073e:	f7ff febf 	bl	80004c0 <hardware_reset>

    init_backlight();
 8000742:	f7ff ff23 	bl	800058c <init_backlight>

    uint16_t ins_length = 12;
 8000746:	230c      	movs	r3, #12
 8000748:	827b      	strh	r3, [r7, #18]
    uint8_t instructions[] = {
 800074a:	4a19      	ldr	r2, [pc, #100]	; (80007b0 <init_display+0x78>)
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000750:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0x01,
        0x38,
        0x0F,
    };

    if (display_send_instruction(instructions, ins_length))
 8000754:	8a7a      	ldrh	r2, [r7, #18]
 8000756:	1d3b      	adds	r3, r7, #4
 8000758:	4611      	mov	r1, r2
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ffa4 	bl	80006a8 <display_send_instruction>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <init_display+0x32>
        handle_error();
 8000766:	f000 f827 	bl	80007b8 <handle_error>

    HAL_Delay(10);
 800076a:	200a      	movs	r0, #10
 800076c:	f000 fbdc 	bl	8000f28 <HAL_Delay>

    for (int i = 0; i < 4; ++i) {
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]
 8000774:	e00b      	b.n	800078e <init_display+0x56>
        set_row(i);
 8000776:	697b      	ldr	r3, [r7, #20]
 8000778:	b2db      	uxtb	r3, r3
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff ffb6 	bl	80006ec <set_row>
        display_write((uint8_t*) "0123456789", 10);
 8000780:	210a      	movs	r1, #10
 8000782:	480c      	ldr	r0, [pc, #48]	; (80007b4 <init_display+0x7c>)
 8000784:	f7ff ffa1 	bl	80006ca <display_write>
    for (int i = 0; i < 4; ++i) {
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	3301      	adds	r3, #1
 800078c:	617b      	str	r3, [r7, #20]
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	2b03      	cmp	r3, #3
 8000792:	ddf0      	ble.n	8000776 <init_display+0x3e>
    }

    HAL_Delay(1000);
 8000794:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000798:	f000 fbc6 	bl	8000f28 <HAL_Delay>

    clear_display();
 800079c:	f7ff ffbc 	bl	8000718 <clear_display>

    HAL_Delay(10);
 80007a0:	200a      	movs	r0, #10
 80007a2:	f000 fbc1 	bl	8000f28 <HAL_Delay>
}
 80007a6:	bf00      	nop
 80007a8:	3718      	adds	r7, #24
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	08004b58 	.word	0x08004b58
 80007b4:	08004b4c 	.word	0x08004b4c

080007b8 <handle_error>:
 *      Author: Dell
 */

#include "main.h"

void handle_error( void ) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007bc:	b672      	cpsid	i
}
 80007be:	bf00      	nop
    __disable_irq();
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80007c0:	2201      	movs	r2, #1
 80007c2:	2120      	movs	r1, #32
 80007c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007c8:	f000 ff0c 	bl	80015e4 <HAL_GPIO_WritePin>
    while (1)
 80007cc:	e7fe      	b.n	80007cc <handle_error+0x14>
	...

080007d0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 0314 	add.w	r3, r7, #20
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007e6:	4b40      	ldr	r3, [pc, #256]	; (80008e8 <MX_GPIO_Init+0x118>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	4a3f      	ldr	r2, [pc, #252]	; (80008e8 <MX_GPIO_Init+0x118>)
 80007ec:	f043 0304 	orr.w	r3, r3, #4
 80007f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007f2:	4b3d      	ldr	r3, [pc, #244]	; (80008e8 <MX_GPIO_Init+0x118>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	f003 0304 	and.w	r3, r3, #4
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	4b3a      	ldr	r3, [pc, #232]	; (80008e8 <MX_GPIO_Init+0x118>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	4a39      	ldr	r2, [pc, #228]	; (80008e8 <MX_GPIO_Init+0x118>)
 8000804:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080a:	4b37      	ldr	r3, [pc, #220]	; (80008e8 <MX_GPIO_Init+0x118>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	4b34      	ldr	r3, [pc, #208]	; (80008e8 <MX_GPIO_Init+0x118>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	4a33      	ldr	r2, [pc, #204]	; (80008e8 <MX_GPIO_Init+0x118>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000822:	4b31      	ldr	r3, [pc, #196]	; (80008e8 <MX_GPIO_Init+0x118>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082e:	4b2e      	ldr	r3, [pc, #184]	; (80008e8 <MX_GPIO_Init+0x118>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	4a2d      	ldr	r2, [pc, #180]	; (80008e8 <MX_GPIO_Init+0x118>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083a:	4b2b      	ldr	r3, [pc, #172]	; (80008e8 <MX_GPIO_Init+0x118>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	607b      	str	r3, [r7, #4]
 8000844:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000846:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <MX_GPIO_Init+0x118>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	4a27      	ldr	r2, [pc, #156]	; (80008e8 <MX_GPIO_Init+0x118>)
 800084c:	f043 0308 	orr.w	r3, r3, #8
 8000850:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000852:	4b25      	ldr	r3, [pc, #148]	; (80008e8 <MX_GPIO_Init+0x118>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	f003 0308 	and.w	r3, r3, #8
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800085e:	2200      	movs	r2, #0
 8000860:	2120      	movs	r1, #32
 8000862:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000866:	f000 febd 	bl	80015e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Disp_Red_Pin|Disp_Green_Pin|Disp_White_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000870:	481e      	ldr	r0, [pc, #120]	; (80008ec <MX_GPIO_Init+0x11c>)
 8000872:	f000 feb7 	bl	80015e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 8000876:	2201      	movs	r2, #1
 8000878:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800087c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000880:	f000 feb0 	bl	80015e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800088a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4619      	mov	r1, r3
 800089a:	4814      	ldr	r0, [pc, #80]	; (80008ec <MX_GPIO_Init+0x11c>)
 800089c:	f000 fcf8 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Disp_Reset_Pin;
 80008a0:	f248 0320 	movw	r3, #32800	; 0x8020
 80008a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2301      	movs	r3, #1
 80008a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ae:	2300      	movs	r3, #0
 80008b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 0314 	add.w	r3, r7, #20
 80008b6:	4619      	mov	r1, r3
 80008b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008bc:	f000 fce8 	bl	8001290 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Disp_Red_Pin|Disp_Green_Pin|Disp_White_Pin;
 80008c0:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 80008c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c6:	2301      	movs	r3, #1
 80008c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ca:	2300      	movs	r3, #0
 80008cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ce:	2300      	movs	r3, #0
 80008d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d2:	f107 0314 	add.w	r3, r7, #20
 80008d6:	4619      	mov	r1, r3
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_GPIO_Init+0x11c>)
 80008da:	f000 fcd9 	bl	8001290 <HAL_GPIO_Init>

}
 80008de:	bf00      	nop
 80008e0:	3728      	adds	r7, #40	; 0x28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000
 80008ec:	48000800 	.word	0x48000800

080008f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f4:	f000 fa9c 	bl	8000e30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f8:	f000 f834 	bl	8000964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fc:	f7ff ff68 	bl	80007d0 <MX_GPIO_Init>
  MX_UART5_Init();
 8000900:	f000 f9b2 	bl	8000c68 <MX_UART5_Init>
  MX_SPI2_Init();
 8000904:	f000 f8a6 	bl	8000a54 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  init_display();
 8000908:	f7ff ff16 	bl	8000738 <init_display>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* Start the transmission process */
    if (HAL_UART_Transmit_IT(&huart5, (uint8_t*)buffer, BUFFERSIZE) != HAL_OK) {
 800090c:	2216      	movs	r2, #22
 800090e:	4912      	ldr	r1, [pc, #72]	; (8000958 <main+0x68>)
 8000910:	4812      	ldr	r0, [pc, #72]	; (800095c <main+0x6c>)
 8000912:	f002 fd4f 	bl	80033b4 <HAL_UART_Transmit_IT>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <main+0x30>
        Error_Handler();
 800091c:	f000 f894 	bl	8000a48 <Error_Handler>
    }
    /* Wait for the end of the transfer */
    while (uartReady != SET) {}
 8000920:	bf00      	nop
 8000922:	4b0f      	ldr	r3, [pc, #60]	; (8000960 <main+0x70>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d1fb      	bne.n	8000922 <main+0x32>

    /* Reset transmission flag */
    uartReady = RESET;
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <main+0x70>)
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]



    /* Put UART peripheral in reception process */
    if(HAL_UART_Receive_IT(&huart5, (uint8_t *)buffer, BUFFERSIZE) != HAL_OK) {
 8000930:	2216      	movs	r2, #22
 8000932:	4909      	ldr	r1, [pc, #36]	; (8000958 <main+0x68>)
 8000934:	4809      	ldr	r0, [pc, #36]	; (800095c <main+0x6c>)
 8000936:	f002 fdab 	bl	8003490 <HAL_UART_Receive_IT>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <main+0x54>
        Error_Handler();
 8000940:	f000 f882 	bl	8000a48 <Error_Handler>
    }
    /* Wait for the end of the transfer */
    while (uartReady != SET) {}
 8000944:	bf00      	nop
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <main+0x70>)
 8000948:	781b      	ldrb	r3, [r3, #0]
 800094a:	2b01      	cmp	r3, #1
 800094c:	d1fb      	bne.n	8000946 <main+0x56>
    /* Reset transmission flag */
    uartReady = RESET;
 800094e:	4b04      	ldr	r3, [pc, #16]	; (8000960 <main+0x70>)
 8000950:	2200      	movs	r2, #0
 8000952:	701a      	strb	r2, [r3, #0]
    if (HAL_UART_Transmit_IT(&huart5, (uint8_t*)buffer, BUFFERSIZE) != HAL_OK) {
 8000954:	e7da      	b.n	800090c <main+0x1c>
 8000956:	bf00      	nop
 8000958:	20000000 	.word	0x20000000
 800095c:	200000a8 	.word	0x200000a8
 8000960:	20000040 	.word	0x20000040

08000964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b096      	sub	sp, #88	; 0x58
 8000968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	2244      	movs	r2, #68	; 0x44
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f004 f8cc 	bl	8004b10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000978:	463b      	mov	r3, r7
 800097a:	2200      	movs	r2, #0
 800097c:	601a      	str	r2, [r3, #0]
 800097e:	605a      	str	r2, [r3, #4]
 8000980:	609a      	str	r2, [r3, #8]
 8000982:	60da      	str	r2, [r3, #12]
 8000984:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000986:	f44f 7000 	mov.w	r0, #512	; 0x200
 800098a:	f000 fe51 	bl	8001630 <HAL_PWREx_ControlVoltageScaling>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000994:	f000 f858 	bl	8000a48 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000998:	2302      	movs	r3, #2
 800099a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800099c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a2:	2310      	movs	r3, #16
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009a6:	2302      	movs	r3, #2
 80009a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009aa:	2302      	movs	r3, #2
 80009ac:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80009b2:	230a      	movs	r3, #10
 80009b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80009b6:	2307      	movs	r3, #7
 80009b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009ba:	2302      	movs	r3, #2
 80009bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009be:	2302      	movs	r3, #2
 80009c0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 fe88 	bl	80016dc <HAL_RCC_OscConfig>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80009d2:	f000 f839 	bl	8000a48 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d6:	230f      	movs	r3, #15
 80009d8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009da:	2303      	movs	r3, #3
 80009dc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009de:	2300      	movs	r3, #0
 80009e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009e6:	2300      	movs	r3, #0
 80009e8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009ea:	463b      	mov	r3, r7
 80009ec:	2104      	movs	r1, #4
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 fa5a 	bl	8001ea8 <HAL_RCC_ClockConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009fa:	f000 f825 	bl	8000a48 <Error_Handler>
  }
}
 80009fe:	bf00      	nop
 8000a00:	3758      	adds	r7, #88	; 0x58
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <HAL_UART_TxCpltCallback>:
* @note This example shows a simple way to report end of IT Tx transfer, and
* you can add your own implementation.
* @retval None
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
    /* Set transmission flag: transfer complete*/
    uartReady = SET;
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <HAL_UART_TxCpltCallback+0x1c>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	701a      	strb	r2, [r3, #0]
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000040 	.word	0x20000040

08000a28 <HAL_UART_RxCpltCallback>:
* @note This example shows a simple way to report end of IT Rx transfer, and
* you can add your own implementation.
* @retval None
*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
    /* Set transmission flag: transfer complete*/
    uartReady = SET;
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <HAL_UART_RxCpltCallback+0x1c>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	701a      	strb	r2, [r3, #0]
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000040 	.word	0x20000040

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    handle_error();
 8000a4c:	f7ff feb4 	bl	80007b8 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8000a50:	bf00      	nop
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000a58:	4b1b      	ldr	r3, [pc, #108]	; (8000ac8 <MX_SPI2_Init+0x74>)
 8000a5a:	4a1c      	ldr	r2, [pc, #112]	; (8000acc <MX_SPI2_Init+0x78>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_SPI2_Init+0x74>)
 8000a60:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a64:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000a66:	4b18      	ldr	r3, [pc, #96]	; (8000ac8 <MX_SPI2_Init+0x74>)
 8000a68:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a6c:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <MX_SPI2_Init+0x74>)
 8000a70:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a74:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <MX_SPI2_Init+0x74>)
 8000a78:	2202      	movs	r2, #2
 8000a7a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a7c:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <MX_SPI2_Init+0x74>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000a82:	4b11      	ldr	r3, [pc, #68]	; (8000ac8 <MX_SPI2_Init+0x74>)
 8000a84:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a88:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <MX_SPI2_Init+0x74>)
 8000a8c:	2230      	movs	r2, #48	; 0x30
 8000a8e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <MX_SPI2_Init+0x74>)
 8000a92:	2280      	movs	r2, #128	; 0x80
 8000a94:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <MX_SPI2_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a9c:	4b0a      	ldr	r3, [pc, #40]	; (8000ac8 <MX_SPI2_Init+0x74>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <MX_SPI2_Init+0x74>)
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000aa8:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <MX_SPI2_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000aae:	4b06      	ldr	r3, [pc, #24]	; (8000ac8 <MX_SPI2_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000ab4:	4804      	ldr	r0, [pc, #16]	; (8000ac8 <MX_SPI2_Init+0x74>)
 8000ab6:	f002 f8b9 	bl	8002c2c <HAL_SPI_Init>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000ac0:	f7ff ffc2 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ac4:	bf00      	nop
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20000044 	.word	0x20000044
 8000acc:	40003800 	.word	0x40003800

08000ad0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a25      	ldr	r2, [pc, #148]	; (8000b84 <HAL_SPI_MspInit+0xb4>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d144      	bne.n	8000b7c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000af2:	4b25      	ldr	r3, [pc, #148]	; (8000b88 <HAL_SPI_MspInit+0xb8>)
 8000af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af6:	4a24      	ldr	r2, [pc, #144]	; (8000b88 <HAL_SPI_MspInit+0xb8>)
 8000af8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000afc:	6593      	str	r3, [r2, #88]	; 0x58
 8000afe:	4b22      	ldr	r3, [pc, #136]	; (8000b88 <HAL_SPI_MspInit+0xb8>)
 8000b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b0a:	4b1f      	ldr	r3, [pc, #124]	; (8000b88 <HAL_SPI_MspInit+0xb8>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	4a1e      	ldr	r2, [pc, #120]	; (8000b88 <HAL_SPI_MspInit+0xb8>)
 8000b10:	f043 0304 	orr.w	r3, r3, #4
 8000b14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b16:	4b1c      	ldr	r3, [pc, #112]	; (8000b88 <HAL_SPI_MspInit+0xb8>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b1a:	f003 0304 	and.w	r3, r3, #4
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	4b19      	ldr	r3, [pc, #100]	; (8000b88 <HAL_SPI_MspInit+0xb8>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b26:	4a18      	ldr	r2, [pc, #96]	; (8000b88 <HAL_SPI_MspInit+0xb8>)
 8000b28:	f043 0302 	orr.w	r3, r3, #2
 8000b2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b2e:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <HAL_SPI_MspInit+0xb8>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b32:	f003 0302 	and.w	r3, r3, #2
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = Display_OUT_Pin;
 8000b3a:	2308      	movs	r3, #8
 8000b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b46:	2303      	movs	r3, #3
 8000b48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b4a:	2305      	movs	r3, #5
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Display_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b4e:	f107 0314 	add.w	r3, r7, #20
 8000b52:	4619      	mov	r1, r3
 8000b54:	480d      	ldr	r0, [pc, #52]	; (8000b8c <HAL_SPI_MspInit+0xbc>)
 8000b56:	f000 fb9b 	bl	8001290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Dispay_CLK_Pin|Display_CS_Pin;
 8000b5a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b6c:	2305      	movs	r3, #5
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	4806      	ldr	r0, [pc, #24]	; (8000b90 <HAL_SPI_MspInit+0xc0>)
 8000b78:	f000 fb8a 	bl	8001290 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000b7c:	bf00      	nop
 8000b7e:	3728      	adds	r7, #40	; 0x28
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	40003800 	.word	0x40003800
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	48000800 	.word	0x48000800
 8000b90:	48000400 	.word	0x48000400

08000b94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <HAL_MspInit+0x44>)
 8000b9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b9e:	4a0e      	ldr	r2, [pc, #56]	; (8000bd8 <HAL_MspInit+0x44>)
 8000ba0:	f043 0301 	orr.w	r3, r3, #1
 8000ba4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ba6:	4b0c      	ldr	r3, [pc, #48]	; (8000bd8 <HAL_MspInit+0x44>)
 8000ba8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000baa:	f003 0301 	and.w	r3, r3, #1
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb2:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <HAL_MspInit+0x44>)
 8000bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb6:	4a08      	ldr	r2, [pc, #32]	; (8000bd8 <HAL_MspInit+0x44>)
 8000bb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bbc:	6593      	str	r3, [r2, #88]	; 0x58
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_MspInit+0x44>)
 8000bc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40021000 	.word	0x40021000

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <NMI_Handler+0x4>

08000be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be2:	b480      	push	{r7}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <MemManage_Handler+0x4>

08000bee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <BusFault_Handler+0x4>

08000bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <UsageFault_Handler+0x4>

08000bfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0c:	bf00      	nop
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1a:	bf00      	nop
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c28:	f000 f95e 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <UART5_IRQHandler+0x10>)
 8000c36:	f002 fc81 	bl	800353c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200000a8 	.word	0x200000a8

08000c44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000c48:	4b06      	ldr	r3, [pc, #24]	; (8000c64 <SystemInit+0x20>)
 8000c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c4e:	4a05      	ldr	r2, [pc, #20]	; (8000c64 <SystemInit+0x20>)
 8000c50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000c58:	bf00      	nop
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000ed00 	.word	0xe000ed00

08000c68 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_UART5_Init+0x58>)
 8000c6e:	4a15      	ldr	r2, [pc, #84]	; (8000cc4 <MX_UART5_Init+0x5c>)
 8000c70:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000c72:	4b13      	ldr	r3, [pc, #76]	; (8000cc0 <MX_UART5_Init+0x58>)
 8000c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c78:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_UART5_Init+0x58>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_UART5_Init+0x58>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_UART5_Init+0x58>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_UART5_Init+0x58>)
 8000c8e:	220c      	movs	r2, #12
 8000c90:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_UART5_Init+0x58>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_UART5_Init+0x58>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_UART5_Init+0x58>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_UART5_Init+0x58>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_UART5_Init+0x58>)
 8000cac:	f002 fb34 	bl	8003318 <HAL_UART_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000cb6:	f7ff fec7 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200000a8 	.word	0x200000a8
 8000cc4:	40005000 	.word	0x40005000

08000cc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b0ac      	sub	sp, #176	; 0xb0
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce0:	f107 0314 	add.w	r3, r7, #20
 8000ce4:	2288      	movs	r2, #136	; 0x88
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f003 ff11 	bl	8004b10 <memset>
  if(uartHandle->Instance==UART5)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a36      	ldr	r2, [pc, #216]	; (8000dcc <HAL_UART_MspInit+0x104>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d164      	bne.n	8000dc2 <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000cf8:	2310      	movs	r3, #16
 8000cfa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	4618      	mov	r0, r3
 8000d06:	f001 fad5 	bl	80022b4 <HAL_RCCEx_PeriphCLKConfig>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d10:	f7ff fe9a 	bl	8000a48 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8000d14:	4b2e      	ldr	r3, [pc, #184]	; (8000dd0 <HAL_UART_MspInit+0x108>)
 8000d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d18:	4a2d      	ldr	r2, [pc, #180]	; (8000dd0 <HAL_UART_MspInit+0x108>)
 8000d1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d1e:	6593      	str	r3, [r2, #88]	; 0x58
 8000d20:	4b2b      	ldr	r3, [pc, #172]	; (8000dd0 <HAL_UART_MspInit+0x108>)
 8000d22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d2c:	4b28      	ldr	r3, [pc, #160]	; (8000dd0 <HAL_UART_MspInit+0x108>)
 8000d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d30:	4a27      	ldr	r2, [pc, #156]	; (8000dd0 <HAL_UART_MspInit+0x108>)
 8000d32:	f043 0304 	orr.w	r3, r3, #4
 8000d36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d38:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <HAL_UART_MspInit+0x108>)
 8000d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d3c:	f003 0304 	and.w	r3, r3, #4
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <HAL_UART_MspInit+0x108>)
 8000d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d48:	4a21      	ldr	r2, [pc, #132]	; (8000dd0 <HAL_UART_MspInit+0x108>)
 8000d4a:	f043 0308 	orr.w	r3, r3, #8
 8000d4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d50:	4b1f      	ldr	r3, [pc, #124]	; (8000dd0 <HAL_UART_MspInit+0x108>)
 8000d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d54:	f003 0308 	and.w	r3, r3, #8
 8000d58:	60bb      	str	r3, [r7, #8]
 8000d5a:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d60:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d64:	2302      	movs	r3, #2
 8000d66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d70:	2303      	movs	r3, #3
 8000d72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000d76:	2308      	movs	r3, #8
 8000d78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d7c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000d80:	4619      	mov	r1, r3
 8000d82:	4814      	ldr	r0, [pc, #80]	; (8000dd4 <HAL_UART_MspInit+0x10c>)
 8000d84:	f000 fa84 	bl	8001290 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d88:	2304      	movs	r3, #4
 8000d8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	2303      	movs	r3, #3
 8000d9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000da0:	2308      	movs	r3, #8
 8000da2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000da6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000daa:	4619      	mov	r1, r3
 8000dac:	480a      	ldr	r0, [pc, #40]	; (8000dd8 <HAL_UART_MspInit+0x110>)
 8000dae:	f000 fa6f 	bl	8001290 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	2035      	movs	r0, #53	; 0x35
 8000db8:	f000 f9b5 	bl	8001126 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000dbc:	2035      	movs	r0, #53	; 0x35
 8000dbe:	f000 f9ce 	bl	800115e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8000dc2:	bf00      	nop
 8000dc4:	37b0      	adds	r7, #176	; 0xb0
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40005000 	.word	0x40005000
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	48000800 	.word	0x48000800
 8000dd8:	48000c00 	.word	0x48000c00

08000ddc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ddc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000de0:	f7ff ff30 	bl	8000c44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de4:	480c      	ldr	r0, [pc, #48]	; (8000e18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000de6:	490d      	ldr	r1, [pc, #52]	; (8000e1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000de8:	4a0d      	ldr	r2, [pc, #52]	; (8000e20 <LoopForever+0xe>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dec:	e002      	b.n	8000df4 <LoopCopyDataInit>

08000dee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df2:	3304      	adds	r3, #4

08000df4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000df6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000df8:	d3f9      	bcc.n	8000dee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfa:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dfc:	4c0a      	ldr	r4, [pc, #40]	; (8000e28 <LoopForever+0x16>)
  movs r3, #0
 8000dfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e00:	e001      	b.n	8000e06 <LoopFillZerobss>

08000e02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e04:	3204      	adds	r2, #4

08000e06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e08:	d3fb      	bcc.n	8000e02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0a:	f003 fe5d 	bl	8004ac8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e0e:	f7ff fd6f 	bl	80008f0 <main>

08000e12 <LoopForever>:

LoopForever:
    b LoopForever
 8000e12:	e7fe      	b.n	8000e12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e14:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 8000e20:	08004bbc 	.word	0x08004bbc
  ldr r2, =_sbss
 8000e24:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 8000e28:	20000130 	.word	0x20000130

08000e2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC1_2_IRQHandler>
	...

08000e30 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e36:	2300      	movs	r3, #0
 8000e38:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e3a:	4b0c      	ldr	r3, [pc, #48]	; (8000e6c <HAL_Init+0x3c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a0b      	ldr	r2, [pc, #44]	; (8000e6c <HAL_Init+0x3c>)
 8000e40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e44:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e46:	2003      	movs	r0, #3
 8000e48:	f000 f962 	bl	8001110 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e4c:	2000      	movs	r0, #0
 8000e4e:	f000 f80f 	bl	8000e70 <HAL_InitTick>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d002      	beq.n	8000e5e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	71fb      	strb	r3, [r7, #7]
 8000e5c:	e001      	b.n	8000e62 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e5e:	f7ff fe99 	bl	8000b94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e62:	79fb      	ldrb	r3, [r7, #7]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3708      	adds	r7, #8
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	40022000 	.word	0x40022000

08000e70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b084      	sub	sp, #16
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e7c:	4b17      	ldr	r3, [pc, #92]	; (8000edc <HAL_InitTick+0x6c>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d023      	beq.n	8000ecc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e84:	4b16      	ldr	r3, [pc, #88]	; (8000ee0 <HAL_InitTick+0x70>)
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	4b14      	ldr	r3, [pc, #80]	; (8000edc <HAL_InitTick+0x6c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f000 f96d 	bl	800117a <HAL_SYSTICK_Config>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10f      	bne.n	8000ec6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d809      	bhi.n	8000ec0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eac:	2200      	movs	r2, #0
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f000 f937 	bl	8001126 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eb8:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <HAL_InitTick+0x74>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
 8000ebe:	e007      	b.n	8000ed0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
 8000ec4:	e004      	b.n	8000ed0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	73fb      	strb	r3, [r7, #15]
 8000eca:	e001      	b.n	8000ed0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3710      	adds	r7, #16
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000020 	.word	0x20000020
 8000ee0:	20000018 	.word	0x20000018
 8000ee4:	2000001c 	.word	0x2000001c

08000ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	20000020 	.word	0x20000020
 8000f0c:	2000012c 	.word	0x2000012c

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	2000012c 	.word	0x2000012c

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff ffee 	bl	8000f10 <HAL_GetTick>
 8000f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f40:	d005      	beq.n	8000f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_Delay+0x44>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f4e:	bf00      	nop
 8000f50:	f7ff ffde 	bl	8000f10 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8f7      	bhi.n	8000f50 <HAL_Delay+0x28>
  {
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000020 	.word	0x20000020

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db0b      	blt.n	8000ffe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	4907      	ldr	r1, [pc, #28]	; (800100c <__NVIC_EnableIRQ+0x38>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	; (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	; (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
         );
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
	...

080010cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010dc:	d301      	bcc.n	80010e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010de:	2301      	movs	r3, #1
 80010e0:	e00f      	b.n	8001102 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <SysTick_Config+0x40>)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	3b01      	subs	r3, #1
 80010e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ea:	210f      	movs	r1, #15
 80010ec:	f04f 30ff 	mov.w	r0, #4294967295
 80010f0:	f7ff ff8e 	bl	8001010 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010f4:	4b05      	ldr	r3, [pc, #20]	; (800110c <SysTick_Config+0x40>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <SysTick_Config+0x40>)
 80010fc:	2207      	movs	r2, #7
 80010fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	e000e010 	.word	0xe000e010

08001110 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b082      	sub	sp, #8
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001118:	6878      	ldr	r0, [r7, #4]
 800111a:	f7ff ff29 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 800111e:	bf00      	nop
 8001120:	3708      	adds	r7, #8
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b086      	sub	sp, #24
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	60b9      	str	r1, [r7, #8]
 8001130:	607a      	str	r2, [r7, #4]
 8001132:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001138:	f7ff ff3e 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 800113c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	68b9      	ldr	r1, [r7, #8]
 8001142:	6978      	ldr	r0, [r7, #20]
 8001144:	f7ff ff8e 	bl	8001064 <NVIC_EncodePriority>
 8001148:	4602      	mov	r2, r0
 800114a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ff5d 	bl	8001010 <__NVIC_SetPriority>
}
 8001156:	bf00      	nop
 8001158:	3718      	adds	r7, #24
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800115e:	b580      	push	{r7, lr}
 8001160:	b082      	sub	sp, #8
 8001162:	af00      	add	r7, sp, #0
 8001164:	4603      	mov	r3, r0
 8001166:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff ff31 	bl	8000fd4 <__NVIC_EnableIRQ>
}
 8001172:	bf00      	nop
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}

0800117a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800117a:	b580      	push	{r7, lr}
 800117c:	b082      	sub	sp, #8
 800117e:	af00      	add	r7, sp, #0
 8001180:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff ffa2 	bl	80010cc <SysTick_Config>
 8001188:	4603      	mov	r3, r0
}
 800118a:	4618      	mov	r0, r3
 800118c:	3708      	adds	r7, #8
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}

08001192 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001192:	b480      	push	{r7}
 8001194:	b085      	sub	sp, #20
 8001196:	af00      	add	r7, sp, #0
 8001198:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800119a:	2300      	movs	r3, #0
 800119c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d008      	beq.n	80011bc <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2204      	movs	r2, #4
 80011ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2200      	movs	r2, #0
 80011b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e022      	b.n	8001202 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 020e 	bic.w	r2, r2, #14
 80011ca:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f022 0201 	bic.w	r2, r2, #1
 80011da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e0:	f003 021c 	and.w	r2, r3, #28
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e8:	2101      	movs	r1, #1
 80011ea:	fa01 f202 	lsl.w	r2, r1, r2
 80011ee:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2201      	movs	r2, #1
 80011f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001202:	4618      	mov	r0, r3
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr

0800120e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	b084      	sub	sp, #16
 8001212:	af00      	add	r7, sp, #0
 8001214:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001216:	2300      	movs	r3, #0
 8001218:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001220:	b2db      	uxtb	r3, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d005      	beq.n	8001232 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2204      	movs	r2, #4
 800122a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800122c:	2301      	movs	r3, #1
 800122e:	73fb      	strb	r3, [r7, #15]
 8001230:	e029      	b.n	8001286 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f022 020e 	bic.w	r2, r2, #14
 8001240:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f022 0201 	bic.w	r2, r2, #1
 8001250:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f003 021c 	and.w	r2, r3, #28
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800125e:	2101      	movs	r1, #1
 8001260:	fa01 f202 	lsl.w	r2, r1, r2
 8001264:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2201      	movs	r2, #1
 800126a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800127a:	2b00      	cmp	r3, #0
 800127c:	d003      	beq.n	8001286 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	4798      	blx	r3
    }
  }
  return status;
 8001286:	7bfb      	ldrb	r3, [r7, #15]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3710      	adds	r7, #16
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}

08001290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129e:	e17f      	b.n	80015a0 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	2101      	movs	r1, #1
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	fa01 f303 	lsl.w	r3, r1, r3
 80012ac:	4013      	ands	r3, r2
 80012ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f000 8171 	beq.w	800159a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0303 	and.w	r3, r3, #3
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d005      	beq.n	80012d0 <HAL_GPIO_Init+0x40>
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f003 0303 	and.w	r3, r3, #3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d130      	bne.n	8001332 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	2203      	movs	r2, #3
 80012dc:	fa02 f303 	lsl.w	r3, r2, r3
 80012e0:	43db      	mvns	r3, r3
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	4013      	ands	r3, r2
 80012e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	68da      	ldr	r2, [r3, #12]
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001306:	2201      	movs	r2, #1
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa02 f303 	lsl.w	r3, r2, r3
 800130e:	43db      	mvns	r3, r3
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	091b      	lsrs	r3, r3, #4
 800131c:	f003 0201 	and.w	r2, r3, #1
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4313      	orrs	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b03      	cmp	r3, #3
 800133c:	d118      	bne.n	8001370 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001342:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001344:	2201      	movs	r2, #1
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	43db      	mvns	r3, r3
 800134e:	693a      	ldr	r2, [r7, #16]
 8001350:	4013      	ands	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	08db      	lsrs	r3, r3, #3
 800135a:	f003 0201 	and.w	r2, r3, #1
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	2b03      	cmp	r3, #3
 800137a:	d017      	beq.n	80013ac <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d123      	bne.n	8001400 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	08da      	lsrs	r2, r3, #3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	3208      	adds	r2, #8
 80013c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	220f      	movs	r2, #15
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	691a      	ldr	r2, [r3, #16]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	f003 0307 	and.w	r3, r3, #7
 80013e6:	009b      	lsls	r3, r3, #2
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	08da      	lsrs	r2, r3, #3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	3208      	adds	r2, #8
 80013fa:	6939      	ldr	r1, [r7, #16]
 80013fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	2203      	movs	r2, #3
 800140c:	fa02 f303 	lsl.w	r3, r2, r3
 8001410:	43db      	mvns	r3, r3
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	4013      	ands	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	f003 0203 	and.w	r2, r3, #3
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	005b      	lsls	r3, r3, #1
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4313      	orrs	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800143c:	2b00      	cmp	r3, #0
 800143e:	f000 80ac 	beq.w	800159a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001442:	4b5f      	ldr	r3, [pc, #380]	; (80015c0 <HAL_GPIO_Init+0x330>)
 8001444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001446:	4a5e      	ldr	r2, [pc, #376]	; (80015c0 <HAL_GPIO_Init+0x330>)
 8001448:	f043 0301 	orr.w	r3, r3, #1
 800144c:	6613      	str	r3, [r2, #96]	; 0x60
 800144e:	4b5c      	ldr	r3, [pc, #368]	; (80015c0 <HAL_GPIO_Init+0x330>)
 8001450:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
 8001458:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800145a:	4a5a      	ldr	r2, [pc, #360]	; (80015c4 <HAL_GPIO_Init+0x334>)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	220f      	movs	r2, #15
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4013      	ands	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001484:	d025      	beq.n	80014d2 <HAL_GPIO_Init+0x242>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a4f      	ldr	r2, [pc, #316]	; (80015c8 <HAL_GPIO_Init+0x338>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d01f      	beq.n	80014ce <HAL_GPIO_Init+0x23e>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a4e      	ldr	r2, [pc, #312]	; (80015cc <HAL_GPIO_Init+0x33c>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d019      	beq.n	80014ca <HAL_GPIO_Init+0x23a>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a4d      	ldr	r2, [pc, #308]	; (80015d0 <HAL_GPIO_Init+0x340>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d013      	beq.n	80014c6 <HAL_GPIO_Init+0x236>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a4c      	ldr	r2, [pc, #304]	; (80015d4 <HAL_GPIO_Init+0x344>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d00d      	beq.n	80014c2 <HAL_GPIO_Init+0x232>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a4b      	ldr	r2, [pc, #300]	; (80015d8 <HAL_GPIO_Init+0x348>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d007      	beq.n	80014be <HAL_GPIO_Init+0x22e>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4a4a      	ldr	r2, [pc, #296]	; (80015dc <HAL_GPIO_Init+0x34c>)
 80014b2:	4293      	cmp	r3, r2
 80014b4:	d101      	bne.n	80014ba <HAL_GPIO_Init+0x22a>
 80014b6:	2306      	movs	r3, #6
 80014b8:	e00c      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014ba:	2307      	movs	r3, #7
 80014bc:	e00a      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014be:	2305      	movs	r3, #5
 80014c0:	e008      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014c2:	2304      	movs	r3, #4
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014c6:	2303      	movs	r3, #3
 80014c8:	e004      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_Init+0x244>
 80014d2:	2300      	movs	r3, #0
 80014d4:	697a      	ldr	r2, [r7, #20]
 80014d6:	f002 0203 	and.w	r2, r2, #3
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	4093      	lsls	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014e4:	4937      	ldr	r1, [pc, #220]	; (80015c4 <HAL_GPIO_Init+0x334>)
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014f2:	4b3b      	ldr	r3, [pc, #236]	; (80015e0 <HAL_GPIO_Init+0x350>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	4013      	ands	r3, r2
 8001500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	4313      	orrs	r3, r2
 8001514:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001516:	4a32      	ldr	r2, [pc, #200]	; (80015e0 <HAL_GPIO_Init+0x350>)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800151c:	4b30      	ldr	r3, [pc, #192]	; (80015e0 <HAL_GPIO_Init+0x350>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	43db      	mvns	r3, r3
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	4013      	ands	r3, r2
 800152a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001540:	4a27      	ldr	r2, [pc, #156]	; (80015e0 <HAL_GPIO_Init+0x350>)
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001546:	4b26      	ldr	r3, [pc, #152]	; (80015e0 <HAL_GPIO_Init+0x350>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	43db      	mvns	r3, r3
 8001550:	693a      	ldr	r2, [r7, #16]
 8001552:	4013      	ands	r3, r2
 8001554:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	4313      	orrs	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800156a:	4a1d      	ldr	r2, [pc, #116]	; (80015e0 <HAL_GPIO_Init+0x350>)
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001570:	4b1b      	ldr	r3, [pc, #108]	; (80015e0 <HAL_GPIO_Init+0x350>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	43db      	mvns	r3, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4013      	ands	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	4313      	orrs	r3, r2
 8001592:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001594:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <HAL_GPIO_Init+0x350>)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	3301      	adds	r3, #1
 800159e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	fa22 f303 	lsr.w	r3, r2, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f47f ae78 	bne.w	80012a0 <HAL_GPIO_Init+0x10>
  }
}
 80015b0:	bf00      	nop
 80015b2:	bf00      	nop
 80015b4:	371c      	adds	r7, #28
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40010000 	.word	0x40010000
 80015c8:	48000400 	.word	0x48000400
 80015cc:	48000800 	.word	0x48000800
 80015d0:	48000c00 	.word	0x48000c00
 80015d4:	48001000 	.word	0x48001000
 80015d8:	48001400 	.word	0x48001400
 80015dc:	48001800 	.word	0x48001800
 80015e0:	40010400 	.word	0x40010400

080015e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	460b      	mov	r3, r1
 80015ee:	807b      	strh	r3, [r7, #2]
 80015f0:	4613      	mov	r3, r2
 80015f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015f4:	787b      	ldrb	r3, [r7, #1]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d003      	beq.n	8001602 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015fa:	887a      	ldrh	r2, [r7, #2]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001600:	e002      	b.n	8001608 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001602:	887a      	ldrh	r2, [r7, #2]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <HAL_PWREx_GetVoltageRange+0x18>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40007000 	.word	0x40007000

08001630 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800163e:	d130      	bne.n	80016a2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001640:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800164c:	d038      	beq.n	80016c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800164e:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001656:	4a1e      	ldr	r2, [pc, #120]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001658:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800165c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800165e:	4b1d      	ldr	r3, [pc, #116]	; (80016d4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	2232      	movs	r2, #50	; 0x32
 8001664:	fb02 f303 	mul.w	r3, r2, r3
 8001668:	4a1b      	ldr	r2, [pc, #108]	; (80016d8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800166a:	fba2 2303 	umull	r2, r3, r2, r3
 800166e:	0c9b      	lsrs	r3, r3, #18
 8001670:	3301      	adds	r3, #1
 8001672:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001674:	e002      	b.n	800167c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	3b01      	subs	r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800167e:	695b      	ldr	r3, [r3, #20]
 8001680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001684:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001688:	d102      	bne.n	8001690 <HAL_PWREx_ControlVoltageScaling+0x60>
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d1f2      	bne.n	8001676 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001692:	695b      	ldr	r3, [r3, #20]
 8001694:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800169c:	d110      	bne.n	80016c0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e00f      	b.n	80016c2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ae:	d007      	beq.n	80016c0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016b0:	4b07      	ldr	r3, [pc, #28]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016b8:	4a05      	ldr	r2, [pc, #20]	; (80016d0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016be:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80016c0:	2300      	movs	r3, #0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40007000 	.word	0x40007000
 80016d4:	20000018 	.word	0x20000018
 80016d8:	431bde83 	.word	0x431bde83

080016dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b088      	sub	sp, #32
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e3d4      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ee:	4ba1      	ldr	r3, [pc, #644]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 80016f0:	689b      	ldr	r3, [r3, #8]
 80016f2:	f003 030c 	and.w	r3, r3, #12
 80016f6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016f8:	4b9e      	ldr	r3, [pc, #632]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0310 	and.w	r3, r3, #16
 800170a:	2b00      	cmp	r3, #0
 800170c:	f000 80e4 	beq.w	80018d8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d007      	beq.n	8001726 <HAL_RCC_OscConfig+0x4a>
 8001716:	69bb      	ldr	r3, [r7, #24]
 8001718:	2b0c      	cmp	r3, #12
 800171a:	f040 808b 	bne.w	8001834 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	2b01      	cmp	r3, #1
 8001722:	f040 8087 	bne.w	8001834 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001726:	4b93      	ldr	r3, [pc, #588]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d005      	beq.n	800173e <HAL_RCC_OscConfig+0x62>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	699b      	ldr	r3, [r3, #24]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e3ac      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a1a      	ldr	r2, [r3, #32]
 8001742:	4b8c      	ldr	r3, [pc, #560]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f003 0308 	and.w	r3, r3, #8
 800174a:	2b00      	cmp	r3, #0
 800174c:	d004      	beq.n	8001758 <HAL_RCC_OscConfig+0x7c>
 800174e:	4b89      	ldr	r3, [pc, #548]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001756:	e005      	b.n	8001764 <HAL_RCC_OscConfig+0x88>
 8001758:	4b86      	ldr	r3, [pc, #536]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 800175a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800175e:	091b      	lsrs	r3, r3, #4
 8001760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001764:	4293      	cmp	r3, r2
 8001766:	d223      	bcs.n	80017b0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a1b      	ldr	r3, [r3, #32]
 800176c:	4618      	mov	r0, r3
 800176e:	f000 fd41 	bl	80021f4 <RCC_SetFlashLatencyFromMSIRange>
 8001772:	4603      	mov	r3, r0
 8001774:	2b00      	cmp	r3, #0
 8001776:	d001      	beq.n	800177c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	e38d      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800177c:	4b7d      	ldr	r3, [pc, #500]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a7c      	ldr	r2, [pc, #496]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 8001782:	f043 0308 	orr.w	r3, r3, #8
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b7a      	ldr	r3, [pc, #488]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	4977      	ldr	r1, [pc, #476]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800179a:	4b76      	ldr	r3, [pc, #472]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	021b      	lsls	r3, r3, #8
 80017a8:	4972      	ldr	r1, [pc, #456]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	604b      	str	r3, [r1, #4]
 80017ae:	e025      	b.n	80017fc <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017b0:	4b70      	ldr	r3, [pc, #448]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a6f      	ldr	r2, [pc, #444]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 80017b6:	f043 0308 	orr.w	r3, r3, #8
 80017ba:	6013      	str	r3, [r2, #0]
 80017bc:	4b6d      	ldr	r3, [pc, #436]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6a1b      	ldr	r3, [r3, #32]
 80017c8:	496a      	ldr	r1, [pc, #424]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 80017ca:	4313      	orrs	r3, r2
 80017cc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ce:	4b69      	ldr	r3, [pc, #420]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	69db      	ldr	r3, [r3, #28]
 80017da:	021b      	lsls	r3, r3, #8
 80017dc:	4965      	ldr	r1, [pc, #404]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 80017de:	4313      	orrs	r3, r2
 80017e0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017e2:	69bb      	ldr	r3, [r7, #24]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d109      	bne.n	80017fc <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f000 fd01 	bl	80021f4 <RCC_SetFlashLatencyFromMSIRange>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e34d      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017fc:	f000 fc36 	bl	800206c <HAL_RCC_GetSysClockFreq>
 8001800:	4602      	mov	r2, r0
 8001802:	4b5c      	ldr	r3, [pc, #368]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	091b      	lsrs	r3, r3, #4
 8001808:	f003 030f 	and.w	r3, r3, #15
 800180c:	495a      	ldr	r1, [pc, #360]	; (8001978 <HAL_RCC_OscConfig+0x29c>)
 800180e:	5ccb      	ldrb	r3, [r1, r3]
 8001810:	f003 031f 	and.w	r3, r3, #31
 8001814:	fa22 f303 	lsr.w	r3, r2, r3
 8001818:	4a58      	ldr	r2, [pc, #352]	; (800197c <HAL_RCC_OscConfig+0x2a0>)
 800181a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800181c:	4b58      	ldr	r3, [pc, #352]	; (8001980 <HAL_RCC_OscConfig+0x2a4>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff fb25 	bl	8000e70 <HAL_InitTick>
 8001826:	4603      	mov	r3, r0
 8001828:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800182a:	7bfb      	ldrb	r3, [r7, #15]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d052      	beq.n	80018d6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	e331      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	699b      	ldr	r3, [r3, #24]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d032      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800183c:	4b4d      	ldr	r3, [pc, #308]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a4c      	ldr	r2, [pc, #304]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001848:	f7ff fb62 	bl	8000f10 <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001850:	f7ff fb5e 	bl	8000f10 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e31a      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001862:	4b44      	ldr	r3, [pc, #272]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800186e:	4b41      	ldr	r3, [pc, #260]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a40      	ldr	r2, [pc, #256]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 8001874:	f043 0308 	orr.w	r3, r3, #8
 8001878:	6013      	str	r3, [r2, #0]
 800187a:	4b3e      	ldr	r3, [pc, #248]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6a1b      	ldr	r3, [r3, #32]
 8001886:	493b      	ldr	r1, [pc, #236]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 8001888:	4313      	orrs	r3, r2
 800188a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800188c:	4b39      	ldr	r3, [pc, #228]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	69db      	ldr	r3, [r3, #28]
 8001898:	021b      	lsls	r3, r3, #8
 800189a:	4936      	ldr	r1, [pc, #216]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 800189c:	4313      	orrs	r3, r2
 800189e:	604b      	str	r3, [r1, #4]
 80018a0:	e01a      	b.n	80018d8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018a2:	4b34      	ldr	r3, [pc, #208]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a33      	ldr	r2, [pc, #204]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 80018a8:	f023 0301 	bic.w	r3, r3, #1
 80018ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018ae:	f7ff fb2f 	bl	8000f10 <HAL_GetTick>
 80018b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018b4:	e008      	b.n	80018c8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018b6:	f7ff fb2b 	bl	8000f10 <HAL_GetTick>
 80018ba:	4602      	mov	r2, r0
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	1ad3      	subs	r3, r2, r3
 80018c0:	2b02      	cmp	r3, #2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e2e7      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018c8:	4b2a      	ldr	r3, [pc, #168]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f0      	bne.n	80018b6 <HAL_RCC_OscConfig+0x1da>
 80018d4:	e000      	b.n	80018d8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018d6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d074      	beq.n	80019ce <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2b08      	cmp	r3, #8
 80018e8:	d005      	beq.n	80018f6 <HAL_RCC_OscConfig+0x21a>
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	2b0c      	cmp	r3, #12
 80018ee:	d10e      	bne.n	800190e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	2b03      	cmp	r3, #3
 80018f4:	d10b      	bne.n	800190e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f6:	4b1f      	ldr	r3, [pc, #124]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d064      	beq.n	80019cc <HAL_RCC_OscConfig+0x2f0>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d160      	bne.n	80019cc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
 800190c:	e2c4      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001916:	d106      	bne.n	8001926 <HAL_RCC_OscConfig+0x24a>
 8001918:	4b16      	ldr	r3, [pc, #88]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a15      	ldr	r2, [pc, #84]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 800191e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001922:	6013      	str	r3, [r2, #0]
 8001924:	e01d      	b.n	8001962 <HAL_RCC_OscConfig+0x286>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800192e:	d10c      	bne.n	800194a <HAL_RCC_OscConfig+0x26e>
 8001930:	4b10      	ldr	r3, [pc, #64]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a0f      	ldr	r2, [pc, #60]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 8001936:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800193a:	6013      	str	r3, [r2, #0]
 800193c:	4b0d      	ldr	r3, [pc, #52]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a0c      	ldr	r2, [pc, #48]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 8001942:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	e00b      	b.n	8001962 <HAL_RCC_OscConfig+0x286>
 800194a:	4b0a      	ldr	r3, [pc, #40]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a09      	ldr	r2, [pc, #36]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 8001950:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001954:	6013      	str	r3, [r2, #0]
 8001956:	4b07      	ldr	r3, [pc, #28]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a06      	ldr	r2, [pc, #24]	; (8001974 <HAL_RCC_OscConfig+0x298>)
 800195c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001960:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d01c      	beq.n	80019a4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196a:	f7ff fad1 	bl	8000f10 <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001970:	e011      	b.n	8001996 <HAL_RCC_OscConfig+0x2ba>
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000
 8001978:	08004b64 	.word	0x08004b64
 800197c:	20000018 	.word	0x20000018
 8001980:	2000001c 	.word	0x2000001c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001984:	f7ff fac4 	bl	8000f10 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	; 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e280      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001996:	4baf      	ldr	r3, [pc, #700]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x2a8>
 80019a2:	e014      	b.n	80019ce <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019a4:	f7ff fab4 	bl	8000f10 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ac:	f7ff fab0 	bl	8000f10 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b64      	cmp	r3, #100	; 0x64
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e26c      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019be:	4ba5      	ldr	r3, [pc, #660]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x2d0>
 80019ca:	e000      	b.n	80019ce <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d060      	beq.n	8001a9c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	2b04      	cmp	r3, #4
 80019de:	d005      	beq.n	80019ec <HAL_RCC_OscConfig+0x310>
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	2b0c      	cmp	r3, #12
 80019e4:	d119      	bne.n	8001a1a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d116      	bne.n	8001a1a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019ec:	4b99      	ldr	r3, [pc, #612]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d005      	beq.n	8001a04 <HAL_RCC_OscConfig+0x328>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e249      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a04:	4b93      	ldr	r3, [pc, #588]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	691b      	ldr	r3, [r3, #16]
 8001a10:	061b      	lsls	r3, r3, #24
 8001a12:	4990      	ldr	r1, [pc, #576]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a18:	e040      	b.n	8001a9c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	68db      	ldr	r3, [r3, #12]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d023      	beq.n	8001a6a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a22:	4b8c      	ldr	r3, [pc, #560]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a8b      	ldr	r2, [pc, #556]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a2e:	f7ff fa6f 	bl	8000f10 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a34:	e008      	b.n	8001a48 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a36:	f7ff fa6b 	bl	8000f10 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	2b02      	cmp	r3, #2
 8001a42:	d901      	bls.n	8001a48 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a44:	2303      	movs	r3, #3
 8001a46:	e227      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a48:	4b82      	ldr	r3, [pc, #520]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d0f0      	beq.n	8001a36 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a54:	4b7f      	ldr	r3, [pc, #508]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	691b      	ldr	r3, [r3, #16]
 8001a60:	061b      	lsls	r3, r3, #24
 8001a62:	497c      	ldr	r1, [pc, #496]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	604b      	str	r3, [r1, #4]
 8001a68:	e018      	b.n	8001a9c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a6a:	4b7a      	ldr	r3, [pc, #488]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a79      	ldr	r2, [pc, #484]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001a70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a76:	f7ff fa4b 	bl	8000f10 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7e:	f7ff fa47 	bl	8000f10 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e203      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a90:	4b70      	ldr	r3, [pc, #448]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d1f0      	bne.n	8001a7e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0308 	and.w	r3, r3, #8
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d03c      	beq.n	8001b22 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	695b      	ldr	r3, [r3, #20]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d01c      	beq.n	8001aea <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab0:	4b68      	ldr	r3, [pc, #416]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001ab2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ab6:	4a67      	ldr	r2, [pc, #412]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac0:	f7ff fa26 	bl	8000f10 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac8:	f7ff fa22 	bl	8000f10 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e1de      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ada:	4b5e      	ldr	r3, [pc, #376]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0ef      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x3ec>
 8001ae8:	e01b      	b.n	8001b22 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aea:	4b5a      	ldr	r3, [pc, #360]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001af0:	4a58      	ldr	r2, [pc, #352]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001af2:	f023 0301 	bic.w	r3, r3, #1
 8001af6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afa:	f7ff fa09 	bl	8000f10 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b00:	e008      	b.n	8001b14 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b02:	f7ff fa05 	bl	8000f10 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	2b02      	cmp	r3, #2
 8001b0e:	d901      	bls.n	8001b14 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b10:	2303      	movs	r3, #3
 8001b12:	e1c1      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b14:	4b4f      	ldr	r3, [pc, #316]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1ef      	bne.n	8001b02 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f003 0304 	and.w	r3, r3, #4
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	f000 80a6 	beq.w	8001c7c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b30:	2300      	movs	r3, #0
 8001b32:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b34:	4b47      	ldr	r3, [pc, #284]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d10d      	bne.n	8001b5c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b40:	4b44      	ldr	r3, [pc, #272]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001b42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b44:	4a43      	ldr	r2, [pc, #268]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001b46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b4c:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b54:	60bb      	str	r3, [r7, #8]
 8001b56:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b5c:	4b3e      	ldr	r3, [pc, #248]	; (8001c58 <HAL_RCC_OscConfig+0x57c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d118      	bne.n	8001b9a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b68:	4b3b      	ldr	r3, [pc, #236]	; (8001c58 <HAL_RCC_OscConfig+0x57c>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a3a      	ldr	r2, [pc, #232]	; (8001c58 <HAL_RCC_OscConfig+0x57c>)
 8001b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b72:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b74:	f7ff f9cc 	bl	8000f10 <HAL_GetTick>
 8001b78:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b7a:	e008      	b.n	8001b8e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7c:	f7ff f9c8 	bl	8000f10 <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d901      	bls.n	8001b8e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e184      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b8e:	4b32      	ldr	r3, [pc, #200]	; (8001c58 <HAL_RCC_OscConfig+0x57c>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d108      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x4d8>
 8001ba2:	4b2c      	ldr	r3, [pc, #176]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba8:	4a2a      	ldr	r2, [pc, #168]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001baa:	f043 0301 	orr.w	r3, r3, #1
 8001bae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bb2:	e024      	b.n	8001bfe <HAL_RCC_OscConfig+0x522>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	2b05      	cmp	r3, #5
 8001bba:	d110      	bne.n	8001bde <HAL_RCC_OscConfig+0x502>
 8001bbc:	4b25      	ldr	r3, [pc, #148]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc2:	4a24      	ldr	r2, [pc, #144]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bcc:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001bce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bd2:	4a20      	ldr	r2, [pc, #128]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001bd4:	f043 0301 	orr.w	r3, r3, #1
 8001bd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bdc:	e00f      	b.n	8001bfe <HAL_RCC_OscConfig+0x522>
 8001bde:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001be4:	4a1b      	ldr	r2, [pc, #108]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001be6:	f023 0301 	bic.w	r3, r3, #1
 8001bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bee:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001bf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf4:	4a17      	ldr	r2, [pc, #92]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001bf6:	f023 0304 	bic.w	r3, r3, #4
 8001bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d016      	beq.n	8001c34 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c06:	f7ff f983 	bl	8000f10 <HAL_GetTick>
 8001c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c0c:	e00a      	b.n	8001c24 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c0e:	f7ff f97f 	bl	8000f10 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	693b      	ldr	r3, [r7, #16]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e139      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c24:	4b0b      	ldr	r3, [pc, #44]	; (8001c54 <HAL_RCC_OscConfig+0x578>)
 8001c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0ed      	beq.n	8001c0e <HAL_RCC_OscConfig+0x532>
 8001c32:	e01a      	b.n	8001c6a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c34:	f7ff f96c 	bl	8000f10 <HAL_GetTick>
 8001c38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c3a:	e00f      	b.n	8001c5c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c3c:	f7ff f968 	bl	8000f10 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d906      	bls.n	8001c5c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e122      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c5c:	4b90      	ldr	r3, [pc, #576]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c62:	f003 0302 	and.w	r3, r3, #2
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1e8      	bne.n	8001c3c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c6a:	7ffb      	ldrb	r3, [r7, #31]
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d105      	bne.n	8001c7c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c70:	4b8b      	ldr	r3, [pc, #556]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c74:	4a8a      	ldr	r2, [pc, #552]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001c76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 8108 	beq.w	8001e96 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	f040 80d0 	bne.w	8001e30 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c90:	4b83      	ldr	r3, [pc, #524]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f003 0203 	and.w	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d130      	bne.n	8001d06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	3b01      	subs	r3, #1
 8001cb0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d127      	bne.n	8001d06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cc0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d11f      	bne.n	8001d06 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ccc:	687a      	ldr	r2, [r7, #4]
 8001cce:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cd0:	2a07      	cmp	r2, #7
 8001cd2:	bf14      	ite	ne
 8001cd4:	2201      	movne	r2, #1
 8001cd6:	2200      	moveq	r2, #0
 8001cd8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d113      	bne.n	8001d06 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ce8:	085b      	lsrs	r3, r3, #1
 8001cea:	3b01      	subs	r3, #1
 8001cec:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d109      	bne.n	8001d06 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfc:	085b      	lsrs	r3, r3, #1
 8001cfe:	3b01      	subs	r3, #1
 8001d00:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d06e      	beq.n	8001de4 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	2b0c      	cmp	r3, #12
 8001d0a:	d069      	beq.n	8001de0 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001d0c:	4b64      	ldr	r3, [pc, #400]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d105      	bne.n	8001d24 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001d18:	4b61      	ldr	r3, [pc, #388]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e0b7      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001d28:	4b5d      	ldr	r3, [pc, #372]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a5c      	ldr	r2, [pc, #368]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001d2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d32:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d34:	f7ff f8ec 	bl	8000f10 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7ff f8e8 	bl	8000f10 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e0a4      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d4e:	4b54      	ldr	r3, [pc, #336]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d5a:	4b51      	ldr	r3, [pc, #324]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001d5c:	68da      	ldr	r2, [r3, #12]
 8001d5e:	4b51      	ldr	r3, [pc, #324]	; (8001ea4 <HAL_RCC_OscConfig+0x7c8>)
 8001d60:	4013      	ands	r3, r2
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d66:	687a      	ldr	r2, [r7, #4]
 8001d68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d6a:	3a01      	subs	r2, #1
 8001d6c:	0112      	lsls	r2, r2, #4
 8001d6e:	4311      	orrs	r1, r2
 8001d70:	687a      	ldr	r2, [r7, #4]
 8001d72:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d74:	0212      	lsls	r2, r2, #8
 8001d76:	4311      	orrs	r1, r2
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d7c:	0852      	lsrs	r2, r2, #1
 8001d7e:	3a01      	subs	r2, #1
 8001d80:	0552      	lsls	r2, r2, #21
 8001d82:	4311      	orrs	r1, r2
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d88:	0852      	lsrs	r2, r2, #1
 8001d8a:	3a01      	subs	r2, #1
 8001d8c:	0652      	lsls	r2, r2, #25
 8001d8e:	4311      	orrs	r1, r2
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d94:	0912      	lsrs	r2, r2, #4
 8001d96:	0452      	lsls	r2, r2, #17
 8001d98:	430a      	orrs	r2, r1
 8001d9a:	4941      	ldr	r1, [pc, #260]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001da0:	4b3f      	ldr	r3, [pc, #252]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a3e      	ldr	r2, [pc, #248]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001da6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001daa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dac:	4b3c      	ldr	r3, [pc, #240]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	4a3b      	ldr	r2, [pc, #236]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001db2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001db6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001db8:	f7ff f8aa 	bl	8000f10 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dc0:	f7ff f8a6 	bl	8000f10 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e062      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dd2:	4b33      	ldr	r3, [pc, #204]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dde:	e05a      	b.n	8001e96 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e059      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001de4:	4b2e      	ldr	r3, [pc, #184]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d152      	bne.n	8001e96 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001df0:	4b2b      	ldr	r3, [pc, #172]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a2a      	ldr	r2, [pc, #168]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dfa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dfc:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	4a27      	ldr	r2, [pc, #156]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001e02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e06:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e08:	f7ff f882 	bl	8000f10 <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e10:	f7ff f87e 	bl	8000f10 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e03a      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e22:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x734>
 8001e2e:	e032      	b.n	8001e96 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	2b0c      	cmp	r3, #12
 8001e34:	d02d      	beq.n	8001e92 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e36:	4b1a      	ldr	r3, [pc, #104]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001e3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e40:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d105      	bne.n	8001e5a <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001e4e:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	4a13      	ldr	r2, [pc, #76]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001e54:	f023 0303 	bic.w	r3, r3, #3
 8001e58:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001e5c:	68db      	ldr	r3, [r3, #12]
 8001e5e:	4a10      	ldr	r2, [pc, #64]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001e60:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001e64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e68:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7ff f851 	bl	8000f10 <HAL_GetTick>
 8001e6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e70:	e008      	b.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e72:	f7ff f84d 	bl	8000f10 <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	2b02      	cmp	r3, #2
 8001e7e:	d901      	bls.n	8001e84 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e009      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_RCC_OscConfig+0x7c4>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d1f0      	bne.n	8001e72 <HAL_RCC_OscConfig+0x796>
 8001e90:	e001      	b.n	8001e96 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3720      	adds	r7, #32
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	f99d808c 	.word	0xf99d808c

08001ea8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d101      	bne.n	8001ebc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0c8      	b.n	800204e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ebc:	4b66      	ldr	r3, [pc, #408]	; (8002058 <HAL_RCC_ClockConfig+0x1b0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d910      	bls.n	8001eec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eca:	4b63      	ldr	r3, [pc, #396]	; (8002058 <HAL_RCC_ClockConfig+0x1b0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 0207 	bic.w	r2, r3, #7
 8001ed2:	4961      	ldr	r1, [pc, #388]	; (8002058 <HAL_RCC_ClockConfig+0x1b0>)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eda:	4b5f      	ldr	r3, [pc, #380]	; (8002058 <HAL_RCC_ClockConfig+0x1b0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e0b0      	b.n	800204e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0301 	and.w	r3, r3, #1
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d04c      	beq.n	8001f92 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d107      	bne.n	8001f10 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f00:	4b56      	ldr	r3, [pc, #344]	; (800205c <HAL_RCC_ClockConfig+0x1b4>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d121      	bne.n	8001f50 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e09e      	b.n	800204e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d107      	bne.n	8001f28 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f18:	4b50      	ldr	r3, [pc, #320]	; (800205c <HAL_RCC_ClockConfig+0x1b4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d115      	bne.n	8001f50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e092      	b.n	800204e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d107      	bne.n	8001f40 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f30:	4b4a      	ldr	r3, [pc, #296]	; (800205c <HAL_RCC_ClockConfig+0x1b4>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d109      	bne.n	8001f50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e086      	b.n	800204e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f40:	4b46      	ldr	r3, [pc, #280]	; (800205c <HAL_RCC_ClockConfig+0x1b4>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e07e      	b.n	800204e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f50:	4b42      	ldr	r3, [pc, #264]	; (800205c <HAL_RCC_ClockConfig+0x1b4>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f023 0203 	bic.w	r2, r3, #3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	493f      	ldr	r1, [pc, #252]	; (800205c <HAL_RCC_ClockConfig+0x1b4>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f62:	f7fe ffd5 	bl	8000f10 <HAL_GetTick>
 8001f66:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f68:	e00a      	b.n	8001f80 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f6a:	f7fe ffd1 	bl	8000f10 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d901      	bls.n	8001f80 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001f7c:	2303      	movs	r3, #3
 8001f7e:	e066      	b.n	800204e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f80:	4b36      	ldr	r3, [pc, #216]	; (800205c <HAL_RCC_ClockConfig+0x1b4>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 020c 	and.w	r2, r3, #12
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	009b      	lsls	r3, r3, #2
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d1eb      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0302 	and.w	r3, r3, #2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d008      	beq.n	8001fb0 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f9e:	4b2f      	ldr	r3, [pc, #188]	; (800205c <HAL_RCC_ClockConfig+0x1b4>)
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	492c      	ldr	r1, [pc, #176]	; (800205c <HAL_RCC_ClockConfig+0x1b4>)
 8001fac:	4313      	orrs	r3, r2
 8001fae:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb0:	4b29      	ldr	r3, [pc, #164]	; (8002058 <HAL_RCC_ClockConfig+0x1b0>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	683a      	ldr	r2, [r7, #0]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d210      	bcs.n	8001fe0 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fbe:	4b26      	ldr	r3, [pc, #152]	; (8002058 <HAL_RCC_ClockConfig+0x1b0>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f023 0207 	bic.w	r2, r3, #7
 8001fc6:	4924      	ldr	r1, [pc, #144]	; (8002058 <HAL_RCC_ClockConfig+0x1b0>)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fce:	4b22      	ldr	r3, [pc, #136]	; (8002058 <HAL_RCC_ClockConfig+0x1b0>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 0307 	and.w	r3, r3, #7
 8001fd6:	683a      	ldr	r2, [r7, #0]
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d001      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e036      	b.n	800204e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fec:	4b1b      	ldr	r3, [pc, #108]	; (800205c <HAL_RCC_ClockConfig+0x1b4>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	4918      	ldr	r1, [pc, #96]	; (800205c <HAL_RCC_ClockConfig+0x1b4>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d009      	beq.n	800201e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800200a:	4b14      	ldr	r3, [pc, #80]	; (800205c <HAL_RCC_ClockConfig+0x1b4>)
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4910      	ldr	r1, [pc, #64]	; (800205c <HAL_RCC_ClockConfig+0x1b4>)
 800201a:	4313      	orrs	r3, r2
 800201c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800201e:	f000 f825 	bl	800206c <HAL_RCC_GetSysClockFreq>
 8002022:	4602      	mov	r2, r0
 8002024:	4b0d      	ldr	r3, [pc, #52]	; (800205c <HAL_RCC_ClockConfig+0x1b4>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	091b      	lsrs	r3, r3, #4
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	490c      	ldr	r1, [pc, #48]	; (8002060 <HAL_RCC_ClockConfig+0x1b8>)
 8002030:	5ccb      	ldrb	r3, [r1, r3]
 8002032:	f003 031f 	and.w	r3, r3, #31
 8002036:	fa22 f303 	lsr.w	r3, r2, r3
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <HAL_RCC_ClockConfig+0x1bc>)
 800203c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <HAL_RCC_ClockConfig+0x1c0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7fe ff14 	bl	8000e70 <HAL_InitTick>
 8002048:	4603      	mov	r3, r0
 800204a:	72fb      	strb	r3, [r7, #11]

  return status;
 800204c:	7afb      	ldrb	r3, [r7, #11]
}
 800204e:	4618      	mov	r0, r3
 8002050:	3710      	adds	r7, #16
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40022000 	.word	0x40022000
 800205c:	40021000 	.word	0x40021000
 8002060:	08004b64 	.word	0x08004b64
 8002064:	20000018 	.word	0x20000018
 8002068:	2000001c 	.word	0x2000001c

0800206c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800206c:	b480      	push	{r7}
 800206e:	b089      	sub	sp, #36	; 0x24
 8002070:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	2300      	movs	r3, #0
 8002078:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800207a:	4b3e      	ldr	r3, [pc, #248]	; (8002174 <HAL_RCC_GetSysClockFreq+0x108>)
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002084:	4b3b      	ldr	r3, [pc, #236]	; (8002174 <HAL_RCC_GetSysClockFreq+0x108>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	f003 0303 	and.w	r3, r3, #3
 800208c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d005      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x34>
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	2b0c      	cmp	r3, #12
 8002098:	d121      	bne.n	80020de <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d11e      	bne.n	80020de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020a0:	4b34      	ldr	r3, [pc, #208]	; (8002174 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0308 	and.w	r3, r3, #8
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d107      	bne.n	80020bc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020ac:	4b31      	ldr	r3, [pc, #196]	; (8002174 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020b2:	0a1b      	lsrs	r3, r3, #8
 80020b4:	f003 030f 	and.w	r3, r3, #15
 80020b8:	61fb      	str	r3, [r7, #28]
 80020ba:	e005      	b.n	80020c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020bc:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <HAL_RCC_GetSysClockFreq+0x108>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	091b      	lsrs	r3, r3, #4
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020c8:	4a2b      	ldr	r2, [pc, #172]	; (8002178 <HAL_RCC_GetSysClockFreq+0x10c>)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020d0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10d      	bne.n	80020f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020dc:	e00a      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d102      	bne.n	80020ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020e4:	4b25      	ldr	r3, [pc, #148]	; (800217c <HAL_RCC_GetSysClockFreq+0x110>)
 80020e6:	61bb      	str	r3, [r7, #24]
 80020e8:	e004      	b.n	80020f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	2b08      	cmp	r3, #8
 80020ee:	d101      	bne.n	80020f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020f0:	4b23      	ldr	r3, [pc, #140]	; (8002180 <HAL_RCC_GetSysClockFreq+0x114>)
 80020f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	2b0c      	cmp	r3, #12
 80020f8:	d134      	bne.n	8002164 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020fa:	4b1e      	ldr	r3, [pc, #120]	; (8002174 <HAL_RCC_GetSysClockFreq+0x108>)
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002104:	68bb      	ldr	r3, [r7, #8]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d003      	beq.n	8002112 <HAL_RCC_GetSysClockFreq+0xa6>
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	2b03      	cmp	r3, #3
 800210e:	d003      	beq.n	8002118 <HAL_RCC_GetSysClockFreq+0xac>
 8002110:	e005      	b.n	800211e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002112:	4b1a      	ldr	r3, [pc, #104]	; (800217c <HAL_RCC_GetSysClockFreq+0x110>)
 8002114:	617b      	str	r3, [r7, #20]
      break;
 8002116:	e005      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_RCC_GetSysClockFreq+0x114>)
 800211a:	617b      	str	r3, [r7, #20]
      break;
 800211c:	e002      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	617b      	str	r3, [r7, #20]
      break;
 8002122:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002124:	4b13      	ldr	r3, [pc, #76]	; (8002174 <HAL_RCC_GetSysClockFreq+0x108>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	091b      	lsrs	r3, r3, #4
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	3301      	adds	r3, #1
 8002130:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002132:	4b10      	ldr	r3, [pc, #64]	; (8002174 <HAL_RCC_GetSysClockFreq+0x108>)
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	fb02 f203 	mul.w	r2, r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	fbb2 f3f3 	udiv	r3, r2, r3
 8002148:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800214a:	4b0a      	ldr	r3, [pc, #40]	; (8002174 <HAL_RCC_GetSysClockFreq+0x108>)
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	0e5b      	lsrs	r3, r3, #25
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	3301      	adds	r3, #1
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002162:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002164:	69bb      	ldr	r3, [r7, #24]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3724      	adds	r7, #36	; 0x24
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	40021000 	.word	0x40021000
 8002178:	08004b7c 	.word	0x08004b7c
 800217c:	00f42400 	.word	0x00f42400
 8002180:	007a1200 	.word	0x007a1200

08002184 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002188:	4b03      	ldr	r3, [pc, #12]	; (8002198 <HAL_RCC_GetHCLKFreq+0x14>)
 800218a:	681b      	ldr	r3, [r3, #0]
}
 800218c:	4618      	mov	r0, r3
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	20000018 	.word	0x20000018

0800219c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021a0:	f7ff fff0 	bl	8002184 <HAL_RCC_GetHCLKFreq>
 80021a4:	4602      	mov	r2, r0
 80021a6:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	0a1b      	lsrs	r3, r3, #8
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	4904      	ldr	r1, [pc, #16]	; (80021c4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021b2:	5ccb      	ldrb	r3, [r1, r3]
 80021b4:	f003 031f 	and.w	r3, r3, #31
 80021b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021bc:	4618      	mov	r0, r3
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	40021000 	.word	0x40021000
 80021c4:	08004b74 	.word	0x08004b74

080021c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021cc:	f7ff ffda 	bl	8002184 <HAL_RCC_GetHCLKFreq>
 80021d0:	4602      	mov	r2, r0
 80021d2:	4b06      	ldr	r3, [pc, #24]	; (80021ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	0adb      	lsrs	r3, r3, #11
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	4904      	ldr	r1, [pc, #16]	; (80021f0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021de:	5ccb      	ldrb	r3, [r1, r3]
 80021e0:	f003 031f 	and.w	r3, r3, #31
 80021e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40021000 	.word	0x40021000
 80021f0:	08004b74 	.word	0x08004b74

080021f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021fc:	2300      	movs	r3, #0
 80021fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002200:	4b2a      	ldr	r3, [pc, #168]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800220c:	f7ff fa02 	bl	8001614 <HAL_PWREx_GetVoltageRange>
 8002210:	6178      	str	r0, [r7, #20]
 8002212:	e014      	b.n	800223e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002214:	4b25      	ldr	r3, [pc, #148]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002218:	4a24      	ldr	r2, [pc, #144]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800221a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221e:	6593      	str	r3, [r2, #88]	; 0x58
 8002220:	4b22      	ldr	r3, [pc, #136]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002228:	60fb      	str	r3, [r7, #12]
 800222a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800222c:	f7ff f9f2 	bl	8001614 <HAL_PWREx_GetVoltageRange>
 8002230:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002232:	4b1e      	ldr	r3, [pc, #120]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002236:	4a1d      	ldr	r2, [pc, #116]	; (80022ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800223c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002244:	d10b      	bne.n	800225e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b80      	cmp	r3, #128	; 0x80
 800224a:	d919      	bls.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2ba0      	cmp	r3, #160	; 0xa0
 8002250:	d902      	bls.n	8002258 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002252:	2302      	movs	r3, #2
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	e013      	b.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002258:	2301      	movs	r3, #1
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	e010      	b.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b80      	cmp	r3, #128	; 0x80
 8002262:	d902      	bls.n	800226a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002264:	2303      	movs	r3, #3
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	e00a      	b.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b80      	cmp	r3, #128	; 0x80
 800226e:	d102      	bne.n	8002276 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002270:	2302      	movs	r3, #2
 8002272:	613b      	str	r3, [r7, #16]
 8002274:	e004      	b.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2b70      	cmp	r3, #112	; 0x70
 800227a:	d101      	bne.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800227c:	2301      	movs	r3, #1
 800227e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f023 0207 	bic.w	r2, r3, #7
 8002288:	4909      	ldr	r1, [pc, #36]	; (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	4313      	orrs	r3, r2
 800228e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002290:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	429a      	cmp	r2, r3
 800229c:	d001      	beq.n	80022a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40022000 	.word	0x40022000

080022b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022bc:	2300      	movs	r3, #0
 80022be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022c0:	2300      	movs	r3, #0
 80022c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d041      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022d8:	d02a      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80022da:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022de:	d824      	bhi.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022e4:	d008      	beq.n	80022f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022ea:	d81e      	bhi.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d00a      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022f4:	d010      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022f6:	e018      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022f8:	4b86      	ldr	r3, [pc, #536]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	4a85      	ldr	r2, [pc, #532]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002302:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002304:	e015      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3304      	adds	r3, #4
 800230a:	2100      	movs	r1, #0
 800230c:	4618      	mov	r0, r3
 800230e:	f000 fabb 	bl	8002888 <RCCEx_PLLSAI1_Config>
 8002312:	4603      	mov	r3, r0
 8002314:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002316:	e00c      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3320      	adds	r3, #32
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f000 fba6 	bl	8002a70 <RCCEx_PLLSAI2_Config>
 8002324:	4603      	mov	r3, r0
 8002326:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002328:	e003      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	74fb      	strb	r3, [r7, #19]
      break;
 800232e:	e000      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002332:	7cfb      	ldrb	r3, [r7, #19]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10b      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002338:	4b76      	ldr	r3, [pc, #472]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002346:	4973      	ldr	r1, [pc, #460]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800234e:	e001      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002350:	7cfb      	ldrb	r3, [r7, #19]
 8002352:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d041      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002364:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002368:	d02a      	beq.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800236a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800236e:	d824      	bhi.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002370:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002374:	d008      	beq.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002376:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800237a:	d81e      	bhi.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00a      	beq.n	8002396 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002380:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002384:	d010      	beq.n	80023a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002386:	e018      	b.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002388:	4b62      	ldr	r3, [pc, #392]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4a61      	ldr	r2, [pc, #388]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800238e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002392:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002394:	e015      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	3304      	adds	r3, #4
 800239a:	2100      	movs	r1, #0
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fa73 	bl	8002888 <RCCEx_PLLSAI1_Config>
 80023a2:	4603      	mov	r3, r0
 80023a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023a6:	e00c      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3320      	adds	r3, #32
 80023ac:	2100      	movs	r1, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	f000 fb5e 	bl	8002a70 <RCCEx_PLLSAI2_Config>
 80023b4:	4603      	mov	r3, r0
 80023b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023b8:	e003      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	74fb      	strb	r3, [r7, #19]
      break;
 80023be:	e000      	b.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80023c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023c2:	7cfb      	ldrb	r3, [r7, #19]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d10b      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023c8:	4b52      	ldr	r3, [pc, #328]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023d6:	494f      	ldr	r1, [pc, #316]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023de:	e001      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	f000 80a0 	beq.w	8002532 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f2:	2300      	movs	r3, #0
 80023f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023f6:	4b47      	ldr	r3, [pc, #284]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002406:	2300      	movs	r3, #0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d00d      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800240c:	4b41      	ldr	r3, [pc, #260]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	4a40      	ldr	r2, [pc, #256]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002412:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002416:	6593      	str	r3, [r2, #88]	; 0x58
 8002418:	4b3e      	ldr	r3, [pc, #248]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800241a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800241c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002420:	60bb      	str	r3, [r7, #8]
 8002422:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002424:	2301      	movs	r3, #1
 8002426:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002428:	4b3b      	ldr	r3, [pc, #236]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a3a      	ldr	r2, [pc, #232]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800242e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002432:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002434:	f7fe fd6c 	bl	8000f10 <HAL_GetTick>
 8002438:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800243a:	e009      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800243c:	f7fe fd68 	bl	8000f10 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d902      	bls.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	74fb      	strb	r3, [r7, #19]
        break;
 800244e:	e005      	b.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002450:	4b31      	ldr	r3, [pc, #196]	; (8002518 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002458:	2b00      	cmp	r3, #0
 800245a:	d0ef      	beq.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800245c:	7cfb      	ldrb	r3, [r7, #19]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d15c      	bne.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002462:	4b2c      	ldr	r3, [pc, #176]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002468:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800246c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d01f      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	429a      	cmp	r2, r3
 800247e:	d019      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002480:	4b24      	ldr	r3, [pc, #144]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800248a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800248c:	4b21      	ldr	r3, [pc, #132]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800248e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002492:	4a20      	ldr	r2, [pc, #128]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002498:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800249c:	4b1d      	ldr	r3, [pc, #116]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800249e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024a2:	4a1c      	ldr	r2, [pc, #112]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024ac:	4a19      	ldr	r2, [pc, #100]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d016      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024be:	f7fe fd27 	bl	8000f10 <HAL_GetTick>
 80024c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c4:	e00b      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c6:	f7fe fd23 	bl	8000f10 <HAL_GetTick>
 80024ca:	4602      	mov	r2, r0
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	1ad3      	subs	r3, r2, r3
 80024d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d902      	bls.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80024d8:	2303      	movs	r3, #3
 80024da:	74fb      	strb	r3, [r7, #19]
            break;
 80024dc:	e006      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024de:	4b0d      	ldr	r3, [pc, #52]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e4:	f003 0302 	and.w	r3, r3, #2
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0ec      	beq.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80024ec:	7cfb      	ldrb	r3, [r7, #19]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10c      	bne.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024f2:	4b08      	ldr	r3, [pc, #32]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002502:	4904      	ldr	r1, [pc, #16]	; (8002514 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800250a:	e009      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800250c:	7cfb      	ldrb	r3, [r7, #19]
 800250e:	74bb      	strb	r3, [r7, #18]
 8002510:	e006      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000
 8002518:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800251c:	7cfb      	ldrb	r3, [r7, #19]
 800251e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002520:	7c7b      	ldrb	r3, [r7, #17]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d105      	bne.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002526:	4b9e      	ldr	r3, [pc, #632]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252a:	4a9d      	ldr	r2, [pc, #628]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800252c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002530:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d00a      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800253e:	4b98      	ldr	r3, [pc, #608]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002544:	f023 0203 	bic.w	r2, r3, #3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800254c:	4994      	ldr	r1, [pc, #592]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254e:	4313      	orrs	r3, r2
 8002550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0302 	and.w	r3, r3, #2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d00a      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002560:	4b8f      	ldr	r3, [pc, #572]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002566:	f023 020c 	bic.w	r2, r3, #12
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256e:	498c      	ldr	r1, [pc, #560]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002570:	4313      	orrs	r3, r2
 8002572:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0304 	and.w	r3, r3, #4
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00a      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002582:	4b87      	ldr	r3, [pc, #540]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002588:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002590:	4983      	ldr	r1, [pc, #524]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002592:	4313      	orrs	r3, r2
 8002594:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00a      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025a4:	4b7e      	ldr	r3, [pc, #504]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	497b      	ldr	r1, [pc, #492]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b4:	4313      	orrs	r3, r2
 80025b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00a      	beq.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025c6:	4b76      	ldr	r3, [pc, #472]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d4:	4972      	ldr	r1, [pc, #456]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0320 	and.w	r3, r3, #32
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00a      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025e8:	4b6d      	ldr	r3, [pc, #436]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f6:	496a      	ldr	r1, [pc, #424]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00a      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800260a:	4b65      	ldr	r3, [pc, #404]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002610:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002618:	4961      	ldr	r1, [pc, #388]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00a      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800262c:	4b5c      	ldr	r3, [pc, #368]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002632:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800263a:	4959      	ldr	r1, [pc, #356]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800263c:	4313      	orrs	r3, r2
 800263e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800264e:	4b54      	ldr	r3, [pc, #336]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002654:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800265c:	4950      	ldr	r1, [pc, #320]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00a      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002670:	4b4b      	ldr	r3, [pc, #300]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002676:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267e:	4948      	ldr	r1, [pc, #288]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002692:	4b43      	ldr	r3, [pc, #268]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002698:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a0:	493f      	ldr	r1, [pc, #252]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d028      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026b4:	4b3a      	ldr	r3, [pc, #232]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026c2:	4937      	ldr	r1, [pc, #220]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026ce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026d2:	d106      	bne.n	80026e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026d4:	4b32      	ldr	r3, [pc, #200]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	4a31      	ldr	r2, [pc, #196]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026de:	60d3      	str	r3, [r2, #12]
 80026e0:	e011      	b.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026e6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026ea:	d10c      	bne.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3304      	adds	r3, #4
 80026f0:	2101      	movs	r1, #1
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 f8c8 	bl	8002888 <RCCEx_PLLSAI1_Config>
 80026f8:	4603      	mov	r3, r0
 80026fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026fc:	7cfb      	ldrb	r3, [r7, #19]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002702:	7cfb      	ldrb	r3, [r7, #19]
 8002704:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800270e:	2b00      	cmp	r3, #0
 8002710:	d028      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002712:	4b23      	ldr	r3, [pc, #140]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002718:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002720:	491f      	ldr	r1, [pc, #124]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800272c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002730:	d106      	bne.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002732:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	4a1a      	ldr	r2, [pc, #104]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002738:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800273c:	60d3      	str	r3, [r2, #12]
 800273e:	e011      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002744:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002748:	d10c      	bne.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	3304      	adds	r3, #4
 800274e:	2101      	movs	r1, #1
 8002750:	4618      	mov	r0, r3
 8002752:	f000 f899 	bl	8002888 <RCCEx_PLLSAI1_Config>
 8002756:	4603      	mov	r3, r0
 8002758:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800275a:	7cfb      	ldrb	r3, [r7, #19]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d001      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002760:	7cfb      	ldrb	r3, [r7, #19]
 8002762:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d02b      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002770:	4b0b      	ldr	r3, [pc, #44]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002776:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277e:	4908      	ldr	r1, [pc, #32]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002780:	4313      	orrs	r3, r2
 8002782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800278a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800278e:	d109      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002790:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4a02      	ldr	r2, [pc, #8]	; (80027a0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800279a:	60d3      	str	r3, [r2, #12]
 800279c:	e014      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800279e:	bf00      	nop
 80027a0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027ac:	d10c      	bne.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	3304      	adds	r3, #4
 80027b2:	2101      	movs	r1, #1
 80027b4:	4618      	mov	r0, r3
 80027b6:	f000 f867 	bl	8002888 <RCCEx_PLLSAI1_Config>
 80027ba:	4603      	mov	r3, r0
 80027bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027be:	7cfb      	ldrb	r3, [r7, #19]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80027c4:	7cfb      	ldrb	r3, [r7, #19]
 80027c6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d02f      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027d4:	4b2b      	ldr	r3, [pc, #172]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027da:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027e2:	4928      	ldr	r1, [pc, #160]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027f2:	d10d      	bne.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	3304      	adds	r3, #4
 80027f8:	2102      	movs	r1, #2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f844 	bl	8002888 <RCCEx_PLLSAI1_Config>
 8002800:	4603      	mov	r3, r0
 8002802:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002804:	7cfb      	ldrb	r3, [r7, #19]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d014      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800280a:	7cfb      	ldrb	r3, [r7, #19]
 800280c:	74bb      	strb	r3, [r7, #18]
 800280e:	e011      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002814:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002818:	d10c      	bne.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3320      	adds	r3, #32
 800281e:	2102      	movs	r1, #2
 8002820:	4618      	mov	r0, r3
 8002822:	f000 f925 	bl	8002a70 <RCCEx_PLLSAI2_Config>
 8002826:	4603      	mov	r3, r0
 8002828:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800282a:	7cfb      	ldrb	r3, [r7, #19]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002830:	7cfb      	ldrb	r3, [r7, #19]
 8002832:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00a      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002840:	4b10      	ldr	r3, [pc, #64]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002842:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002846:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800284e:	490d      	ldr	r1, [pc, #52]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002850:	4313      	orrs	r3, r2
 8002852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00b      	beq.n	800287a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002862:	4b08      	ldr	r3, [pc, #32]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002868:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002872:	4904      	ldr	r1, [pc, #16]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002874:	4313      	orrs	r3, r2
 8002876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800287a:	7cbb      	ldrb	r3, [r7, #18]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3718      	adds	r7, #24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	40021000 	.word	0x40021000

08002888 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002892:	2300      	movs	r3, #0
 8002894:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002896:	4b75      	ldr	r3, [pc, #468]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d018      	beq.n	80028d4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80028a2:	4b72      	ldr	r3, [pc, #456]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	f003 0203 	and.w	r2, r3, #3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d10d      	bne.n	80028ce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
       ||
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d009      	beq.n	80028ce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028ba:	4b6c      	ldr	r3, [pc, #432]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	091b      	lsrs	r3, r3, #4
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	1c5a      	adds	r2, r3, #1
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	685b      	ldr	r3, [r3, #4]
       ||
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d047      	beq.n	800295e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	73fb      	strb	r3, [r7, #15]
 80028d2:	e044      	b.n	800295e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	2b03      	cmp	r3, #3
 80028da:	d018      	beq.n	800290e <RCCEx_PLLSAI1_Config+0x86>
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d825      	bhi.n	800292c <RCCEx_PLLSAI1_Config+0xa4>
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d002      	beq.n	80028ea <RCCEx_PLLSAI1_Config+0x62>
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d009      	beq.n	80028fc <RCCEx_PLLSAI1_Config+0x74>
 80028e8:	e020      	b.n	800292c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028ea:	4b60      	ldr	r3, [pc, #384]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d11d      	bne.n	8002932 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028fa:	e01a      	b.n	8002932 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028fc:	4b5b      	ldr	r3, [pc, #364]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002904:	2b00      	cmp	r3, #0
 8002906:	d116      	bne.n	8002936 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800290c:	e013      	b.n	8002936 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800290e:	4b57      	ldr	r3, [pc, #348]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d10f      	bne.n	800293a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800291a:	4b54      	ldr	r3, [pc, #336]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d109      	bne.n	800293a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800292a:	e006      	b.n	800293a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800292c:	2301      	movs	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
      break;
 8002930:	e004      	b.n	800293c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002932:	bf00      	nop
 8002934:	e002      	b.n	800293c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002936:	bf00      	nop
 8002938:	e000      	b.n	800293c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800293a:	bf00      	nop
    }

    if(status == HAL_OK)
 800293c:	7bfb      	ldrb	r3, [r7, #15]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d10d      	bne.n	800295e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002942:	4b4a      	ldr	r3, [pc, #296]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6819      	ldr	r1, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	3b01      	subs	r3, #1
 8002954:	011b      	lsls	r3, r3, #4
 8002956:	430b      	orrs	r3, r1
 8002958:	4944      	ldr	r1, [pc, #272]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 800295a:	4313      	orrs	r3, r2
 800295c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d17d      	bne.n	8002a60 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002964:	4b41      	ldr	r3, [pc, #260]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a40      	ldr	r2, [pc, #256]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 800296a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800296e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002970:	f7fe face 	bl	8000f10 <HAL_GetTick>
 8002974:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002976:	e009      	b.n	800298c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002978:	f7fe faca 	bl	8000f10 <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b02      	cmp	r3, #2
 8002984:	d902      	bls.n	800298c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002986:	2303      	movs	r3, #3
 8002988:	73fb      	strb	r3, [r7, #15]
        break;
 800298a:	e005      	b.n	8002998 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800298c:	4b37      	ldr	r3, [pc, #220]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1ef      	bne.n	8002978 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002998:	7bfb      	ldrb	r3, [r7, #15]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d160      	bne.n	8002a60 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d111      	bne.n	80029c8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029a4:	4b31      	ldr	r3, [pc, #196]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029a6:	691b      	ldr	r3, [r3, #16]
 80029a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	6892      	ldr	r2, [r2, #8]
 80029b4:	0211      	lsls	r1, r2, #8
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	68d2      	ldr	r2, [r2, #12]
 80029ba:	0912      	lsrs	r2, r2, #4
 80029bc:	0452      	lsls	r2, r2, #17
 80029be:	430a      	orrs	r2, r1
 80029c0:	492a      	ldr	r1, [pc, #168]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c2:	4313      	orrs	r3, r2
 80029c4:	610b      	str	r3, [r1, #16]
 80029c6:	e027      	b.n	8002a18 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d112      	bne.n	80029f4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029ce:	4b27      	ldr	r3, [pc, #156]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	6892      	ldr	r2, [r2, #8]
 80029de:	0211      	lsls	r1, r2, #8
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	6912      	ldr	r2, [r2, #16]
 80029e4:	0852      	lsrs	r2, r2, #1
 80029e6:	3a01      	subs	r2, #1
 80029e8:	0552      	lsls	r2, r2, #21
 80029ea:	430a      	orrs	r2, r1
 80029ec:	491f      	ldr	r1, [pc, #124]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	610b      	str	r3, [r1, #16]
 80029f2:	e011      	b.n	8002a18 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029f4:	4b1d      	ldr	r3, [pc, #116]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	6892      	ldr	r2, [r2, #8]
 8002a04:	0211      	lsls	r1, r2, #8
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	6952      	ldr	r2, [r2, #20]
 8002a0a:	0852      	lsrs	r2, r2, #1
 8002a0c:	3a01      	subs	r2, #1
 8002a0e:	0652      	lsls	r2, r2, #25
 8002a10:	430a      	orrs	r2, r1
 8002a12:	4916      	ldr	r1, [pc, #88]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a18:	4b14      	ldr	r3, [pc, #80]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a13      	ldr	r2, [pc, #76]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a24:	f7fe fa74 	bl	8000f10 <HAL_GetTick>
 8002a28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a2a:	e009      	b.n	8002a40 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a2c:	f7fe fa70 	bl	8000f10 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d902      	bls.n	8002a40 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a3e:	e005      	b.n	8002a4c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a40:	4b0a      	ldr	r3, [pc, #40]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0ef      	beq.n	8002a2c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a4c:	7bfb      	ldrb	r3, [r7, #15]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d106      	bne.n	8002a60 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a52:	4b06      	ldr	r3, [pc, #24]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a54:	691a      	ldr	r2, [r3, #16]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	699b      	ldr	r3, [r3, #24]
 8002a5a:	4904      	ldr	r1, [pc, #16]	; (8002a6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3710      	adds	r7, #16
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	40021000 	.word	0x40021000

08002a70 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a7e:	4b6a      	ldr	r3, [pc, #424]	; (8002c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f003 0303 	and.w	r3, r3, #3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d018      	beq.n	8002abc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a8a:	4b67      	ldr	r3, [pc, #412]	; (8002c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	f003 0203 	and.w	r2, r3, #3
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	429a      	cmp	r2, r3
 8002a98:	d10d      	bne.n	8002ab6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d009      	beq.n	8002ab6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002aa2:	4b61      	ldr	r3, [pc, #388]	; (8002c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	091b      	lsrs	r3, r3, #4
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	1c5a      	adds	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	685b      	ldr	r3, [r3, #4]
       ||
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d047      	beq.n	8002b46 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	73fb      	strb	r3, [r7, #15]
 8002aba:	e044      	b.n	8002b46 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d018      	beq.n	8002af6 <RCCEx_PLLSAI2_Config+0x86>
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d825      	bhi.n	8002b14 <RCCEx_PLLSAI2_Config+0xa4>
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d002      	beq.n	8002ad2 <RCCEx_PLLSAI2_Config+0x62>
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d009      	beq.n	8002ae4 <RCCEx_PLLSAI2_Config+0x74>
 8002ad0:	e020      	b.n	8002b14 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ad2:	4b55      	ldr	r3, [pc, #340]	; (8002c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d11d      	bne.n	8002b1a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae2:	e01a      	b.n	8002b1a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ae4:	4b50      	ldr	r3, [pc, #320]	; (8002c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d116      	bne.n	8002b1e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af4:	e013      	b.n	8002b1e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002af6:	4b4c      	ldr	r3, [pc, #304]	; (8002c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10f      	bne.n	8002b22 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b02:	4b49      	ldr	r3, [pc, #292]	; (8002c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b12:	e006      	b.n	8002b22 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
      break;
 8002b18:	e004      	b.n	8002b24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b1a:	bf00      	nop
 8002b1c:	e002      	b.n	8002b24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b1e:	bf00      	nop
 8002b20:	e000      	b.n	8002b24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b22:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10d      	bne.n	8002b46 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b2a:	4b3f      	ldr	r3, [pc, #252]	; (8002c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6819      	ldr	r1, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	3b01      	subs	r3, #1
 8002b3c:	011b      	lsls	r3, r3, #4
 8002b3e:	430b      	orrs	r3, r1
 8002b40:	4939      	ldr	r1, [pc, #228]	; (8002c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b42:	4313      	orrs	r3, r2
 8002b44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d167      	bne.n	8002c1c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b4c:	4b36      	ldr	r3, [pc, #216]	; (8002c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a35      	ldr	r2, [pc, #212]	; (8002c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b58:	f7fe f9da 	bl	8000f10 <HAL_GetTick>
 8002b5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b5e:	e009      	b.n	8002b74 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b60:	f7fe f9d6 	bl	8000f10 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d902      	bls.n	8002b74 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	73fb      	strb	r3, [r7, #15]
        break;
 8002b72:	e005      	b.n	8002b80 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b74:	4b2c      	ldr	r3, [pc, #176]	; (8002c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d1ef      	bne.n	8002b60 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b80:	7bfb      	ldrb	r3, [r7, #15]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d14a      	bne.n	8002c1c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d111      	bne.n	8002bb0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b8c:	4b26      	ldr	r3, [pc, #152]	; (8002c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6892      	ldr	r2, [r2, #8]
 8002b9c:	0211      	lsls	r1, r2, #8
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	68d2      	ldr	r2, [r2, #12]
 8002ba2:	0912      	lsrs	r2, r2, #4
 8002ba4:	0452      	lsls	r2, r2, #17
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	491f      	ldr	r1, [pc, #124]	; (8002c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	614b      	str	r3, [r1, #20]
 8002bae:	e011      	b.n	8002bd4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002bb0:	4b1d      	ldr	r3, [pc, #116]	; (8002c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bb8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6892      	ldr	r2, [r2, #8]
 8002bc0:	0211      	lsls	r1, r2, #8
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6912      	ldr	r2, [r2, #16]
 8002bc6:	0852      	lsrs	r2, r2, #1
 8002bc8:	3a01      	subs	r2, #1
 8002bca:	0652      	lsls	r2, r2, #25
 8002bcc:	430a      	orrs	r2, r1
 8002bce:	4916      	ldr	r1, [pc, #88]	; (8002c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002bd4:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a13      	ldr	r2, [pc, #76]	; (8002c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bde:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be0:	f7fe f996 	bl	8000f10 <HAL_GetTick>
 8002be4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002be6:	e009      	b.n	8002bfc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002be8:	f7fe f992 	bl	8000f10 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d902      	bls.n	8002bfc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	73fb      	strb	r3, [r7, #15]
          break;
 8002bfa:	e005      	b.n	8002c08 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d0ef      	beq.n	8002be8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002c08:	7bfb      	ldrb	r3, [r7, #15]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d106      	bne.n	8002c1c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c10:	695a      	ldr	r2, [r3, #20]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	695b      	ldr	r3, [r3, #20]
 8002c16:	4904      	ldr	r1, [pc, #16]	; (8002c28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40021000 	.word	0x40021000

08002c2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b084      	sub	sp, #16
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e095      	b.n	8002d6a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d108      	bne.n	8002c58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c4e:	d009      	beq.n	8002c64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	61da      	str	r2, [r3, #28]
 8002c56:	e005      	b.n	8002c64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2200      	movs	r2, #0
 8002c68:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f7fd ff26 	bl	8000ad0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c9a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ca4:	d902      	bls.n	8002cac <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	e002      	b.n	8002cb2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002cac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cb0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002cba:	d007      	beq.n	8002ccc <HAL_SPI_Init+0xa0>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cc4:	d002      	beq.n	8002ccc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	695b      	ldr	r3, [r3, #20]
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	431a      	orrs	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cfa:	431a      	orrs	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002d04:	431a      	orrs	r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0e:	ea42 0103 	orr.w	r1, r2, r3
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	430a      	orrs	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	0c1b      	lsrs	r3, r3, #16
 8002d28:	f003 0204 	and.w	r2, r3, #4
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	431a      	orrs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d3a:	f003 0308 	and.w	r3, r3, #8
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68db      	ldr	r3, [r3, #12]
 8002d44:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002d48:	ea42 0103 	orr.w	r1, r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b088      	sub	sp, #32
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	603b      	str	r3, [r7, #0]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_SPI_Transmit+0x22>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e158      	b.n	8003046 <HAL_SPI_Transmit+0x2d4>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2201      	movs	r2, #1
 8002d98:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d9c:	f7fe f8b8 	bl	8000f10 <HAL_GetTick>
 8002da0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002da2:	88fb      	ldrh	r3, [r7, #6]
 8002da4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d002      	beq.n	8002db8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002db2:	2302      	movs	r3, #2
 8002db4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002db6:	e13d      	b.n	8003034 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d002      	beq.n	8002dc4 <HAL_SPI_Transmit+0x52>
 8002dbe:	88fb      	ldrh	r3, [r7, #6]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d102      	bne.n	8002dca <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002dc8:	e134      	b.n	8003034 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2203      	movs	r2, #3
 8002dce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	68ba      	ldr	r2, [r7, #8]
 8002ddc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	88fa      	ldrh	r2, [r7, #6]
 8002de2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	88fa      	ldrh	r2, [r7, #6]
 8002de8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2200      	movs	r2, #0
 8002dee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e14:	d10f      	bne.n	8002e36 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e40:	2b40      	cmp	r3, #64	; 0x40
 8002e42:	d007      	beq.n	8002e54 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e5c:	d94b      	bls.n	8002ef6 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d002      	beq.n	8002e6c <HAL_SPI_Transmit+0xfa>
 8002e66:	8afb      	ldrh	r3, [r7, #22]
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d13e      	bne.n	8002eea <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	881a      	ldrh	r2, [r3, #0]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7c:	1c9a      	adds	r2, r3, #2
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	b29a      	uxth	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e90:	e02b      	b.n	8002eea <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d112      	bne.n	8002ec6 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	881a      	ldrh	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb0:	1c9a      	adds	r2, r3, #2
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002ec4:	e011      	b.n	8002eea <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ec6:	f7fe f823 	bl	8000f10 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	683a      	ldr	r2, [r7, #0]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d803      	bhi.n	8002ede <HAL_SPI_Transmit+0x16c>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002edc:	d102      	bne.n	8002ee4 <HAL_SPI_Transmit+0x172>
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d102      	bne.n	8002eea <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ee8:	e0a4      	b.n	8003034 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eee:	b29b      	uxth	r3, r3
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d1ce      	bne.n	8002e92 <HAL_SPI_Transmit+0x120>
 8002ef4:	e07c      	b.n	8002ff0 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d002      	beq.n	8002f04 <HAL_SPI_Transmit+0x192>
 8002efe:	8afb      	ldrh	r3, [r7, #22]
 8002f00:	2b01      	cmp	r3, #1
 8002f02:	d170      	bne.n	8002fe6 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d912      	bls.n	8002f34 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	881a      	ldrh	r2, [r3, #0]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f1e:	1c9a      	adds	r2, r3, #2
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	3b02      	subs	r3, #2
 8002f2c:	b29a      	uxth	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f32:	e058      	b.n	8002fe6 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	330c      	adds	r3, #12
 8002f3e:	7812      	ldrb	r2, [r2, #0]
 8002f40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f46:	1c5a      	adds	r2, r3, #1
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	3b01      	subs	r3, #1
 8002f54:	b29a      	uxth	r2, r3
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002f5a:	e044      	b.n	8002fe6 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d12b      	bne.n	8002fc2 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f6e:	b29b      	uxth	r3, r3
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d912      	bls.n	8002f9a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f78:	881a      	ldrh	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	1c9a      	adds	r2, r3, #2
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3b02      	subs	r3, #2
 8002f92:	b29a      	uxth	r2, r3
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f98:	e025      	b.n	8002fe6 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	330c      	adds	r3, #12
 8002fa4:	7812      	ldrb	r2, [r2, #0]
 8002fa6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fac:	1c5a      	adds	r2, r3, #1
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fc0:	e011      	b.n	8002fe6 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fc2:	f7fd ffa5 	bl	8000f10 <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	683a      	ldr	r2, [r7, #0]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d803      	bhi.n	8002fda <HAL_SPI_Transmit+0x268>
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fd8:	d102      	bne.n	8002fe0 <HAL_SPI_Transmit+0x26e>
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d102      	bne.n	8002fe6 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fe4:	e026      	b.n	8003034 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1b5      	bne.n	8002f5c <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	6839      	ldr	r1, [r7, #0]
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f949 	bl	800328c <SPI_EndRxTxTransaction>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2220      	movs	r2, #32
 8003004:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d10a      	bne.n	8003024 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800300e:	2300      	movs	r3, #0
 8003010:	613b      	str	r3, [r7, #16]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	613b      	str	r3, [r7, #16]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	613b      	str	r3, [r7, #16]
 8003022:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003028:	2b00      	cmp	r3, #0
 800302a:	d002      	beq.n	8003032 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	77fb      	strb	r3, [r7, #31]
 8003030:	e000      	b.n	8003034 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003032:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003044:	7ffb      	ldrb	r3, [r7, #31]
}
 8003046:	4618      	mov	r0, r3
 8003048:	3720      	adds	r7, #32
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	4613      	mov	r3, r2
 800305e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003060:	f7fd ff56 	bl	8000f10 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003068:	1a9b      	subs	r3, r3, r2
 800306a:	683a      	ldr	r2, [r7, #0]
 800306c:	4413      	add	r3, r2
 800306e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003070:	f7fd ff4e 	bl	8000f10 <HAL_GetTick>
 8003074:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003076:	4b39      	ldr	r3, [pc, #228]	; (800315c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	015b      	lsls	r3, r3, #5
 800307c:	0d1b      	lsrs	r3, r3, #20
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	fb02 f303 	mul.w	r3, r2, r3
 8003084:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003086:	e054      	b.n	8003132 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800308e:	d050      	beq.n	8003132 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003090:	f7fd ff3e 	bl	8000f10 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	429a      	cmp	r2, r3
 800309e:	d902      	bls.n	80030a6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d13d      	bne.n	8003122 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80030b4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80030be:	d111      	bne.n	80030e4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80030c8:	d004      	beq.n	80030d4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d2:	d107      	bne.n	80030e4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030ec:	d10f      	bne.n	800310e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681a      	ldr	r2, [r3, #0]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800310c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2201      	movs	r2, #1
 8003112:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e017      	b.n	8003152 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003128:	2300      	movs	r3, #0
 800312a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	3b01      	subs	r3, #1
 8003130:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	689a      	ldr	r2, [r3, #8]
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4013      	ands	r3, r2
 800313c:	68ba      	ldr	r2, [r7, #8]
 800313e:	429a      	cmp	r2, r3
 8003140:	bf0c      	ite	eq
 8003142:	2301      	moveq	r3, #1
 8003144:	2300      	movne	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	461a      	mov	r2, r3
 800314a:	79fb      	ldrb	r3, [r7, #7]
 800314c:	429a      	cmp	r2, r3
 800314e:	d19b      	bne.n	8003088 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3720      	adds	r7, #32
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	20000018 	.word	0x20000018

08003160 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b08a      	sub	sp, #40	; 0x28
 8003164:	af00      	add	r7, sp, #0
 8003166:	60f8      	str	r0, [r7, #12]
 8003168:	60b9      	str	r1, [r7, #8]
 800316a:	607a      	str	r2, [r7, #4]
 800316c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800316e:	2300      	movs	r3, #0
 8003170:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003172:	f7fd fecd 	bl	8000f10 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317a:	1a9b      	subs	r3, r3, r2
 800317c:	683a      	ldr	r2, [r7, #0]
 800317e:	4413      	add	r3, r2
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003182:	f7fd fec5 	bl	8000f10 <HAL_GetTick>
 8003186:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	330c      	adds	r3, #12
 800318e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003190:	4b3d      	ldr	r3, [pc, #244]	; (8003288 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	00da      	lsls	r2, r3, #3
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	0d1b      	lsrs	r3, r3, #20
 80031a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a2:	fb02 f303 	mul.w	r3, r2, r3
 80031a6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80031a8:	e060      	b.n	800326c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80031b0:	d107      	bne.n	80031c2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d104      	bne.n	80031c2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80031b8:	69fb      	ldr	r3, [r7, #28]
 80031ba:	781b      	ldrb	r3, [r3, #0]
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80031c0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c8:	d050      	beq.n	800326c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031ca:	f7fd fea1 	bl	8000f10 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d902      	bls.n	80031e0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80031da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d13d      	bne.n	800325c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80031ee:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031f8:	d111      	bne.n	800321e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003202:	d004      	beq.n	800320e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320c:	d107      	bne.n	800321e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800321c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003222:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003226:	d10f      	bne.n	8003248 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	681a      	ldr	r2, [r3, #0]
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003246:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003258:	2303      	movs	r3, #3
 800325a:	e010      	b.n	800327e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	3b01      	subs	r3, #1
 800326a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	4013      	ands	r3, r2
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	429a      	cmp	r2, r3
 800327a:	d196      	bne.n	80031aa <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3728      	adds	r7, #40	; 0x28
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	20000018 	.word	0x20000018

0800328c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b086      	sub	sp, #24
 8003290:	af02      	add	r7, sp, #8
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	9300      	str	r3, [sp, #0]
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2200      	movs	r2, #0
 80032a0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80032a4:	68f8      	ldr	r0, [r7, #12]
 80032a6:	f7ff ff5b 	bl	8003160 <SPI_WaitFifoStateUntilTimeout>
 80032aa:	4603      	mov	r3, r0
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d007      	beq.n	80032c0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b4:	f043 0220 	orr.w	r2, r3, #32
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e027      	b.n	8003310 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	2200      	movs	r2, #0
 80032c8:	2180      	movs	r1, #128	; 0x80
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f7ff fec0 	bl	8003050 <SPI_WaitFlagStateUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032da:	f043 0220 	orr.w	r2, r3, #32
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e014      	b.n	8003310 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	9300      	str	r3, [sp, #0]
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f7ff ff34 	bl	8003160 <SPI_WaitFifoStateUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d007      	beq.n	800330e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003302:	f043 0220 	orr.w	r2, r3, #32
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e000      	b.n	8003310 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3710      	adds	r7, #16
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b082      	sub	sp, #8
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e040      	b.n	80033ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800332e:	2b00      	cmp	r3, #0
 8003330:	d106      	bne.n	8003340 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f7fd fcc4 	bl	8000cc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2224      	movs	r2, #36	; 0x24
 8003344:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 0201 	bic.w	r2, r2, #1
 8003354:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003356:	6878      	ldr	r0, [r7, #4]
 8003358:	f000 fbe8 	bl	8003b2c <UART_SetConfig>
 800335c:	4603      	mov	r3, r0
 800335e:	2b01      	cmp	r3, #1
 8003360:	d101      	bne.n	8003366 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e022      	b.n	80033ac <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336a:	2b00      	cmp	r3, #0
 800336c:	d002      	beq.n	8003374 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f000 fe66 	bl	8004040 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003382:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003392:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0201 	orr.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f000 feed 	bl	8004184 <UART_CheckIdleState>
 80033aa:	4603      	mov	r3, r0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}

080033b4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80033b4:	b480      	push	{r7}
 80033b6:	b08b      	sub	sp, #44	; 0x2c
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	4613      	mov	r3, r2
 80033c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	d156      	bne.n	8003478 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80033ca:	68bb      	ldr	r3, [r7, #8]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d002      	beq.n	80033d6 <HAL_UART_Transmit_IT+0x22>
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e04f      	b.n	800347a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d101      	bne.n	80033e8 <HAL_UART_Transmit_IT+0x34>
 80033e4:	2302      	movs	r3, #2
 80033e6:	e048      	b.n	800347a <HAL_UART_Transmit_IT+0xc6>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	88fa      	ldrh	r2, [r7, #6]
 80033fa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	88fa      	ldrh	r2, [r7, #6]
 8003402:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2221      	movs	r2, #33	; 0x21
 8003418:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003422:	d107      	bne.n	8003434 <HAL_UART_Transmit_IT+0x80>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	691b      	ldr	r3, [r3, #16]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d103      	bne.n	8003434 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4a16      	ldr	r2, [pc, #88]	; (8003488 <HAL_UART_Transmit_IT+0xd4>)
 8003430:	669a      	str	r2, [r3, #104]	; 0x68
 8003432:	e002      	b.n	800343a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	4a15      	ldr	r2, [pc, #84]	; (800348c <HAL_UART_Transmit_IT+0xd8>)
 8003438:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	e853 3f00 	ldrex	r3, [r3]
 800344e:	613b      	str	r3, [r7, #16]
   return(result);
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003456:	627b      	str	r3, [r7, #36]	; 0x24
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	461a      	mov	r2, r3
 800345e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003460:	623b      	str	r3, [r7, #32]
 8003462:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003464:	69f9      	ldr	r1, [r7, #28]
 8003466:	6a3a      	ldr	r2, [r7, #32]
 8003468:	e841 2300 	strex	r3, r2, [r1]
 800346c:	61bb      	str	r3, [r7, #24]
   return(result);
 800346e:	69bb      	ldr	r3, [r7, #24]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d1e6      	bne.n	8003442 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	e000      	b.n	800347a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8003478:	2302      	movs	r3, #2
  }
}
 800347a:	4618      	mov	r0, r3
 800347c:	372c      	adds	r7, #44	; 0x2c
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr
 8003486:	bf00      	nop
 8003488:	080046df 	.word	0x080046df
 800348c:	08004627 	.word	0x08004627

08003490 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b08a      	sub	sp, #40	; 0x28
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	4613      	mov	r3, r2
 800349c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d142      	bne.n	800352c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d002      	beq.n	80034b2 <HAL_UART_Receive_IT+0x22>
 80034ac:	88fb      	ldrh	r3, [r7, #6]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e03b      	b.n	800352e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d101      	bne.n	80034c4 <HAL_UART_Receive_IT+0x34>
 80034c0:	2302      	movs	r3, #2
 80034c2:	e034      	b.n	800352e <HAL_UART_Receive_IT+0x9e>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2201      	movs	r2, #1
 80034c8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a18      	ldr	r2, [pc, #96]	; (8003538 <HAL_UART_Receive_IT+0xa8>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d01f      	beq.n	800351c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d018      	beq.n	800351c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	e853 3f00 	ldrex	r3, [r3]
 80034f6:	613b      	str	r3, [r7, #16]
   return(result);
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	461a      	mov	r2, r3
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	623b      	str	r3, [r7, #32]
 800350a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350c:	69f9      	ldr	r1, [r7, #28]
 800350e:	6a3a      	ldr	r2, [r7, #32]
 8003510:	e841 2300 	strex	r3, r2, [r1]
 8003514:	61bb      	str	r3, [r7, #24]
   return(result);
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d1e6      	bne.n	80034ea <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800351c:	88fb      	ldrh	r3, [r7, #6]
 800351e:	461a      	mov	r2, r3
 8003520:	68b9      	ldr	r1, [r7, #8]
 8003522:	68f8      	ldr	r0, [r7, #12]
 8003524:	f000 ff3c 	bl	80043a0 <UART_Start_Receive_IT>
 8003528:	4603      	mov	r3, r0
 800352a:	e000      	b.n	800352e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800352c:	2302      	movs	r3, #2
  }
}
 800352e:	4618      	mov	r0, r3
 8003530:	3728      	adds	r7, #40	; 0x28
 8003532:	46bd      	mov	sp, r7
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40008000 	.word	0x40008000

0800353c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b0ba      	sub	sp, #232	; 0xe8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	69db      	ldr	r3, [r3, #28]
 800354a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003562:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003566:	f640 030f 	movw	r3, #2063	; 0x80f
 800356a:	4013      	ands	r3, r2
 800356c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003570:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d115      	bne.n	80035a4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800357c:	f003 0320 	and.w	r3, r3, #32
 8003580:	2b00      	cmp	r3, #0
 8003582:	d00f      	beq.n	80035a4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003588:	f003 0320 	and.w	r3, r3, #32
 800358c:	2b00      	cmp	r3, #0
 800358e:	d009      	beq.n	80035a4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 82a6 	beq.w	8003ae6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	4798      	blx	r3
      }
      return;
 80035a2:	e2a0      	b.n	8003ae6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80035a4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8117 	beq.w	80037dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80035ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d106      	bne.n	80035c8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80035ba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80035be:	4b85      	ldr	r3, [pc, #532]	; (80037d4 <HAL_UART_IRQHandler+0x298>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	f000 810a 	beq.w	80037dc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d011      	beq.n	80035f8 <HAL_UART_IRQHandler+0xbc>
 80035d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d00b      	beq.n	80035f8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2201      	movs	r2, #1
 80035e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035ee:	f043 0201 	orr.w	r2, r3, #1
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d011      	beq.n	8003628 <HAL_UART_IRQHandler+0xec>
 8003604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d00b      	beq.n	8003628 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	2202      	movs	r2, #2
 8003616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800361e:	f043 0204 	orr.w	r2, r3, #4
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d011      	beq.n	8003658 <HAL_UART_IRQHandler+0x11c>
 8003634:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00b      	beq.n	8003658 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2204      	movs	r2, #4
 8003646:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800364e:	f043 0202 	orr.w	r2, r3, #2
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003658:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365c:	f003 0308 	and.w	r3, r3, #8
 8003660:	2b00      	cmp	r3, #0
 8003662:	d017      	beq.n	8003694 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003664:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003668:	f003 0320 	and.w	r3, r3, #32
 800366c:	2b00      	cmp	r3, #0
 800366e:	d105      	bne.n	800367c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003670:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003674:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003678:	2b00      	cmp	r3, #0
 800367a:	d00b      	beq.n	8003694 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2208      	movs	r2, #8
 8003682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800368a:	f043 0208 	orr.w	r2, r3, #8
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003694:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800369c:	2b00      	cmp	r3, #0
 800369e:	d012      	beq.n	80036c6 <HAL_UART_IRQHandler+0x18a>
 80036a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00c      	beq.n	80036c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036bc:	f043 0220 	orr.w	r2, r3, #32
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	f000 820c 	beq.w	8003aea <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80036d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d6:	f003 0320 	and.w	r3, r3, #32
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00d      	beq.n	80036fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80036de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036e2:	f003 0320 	and.w	r3, r3, #32
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d007      	beq.n	80036fa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d003      	beq.n	80036fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003700:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800370e:	2b40      	cmp	r3, #64	; 0x40
 8003710:	d005      	beq.n	800371e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003712:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003716:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800371a:	2b00      	cmp	r3, #0
 800371c:	d04f      	beq.n	80037be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 ff08 	bl	8004534 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800372e:	2b40      	cmp	r3, #64	; 0x40
 8003730:	d141      	bne.n	80037b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	3308      	adds	r3, #8
 8003738:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800373c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003740:	e853 3f00 	ldrex	r3, [r3]
 8003744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003748:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800374c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003750:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	3308      	adds	r3, #8
 800375a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800375e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003762:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003766:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800376a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800376e:	e841 2300 	strex	r3, r2, [r1]
 8003772:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003776:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1d9      	bne.n	8003732 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003782:	2b00      	cmp	r3, #0
 8003784:	d013      	beq.n	80037ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378a:	4a13      	ldr	r2, [pc, #76]	; (80037d8 <HAL_UART_IRQHandler+0x29c>)
 800378c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003792:	4618      	mov	r0, r3
 8003794:	f7fd fd3b 	bl	800120e <HAL_DMA_Abort_IT>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d017      	beq.n	80037ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80037a8:	4610      	mov	r0, r2
 80037aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ac:	e00f      	b.n	80037ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f9a6 	bl	8003b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b4:	e00b      	b.n	80037ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f9a2 	bl	8003b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037bc:	e007      	b.n	80037ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f99e 	bl	8003b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80037cc:	e18d      	b.n	8003aea <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ce:	bf00      	nop
    return;
 80037d0:	e18b      	b.n	8003aea <HAL_UART_IRQHandler+0x5ae>
 80037d2:	bf00      	nop
 80037d4:	04000120 	.word	0x04000120
 80037d8:	080045fb 	.word	0x080045fb

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	f040 8146 	bne.w	8003a72 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80037e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ea:	f003 0310 	and.w	r3, r3, #16
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	f000 813f 	beq.w	8003a72 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80037f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037f8:	f003 0310 	and.w	r3, r3, #16
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8138 	beq.w	8003a72 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2210      	movs	r2, #16
 8003808:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003814:	2b40      	cmp	r3, #64	; 0x40
 8003816:	f040 80b4 	bne.w	8003982 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003826:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 815f 	beq.w	8003aee <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003836:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800383a:	429a      	cmp	r2, r3
 800383c:	f080 8157 	bcs.w	8003aee <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003846:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0320 	and.w	r3, r3, #32
 8003856:	2b00      	cmp	r3, #0
 8003858:	f040 8085 	bne.w	8003966 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003864:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003868:	e853 3f00 	ldrex	r3, [r3]
 800386c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003870:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003878:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	461a      	mov	r2, r3
 8003882:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003886:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800388a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800388e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003892:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003896:	e841 2300 	strex	r3, r2, [r1]
 800389a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800389e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d1da      	bne.n	800385c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3308      	adds	r3, #8
 80038ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038b0:	e853 3f00 	ldrex	r3, [r3]
 80038b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80038b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038b8:	f023 0301 	bic.w	r3, r3, #1
 80038bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	3308      	adds	r3, #8
 80038c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038d6:	e841 2300 	strex	r3, r2, [r1]
 80038da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1e1      	bne.n	80038a6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	3308      	adds	r3, #8
 80038e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038ec:	e853 3f00 	ldrex	r3, [r3]
 80038f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3308      	adds	r3, #8
 8003902:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003906:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003908:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800390a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800390c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800390e:	e841 2300 	strex	r3, r2, [r1]
 8003912:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003916:	2b00      	cmp	r3, #0
 8003918:	d1e3      	bne.n	80038e2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2220      	movs	r2, #32
 800391e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003936:	f023 0310 	bic.w	r3, r3, #16
 800393a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	461a      	mov	r2, r3
 8003944:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003948:	65bb      	str	r3, [r7, #88]	; 0x58
 800394a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800394c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800394e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003950:	e841 2300 	strex	r3, r2, [r1]
 8003954:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e4      	bne.n	8003926 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003960:	4618      	mov	r0, r3
 8003962:	f7fd fc16 	bl	8001192 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003972:	b29b      	uxth	r3, r3
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	b29b      	uxth	r3, r3
 8003978:	4619      	mov	r1, r3
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f8ca 	bl	8003b14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003980:	e0b5      	b.n	8003aee <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800398e:	b29b      	uxth	r3, r3
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800399c:	b29b      	uxth	r3, r3
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 80a7 	beq.w	8003af2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80039a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 80a2 	beq.w	8003af2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039b6:	e853 3f00 	ldrex	r3, [r3]
 80039ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	461a      	mov	r2, r3
 80039cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80039d0:	647b      	str	r3, [r7, #68]	; 0x44
 80039d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039d8:	e841 2300 	strex	r3, r2, [r1]
 80039dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d1e4      	bne.n	80039ae <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	3308      	adds	r3, #8
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ee:	e853 3f00 	ldrex	r3, [r3]
 80039f2:	623b      	str	r3, [r7, #32]
   return(result);
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	f023 0301 	bic.w	r3, r3, #1
 80039fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	3308      	adds	r3, #8
 8003a04:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003a08:	633a      	str	r2, [r7, #48]	; 0x30
 8003a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003a10:	e841 2300 	strex	r3, r2, [r1]
 8003a14:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d1e3      	bne.n	80039e4 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	e853 3f00 	ldrex	r3, [r3]
 8003a3a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f023 0310 	bic.w	r3, r3, #16
 8003a42:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	461a      	mov	r2, r3
 8003a4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a50:	61fb      	str	r3, [r7, #28]
 8003a52:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a54:	69b9      	ldr	r1, [r7, #24]
 8003a56:	69fa      	ldr	r2, [r7, #28]
 8003a58:	e841 2300 	strex	r3, r2, [r1]
 8003a5c:	617b      	str	r3, [r7, #20]
   return(result);
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1e4      	bne.n	8003a2e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a68:	4619      	mov	r1, r3
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 f852 	bl	8003b14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a70:	e03f      	b.n	8003af2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00e      	beq.n	8003a9c <HAL_UART_IRQHandler+0x560>
 8003a7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d008      	beq.n	8003a9c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a92:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f001 f80c 	bl	8004ab2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a9a:	e02d      	b.n	8003af8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d00e      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d008      	beq.n	8003ac6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d01c      	beq.n	8003af6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	4798      	blx	r3
    }
    return;
 8003ac4:	e017      	b.n	8003af6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d012      	beq.n	8003af8 <HAL_UART_IRQHandler+0x5bc>
 8003ad2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d00c      	beq.n	8003af8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 fe5d 	bl	800479e <UART_EndTransmit_IT>
    return;
 8003ae4:	e008      	b.n	8003af8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003ae6:	bf00      	nop
 8003ae8:	e006      	b.n	8003af8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003aea:	bf00      	nop
 8003aec:	e004      	b.n	8003af8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003aee:	bf00      	nop
 8003af0:	e002      	b.n	8003af8 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003af2:	bf00      	nop
 8003af4:	e000      	b.n	8003af8 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003af6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003af8:	37e8      	adds	r7, #232	; 0xe8
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop

08003b00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b083      	sub	sp, #12
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b08:	bf00      	nop
 8003b0a:	370c      	adds	r7, #12
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b2c:	b5b0      	push	{r4, r5, r7, lr}
 8003b2e:	b088      	sub	sp, #32
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b34:	2300      	movs	r3, #0
 8003b36:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	689a      	ldr	r2, [r3, #8]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	431a      	orrs	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	695b      	ldr	r3, [r3, #20]
 8003b46:	431a      	orrs	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	4bad      	ldr	r3, [pc, #692]	; (8003e0c <UART_SetConfig+0x2e0>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6812      	ldr	r2, [r2, #0]
 8003b5e:	69f9      	ldr	r1, [r7, #28]
 8003b60:	430b      	orrs	r3, r1
 8003b62:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68da      	ldr	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4aa2      	ldr	r2, [pc, #648]	; (8003e10 <UART_SetConfig+0x2e4>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d004      	beq.n	8003b94 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6a1b      	ldr	r3, [r3, #32]
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69fa      	ldr	r2, [r7, #28]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a99      	ldr	r2, [pc, #612]	; (8003e14 <UART_SetConfig+0x2e8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d121      	bne.n	8003bf6 <UART_SetConfig+0xca>
 8003bb2:	4b99      	ldr	r3, [pc, #612]	; (8003e18 <UART_SetConfig+0x2ec>)
 8003bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d817      	bhi.n	8003bf0 <UART_SetConfig+0xc4>
 8003bc0:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <UART_SetConfig+0x9c>)
 8003bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc6:	bf00      	nop
 8003bc8:	08003bd9 	.word	0x08003bd9
 8003bcc:	08003be5 	.word	0x08003be5
 8003bd0:	08003bdf 	.word	0x08003bdf
 8003bd4:	08003beb 	.word	0x08003beb
 8003bd8:	2301      	movs	r3, #1
 8003bda:	76fb      	strb	r3, [r7, #27]
 8003bdc:	e0e7      	b.n	8003dae <UART_SetConfig+0x282>
 8003bde:	2302      	movs	r3, #2
 8003be0:	76fb      	strb	r3, [r7, #27]
 8003be2:	e0e4      	b.n	8003dae <UART_SetConfig+0x282>
 8003be4:	2304      	movs	r3, #4
 8003be6:	76fb      	strb	r3, [r7, #27]
 8003be8:	e0e1      	b.n	8003dae <UART_SetConfig+0x282>
 8003bea:	2308      	movs	r3, #8
 8003bec:	76fb      	strb	r3, [r7, #27]
 8003bee:	e0de      	b.n	8003dae <UART_SetConfig+0x282>
 8003bf0:	2310      	movs	r3, #16
 8003bf2:	76fb      	strb	r3, [r7, #27]
 8003bf4:	e0db      	b.n	8003dae <UART_SetConfig+0x282>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a88      	ldr	r2, [pc, #544]	; (8003e1c <UART_SetConfig+0x2f0>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d132      	bne.n	8003c66 <UART_SetConfig+0x13a>
 8003c00:	4b85      	ldr	r3, [pc, #532]	; (8003e18 <UART_SetConfig+0x2ec>)
 8003c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c06:	f003 030c 	and.w	r3, r3, #12
 8003c0a:	2b0c      	cmp	r3, #12
 8003c0c:	d828      	bhi.n	8003c60 <UART_SetConfig+0x134>
 8003c0e:	a201      	add	r2, pc, #4	; (adr r2, 8003c14 <UART_SetConfig+0xe8>)
 8003c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c14:	08003c49 	.word	0x08003c49
 8003c18:	08003c61 	.word	0x08003c61
 8003c1c:	08003c61 	.word	0x08003c61
 8003c20:	08003c61 	.word	0x08003c61
 8003c24:	08003c55 	.word	0x08003c55
 8003c28:	08003c61 	.word	0x08003c61
 8003c2c:	08003c61 	.word	0x08003c61
 8003c30:	08003c61 	.word	0x08003c61
 8003c34:	08003c4f 	.word	0x08003c4f
 8003c38:	08003c61 	.word	0x08003c61
 8003c3c:	08003c61 	.word	0x08003c61
 8003c40:	08003c61 	.word	0x08003c61
 8003c44:	08003c5b 	.word	0x08003c5b
 8003c48:	2300      	movs	r3, #0
 8003c4a:	76fb      	strb	r3, [r7, #27]
 8003c4c:	e0af      	b.n	8003dae <UART_SetConfig+0x282>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	76fb      	strb	r3, [r7, #27]
 8003c52:	e0ac      	b.n	8003dae <UART_SetConfig+0x282>
 8003c54:	2304      	movs	r3, #4
 8003c56:	76fb      	strb	r3, [r7, #27]
 8003c58:	e0a9      	b.n	8003dae <UART_SetConfig+0x282>
 8003c5a:	2308      	movs	r3, #8
 8003c5c:	76fb      	strb	r3, [r7, #27]
 8003c5e:	e0a6      	b.n	8003dae <UART_SetConfig+0x282>
 8003c60:	2310      	movs	r3, #16
 8003c62:	76fb      	strb	r3, [r7, #27]
 8003c64:	e0a3      	b.n	8003dae <UART_SetConfig+0x282>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a6d      	ldr	r2, [pc, #436]	; (8003e20 <UART_SetConfig+0x2f4>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d120      	bne.n	8003cb2 <UART_SetConfig+0x186>
 8003c70:	4b69      	ldr	r3, [pc, #420]	; (8003e18 <UART_SetConfig+0x2ec>)
 8003c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c76:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c7a:	2b30      	cmp	r3, #48	; 0x30
 8003c7c:	d013      	beq.n	8003ca6 <UART_SetConfig+0x17a>
 8003c7e:	2b30      	cmp	r3, #48	; 0x30
 8003c80:	d814      	bhi.n	8003cac <UART_SetConfig+0x180>
 8003c82:	2b20      	cmp	r3, #32
 8003c84:	d009      	beq.n	8003c9a <UART_SetConfig+0x16e>
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	d810      	bhi.n	8003cac <UART_SetConfig+0x180>
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <UART_SetConfig+0x168>
 8003c8e:	2b10      	cmp	r3, #16
 8003c90:	d006      	beq.n	8003ca0 <UART_SetConfig+0x174>
 8003c92:	e00b      	b.n	8003cac <UART_SetConfig+0x180>
 8003c94:	2300      	movs	r3, #0
 8003c96:	76fb      	strb	r3, [r7, #27]
 8003c98:	e089      	b.n	8003dae <UART_SetConfig+0x282>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	76fb      	strb	r3, [r7, #27]
 8003c9e:	e086      	b.n	8003dae <UART_SetConfig+0x282>
 8003ca0:	2304      	movs	r3, #4
 8003ca2:	76fb      	strb	r3, [r7, #27]
 8003ca4:	e083      	b.n	8003dae <UART_SetConfig+0x282>
 8003ca6:	2308      	movs	r3, #8
 8003ca8:	76fb      	strb	r3, [r7, #27]
 8003caa:	e080      	b.n	8003dae <UART_SetConfig+0x282>
 8003cac:	2310      	movs	r3, #16
 8003cae:	76fb      	strb	r3, [r7, #27]
 8003cb0:	e07d      	b.n	8003dae <UART_SetConfig+0x282>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a5b      	ldr	r2, [pc, #364]	; (8003e24 <UART_SetConfig+0x2f8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d120      	bne.n	8003cfe <UART_SetConfig+0x1d2>
 8003cbc:	4b56      	ldr	r3, [pc, #344]	; (8003e18 <UART_SetConfig+0x2ec>)
 8003cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003cc6:	2bc0      	cmp	r3, #192	; 0xc0
 8003cc8:	d013      	beq.n	8003cf2 <UART_SetConfig+0x1c6>
 8003cca:	2bc0      	cmp	r3, #192	; 0xc0
 8003ccc:	d814      	bhi.n	8003cf8 <UART_SetConfig+0x1cc>
 8003cce:	2b80      	cmp	r3, #128	; 0x80
 8003cd0:	d009      	beq.n	8003ce6 <UART_SetConfig+0x1ba>
 8003cd2:	2b80      	cmp	r3, #128	; 0x80
 8003cd4:	d810      	bhi.n	8003cf8 <UART_SetConfig+0x1cc>
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d002      	beq.n	8003ce0 <UART_SetConfig+0x1b4>
 8003cda:	2b40      	cmp	r3, #64	; 0x40
 8003cdc:	d006      	beq.n	8003cec <UART_SetConfig+0x1c0>
 8003cde:	e00b      	b.n	8003cf8 <UART_SetConfig+0x1cc>
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	76fb      	strb	r3, [r7, #27]
 8003ce4:	e063      	b.n	8003dae <UART_SetConfig+0x282>
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	76fb      	strb	r3, [r7, #27]
 8003cea:	e060      	b.n	8003dae <UART_SetConfig+0x282>
 8003cec:	2304      	movs	r3, #4
 8003cee:	76fb      	strb	r3, [r7, #27]
 8003cf0:	e05d      	b.n	8003dae <UART_SetConfig+0x282>
 8003cf2:	2308      	movs	r3, #8
 8003cf4:	76fb      	strb	r3, [r7, #27]
 8003cf6:	e05a      	b.n	8003dae <UART_SetConfig+0x282>
 8003cf8:	2310      	movs	r3, #16
 8003cfa:	76fb      	strb	r3, [r7, #27]
 8003cfc:	e057      	b.n	8003dae <UART_SetConfig+0x282>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a49      	ldr	r2, [pc, #292]	; (8003e28 <UART_SetConfig+0x2fc>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d125      	bne.n	8003d54 <UART_SetConfig+0x228>
 8003d08:	4b43      	ldr	r3, [pc, #268]	; (8003e18 <UART_SetConfig+0x2ec>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d16:	d017      	beq.n	8003d48 <UART_SetConfig+0x21c>
 8003d18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d1c:	d817      	bhi.n	8003d4e <UART_SetConfig+0x222>
 8003d1e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d22:	d00b      	beq.n	8003d3c <UART_SetConfig+0x210>
 8003d24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d28:	d811      	bhi.n	8003d4e <UART_SetConfig+0x222>
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d003      	beq.n	8003d36 <UART_SetConfig+0x20a>
 8003d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d32:	d006      	beq.n	8003d42 <UART_SetConfig+0x216>
 8003d34:	e00b      	b.n	8003d4e <UART_SetConfig+0x222>
 8003d36:	2300      	movs	r3, #0
 8003d38:	76fb      	strb	r3, [r7, #27]
 8003d3a:	e038      	b.n	8003dae <UART_SetConfig+0x282>
 8003d3c:	2302      	movs	r3, #2
 8003d3e:	76fb      	strb	r3, [r7, #27]
 8003d40:	e035      	b.n	8003dae <UART_SetConfig+0x282>
 8003d42:	2304      	movs	r3, #4
 8003d44:	76fb      	strb	r3, [r7, #27]
 8003d46:	e032      	b.n	8003dae <UART_SetConfig+0x282>
 8003d48:	2308      	movs	r3, #8
 8003d4a:	76fb      	strb	r3, [r7, #27]
 8003d4c:	e02f      	b.n	8003dae <UART_SetConfig+0x282>
 8003d4e:	2310      	movs	r3, #16
 8003d50:	76fb      	strb	r3, [r7, #27]
 8003d52:	e02c      	b.n	8003dae <UART_SetConfig+0x282>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a2d      	ldr	r2, [pc, #180]	; (8003e10 <UART_SetConfig+0x2e4>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d125      	bne.n	8003daa <UART_SetConfig+0x27e>
 8003d5e:	4b2e      	ldr	r3, [pc, #184]	; (8003e18 <UART_SetConfig+0x2ec>)
 8003d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d64:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003d68:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d6c:	d017      	beq.n	8003d9e <UART_SetConfig+0x272>
 8003d6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d72:	d817      	bhi.n	8003da4 <UART_SetConfig+0x278>
 8003d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d78:	d00b      	beq.n	8003d92 <UART_SetConfig+0x266>
 8003d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7e:	d811      	bhi.n	8003da4 <UART_SetConfig+0x278>
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d003      	beq.n	8003d8c <UART_SetConfig+0x260>
 8003d84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d88:	d006      	beq.n	8003d98 <UART_SetConfig+0x26c>
 8003d8a:	e00b      	b.n	8003da4 <UART_SetConfig+0x278>
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	76fb      	strb	r3, [r7, #27]
 8003d90:	e00d      	b.n	8003dae <UART_SetConfig+0x282>
 8003d92:	2302      	movs	r3, #2
 8003d94:	76fb      	strb	r3, [r7, #27]
 8003d96:	e00a      	b.n	8003dae <UART_SetConfig+0x282>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	76fb      	strb	r3, [r7, #27]
 8003d9c:	e007      	b.n	8003dae <UART_SetConfig+0x282>
 8003d9e:	2308      	movs	r3, #8
 8003da0:	76fb      	strb	r3, [r7, #27]
 8003da2:	e004      	b.n	8003dae <UART_SetConfig+0x282>
 8003da4:	2310      	movs	r3, #16
 8003da6:	76fb      	strb	r3, [r7, #27]
 8003da8:	e001      	b.n	8003dae <UART_SetConfig+0x282>
 8003daa:	2310      	movs	r3, #16
 8003dac:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a17      	ldr	r2, [pc, #92]	; (8003e10 <UART_SetConfig+0x2e4>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	f040 8087 	bne.w	8003ec8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003dba:	7efb      	ldrb	r3, [r7, #27]
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d837      	bhi.n	8003e30 <UART_SetConfig+0x304>
 8003dc0:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <UART_SetConfig+0x29c>)
 8003dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc6:	bf00      	nop
 8003dc8:	08003ded 	.word	0x08003ded
 8003dcc:	08003e31 	.word	0x08003e31
 8003dd0:	08003df5 	.word	0x08003df5
 8003dd4:	08003e31 	.word	0x08003e31
 8003dd8:	08003dfb 	.word	0x08003dfb
 8003ddc:	08003e31 	.word	0x08003e31
 8003de0:	08003e31 	.word	0x08003e31
 8003de4:	08003e31 	.word	0x08003e31
 8003de8:	08003e03 	.word	0x08003e03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dec:	f7fe f9d6 	bl	800219c <HAL_RCC_GetPCLK1Freq>
 8003df0:	6178      	str	r0, [r7, #20]
        break;
 8003df2:	e022      	b.n	8003e3a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003df4:	4b0d      	ldr	r3, [pc, #52]	; (8003e2c <UART_SetConfig+0x300>)
 8003df6:	617b      	str	r3, [r7, #20]
        break;
 8003df8:	e01f      	b.n	8003e3a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dfa:	f7fe f937 	bl	800206c <HAL_RCC_GetSysClockFreq>
 8003dfe:	6178      	str	r0, [r7, #20]
        break;
 8003e00:	e01b      	b.n	8003e3a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e06:	617b      	str	r3, [r7, #20]
        break;
 8003e08:	e017      	b.n	8003e3a <UART_SetConfig+0x30e>
 8003e0a:	bf00      	nop
 8003e0c:	efff69f3 	.word	0xefff69f3
 8003e10:	40008000 	.word	0x40008000
 8003e14:	40013800 	.word	0x40013800
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	40004400 	.word	0x40004400
 8003e20:	40004800 	.word	0x40004800
 8003e24:	40004c00 	.word	0x40004c00
 8003e28:	40005000 	.word	0x40005000
 8003e2c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	76bb      	strb	r3, [r7, #26]
        break;
 8003e38:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 80f1 	beq.w	8004024 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685a      	ldr	r2, [r3, #4]
 8003e46:	4613      	mov	r3, r2
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	4413      	add	r3, r2
 8003e4c:	697a      	ldr	r2, [r7, #20]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d305      	bcc.n	8003e5e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d902      	bls.n	8003e64 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	76bb      	strb	r3, [r7, #26]
 8003e62:	e0df      	b.n	8004024 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	4618      	mov	r0, r3
 8003e68:	f04f 0100 	mov.w	r1, #0
 8003e6c:	f04f 0200 	mov.w	r2, #0
 8003e70:	f04f 0300 	mov.w	r3, #0
 8003e74:	020b      	lsls	r3, r1, #8
 8003e76:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003e7a:	0202      	lsls	r2, r0, #8
 8003e7c:	6879      	ldr	r1, [r7, #4]
 8003e7e:	6849      	ldr	r1, [r1, #4]
 8003e80:	0849      	lsrs	r1, r1, #1
 8003e82:	4608      	mov	r0, r1
 8003e84:	f04f 0100 	mov.w	r1, #0
 8003e88:	1814      	adds	r4, r2, r0
 8003e8a:	eb43 0501 	adc.w	r5, r3, r1
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	461a      	mov	r2, r3
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	4620      	mov	r0, r4
 8003e9a:	4629      	mov	r1, r5
 8003e9c:	f7fc f994 	bl	80001c8 <__aeabi_uldivmod>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eae:	d308      	bcc.n	8003ec2 <UART_SetConfig+0x396>
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eb6:	d204      	bcs.n	8003ec2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	693a      	ldr	r2, [r7, #16]
 8003ebe:	60da      	str	r2, [r3, #12]
 8003ec0:	e0b0      	b.n	8004024 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	76bb      	strb	r3, [r7, #26]
 8003ec6:	e0ad      	b.n	8004024 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ed0:	d15b      	bne.n	8003f8a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8003ed2:	7efb      	ldrb	r3, [r7, #27]
 8003ed4:	2b08      	cmp	r3, #8
 8003ed6:	d828      	bhi.n	8003f2a <UART_SetConfig+0x3fe>
 8003ed8:	a201      	add	r2, pc, #4	; (adr r2, 8003ee0 <UART_SetConfig+0x3b4>)
 8003eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ede:	bf00      	nop
 8003ee0:	08003f05 	.word	0x08003f05
 8003ee4:	08003f0d 	.word	0x08003f0d
 8003ee8:	08003f15 	.word	0x08003f15
 8003eec:	08003f2b 	.word	0x08003f2b
 8003ef0:	08003f1b 	.word	0x08003f1b
 8003ef4:	08003f2b 	.word	0x08003f2b
 8003ef8:	08003f2b 	.word	0x08003f2b
 8003efc:	08003f2b 	.word	0x08003f2b
 8003f00:	08003f23 	.word	0x08003f23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f04:	f7fe f94a 	bl	800219c <HAL_RCC_GetPCLK1Freq>
 8003f08:	6178      	str	r0, [r7, #20]
        break;
 8003f0a:	e013      	b.n	8003f34 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f0c:	f7fe f95c 	bl	80021c8 <HAL_RCC_GetPCLK2Freq>
 8003f10:	6178      	str	r0, [r7, #20]
        break;
 8003f12:	e00f      	b.n	8003f34 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f14:	4b49      	ldr	r3, [pc, #292]	; (800403c <UART_SetConfig+0x510>)
 8003f16:	617b      	str	r3, [r7, #20]
        break;
 8003f18:	e00c      	b.n	8003f34 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f1a:	f7fe f8a7 	bl	800206c <HAL_RCC_GetSysClockFreq>
 8003f1e:	6178      	str	r0, [r7, #20]
        break;
 8003f20:	e008      	b.n	8003f34 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f26:	617b      	str	r3, [r7, #20]
        break;
 8003f28:	e004      	b.n	8003f34 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	76bb      	strb	r3, [r7, #26]
        break;
 8003f32:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d074      	beq.n	8004024 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	005a      	lsls	r2, r3, #1
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	085b      	lsrs	r3, r3, #1
 8003f44:	441a      	add	r2, r3
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f4e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	2b0f      	cmp	r3, #15
 8003f54:	d916      	bls.n	8003f84 <UART_SetConfig+0x458>
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f5c:	d212      	bcs.n	8003f84 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	f023 030f 	bic.w	r3, r3, #15
 8003f66:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	085b      	lsrs	r3, r3, #1
 8003f6c:	b29b      	uxth	r3, r3
 8003f6e:	f003 0307 	and.w	r3, r3, #7
 8003f72:	b29a      	uxth	r2, r3
 8003f74:	89fb      	ldrh	r3, [r7, #14]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	89fa      	ldrh	r2, [r7, #14]
 8003f80:	60da      	str	r2, [r3, #12]
 8003f82:	e04f      	b.n	8004024 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	76bb      	strb	r3, [r7, #26]
 8003f88:	e04c      	b.n	8004024 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f8a:	7efb      	ldrb	r3, [r7, #27]
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d828      	bhi.n	8003fe2 <UART_SetConfig+0x4b6>
 8003f90:	a201      	add	r2, pc, #4	; (adr r2, 8003f98 <UART_SetConfig+0x46c>)
 8003f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f96:	bf00      	nop
 8003f98:	08003fbd 	.word	0x08003fbd
 8003f9c:	08003fc5 	.word	0x08003fc5
 8003fa0:	08003fcd 	.word	0x08003fcd
 8003fa4:	08003fe3 	.word	0x08003fe3
 8003fa8:	08003fd3 	.word	0x08003fd3
 8003fac:	08003fe3 	.word	0x08003fe3
 8003fb0:	08003fe3 	.word	0x08003fe3
 8003fb4:	08003fe3 	.word	0x08003fe3
 8003fb8:	08003fdb 	.word	0x08003fdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fbc:	f7fe f8ee 	bl	800219c <HAL_RCC_GetPCLK1Freq>
 8003fc0:	6178      	str	r0, [r7, #20]
        break;
 8003fc2:	e013      	b.n	8003fec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fc4:	f7fe f900 	bl	80021c8 <HAL_RCC_GetPCLK2Freq>
 8003fc8:	6178      	str	r0, [r7, #20]
        break;
 8003fca:	e00f      	b.n	8003fec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fcc:	4b1b      	ldr	r3, [pc, #108]	; (800403c <UART_SetConfig+0x510>)
 8003fce:	617b      	str	r3, [r7, #20]
        break;
 8003fd0:	e00c      	b.n	8003fec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fd2:	f7fe f84b 	bl	800206c <HAL_RCC_GetSysClockFreq>
 8003fd6:	6178      	str	r0, [r7, #20]
        break;
 8003fd8:	e008      	b.n	8003fec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fde:	617b      	str	r3, [r7, #20]
        break;
 8003fe0:	e004      	b.n	8003fec <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	76bb      	strb	r3, [r7, #26]
        break;
 8003fea:	bf00      	nop
    }

    if (pclk != 0U)
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d018      	beq.n	8004024 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	085a      	lsrs	r2, r3, #1
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	441a      	add	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	fbb2 f3f3 	udiv	r3, r2, r3
 8004004:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	2b0f      	cmp	r3, #15
 800400a:	d909      	bls.n	8004020 <UART_SetConfig+0x4f4>
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004012:	d205      	bcs.n	8004020 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	b29a      	uxth	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	60da      	str	r2, [r3, #12]
 800401e:	e001      	b.n	8004024 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004030:	7ebb      	ldrb	r3, [r7, #26]
}
 8004032:	4618      	mov	r0, r3
 8004034:	3720      	adds	r7, #32
 8004036:	46bd      	mov	sp, r7
 8004038:	bdb0      	pop	{r4, r5, r7, pc}
 800403a:	bf00      	nop
 800403c:	00f42400 	.word	0x00f42400

08004040 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004040:	b480      	push	{r7}
 8004042:	b083      	sub	sp, #12
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404c:	f003 0301 	and.w	r3, r3, #1
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	430a      	orrs	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	430a      	orrs	r2, r1
 80040ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	f003 0308 	and.w	r3, r3, #8
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	685b      	ldr	r3, [r3, #4]
 80040c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	430a      	orrs	r2, r1
 80040ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	689b      	ldr	r3, [r3, #8]
 80040e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	430a      	orrs	r2, r1
 80040f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f6:	f003 0320 	and.w	r3, r3, #32
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	430a      	orrs	r2, r1
 8004112:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d01a      	beq.n	8004156 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	430a      	orrs	r2, r1
 8004134:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800413e:	d10a      	bne.n	8004156 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800415e:	2b00      	cmp	r3, #0
 8004160:	d00a      	beq.n	8004178 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	430a      	orrs	r2, r1
 8004176:	605a      	str	r2, [r3, #4]
  }
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b086      	sub	sp, #24
 8004188:	af02      	add	r7, sp, #8
 800418a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004194:	f7fc febc 	bl	8000f10 <HAL_GetTick>
 8004198:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0308 	and.w	r3, r3, #8
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d10e      	bne.n	80041c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041ac:	9300      	str	r3, [sp, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f82d 	bl	8004216 <UART_WaitOnFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e023      	b.n	800420e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b04      	cmp	r3, #4
 80041d2:	d10e      	bne.n	80041f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041d8:	9300      	str	r3, [sp, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f817 	bl	8004216 <UART_WaitOnFlagUntilTimeout>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e00d      	b.n	800420e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2220      	movs	r2, #32
 80041f6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2220      	movs	r2, #32
 80041fc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800420c:	2300      	movs	r3, #0
}
 800420e:	4618      	mov	r0, r3
 8004210:	3710      	adds	r7, #16
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b09c      	sub	sp, #112	; 0x70
 800421a:	af00      	add	r7, sp, #0
 800421c:	60f8      	str	r0, [r7, #12]
 800421e:	60b9      	str	r1, [r7, #8]
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	4613      	mov	r3, r2
 8004224:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004226:	e0a5      	b.n	8004374 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800422a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800422e:	f000 80a1 	beq.w	8004374 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004232:	f7fc fe6d 	bl	8000f10 <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800423e:	429a      	cmp	r2, r3
 8004240:	d302      	bcc.n	8004248 <UART_WaitOnFlagUntilTimeout+0x32>
 8004242:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004244:	2b00      	cmp	r3, #0
 8004246:	d13e      	bne.n	80042c6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004258:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800425c:	667b      	str	r3, [r7, #100]	; 0x64
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004266:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004268:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800426c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800426e:	e841 2300 	strex	r3, r2, [r1]
 8004272:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1e6      	bne.n	8004248 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3308      	adds	r3, #8
 8004280:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800428a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428c:	f023 0301 	bic.w	r3, r3, #1
 8004290:	663b      	str	r3, [r7, #96]	; 0x60
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3308      	adds	r3, #8
 8004298:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800429a:	64ba      	str	r2, [r7, #72]	; 0x48
 800429c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80042a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80042a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e5      	bne.n	800427a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2220      	movs	r2, #32
 80042b2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80042c2:	2303      	movs	r3, #3
 80042c4:	e067      	b.n	8004396 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0304 	and.w	r3, r3, #4
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d04f      	beq.n	8004374 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	69db      	ldr	r3, [r3, #28]
 80042da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042e2:	d147      	bne.n	8004374 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80042ec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f6:	e853 3f00 	ldrex	r3, [r3]
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004302:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800430c:	637b      	str	r3, [r7, #52]	; 0x34
 800430e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004310:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004314:	e841 2300 	strex	r3, r2, [r1]
 8004318:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800431a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1e6      	bne.n	80042ee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	3308      	adds	r3, #8
 8004326:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	e853 3f00 	ldrex	r3, [r3]
 800432e:	613b      	str	r3, [r7, #16]
   return(result);
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	f023 0301 	bic.w	r3, r3, #1
 8004336:	66bb      	str	r3, [r7, #104]	; 0x68
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	3308      	adds	r3, #8
 800433e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004340:	623a      	str	r2, [r7, #32]
 8004342:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004344:	69f9      	ldr	r1, [r7, #28]
 8004346:	6a3a      	ldr	r2, [r7, #32]
 8004348:	e841 2300 	strex	r3, r2, [r1]
 800434c:	61bb      	str	r3, [r7, #24]
   return(result);
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d1e5      	bne.n	8004320 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2220      	movs	r2, #32
 800435e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e010      	b.n	8004396 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69da      	ldr	r2, [r3, #28]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	4013      	ands	r3, r2
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	429a      	cmp	r2, r3
 8004382:	bf0c      	ite	eq
 8004384:	2301      	moveq	r3, #1
 8004386:	2300      	movne	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	461a      	mov	r2, r3
 800438c:	79fb      	ldrb	r3, [r7, #7]
 800438e:	429a      	cmp	r2, r3
 8004390:	f43f af4a 	beq.w	8004228 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	3770      	adds	r7, #112	; 0x70
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
	...

080043a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b097      	sub	sp, #92	; 0x5c
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	4613      	mov	r3, r2
 80043ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	68ba      	ldr	r2, [r7, #8]
 80043b2:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	88fa      	ldrh	r2, [r7, #6]
 80043b8:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	88fa      	ldrh	r2, [r7, #6]
 80043c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043d2:	d10e      	bne.n	80043f2 <UART_Start_Receive_IT+0x52>
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d105      	bne.n	80043e8 <UART_Start_Receive_IT+0x48>
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f240 12ff 	movw	r2, #511	; 0x1ff
 80043e2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043e6:	e02d      	b.n	8004444 <UART_Start_Receive_IT+0xa4>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	22ff      	movs	r2, #255	; 0xff
 80043ec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80043f0:	e028      	b.n	8004444 <UART_Start_Receive_IT+0xa4>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d10d      	bne.n	8004416 <UART_Start_Receive_IT+0x76>
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d104      	bne.n	800440c <UART_Start_Receive_IT+0x6c>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	22ff      	movs	r2, #255	; 0xff
 8004406:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800440a:	e01b      	b.n	8004444 <UART_Start_Receive_IT+0xa4>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	227f      	movs	r2, #127	; 0x7f
 8004410:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004414:	e016      	b.n	8004444 <UART_Start_Receive_IT+0xa4>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800441e:	d10d      	bne.n	800443c <UART_Start_Receive_IT+0x9c>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	691b      	ldr	r3, [r3, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d104      	bne.n	8004432 <UART_Start_Receive_IT+0x92>
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	227f      	movs	r2, #127	; 0x7f
 800442c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004430:	e008      	b.n	8004444 <UART_Start_Receive_IT+0xa4>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	223f      	movs	r2, #63	; 0x3f
 8004436:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800443a:	e003      	b.n	8004444 <UART_Start_Receive_IT+0xa4>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2222      	movs	r2, #34	; 0x22
 8004450:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	3308      	adds	r3, #8
 8004458:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800445c:	e853 3f00 	ldrex	r3, [r3]
 8004460:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004464:	f043 0301 	orr.w	r3, r3, #1
 8004468:	657b      	str	r3, [r7, #84]	; 0x54
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	3308      	adds	r3, #8
 8004470:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004472:	64ba      	str	r2, [r7, #72]	; 0x48
 8004474:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004476:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004478:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800447a:	e841 2300 	strex	r3, r2, [r1]
 800447e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004482:	2b00      	cmp	r3, #0
 8004484:	d1e5      	bne.n	8004452 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800448e:	d107      	bne.n	80044a0 <UART_Start_Receive_IT+0x100>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	691b      	ldr	r3, [r3, #16]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d103      	bne.n	80044a0 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4a24      	ldr	r2, [pc, #144]	; (800452c <UART_Start_Receive_IT+0x18c>)
 800449c:	665a      	str	r2, [r3, #100]	; 0x64
 800449e:	e002      	b.n	80044a6 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4a23      	ldr	r2, [pc, #140]	; (8004530 <UART_Start_Receive_IT+0x190>)
 80044a4:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d019      	beq.n	80044ea <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80044ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	461a      	mov	r2, r3
 80044d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044d4:	637b      	str	r3, [r7, #52]	; 0x34
 80044d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80044da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80044e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e6      	bne.n	80044b6 <UART_Start_Receive_IT+0x116>
 80044e8:	e018      	b.n	800451c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	e853 3f00 	ldrex	r3, [r3]
 80044f6:	613b      	str	r3, [r7, #16]
   return(result);
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	f043 0320 	orr.w	r3, r3, #32
 80044fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	461a      	mov	r2, r3
 8004506:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004508:	623b      	str	r3, [r7, #32]
 800450a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450c:	69f9      	ldr	r1, [r7, #28]
 800450e:	6a3a      	ldr	r2, [r7, #32]
 8004510:	e841 2300 	strex	r3, r2, [r1]
 8004514:	61bb      	str	r3, [r7, #24]
   return(result);
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d1e6      	bne.n	80044ea <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	375c      	adds	r7, #92	; 0x5c
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	08004953 	.word	0x08004953
 8004530:	080047f3 	.word	0x080047f3

08004534 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004534:	b480      	push	{r7}
 8004536:	b095      	sub	sp, #84	; 0x54
 8004538:	af00      	add	r7, sp, #0
 800453a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004542:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004544:	e853 3f00 	ldrex	r3, [r3]
 8004548:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004550:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	461a      	mov	r2, r3
 8004558:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800455a:	643b      	str	r3, [r7, #64]	; 0x40
 800455c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004560:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004562:	e841 2300 	strex	r3, r2, [r1]
 8004566:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1e6      	bne.n	800453c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	3308      	adds	r3, #8
 8004574:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004576:	6a3b      	ldr	r3, [r7, #32]
 8004578:	e853 3f00 	ldrex	r3, [r3]
 800457c:	61fb      	str	r3, [r7, #28]
   return(result);
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	f023 0301 	bic.w	r3, r3, #1
 8004584:	64bb      	str	r3, [r7, #72]	; 0x48
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	3308      	adds	r3, #8
 800458c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800458e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004590:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004592:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004596:	e841 2300 	strex	r3, r2, [r1]
 800459a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d1e5      	bne.n	800456e <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d118      	bne.n	80045dc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	e853 3f00 	ldrex	r3, [r3]
 80045b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f023 0310 	bic.w	r3, r3, #16
 80045be:	647b      	str	r3, [r7, #68]	; 0x44
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	461a      	mov	r2, r3
 80045c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c8:	61bb      	str	r3, [r7, #24]
 80045ca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045cc:	6979      	ldr	r1, [r7, #20]
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	e841 2300 	strex	r3, r2, [r1]
 80045d4:	613b      	str	r3, [r7, #16]
   return(result);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1e6      	bne.n	80045aa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2220      	movs	r2, #32
 80045e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2200      	movs	r2, #0
 80045ec:	665a      	str	r2, [r3, #100]	; 0x64
}
 80045ee:	bf00      	nop
 80045f0:	3754      	adds	r7, #84	; 0x54
 80045f2:	46bd      	mov	sp, r7
 80045f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f8:	4770      	bx	lr

080045fa <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045fa:	b580      	push	{r7, lr}
 80045fc:	b084      	sub	sp, #16
 80045fe:	af00      	add	r7, sp, #0
 8004600:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004606:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004618:	68f8      	ldr	r0, [r7, #12]
 800461a:	f7ff fa71 	bl	8003b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800461e:	bf00      	nop
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}

08004626 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004626:	b480      	push	{r7}
 8004628:	b08f      	sub	sp, #60	; 0x3c
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004632:	2b21      	cmp	r3, #33	; 0x21
 8004634:	d14d      	bne.n	80046d2 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800463c:	b29b      	uxth	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d132      	bne.n	80046a8 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	e853 3f00 	ldrex	r3, [r3]
 800464e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004656:	637b      	str	r3, [r7, #52]	; 0x34
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	461a      	mov	r2, r3
 800465e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004660:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004662:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004664:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004666:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004668:	e841 2300 	strex	r3, r2, [r1]
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800466e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1e6      	bne.n	8004642 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	e853 3f00 	ldrex	r3, [r3]
 8004680:	60bb      	str	r3, [r7, #8]
   return(result);
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004688:	633b      	str	r3, [r7, #48]	; 0x30
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	461a      	mov	r2, r3
 8004690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004692:	61bb      	str	r3, [r7, #24]
 8004694:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004696:	6979      	ldr	r1, [r7, #20]
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	613b      	str	r3, [r7, #16]
   return(result);
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1e6      	bne.n	8004674 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80046a6:	e014      	b.n	80046d2 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ac:	781a      	ldrb	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	b292      	uxth	r2, r2
 80046b4:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046ba:	1c5a      	adds	r2, r3, #1
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046c6:	b29b      	uxth	r3, r3
 80046c8:	3b01      	subs	r3, #1
 80046ca:	b29a      	uxth	r2, r3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80046d2:	bf00      	nop
 80046d4:	373c      	adds	r7, #60	; 0x3c
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80046de:	b480      	push	{r7}
 80046e0:	b091      	sub	sp, #68	; 0x44
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80046ea:	2b21      	cmp	r3, #33	; 0x21
 80046ec:	d151      	bne.n	8004792 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d132      	bne.n	8004760 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004702:	e853 3f00 	ldrex	r3, [r3]
 8004706:	623b      	str	r3, [r7, #32]
   return(result);
 8004708:	6a3b      	ldr	r3, [r7, #32]
 800470a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800470e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	461a      	mov	r2, r3
 8004716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004718:	633b      	str	r3, [r7, #48]	; 0x30
 800471a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800471c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800471e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004720:	e841 2300 	strex	r3, r2, [r1]
 8004724:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004728:	2b00      	cmp	r3, #0
 800472a:	d1e6      	bne.n	80046fa <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	e853 3f00 	ldrex	r3, [r3]
 8004738:	60fb      	str	r3, [r7, #12]
   return(result);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004740:	637b      	str	r3, [r7, #52]	; 0x34
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474a:	61fb      	str	r3, [r7, #28]
 800474c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800474e:	69b9      	ldr	r1, [r7, #24]
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	e841 2300 	strex	r3, r2, [r1]
 8004756:	617b      	str	r3, [r7, #20]
   return(result);
 8004758:	697b      	ldr	r3, [r7, #20]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d1e6      	bne.n	800472c <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800475e:	e018      	b.n	8004792 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004764:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8004766:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004768:	881a      	ldrh	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004772:	b292      	uxth	r2, r2
 8004774:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477a:	1c9a      	adds	r2, r3, #2
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004786:	b29b      	uxth	r3, r3
 8004788:	3b01      	subs	r3, #1
 800478a:	b29a      	uxth	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8004792:	bf00      	nop
 8004794:	3744      	adds	r7, #68	; 0x44
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr

0800479e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b088      	sub	sp, #32
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	e853 3f00 	ldrex	r3, [r3]
 80047b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ba:	61fb      	str	r3, [r7, #28]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	461a      	mov	r2, r3
 80047c2:	69fb      	ldr	r3, [r7, #28]
 80047c4:	61bb      	str	r3, [r7, #24]
 80047c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c8:	6979      	ldr	r1, [r7, #20]
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	e841 2300 	strex	r3, r2, [r1]
 80047d0:	613b      	str	r3, [r7, #16]
   return(result);
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1e6      	bne.n	80047a6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2220      	movs	r2, #32
 80047dc:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fc f90f 	bl	8000a08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80047ea:	bf00      	nop
 80047ec:	3720      	adds	r7, #32
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b096      	sub	sp, #88	; 0x58
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004800:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004808:	2b22      	cmp	r3, #34	; 0x22
 800480a:	f040 8094 	bne.w	8004936 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004814:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004818:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800481c:	b2d9      	uxtb	r1, r3
 800481e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004822:	b2da      	uxtb	r2, r3
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004828:	400a      	ands	r2, r1
 800482a:	b2d2      	uxtb	r2, r2
 800482c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800483e:	b29b      	uxth	r3, r3
 8004840:	3b01      	subs	r3, #1
 8004842:	b29a      	uxth	r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004850:	b29b      	uxth	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d179      	bne.n	800494a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800485e:	e853 3f00 	ldrex	r3, [r3]
 8004862:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004864:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004866:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800486a:	653b      	str	r3, [r7, #80]	; 0x50
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	461a      	mov	r2, r3
 8004872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004874:	647b      	str	r3, [r7, #68]	; 0x44
 8004876:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004878:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800487a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800487c:	e841 2300 	strex	r3, r2, [r1]
 8004880:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004884:	2b00      	cmp	r3, #0
 8004886:	d1e6      	bne.n	8004856 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3308      	adds	r3, #8
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	e853 3f00 	ldrex	r3, [r3]
 8004896:	623b      	str	r3, [r7, #32]
   return(result);
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	f023 0301 	bic.w	r3, r3, #1
 800489e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3308      	adds	r3, #8
 80048a6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048a8:	633a      	str	r2, [r7, #48]	; 0x30
 80048aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048b0:	e841 2300 	strex	r3, r2, [r1]
 80048b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e5      	bne.n	8004888 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2220      	movs	r2, #32
 80048c0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d12e      	bne.n	800492e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2200      	movs	r2, #0
 80048d4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f023 0310 	bic.w	r3, r3, #16
 80048ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048f4:	61fb      	str	r3, [r7, #28]
 80048f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	69b9      	ldr	r1, [r7, #24]
 80048fa:	69fa      	ldr	r2, [r7, #28]
 80048fc:	e841 2300 	strex	r3, r2, [r1]
 8004900:	617b      	str	r3, [r7, #20]
   return(result);
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e6      	bne.n	80048d6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69db      	ldr	r3, [r3, #28]
 800490e:	f003 0310 	and.w	r3, r3, #16
 8004912:	2b10      	cmp	r3, #16
 8004914:	d103      	bne.n	800491e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	2210      	movs	r2, #16
 800491c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004924:	4619      	mov	r1, r3
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff f8f4 	bl	8003b14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800492c:	e00d      	b.n	800494a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f7fc f87a 	bl	8000a28 <HAL_UART_RxCpltCallback>
}
 8004934:	e009      	b.n	800494a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	8b1b      	ldrh	r3, [r3, #24]
 800493c:	b29a      	uxth	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0208 	orr.w	r2, r2, #8
 8004946:	b292      	uxth	r2, r2
 8004948:	831a      	strh	r2, [r3, #24]
}
 800494a:	bf00      	nop
 800494c:	3758      	adds	r7, #88	; 0x58
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}

08004952 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004952:	b580      	push	{r7, lr}
 8004954:	b096      	sub	sp, #88	; 0x58
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004960:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004968:	2b22      	cmp	r3, #34	; 0x22
 800496a:	f040 8094 	bne.w	8004a96 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004974:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800497e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004982:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004986:	4013      	ands	r3, r2
 8004988:	b29a      	uxth	r2, r3
 800498a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800498c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004992:	1c9a      	adds	r2, r3, #2
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800499e:	b29b      	uxth	r3, r3
 80049a0:	3b01      	subs	r3, #1
 80049a2:	b29a      	uxth	r2, r3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d179      	bne.n	8004aaa <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049be:	e853 3f00 	ldrex	r3, [r3]
 80049c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80049c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	461a      	mov	r2, r3
 80049d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049d4:	643b      	str	r3, [r7, #64]	; 0x40
 80049d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80049da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049dc:	e841 2300 	strex	r3, r2, [r1]
 80049e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1e6      	bne.n	80049b6 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3308      	adds	r3, #8
 80049ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f0:	6a3b      	ldr	r3, [r7, #32]
 80049f2:	e853 3f00 	ldrex	r3, [r3]
 80049f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	f023 0301 	bic.w	r3, r3, #1
 80049fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	3308      	adds	r3, #8
 8004a06:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a08:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004a0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a10:	e841 2300 	strex	r3, r2, [r1]
 8004a14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e5      	bne.n	80049e8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2220      	movs	r2, #32
 8004a20:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	d12e      	bne.n	8004a8e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	e853 3f00 	ldrex	r3, [r3]
 8004a42:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	f023 0310 	bic.w	r3, r3, #16
 8004a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	461a      	mov	r2, r3
 8004a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a54:	61bb      	str	r3, [r7, #24]
 8004a56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a58:	6979      	ldr	r1, [r7, #20]
 8004a5a:	69ba      	ldr	r2, [r7, #24]
 8004a5c:	e841 2300 	strex	r3, r2, [r1]
 8004a60:	613b      	str	r3, [r7, #16]
   return(result);
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1e6      	bne.n	8004a36 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	f003 0310 	and.w	r3, r3, #16
 8004a72:	2b10      	cmp	r3, #16
 8004a74:	d103      	bne.n	8004a7e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2210      	movs	r2, #16
 8004a7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004a84:	4619      	mov	r1, r3
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7ff f844 	bl	8003b14 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a8c:	e00d      	b.n	8004aaa <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f7fb ffca 	bl	8000a28 <HAL_UART_RxCpltCallback>
}
 8004a94:	e009      	b.n	8004aaa <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	8b1b      	ldrh	r3, [r3, #24]
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0208 	orr.w	r2, r2, #8
 8004aa6:	b292      	uxth	r2, r2
 8004aa8:	831a      	strh	r2, [r3, #24]
}
 8004aaa:	bf00      	nop
 8004aac:	3758      	adds	r7, #88	; 0x58
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}

08004ab2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
	...

08004ac8 <__libc_init_array>:
 8004ac8:	b570      	push	{r4, r5, r6, lr}
 8004aca:	4d0d      	ldr	r5, [pc, #52]	; (8004b00 <__libc_init_array+0x38>)
 8004acc:	4c0d      	ldr	r4, [pc, #52]	; (8004b04 <__libc_init_array+0x3c>)
 8004ace:	1b64      	subs	r4, r4, r5
 8004ad0:	10a4      	asrs	r4, r4, #2
 8004ad2:	2600      	movs	r6, #0
 8004ad4:	42a6      	cmp	r6, r4
 8004ad6:	d109      	bne.n	8004aec <__libc_init_array+0x24>
 8004ad8:	4d0b      	ldr	r5, [pc, #44]	; (8004b08 <__libc_init_array+0x40>)
 8004ada:	4c0c      	ldr	r4, [pc, #48]	; (8004b0c <__libc_init_array+0x44>)
 8004adc:	f000 f820 	bl	8004b20 <_init>
 8004ae0:	1b64      	subs	r4, r4, r5
 8004ae2:	10a4      	asrs	r4, r4, #2
 8004ae4:	2600      	movs	r6, #0
 8004ae6:	42a6      	cmp	r6, r4
 8004ae8:	d105      	bne.n	8004af6 <__libc_init_array+0x2e>
 8004aea:	bd70      	pop	{r4, r5, r6, pc}
 8004aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004af0:	4798      	blx	r3
 8004af2:	3601      	adds	r6, #1
 8004af4:	e7ee      	b.n	8004ad4 <__libc_init_array+0xc>
 8004af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004afa:	4798      	blx	r3
 8004afc:	3601      	adds	r6, #1
 8004afe:	e7f2      	b.n	8004ae6 <__libc_init_array+0x1e>
 8004b00:	08004bb4 	.word	0x08004bb4
 8004b04:	08004bb4 	.word	0x08004bb4
 8004b08:	08004bb4 	.word	0x08004bb4
 8004b0c:	08004bb8 	.word	0x08004bb8

08004b10 <memset>:
 8004b10:	4402      	add	r2, r0
 8004b12:	4603      	mov	r3, r0
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d100      	bne.n	8004b1a <memset+0xa>
 8004b18:	4770      	bx	lr
 8004b1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004b1e:	e7f9      	b.n	8004b14 <memset+0x4>

08004b20 <_init>:
 8004b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b22:	bf00      	nop
 8004b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b26:	bc08      	pop	{r3}
 8004b28:	469e      	mov	lr, r3
 8004b2a:	4770      	bx	lr

08004b2c <_fini>:
 8004b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b2e:	bf00      	nop
 8004b30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b32:	bc08      	pop	{r3}
 8004b34:	469e      	mov	lr, r3
 8004b36:	4770      	bx	lr
