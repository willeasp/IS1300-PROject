
IS1300-PROject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005640  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080057d0  080057d0  000157d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058ac  080058ac  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080058ac  080058ac  000158ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080058b4  080058b4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058b4  080058b4  000158b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058b8  080058b8  000158b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080058bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000074  08005930  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08005930  000201c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015fda  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dd1  00000000  00000000  0003607e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dd8  00000000  00000000  00038e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  00039c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002857b  00000000  00000000  0003a8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013361  00000000  00000000  00062e33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2b1b  00000000  00000000  00076194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00168caf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a5c  00000000  00000000  00168d04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080057b8 	.word	0x080057b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080057b8 	.word	0x080057b8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <hardware_reset>:


/**
 * @brief Perform a hardware reset on the display
 */
void hardware_reset () {
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
    HAL_Delay(5);
 800057c:	2005      	movs	r0, #5
 800057e:	f000 fe65 	bl	800124c <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800058c:	f001 f9bc 	bl	8001908 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000590:	200a      	movs	r0, #10
 8000592:	f000 fe5b 	bl	800124c <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 8000596:	2201      	movs	r2, #1
 8000598:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800059c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a0:	f001 f9b2 	bl	8001908 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 80005a4:	2001      	movs	r0, #1
 80005a6:	f000 fe51 	bl	800124c <HAL_Delay>
}
 80005aa:	bf00      	nop
 80005ac:	bd80      	pop	{r7, pc}
	...

080005b0 <test_backlight>:


/**
 * @brief Test all backlight colors
 */
void test_backlight () {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b086      	sub	sp, #24
 80005b4:	af00      	add	r7, sp, #0
    GPIO_TypeDef* ports[] = {Disp_White_GPIO_Port, Disp_Green_GPIO_Port, Disp_Red_GPIO_Port};
 80005b6:	4a21      	ldr	r2, [pc, #132]	; (800063c <test_backlight+0x8c>)
 80005b8:	f107 0308 	add.w	r3, r7, #8
 80005bc:	ca07      	ldmia	r2, {r0, r1, r2}
 80005be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    uint16_t pins[] = {Disp_White_Pin, Disp_Green_Pin, Disp_Red_Pin};
 80005c2:	4a1f      	ldr	r2, [pc, #124]	; (8000640 <test_backlight+0x90>)
 80005c4:	463b      	mov	r3, r7
 80005c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80005ca:	6018      	str	r0, [r3, #0]
 80005cc:	3304      	adds	r3, #4
 80005ce:	8019      	strh	r1, [r3, #0]
    for (int i = 0; i < 3; ++i) {
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
 80005d4:	e029      	b.n	800062a <test_backlight+0x7a>
        HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	f107 0218 	add.w	r2, r7, #24
 80005de:	4413      	add	r3, r2
 80005e0:	f853 0c10 	ldr.w	r0, [r3, #-16]
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	f107 0218 	add.w	r2, r7, #24
 80005ec:	4413      	add	r3, r2
 80005ee:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80005f2:	2201      	movs	r2, #1
 80005f4:	4619      	mov	r1, r3
 80005f6:	f001 f987 	bl	8001908 <HAL_GPIO_WritePin>
        HAL_Delay(200);
 80005fa:	20c8      	movs	r0, #200	; 0xc8
 80005fc:	f000 fe26 	bl	800124c <HAL_Delay>
        HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	009b      	lsls	r3, r3, #2
 8000604:	f107 0218 	add.w	r2, r7, #24
 8000608:	4413      	add	r3, r2
 800060a:	f853 0c10 	ldr.w	r0, [r3, #-16]
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	f107 0218 	add.w	r2, r7, #24
 8000616:	4413      	add	r3, r2
 8000618:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800061c:	2200      	movs	r2, #0
 800061e:	4619      	mov	r1, r3
 8000620:	f001 f972 	bl	8001908 <HAL_GPIO_WritePin>
    for (int i = 0; i < 3; ++i) {
 8000624:	697b      	ldr	r3, [r7, #20]
 8000626:	3301      	adds	r3, #1
 8000628:	617b      	str	r3, [r7, #20]
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	2b02      	cmp	r3, #2
 800062e:	ddd2      	ble.n	80005d6 <test_backlight+0x26>
    }
}
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	3718      	adds	r7, #24
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	080057d0 	.word	0x080057d0
 8000640:	080057dc 	.word	0x080057dc

08000644 <init_backlight>:


/**
 * @brief Run through all colors and set the backlight to white
 */
void init_backlight () {
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
    test_backlight();
 8000648:	f7ff ffb2 	bl	80005b0 <test_backlight>
    HAL_GPIO_WritePin(Disp_White_GPIO_Port, Disp_White_Pin, GPIO_PIN_SET);
 800064c:	2201      	movs	r2, #1
 800064e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000652:	4802      	ldr	r0, [pc, #8]	; (800065c <init_backlight+0x18>)
 8000654:	f001 f958 	bl	8001908 <HAL_GPIO_WritePin>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	48000800 	.word	0x48000800

08000660 <split_byte>:
/**
 * @brief Split a byte to send to the display
 * @param[in] byte The byte to split into two
 * @param[out] buffer Where to place the two new bytes
 */
void split_byte (uint8_t byte, uint8_t *buffer) {
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	6039      	str	r1, [r7, #0]
 800066a:	71fb      	strb	r3, [r7, #7]
    buffer[0] = byte & 0x0F;            // lower bits first
 800066c:	79fb      	ldrb	r3, [r7, #7]
 800066e:	f003 030f 	and.w	r3, r3, #15
 8000672:	b2da      	uxtb	r2, r3
 8000674:	683b      	ldr	r3, [r7, #0]
 8000676:	701a      	strb	r2, [r3, #0]
    buffer[1] = (byte & 0xF0) >> 4;     // upper bits second
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	3301      	adds	r3, #1
 800067c:	79fa      	ldrb	r2, [r7, #7]
 800067e:	0912      	lsrs	r2, r2, #4
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	701a      	strb	r2, [r3, #0]
}
 8000684:	bf00      	nop
 8000686:	370c      	adds	r7, #12
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <display_transmit>:
 * @brief Send the display data or instructions
 * @param[in] startbyte The byte setting that initiates the transmit
 * @param[in] bytes The bytes that will be sent to the display
 * @param[in] length The number of bytes to send
 */
int display_transmit (uint8_t startbyte, uint8_t *bytes, uint16_t length) {
 8000690:	b5b0      	push	{r4, r5, r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	4613      	mov	r3, r2
 800069e:	80bb      	strh	r3, [r7, #4]
 80006a0:	466b      	mov	r3, sp
 80006a2:	461d      	mov	r5, r3
    /* create message to transmit */
    uint16_t mes_length = length*2 +1; // +1 for start byte
 80006a4:	88bb      	ldrh	r3, [r7, #4]
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	b29b      	uxth	r3, r3
 80006aa:	3301      	adds	r3, #1
 80006ac:	837b      	strh	r3, [r7, #26]
    uint8_t message[mes_length];
 80006ae:	8b7c      	ldrh	r4, [r7, #26]
 80006b0:	4623      	mov	r3, r4
 80006b2:	3b01      	subs	r3, #1
 80006b4:	617b      	str	r3, [r7, #20]
 80006b6:	b2a0      	uxth	r0, r4
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	f04f 0200 	mov.w	r2, #0
 80006c0:	f04f 0300 	mov.w	r3, #0
 80006c4:	00cb      	lsls	r3, r1, #3
 80006c6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80006ca:	00c2      	lsls	r2, r0, #3
 80006cc:	b2a0      	uxth	r0, r4
 80006ce:	f04f 0100 	mov.w	r1, #0
 80006d2:	f04f 0200 	mov.w	r2, #0
 80006d6:	f04f 0300 	mov.w	r3, #0
 80006da:	00cb      	lsls	r3, r1, #3
 80006dc:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80006e0:	00c2      	lsls	r2, r0, #3
 80006e2:	4623      	mov	r3, r4
 80006e4:	3307      	adds	r3, #7
 80006e6:	08db      	lsrs	r3, r3, #3
 80006e8:	00db      	lsls	r3, r3, #3
 80006ea:	ebad 0d03 	sub.w	sp, sp, r3
 80006ee:	466b      	mov	r3, sp
 80006f0:	3300      	adds	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]

    message[0] = startbyte;  // start byte
 80006f4:	693b      	ldr	r3, [r7, #16]
 80006f6:	79fa      	ldrb	r2, [r7, #7]
 80006f8:	701a      	strb	r2, [r3, #0]

    uint8_t divided[2]; // for splitting a byte into two
    for (int i = 0; i < length; ++i) {
 80006fa:	2300      	movs	r3, #0
 80006fc:	61fb      	str	r3, [r7, #28]
 80006fe:	e018      	b.n	8000732 <display_transmit+0xa2>
        split_byte(bytes[i], divided);
 8000700:	69fb      	ldr	r3, [r7, #28]
 8000702:	683a      	ldr	r2, [r7, #0]
 8000704:	4413      	add	r3, r2
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	f107 020c 	add.w	r2, r7, #12
 800070c:	4611      	mov	r1, r2
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffa6 	bl	8000660 <split_byte>
        message[1 + i*2] = divided[0];
 8000714:	69fb      	ldr	r3, [r7, #28]
 8000716:	005b      	lsls	r3, r3, #1
 8000718:	3301      	adds	r3, #1
 800071a:	7b39      	ldrb	r1, [r7, #12]
 800071c:	693a      	ldr	r2, [r7, #16]
 800071e:	54d1      	strb	r1, [r2, r3]
        message[1 + i*2 +1] = divided[1];
 8000720:	69fb      	ldr	r3, [r7, #28]
 8000722:	3301      	adds	r3, #1
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	7b79      	ldrb	r1, [r7, #13]
 8000728:	693a      	ldr	r2, [r7, #16]
 800072a:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < length; ++i) {
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	3301      	adds	r3, #1
 8000730:	61fb      	str	r3, [r7, #28]
 8000732:	88bb      	ldrh	r3, [r7, #4]
 8000734:	69fa      	ldr	r2, [r7, #28]
 8000736:	429a      	cmp	r2, r3
 8000738:	dbe2      	blt.n	8000700 <display_transmit+0x70>
    }

    if (HAL_SPI_Transmit(&hspi2, message, mes_length, 100) != HAL_OK) {
 800073a:	6939      	ldr	r1, [r7, #16]
 800073c:	8b7a      	ldrh	r2, [r7, #26]
 800073e:	2364      	movs	r3, #100	; 0x64
 8000740:	4806      	ldr	r0, [pc, #24]	; (800075c <display_transmit+0xcc>)
 8000742:	f002 ff74 	bl	800362e <HAL_SPI_Transmit>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <display_transmit+0xc0>
        return 1;
 800074c:	2301      	movs	r3, #1
 800074e:	e000      	b.n	8000752 <display_transmit+0xc2>
    }
    return 0;
 8000750:	2300      	movs	r3, #0
 8000752:	46ad      	mov	sp, r5
}
 8000754:	4618      	mov	r0, r3
 8000756:	3720      	adds	r7, #32
 8000758:	46bd      	mov	sp, r7
 800075a:	bdb0      	pop	{r4, r5, r7, pc}
 800075c:	200000c4 	.word	0x200000c4

08000760 <display_send_instruction>:
/**
 * @brief Send instruction bytes via spi to the display
 * @param[in] instructions A pointer to the instructions to send to the display
 * @param[in] length The number of instructions
 */
int display_send_instruction (uint8_t *instructions, uint16_t length) {
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	807b      	strh	r3, [r7, #2]
    return display_transmit(0x1F, instructions, length);
 800076c:	887b      	ldrh	r3, [r7, #2]
 800076e:	461a      	mov	r2, r3
 8000770:	6879      	ldr	r1, [r7, #4]
 8000772:	201f      	movs	r0, #31
 8000774:	f7ff ff8c 	bl	8000690 <display_transmit>
 8000778:	4603      	mov	r3, r0
}
 800077a:	4618      	mov	r0, r3
 800077c:	3708      	adds	r7, #8
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}

08000782 <display_write>:
/**
 * @brief Write characters to the display where the cursor currently are
 * @param characters The characters to write
 * @param length The number of characters
 */
int display_write (char *characters, uint16_t length) {
 8000782:	b580      	push	{r7, lr}
 8000784:	b082      	sub	sp, #8
 8000786:	af00      	add	r7, sp, #0
 8000788:	6078      	str	r0, [r7, #4]
 800078a:	460b      	mov	r3, r1
 800078c:	807b      	strh	r3, [r7, #2]
    return display_transmit(0b01011111, (uint8_t*)characters, length);
 800078e:	887b      	ldrh	r3, [r7, #2]
 8000790:	461a      	mov	r2, r3
 8000792:	6879      	ldr	r1, [r7, #4]
 8000794:	205f      	movs	r0, #95	; 0x5f
 8000796:	f7ff ff7b 	bl	8000690 <display_transmit>
 800079a:	4603      	mov	r3, r0
}
 800079c:	4618      	mov	r0, r3
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <set_row>:
uint8_t rows[] = {0b10000000, 0b10100000, 0b11000000, 0b11100000};
/**
 * @brief Set the cursor on the display
 * @param row The row to write to
 */
int set_row (uint8_t row) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
    /* the address range of DDARM is 00H-13H, 20H-33H, 40H53H, 60H-73H */
    return display_send_instruction(&rows[row], 1);
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	4a05      	ldr	r2, [pc, #20]	; (80007c8 <set_row+0x24>)
 80007b2:	4413      	add	r3, r2
 80007b4:	2101      	movs	r1, #1
 80007b6:	4618      	mov	r0, r3
 80007b8:	f7ff ffd2 	bl	8000760 <display_send_instruction>
 80007bc:	4603      	mov	r3, r0
}
 80007be:	4618      	mov	r0, r3
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000000 	.word	0x20000000

080007cc <display_write_row>:
 * @brief Write text to a specific row on the display
 * @param characters The characters to write
 * @param length The number of characters
 * @param row The row to write to
 */
int display_write_row (char *characters, uint16_t length, uint8_t row) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	460b      	mov	r3, r1
 80007d6:	807b      	strh	r3, [r7, #2]
 80007d8:	4613      	mov	r3, r2
 80007da:	707b      	strb	r3, [r7, #1]
    set_row(row);
 80007dc:	787b      	ldrb	r3, [r7, #1]
 80007de:	4618      	mov	r0, r3
 80007e0:	f7ff ffe0 	bl	80007a4 <set_row>
    return display_write(characters, length);
 80007e4:	887b      	ldrh	r3, [r7, #2]
 80007e6:	4619      	mov	r1, r3
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff ffca 	bl	8000782 <display_write>
 80007ee:	4603      	mov	r3, r0
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	3708      	adds	r7, #8
 80007f4:	46bd      	mov	sp, r7
 80007f6:	bd80      	pop	{r7, pc}

080007f8 <clear_display>:

/**
 * @brief Clears the display
 */
int clear_display () {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
    uint8_t ins = 0x01;
 80007fe:	2301      	movs	r3, #1
 8000800:	71fb      	strb	r3, [r7, #7]
    return display_send_instruction(&ins, 1);
 8000802:	1dfb      	adds	r3, r7, #7
 8000804:	2101      	movs	r1, #1
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ffaa 	bl	8000760 <display_send_instruction>
 800080c:	4603      	mov	r3, r0
}
 800080e:	4618      	mov	r0, r3
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
	...

08000818 <init_display>:

/**
 * @brief Initialise the display
 */
void init_display () {
 8000818:	b580      	push	{r7, lr}
 800081a:	b086      	sub	sp, #24
 800081c:	af00      	add	r7, sp, #0
    hardware_reset();
 800081e:	f7ff feab 	bl	8000578 <hardware_reset>

    init_backlight();
 8000822:	f7ff ff0f 	bl	8000644 <init_backlight>

    uint16_t ins_length = 12;
 8000826:	230c      	movs	r3, #12
 8000828:	827b      	strh	r3, [r7, #18]
    uint8_t instructions[] = {
 800082a:	4a19      	ldr	r2, [pc, #100]	; (8000890 <init_display+0x78>)
 800082c:	1d3b      	adds	r3, r7, #4
 800082e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000830:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0x01,
        0x38,
        0x0F,
    };

    if (display_send_instruction(instructions, ins_length))
 8000834:	8a7a      	ldrh	r2, [r7, #18]
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff90 	bl	8000760 <display_send_instruction>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <init_display+0x32>
        handle_error();
 8000846:	f000 f827 	bl	8000898 <handle_error>

    HAL_Delay(10);
 800084a:	200a      	movs	r0, #10
 800084c:	f000 fcfe 	bl	800124c <HAL_Delay>

    for (int i = 0; i < 4; ++i) {
 8000850:	2300      	movs	r3, #0
 8000852:	617b      	str	r3, [r7, #20]
 8000854:	e00b      	b.n	800086e <init_display+0x56>
        set_row(i);
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff ffa2 	bl	80007a4 <set_row>
        display_write("0123456789", 10);
 8000860:	210a      	movs	r1, #10
 8000862:	480c      	ldr	r0, [pc, #48]	; (8000894 <init_display+0x7c>)
 8000864:	f7ff ff8d 	bl	8000782 <display_write>
    for (int i = 0; i < 4; ++i) {
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	3301      	adds	r3, #1
 800086c:	617b      	str	r3, [r7, #20]
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	2b03      	cmp	r3, #3
 8000872:	ddf0      	ble.n	8000856 <init_display+0x3e>
    }

    HAL_Delay(1000);
 8000874:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000878:	f000 fce8 	bl	800124c <HAL_Delay>

    clear_display();
 800087c:	f7ff ffbc 	bl	80007f8 <clear_display>

//    display_write("bababoey", 8);

    HAL_Delay(10);
 8000880:	200a      	movs	r0, #10
 8000882:	f000 fce3 	bl	800124c <HAL_Delay>
}
 8000886:	bf00      	nop
 8000888:	3718      	adds	r7, #24
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	080057f0 	.word	0x080057f0
 8000894:	080057e4 	.word	0x080057e4

08000898 <handle_error>:
 *      Author: Dell
 */

#include "main.h"

void handle_error( void ) {
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
    __disable_irq();
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	2120      	movs	r1, #32
 80008a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a8:	f001 f82e 	bl	8001908 <HAL_GPIO_WritePin>
    while (1)
 80008ac:	e7fe      	b.n	80008ac <handle_error+0x14>
	...

080008b0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b08a      	sub	sp, #40	; 0x28
 80008b4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	f107 0314 	add.w	r3, r7, #20
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
 80008be:	605a      	str	r2, [r3, #4]
 80008c0:	609a      	str	r2, [r3, #8]
 80008c2:	60da      	str	r2, [r3, #12]
 80008c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008c6:	4b40      	ldr	r3, [pc, #256]	; (80009c8 <MX_GPIO_Init+0x118>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	4a3f      	ldr	r2, [pc, #252]	; (80009c8 <MX_GPIO_Init+0x118>)
 80008cc:	f043 0304 	orr.w	r3, r3, #4
 80008d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d2:	4b3d      	ldr	r3, [pc, #244]	; (80009c8 <MX_GPIO_Init+0x118>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	f003 0304 	and.w	r3, r3, #4
 80008da:	613b      	str	r3, [r7, #16]
 80008dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008de:	4b3a      	ldr	r3, [pc, #232]	; (80009c8 <MX_GPIO_Init+0x118>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	4a39      	ldr	r2, [pc, #228]	; (80009c8 <MX_GPIO_Init+0x118>)
 80008e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ea:	4b37      	ldr	r3, [pc, #220]	; (80009c8 <MX_GPIO_Init+0x118>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f6:	4b34      	ldr	r3, [pc, #208]	; (80009c8 <MX_GPIO_Init+0x118>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	4a33      	ldr	r2, [pc, #204]	; (80009c8 <MX_GPIO_Init+0x118>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000902:	4b31      	ldr	r3, [pc, #196]	; (80009c8 <MX_GPIO_Init+0x118>)
 8000904:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60bb      	str	r3, [r7, #8]
 800090c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090e:	4b2e      	ldr	r3, [pc, #184]	; (80009c8 <MX_GPIO_Init+0x118>)
 8000910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000912:	4a2d      	ldr	r2, [pc, #180]	; (80009c8 <MX_GPIO_Init+0x118>)
 8000914:	f043 0302 	orr.w	r3, r3, #2
 8000918:	64d3      	str	r3, [r2, #76]	; 0x4c
 800091a:	4b2b      	ldr	r3, [pc, #172]	; (80009c8 <MX_GPIO_Init+0x118>)
 800091c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091e:	f003 0302 	and.w	r3, r3, #2
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000926:	4b28      	ldr	r3, [pc, #160]	; (80009c8 <MX_GPIO_Init+0x118>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4a27      	ldr	r2, [pc, #156]	; (80009c8 <MX_GPIO_Init+0x118>)
 800092c:	f043 0308 	orr.w	r3, r3, #8
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4b25      	ldr	r3, [pc, #148]	; (80009c8 <MX_GPIO_Init+0x118>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0308 	and.w	r3, r3, #8
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	2120      	movs	r1, #32
 8000942:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000946:	f000 ffdf 	bl	8001908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Disp_Red_Pin|Disp_Green_Pin|Disp_White_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000950:	481e      	ldr	r0, [pc, #120]	; (80009cc <MX_GPIO_Init+0x11c>)
 8000952:	f000 ffd9 	bl	8001908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 8000956:	2201      	movs	r2, #1
 8000958:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800095c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000960:	f000 ffd2 	bl	8001908 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800096a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800096e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 0314 	add.w	r3, r7, #20
 8000978:	4619      	mov	r1, r3
 800097a:	4814      	ldr	r0, [pc, #80]	; (80009cc <MX_GPIO_Init+0x11c>)
 800097c:	f000 fe1a 	bl	80015b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Disp_Reset_Pin;
 8000980:	f248 0320 	movw	r3, #32800	; 0x8020
 8000984:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000986:	2301      	movs	r3, #1
 8000988:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800099c:	f000 fe0a 	bl	80015b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = Disp_Red_Pin|Disp_Green_Pin|Disp_White_Pin;
 80009a0:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 80009a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a6:	2301      	movs	r3, #1
 80009a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	4619      	mov	r1, r3
 80009b8:	4804      	ldr	r0, [pc, #16]	; (80009cc <MX_GPIO_Init+0x11c>)
 80009ba:	f000 fdfb 	bl	80015b4 <HAL_GPIO_Init>

}
 80009be:	bf00      	nop
 80009c0:	3728      	adds	r7, #40	; 0x28
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	40021000 	.word	0x40021000
 80009cc:	48000800 	.word	0x48000800

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b5b0      	push	{r4, r5, r7, lr}
 80009d2:	b092      	sub	sp, #72	; 0x48
 80009d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d6:	f000 fbbd 	bl	8001154 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009da:	f000 f893 	bl	8000b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009de:	f7ff ff67 	bl	80008b0 <MX_GPIO_Init>
  MX_UART5_Init();
 80009e2:	f000 fad3 	bl	8000f8c <MX_UART5_Init>
  MX_SPI2_Init();
 80009e6:	f000 f951 	bl	8000c8c <MX_SPI2_Init>
  MX_RTC_Init();
 80009ea:	f000 f8f5 	bl	8000bd8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  init_display();
 80009ee:	f7ff ff13 	bl	8000818 <init_display>

  char welcome[] = "Hello World interrupt!\r\n";
 80009f2:	4b40      	ldr	r3, [pc, #256]	; (8000af4 <main+0x124>)
 80009f4:	f107 0418 	add.w	r4, r7, #24
 80009f8:	461d      	mov	r5, r3
 80009fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80009fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80009fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a02:	c403      	stmia	r4!, {r0, r1}
 8000a04:	7022      	strb	r2, [r4, #0]
  uart_send(welcome, strlen(welcome));
 8000a06:	f107 0318 	add.w	r3, r7, #24
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f7ff fbe0 	bl	80001d0 <strlen>
 8000a10:	4603      	mov	r3, r0
 8000a12:	b29a      	uxth	r2, r3
 8000a14:	f107 0318 	add.w	r3, r7, #24
 8000a18:	4611      	mov	r1, r2
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 fa76 	bl	8000f0c <uart_send>

  RTC_TimeTypeDef time;
  time.Hours = 20;
 8000a20:	2314      	movs	r3, #20
 8000a22:	713b      	strb	r3, [r7, #4]
  time.Minutes = 34;
 8000a24:	2322      	movs	r3, #34	; 0x22
 8000a26:	717b      	strb	r3, [r7, #5]
  time.Seconds = 50;
 8000a28:	2332      	movs	r3, #50	; 0x32
 8000a2a:	71bb      	strb	r3, [r7, #6]

  HAL_RTC_SetDate(&hrtc, NULL, 0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4831      	ldr	r0, [pc, #196]	; (8000af8 <main+0x128>)
 8000a32:	f002 fc01 	bl	8003238 <HAL_RTC_SetDate>
  HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000a36:	1d3b      	adds	r3, r7, #4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	482e      	ldr	r0, [pc, #184]	; (8000af8 <main+0x128>)
 8000a3e:	f002 fb02 	bl	8003046 <HAL_RTC_SetTime>

  uint8_t buf_len = 11;
 8000a42:	230b      	movs	r3, #11
 8000a44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  char buf[buf_len];
 8000a48:	f897 403f 	ldrb.w	r4, [r7, #63]	; 0x3f
 8000a4c:	4623      	mov	r3, r4
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	63bb      	str	r3, [r7, #56]	; 0x38
 8000a52:	b2e0      	uxtb	r0, r4
 8000a54:	f04f 0100 	mov.w	r1, #0
 8000a58:	f04f 0200 	mov.w	r2, #0
 8000a5c:	f04f 0300 	mov.w	r3, #0
 8000a60:	00cb      	lsls	r3, r1, #3
 8000a62:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a66:	00c2      	lsls	r2, r0, #3
 8000a68:	b2e0      	uxtb	r0, r4
 8000a6a:	f04f 0100 	mov.w	r1, #0
 8000a6e:	f04f 0200 	mov.w	r2, #0
 8000a72:	f04f 0300 	mov.w	r3, #0
 8000a76:	00cb      	lsls	r3, r1, #3
 8000a78:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000a7c:	00c2      	lsls	r2, r0, #3
 8000a7e:	4623      	mov	r3, r4
 8000a80:	3307      	adds	r3, #7
 8000a82:	08db      	lsrs	r3, r3, #3
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	ebad 0d03 	sub.w	sp, sp, r3
 8000a8a:	ab02      	add	r3, sp, #8
 8000a8c:	3300      	adds	r3, #0
 8000a8e:	637b      	str	r3, [r7, #52]	; 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      uart_receive(&c, 1);
 8000a90:	1cfb      	adds	r3, r7, #3
 8000a92:	2101      	movs	r1, #1
 8000a94:	4618      	mov	r0, r3
 8000a96:	f000 fa4d 	bl	8000f34 <uart_receive>
      if (c == '\r')
 8000a9a:	78fb      	ldrb	r3, [r7, #3]
 8000a9c:	2b0d      	cmp	r3, #13
 8000a9e:	d104      	bne.n	8000aaa <main+0xda>
          uart_send("\r\n", 2);
 8000aa0:	2102      	movs	r1, #2
 8000aa2:	4816      	ldr	r0, [pc, #88]	; (8000afc <main+0x12c>)
 8000aa4:	f000 fa32 	bl	8000f0c <uart_send>
 8000aa8:	e004      	b.n	8000ab4 <main+0xe4>
      else
          uart_send(&c, 1);
 8000aaa:	1cfb      	adds	r3, r7, #3
 8000aac:	2101      	movs	r1, #1
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f000 fa2c 	bl	8000f0c <uart_send>


      HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	4619      	mov	r1, r3
 8000aba:	480f      	ldr	r0, [pc, #60]	; (8000af8 <main+0x128>)
 8000abc:	f002 fb60 	bl	8003180 <HAL_RTC_GetTime>
      sprintf(buf, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 8000ac0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000ac2:	793b      	ldrb	r3, [r7, #4]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	797b      	ldrb	r3, [r7, #5]
 8000ac8:	4619      	mov	r1, r3
 8000aca:	79bb      	ldrb	r3, [r7, #6]
 8000acc:	9300      	str	r3, [sp, #0]
 8000ace:	460b      	mov	r3, r1
 8000ad0:	490b      	ldr	r1, [pc, #44]	; (8000b00 <main+0x130>)
 8000ad2:	f004 fa43 	bl	8004f5c <siprintf>
      uart_println(buf);
 8000ad6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f000 fa3f 	bl	8000f5c <uart_println>

      display_write_row(buf, buf_len -3, 0);
 8000ade:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000ae0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	3b03      	subs	r3, #3
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	2200      	movs	r2, #0
 8000aec:	4619      	mov	r1, r3
 8000aee:	f7ff fe6d 	bl	80007cc <display_write_row>
      uart_receive(&c, 1);
 8000af2:	e7cd      	b.n	8000a90 <main+0xc0>
 8000af4:	08005810 	.word	0x08005810
 8000af8:	200000a0 	.word	0x200000a0
 8000afc:	080057fc 	.word	0x080057fc
 8000b00:	08005800 	.word	0x08005800

08000b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b096      	sub	sp, #88	; 0x58
 8000b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	2244      	movs	r2, #68	; 0x44
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f004 fa1a 	bl	8004f4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b18:	463b      	mov	r3, r7
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	601a      	str	r2, [r3, #0]
 8000b1e:	605a      	str	r2, [r3, #4]
 8000b20:	609a      	str	r2, [r3, #8]
 8000b22:	60da      	str	r2, [r3, #12]
 8000b24:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b26:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b2a:	f000 ff13 	bl	8001954 <HAL_PWREx_ControlVoltageScaling>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b34:	f000 f84a 	bl	8000bcc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000b38:	230a      	movs	r3, #10
 8000b3a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b40:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b42:	2310      	movs	r3, #16
 8000b44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b46:	2301      	movs	r3, #1
 8000b48:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b4e:	2302      	movs	r3, #2
 8000b50:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b52:	2301      	movs	r3, #1
 8000b54:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b56:	230a      	movs	r3, #10
 8000b58:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b5a:	2307      	movs	r3, #7
 8000b5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b62:	2302      	movs	r3, #2
 8000b64:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 ff48 	bl	8001a00 <HAL_RCC_OscConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000b76:	f000 f829 	bl	8000bcc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b7a:	230f      	movs	r3, #15
 8000b7c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b7e:	2303      	movs	r3, #3
 8000b80:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b82:	2300      	movs	r3, #0
 8000b84:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b86:	2300      	movs	r3, #0
 8000b88:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b8e:	463b      	mov	r3, r7
 8000b90:	2104      	movs	r1, #4
 8000b92:	4618      	mov	r0, r3
 8000b94:	f001 fb1a 	bl	80021cc <HAL_RCC_ClockConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000b9e:	f000 f815 	bl	8000bcc <Error_Handler>
  }
}
 8000ba2:	bf00      	nop
 8000ba4:	3758      	adds	r7, #88	; 0x58
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
	...

08000bac <HAL_UART_TxCpltCallback>:
* @note This example shows a simple way to report end of IT Tx transfer, and
* you can add your own implementation.
* @retval None
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
    /* Set transmission flag: transfer complete*/
    uartReady = SET;
 8000bb4:	4b04      	ldr	r3, [pc, #16]	; (8000bc8 <HAL_UART_TxCpltCallback+0x1c>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000090 	.word	0x20000090

08000bcc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    handle_error();
 8000bd0:	f7ff fe62 	bl	8000898 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8000bd4:	bf00      	nop
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000bdc:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <MX_RTC_Init+0x48>)
 8000bde:	4a11      	ldr	r2, [pc, #68]	; (8000c24 <MX_RTC_Init+0x4c>)
 8000be0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_RTC_Init+0x48>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000be8:	4b0d      	ldr	r3, [pc, #52]	; (8000c20 <MX_RTC_Init+0x48>)
 8000bea:	227f      	movs	r2, #127	; 0x7f
 8000bec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000bee:	4b0c      	ldr	r3, [pc, #48]	; (8000c20 <MX_RTC_Init+0x48>)
 8000bf0:	22ff      	movs	r2, #255	; 0xff
 8000bf2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000bf4:	4b0a      	ldr	r3, [pc, #40]	; (8000c20 <MX_RTC_Init+0x48>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <MX_RTC_Init+0x48>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000c00:	4b07      	ldr	r3, [pc, #28]	; (8000c20 <MX_RTC_Init+0x48>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <MX_RTC_Init+0x48>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000c0c:	4804      	ldr	r0, [pc, #16]	; (8000c20 <MX_RTC_Init+0x48>)
 8000c0e:	f002 f99f 	bl	8002f50 <HAL_RTC_Init>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8000c18:	f7ff ffd8 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000c1c:	bf00      	nop
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	200000a0 	.word	0x200000a0
 8000c24:	40002800 	.word	0x40002800

08000c28 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b0a4      	sub	sp, #144	; 0x90
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c30:	f107 0308 	add.w	r3, r7, #8
 8000c34:	2288      	movs	r2, #136	; 0x88
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f004 f987 	bl	8004f4c <memset>
  if(rtcHandle->Instance==RTC)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4a10      	ldr	r2, [pc, #64]	; (8000c84 <HAL_RTC_MspInit+0x5c>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d118      	bne.n	8000c7a <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c4c:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c4e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c56:	f107 0308 	add.w	r3, r7, #8
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f001 fcbc 	bl	80025d8 <HAL_RCCEx_PeriphCLKConfig>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000c66:	f7ff ffb1 	bl	8000bcc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c6a:	4b07      	ldr	r3, [pc, #28]	; (8000c88 <HAL_RTC_MspInit+0x60>)
 8000c6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c70:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <HAL_RTC_MspInit+0x60>)
 8000c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3790      	adds	r7, #144	; 0x90
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40002800 	.word	0x40002800
 8000c88:	40021000 	.word	0x40021000

08000c8c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000c90:	4b1b      	ldr	r3, [pc, #108]	; (8000d00 <MX_SPI2_Init+0x74>)
 8000c92:	4a1c      	ldr	r2, [pc, #112]	; (8000d04 <MX_SPI2_Init+0x78>)
 8000c94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c96:	4b1a      	ldr	r3, [pc, #104]	; (8000d00 <MX_SPI2_Init+0x74>)
 8000c98:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000c9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000c9e:	4b18      	ldr	r3, [pc, #96]	; (8000d00 <MX_SPI2_Init+0x74>)
 8000ca0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000ca4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_SPI2_Init+0x74>)
 8000ca8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cac:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000cae:	4b14      	ldr	r3, [pc, #80]	; (8000d00 <MX_SPI2_Init+0x74>)
 8000cb0:	2202      	movs	r2, #2
 8000cb2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000cb4:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <MX_SPI2_Init+0x74>)
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <MX_SPI2_Init+0x74>)
 8000cbc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000cc0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_SPI2_Init+0x74>)
 8000cc4:	2230      	movs	r2, #48	; 0x30
 8000cc6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000cc8:	4b0d      	ldr	r3, [pc, #52]	; (8000d00 <MX_SPI2_Init+0x74>)
 8000cca:	2280      	movs	r2, #128	; 0x80
 8000ccc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <MX_SPI2_Init+0x74>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cd4:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <MX_SPI2_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000cda:	4b09      	ldr	r3, [pc, #36]	; (8000d00 <MX_SPI2_Init+0x74>)
 8000cdc:	2207      	movs	r2, #7
 8000cde:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ce0:	4b07      	ldr	r3, [pc, #28]	; (8000d00 <MX_SPI2_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <MX_SPI2_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000cec:	4804      	ldr	r0, [pc, #16]	; (8000d00 <MX_SPI2_Init+0x74>)
 8000cee:	f002 fbfb 	bl	80034e8 <HAL_SPI_Init>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 8000cf8:	f7ff ff68 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cfc:	bf00      	nop
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	200000c4 	.word	0x200000c4
 8000d04:	40003800 	.word	0x40003800

08000d08 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08a      	sub	sp, #40	; 0x28
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	2200      	movs	r2, #0
 8000d16:	601a      	str	r2, [r3, #0]
 8000d18:	605a      	str	r2, [r3, #4]
 8000d1a:	609a      	str	r2, [r3, #8]
 8000d1c:	60da      	str	r2, [r3, #12]
 8000d1e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a25      	ldr	r2, [pc, #148]	; (8000dbc <HAL_SPI_MspInit+0xb4>)
 8000d26:	4293      	cmp	r3, r2
 8000d28:	d144      	bne.n	8000db4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d2a:	4b25      	ldr	r3, [pc, #148]	; (8000dc0 <HAL_SPI_MspInit+0xb8>)
 8000d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2e:	4a24      	ldr	r2, [pc, #144]	; (8000dc0 <HAL_SPI_MspInit+0xb8>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d34:	6593      	str	r3, [r2, #88]	; 0x58
 8000d36:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <HAL_SPI_MspInit+0xb8>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d42:	4b1f      	ldr	r3, [pc, #124]	; (8000dc0 <HAL_SPI_MspInit+0xb8>)
 8000d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d46:	4a1e      	ldr	r2, [pc, #120]	; (8000dc0 <HAL_SPI_MspInit+0xb8>)
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d4e:	4b1c      	ldr	r3, [pc, #112]	; (8000dc0 <HAL_SPI_MspInit+0xb8>)
 8000d50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d52:	f003 0304 	and.w	r3, r3, #4
 8000d56:	60fb      	str	r3, [r7, #12]
 8000d58:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d5a:	4b19      	ldr	r3, [pc, #100]	; (8000dc0 <HAL_SPI_MspInit+0xb8>)
 8000d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5e:	4a18      	ldr	r2, [pc, #96]	; (8000dc0 <HAL_SPI_MspInit+0xb8>)
 8000d60:	f043 0302 	orr.w	r3, r3, #2
 8000d64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d66:	4b16      	ldr	r3, [pc, #88]	; (8000dc0 <HAL_SPI_MspInit+0xb8>)
 8000d68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6a:	f003 0302 	and.w	r3, r3, #2
 8000d6e:	60bb      	str	r3, [r7, #8]
 8000d70:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = Display_OUT_Pin;
 8000d72:	2308      	movs	r3, #8
 8000d74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7e:	2303      	movs	r3, #3
 8000d80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d82:	2305      	movs	r3, #5
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Display_OUT_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 0314 	add.w	r3, r7, #20
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	480d      	ldr	r0, [pc, #52]	; (8000dc4 <HAL_SPI_MspInit+0xbc>)
 8000d8e:	f000 fc11 	bl	80015b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Dispay_CLK_Pin|Display_CS_Pin;
 8000d92:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000da4:	2305      	movs	r3, #5
 8000da6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4619      	mov	r1, r3
 8000dae:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <HAL_SPI_MspInit+0xc0>)
 8000db0:	f000 fc00 	bl	80015b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000db4:	bf00      	nop
 8000db6:	3728      	adds	r7, #40	; 0x28
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40003800 	.word	0x40003800
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	48000800 	.word	0x48000800
 8000dc8:	48000400 	.word	0x48000400

08000dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dd2:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <HAL_MspInit+0x44>)
 8000dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd6:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <HAL_MspInit+0x44>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6613      	str	r3, [r2, #96]	; 0x60
 8000dde:	4b0c      	ldr	r3, [pc, #48]	; (8000e10 <HAL_MspInit+0x44>)
 8000de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <HAL_MspInit+0x44>)
 8000dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dee:	4a08      	ldr	r2, [pc, #32]	; (8000e10 <HAL_MspInit+0x44>)
 8000df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df4:	6593      	str	r3, [r2, #88]	; 0x58
 8000df6:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <HAL_MspInit+0x44>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfe:	603b      	str	r3, [r7, #0]
 8000e00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	370c      	adds	r7, #12
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40021000 	.word	0x40021000

08000e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e18:	e7fe      	b.n	8000e18 <NMI_Handler+0x4>

08000e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <MemManage_Handler+0x4>

08000e26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e60:	f000 f9d4 	bl	800120c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8000e6c:	4802      	ldr	r0, [pc, #8]	; (8000e78 <UART5_IRQHandler+0x10>)
 8000e6e:	f003 f865 	bl	8003f3c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000128 	.word	0x20000128

08000e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e84:	4a14      	ldr	r2, [pc, #80]	; (8000ed8 <_sbrk+0x5c>)
 8000e86:	4b15      	ldr	r3, [pc, #84]	; (8000edc <_sbrk+0x60>)
 8000e88:	1ad3      	subs	r3, r2, r3
 8000e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <_sbrk+0x64>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d102      	bne.n	8000e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e98:	4b11      	ldr	r3, [pc, #68]	; (8000ee0 <_sbrk+0x64>)
 8000e9a:	4a12      	ldr	r2, [pc, #72]	; (8000ee4 <_sbrk+0x68>)
 8000e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9e:	4b10      	ldr	r3, [pc, #64]	; (8000ee0 <_sbrk+0x64>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d207      	bcs.n	8000ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000eac:	f004 f824 	bl	8004ef8 <__errno>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	220c      	movs	r2, #12
 8000eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eba:	e009      	b.n	8000ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ebc:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <_sbrk+0x64>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ec2:	4b07      	ldr	r3, [pc, #28]	; (8000ee0 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	4a05      	ldr	r2, [pc, #20]	; (8000ee0 <_sbrk+0x64>)
 8000ecc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ece:	68fb      	ldr	r3, [r7, #12]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	3718      	adds	r7, #24
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20018000 	.word	0x20018000
 8000edc:	00000400 	.word	0x00000400
 8000ee0:	20000094 	.word	0x20000094
 8000ee4:	200001c0 	.word	0x200001c0

08000ee8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <SystemInit+0x20>)
 8000eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ef2:	4a05      	ldr	r2, [pc, #20]	; (8000f08 <SystemInit+0x20>)
 8000ef4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ef8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <uart_send>:

/**
 * @brief Send a string over uart
 * @param[in] message The character array to send
 */
int uart_send (char *buffer, uint16_t length) {
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Transmit(&huart5, (uint8_t*)buffer, length, TIMEOUT);
 8000f18:	887a      	ldrh	r2, [r7, #2]
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	6879      	ldr	r1, [r7, #4]
 8000f20:	4803      	ldr	r0, [pc, #12]	; (8000f30 <uart_send+0x24>)
 8000f22:	f002 fea5 	bl	8003c70 <HAL_UART_Transmit>
 8000f26:	4603      	mov	r3, r0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3708      	adds	r7, #8
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	20000128 	.word	0x20000128

08000f34 <uart_receive>:
/**
 * @brief Recieve a string over uart
 * @param[out] buffer The place to write the recieved string
 * @param[in] length The amount of data to read
 */
int uart_receive (char *buffer, uint16_t length) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
 8000f3c:	460b      	mov	r3, r1
 8000f3e:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Receive(&huart5, (uint8_t *)buffer, length, TIMEOUT);
 8000f40:	887a      	ldrh	r2, [r7, #2]
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295
 8000f46:	6879      	ldr	r1, [r7, #4]
 8000f48:	4803      	ldr	r0, [pc, #12]	; (8000f58 <uart_receive+0x24>)
 8000f4a:	f002 ff25 	bl	8003d98 <HAL_UART_Receive>
 8000f4e:	4603      	mov	r3, r0
}
 8000f50:	4618      	mov	r0, r3
 8000f52:	3708      	adds	r7, #8
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000128 	.word	0x20000128

08000f5c <uart_println>:

/**
 * @brief send a string line to uart
 * @param string The string to send
 */
int uart_println (char *string) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    uart_send(string, strlen(string));
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff f933 	bl	80001d0 <strlen>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	4619      	mov	r1, r3
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff ffcb 	bl	8000f0c <uart_send>
    uart_send("\r\n", 2);
 8000f76:	2102      	movs	r1, #2
 8000f78:	4803      	ldr	r0, [pc, #12]	; (8000f88 <uart_println+0x2c>)
 8000f7a:	f7ff ffc7 	bl	8000f0c <uart_send>
}
 8000f7e:	bf00      	nop
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	0800582c 	.word	0x0800582c

08000f8c <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000f90:	4b14      	ldr	r3, [pc, #80]	; (8000fe4 <MX_UART5_Init+0x58>)
 8000f92:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <MX_UART5_Init+0x5c>)
 8000f94:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <MX_UART5_Init+0x58>)
 8000f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f9c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <MX_UART5_Init+0x58>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8000fa4:	4b0f      	ldr	r3, [pc, #60]	; (8000fe4 <MX_UART5_Init+0x58>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8000faa:	4b0e      	ldr	r3, [pc, #56]	; (8000fe4 <MX_UART5_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8000fb0:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <MX_UART5_Init+0x58>)
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fb6:	4b0b      	ldr	r3, [pc, #44]	; (8000fe4 <MX_UART5_Init+0x58>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <MX_UART5_Init+0x58>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fc2:	4b08      	ldr	r3, [pc, #32]	; (8000fe4 <MX_UART5_Init+0x58>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fc8:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <MX_UART5_Init+0x58>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8000fce:	4805      	ldr	r0, [pc, #20]	; (8000fe4 <MX_UART5_Init+0x58>)
 8000fd0:	f002 fe00 	bl	8003bd4 <HAL_UART_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8000fda:	f7ff fdf7 	bl	8000bcc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000128 	.word	0x20000128
 8000fe8:	40005000 	.word	0x40005000

08000fec <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b0ac      	sub	sp, #176	; 0xb0
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	2288      	movs	r2, #136	; 0x88
 800100a:	2100      	movs	r1, #0
 800100c:	4618      	mov	r0, r3
 800100e:	f003 ff9d 	bl	8004f4c <memset>
  if(uartHandle->Instance==UART5)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a36      	ldr	r2, [pc, #216]	; (80010f0 <HAL_UART_MspInit+0x104>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d164      	bne.n	80010e6 <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800101c:	2310      	movs	r3, #16
 800101e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001020:	2300      	movs	r3, #0
 8001022:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4618      	mov	r0, r3
 800102a:	f001 fad5 	bl	80025d8 <HAL_RCCEx_PeriphCLKConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001034:	f7ff fdca 	bl	8000bcc <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001038:	4b2e      	ldr	r3, [pc, #184]	; (80010f4 <HAL_UART_MspInit+0x108>)
 800103a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103c:	4a2d      	ldr	r2, [pc, #180]	; (80010f4 <HAL_UART_MspInit+0x108>)
 800103e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001042:	6593      	str	r3, [r2, #88]	; 0x58
 8001044:	4b2b      	ldr	r3, [pc, #172]	; (80010f4 <HAL_UART_MspInit+0x108>)
 8001046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001048:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800104c:	613b      	str	r3, [r7, #16]
 800104e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001050:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <HAL_UART_MspInit+0x108>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001054:	4a27      	ldr	r2, [pc, #156]	; (80010f4 <HAL_UART_MspInit+0x108>)
 8001056:	f043 0304 	orr.w	r3, r3, #4
 800105a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105c:	4b25      	ldr	r3, [pc, #148]	; (80010f4 <HAL_UART_MspInit+0x108>)
 800105e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001060:	f003 0304 	and.w	r3, r3, #4
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001068:	4b22      	ldr	r3, [pc, #136]	; (80010f4 <HAL_UART_MspInit+0x108>)
 800106a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106c:	4a21      	ldr	r2, [pc, #132]	; (80010f4 <HAL_UART_MspInit+0x108>)
 800106e:	f043 0308 	orr.w	r3, r3, #8
 8001072:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001074:	4b1f      	ldr	r3, [pc, #124]	; (80010f4 <HAL_UART_MspInit+0x108>)
 8001076:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001078:	f003 0308 	and.w	r3, r3, #8
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001080:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001084:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	2302      	movs	r3, #2
 800108a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800108e:	2300      	movs	r3, #0
 8001090:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001094:	2303      	movs	r3, #3
 8001096:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800109a:	2308      	movs	r3, #8
 800109c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010a0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010a4:	4619      	mov	r1, r3
 80010a6:	4814      	ldr	r0, [pc, #80]	; (80010f8 <HAL_UART_MspInit+0x10c>)
 80010a8:	f000 fa84 	bl	80015b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010ac:	2304      	movs	r3, #4
 80010ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010be:	2303      	movs	r3, #3
 80010c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80010c4:	2308      	movs	r3, #8
 80010c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010ce:	4619      	mov	r1, r3
 80010d0:	480a      	ldr	r0, [pc, #40]	; (80010fc <HAL_UART_MspInit+0x110>)
 80010d2:	f000 fa6f 	bl	80015b4 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2100      	movs	r1, #0
 80010da:	2035      	movs	r0, #53	; 0x35
 80010dc:	f000 f9b5 	bl	800144a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80010e0:	2035      	movs	r0, #53	; 0x35
 80010e2:	f000 f9ce 	bl	8001482 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 80010e6:	bf00      	nop
 80010e8:	37b0      	adds	r7, #176	; 0xb0
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	40005000 	.word	0x40005000
 80010f4:	40021000 	.word	0x40021000
 80010f8:	48000800 	.word	0x48000800
 80010fc:	48000c00 	.word	0x48000c00

08001100 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001100:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001138 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001104:	f7ff fef0 	bl	8000ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001108:	480c      	ldr	r0, [pc, #48]	; (800113c <LoopForever+0x6>)
  ldr r1, =_edata
 800110a:	490d      	ldr	r1, [pc, #52]	; (8001140 <LoopForever+0xa>)
  ldr r2, =_sidata
 800110c:	4a0d      	ldr	r2, [pc, #52]	; (8001144 <LoopForever+0xe>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a0a      	ldr	r2, [pc, #40]	; (8001148 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001120:	4c0a      	ldr	r4, [pc, #40]	; (800114c <LoopForever+0x16>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800112e:	f003 fee9 	bl	8004f04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001132:	f7ff fc4d 	bl	80009d0 <main>

08001136 <LoopForever>:

LoopForever:
    b LoopForever
 8001136:	e7fe      	b.n	8001136 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001138:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800113c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001140:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001144:	080058bc 	.word	0x080058bc
  ldr r2, =_sbss
 8001148:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800114c:	200001c0 	.word	0x200001c0

08001150 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001150:	e7fe      	b.n	8001150 <ADC1_2_IRQHandler>
	...

08001154 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800115e:	4b0c      	ldr	r3, [pc, #48]	; (8001190 <HAL_Init+0x3c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <HAL_Init+0x3c>)
 8001164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001168:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800116a:	2003      	movs	r0, #3
 800116c:	f000 f962 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001170:	2000      	movs	r0, #0
 8001172:	f000 f80f 	bl	8001194 <HAL_InitTick>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d002      	beq.n	8001182 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800117c:	2301      	movs	r3, #1
 800117e:	71fb      	strb	r3, [r7, #7]
 8001180:	e001      	b.n	8001186 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001182:	f7ff fe23 	bl	8000dcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001186:	79fb      	ldrb	r3, [r7, #7]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3708      	adds	r7, #8
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40022000 	.word	0x40022000

08001194 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800119c:	2300      	movs	r3, #0
 800119e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <HAL_InitTick+0x6c>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d023      	beq.n	80011f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011a8:	4b16      	ldr	r3, [pc, #88]	; (8001204 <HAL_InitTick+0x70>)
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_InitTick+0x6c>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	4619      	mov	r1, r3
 80011b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f96d 	bl	800149e <HAL_SYSTICK_Config>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d10f      	bne.n	80011ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2b0f      	cmp	r3, #15
 80011ce:	d809      	bhi.n	80011e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d0:	2200      	movs	r2, #0
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	f04f 30ff 	mov.w	r0, #4294967295
 80011d8:	f000 f937 	bl	800144a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011dc:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <HAL_InitTick+0x74>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e007      	b.n	80011f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
 80011e8:	e004      	b.n	80011f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	73fb      	strb	r3, [r7, #15]
 80011ee:	e001      	b.n	80011f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011f0:	2301      	movs	r3, #1
 80011f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	2000000c 	.word	0x2000000c
 8001204:	20000004 	.word	0x20000004
 8001208:	20000008 	.word	0x20000008

0800120c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_IncTick+0x20>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	461a      	mov	r2, r3
 8001216:	4b06      	ldr	r3, [pc, #24]	; (8001230 <HAL_IncTick+0x24>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4413      	add	r3, r2
 800121c:	4a04      	ldr	r2, [pc, #16]	; (8001230 <HAL_IncTick+0x24>)
 800121e:	6013      	str	r3, [r2, #0]
}
 8001220:	bf00      	nop
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop
 800122c:	2000000c 	.word	0x2000000c
 8001230:	200001ac 	.word	0x200001ac

08001234 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  return uwTick;
 8001238:	4b03      	ldr	r3, [pc, #12]	; (8001248 <HAL_GetTick+0x14>)
 800123a:	681b      	ldr	r3, [r3, #0]
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	200001ac 	.word	0x200001ac

0800124c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001254:	f7ff ffee 	bl	8001234 <HAL_GetTick>
 8001258:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001264:	d005      	beq.n	8001272 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001266:	4b0a      	ldr	r3, [pc, #40]	; (8001290 <HAL_Delay+0x44>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	461a      	mov	r2, r3
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	4413      	add	r3, r2
 8001270:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001272:	bf00      	nop
 8001274:	f7ff ffde 	bl	8001234 <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	68bb      	ldr	r3, [r7, #8]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	68fa      	ldr	r2, [r7, #12]
 8001280:	429a      	cmp	r2, r3
 8001282:	d8f7      	bhi.n	8001274 <HAL_Delay+0x28>
  {
  }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	2000000c 	.word	0x2000000c

08001294 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	f003 0307 	and.w	r3, r3, #7
 80012a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012a4:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012aa:	68ba      	ldr	r2, [r7, #8]
 80012ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012b0:	4013      	ands	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b8:	68bb      	ldr	r3, [r7, #8]
 80012ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012c6:	4a04      	ldr	r2, [pc, #16]	; (80012d8 <__NVIC_SetPriorityGrouping+0x44>)
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	60d3      	str	r3, [r2, #12]
}
 80012cc:	bf00      	nop
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00

080012dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012e0:	4b04      	ldr	r3, [pc, #16]	; (80012f4 <__NVIC_GetPriorityGrouping+0x18>)
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	0a1b      	lsrs	r3, r3, #8
 80012e6:	f003 0307 	and.w	r3, r3, #7
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr
 80012f4:	e000ed00 	.word	0xe000ed00

080012f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001306:	2b00      	cmp	r3, #0
 8001308:	db0b      	blt.n	8001322 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800130a:	79fb      	ldrb	r3, [r7, #7]
 800130c:	f003 021f 	and.w	r2, r3, #31
 8001310:	4907      	ldr	r1, [pc, #28]	; (8001330 <__NVIC_EnableIRQ+0x38>)
 8001312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001316:	095b      	lsrs	r3, r3, #5
 8001318:	2001      	movs	r0, #1
 800131a:	fa00 f202 	lsl.w	r2, r0, r2
 800131e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001322:	bf00      	nop
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
 800132e:	bf00      	nop
 8001330:	e000e100 	.word	0xe000e100

08001334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	4603      	mov	r3, r0
 800133c:	6039      	str	r1, [r7, #0]
 800133e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001344:	2b00      	cmp	r3, #0
 8001346:	db0a      	blt.n	800135e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	b2da      	uxtb	r2, r3
 800134c:	490c      	ldr	r1, [pc, #48]	; (8001380 <__NVIC_SetPriority+0x4c>)
 800134e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001352:	0112      	lsls	r2, r2, #4
 8001354:	b2d2      	uxtb	r2, r2
 8001356:	440b      	add	r3, r1
 8001358:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800135c:	e00a      	b.n	8001374 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4908      	ldr	r1, [pc, #32]	; (8001384 <__NVIC_SetPriority+0x50>)
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	3b04      	subs	r3, #4
 800136c:	0112      	lsls	r2, r2, #4
 800136e:	b2d2      	uxtb	r2, r2
 8001370:	440b      	add	r3, r1
 8001372:	761a      	strb	r2, [r3, #24]
}
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001388:	b480      	push	{r7}
 800138a:	b089      	sub	sp, #36	; 0x24
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	f1c3 0307 	rsb	r3, r3, #7
 80013a2:	2b04      	cmp	r3, #4
 80013a4:	bf28      	it	cs
 80013a6:	2304      	movcs	r3, #4
 80013a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3304      	adds	r3, #4
 80013ae:	2b06      	cmp	r3, #6
 80013b0:	d902      	bls.n	80013b8 <NVIC_EncodePriority+0x30>
 80013b2:	69fb      	ldr	r3, [r7, #28]
 80013b4:	3b03      	subs	r3, #3
 80013b6:	e000      	b.n	80013ba <NVIC_EncodePriority+0x32>
 80013b8:	2300      	movs	r3, #0
 80013ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	f04f 32ff 	mov.w	r2, #4294967295
 80013c0:	69bb      	ldr	r3, [r7, #24]
 80013c2:	fa02 f303 	lsl.w	r3, r2, r3
 80013c6:	43da      	mvns	r2, r3
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	401a      	ands	r2, r3
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d0:	f04f 31ff 	mov.w	r1, #4294967295
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	fa01 f303 	lsl.w	r3, r1, r3
 80013da:	43d9      	mvns	r1, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e0:	4313      	orrs	r3, r2
         );
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3724      	adds	r7, #36	; 0x24
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
	...

080013f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001400:	d301      	bcc.n	8001406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001402:	2301      	movs	r3, #1
 8001404:	e00f      	b.n	8001426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <SysTick_Config+0x40>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140e:	210f      	movs	r1, #15
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f7ff ff8e 	bl	8001334 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <SysTick_Config+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <SysTick_Config+0x40>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010

08001434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff29 	bl	8001294 <__NVIC_SetPriorityGrouping>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800145c:	f7ff ff3e 	bl	80012dc <__NVIC_GetPriorityGrouping>
 8001460:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	6978      	ldr	r0, [r7, #20]
 8001468:	f7ff ff8e 	bl	8001388 <NVIC_EncodePriority>
 800146c:	4602      	mov	r2, r0
 800146e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff5d 	bl	8001334 <__NVIC_SetPriority>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	4603      	mov	r3, r0
 800148a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800148c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff31 	bl	80012f8 <__NVIC_EnableIRQ>
}
 8001496:	bf00      	nop
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	f7ff ffa2 	bl	80013f0 <SysTick_Config>
 80014ac:	4603      	mov	r3, r0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}

080014b6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014b6:	b480      	push	{r7}
 80014b8:	b085      	sub	sp, #20
 80014ba:	af00      	add	r7, sp, #0
 80014bc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014be:	2300      	movs	r3, #0
 80014c0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d008      	beq.n	80014e0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2204      	movs	r2, #4
 80014d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e022      	b.n	8001526 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f022 020e 	bic.w	r2, r2, #14
 80014ee:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0201 	bic.w	r2, r2, #1
 80014fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001504:	f003 021c 	and.w	r2, r3, #28
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150c:	2101      	movs	r1, #1
 800150e:	fa01 f202 	lsl.w	r2, r1, r2
 8001512:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001524:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001526:	4618      	mov	r0, r3
 8001528:	3714      	adds	r7, #20
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b084      	sub	sp, #16
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800153a:	2300      	movs	r3, #0
 800153c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d005      	beq.n	8001556 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2204      	movs	r2, #4
 800154e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e029      	b.n	80015aa <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 020e 	bic.w	r2, r2, #14
 8001564:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 0201 	bic.w	r2, r2, #1
 8001574:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157a:	f003 021c 	and.w	r2, r3, #28
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001582:	2101      	movs	r1, #1
 8001584:	fa01 f202 	lsl.w	r2, r1, r2
 8001588:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2201      	movs	r2, #1
 800158e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d003      	beq.n	80015aa <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	4798      	blx	r3
    }
  }
  return status;
 80015aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3710      	adds	r7, #16
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b087      	sub	sp, #28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015be:	2300      	movs	r3, #0
 80015c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c2:	e17f      	b.n	80018c4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	2101      	movs	r1, #1
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	fa01 f303 	lsl.w	r3, r1, r3
 80015d0:	4013      	ands	r3, r2
 80015d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	f000 8171 	beq.w	80018be <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d005      	beq.n	80015f4 <HAL_GPIO_Init+0x40>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f003 0303 	and.w	r3, r3, #3
 80015f0:	2b02      	cmp	r3, #2
 80015f2:	d130      	bne.n	8001656 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	2203      	movs	r2, #3
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	fa02 f303 	lsl.w	r3, r2, r3
 8001618:	693a      	ldr	r2, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800162a:	2201      	movs	r2, #1
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43db      	mvns	r3, r3
 8001634:	693a      	ldr	r2, [r7, #16]
 8001636:	4013      	ands	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	091b      	lsrs	r3, r3, #4
 8001640:	f003 0201 	and.w	r2, r3, #1
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	fa02 f303 	lsl.w	r3, r2, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	693a      	ldr	r2, [r7, #16]
 8001654:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	f003 0303 	and.w	r3, r3, #3
 800165e:	2b03      	cmp	r3, #3
 8001660:	d118      	bne.n	8001694 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001666:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001668:	2201      	movs	r2, #1
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	08db      	lsrs	r3, r3, #3
 800167e:	f003 0201 	and.w	r2, r3, #1
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	693a      	ldr	r2, [r7, #16]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b03      	cmp	r3, #3
 800169e:	d017      	beq.n	80016d0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	005b      	lsls	r3, r3, #1
 80016aa:	2203      	movs	r2, #3
 80016ac:	fa02 f303 	lsl.w	r3, r2, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	693a      	ldr	r2, [r7, #16]
 80016b4:	4013      	ands	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	693a      	ldr	r2, [r7, #16]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d123      	bne.n	8001724 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	08da      	lsrs	r2, r3, #3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3208      	adds	r2, #8
 80016e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	f003 0307 	and.w	r3, r3, #7
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	220f      	movs	r2, #15
 80016f4:	fa02 f303 	lsl.w	r3, r2, r3
 80016f8:	43db      	mvns	r3, r3
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	4013      	ands	r3, r2
 80016fe:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	691a      	ldr	r2, [r3, #16]
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	f003 0307 	and.w	r3, r3, #7
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	08da      	lsrs	r2, r3, #3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	3208      	adds	r2, #8
 800171e:	6939      	ldr	r1, [r7, #16]
 8001720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	2203      	movs	r2, #3
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	43db      	mvns	r3, r3
 8001736:	693a      	ldr	r2, [r7, #16]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f003 0203 	and.w	r2, r3, #3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	005b      	lsls	r3, r3, #1
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	693a      	ldr	r2, [r7, #16]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 80ac 	beq.w	80018be <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	4b5f      	ldr	r3, [pc, #380]	; (80018e4 <HAL_GPIO_Init+0x330>)
 8001768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176a:	4a5e      	ldr	r2, [pc, #376]	; (80018e4 <HAL_GPIO_Init+0x330>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6613      	str	r3, [r2, #96]	; 0x60
 8001772:	4b5c      	ldr	r3, [pc, #368]	; (80018e4 <HAL_GPIO_Init+0x330>)
 8001774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	60bb      	str	r3, [r7, #8]
 800177c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800177e:	4a5a      	ldr	r2, [pc, #360]	; (80018e8 <HAL_GPIO_Init+0x334>)
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	089b      	lsrs	r3, r3, #2
 8001784:	3302      	adds	r3, #2
 8001786:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800178a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f003 0303 	and.w	r3, r3, #3
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	220f      	movs	r2, #15
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43db      	mvns	r3, r3
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	4013      	ands	r3, r2
 80017a0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80017a8:	d025      	beq.n	80017f6 <HAL_GPIO_Init+0x242>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	4a4f      	ldr	r2, [pc, #316]	; (80018ec <HAL_GPIO_Init+0x338>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d01f      	beq.n	80017f2 <HAL_GPIO_Init+0x23e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4a4e      	ldr	r2, [pc, #312]	; (80018f0 <HAL_GPIO_Init+0x33c>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d019      	beq.n	80017ee <HAL_GPIO_Init+0x23a>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4a4d      	ldr	r2, [pc, #308]	; (80018f4 <HAL_GPIO_Init+0x340>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d013      	beq.n	80017ea <HAL_GPIO_Init+0x236>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4a4c      	ldr	r2, [pc, #304]	; (80018f8 <HAL_GPIO_Init+0x344>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d00d      	beq.n	80017e6 <HAL_GPIO_Init+0x232>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	4a4b      	ldr	r2, [pc, #300]	; (80018fc <HAL_GPIO_Init+0x348>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d007      	beq.n	80017e2 <HAL_GPIO_Init+0x22e>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4a      	ldr	r2, [pc, #296]	; (8001900 <HAL_GPIO_Init+0x34c>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d101      	bne.n	80017de <HAL_GPIO_Init+0x22a>
 80017da:	2306      	movs	r3, #6
 80017dc:	e00c      	b.n	80017f8 <HAL_GPIO_Init+0x244>
 80017de:	2307      	movs	r3, #7
 80017e0:	e00a      	b.n	80017f8 <HAL_GPIO_Init+0x244>
 80017e2:	2305      	movs	r3, #5
 80017e4:	e008      	b.n	80017f8 <HAL_GPIO_Init+0x244>
 80017e6:	2304      	movs	r3, #4
 80017e8:	e006      	b.n	80017f8 <HAL_GPIO_Init+0x244>
 80017ea:	2303      	movs	r3, #3
 80017ec:	e004      	b.n	80017f8 <HAL_GPIO_Init+0x244>
 80017ee:	2302      	movs	r3, #2
 80017f0:	e002      	b.n	80017f8 <HAL_GPIO_Init+0x244>
 80017f2:	2301      	movs	r3, #1
 80017f4:	e000      	b.n	80017f8 <HAL_GPIO_Init+0x244>
 80017f6:	2300      	movs	r3, #0
 80017f8:	697a      	ldr	r2, [r7, #20]
 80017fa:	f002 0203 	and.w	r2, r2, #3
 80017fe:	0092      	lsls	r2, r2, #2
 8001800:	4093      	lsls	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4313      	orrs	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001808:	4937      	ldr	r1, [pc, #220]	; (80018e8 <HAL_GPIO_Init+0x334>)
 800180a:	697b      	ldr	r3, [r7, #20]
 800180c:	089b      	lsrs	r3, r3, #2
 800180e:	3302      	adds	r3, #2
 8001810:	693a      	ldr	r2, [r7, #16]
 8001812:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001816:	4b3b      	ldr	r3, [pc, #236]	; (8001904 <HAL_GPIO_Init+0x350>)
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	43db      	mvns	r3, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4013      	ands	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d003      	beq.n	800183a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800183a:	4a32      	ldr	r2, [pc, #200]	; (8001904 <HAL_GPIO_Init+0x350>)
 800183c:	693b      	ldr	r3, [r7, #16]
 800183e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001840:	4b30      	ldr	r3, [pc, #192]	; (8001904 <HAL_GPIO_Init+0x350>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d003      	beq.n	8001864 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4313      	orrs	r3, r2
 8001862:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001864:	4a27      	ldr	r2, [pc, #156]	; (8001904 <HAL_GPIO_Init+0x350>)
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800186a:	4b26      	ldr	r3, [pc, #152]	; (8001904 <HAL_GPIO_Init+0x350>)
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	43db      	mvns	r3, r3
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	4013      	ands	r3, r2
 8001878:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	4313      	orrs	r3, r2
 800188c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800188e:	4a1d      	ldr	r2, [pc, #116]	; (8001904 <HAL_GPIO_Init+0x350>)
 8001890:	693b      	ldr	r3, [r7, #16]
 8001892:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001894:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <HAL_GPIO_Init+0x350>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	43db      	mvns	r3, r3
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	4013      	ands	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80018b8:	4a12      	ldr	r2, [pc, #72]	; (8001904 <HAL_GPIO_Init+0x350>)
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	3301      	adds	r3, #1
 80018c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	681a      	ldr	r2, [r3, #0]
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	fa22 f303 	lsr.w	r3, r2, r3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	f47f ae78 	bne.w	80015c4 <HAL_GPIO_Init+0x10>
  }
}
 80018d4:	bf00      	nop
 80018d6:	bf00      	nop
 80018d8:	371c      	adds	r7, #28
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	40021000 	.word	0x40021000
 80018e8:	40010000 	.word	0x40010000
 80018ec:	48000400 	.word	0x48000400
 80018f0:	48000800 	.word	0x48000800
 80018f4:	48000c00 	.word	0x48000c00
 80018f8:	48001000 	.word	0x48001000
 80018fc:	48001400 	.word	0x48001400
 8001900:	48001800 	.word	0x48001800
 8001904:	40010400 	.word	0x40010400

08001908 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	460b      	mov	r3, r1
 8001912:	807b      	strh	r3, [r7, #2]
 8001914:	4613      	mov	r3, r2
 8001916:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001918:	787b      	ldrb	r3, [r7, #1]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d003      	beq.n	8001926 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800191e:	887a      	ldrh	r2, [r7, #2]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001924:	e002      	b.n	800192c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001926:	887a      	ldrh	r2, [r7, #2]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800192c:	bf00      	nop
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800193c:	4b04      	ldr	r3, [pc, #16]	; (8001950 <HAL_PWREx_GetVoltageRange+0x18>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001944:	4618      	mov	r0, r3
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40007000 	.word	0x40007000

08001954 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001962:	d130      	bne.n	80019c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001964:	4b23      	ldr	r3, [pc, #140]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800196c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001970:	d038      	beq.n	80019e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001972:	4b20      	ldr	r3, [pc, #128]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800197a:	4a1e      	ldr	r2, [pc, #120]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800197c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001980:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001982:	4b1d      	ldr	r3, [pc, #116]	; (80019f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2232      	movs	r2, #50	; 0x32
 8001988:	fb02 f303 	mul.w	r3, r2, r3
 800198c:	4a1b      	ldr	r2, [pc, #108]	; (80019fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800198e:	fba2 2303 	umull	r2, r3, r2, r3
 8001992:	0c9b      	lsrs	r3, r3, #18
 8001994:	3301      	adds	r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001998:	e002      	b.n	80019a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	3b01      	subs	r3, #1
 800199e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019a0:	4b14      	ldr	r3, [pc, #80]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019ac:	d102      	bne.n	80019b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d1f2      	bne.n	800199a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019b4:	4b0f      	ldr	r3, [pc, #60]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019b6:	695b      	ldr	r3, [r3, #20]
 80019b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c0:	d110      	bne.n	80019e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e00f      	b.n	80019e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80019c6:	4b0b      	ldr	r3, [pc, #44]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019d2:	d007      	beq.n	80019e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019dc:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80019de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40007000 	.word	0x40007000
 80019f8:	20000004 	.word	0x20000004
 80019fc:	431bde83 	.word	0x431bde83

08001a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d101      	bne.n	8001a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e3d4      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a12:	4ba1      	ldr	r3, [pc, #644]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 030c 	and.w	r3, r3, #12
 8001a1a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a1c:	4b9e      	ldr	r3, [pc, #632]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	f003 0303 	and.w	r3, r3, #3
 8001a24:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0310 	and.w	r3, r3, #16
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	f000 80e4 	beq.w	8001bfc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d007      	beq.n	8001a4a <HAL_RCC_OscConfig+0x4a>
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	2b0c      	cmp	r3, #12
 8001a3e:	f040 808b 	bne.w	8001b58 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b01      	cmp	r3, #1
 8001a46:	f040 8087 	bne.w	8001b58 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a4a:	4b93      	ldr	r3, [pc, #588]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d005      	beq.n	8001a62 <HAL_RCC_OscConfig+0x62>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	699b      	ldr	r3, [r3, #24]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e3ac      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1a      	ldr	r2, [r3, #32]
 8001a66:	4b8c      	ldr	r3, [pc, #560]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d004      	beq.n	8001a7c <HAL_RCC_OscConfig+0x7c>
 8001a72:	4b89      	ldr	r3, [pc, #548]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a7a:	e005      	b.n	8001a88 <HAL_RCC_OscConfig+0x88>
 8001a7c:	4b86      	ldr	r3, [pc, #536]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a82:	091b      	lsrs	r3, r3, #4
 8001a84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d223      	bcs.n	8001ad4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 fd41 	bl	8002518 <RCC_SetFlashLatencyFromMSIRange>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e38d      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001aa0:	4b7d      	ldr	r3, [pc, #500]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a7c      	ldr	r2, [pc, #496]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001aa6:	f043 0308 	orr.w	r3, r3, #8
 8001aaa:	6013      	str	r3, [r2, #0]
 8001aac:	4b7a      	ldr	r3, [pc, #488]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a1b      	ldr	r3, [r3, #32]
 8001ab8:	4977      	ldr	r1, [pc, #476]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001abe:	4b76      	ldr	r3, [pc, #472]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	69db      	ldr	r3, [r3, #28]
 8001aca:	021b      	lsls	r3, r3, #8
 8001acc:	4972      	ldr	r1, [pc, #456]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	604b      	str	r3, [r1, #4]
 8001ad2:	e025      	b.n	8001b20 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ad4:	4b70      	ldr	r3, [pc, #448]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a6f      	ldr	r2, [pc, #444]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001ada:	f043 0308 	orr.w	r3, r3, #8
 8001ade:	6013      	str	r3, [r2, #0]
 8001ae0:	4b6d      	ldr	r3, [pc, #436]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6a1b      	ldr	r3, [r3, #32]
 8001aec:	496a      	ldr	r1, [pc, #424]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001af2:	4b69      	ldr	r3, [pc, #420]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	021b      	lsls	r3, r3, #8
 8001b00:	4965      	ldr	r1, [pc, #404]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001b02:	4313      	orrs	r3, r2
 8001b04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d109      	bne.n	8001b20 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6a1b      	ldr	r3, [r3, #32]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f000 fd01 	bl	8002518 <RCC_SetFlashLatencyFromMSIRange>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e34d      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b20:	f000 fc36 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b5c      	ldr	r3, [pc, #368]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	091b      	lsrs	r3, r3, #4
 8001b2c:	f003 030f 	and.w	r3, r3, #15
 8001b30:	495a      	ldr	r1, [pc, #360]	; (8001c9c <HAL_RCC_OscConfig+0x29c>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	fa22 f303 	lsr.w	r3, r2, r3
 8001b3c:	4a58      	ldr	r2, [pc, #352]	; (8001ca0 <HAL_RCC_OscConfig+0x2a0>)
 8001b3e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001b40:	4b58      	ldr	r3, [pc, #352]	; (8001ca4 <HAL_RCC_OscConfig+0x2a4>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff fb25 	bl	8001194 <HAL_InitTick>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001b4e:	7bfb      	ldrb	r3, [r7, #15]
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d052      	beq.n	8001bfa <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
 8001b56:	e331      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d032      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001b60:	4b4d      	ldr	r3, [pc, #308]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a4c      	ldr	r2, [pc, #304]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001b66:	f043 0301 	orr.w	r3, r3, #1
 8001b6a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001b6c:	f7ff fb62 	bl	8001234 <HAL_GetTick>
 8001b70:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b72:	e008      	b.n	8001b86 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001b74:	f7ff fb5e 	bl	8001234 <HAL_GetTick>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e31a      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b86:	4b44      	ldr	r3, [pc, #272]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b92:	4b41      	ldr	r3, [pc, #260]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a40      	ldr	r2, [pc, #256]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001b98:	f043 0308 	orr.w	r3, r3, #8
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b3e      	ldr	r3, [pc, #248]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	493b      	ldr	r1, [pc, #236]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb0:	4b39      	ldr	r3, [pc, #228]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	021b      	lsls	r3, r3, #8
 8001bbe:	4936      	ldr	r1, [pc, #216]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
 8001bc4:	e01a      	b.n	8001bfc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001bc6:	4b34      	ldr	r3, [pc, #208]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a33      	ldr	r2, [pc, #204]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001bd2:	f7ff fb2f 	bl	8001234 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001bda:	f7ff fb2b 	bl	8001234 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e2e7      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001bec:	4b2a      	ldr	r3, [pc, #168]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f0      	bne.n	8001bda <HAL_RCC_OscConfig+0x1da>
 8001bf8:	e000      	b.n	8001bfc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bfa:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0301 	and.w	r3, r3, #1
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d074      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2b08      	cmp	r3, #8
 8001c0c:	d005      	beq.n	8001c1a <HAL_RCC_OscConfig+0x21a>
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	2b0c      	cmp	r3, #12
 8001c12:	d10e      	bne.n	8001c32 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	2b03      	cmp	r3, #3
 8001c18:	d10b      	bne.n	8001c32 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d064      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x2f0>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d160      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e2c4      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c3a:	d106      	bne.n	8001c4a <HAL_RCC_OscConfig+0x24a>
 8001c3c:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001c42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	e01d      	b.n	8001c86 <HAL_RCC_OscConfig+0x286>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c52:	d10c      	bne.n	8001c6e <HAL_RCC_OscConfig+0x26e>
 8001c54:	4b10      	ldr	r3, [pc, #64]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a0f      	ldr	r2, [pc, #60]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001c5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c5e:	6013      	str	r3, [r2, #0]
 8001c60:	4b0d      	ldr	r3, [pc, #52]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a0c      	ldr	r2, [pc, #48]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c6a:	6013      	str	r3, [r2, #0]
 8001c6c:	e00b      	b.n	8001c86 <HAL_RCC_OscConfig+0x286>
 8001c6e:	4b0a      	ldr	r3, [pc, #40]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a09      	ldr	r2, [pc, #36]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001c74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a06      	ldr	r2, [pc, #24]	; (8001c98 <HAL_RCC_OscConfig+0x298>)
 8001c80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c84:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d01c      	beq.n	8001cc8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8e:	f7ff fad1 	bl	8001234 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c94:	e011      	b.n	8001cba <HAL_RCC_OscConfig+0x2ba>
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	08005830 	.word	0x08005830
 8001ca0:	20000004 	.word	0x20000004
 8001ca4:	20000008 	.word	0x20000008
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ca8:	f7ff fac4 	bl	8001234 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	; 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e280      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cba:	4baf      	ldr	r3, [pc, #700]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x2a8>
 8001cc6:	e014      	b.n	8001cf2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff fab4 	bl	8001234 <HAL_GetTick>
 8001ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd0:	f7ff fab0 	bl	8001234 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b64      	cmp	r3, #100	; 0x64
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e26c      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ce2:	4ba5      	ldr	r3, [pc, #660]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1f0      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x2d0>
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d060      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	2b04      	cmp	r3, #4
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_OscConfig+0x310>
 8001d04:	69bb      	ldr	r3, [r7, #24]
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	d119      	bne.n	8001d3e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d116      	bne.n	8001d3e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d10:	4b99      	ldr	r3, [pc, #612]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_OscConfig+0x328>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d101      	bne.n	8001d28 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e249      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d28:	4b93      	ldr	r3, [pc, #588]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	061b      	lsls	r3, r3, #24
 8001d36:	4990      	ldr	r1, [pc, #576]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d3c:	e040      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	68db      	ldr	r3, [r3, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d023      	beq.n	8001d8e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d46:	4b8c      	ldr	r3, [pc, #560]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a8b      	ldr	r2, [pc, #556]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001d4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d52:	f7ff fa6f 	bl	8001234 <HAL_GetTick>
 8001d56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d58:	e008      	b.n	8001d6c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d5a:	f7ff fa6b 	bl	8001234 <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	1ad3      	subs	r3, r2, r3
 8001d64:	2b02      	cmp	r3, #2
 8001d66:	d901      	bls.n	8001d6c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001d68:	2303      	movs	r3, #3
 8001d6a:	e227      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d6c:	4b82      	ldr	r3, [pc, #520]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d0f0      	beq.n	8001d5a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d78:	4b7f      	ldr	r3, [pc, #508]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	691b      	ldr	r3, [r3, #16]
 8001d84:	061b      	lsls	r3, r3, #24
 8001d86:	497c      	ldr	r1, [pc, #496]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	604b      	str	r3, [r1, #4]
 8001d8c:	e018      	b.n	8001dc0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d8e:	4b7a      	ldr	r3, [pc, #488]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a79      	ldr	r2, [pc, #484]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9a:	f7ff fa4b 	bl	8001234 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da2:	f7ff fa47 	bl	8001234 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e203      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001db4:	4b70      	ldr	r3, [pc, #448]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d1f0      	bne.n	8001da2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0308 	and.w	r3, r3, #8
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d03c      	beq.n	8001e46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01c      	beq.n	8001e0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dd4:	4b68      	ldr	r3, [pc, #416]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dda:	4a67      	ldr	r2, [pc, #412]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001de4:	f7ff fa26 	bl	8001234 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dec:	f7ff fa22 	bl	8001234 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e1de      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001dfe:	4b5e      	ldr	r3, [pc, #376]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001e00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d0ef      	beq.n	8001dec <HAL_RCC_OscConfig+0x3ec>
 8001e0c:	e01b      	b.n	8001e46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e0e:	4b5a      	ldr	r3, [pc, #360]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001e10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e14:	4a58      	ldr	r2, [pc, #352]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001e16:	f023 0301 	bic.w	r3, r3, #1
 8001e1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1e:	f7ff fa09 	bl	8001234 <HAL_GetTick>
 8001e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e24:	e008      	b.n	8001e38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e26:	f7ff fa05 	bl	8001234 <HAL_GetTick>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e1c1      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e38:	4b4f      	ldr	r3, [pc, #316]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1ef      	bne.n	8001e26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	f000 80a6 	beq.w	8001fa0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e54:	2300      	movs	r3, #0
 8001e56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001e58:	4b47      	ldr	r3, [pc, #284]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10d      	bne.n	8001e80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e64:	4b44      	ldr	r3, [pc, #272]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	4a43      	ldr	r2, [pc, #268]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001e6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e70:	4b41      	ldr	r3, [pc, #260]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001e72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e80:	4b3e      	ldr	r3, [pc, #248]	; (8001f7c <HAL_RCC_OscConfig+0x57c>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d118      	bne.n	8001ebe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e8c:	4b3b      	ldr	r3, [pc, #236]	; (8001f7c <HAL_RCC_OscConfig+0x57c>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a3a      	ldr	r2, [pc, #232]	; (8001f7c <HAL_RCC_OscConfig+0x57c>)
 8001e92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e98:	f7ff f9cc 	bl	8001234 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ea0:	f7ff f9c8 	bl	8001234 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e184      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001eb2:	4b32      	ldr	r3, [pc, #200]	; (8001f7c <HAL_RCC_OscConfig+0x57c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b01      	cmp	r3, #1
 8001ec4:	d108      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x4d8>
 8001ec6:	4b2c      	ldr	r3, [pc, #176]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ecc:	4a2a      	ldr	r2, [pc, #168]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001ece:	f043 0301 	orr.w	r3, r3, #1
 8001ed2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ed6:	e024      	b.n	8001f22 <HAL_RCC_OscConfig+0x522>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b05      	cmp	r3, #5
 8001ede:	d110      	bne.n	8001f02 <HAL_RCC_OscConfig+0x502>
 8001ee0:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee6:	4a24      	ldr	r2, [pc, #144]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001ee8:	f043 0304 	orr.w	r3, r3, #4
 8001eec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ef0:	4b21      	ldr	r3, [pc, #132]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef6:	4a20      	ldr	r2, [pc, #128]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f00:	e00f      	b.n	8001f22 <HAL_RCC_OscConfig+0x522>
 8001f02:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f08:	4a1b      	ldr	r2, [pc, #108]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001f0a:	f023 0301 	bic.w	r3, r3, #1
 8001f0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f12:	4b19      	ldr	r3, [pc, #100]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f18:	4a17      	ldr	r2, [pc, #92]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001f1a:	f023 0304 	bic.w	r3, r3, #4
 8001f1e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689b      	ldr	r3, [r3, #8]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d016      	beq.n	8001f58 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f2a:	f7ff f983 	bl	8001234 <HAL_GetTick>
 8001f2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f30:	e00a      	b.n	8001f48 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f32:	f7ff f97f 	bl	8001234 <HAL_GetTick>
 8001f36:	4602      	mov	r2, r0
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	1ad3      	subs	r3, r2, r3
 8001f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e139      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <HAL_RCC_OscConfig+0x578>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0ed      	beq.n	8001f32 <HAL_RCC_OscConfig+0x532>
 8001f56:	e01a      	b.n	8001f8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f58:	f7ff f96c 	bl	8001234 <HAL_GetTick>
 8001f5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f5e:	e00f      	b.n	8001f80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f60:	f7ff f968 	bl	8001234 <HAL_GetTick>
 8001f64:	4602      	mov	r2, r0
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d906      	bls.n	8001f80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e122      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
 8001f76:	bf00      	nop
 8001f78:	40021000 	.word	0x40021000
 8001f7c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f80:	4b90      	ldr	r3, [pc, #576]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8001f82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1e8      	bne.n	8001f60 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f8e:	7ffb      	ldrb	r3, [r7, #31]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d105      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f94:	4b8b      	ldr	r3, [pc, #556]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8001f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f98:	4a8a      	ldr	r2, [pc, #552]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8001f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 8108 	beq.w	80021ba <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fae:	2b02      	cmp	r3, #2
 8001fb0:	f040 80d0 	bne.w	8002154 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001fb4:	4b83      	ldr	r3, [pc, #524]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f003 0203 	and.w	r2, r3, #3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d130      	bne.n	800202a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d127      	bne.n	800202a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fe4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001fe6:	429a      	cmp	r2, r3
 8001fe8:	d11f      	bne.n	800202a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ff4:	2a07      	cmp	r2, #7
 8001ff6:	bf14      	ite	ne
 8001ff8:	2201      	movne	r2, #1
 8001ffa:	2200      	moveq	r2, #0
 8001ffc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d113      	bne.n	800202a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800200c:	085b      	lsrs	r3, r3, #1
 800200e:	3b01      	subs	r3, #1
 8002010:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002012:	429a      	cmp	r2, r3
 8002014:	d109      	bne.n	800202a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002020:	085b      	lsrs	r3, r3, #1
 8002022:	3b01      	subs	r3, #1
 8002024:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002026:	429a      	cmp	r2, r3
 8002028:	d06e      	beq.n	8002108 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	2b0c      	cmp	r3, #12
 800202e:	d069      	beq.n	8002104 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002030:	4b64      	ldr	r3, [pc, #400]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d105      	bne.n	8002048 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800203c:	4b61      	ldr	r3, [pc, #388]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0b7      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800204c:	4b5d      	ldr	r3, [pc, #372]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a5c      	ldr	r2, [pc, #368]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002052:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002056:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002058:	f7ff f8ec 	bl	8001234 <HAL_GetTick>
 800205c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002060:	f7ff f8e8 	bl	8001234 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	693b      	ldr	r3, [r7, #16]
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b02      	cmp	r3, #2
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e0a4      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002072:	4b54      	ldr	r3, [pc, #336]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207a:	2b00      	cmp	r3, #0
 800207c:	d1f0      	bne.n	8002060 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800207e:	4b51      	ldr	r3, [pc, #324]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	4b51      	ldr	r3, [pc, #324]	; (80021c8 <HAL_RCC_OscConfig+0x7c8>)
 8002084:	4013      	ands	r3, r2
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800208a:	687a      	ldr	r2, [r7, #4]
 800208c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800208e:	3a01      	subs	r2, #1
 8002090:	0112      	lsls	r2, r2, #4
 8002092:	4311      	orrs	r1, r2
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002098:	0212      	lsls	r2, r2, #8
 800209a:	4311      	orrs	r1, r2
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80020a0:	0852      	lsrs	r2, r2, #1
 80020a2:	3a01      	subs	r2, #1
 80020a4:	0552      	lsls	r2, r2, #21
 80020a6:	4311      	orrs	r1, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80020ac:	0852      	lsrs	r2, r2, #1
 80020ae:	3a01      	subs	r2, #1
 80020b0:	0652      	lsls	r2, r2, #25
 80020b2:	4311      	orrs	r1, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80020b8:	0912      	lsrs	r2, r2, #4
 80020ba:	0452      	lsls	r2, r2, #17
 80020bc:	430a      	orrs	r2, r1
 80020be:	4941      	ldr	r1, [pc, #260]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80020c4:	4b3f      	ldr	r3, [pc, #252]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a3e      	ldr	r2, [pc, #248]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 80020ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020ce:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80020d0:	4b3c      	ldr	r3, [pc, #240]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4a3b      	ldr	r2, [pc, #236]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 80020d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020da:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80020dc:	f7ff f8aa 	bl	8001234 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e4:	f7ff f8a6 	bl	8001234 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e062      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f6:	4b33      	ldr	r3, [pc, #204]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d0f0      	beq.n	80020e4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002102:	e05a      	b.n	80021ba <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	e059      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002108:	4b2e      	ldr	r3, [pc, #184]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002110:	2b00      	cmp	r3, #0
 8002112:	d152      	bne.n	80021ba <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002114:	4b2b      	ldr	r3, [pc, #172]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a2a      	ldr	r2, [pc, #168]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 800211a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800211e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002120:	4b28      	ldr	r3, [pc, #160]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4a27      	ldr	r2, [pc, #156]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002126:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800212a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800212c:	f7ff f882 	bl	8001234 <HAL_GetTick>
 8002130:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002132:	e008      	b.n	8002146 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002134:	f7ff f87e 	bl	8001234 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	1ad3      	subs	r3, r2, r3
 800213e:	2b02      	cmp	r3, #2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e03a      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002146:	4b1f      	ldr	r3, [pc, #124]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d0f0      	beq.n	8002134 <HAL_RCC_OscConfig+0x734>
 8002152:	e032      	b.n	80021ba <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002154:	69bb      	ldr	r3, [r7, #24]
 8002156:	2b0c      	cmp	r3, #12
 8002158:	d02d      	beq.n	80021b6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800215a:	4b1a      	ldr	r3, [pc, #104]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a19      	ldr	r2, [pc, #100]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002160:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002164:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002166:	4b17      	ldr	r3, [pc, #92]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d105      	bne.n	800217e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002172:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	4a13      	ldr	r2, [pc, #76]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002178:	f023 0303 	bic.w	r3, r3, #3
 800217c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800217e:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	4a10      	ldr	r2, [pc, #64]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 8002184:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002188:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800218c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218e:	f7ff f851 	bl	8001234 <HAL_GetTick>
 8002192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002196:	f7ff f84d 	bl	8001234 <HAL_GetTick>
 800219a:	4602      	mov	r2, r0
 800219c:	693b      	ldr	r3, [r7, #16]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e009      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_RCC_OscConfig+0x7c4>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1f0      	bne.n	8002196 <HAL_RCC_OscConfig+0x796>
 80021b4:	e001      	b.n	80021ba <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e000      	b.n	80021bc <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80021ba:	2300      	movs	r3, #0
}
 80021bc:	4618      	mov	r0, r3
 80021be:	3720      	adds	r7, #32
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40021000 	.word	0x40021000
 80021c8:	f99d808c 	.word	0xf99d808c

080021cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d101      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e0c8      	b.n	8002372 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80021e0:	4b66      	ldr	r3, [pc, #408]	; (800237c <HAL_RCC_ClockConfig+0x1b0>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d910      	bls.n	8002210 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ee:	4b63      	ldr	r3, [pc, #396]	; (800237c <HAL_RCC_ClockConfig+0x1b0>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f023 0207 	bic.w	r2, r3, #7
 80021f6:	4961      	ldr	r1, [pc, #388]	; (800237c <HAL_RCC_ClockConfig+0x1b0>)
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021fe:	4b5f      	ldr	r3, [pc, #380]	; (800237c <HAL_RCC_ClockConfig+0x1b0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 0307 	and.w	r3, r3, #7
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d001      	beq.n	8002210 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e0b0      	b.n	8002372 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0301 	and.w	r3, r3, #1
 8002218:	2b00      	cmp	r3, #0
 800221a:	d04c      	beq.n	80022b6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	2b03      	cmp	r3, #3
 8002222:	d107      	bne.n	8002234 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002224:	4b56      	ldr	r3, [pc, #344]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d121      	bne.n	8002274 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e09e      	b.n	8002372 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d107      	bne.n	800224c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800223c:	4b50      	ldr	r3, [pc, #320]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d115      	bne.n	8002274 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e092      	b.n	8002372 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d107      	bne.n	8002264 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002254:	4b4a      	ldr	r3, [pc, #296]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d109      	bne.n	8002274 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002260:	2301      	movs	r3, #1
 8002262:	e086      	b.n	8002372 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002264:	4b46      	ldr	r3, [pc, #280]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e07e      	b.n	8002372 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002274:	4b42      	ldr	r3, [pc, #264]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	f023 0203 	bic.w	r2, r3, #3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	493f      	ldr	r1, [pc, #252]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 8002282:	4313      	orrs	r3, r2
 8002284:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002286:	f7fe ffd5 	bl	8001234 <HAL_GetTick>
 800228a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228c:	e00a      	b.n	80022a4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800228e:	f7fe ffd1 	bl	8001234 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	f241 3288 	movw	r2, #5000	; 0x1388
 800229c:	4293      	cmp	r3, r2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e066      	b.n	8002372 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022a4:	4b36      	ldr	r3, [pc, #216]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 020c 	and.w	r2, r3, #12
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	009b      	lsls	r3, r3, #2
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d1eb      	bne.n	800228e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d008      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c2:	4b2f      	ldr	r3, [pc, #188]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	492c      	ldr	r1, [pc, #176]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80022d4:	4b29      	ldr	r3, [pc, #164]	; (800237c <HAL_RCC_ClockConfig+0x1b0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d210      	bcs.n	8002304 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e2:	4b26      	ldr	r3, [pc, #152]	; (800237c <HAL_RCC_ClockConfig+0x1b0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 0207 	bic.w	r2, r3, #7
 80022ea:	4924      	ldr	r1, [pc, #144]	; (800237c <HAL_RCC_ClockConfig+0x1b0>)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b22      	ldr	r3, [pc, #136]	; (800237c <HAL_RCC_ClockConfig+0x1b0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e036      	b.n	8002372 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0304 	and.w	r3, r3, #4
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002310:	4b1b      	ldr	r3, [pc, #108]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	4918      	ldr	r1, [pc, #96]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 800231e:	4313      	orrs	r3, r2
 8002320:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0308 	and.w	r3, r3, #8
 800232a:	2b00      	cmp	r3, #0
 800232c:	d009      	beq.n	8002342 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800232e:	4b14      	ldr	r3, [pc, #80]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	00db      	lsls	r3, r3, #3
 800233c:	4910      	ldr	r1, [pc, #64]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 800233e:	4313      	orrs	r3, r2
 8002340:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002342:	f000 f825 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 8002346:	4602      	mov	r2, r0
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <HAL_RCC_ClockConfig+0x1b4>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	490c      	ldr	r1, [pc, #48]	; (8002384 <HAL_RCC_ClockConfig+0x1b8>)
 8002354:	5ccb      	ldrb	r3, [r1, r3]
 8002356:	f003 031f 	and.w	r3, r3, #31
 800235a:	fa22 f303 	lsr.w	r3, r2, r3
 800235e:	4a0a      	ldr	r2, [pc, #40]	; (8002388 <HAL_RCC_ClockConfig+0x1bc>)
 8002360:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002362:	4b0a      	ldr	r3, [pc, #40]	; (800238c <HAL_RCC_ClockConfig+0x1c0>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe ff14 	bl	8001194 <HAL_InitTick>
 800236c:	4603      	mov	r3, r0
 800236e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002370:	7afb      	ldrb	r3, [r7, #11]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3710      	adds	r7, #16
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}
 800237a:	bf00      	nop
 800237c:	40022000 	.word	0x40022000
 8002380:	40021000 	.word	0x40021000
 8002384:	08005830 	.word	0x08005830
 8002388:	20000004 	.word	0x20000004
 800238c:	20000008 	.word	0x20000008

08002390 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002390:	b480      	push	{r7}
 8002392:	b089      	sub	sp, #36	; 0x24
 8002394:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002396:	2300      	movs	r3, #0
 8002398:	61fb      	str	r3, [r7, #28]
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800239e:	4b3e      	ldr	r3, [pc, #248]	; (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	f003 030c 	and.w	r3, r3, #12
 80023a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a8:	4b3b      	ldr	r3, [pc, #236]	; (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	f003 0303 	and.w	r3, r3, #3
 80023b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_GetSysClockFreq+0x34>
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	2b0c      	cmp	r3, #12
 80023bc:	d121      	bne.n	8002402 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	2b01      	cmp	r3, #1
 80023c2:	d11e      	bne.n	8002402 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023c4:	4b34      	ldr	r3, [pc, #208]	; (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0308 	and.w	r3, r3, #8
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d107      	bne.n	80023e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023d0:	4b31      	ldr	r3, [pc, #196]	; (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 80023d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	f003 030f 	and.w	r3, r3, #15
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	e005      	b.n	80023ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023e0:	4b2d      	ldr	r3, [pc, #180]	; (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 030f 	and.w	r3, r3, #15
 80023ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80023ec:	4a2b      	ldr	r2, [pc, #172]	; (800249c <HAL_RCC_GetSysClockFreq+0x10c>)
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10d      	bne.n	8002418 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80023fc:	69fb      	ldr	r3, [r7, #28]
 80023fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002400:	e00a      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	2b04      	cmp	r3, #4
 8002406:	d102      	bne.n	800240e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002408:	4b25      	ldr	r3, [pc, #148]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x110>)
 800240a:	61bb      	str	r3, [r7, #24]
 800240c:	e004      	b.n	8002418 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	2b08      	cmp	r3, #8
 8002412:	d101      	bne.n	8002418 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002414:	4b23      	ldr	r3, [pc, #140]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002416:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	2b0c      	cmp	r3, #12
 800241c:	d134      	bne.n	8002488 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800241e:	4b1e      	ldr	r3, [pc, #120]	; (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b02      	cmp	r3, #2
 800242c:	d003      	beq.n	8002436 <HAL_RCC_GetSysClockFreq+0xa6>
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b03      	cmp	r3, #3
 8002432:	d003      	beq.n	800243c <HAL_RCC_GetSysClockFreq+0xac>
 8002434:	e005      	b.n	8002442 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002436:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002438:	617b      	str	r3, [r7, #20]
      break;
 800243a:	e005      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_RCC_GetSysClockFreq+0x114>)
 800243e:	617b      	str	r3, [r7, #20]
      break;
 8002440:	e002      	b.n	8002448 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	617b      	str	r3, [r7, #20]
      break;
 8002446:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002448:	4b13      	ldr	r3, [pc, #76]	; (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 800244a:	68db      	ldr	r3, [r3, #12]
 800244c:	091b      	lsrs	r3, r3, #4
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	3301      	adds	r3, #1
 8002454:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002456:	4b10      	ldr	r3, [pc, #64]	; (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 8002458:	68db      	ldr	r3, [r3, #12]
 800245a:	0a1b      	lsrs	r3, r3, #8
 800245c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002460:	697a      	ldr	r2, [r7, #20]
 8002462:	fb02 f203 	mul.w	r2, r2, r3
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	fbb2 f3f3 	udiv	r3, r2, r3
 800246c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800246e:	4b0a      	ldr	r3, [pc, #40]	; (8002498 <HAL_RCC_GetSysClockFreq+0x108>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	0e5b      	lsrs	r3, r3, #25
 8002474:	f003 0303 	and.w	r3, r3, #3
 8002478:	3301      	adds	r3, #1
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	fbb2 f3f3 	udiv	r3, r2, r3
 8002486:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002488:	69bb      	ldr	r3, [r7, #24]
}
 800248a:	4618      	mov	r0, r3
 800248c:	3724      	adds	r7, #36	; 0x24
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40021000 	.word	0x40021000
 800249c:	08005848 	.word	0x08005848
 80024a0:	00f42400 	.word	0x00f42400
 80024a4:	007a1200 	.word	0x007a1200

080024a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024ac:	4b03      	ldr	r3, [pc, #12]	; (80024bc <HAL_RCC_GetHCLKFreq+0x14>)
 80024ae:	681b      	ldr	r3, [r3, #0]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	20000004 	.word	0x20000004

080024c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024c4:	f7ff fff0 	bl	80024a8 <HAL_RCC_GetHCLKFreq>
 80024c8:	4602      	mov	r2, r0
 80024ca:	4b06      	ldr	r3, [pc, #24]	; (80024e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	0a1b      	lsrs	r3, r3, #8
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	4904      	ldr	r1, [pc, #16]	; (80024e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024d6:	5ccb      	ldrb	r3, [r1, r3]
 80024d8:	f003 031f 	and.w	r3, r3, #31
 80024dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000
 80024e8:	08005840 	.word	0x08005840

080024ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024f0:	f7ff ffda 	bl	80024a8 <HAL_RCC_GetHCLKFreq>
 80024f4:	4602      	mov	r2, r0
 80024f6:	4b06      	ldr	r3, [pc, #24]	; (8002510 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	0adb      	lsrs	r3, r3, #11
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	4904      	ldr	r1, [pc, #16]	; (8002514 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002502:	5ccb      	ldrb	r3, [r1, r3]
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800250c:	4618      	mov	r0, r3
 800250e:	bd80      	pop	{r7, pc}
 8002510:	40021000 	.word	0x40021000
 8002514:	08005840 	.word	0x08005840

08002518 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b086      	sub	sp, #24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002520:	2300      	movs	r3, #0
 8002522:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002524:	4b2a      	ldr	r3, [pc, #168]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d003      	beq.n	8002538 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002530:	f7ff fa02 	bl	8001938 <HAL_PWREx_GetVoltageRange>
 8002534:	6178      	str	r0, [r7, #20]
 8002536:	e014      	b.n	8002562 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002538:	4b25      	ldr	r3, [pc, #148]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800253a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800253c:	4a24      	ldr	r2, [pc, #144]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800253e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002542:	6593      	str	r3, [r2, #88]	; 0x58
 8002544:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002550:	f7ff f9f2 	bl	8001938 <HAL_PWREx_GetVoltageRange>
 8002554:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002556:	4b1e      	ldr	r3, [pc, #120]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255a:	4a1d      	ldr	r2, [pc, #116]	; (80025d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800255c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002560:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002562:	697b      	ldr	r3, [r7, #20]
 8002564:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002568:	d10b      	bne.n	8002582 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b80      	cmp	r3, #128	; 0x80
 800256e:	d919      	bls.n	80025a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2ba0      	cmp	r3, #160	; 0xa0
 8002574:	d902      	bls.n	800257c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002576:	2302      	movs	r3, #2
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	e013      	b.n	80025a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800257c:	2301      	movs	r3, #1
 800257e:	613b      	str	r3, [r7, #16]
 8002580:	e010      	b.n	80025a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b80      	cmp	r3, #128	; 0x80
 8002586:	d902      	bls.n	800258e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002588:	2303      	movs	r3, #3
 800258a:	613b      	str	r3, [r7, #16]
 800258c:	e00a      	b.n	80025a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2b80      	cmp	r3, #128	; 0x80
 8002592:	d102      	bne.n	800259a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002594:	2302      	movs	r3, #2
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	e004      	b.n	80025a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2b70      	cmp	r3, #112	; 0x70
 800259e:	d101      	bne.n	80025a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80025a0:	2301      	movs	r3, #1
 80025a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80025a4:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f023 0207 	bic.w	r2, r3, #7
 80025ac:	4909      	ldr	r1, [pc, #36]	; (80025d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025ae:	693b      	ldr	r3, [r7, #16]
 80025b0:	4313      	orrs	r3, r2
 80025b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80025b4:	4b07      	ldr	r3, [pc, #28]	; (80025d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0307 	and.w	r3, r3, #7
 80025bc:	693a      	ldr	r2, [r7, #16]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d001      	beq.n	80025c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40022000 	.word	0x40022000

080025d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025e0:	2300      	movs	r3, #0
 80025e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025e4:	2300      	movs	r3, #0
 80025e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d041      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025f8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025fc:	d02a      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025fe:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002602:	d824      	bhi.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002604:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002608:	d008      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800260a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800260e:	d81e      	bhi.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002610:	2b00      	cmp	r3, #0
 8002612:	d00a      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002614:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002618:	d010      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800261a:	e018      	b.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800261c:	4b86      	ldr	r3, [pc, #536]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a85      	ldr	r2, [pc, #532]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002622:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002626:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002628:	e015      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	3304      	adds	r3, #4
 800262e:	2100      	movs	r1, #0
 8002630:	4618      	mov	r0, r3
 8002632:	f000 fabb 	bl	8002bac <RCCEx_PLLSAI1_Config>
 8002636:	4603      	mov	r3, r0
 8002638:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800263a:	e00c      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3320      	adds	r3, #32
 8002640:	2100      	movs	r1, #0
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fba6 	bl	8002d94 <RCCEx_PLLSAI2_Config>
 8002648:	4603      	mov	r3, r0
 800264a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800264c:	e003      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	74fb      	strb	r3, [r7, #19]
      break;
 8002652:	e000      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002654:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002656:	7cfb      	ldrb	r3, [r7, #19]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10b      	bne.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800265c:	4b76      	ldr	r3, [pc, #472]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800266a:	4973      	ldr	r1, [pc, #460]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002672:	e001      	b.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002674:	7cfb      	ldrb	r3, [r7, #19]
 8002676:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d041      	beq.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002688:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800268c:	d02a      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800268e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002692:	d824      	bhi.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002694:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002698:	d008      	beq.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800269a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800269e:	d81e      	bhi.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x106>
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00a      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80026a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026a8:	d010      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80026aa:	e018      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80026ac:	4b62      	ldr	r3, [pc, #392]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4a61      	ldr	r2, [pc, #388]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026b8:	e015      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3304      	adds	r3, #4
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f000 fa73 	bl	8002bac <RCCEx_PLLSAI1_Config>
 80026c6:	4603      	mov	r3, r0
 80026c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026ca:	e00c      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3320      	adds	r3, #32
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 fb5e 	bl	8002d94 <RCCEx_PLLSAI2_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80026dc:	e003      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	74fb      	strb	r3, [r7, #19]
      break;
 80026e2:	e000      	b.n	80026e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80026e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80026e6:	7cfb      	ldrb	r3, [r7, #19]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10b      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80026ec:	4b52      	ldr	r3, [pc, #328]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026fa:	494f      	ldr	r1, [pc, #316]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002702:	e001      	b.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002704:	7cfb      	ldrb	r3, [r7, #19]
 8002706:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 80a0 	beq.w	8002856 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002716:	2300      	movs	r3, #0
 8002718:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800271a:	4b47      	ldr	r3, [pc, #284]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800271c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002726:	2301      	movs	r3, #1
 8002728:	e000      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800272a:	2300      	movs	r3, #0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d00d      	beq.n	800274c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002730:	4b41      	ldr	r3, [pc, #260]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002734:	4a40      	ldr	r2, [pc, #256]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002736:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273a:	6593      	str	r3, [r2, #88]	; 0x58
 800273c:	4b3e      	ldr	r3, [pc, #248]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800273e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002740:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002744:	60bb      	str	r3, [r7, #8]
 8002746:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002748:	2301      	movs	r3, #1
 800274a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800274c:	4b3b      	ldr	r3, [pc, #236]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a3a      	ldr	r2, [pc, #232]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002752:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002756:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002758:	f7fe fd6c 	bl	8001234 <HAL_GetTick>
 800275c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800275e:	e009      	b.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002760:	f7fe fd68 	bl	8001234 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	2b02      	cmp	r3, #2
 800276c:	d902      	bls.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	74fb      	strb	r3, [r7, #19]
        break;
 8002772:	e005      	b.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002774:	4b31      	ldr	r3, [pc, #196]	; (800283c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800277c:	2b00      	cmp	r3, #0
 800277e:	d0ef      	beq.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002780:	7cfb      	ldrb	r3, [r7, #19]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d15c      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002786:	4b2c      	ldr	r3, [pc, #176]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002790:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002792:	697b      	ldr	r3, [r7, #20]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d01f      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d019      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80027a4:	4b24      	ldr	r3, [pc, #144]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80027b0:	4b21      	ldr	r3, [pc, #132]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b6:	4a20      	ldr	r2, [pc, #128]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80027c0:	4b1d      	ldr	r3, [pc, #116]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c6:	4a1c      	ldr	r2, [pc, #112]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80027d0:	4a19      	ldr	r2, [pc, #100]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d016      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e2:	f7fe fd27 	bl	8001234 <HAL_GetTick>
 80027e6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027e8:	e00b      	b.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f7fe fd23 	bl	8001234 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d902      	bls.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	74fb      	strb	r3, [r7, #19]
            break;
 8002800:	e006      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002802:	4b0d      	ldr	r3, [pc, #52]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d0ec      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002810:	7cfb      	ldrb	r3, [r7, #19]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10c      	bne.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002816:	4b08      	ldr	r3, [pc, #32]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800281c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002826:	4904      	ldr	r1, [pc, #16]	; (8002838 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800282e:	e009      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002830:	7cfb      	ldrb	r3, [r7, #19]
 8002832:	74bb      	strb	r3, [r7, #18]
 8002834:	e006      	b.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002836:	bf00      	nop
 8002838:	40021000 	.word	0x40021000
 800283c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002840:	7cfb      	ldrb	r3, [r7, #19]
 8002842:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002844:	7c7b      	ldrb	r3, [r7, #17]
 8002846:	2b01      	cmp	r3, #1
 8002848:	d105      	bne.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800284a:	4b9e      	ldr	r3, [pc, #632]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800284c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284e:	4a9d      	ldr	r2, [pc, #628]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002854:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b00      	cmp	r3, #0
 8002860:	d00a      	beq.n	8002878 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002862:	4b98      	ldr	r3, [pc, #608]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002868:	f023 0203 	bic.w	r2, r3, #3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002870:	4994      	ldr	r1, [pc, #592]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002872:	4313      	orrs	r3, r2
 8002874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00a      	beq.n	800289a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002884:	4b8f      	ldr	r3, [pc, #572]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800288a:	f023 020c 	bic.w	r2, r3, #12
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002892:	498c      	ldr	r1, [pc, #560]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002894:	4313      	orrs	r3, r2
 8002896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 0304 	and.w	r3, r3, #4
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00a      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80028a6:	4b87      	ldr	r3, [pc, #540]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	4983      	ldr	r1, [pc, #524]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0308 	and.w	r3, r3, #8
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d00a      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80028c8:	4b7e      	ldr	r3, [pc, #504]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d6:	497b      	ldr	r1, [pc, #492]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028d8:	4313      	orrs	r3, r2
 80028da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0310 	and.w	r3, r3, #16
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80028ea:	4b76      	ldr	r3, [pc, #472]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f8:	4972      	ldr	r1, [pc, #456]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0320 	and.w	r3, r3, #32
 8002908:	2b00      	cmp	r3, #0
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800290c:	4b6d      	ldr	r3, [pc, #436]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002912:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	496a      	ldr	r1, [pc, #424]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291c:	4313      	orrs	r3, r2
 800291e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00a      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800292e:	4b65      	ldr	r3, [pc, #404]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002934:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293c:	4961      	ldr	r1, [pc, #388]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800294c:	2b00      	cmp	r3, #0
 800294e:	d00a      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002950:	4b5c      	ldr	r3, [pc, #368]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002956:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800295e:	4959      	ldr	r1, [pc, #356]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296e:	2b00      	cmp	r3, #0
 8002970:	d00a      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002972:	4b54      	ldr	r3, [pc, #336]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002978:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002980:	4950      	ldr	r1, [pc, #320]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002982:	4313      	orrs	r3, r2
 8002984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002994:	4b4b      	ldr	r3, [pc, #300]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002996:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a2:	4948      	ldr	r1, [pc, #288]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029b6:	4b43      	ldr	r3, [pc, #268]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c4:	493f      	ldr	r1, [pc, #252]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d028      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029d8:	4b3a      	ldr	r3, [pc, #232]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e6:	4937      	ldr	r1, [pc, #220]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029f6:	d106      	bne.n	8002a06 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029f8:	4b32      	ldr	r3, [pc, #200]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4a31      	ldr	r2, [pc, #196]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a02:	60d3      	str	r3, [r2, #12]
 8002a04:	e011      	b.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002a0a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a0e:	d10c      	bne.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	3304      	adds	r3, #4
 8002a14:	2101      	movs	r1, #1
 8002a16:	4618      	mov	r0, r3
 8002a18:	f000 f8c8 	bl	8002bac <RCCEx_PLLSAI1_Config>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a20:	7cfb      	ldrb	r3, [r7, #19]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d001      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002a26:	7cfb      	ldrb	r3, [r7, #19]
 8002a28:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d028      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002a36:	4b23      	ldr	r3, [pc, #140]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a3c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a44:	491f      	ldr	r1, [pc, #124]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a54:	d106      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a56:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	4a1a      	ldr	r2, [pc, #104]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a60:	60d3      	str	r3, [r2, #12]
 8002a62:	e011      	b.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a68:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a6c:	d10c      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	3304      	adds	r3, #4
 8002a72:	2101      	movs	r1, #1
 8002a74:	4618      	mov	r0, r3
 8002a76:	f000 f899 	bl	8002bac <RCCEx_PLLSAI1_Config>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a7e:	7cfb      	ldrb	r3, [r7, #19]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a84:	7cfb      	ldrb	r3, [r7, #19]
 8002a86:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d02b      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aa2:	4908      	ldr	r1, [pc, #32]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002aae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ab2:	d109      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ab4:	4b03      	ldr	r3, [pc, #12]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	4a02      	ldr	r2, [pc, #8]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002abe:	60d3      	str	r3, [r2, #12]
 8002ac0:	e014      	b.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002ac2:	bf00      	nop
 8002ac4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002acc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ad0:	d10c      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 f867 	bl	8002bac <RCCEx_PLLSAI1_Config>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ae2:	7cfb      	ldrb	r3, [r7, #19]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002ae8:	7cfb      	ldrb	r3, [r7, #19]
 8002aea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d02f      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002af8:	4b2b      	ldr	r3, [pc, #172]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002afe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b06:	4928      	ldr	r1, [pc, #160]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b16:	d10d      	bne.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3304      	adds	r3, #4
 8002b1c:	2102      	movs	r1, #2
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f000 f844 	bl	8002bac <RCCEx_PLLSAI1_Config>
 8002b24:	4603      	mov	r3, r0
 8002b26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b28:	7cfb      	ldrb	r3, [r7, #19]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d014      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b2e:	7cfb      	ldrb	r3, [r7, #19]
 8002b30:	74bb      	strb	r3, [r7, #18]
 8002b32:	e011      	b.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b3c:	d10c      	bne.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	3320      	adds	r3, #32
 8002b42:	2102      	movs	r1, #2
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 f925 	bl	8002d94 <RCCEx_PLLSAI2_Config>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b4e:	7cfb      	ldrb	r3, [r7, #19]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d001      	beq.n	8002b58 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b54:	7cfb      	ldrb	r3, [r7, #19]
 8002b56:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00a      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b64:	4b10      	ldr	r3, [pc, #64]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b72:	490d      	ldr	r1, [pc, #52]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00b      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b86:	4b08      	ldr	r3, [pc, #32]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b96:	4904      	ldr	r1, [pc, #16]	; (8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b9e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3718      	adds	r7, #24
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	40021000 	.word	0x40021000

08002bac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002bba:	4b75      	ldr	r3, [pc, #468]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d018      	beq.n	8002bf8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bc6:	4b72      	ldr	r3, [pc, #456]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	f003 0203 	and.w	r2, r3, #3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d10d      	bne.n	8002bf2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
       ||
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d009      	beq.n	8002bf2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bde:	4b6c      	ldr	r3, [pc, #432]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	091b      	lsrs	r3, r3, #4
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	1c5a      	adds	r2, r3, #1
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
       ||
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d047      	beq.n	8002c82 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
 8002bf6:	e044      	b.n	8002c82 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b03      	cmp	r3, #3
 8002bfe:	d018      	beq.n	8002c32 <RCCEx_PLLSAI1_Config+0x86>
 8002c00:	2b03      	cmp	r3, #3
 8002c02:	d825      	bhi.n	8002c50 <RCCEx_PLLSAI1_Config+0xa4>
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d002      	beq.n	8002c0e <RCCEx_PLLSAI1_Config+0x62>
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d009      	beq.n	8002c20 <RCCEx_PLLSAI1_Config+0x74>
 8002c0c:	e020      	b.n	8002c50 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c0e:	4b60      	ldr	r3, [pc, #384]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d11d      	bne.n	8002c56 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c1e:	e01a      	b.n	8002c56 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c20:	4b5b      	ldr	r3, [pc, #364]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d116      	bne.n	8002c5a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c30:	e013      	b.n	8002c5a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c32:	4b57      	ldr	r3, [pc, #348]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10f      	bne.n	8002c5e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c3e:	4b54      	ldr	r3, [pc, #336]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d109      	bne.n	8002c5e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c4e:	e006      	b.n	8002c5e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	73fb      	strb	r3, [r7, #15]
      break;
 8002c54:	e004      	b.n	8002c60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c56:	bf00      	nop
 8002c58:	e002      	b.n	8002c60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c5a:	bf00      	nop
 8002c5c:	e000      	b.n	8002c60 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c5e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d10d      	bne.n	8002c82 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c66:	4b4a      	ldr	r3, [pc, #296]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6819      	ldr	r1, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	3b01      	subs	r3, #1
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	430b      	orrs	r3, r1
 8002c7c:	4944      	ldr	r1, [pc, #272]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c82:	7bfb      	ldrb	r3, [r7, #15]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d17d      	bne.n	8002d84 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c88:	4b41      	ldr	r3, [pc, #260]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a40      	ldr	r2, [pc, #256]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c94:	f7fe face 	bl	8001234 <HAL_GetTick>
 8002c98:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c9a:	e009      	b.n	8002cb0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c9c:	f7fe faca 	bl	8001234 <HAL_GetTick>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	1ad3      	subs	r3, r2, r3
 8002ca6:	2b02      	cmp	r3, #2
 8002ca8:	d902      	bls.n	8002cb0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	73fb      	strb	r3, [r7, #15]
        break;
 8002cae:	e005      	b.n	8002cbc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002cb0:	4b37      	ldr	r3, [pc, #220]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d1ef      	bne.n	8002c9c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d160      	bne.n	8002d84 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d111      	bne.n	8002cec <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cc8:	4b31      	ldr	r3, [pc, #196]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cca:	691b      	ldr	r3, [r3, #16]
 8002ccc:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002cd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cd4:	687a      	ldr	r2, [r7, #4]
 8002cd6:	6892      	ldr	r2, [r2, #8]
 8002cd8:	0211      	lsls	r1, r2, #8
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68d2      	ldr	r2, [r2, #12]
 8002cde:	0912      	lsrs	r2, r2, #4
 8002ce0:	0452      	lsls	r2, r2, #17
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	492a      	ldr	r1, [pc, #168]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	610b      	str	r3, [r1, #16]
 8002cea:	e027      	b.n	8002d3c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d112      	bne.n	8002d18 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cf2:	4b27      	ldr	r3, [pc, #156]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cf4:	691b      	ldr	r3, [r3, #16]
 8002cf6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002cfa:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	6892      	ldr	r2, [r2, #8]
 8002d02:	0211      	lsls	r1, r2, #8
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	6912      	ldr	r2, [r2, #16]
 8002d08:	0852      	lsrs	r2, r2, #1
 8002d0a:	3a01      	subs	r2, #1
 8002d0c:	0552      	lsls	r2, r2, #21
 8002d0e:	430a      	orrs	r2, r1
 8002d10:	491f      	ldr	r1, [pc, #124]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	610b      	str	r3, [r1, #16]
 8002d16:	e011      	b.n	8002d3c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d18:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d1a:	691b      	ldr	r3, [r3, #16]
 8002d1c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6892      	ldr	r2, [r2, #8]
 8002d28:	0211      	lsls	r1, r2, #8
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6952      	ldr	r2, [r2, #20]
 8002d2e:	0852      	lsrs	r2, r2, #1
 8002d30:	3a01      	subs	r2, #1
 8002d32:	0652      	lsls	r2, r2, #25
 8002d34:	430a      	orrs	r2, r1
 8002d36:	4916      	ldr	r1, [pc, #88]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d3c:	4b14      	ldr	r3, [pc, #80]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a13      	ldr	r2, [pc, #76]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d42:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d48:	f7fe fa74 	bl	8001234 <HAL_GetTick>
 8002d4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d4e:	e009      	b.n	8002d64 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d50:	f7fe fa70 	bl	8001234 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d902      	bls.n	8002d64 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	73fb      	strb	r3, [r7, #15]
          break;
 8002d62:	e005      	b.n	8002d70 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d64:	4b0a      	ldr	r3, [pc, #40]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d0ef      	beq.n	8002d50 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d70:	7bfb      	ldrb	r3, [r7, #15]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d76:	4b06      	ldr	r3, [pc, #24]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d78:	691a      	ldr	r2, [r3, #16]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	4904      	ldr	r1, [pc, #16]	; (8002d90 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40021000 	.word	0x40021000

08002d94 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d9e:	2300      	movs	r3, #0
 8002da0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002da2:	4b6a      	ldr	r3, [pc, #424]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d018      	beq.n	8002de0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002dae:	4b67      	ldr	r3, [pc, #412]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f003 0203 	and.w	r2, r3, #3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d10d      	bne.n	8002dda <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
       ||
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d009      	beq.n	8002dda <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002dc6:	4b61      	ldr	r3, [pc, #388]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc8:	68db      	ldr	r3, [r3, #12]
 8002dca:	091b      	lsrs	r3, r3, #4
 8002dcc:	f003 0307 	and.w	r3, r3, #7
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	685b      	ldr	r3, [r3, #4]
       ||
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	d047      	beq.n	8002e6a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	73fb      	strb	r3, [r7, #15]
 8002dde:	e044      	b.n	8002e6a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d018      	beq.n	8002e1a <RCCEx_PLLSAI2_Config+0x86>
 8002de8:	2b03      	cmp	r3, #3
 8002dea:	d825      	bhi.n	8002e38 <RCCEx_PLLSAI2_Config+0xa4>
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d002      	beq.n	8002df6 <RCCEx_PLLSAI2_Config+0x62>
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d009      	beq.n	8002e08 <RCCEx_PLLSAI2_Config+0x74>
 8002df4:	e020      	b.n	8002e38 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002df6:	4b55      	ldr	r3, [pc, #340]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0302 	and.w	r3, r3, #2
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d11d      	bne.n	8002e3e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e06:	e01a      	b.n	8002e3e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e08:	4b50      	ldr	r3, [pc, #320]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d116      	bne.n	8002e42 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e18:	e013      	b.n	8002e42 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e1a:	4b4c      	ldr	r3, [pc, #304]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10f      	bne.n	8002e46 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e26:	4b49      	ldr	r3, [pc, #292]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d109      	bne.n	8002e46 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e36:	e006      	b.n	8002e46 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	73fb      	strb	r3, [r7, #15]
      break;
 8002e3c:	e004      	b.n	8002e48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e3e:	bf00      	nop
 8002e40:	e002      	b.n	8002e48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e42:	bf00      	nop
 8002e44:	e000      	b.n	8002e48 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002e46:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e48:	7bfb      	ldrb	r3, [r7, #15]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d10d      	bne.n	8002e6a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e4e:	4b3f      	ldr	r3, [pc, #252]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6819      	ldr	r1, [r3, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	430b      	orrs	r3, r1
 8002e64:	4939      	ldr	r1, [pc, #228]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e6a:	7bfb      	ldrb	r3, [r7, #15]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d167      	bne.n	8002f40 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e70:	4b36      	ldr	r3, [pc, #216]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a35      	ldr	r2, [pc, #212]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e7c:	f7fe f9da 	bl	8001234 <HAL_GetTick>
 8002e80:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e82:	e009      	b.n	8002e98 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e84:	f7fe f9d6 	bl	8001234 <HAL_GetTick>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	1ad3      	subs	r3, r2, r3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d902      	bls.n	8002e98 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e92:	2303      	movs	r3, #3
 8002e94:	73fb      	strb	r3, [r7, #15]
        break;
 8002e96:	e005      	b.n	8002ea4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e98:	4b2c      	ldr	r3, [pc, #176]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1ef      	bne.n	8002e84 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002ea4:	7bfb      	ldrb	r3, [r7, #15]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d14a      	bne.n	8002f40 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d111      	bne.n	8002ed4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002eb0:	4b26      	ldr	r3, [pc, #152]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eb2:	695b      	ldr	r3, [r3, #20]
 8002eb4:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6892      	ldr	r2, [r2, #8]
 8002ec0:	0211      	lsls	r1, r2, #8
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	68d2      	ldr	r2, [r2, #12]
 8002ec6:	0912      	lsrs	r2, r2, #4
 8002ec8:	0452      	lsls	r2, r2, #17
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	491f      	ldr	r1, [pc, #124]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	614b      	str	r3, [r1, #20]
 8002ed2:	e011      	b.n	8002ef8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002edc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	6892      	ldr	r2, [r2, #8]
 8002ee4:	0211      	lsls	r1, r2, #8
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6912      	ldr	r2, [r2, #16]
 8002eea:	0852      	lsrs	r2, r2, #1
 8002eec:	3a01      	subs	r2, #1
 8002eee:	0652      	lsls	r2, r2, #25
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	4916      	ldr	r1, [pc, #88]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ef8:	4b14      	ldr	r3, [pc, #80]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a13      	ldr	r2, [pc, #76]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f02:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f04:	f7fe f996 	bl	8001234 <HAL_GetTick>
 8002f08:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f0a:	e009      	b.n	8002f20 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002f0c:	f7fe f992 	bl	8001234 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d902      	bls.n	8002f20 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	73fb      	strb	r3, [r7, #15]
          break;
 8002f1e:	e005      	b.n	8002f2c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002f20:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0ef      	beq.n	8002f0c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002f2c:	7bfb      	ldrb	r3, [r7, #15]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d106      	bne.n	8002f40 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002f32:	4b06      	ldr	r3, [pc, #24]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f34:	695a      	ldr	r2, [r3, #20]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	695b      	ldr	r3, [r3, #20]
 8002f3a:	4904      	ldr	r1, [pc, #16]	; (8002f4c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000

08002f50 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b084      	sub	sp, #16
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d06c      	beq.n	800303c <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d106      	bne.n	8002f7c <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7fd fe56 	bl	8000c28 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2202      	movs	r2, #2
 8002f80:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	22ca      	movs	r2, #202	; 0xca
 8002f8a:	625a      	str	r2, [r3, #36]	; 0x24
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2253      	movs	r2, #83	; 0x53
 8002f92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 f9fc 	bl	8003392 <RTC_EnterInitMode>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d14b      	bne.n	800303c <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6812      	ldr	r2, [r2, #0]
 8002fae:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fb6:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6899      	ldr	r1, [r3, #8]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	431a      	orrs	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	699b      	ldr	r3, [r3, #24]
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	687a      	ldr	r2, [r7, #4]
 8002fdc:	68d2      	ldr	r2, [r2, #12]
 8002fde:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6919      	ldr	r1, [r3, #16]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	041a      	lsls	r2, r3, #16
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002ff4:	6878      	ldr	r0, [r7, #4]
 8002ff6:	f000 f9ff 	bl	80033f8 <RTC_ExitInitMode>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002ffe:	7bfb      	ldrb	r3, [r7, #15]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d11b      	bne.n	800303c <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0203 	bic.w	r2, r2, #3
 8003012:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	69da      	ldr	r2, [r3, #28]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	695b      	ldr	r3, [r3, #20]
 8003022:	431a      	orrs	r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	22ff      	movs	r2, #255	; 0xff
 8003032:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 800303c:	7bfb      	ldrb	r3, [r7, #15]
}
 800303e:	4618      	mov	r0, r3
 8003040:	3710      	adds	r7, #16
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003046:	b590      	push	{r4, r7, lr}
 8003048:	b087      	sub	sp, #28
 800304a:	af00      	add	r7, sp, #0
 800304c:	60f8      	str	r0, [r7, #12]
 800304e:	60b9      	str	r1, [r7, #8]
 8003050:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d101      	bne.n	8003060 <HAL_RTC_SetTime+0x1a>
 800305c:	2302      	movs	r3, #2
 800305e:	e08b      	b.n	8003178 <HAL_RTC_SetTime+0x132>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2202      	movs	r2, #2
 800306c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	22ca      	movs	r2, #202	; 0xca
 8003076:	625a      	str	r2, [r3, #36]	; 0x24
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2253      	movs	r2, #83	; 0x53
 800307e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f000 f986 	bl	8003392 <RTC_EnterInitMode>
 8003086:	4603      	mov	r3, r0
 8003088:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800308a:	7cfb      	ldrb	r3, [r7, #19]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d163      	bne.n	8003158 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d126      	bne.n	80030e4 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d102      	bne.n	80030aa <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	2200      	movs	r2, #0
 80030a8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 f9e0 	bl	8003474 <RTC_ByteToBcd2>
 80030b4:	4603      	mov	r3, r0
 80030b6:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	785b      	ldrb	r3, [r3, #1]
 80030bc:	4618      	mov	r0, r3
 80030be:	f000 f9d9 	bl	8003474 <RTC_ByteToBcd2>
 80030c2:	4603      	mov	r3, r0
 80030c4:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030c6:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	789b      	ldrb	r3, [r3, #2]
 80030cc:	4618      	mov	r0, r3
 80030ce:	f000 f9d1 	bl	8003474 <RTC_ByteToBcd2>
 80030d2:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030d4:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	78db      	ldrb	r3, [r3, #3]
 80030dc:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030de:	4313      	orrs	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]
 80030e2:	e018      	b.n	8003116 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d102      	bne.n	80030f8 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2200      	movs	r2, #0
 80030f6:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	785b      	ldrb	r3, [r3, #1]
 8003102:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003104:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800310a:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	78db      	ldrb	r3, [r3, #3]
 8003110:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003120:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003124:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003134:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6899      	ldr	r1, [r3, #8]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	68da      	ldr	r2, [r3, #12]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	691b      	ldr	r3, [r3, #16]
 8003144:	431a      	orrs	r2, r3
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f000 f952 	bl	80033f8 <RTC_ExitInitMode>
 8003154:	4603      	mov	r3, r0
 8003156:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	22ff      	movs	r2, #255	; 0xff
 800315e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003160:	7cfb      	ldrb	r3, [r7, #19]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d103      	bne.n	800316e <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2201      	movs	r2, #1
 800316a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003176:	7cfb      	ldrb	r3, [r7, #19]
}
 8003178:	4618      	mov	r0, r3
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	bd90      	pop	{r4, r7, pc}

08003180 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003180:	b580      	push	{r7, lr}
 8003182:	b086      	sub	sp, #24
 8003184:	af00      	add	r7, sp, #0
 8003186:	60f8      	str	r0, [r7, #12]
 8003188:	60b9      	str	r1, [r7, #8]
 800318a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	691b      	ldr	r3, [r3, #16]
 800319c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80031ae:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80031b2:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	0c1b      	lsrs	r3, r3, #16
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031dc:	b2da      	uxtb	r2, r3
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	0d9b      	lsrs	r3, r3, #22
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d11a      	bne.n	800322e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f000 f959 	bl	80034b4 <RTC_Bcd2ToByte>
 8003202:	4603      	mov	r3, r0
 8003204:	461a      	mov	r2, r3
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800320a:	68bb      	ldr	r3, [r7, #8]
 800320c:	785b      	ldrb	r3, [r3, #1]
 800320e:	4618      	mov	r0, r3
 8003210:	f000 f950 	bl	80034b4 <RTC_Bcd2ToByte>
 8003214:	4603      	mov	r3, r0
 8003216:	461a      	mov	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	789b      	ldrb	r3, [r3, #2]
 8003220:	4618      	mov	r0, r3
 8003222:	f000 f947 	bl	80034b4 <RTC_Bcd2ToByte>
 8003226:	4603      	mov	r3, r0
 8003228:	461a      	mov	r2, r3
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800322e:	2300      	movs	r3, #0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003238:	b590      	push	{r4, r7, lr}
 800323a:	b087      	sub	sp, #28
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	f893 3020 	ldrb.w	r3, [r3, #32]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d101      	bne.n	8003252 <HAL_RTC_SetDate+0x1a>
 800324e:	2302      	movs	r3, #2
 8003250:	e075      	b.n	800333e <HAL_RTC_SetDate+0x106>
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2201      	movs	r2, #1
 8003256:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2202      	movs	r2, #2
 800325e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d10e      	bne.n	8003286 <HAL_RTC_SetDate+0x4e>
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	785b      	ldrb	r3, [r3, #1]
 800326c:	f003 0310 	and.w	r3, r3, #16
 8003270:	2b00      	cmp	r3, #0
 8003272:	d008      	beq.n	8003286 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	785b      	ldrb	r3, [r3, #1]
 8003278:	f023 0310 	bic.w	r3, r3, #16
 800327c:	b2db      	uxtb	r3, r3
 800327e:	330a      	adds	r3, #10
 8003280:	b2da      	uxtb	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d11c      	bne.n	80032c6 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800328c:	68bb      	ldr	r3, [r7, #8]
 800328e:	78db      	ldrb	r3, [r3, #3]
 8003290:	4618      	mov	r0, r3
 8003292:	f000 f8ef 	bl	8003474 <RTC_ByteToBcd2>
 8003296:	4603      	mov	r3, r0
 8003298:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	785b      	ldrb	r3, [r3, #1]
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 f8e8 	bl	8003474 <RTC_ByteToBcd2>
 80032a4:	4603      	mov	r3, r0
 80032a6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80032a8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	789b      	ldrb	r3, [r3, #2]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f000 f8e0 	bl	8003474 <RTC_ByteToBcd2>
 80032b4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80032b6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 80032c0:	4313      	orrs	r3, r2
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	e00e      	b.n	80032e4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	78db      	ldrb	r3, [r3, #3]
 80032ca:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	785b      	ldrb	r3, [r3, #1]
 80032d0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80032d2:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80032d8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80032da:	68bb      	ldr	r3, [r7, #8]
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80032e0:	4313      	orrs	r3, r2
 80032e2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	22ca      	movs	r2, #202	; 0xca
 80032ea:	625a      	str	r2, [r3, #36]	; 0x24
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2253      	movs	r2, #83	; 0x53
 80032f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80032f4:	68f8      	ldr	r0, [r7, #12]
 80032f6:	f000 f84c 	bl	8003392 <RTC_EnterInitMode>
 80032fa:	4603      	mov	r3, r0
 80032fc:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 80032fe:	7cfb      	ldrb	r3, [r7, #19]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d10c      	bne.n	800331e <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800330e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003312:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003314:	68f8      	ldr	r0, [r7, #12]
 8003316:	f000 f86f 	bl	80033f8 <RTC_ExitInitMode>
 800331a:	4603      	mov	r3, r0
 800331c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	22ff      	movs	r2, #255	; 0xff
 8003324:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003326:	7cfb      	ldrb	r3, [r7, #19]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d103      	bne.n	8003334 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800333c:	7cfb      	ldrb	r3, [r7, #19]
}
 800333e:	4618      	mov	r0, r3
 8003340:	371c      	adds	r7, #28
 8003342:	46bd      	mov	sp, r7
 8003344:	bd90      	pop	{r4, r7, pc}

08003346 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003346:	b580      	push	{r7, lr}
 8003348:	b084      	sub	sp, #16
 800334a:	af00      	add	r7, sp, #0
 800334c:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68da      	ldr	r2, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800335c:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 800335e:	f7fd ff69 	bl	8001234 <HAL_GetTick>
 8003362:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003364:	e009      	b.n	800337a <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003366:	f7fd ff65 	bl	8001234 <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003374:	d901      	bls.n	800337a <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e007      	b.n	800338a <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0320 	and.w	r3, r3, #32
 8003384:	2b00      	cmp	r3, #0
 8003386:	d0ee      	beq.n	8003366 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3710      	adds	r7, #16
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b084      	sub	sp, #16
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800339a:	2300      	movs	r3, #0
 800339c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d120      	bne.n	80033ee <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f04f 32ff 	mov.w	r2, #4294967295
 80033b4:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80033b6:	f7fd ff3d 	bl	8001234 <HAL_GetTick>
 80033ba:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80033bc:	e00d      	b.n	80033da <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80033be:	f7fd ff39 	bl	8001234 <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033cc:	d905      	bls.n	80033da <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2203      	movs	r2, #3
 80033d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d102      	bne.n	80033ee <RTC_EnterInitMode+0x5c>
 80033e8:	7bfb      	ldrb	r3, [r7, #15]
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d1e7      	bne.n	80033be <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 80033ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3710      	adds	r7, #16
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003400:	2300      	movs	r3, #0
 8003402:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003404:	4b1a      	ldr	r3, [pc, #104]	; (8003470 <RTC_ExitInitMode+0x78>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	4a19      	ldr	r2, [pc, #100]	; (8003470 <RTC_ExitInitMode+0x78>)
 800340a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800340e:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003410:	4b17      	ldr	r3, [pc, #92]	; (8003470 <RTC_ExitInitMode+0x78>)
 8003412:	689b      	ldr	r3, [r3, #8]
 8003414:	f003 0320 	and.w	r3, r3, #32
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10c      	bne.n	8003436 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff ff92 	bl	8003346 <HAL_RTC_WaitForSynchro>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01e      	beq.n	8003466 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2203      	movs	r2, #3
 800342c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003430:	2303      	movs	r3, #3
 8003432:	73fb      	strb	r3, [r7, #15]
 8003434:	e017      	b.n	8003466 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8003436:	4b0e      	ldr	r3, [pc, #56]	; (8003470 <RTC_ExitInitMode+0x78>)
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	4a0d      	ldr	r2, [pc, #52]	; (8003470 <RTC_ExitInitMode+0x78>)
 800343c:	f023 0320 	bic.w	r3, r3, #32
 8003440:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff ff7f 	bl	8003346 <HAL_RTC_WaitForSynchro>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2203      	movs	r2, #3
 8003452:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8003456:	2303      	movs	r3, #3
 8003458:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800345a:	4b05      	ldr	r3, [pc, #20]	; (8003470 <RTC_ExitInitMode+0x78>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	4a04      	ldr	r2, [pc, #16]	; (8003470 <RTC_ExitInitMode+0x78>)
 8003460:	f043 0320 	orr.w	r3, r3, #32
 8003464:	6093      	str	r3, [r2, #8]
  }

  return status;
 8003466:	7bfb      	ldrb	r3, [r7, #15]
}
 8003468:	4618      	mov	r0, r3
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40002800 	.word	0x40002800

08003474 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8003482:	79fb      	ldrb	r3, [r7, #7]
 8003484:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 8003486:	e005      	b.n	8003494 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	3301      	adds	r3, #1
 800348c:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 800348e:	7afb      	ldrb	r3, [r7, #11]
 8003490:	3b0a      	subs	r3, #10
 8003492:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8003494:	7afb      	ldrb	r3, [r7, #11]
 8003496:	2b09      	cmp	r3, #9
 8003498:	d8f6      	bhi.n	8003488 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	b2db      	uxtb	r3, r3
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	7afb      	ldrb	r3, [r7, #11]
 80034a4:	4313      	orrs	r3, r2
 80034a6:	b2db      	uxtb	r3, r3
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3714      	adds	r7, #20
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	4603      	mov	r3, r0
 80034bc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	091b      	lsrs	r3, r3, #4
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	0092      	lsls	r2, r2, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80034ce:	79fb      	ldrb	r3, [r7, #7]
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	7bfb      	ldrb	r3, [r7, #15]
 80034d8:	4413      	add	r3, r2
 80034da:	b2db      	uxtb	r3, r3
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr

080034e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e095      	b.n	8003626 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d108      	bne.n	8003514 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800350a:	d009      	beq.n	8003520 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	61da      	str	r2, [r3, #28]
 8003512:	e005      	b.n	8003520 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800352c:	b2db      	uxtb	r3, r3
 800352e:	2b00      	cmp	r3, #0
 8003530:	d106      	bne.n	8003540 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7fd fbe4 	bl	8000d08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2202      	movs	r2, #2
 8003544:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003556:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003560:	d902      	bls.n	8003568 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003562:	2300      	movs	r3, #0
 8003564:	60fb      	str	r3, [r7, #12]
 8003566:	e002      	b.n	800356e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800356c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003576:	d007      	beq.n	8003588 <HAL_SPI_Init+0xa0>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68db      	ldr	r3, [r3, #12]
 800357c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003580:	d002      	beq.n	8003588 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	691b      	ldr	r3, [r3, #16]
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	695b      	ldr	r3, [r3, #20]
 80035a8:	f003 0301 	and.w	r3, r3, #1
 80035ac:	431a      	orrs	r2, r3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	699b      	ldr	r3, [r3, #24]
 80035b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035c0:	431a      	orrs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ca:	ea42 0103 	orr.w	r1, r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	430a      	orrs	r2, r1
 80035dc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	0c1b      	lsrs	r3, r3, #16
 80035e4:	f003 0204 	and.w	r2, r3, #4
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	f003 0310 	and.w	r3, r3, #16
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035f6:	f003 0308 	and.w	r3, r3, #8
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003604:	ea42 0103 	orr.w	r1, r2, r3
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3710      	adds	r7, #16
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800362e:	b580      	push	{r7, lr}
 8003630:	b088      	sub	sp, #32
 8003632:	af00      	add	r7, sp, #0
 8003634:	60f8      	str	r0, [r7, #12]
 8003636:	60b9      	str	r1, [r7, #8]
 8003638:	603b      	str	r3, [r7, #0]
 800363a:	4613      	mov	r3, r2
 800363c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_SPI_Transmit+0x22>
 800364c:	2302      	movs	r3, #2
 800364e:	e158      	b.n	8003902 <HAL_SPI_Transmit+0x2d4>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003658:	f7fd fdec 	bl	8001234 <HAL_GetTick>
 800365c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800365e:	88fb      	ldrh	r3, [r7, #6]
 8003660:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b01      	cmp	r3, #1
 800366c:	d002      	beq.n	8003674 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800366e:	2302      	movs	r3, #2
 8003670:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003672:	e13d      	b.n	80038f0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d002      	beq.n	8003680 <HAL_SPI_Transmit+0x52>
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d102      	bne.n	8003686 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003684:	e134      	b.n	80038f0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2203      	movs	r2, #3
 800368a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	68ba      	ldr	r2, [r7, #8]
 8003698:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	88fa      	ldrh	r2, [r7, #6]
 800369e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	88fa      	ldrh	r2, [r7, #6]
 80036a4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2200      	movs	r2, #0
 80036c6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036d0:	d10f      	bne.n	80036f2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fc:	2b40      	cmp	r3, #64	; 0x40
 80036fe:	d007      	beq.n	8003710 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800370e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	68db      	ldr	r3, [r3, #12]
 8003714:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003718:	d94b      	bls.n	80037b2 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d002      	beq.n	8003728 <HAL_SPI_Transmit+0xfa>
 8003722:	8afb      	ldrh	r3, [r7, #22]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d13e      	bne.n	80037a6 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372c:	881a      	ldrh	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	1c9a      	adds	r2, r3, #2
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003742:	b29b      	uxth	r3, r3
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800374c:	e02b      	b.n	80037a6 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b02      	cmp	r3, #2
 800375a:	d112      	bne.n	8003782 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003760:	881a      	ldrh	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800376c:	1c9a      	adds	r2, r3, #2
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003780:	e011      	b.n	80037a6 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003782:	f7fd fd57 	bl	8001234 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	429a      	cmp	r2, r3
 8003790:	d803      	bhi.n	800379a <HAL_SPI_Transmit+0x16c>
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003798:	d102      	bne.n	80037a0 <HAL_SPI_Transmit+0x172>
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d102      	bne.n	80037a6 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80037a4:	e0a4      	b.n	80038f0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1ce      	bne.n	800374e <HAL_SPI_Transmit+0x120>
 80037b0:	e07c      	b.n	80038ac <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_SPI_Transmit+0x192>
 80037ba:	8afb      	ldrh	r3, [r7, #22]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d170      	bne.n	80038a2 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d912      	bls.n	80037f0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037ce:	881a      	ldrh	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037da:	1c9a      	adds	r2, r3, #2
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b02      	subs	r3, #2
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037ee:	e058      	b.n	80038a2 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	330c      	adds	r3, #12
 80037fa:	7812      	ldrb	r2, [r2, #0]
 80037fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003802:	1c5a      	adds	r2, r3, #1
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800380c:	b29b      	uxth	r3, r3
 800380e:	3b01      	subs	r3, #1
 8003810:	b29a      	uxth	r2, r3
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8003816:	e044      	b.n	80038a2 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	689b      	ldr	r3, [r3, #8]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b02      	cmp	r3, #2
 8003824:	d12b      	bne.n	800387e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800382a:	b29b      	uxth	r3, r3
 800382c:	2b01      	cmp	r3, #1
 800382e:	d912      	bls.n	8003856 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	881a      	ldrh	r2, [r3, #0]
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003840:	1c9a      	adds	r2, r3, #2
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800384a:	b29b      	uxth	r3, r3
 800384c:	3b02      	subs	r3, #2
 800384e:	b29a      	uxth	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003854:	e025      	b.n	80038a2 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	330c      	adds	r3, #12
 8003860:	7812      	ldrb	r2, [r2, #0]
 8003862:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003868:	1c5a      	adds	r2, r3, #1
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003872:	b29b      	uxth	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800387c:	e011      	b.n	80038a2 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800387e:	f7fd fcd9 	bl	8001234 <HAL_GetTick>
 8003882:	4602      	mov	r2, r0
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d803      	bhi.n	8003896 <HAL_SPI_Transmit+0x268>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003894:	d102      	bne.n	800389c <HAL_SPI_Transmit+0x26e>
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d102      	bne.n	80038a2 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 800389c:	2303      	movs	r3, #3
 800389e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038a0:	e026      	b.n	80038f0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1b5      	bne.n	8003818 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	6839      	ldr	r1, [r7, #0]
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f949 	bl	8003b48 <SPI_EndRxTxTransaction>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2220      	movs	r2, #32
 80038c0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10a      	bne.n	80038e0 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038ca:	2300      	movs	r3, #0
 80038cc:	613b      	str	r3, [r7, #16]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d002      	beq.n	80038ee <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	77fb      	strb	r3, [r7, #31]
 80038ec:	e000      	b.n	80038f0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80038ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003900:	7ffb      	ldrb	r3, [r7, #31]
}
 8003902:	4618      	mov	r0, r3
 8003904:	3720      	adds	r7, #32
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	603b      	str	r3, [r7, #0]
 8003918:	4613      	mov	r3, r2
 800391a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800391c:	f7fd fc8a 	bl	8001234 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003924:	1a9b      	subs	r3, r3, r2
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	4413      	add	r3, r2
 800392a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800392c:	f7fd fc82 	bl	8001234 <HAL_GetTick>
 8003930:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003932:	4b39      	ldr	r3, [pc, #228]	; (8003a18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	015b      	lsls	r3, r3, #5
 8003938:	0d1b      	lsrs	r3, r3, #20
 800393a:	69fa      	ldr	r2, [r7, #28]
 800393c:	fb02 f303 	mul.w	r3, r2, r3
 8003940:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003942:	e054      	b.n	80039ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800394a:	d050      	beq.n	80039ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800394c:	f7fd fc72 	bl	8001234 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	69fa      	ldr	r2, [r7, #28]
 8003958:	429a      	cmp	r2, r3
 800395a:	d902      	bls.n	8003962 <SPI_WaitFlagStateUntilTimeout+0x56>
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d13d      	bne.n	80039de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003970:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800397a:	d111      	bne.n	80039a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	689b      	ldr	r3, [r3, #8]
 8003980:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003984:	d004      	beq.n	8003990 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800398e:	d107      	bne.n	80039a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800399e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039a8:	d10f      	bne.n	80039ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80039c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	2200      	movs	r2, #0
 80039d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80039da:	2303      	movs	r3, #3
 80039dc:	e017      	b.n	8003a0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d101      	bne.n	80039e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	3b01      	subs	r3, #1
 80039ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	4013      	ands	r3, r2
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	bf0c      	ite	eq
 80039fe:	2301      	moveq	r3, #1
 8003a00:	2300      	movne	r3, #0
 8003a02:	b2db      	uxtb	r3, r3
 8003a04:	461a      	mov	r2, r3
 8003a06:	79fb      	ldrb	r3, [r7, #7]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d19b      	bne.n	8003944 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3720      	adds	r7, #32
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000004 	.word	0x20000004

08003a1c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08a      	sub	sp, #40	; 0x28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003a2e:	f7fd fc01 	bl	8001234 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a36:	1a9b      	subs	r3, r3, r2
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003a3e:	f7fd fbf9 	bl	8001234 <HAL_GetTick>
 8003a42:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	330c      	adds	r3, #12
 8003a4a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003a4c:	4b3d      	ldr	r3, [pc, #244]	; (8003b44 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	00da      	lsls	r2, r3, #3
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	0d1b      	lsrs	r3, r3, #20
 8003a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5e:	fb02 f303 	mul.w	r3, r2, r3
 8003a62:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003a64:	e060      	b.n	8003b28 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003a6c:	d107      	bne.n	8003a7e <SPI_WaitFifoStateUntilTimeout+0x62>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d104      	bne.n	8003a7e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	b2db      	uxtb	r3, r3
 8003a7a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003a7c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d050      	beq.n	8003b28 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003a86:	f7fd fbd5 	bl	8001234 <HAL_GetTick>
 8003a8a:	4602      	mov	r2, r0
 8003a8c:	6a3b      	ldr	r3, [r7, #32]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d902      	bls.n	8003a9c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003a96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d13d      	bne.n	8003b18 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003aaa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ab4:	d111      	bne.n	8003ada <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003abe:	d004      	beq.n	8003aca <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ac8:	d107      	bne.n	8003ada <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ad8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ae2:	d10f      	bne.n	8003b04 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003af2:	601a      	str	r2, [r3, #0]
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b02:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e010      	b.n	8003b3a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d101      	bne.n	8003b22 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003b1e:	2300      	movs	r3, #0
 8003b20:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	3b01      	subs	r3, #1
 8003b26:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	689a      	ldr	r2, [r3, #8]
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	4013      	ands	r3, r2
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d196      	bne.n	8003a66 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3728      	adds	r7, #40	; 0x28
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000004 	.word	0x20000004

08003b48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af02      	add	r7, sp, #8
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003b60:	68f8      	ldr	r0, [r7, #12]
 8003b62:	f7ff ff5b 	bl	8003a1c <SPI_WaitFifoStateUntilTimeout>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d007      	beq.n	8003b7c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b70:	f043 0220 	orr.w	r2, r3, #32
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e027      	b.n	8003bcc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	9300      	str	r3, [sp, #0]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	2200      	movs	r2, #0
 8003b84:	2180      	movs	r1, #128	; 0x80
 8003b86:	68f8      	ldr	r0, [r7, #12]
 8003b88:	f7ff fec0 	bl	800390c <SPI_WaitFlagStateUntilTimeout>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d007      	beq.n	8003ba2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b96:	f043 0220 	orr.w	r2, r3, #32
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e014      	b.n	8003bcc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f7ff ff34 	bl	8003a1c <SPI_WaitFifoStateUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d007      	beq.n	8003bca <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bbe:	f043 0220 	orr.w	r2, r3, #32
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e000      	b.n	8003bcc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003bca:	2300      	movs	r3, #0
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003be2:	2301      	movs	r3, #1
 8003be4:	e040      	b.n	8003c68 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7fd f9f8 	bl	8000fec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2224      	movs	r2, #36	; 0x24
 8003c00:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f022 0201 	bic.w	r2, r2, #1
 8003c10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f000 fc8a 	bl	800452c <UART_SetConfig>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d101      	bne.n	8003c22 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e022      	b.n	8003c68 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d002      	beq.n	8003c30 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f000 ff08 	bl	8004a40 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f042 0201 	orr.w	r2, r2, #1
 8003c5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 ff8f 	bl	8004b84 <UART_CheckIdleState>
 8003c66:	4603      	mov	r3, r0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}

08003c70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08a      	sub	sp, #40	; 0x28
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c84:	2b20      	cmp	r3, #32
 8003c86:	f040 8082 	bne.w	8003d8e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <HAL_UART_Transmit+0x26>
 8003c90:	88fb      	ldrh	r3, [r7, #6]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e07a      	b.n	8003d90 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_UART_Transmit+0x38>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e073      	b.n	8003d90 <HAL_UART_Transmit+0x120>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2221      	movs	r2, #33	; 0x21
 8003cbc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003cbe:	f7fd fab9 	bl	8001234 <HAL_GetTick>
 8003cc2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	88fa      	ldrh	r2, [r7, #6]
 8003cc8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	88fa      	ldrh	r2, [r7, #6]
 8003cd0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cdc:	d108      	bne.n	8003cf0 <HAL_UART_Transmit+0x80>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d104      	bne.n	8003cf0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	61bb      	str	r3, [r7, #24]
 8003cee:	e003      	b.n	8003cf8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003d00:	e02d      	b.n	8003d5e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	9300      	str	r3, [sp, #0]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	2200      	movs	r2, #0
 8003d0a:	2180      	movs	r1, #128	; 0x80
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 ff82 	bl	8004c16 <UART_WaitOnFlagUntilTimeout>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d001      	beq.n	8003d1c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003d18:	2303      	movs	r3, #3
 8003d1a:	e039      	b.n	8003d90 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d10b      	bne.n	8003d3a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	881a      	ldrh	r2, [r3, #0]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d2e:	b292      	uxth	r2, r2
 8003d30:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	3302      	adds	r3, #2
 8003d36:	61bb      	str	r3, [r7, #24]
 8003d38:	e008      	b.n	8003d4c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	781a      	ldrb	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	b292      	uxth	r2, r2
 8003d44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d46:	69fb      	ldr	r3, [r7, #28]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1cb      	bne.n	8003d02 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	2200      	movs	r2, #0
 8003d72:	2140      	movs	r1, #64	; 0x40
 8003d74:	68f8      	ldr	r0, [r7, #12]
 8003d76:	f000 ff4e 	bl	8004c16 <UART_WaitOnFlagUntilTimeout>
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d001      	beq.n	8003d84 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003d80:	2303      	movs	r3, #3
 8003d82:	e005      	b.n	8003d90 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2220      	movs	r2, #32
 8003d88:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	e000      	b.n	8003d90 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003d8e:	2302      	movs	r3, #2
  }
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3720      	adds	r7, #32
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08a      	sub	sp, #40	; 0x28
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	603b      	str	r3, [r7, #0]
 8003da4:	4613      	mov	r3, r2
 8003da6:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dac:	2b20      	cmp	r3, #32
 8003dae:	f040 80bf 	bne.w	8003f30 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <HAL_UART_Receive+0x26>
 8003db8:	88fb      	ldrh	r3, [r7, #6]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d101      	bne.n	8003dc2 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e0b7      	b.n	8003f32 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d101      	bne.n	8003dd0 <HAL_UART_Receive+0x38>
 8003dcc:	2302      	movs	r3, #2
 8003dce:	e0b0      	b.n	8003f32 <HAL_UART_Receive+0x19a>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2222      	movs	r2, #34	; 0x22
 8003de4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dec:	f7fd fa22 	bl	8001234 <HAL_GetTick>
 8003df0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	88fa      	ldrh	r2, [r7, #6]
 8003df6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	88fa      	ldrh	r2, [r7, #6]
 8003dfe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0a:	d10e      	bne.n	8003e2a <HAL_UART_Receive+0x92>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d105      	bne.n	8003e20 <HAL_UART_Receive+0x88>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e1a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e1e:	e02d      	b.n	8003e7c <HAL_UART_Receive+0xe4>
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	22ff      	movs	r2, #255	; 0xff
 8003e24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e28:	e028      	b.n	8003e7c <HAL_UART_Receive+0xe4>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d10d      	bne.n	8003e4e <HAL_UART_Receive+0xb6>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d104      	bne.n	8003e44 <HAL_UART_Receive+0xac>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	22ff      	movs	r2, #255	; 0xff
 8003e3e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e42:	e01b      	b.n	8003e7c <HAL_UART_Receive+0xe4>
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	227f      	movs	r2, #127	; 0x7f
 8003e48:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e4c:	e016      	b.n	8003e7c <HAL_UART_Receive+0xe4>
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e56:	d10d      	bne.n	8003e74 <HAL_UART_Receive+0xdc>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d104      	bne.n	8003e6a <HAL_UART_Receive+0xd2>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	227f      	movs	r2, #127	; 0x7f
 8003e64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e68:	e008      	b.n	8003e7c <HAL_UART_Receive+0xe4>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	223f      	movs	r2, #63	; 0x3f
 8003e6e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003e72:	e003      	b.n	8003e7c <HAL_UART_Receive+0xe4>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003e82:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e8c:	d108      	bne.n	8003ea0 <HAL_UART_Receive+0x108>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d104      	bne.n	8003ea0 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	61bb      	str	r3, [r7, #24]
 8003e9e:	e003      	b.n	8003ea8 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003eb0:	e033      	b.n	8003f1a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	2120      	movs	r1, #32
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 feaa 	bl	8004c16 <UART_WaitOnFlagUntilTimeout>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d001      	beq.n	8003ecc <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e032      	b.n	8003f32 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10c      	bne.n	8003eec <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	8a7b      	ldrh	r3, [r7, #18]
 8003edc:	4013      	ands	r3, r2
 8003ede:	b29a      	uxth	r2, r3
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	3302      	adds	r3, #2
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	e00d      	b.n	8003f08 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003ef2:	b29b      	uxth	r3, r3
 8003ef4:	b2da      	uxtb	r2, r3
 8003ef6:	8a7b      	ldrh	r3, [r7, #18]
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	4013      	ands	r3, r2
 8003efc:	b2da      	uxtb	r2, r3
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	3301      	adds	r3, #1
 8003f06:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d1c5      	bne.n	8003eb2 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	2220      	movs	r2, #32
 8003f2a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	e000      	b.n	8003f32 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8003f30:	2302      	movs	r3, #2
  }
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3720      	adds	r7, #32
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b0ba      	sub	sp, #232	; 0xe8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003f62:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003f66:	f640 030f 	movw	r3, #2063	; 0x80f
 8003f6a:	4013      	ands	r3, r2
 8003f6c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003f70:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d115      	bne.n	8003fa4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f7c:	f003 0320 	and.w	r3, r3, #32
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00f      	beq.n	8003fa4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003f84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f88:	f003 0320 	and.w	r3, r3, #32
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d009      	beq.n	8003fa4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	f000 82a6 	beq.w	80044e6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	4798      	blx	r3
      }
      return;
 8003fa2:	e2a0      	b.n	80044e6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003fa4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 8117 	beq.w	80041dc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fb2:	f003 0301 	and.w	r3, r3, #1
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d106      	bne.n	8003fc8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003fba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003fbe:	4b85      	ldr	r3, [pc, #532]	; (80041d4 <HAL_UART_IRQHandler+0x298>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	f000 810a 	beq.w	80041dc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fcc:	f003 0301 	and.w	r3, r3, #1
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d011      	beq.n	8003ff8 <HAL_UART_IRQHandler+0xbc>
 8003fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d00b      	beq.n	8003ff8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fee:	f043 0201 	orr.w	r2, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ff8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ffc:	f003 0302 	and.w	r3, r3, #2
 8004000:	2b00      	cmp	r3, #0
 8004002:	d011      	beq.n	8004028 <HAL_UART_IRQHandler+0xec>
 8004004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004008:	f003 0301 	and.w	r3, r3, #1
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00b      	beq.n	8004028 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2202      	movs	r2, #2
 8004016:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800401e:	f043 0204 	orr.w	r2, r3, #4
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d011      	beq.n	8004058 <HAL_UART_IRQHandler+0x11c>
 8004034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00b      	beq.n	8004058 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2204      	movs	r2, #4
 8004046:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800404e:	f043 0202 	orr.w	r2, r3, #2
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004058:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b00      	cmp	r3, #0
 8004062:	d017      	beq.n	8004094 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004064:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b00      	cmp	r3, #0
 800406e:	d105      	bne.n	800407c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004070:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004074:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00b      	beq.n	8004094 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2208      	movs	r2, #8
 8004082:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800408a:	f043 0208 	orr.w	r2, r3, #8
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004094:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004098:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800409c:	2b00      	cmp	r3, #0
 800409e:	d012      	beq.n	80040c6 <HAL_UART_IRQHandler+0x18a>
 80040a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00c      	beq.n	80040c6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040bc:	f043 0220 	orr.w	r2, r3, #32
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	f000 820c 	beq.w	80044ea <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80040d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040d6:	f003 0320 	and.w	r3, r3, #32
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00d      	beq.n	80040fa <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040e2:	f003 0320 	and.w	r3, r3, #32
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d007      	beq.n	80040fa <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d003      	beq.n	80040fa <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004100:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800410e:	2b40      	cmp	r3, #64	; 0x40
 8004110:	d005      	beq.n	800411e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004112:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004116:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800411a:	2b00      	cmp	r3, #0
 800411c:	d04f      	beq.n	80041be <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fe3d 	bl	8004d9e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412e:	2b40      	cmp	r3, #64	; 0x40
 8004130:	d141      	bne.n	80041b6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3308      	adds	r3, #8
 8004138:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004148:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800414c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004150:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3308      	adds	r3, #8
 800415a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800415e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004166:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800416a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800416e:	e841 2300 	strex	r3, r2, [r1]
 8004172:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004176:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1d9      	bne.n	8004132 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004182:	2b00      	cmp	r3, #0
 8004184:	d013      	beq.n	80041ae <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418a:	4a13      	ldr	r2, [pc, #76]	; (80041d8 <HAL_UART_IRQHandler+0x29c>)
 800418c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004192:	4618      	mov	r0, r3
 8004194:	f7fd f9cd 	bl	8001532 <HAL_DMA_Abort_IT>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d017      	beq.n	80041ce <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80041a8:	4610      	mov	r0, r2
 80041aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ac:	e00f      	b.n	80041ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f9a6 	bl	8004500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b4:	e00b      	b.n	80041ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041b6:	6878      	ldr	r0, [r7, #4]
 80041b8:	f000 f9a2 	bl	8004500 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041bc:	e007      	b.n	80041ce <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f99e 	bl	8004500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80041cc:	e18d      	b.n	80044ea <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041ce:	bf00      	nop
    return;
 80041d0:	e18b      	b.n	80044ea <HAL_UART_IRQHandler+0x5ae>
 80041d2:	bf00      	nop
 80041d4:	04000120 	.word	0x04000120
 80041d8:	08004e65 	.word	0x08004e65

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	f040 8146 	bne.w	8004472 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80041e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041ea:	f003 0310 	and.w	r3, r3, #16
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	f000 813f 	beq.w	8004472 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80041f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041f8:	f003 0310 	and.w	r3, r3, #16
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 8138 	beq.w	8004472 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2210      	movs	r2, #16
 8004208:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004214:	2b40      	cmp	r3, #64	; 0x40
 8004216:	f040 80b4 	bne.w	8004382 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004226:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 815f 	beq.w	80044ee <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004236:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800423a:	429a      	cmp	r2, r3
 800423c:	f080 8157 	bcs.w	80044ee <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004246:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0320 	and.w	r3, r3, #32
 8004256:	2b00      	cmp	r3, #0
 8004258:	f040 8085 	bne.w	8004366 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004270:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004274:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004278:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	461a      	mov	r2, r3
 8004282:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004286:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800428a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800428e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004292:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004296:	e841 2300 	strex	r3, r2, [r1]
 800429a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800429e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1da      	bne.n	800425c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	3308      	adds	r3, #8
 80042ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042b0:	e853 3f00 	ldrex	r3, [r3]
 80042b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80042b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042b8:	f023 0301 	bic.w	r3, r3, #1
 80042bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	3308      	adds	r3, #8
 80042c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80042ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80042ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80042d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80042d6:	e841 2300 	strex	r3, r2, [r1]
 80042da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80042dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1e1      	bne.n	80042a6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	3308      	adds	r3, #8
 80042e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042ec:	e853 3f00 	ldrex	r3, [r3]
 80042f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80042f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80042f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	3308      	adds	r3, #8
 8004302:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004306:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004308:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800430c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800430e:	e841 2300 	strex	r3, r2, [r1]
 8004312:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004314:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1e3      	bne.n	80042e2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2220      	movs	r2, #32
 800431e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800432e:	e853 3f00 	ldrex	r3, [r3]
 8004332:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004334:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004336:	f023 0310 	bic.w	r3, r3, #16
 800433a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004348:	65bb      	str	r3, [r7, #88]	; 0x58
 800434a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800434e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004350:	e841 2300 	strex	r3, r2, [r1]
 8004354:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004356:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1e4      	bne.n	8004326 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004360:	4618      	mov	r0, r3
 8004362:	f7fd f8a8 	bl	80014b6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004372:	b29b      	uxth	r3, r3
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	b29b      	uxth	r3, r3
 8004378:	4619      	mov	r1, r3
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f000 f8ca 	bl	8004514 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004380:	e0b5      	b.n	80044ee <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800438e:	b29b      	uxth	r3, r3
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800439c:	b29b      	uxth	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 80a7 	beq.w	80044f2 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80043a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	f000 80a2 	beq.w	80044f2 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b6:	e853 3f00 	ldrex	r3, [r3]
 80043ba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043c2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	461a      	mov	r2, r3
 80043cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80043d0:	647b      	str	r3, [r7, #68]	; 0x44
 80043d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043d8:	e841 2300 	strex	r3, r2, [r1]
 80043dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d1e4      	bne.n	80043ae <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	3308      	adds	r3, #8
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	e853 3f00 	ldrex	r3, [r3]
 80043f2:	623b      	str	r3, [r7, #32]
   return(result);
 80043f4:	6a3b      	ldr	r3, [r7, #32]
 80043f6:	f023 0301 	bic.w	r3, r3, #1
 80043fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	3308      	adds	r3, #8
 8004404:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004408:	633a      	str	r2, [r7, #48]	; 0x30
 800440a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800440c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800440e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004410:	e841 2300 	strex	r3, r2, [r1]
 8004414:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1e3      	bne.n	80043e4 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2220      	movs	r2, #32
 8004420:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	e853 3f00 	ldrex	r3, [r3]
 800443a:	60fb      	str	r3, [r7, #12]
   return(result);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f023 0310 	bic.w	r3, r3, #16
 8004442:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	461a      	mov	r2, r3
 800444c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	69b9      	ldr	r1, [r7, #24]
 8004456:	69fa      	ldr	r2, [r7, #28]
 8004458:	e841 2300 	strex	r3, r2, [r1]
 800445c:	617b      	str	r3, [r7, #20]
   return(result);
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e4      	bne.n	800442e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004464:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004468:	4619      	mov	r1, r3
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	f000 f852 	bl	8004514 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004470:	e03f      	b.n	80044f2 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004476:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00e      	beq.n	800449c <HAL_UART_IRQHandler+0x560>
 800447e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004482:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004486:	2b00      	cmp	r3, #0
 8004488:	d008      	beq.n	800449c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004492:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 fd25 	bl	8004ee4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800449a:	e02d      	b.n	80044f8 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800449c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d00e      	beq.n	80044c6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80044a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d008      	beq.n	80044c6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01c      	beq.n	80044f6 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	4798      	blx	r3
    }
    return;
 80044c4:	e017      	b.n	80044f6 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80044c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d012      	beq.n	80044f8 <HAL_UART_IRQHandler+0x5bc>
 80044d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d00c      	beq.n	80044f8 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 fcd6 	bl	8004e90 <UART_EndTransmit_IT>
    return;
 80044e4:	e008      	b.n	80044f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80044e6:	bf00      	nop
 80044e8:	e006      	b.n	80044f8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80044ea:	bf00      	nop
 80044ec:	e004      	b.n	80044f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80044ee:	bf00      	nop
 80044f0:	e002      	b.n	80044f8 <HAL_UART_IRQHandler+0x5bc>
      return;
 80044f2:	bf00      	nop
 80044f4:	e000      	b.n	80044f8 <HAL_UART_IRQHandler+0x5bc>
    return;
 80044f6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80044f8:	37e8      	adds	r7, #232	; 0xe8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop

08004500 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004500:	b480      	push	{r7}
 8004502:	b083      	sub	sp, #12
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004508:	bf00      	nop
 800450a:	370c      	adds	r7, #12
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004514:	b480      	push	{r7}
 8004516:	b083      	sub	sp, #12
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	460b      	mov	r3, r1
 800451e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004520:	bf00      	nop
 8004522:	370c      	adds	r7, #12
 8004524:	46bd      	mov	sp, r7
 8004526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452a:	4770      	bx	lr

0800452c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800452c:	b5b0      	push	{r4, r5, r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004534:	2300      	movs	r3, #0
 8004536:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	689a      	ldr	r2, [r3, #8]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	431a      	orrs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	431a      	orrs	r2, r3
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	4313      	orrs	r3, r2
 800454e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	4bad      	ldr	r3, [pc, #692]	; (800480c <UART_SetConfig+0x2e0>)
 8004558:	4013      	ands	r3, r2
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	6812      	ldr	r2, [r2, #0]
 800455e:	69f9      	ldr	r1, [r7, #28]
 8004560:	430b      	orrs	r3, r1
 8004562:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	699b      	ldr	r3, [r3, #24]
 800457e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4aa2      	ldr	r2, [pc, #648]	; (8004810 <UART_SetConfig+0x2e4>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d004      	beq.n	8004594 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	69fa      	ldr	r2, [r7, #28]
 8004590:	4313      	orrs	r3, r2
 8004592:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	69fa      	ldr	r2, [r7, #28]
 80045a4:	430a      	orrs	r2, r1
 80045a6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a99      	ldr	r2, [pc, #612]	; (8004814 <UART_SetConfig+0x2e8>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d121      	bne.n	80045f6 <UART_SetConfig+0xca>
 80045b2:	4b99      	ldr	r3, [pc, #612]	; (8004818 <UART_SetConfig+0x2ec>)
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b8:	f003 0303 	and.w	r3, r3, #3
 80045bc:	2b03      	cmp	r3, #3
 80045be:	d817      	bhi.n	80045f0 <UART_SetConfig+0xc4>
 80045c0:	a201      	add	r2, pc, #4	; (adr r2, 80045c8 <UART_SetConfig+0x9c>)
 80045c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c6:	bf00      	nop
 80045c8:	080045d9 	.word	0x080045d9
 80045cc:	080045e5 	.word	0x080045e5
 80045d0:	080045df 	.word	0x080045df
 80045d4:	080045eb 	.word	0x080045eb
 80045d8:	2301      	movs	r3, #1
 80045da:	76fb      	strb	r3, [r7, #27]
 80045dc:	e0e7      	b.n	80047ae <UART_SetConfig+0x282>
 80045de:	2302      	movs	r3, #2
 80045e0:	76fb      	strb	r3, [r7, #27]
 80045e2:	e0e4      	b.n	80047ae <UART_SetConfig+0x282>
 80045e4:	2304      	movs	r3, #4
 80045e6:	76fb      	strb	r3, [r7, #27]
 80045e8:	e0e1      	b.n	80047ae <UART_SetConfig+0x282>
 80045ea:	2308      	movs	r3, #8
 80045ec:	76fb      	strb	r3, [r7, #27]
 80045ee:	e0de      	b.n	80047ae <UART_SetConfig+0x282>
 80045f0:	2310      	movs	r3, #16
 80045f2:	76fb      	strb	r3, [r7, #27]
 80045f4:	e0db      	b.n	80047ae <UART_SetConfig+0x282>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a88      	ldr	r2, [pc, #544]	; (800481c <UART_SetConfig+0x2f0>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d132      	bne.n	8004666 <UART_SetConfig+0x13a>
 8004600:	4b85      	ldr	r3, [pc, #532]	; (8004818 <UART_SetConfig+0x2ec>)
 8004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004606:	f003 030c 	and.w	r3, r3, #12
 800460a:	2b0c      	cmp	r3, #12
 800460c:	d828      	bhi.n	8004660 <UART_SetConfig+0x134>
 800460e:	a201      	add	r2, pc, #4	; (adr r2, 8004614 <UART_SetConfig+0xe8>)
 8004610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004614:	08004649 	.word	0x08004649
 8004618:	08004661 	.word	0x08004661
 800461c:	08004661 	.word	0x08004661
 8004620:	08004661 	.word	0x08004661
 8004624:	08004655 	.word	0x08004655
 8004628:	08004661 	.word	0x08004661
 800462c:	08004661 	.word	0x08004661
 8004630:	08004661 	.word	0x08004661
 8004634:	0800464f 	.word	0x0800464f
 8004638:	08004661 	.word	0x08004661
 800463c:	08004661 	.word	0x08004661
 8004640:	08004661 	.word	0x08004661
 8004644:	0800465b 	.word	0x0800465b
 8004648:	2300      	movs	r3, #0
 800464a:	76fb      	strb	r3, [r7, #27]
 800464c:	e0af      	b.n	80047ae <UART_SetConfig+0x282>
 800464e:	2302      	movs	r3, #2
 8004650:	76fb      	strb	r3, [r7, #27]
 8004652:	e0ac      	b.n	80047ae <UART_SetConfig+0x282>
 8004654:	2304      	movs	r3, #4
 8004656:	76fb      	strb	r3, [r7, #27]
 8004658:	e0a9      	b.n	80047ae <UART_SetConfig+0x282>
 800465a:	2308      	movs	r3, #8
 800465c:	76fb      	strb	r3, [r7, #27]
 800465e:	e0a6      	b.n	80047ae <UART_SetConfig+0x282>
 8004660:	2310      	movs	r3, #16
 8004662:	76fb      	strb	r3, [r7, #27]
 8004664:	e0a3      	b.n	80047ae <UART_SetConfig+0x282>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a6d      	ldr	r2, [pc, #436]	; (8004820 <UART_SetConfig+0x2f4>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d120      	bne.n	80046b2 <UART_SetConfig+0x186>
 8004670:	4b69      	ldr	r3, [pc, #420]	; (8004818 <UART_SetConfig+0x2ec>)
 8004672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004676:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800467a:	2b30      	cmp	r3, #48	; 0x30
 800467c:	d013      	beq.n	80046a6 <UART_SetConfig+0x17a>
 800467e:	2b30      	cmp	r3, #48	; 0x30
 8004680:	d814      	bhi.n	80046ac <UART_SetConfig+0x180>
 8004682:	2b20      	cmp	r3, #32
 8004684:	d009      	beq.n	800469a <UART_SetConfig+0x16e>
 8004686:	2b20      	cmp	r3, #32
 8004688:	d810      	bhi.n	80046ac <UART_SetConfig+0x180>
 800468a:	2b00      	cmp	r3, #0
 800468c:	d002      	beq.n	8004694 <UART_SetConfig+0x168>
 800468e:	2b10      	cmp	r3, #16
 8004690:	d006      	beq.n	80046a0 <UART_SetConfig+0x174>
 8004692:	e00b      	b.n	80046ac <UART_SetConfig+0x180>
 8004694:	2300      	movs	r3, #0
 8004696:	76fb      	strb	r3, [r7, #27]
 8004698:	e089      	b.n	80047ae <UART_SetConfig+0x282>
 800469a:	2302      	movs	r3, #2
 800469c:	76fb      	strb	r3, [r7, #27]
 800469e:	e086      	b.n	80047ae <UART_SetConfig+0x282>
 80046a0:	2304      	movs	r3, #4
 80046a2:	76fb      	strb	r3, [r7, #27]
 80046a4:	e083      	b.n	80047ae <UART_SetConfig+0x282>
 80046a6:	2308      	movs	r3, #8
 80046a8:	76fb      	strb	r3, [r7, #27]
 80046aa:	e080      	b.n	80047ae <UART_SetConfig+0x282>
 80046ac:	2310      	movs	r3, #16
 80046ae:	76fb      	strb	r3, [r7, #27]
 80046b0:	e07d      	b.n	80047ae <UART_SetConfig+0x282>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a5b      	ldr	r2, [pc, #364]	; (8004824 <UART_SetConfig+0x2f8>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d120      	bne.n	80046fe <UART_SetConfig+0x1d2>
 80046bc:	4b56      	ldr	r3, [pc, #344]	; (8004818 <UART_SetConfig+0x2ec>)
 80046be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80046c6:	2bc0      	cmp	r3, #192	; 0xc0
 80046c8:	d013      	beq.n	80046f2 <UART_SetConfig+0x1c6>
 80046ca:	2bc0      	cmp	r3, #192	; 0xc0
 80046cc:	d814      	bhi.n	80046f8 <UART_SetConfig+0x1cc>
 80046ce:	2b80      	cmp	r3, #128	; 0x80
 80046d0:	d009      	beq.n	80046e6 <UART_SetConfig+0x1ba>
 80046d2:	2b80      	cmp	r3, #128	; 0x80
 80046d4:	d810      	bhi.n	80046f8 <UART_SetConfig+0x1cc>
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <UART_SetConfig+0x1b4>
 80046da:	2b40      	cmp	r3, #64	; 0x40
 80046dc:	d006      	beq.n	80046ec <UART_SetConfig+0x1c0>
 80046de:	e00b      	b.n	80046f8 <UART_SetConfig+0x1cc>
 80046e0:	2300      	movs	r3, #0
 80046e2:	76fb      	strb	r3, [r7, #27]
 80046e4:	e063      	b.n	80047ae <UART_SetConfig+0x282>
 80046e6:	2302      	movs	r3, #2
 80046e8:	76fb      	strb	r3, [r7, #27]
 80046ea:	e060      	b.n	80047ae <UART_SetConfig+0x282>
 80046ec:	2304      	movs	r3, #4
 80046ee:	76fb      	strb	r3, [r7, #27]
 80046f0:	e05d      	b.n	80047ae <UART_SetConfig+0x282>
 80046f2:	2308      	movs	r3, #8
 80046f4:	76fb      	strb	r3, [r7, #27]
 80046f6:	e05a      	b.n	80047ae <UART_SetConfig+0x282>
 80046f8:	2310      	movs	r3, #16
 80046fa:	76fb      	strb	r3, [r7, #27]
 80046fc:	e057      	b.n	80047ae <UART_SetConfig+0x282>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a49      	ldr	r2, [pc, #292]	; (8004828 <UART_SetConfig+0x2fc>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d125      	bne.n	8004754 <UART_SetConfig+0x228>
 8004708:	4b43      	ldr	r3, [pc, #268]	; (8004818 <UART_SetConfig+0x2ec>)
 800470a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004712:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004716:	d017      	beq.n	8004748 <UART_SetConfig+0x21c>
 8004718:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800471c:	d817      	bhi.n	800474e <UART_SetConfig+0x222>
 800471e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004722:	d00b      	beq.n	800473c <UART_SetConfig+0x210>
 8004724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004728:	d811      	bhi.n	800474e <UART_SetConfig+0x222>
 800472a:	2b00      	cmp	r3, #0
 800472c:	d003      	beq.n	8004736 <UART_SetConfig+0x20a>
 800472e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004732:	d006      	beq.n	8004742 <UART_SetConfig+0x216>
 8004734:	e00b      	b.n	800474e <UART_SetConfig+0x222>
 8004736:	2300      	movs	r3, #0
 8004738:	76fb      	strb	r3, [r7, #27]
 800473a:	e038      	b.n	80047ae <UART_SetConfig+0x282>
 800473c:	2302      	movs	r3, #2
 800473e:	76fb      	strb	r3, [r7, #27]
 8004740:	e035      	b.n	80047ae <UART_SetConfig+0x282>
 8004742:	2304      	movs	r3, #4
 8004744:	76fb      	strb	r3, [r7, #27]
 8004746:	e032      	b.n	80047ae <UART_SetConfig+0x282>
 8004748:	2308      	movs	r3, #8
 800474a:	76fb      	strb	r3, [r7, #27]
 800474c:	e02f      	b.n	80047ae <UART_SetConfig+0x282>
 800474e:	2310      	movs	r3, #16
 8004750:	76fb      	strb	r3, [r7, #27]
 8004752:	e02c      	b.n	80047ae <UART_SetConfig+0x282>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a2d      	ldr	r2, [pc, #180]	; (8004810 <UART_SetConfig+0x2e4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d125      	bne.n	80047aa <UART_SetConfig+0x27e>
 800475e:	4b2e      	ldr	r3, [pc, #184]	; (8004818 <UART_SetConfig+0x2ec>)
 8004760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004764:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004768:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800476c:	d017      	beq.n	800479e <UART_SetConfig+0x272>
 800476e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004772:	d817      	bhi.n	80047a4 <UART_SetConfig+0x278>
 8004774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004778:	d00b      	beq.n	8004792 <UART_SetConfig+0x266>
 800477a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800477e:	d811      	bhi.n	80047a4 <UART_SetConfig+0x278>
 8004780:	2b00      	cmp	r3, #0
 8004782:	d003      	beq.n	800478c <UART_SetConfig+0x260>
 8004784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004788:	d006      	beq.n	8004798 <UART_SetConfig+0x26c>
 800478a:	e00b      	b.n	80047a4 <UART_SetConfig+0x278>
 800478c:	2300      	movs	r3, #0
 800478e:	76fb      	strb	r3, [r7, #27]
 8004790:	e00d      	b.n	80047ae <UART_SetConfig+0x282>
 8004792:	2302      	movs	r3, #2
 8004794:	76fb      	strb	r3, [r7, #27]
 8004796:	e00a      	b.n	80047ae <UART_SetConfig+0x282>
 8004798:	2304      	movs	r3, #4
 800479a:	76fb      	strb	r3, [r7, #27]
 800479c:	e007      	b.n	80047ae <UART_SetConfig+0x282>
 800479e:	2308      	movs	r3, #8
 80047a0:	76fb      	strb	r3, [r7, #27]
 80047a2:	e004      	b.n	80047ae <UART_SetConfig+0x282>
 80047a4:	2310      	movs	r3, #16
 80047a6:	76fb      	strb	r3, [r7, #27]
 80047a8:	e001      	b.n	80047ae <UART_SetConfig+0x282>
 80047aa:	2310      	movs	r3, #16
 80047ac:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a17      	ldr	r2, [pc, #92]	; (8004810 <UART_SetConfig+0x2e4>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	f040 8087 	bne.w	80048c8 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047ba:	7efb      	ldrb	r3, [r7, #27]
 80047bc:	2b08      	cmp	r3, #8
 80047be:	d837      	bhi.n	8004830 <UART_SetConfig+0x304>
 80047c0:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <UART_SetConfig+0x29c>)
 80047c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c6:	bf00      	nop
 80047c8:	080047ed 	.word	0x080047ed
 80047cc:	08004831 	.word	0x08004831
 80047d0:	080047f5 	.word	0x080047f5
 80047d4:	08004831 	.word	0x08004831
 80047d8:	080047fb 	.word	0x080047fb
 80047dc:	08004831 	.word	0x08004831
 80047e0:	08004831 	.word	0x08004831
 80047e4:	08004831 	.word	0x08004831
 80047e8:	08004803 	.word	0x08004803
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047ec:	f7fd fe68 	bl	80024c0 <HAL_RCC_GetPCLK1Freq>
 80047f0:	6178      	str	r0, [r7, #20]
        break;
 80047f2:	e022      	b.n	800483a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80047f4:	4b0d      	ldr	r3, [pc, #52]	; (800482c <UART_SetConfig+0x300>)
 80047f6:	617b      	str	r3, [r7, #20]
        break;
 80047f8:	e01f      	b.n	800483a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80047fa:	f7fd fdc9 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 80047fe:	6178      	str	r0, [r7, #20]
        break;
 8004800:	e01b      	b.n	800483a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004806:	617b      	str	r3, [r7, #20]
        break;
 8004808:	e017      	b.n	800483a <UART_SetConfig+0x30e>
 800480a:	bf00      	nop
 800480c:	efff69f3 	.word	0xefff69f3
 8004810:	40008000 	.word	0x40008000
 8004814:	40013800 	.word	0x40013800
 8004818:	40021000 	.word	0x40021000
 800481c:	40004400 	.word	0x40004400
 8004820:	40004800 	.word	0x40004800
 8004824:	40004c00 	.word	0x40004c00
 8004828:	40005000 	.word	0x40005000
 800482c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004834:	2301      	movs	r3, #1
 8004836:	76bb      	strb	r3, [r7, #26]
        break;
 8004838:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	f000 80f1 	beq.w	8004a24 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	685a      	ldr	r2, [r3, #4]
 8004846:	4613      	mov	r3, r2
 8004848:	005b      	lsls	r3, r3, #1
 800484a:	4413      	add	r3, r2
 800484c:	697a      	ldr	r2, [r7, #20]
 800484e:	429a      	cmp	r2, r3
 8004850:	d305      	bcc.n	800485e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004858:	697a      	ldr	r2, [r7, #20]
 800485a:	429a      	cmp	r2, r3
 800485c:	d902      	bls.n	8004864 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 800485e:	2301      	movs	r3, #1
 8004860:	76bb      	strb	r3, [r7, #26]
 8004862:	e0df      	b.n	8004a24 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	4618      	mov	r0, r3
 8004868:	f04f 0100 	mov.w	r1, #0
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	020b      	lsls	r3, r1, #8
 8004876:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800487a:	0202      	lsls	r2, r0, #8
 800487c:	6879      	ldr	r1, [r7, #4]
 800487e:	6849      	ldr	r1, [r1, #4]
 8004880:	0849      	lsrs	r1, r1, #1
 8004882:	4608      	mov	r0, r1
 8004884:	f04f 0100 	mov.w	r1, #0
 8004888:	1814      	adds	r4, r2, r0
 800488a:	eb43 0501 	adc.w	r5, r3, r1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	461a      	mov	r2, r3
 8004894:	f04f 0300 	mov.w	r3, #0
 8004898:	4620      	mov	r0, r4
 800489a:	4629      	mov	r1, r5
 800489c:	f7fb fcf0 	bl	8000280 <__aeabi_uldivmod>
 80048a0:	4602      	mov	r2, r0
 80048a2:	460b      	mov	r3, r1
 80048a4:	4613      	mov	r3, r2
 80048a6:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ae:	d308      	bcc.n	80048c2 <UART_SetConfig+0x396>
 80048b0:	693b      	ldr	r3, [r7, #16]
 80048b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048b6:	d204      	bcs.n	80048c2 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	693a      	ldr	r2, [r7, #16]
 80048be:	60da      	str	r2, [r3, #12]
 80048c0:	e0b0      	b.n	8004a24 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80048c2:	2301      	movs	r3, #1
 80048c4:	76bb      	strb	r3, [r7, #26]
 80048c6:	e0ad      	b.n	8004a24 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	69db      	ldr	r3, [r3, #28]
 80048cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048d0:	d15b      	bne.n	800498a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80048d2:	7efb      	ldrb	r3, [r7, #27]
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d828      	bhi.n	800492a <UART_SetConfig+0x3fe>
 80048d8:	a201      	add	r2, pc, #4	; (adr r2, 80048e0 <UART_SetConfig+0x3b4>)
 80048da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048de:	bf00      	nop
 80048e0:	08004905 	.word	0x08004905
 80048e4:	0800490d 	.word	0x0800490d
 80048e8:	08004915 	.word	0x08004915
 80048ec:	0800492b 	.word	0x0800492b
 80048f0:	0800491b 	.word	0x0800491b
 80048f4:	0800492b 	.word	0x0800492b
 80048f8:	0800492b 	.word	0x0800492b
 80048fc:	0800492b 	.word	0x0800492b
 8004900:	08004923 	.word	0x08004923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004904:	f7fd fddc 	bl	80024c0 <HAL_RCC_GetPCLK1Freq>
 8004908:	6178      	str	r0, [r7, #20]
        break;
 800490a:	e013      	b.n	8004934 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800490c:	f7fd fdee 	bl	80024ec <HAL_RCC_GetPCLK2Freq>
 8004910:	6178      	str	r0, [r7, #20]
        break;
 8004912:	e00f      	b.n	8004934 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004914:	4b49      	ldr	r3, [pc, #292]	; (8004a3c <UART_SetConfig+0x510>)
 8004916:	617b      	str	r3, [r7, #20]
        break;
 8004918:	e00c      	b.n	8004934 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800491a:	f7fd fd39 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 800491e:	6178      	str	r0, [r7, #20]
        break;
 8004920:	e008      	b.n	8004934 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004926:	617b      	str	r3, [r7, #20]
        break;
 8004928:	e004      	b.n	8004934 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	76bb      	strb	r3, [r7, #26]
        break;
 8004932:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d074      	beq.n	8004a24 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	005a      	lsls	r2, r3, #1
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	085b      	lsrs	r3, r3, #1
 8004944:	441a      	add	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	fbb2 f3f3 	udiv	r3, r2, r3
 800494e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	2b0f      	cmp	r3, #15
 8004954:	d916      	bls.n	8004984 <UART_SetConfig+0x458>
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800495c:	d212      	bcs.n	8004984 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	b29b      	uxth	r3, r3
 8004962:	f023 030f 	bic.w	r3, r3, #15
 8004966:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	085b      	lsrs	r3, r3, #1
 800496c:	b29b      	uxth	r3, r3
 800496e:	f003 0307 	and.w	r3, r3, #7
 8004972:	b29a      	uxth	r2, r3
 8004974:	89fb      	ldrh	r3, [r7, #14]
 8004976:	4313      	orrs	r3, r2
 8004978:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	89fa      	ldrh	r2, [r7, #14]
 8004980:	60da      	str	r2, [r3, #12]
 8004982:	e04f      	b.n	8004a24 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	76bb      	strb	r3, [r7, #26]
 8004988:	e04c      	b.n	8004a24 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800498a:	7efb      	ldrb	r3, [r7, #27]
 800498c:	2b08      	cmp	r3, #8
 800498e:	d828      	bhi.n	80049e2 <UART_SetConfig+0x4b6>
 8004990:	a201      	add	r2, pc, #4	; (adr r2, 8004998 <UART_SetConfig+0x46c>)
 8004992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004996:	bf00      	nop
 8004998:	080049bd 	.word	0x080049bd
 800499c:	080049c5 	.word	0x080049c5
 80049a0:	080049cd 	.word	0x080049cd
 80049a4:	080049e3 	.word	0x080049e3
 80049a8:	080049d3 	.word	0x080049d3
 80049ac:	080049e3 	.word	0x080049e3
 80049b0:	080049e3 	.word	0x080049e3
 80049b4:	080049e3 	.word	0x080049e3
 80049b8:	080049db 	.word	0x080049db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049bc:	f7fd fd80 	bl	80024c0 <HAL_RCC_GetPCLK1Freq>
 80049c0:	6178      	str	r0, [r7, #20]
        break;
 80049c2:	e013      	b.n	80049ec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049c4:	f7fd fd92 	bl	80024ec <HAL_RCC_GetPCLK2Freq>
 80049c8:	6178      	str	r0, [r7, #20]
        break;
 80049ca:	e00f      	b.n	80049ec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049cc:	4b1b      	ldr	r3, [pc, #108]	; (8004a3c <UART_SetConfig+0x510>)
 80049ce:	617b      	str	r3, [r7, #20]
        break;
 80049d0:	e00c      	b.n	80049ec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049d2:	f7fd fcdd 	bl	8002390 <HAL_RCC_GetSysClockFreq>
 80049d6:	6178      	str	r0, [r7, #20]
        break;
 80049d8:	e008      	b.n	80049ec <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049de:	617b      	str	r3, [r7, #20]
        break;
 80049e0:	e004      	b.n	80049ec <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80049e2:	2300      	movs	r3, #0
 80049e4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	76bb      	strb	r3, [r7, #26]
        break;
 80049ea:	bf00      	nop
    }

    if (pclk != 0U)
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d018      	beq.n	8004a24 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	085a      	lsrs	r2, r3, #1
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	441a      	add	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a04:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a06:	693b      	ldr	r3, [r7, #16]
 8004a08:	2b0f      	cmp	r3, #15
 8004a0a:	d909      	bls.n	8004a20 <UART_SetConfig+0x4f4>
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a12:	d205      	bcs.n	8004a20 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	60da      	str	r2, [r3, #12]
 8004a1e:	e001      	b.n	8004a24 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a30:	7ebb      	ldrb	r3, [r7, #26]
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3720      	adds	r7, #32
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bdb0      	pop	{r4, r5, r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	00f42400 	.word	0x00f42400

08004a40 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b083      	sub	sp, #12
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00a      	beq.n	8004a6a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d00a      	beq.n	8004a8c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a90:	f003 0304 	and.w	r3, r3, #4
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00a      	beq.n	8004aae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	430a      	orrs	r2, r1
 8004aac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	f003 0308 	and.w	r3, r3, #8
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d00a      	beq.n	8004ad0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	430a      	orrs	r2, r1
 8004ace:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad4:	f003 0310 	and.w	r3, r3, #16
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d00a      	beq.n	8004af2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	430a      	orrs	r2, r1
 8004af0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	f003 0320 	and.w	r3, r3, #32
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00a      	beq.n	8004b14 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	430a      	orrs	r2, r1
 8004b12:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01a      	beq.n	8004b56 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b3e:	d10a      	bne.n	8004b56 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	605a      	str	r2, [r3, #4]
  }
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr

08004b84 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af02      	add	r7, sp, #8
 8004b8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b94:	f7fc fb4e 	bl	8001234 <HAL_GetTick>
 8004b98:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0308 	and.w	r3, r3, #8
 8004ba4:	2b08      	cmp	r3, #8
 8004ba6:	d10e      	bne.n	8004bc6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ba8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bac:	9300      	str	r3, [sp, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f82d 	bl	8004c16 <UART_WaitOnFlagUntilTimeout>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d001      	beq.n	8004bc6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e023      	b.n	8004c0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b04      	cmp	r3, #4
 8004bd2:	d10e      	bne.n	8004bf2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bd8:	9300      	str	r3, [sp, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f817 	bl	8004c16 <UART_WaitOnFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004bee:	2303      	movs	r3, #3
 8004bf0:	e00d      	b.n	8004c0e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2220      	movs	r2, #32
 8004bf6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2220      	movs	r2, #32
 8004bfc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2200      	movs	r2, #0
 8004c02:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c0c:	2300      	movs	r3, #0
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	3710      	adds	r7, #16
 8004c12:	46bd      	mov	sp, r7
 8004c14:	bd80      	pop	{r7, pc}

08004c16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c16:	b580      	push	{r7, lr}
 8004c18:	b09c      	sub	sp, #112	; 0x70
 8004c1a:	af00      	add	r7, sp, #0
 8004c1c:	60f8      	str	r0, [r7, #12]
 8004c1e:	60b9      	str	r1, [r7, #8]
 8004c20:	603b      	str	r3, [r7, #0]
 8004c22:	4613      	mov	r3, r2
 8004c24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c26:	e0a5      	b.n	8004d74 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c2e:	f000 80a1 	beq.w	8004d74 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c32:	f7fc faff 	bl	8001234 <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c3e:	429a      	cmp	r2, r3
 8004c40:	d302      	bcc.n	8004c48 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d13e      	bne.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c50:	e853 3f00 	ldrex	r3, [r3]
 8004c54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004c5c:	667b      	str	r3, [r7, #100]	; 0x64
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	461a      	mov	r2, r3
 8004c64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c68:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c6e:	e841 2300 	strex	r3, r2, [r1]
 8004c72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d1e6      	bne.n	8004c48 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	3308      	adds	r3, #8
 8004c80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c84:	e853 3f00 	ldrex	r3, [r3]
 8004c88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8c:	f023 0301 	bic.w	r3, r3, #1
 8004c90:	663b      	str	r3, [r7, #96]	; 0x60
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	3308      	adds	r3, #8
 8004c98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ca0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ca2:	e841 2300 	strex	r3, r2, [r1]
 8004ca6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ca8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1e5      	bne.n	8004c7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004cc2:	2303      	movs	r3, #3
 8004cc4:	e067      	b.n	8004d96 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d04f      	beq.n	8004d74 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	69db      	ldr	r3, [r3, #28]
 8004cda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ce2:	d147      	bne.n	8004d74 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cec:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cf6:	e853 3f00 	ldrex	r3, [r3]
 8004cfa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	461a      	mov	r2, r3
 8004d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8004d0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d14:	e841 2300 	strex	r3, r2, [r1]
 8004d18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1e6      	bne.n	8004cee <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3308      	adds	r3, #8
 8004d26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	e853 3f00 	ldrex	r3, [r3]
 8004d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	f023 0301 	bic.w	r3, r3, #1
 8004d36:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	3308      	adds	r3, #8
 8004d3e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d40:	623a      	str	r2, [r7, #32]
 8004d42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d44:	69f9      	ldr	r1, [r7, #28]
 8004d46:	6a3a      	ldr	r2, [r7, #32]
 8004d48:	e841 2300 	strex	r3, r2, [r1]
 8004d4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d4e:	69bb      	ldr	r3, [r7, #24]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e5      	bne.n	8004d20 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2220      	movs	r2, #32
 8004d58:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2220      	movs	r2, #32
 8004d5e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2220      	movs	r2, #32
 8004d64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e010      	b.n	8004d96 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	69da      	ldr	r2, [r3, #28]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	68ba      	ldr	r2, [r7, #8]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	bf0c      	ite	eq
 8004d84:	2301      	moveq	r3, #1
 8004d86:	2300      	movne	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	461a      	mov	r2, r3
 8004d8c:	79fb      	ldrb	r3, [r7, #7]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	f43f af4a 	beq.w	8004c28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3770      	adds	r7, #112	; 0x70
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b095      	sub	sp, #84	; 0x54
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dae:	e853 3f00 	ldrex	r3, [r3]
 8004db2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dc4:	643b      	str	r3, [r7, #64]	; 0x40
 8004dc6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004dca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dcc:	e841 2300 	strex	r3, r2, [r1]
 8004dd0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d1e6      	bne.n	8004da6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	3308      	adds	r3, #8
 8004dde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de0:	6a3b      	ldr	r3, [r7, #32]
 8004de2:	e853 3f00 	ldrex	r3, [r3]
 8004de6:	61fb      	str	r3, [r7, #28]
   return(result);
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	f023 0301 	bic.w	r3, r3, #1
 8004dee:	64bb      	str	r3, [r7, #72]	; 0x48
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	3308      	adds	r3, #8
 8004df6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004df8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dfa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dfc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004dfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e00:	e841 2300 	strex	r3, r2, [r1]
 8004e04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1e5      	bne.n	8004dd8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d118      	bne.n	8004e46 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	e853 3f00 	ldrex	r3, [r3]
 8004e20:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	f023 0310 	bic.w	r3, r3, #16
 8004e28:	647b      	str	r3, [r7, #68]	; 0x44
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e32:	61bb      	str	r3, [r7, #24]
 8004e34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e36:	6979      	ldr	r1, [r7, #20]
 8004e38:	69ba      	ldr	r2, [r7, #24]
 8004e3a:	e841 2300 	strex	r3, r2, [r1]
 8004e3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d1e6      	bne.n	8004e14 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2220      	movs	r2, #32
 8004e4a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004e58:	bf00      	nop
 8004e5a:	3754      	adds	r7, #84	; 0x54
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e62:	4770      	bx	lr

08004e64 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e70:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2200      	movs	r2, #0
 8004e76:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e82:	68f8      	ldr	r0, [r7, #12]
 8004e84:	f7ff fb3c 	bl	8004500 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e88:	bf00      	nop
 8004e8a:	3710      	adds	r7, #16
 8004e8c:	46bd      	mov	sp, r7
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b088      	sub	sp, #32
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	e853 3f00 	ldrex	r3, [r3]
 8004ea4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eac:	61fb      	str	r3, [r7, #28]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	61bb      	str	r3, [r7, #24]
 8004eb8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eba:	6979      	ldr	r1, [r7, #20]
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	e841 2300 	strex	r3, r2, [r1]
 8004ec2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d1e6      	bne.n	8004e98 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2220      	movs	r2, #32
 8004ece:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f7fb fe68 	bl	8000bac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004edc:	bf00      	nop
 8004ede:	3720      	adds	r7, #32
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <__errno>:
 8004ef8:	4b01      	ldr	r3, [pc, #4]	; (8004f00 <__errno+0x8>)
 8004efa:	6818      	ldr	r0, [r3, #0]
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	20000010 	.word	0x20000010

08004f04 <__libc_init_array>:
 8004f04:	b570      	push	{r4, r5, r6, lr}
 8004f06:	4d0d      	ldr	r5, [pc, #52]	; (8004f3c <__libc_init_array+0x38>)
 8004f08:	4c0d      	ldr	r4, [pc, #52]	; (8004f40 <__libc_init_array+0x3c>)
 8004f0a:	1b64      	subs	r4, r4, r5
 8004f0c:	10a4      	asrs	r4, r4, #2
 8004f0e:	2600      	movs	r6, #0
 8004f10:	42a6      	cmp	r6, r4
 8004f12:	d109      	bne.n	8004f28 <__libc_init_array+0x24>
 8004f14:	4d0b      	ldr	r5, [pc, #44]	; (8004f44 <__libc_init_array+0x40>)
 8004f16:	4c0c      	ldr	r4, [pc, #48]	; (8004f48 <__libc_init_array+0x44>)
 8004f18:	f000 fc4e 	bl	80057b8 <_init>
 8004f1c:	1b64      	subs	r4, r4, r5
 8004f1e:	10a4      	asrs	r4, r4, #2
 8004f20:	2600      	movs	r6, #0
 8004f22:	42a6      	cmp	r6, r4
 8004f24:	d105      	bne.n	8004f32 <__libc_init_array+0x2e>
 8004f26:	bd70      	pop	{r4, r5, r6, pc}
 8004f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f2c:	4798      	blx	r3
 8004f2e:	3601      	adds	r6, #1
 8004f30:	e7ee      	b.n	8004f10 <__libc_init_array+0xc>
 8004f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f36:	4798      	blx	r3
 8004f38:	3601      	adds	r6, #1
 8004f3a:	e7f2      	b.n	8004f22 <__libc_init_array+0x1e>
 8004f3c:	080058b4 	.word	0x080058b4
 8004f40:	080058b4 	.word	0x080058b4
 8004f44:	080058b4 	.word	0x080058b4
 8004f48:	080058b8 	.word	0x080058b8

08004f4c <memset>:
 8004f4c:	4402      	add	r2, r0
 8004f4e:	4603      	mov	r3, r0
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d100      	bne.n	8004f56 <memset+0xa>
 8004f54:	4770      	bx	lr
 8004f56:	f803 1b01 	strb.w	r1, [r3], #1
 8004f5a:	e7f9      	b.n	8004f50 <memset+0x4>

08004f5c <siprintf>:
 8004f5c:	b40e      	push	{r1, r2, r3}
 8004f5e:	b500      	push	{lr}
 8004f60:	b09c      	sub	sp, #112	; 0x70
 8004f62:	ab1d      	add	r3, sp, #116	; 0x74
 8004f64:	9002      	str	r0, [sp, #8]
 8004f66:	9006      	str	r0, [sp, #24]
 8004f68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f6c:	4809      	ldr	r0, [pc, #36]	; (8004f94 <siprintf+0x38>)
 8004f6e:	9107      	str	r1, [sp, #28]
 8004f70:	9104      	str	r1, [sp, #16]
 8004f72:	4909      	ldr	r1, [pc, #36]	; (8004f98 <siprintf+0x3c>)
 8004f74:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f78:	9105      	str	r1, [sp, #20]
 8004f7a:	6800      	ldr	r0, [r0, #0]
 8004f7c:	9301      	str	r3, [sp, #4]
 8004f7e:	a902      	add	r1, sp, #8
 8004f80:	f000 f868 	bl	8005054 <_svfiprintf_r>
 8004f84:	9b02      	ldr	r3, [sp, #8]
 8004f86:	2200      	movs	r2, #0
 8004f88:	701a      	strb	r2, [r3, #0]
 8004f8a:	b01c      	add	sp, #112	; 0x70
 8004f8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f90:	b003      	add	sp, #12
 8004f92:	4770      	bx	lr
 8004f94:	20000010 	.word	0x20000010
 8004f98:	ffff0208 	.word	0xffff0208

08004f9c <__ssputs_r>:
 8004f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fa0:	688e      	ldr	r6, [r1, #8]
 8004fa2:	429e      	cmp	r6, r3
 8004fa4:	4682      	mov	sl, r0
 8004fa6:	460c      	mov	r4, r1
 8004fa8:	4690      	mov	r8, r2
 8004faa:	461f      	mov	r7, r3
 8004fac:	d838      	bhi.n	8005020 <__ssputs_r+0x84>
 8004fae:	898a      	ldrh	r2, [r1, #12]
 8004fb0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004fb4:	d032      	beq.n	800501c <__ssputs_r+0x80>
 8004fb6:	6825      	ldr	r5, [r4, #0]
 8004fb8:	6909      	ldr	r1, [r1, #16]
 8004fba:	eba5 0901 	sub.w	r9, r5, r1
 8004fbe:	6965      	ldr	r5, [r4, #20]
 8004fc0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004fc4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004fc8:	3301      	adds	r3, #1
 8004fca:	444b      	add	r3, r9
 8004fcc:	106d      	asrs	r5, r5, #1
 8004fce:	429d      	cmp	r5, r3
 8004fd0:	bf38      	it	cc
 8004fd2:	461d      	movcc	r5, r3
 8004fd4:	0553      	lsls	r3, r2, #21
 8004fd6:	d531      	bpl.n	800503c <__ssputs_r+0xa0>
 8004fd8:	4629      	mov	r1, r5
 8004fda:	f000 fb47 	bl	800566c <_malloc_r>
 8004fde:	4606      	mov	r6, r0
 8004fe0:	b950      	cbnz	r0, 8004ff8 <__ssputs_r+0x5c>
 8004fe2:	230c      	movs	r3, #12
 8004fe4:	f8ca 3000 	str.w	r3, [sl]
 8004fe8:	89a3      	ldrh	r3, [r4, #12]
 8004fea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fee:	81a3      	strh	r3, [r4, #12]
 8004ff0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ff8:	6921      	ldr	r1, [r4, #16]
 8004ffa:	464a      	mov	r2, r9
 8004ffc:	f000 fabe 	bl	800557c <memcpy>
 8005000:	89a3      	ldrh	r3, [r4, #12]
 8005002:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005006:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500a:	81a3      	strh	r3, [r4, #12]
 800500c:	6126      	str	r6, [r4, #16]
 800500e:	6165      	str	r5, [r4, #20]
 8005010:	444e      	add	r6, r9
 8005012:	eba5 0509 	sub.w	r5, r5, r9
 8005016:	6026      	str	r6, [r4, #0]
 8005018:	60a5      	str	r5, [r4, #8]
 800501a:	463e      	mov	r6, r7
 800501c:	42be      	cmp	r6, r7
 800501e:	d900      	bls.n	8005022 <__ssputs_r+0x86>
 8005020:	463e      	mov	r6, r7
 8005022:	4632      	mov	r2, r6
 8005024:	6820      	ldr	r0, [r4, #0]
 8005026:	4641      	mov	r1, r8
 8005028:	f000 fab6 	bl	8005598 <memmove>
 800502c:	68a3      	ldr	r3, [r4, #8]
 800502e:	6822      	ldr	r2, [r4, #0]
 8005030:	1b9b      	subs	r3, r3, r6
 8005032:	4432      	add	r2, r6
 8005034:	60a3      	str	r3, [r4, #8]
 8005036:	6022      	str	r2, [r4, #0]
 8005038:	2000      	movs	r0, #0
 800503a:	e7db      	b.n	8004ff4 <__ssputs_r+0x58>
 800503c:	462a      	mov	r2, r5
 800503e:	f000 fb6f 	bl	8005720 <_realloc_r>
 8005042:	4606      	mov	r6, r0
 8005044:	2800      	cmp	r0, #0
 8005046:	d1e1      	bne.n	800500c <__ssputs_r+0x70>
 8005048:	6921      	ldr	r1, [r4, #16]
 800504a:	4650      	mov	r0, sl
 800504c:	f000 fabe 	bl	80055cc <_free_r>
 8005050:	e7c7      	b.n	8004fe2 <__ssputs_r+0x46>
	...

08005054 <_svfiprintf_r>:
 8005054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005058:	4698      	mov	r8, r3
 800505a:	898b      	ldrh	r3, [r1, #12]
 800505c:	061b      	lsls	r3, r3, #24
 800505e:	b09d      	sub	sp, #116	; 0x74
 8005060:	4607      	mov	r7, r0
 8005062:	460d      	mov	r5, r1
 8005064:	4614      	mov	r4, r2
 8005066:	d50e      	bpl.n	8005086 <_svfiprintf_r+0x32>
 8005068:	690b      	ldr	r3, [r1, #16]
 800506a:	b963      	cbnz	r3, 8005086 <_svfiprintf_r+0x32>
 800506c:	2140      	movs	r1, #64	; 0x40
 800506e:	f000 fafd 	bl	800566c <_malloc_r>
 8005072:	6028      	str	r0, [r5, #0]
 8005074:	6128      	str	r0, [r5, #16]
 8005076:	b920      	cbnz	r0, 8005082 <_svfiprintf_r+0x2e>
 8005078:	230c      	movs	r3, #12
 800507a:	603b      	str	r3, [r7, #0]
 800507c:	f04f 30ff 	mov.w	r0, #4294967295
 8005080:	e0d1      	b.n	8005226 <_svfiprintf_r+0x1d2>
 8005082:	2340      	movs	r3, #64	; 0x40
 8005084:	616b      	str	r3, [r5, #20]
 8005086:	2300      	movs	r3, #0
 8005088:	9309      	str	r3, [sp, #36]	; 0x24
 800508a:	2320      	movs	r3, #32
 800508c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005090:	f8cd 800c 	str.w	r8, [sp, #12]
 8005094:	2330      	movs	r3, #48	; 0x30
 8005096:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005240 <_svfiprintf_r+0x1ec>
 800509a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800509e:	f04f 0901 	mov.w	r9, #1
 80050a2:	4623      	mov	r3, r4
 80050a4:	469a      	mov	sl, r3
 80050a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80050aa:	b10a      	cbz	r2, 80050b0 <_svfiprintf_r+0x5c>
 80050ac:	2a25      	cmp	r2, #37	; 0x25
 80050ae:	d1f9      	bne.n	80050a4 <_svfiprintf_r+0x50>
 80050b0:	ebba 0b04 	subs.w	fp, sl, r4
 80050b4:	d00b      	beq.n	80050ce <_svfiprintf_r+0x7a>
 80050b6:	465b      	mov	r3, fp
 80050b8:	4622      	mov	r2, r4
 80050ba:	4629      	mov	r1, r5
 80050bc:	4638      	mov	r0, r7
 80050be:	f7ff ff6d 	bl	8004f9c <__ssputs_r>
 80050c2:	3001      	adds	r0, #1
 80050c4:	f000 80aa 	beq.w	800521c <_svfiprintf_r+0x1c8>
 80050c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050ca:	445a      	add	r2, fp
 80050cc:	9209      	str	r2, [sp, #36]	; 0x24
 80050ce:	f89a 3000 	ldrb.w	r3, [sl]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	f000 80a2 	beq.w	800521c <_svfiprintf_r+0x1c8>
 80050d8:	2300      	movs	r3, #0
 80050da:	f04f 32ff 	mov.w	r2, #4294967295
 80050de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050e2:	f10a 0a01 	add.w	sl, sl, #1
 80050e6:	9304      	str	r3, [sp, #16]
 80050e8:	9307      	str	r3, [sp, #28]
 80050ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050ee:	931a      	str	r3, [sp, #104]	; 0x68
 80050f0:	4654      	mov	r4, sl
 80050f2:	2205      	movs	r2, #5
 80050f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050f8:	4851      	ldr	r0, [pc, #324]	; (8005240 <_svfiprintf_r+0x1ec>)
 80050fa:	f7fb f871 	bl	80001e0 <memchr>
 80050fe:	9a04      	ldr	r2, [sp, #16]
 8005100:	b9d8      	cbnz	r0, 800513a <_svfiprintf_r+0xe6>
 8005102:	06d0      	lsls	r0, r2, #27
 8005104:	bf44      	itt	mi
 8005106:	2320      	movmi	r3, #32
 8005108:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800510c:	0711      	lsls	r1, r2, #28
 800510e:	bf44      	itt	mi
 8005110:	232b      	movmi	r3, #43	; 0x2b
 8005112:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005116:	f89a 3000 	ldrb.w	r3, [sl]
 800511a:	2b2a      	cmp	r3, #42	; 0x2a
 800511c:	d015      	beq.n	800514a <_svfiprintf_r+0xf6>
 800511e:	9a07      	ldr	r2, [sp, #28]
 8005120:	4654      	mov	r4, sl
 8005122:	2000      	movs	r0, #0
 8005124:	f04f 0c0a 	mov.w	ip, #10
 8005128:	4621      	mov	r1, r4
 800512a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800512e:	3b30      	subs	r3, #48	; 0x30
 8005130:	2b09      	cmp	r3, #9
 8005132:	d94e      	bls.n	80051d2 <_svfiprintf_r+0x17e>
 8005134:	b1b0      	cbz	r0, 8005164 <_svfiprintf_r+0x110>
 8005136:	9207      	str	r2, [sp, #28]
 8005138:	e014      	b.n	8005164 <_svfiprintf_r+0x110>
 800513a:	eba0 0308 	sub.w	r3, r0, r8
 800513e:	fa09 f303 	lsl.w	r3, r9, r3
 8005142:	4313      	orrs	r3, r2
 8005144:	9304      	str	r3, [sp, #16]
 8005146:	46a2      	mov	sl, r4
 8005148:	e7d2      	b.n	80050f0 <_svfiprintf_r+0x9c>
 800514a:	9b03      	ldr	r3, [sp, #12]
 800514c:	1d19      	adds	r1, r3, #4
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	9103      	str	r1, [sp, #12]
 8005152:	2b00      	cmp	r3, #0
 8005154:	bfbb      	ittet	lt
 8005156:	425b      	neglt	r3, r3
 8005158:	f042 0202 	orrlt.w	r2, r2, #2
 800515c:	9307      	strge	r3, [sp, #28]
 800515e:	9307      	strlt	r3, [sp, #28]
 8005160:	bfb8      	it	lt
 8005162:	9204      	strlt	r2, [sp, #16]
 8005164:	7823      	ldrb	r3, [r4, #0]
 8005166:	2b2e      	cmp	r3, #46	; 0x2e
 8005168:	d10c      	bne.n	8005184 <_svfiprintf_r+0x130>
 800516a:	7863      	ldrb	r3, [r4, #1]
 800516c:	2b2a      	cmp	r3, #42	; 0x2a
 800516e:	d135      	bne.n	80051dc <_svfiprintf_r+0x188>
 8005170:	9b03      	ldr	r3, [sp, #12]
 8005172:	1d1a      	adds	r2, r3, #4
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	9203      	str	r2, [sp, #12]
 8005178:	2b00      	cmp	r3, #0
 800517a:	bfb8      	it	lt
 800517c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005180:	3402      	adds	r4, #2
 8005182:	9305      	str	r3, [sp, #20]
 8005184:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005250 <_svfiprintf_r+0x1fc>
 8005188:	7821      	ldrb	r1, [r4, #0]
 800518a:	2203      	movs	r2, #3
 800518c:	4650      	mov	r0, sl
 800518e:	f7fb f827 	bl	80001e0 <memchr>
 8005192:	b140      	cbz	r0, 80051a6 <_svfiprintf_r+0x152>
 8005194:	2340      	movs	r3, #64	; 0x40
 8005196:	eba0 000a 	sub.w	r0, r0, sl
 800519a:	fa03 f000 	lsl.w	r0, r3, r0
 800519e:	9b04      	ldr	r3, [sp, #16]
 80051a0:	4303      	orrs	r3, r0
 80051a2:	3401      	adds	r4, #1
 80051a4:	9304      	str	r3, [sp, #16]
 80051a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051aa:	4826      	ldr	r0, [pc, #152]	; (8005244 <_svfiprintf_r+0x1f0>)
 80051ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80051b0:	2206      	movs	r2, #6
 80051b2:	f7fb f815 	bl	80001e0 <memchr>
 80051b6:	2800      	cmp	r0, #0
 80051b8:	d038      	beq.n	800522c <_svfiprintf_r+0x1d8>
 80051ba:	4b23      	ldr	r3, [pc, #140]	; (8005248 <_svfiprintf_r+0x1f4>)
 80051bc:	bb1b      	cbnz	r3, 8005206 <_svfiprintf_r+0x1b2>
 80051be:	9b03      	ldr	r3, [sp, #12]
 80051c0:	3307      	adds	r3, #7
 80051c2:	f023 0307 	bic.w	r3, r3, #7
 80051c6:	3308      	adds	r3, #8
 80051c8:	9303      	str	r3, [sp, #12]
 80051ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051cc:	4433      	add	r3, r6
 80051ce:	9309      	str	r3, [sp, #36]	; 0x24
 80051d0:	e767      	b.n	80050a2 <_svfiprintf_r+0x4e>
 80051d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80051d6:	460c      	mov	r4, r1
 80051d8:	2001      	movs	r0, #1
 80051da:	e7a5      	b.n	8005128 <_svfiprintf_r+0xd4>
 80051dc:	2300      	movs	r3, #0
 80051de:	3401      	adds	r4, #1
 80051e0:	9305      	str	r3, [sp, #20]
 80051e2:	4619      	mov	r1, r3
 80051e4:	f04f 0c0a 	mov.w	ip, #10
 80051e8:	4620      	mov	r0, r4
 80051ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051ee:	3a30      	subs	r2, #48	; 0x30
 80051f0:	2a09      	cmp	r2, #9
 80051f2:	d903      	bls.n	80051fc <_svfiprintf_r+0x1a8>
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d0c5      	beq.n	8005184 <_svfiprintf_r+0x130>
 80051f8:	9105      	str	r1, [sp, #20]
 80051fa:	e7c3      	b.n	8005184 <_svfiprintf_r+0x130>
 80051fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8005200:	4604      	mov	r4, r0
 8005202:	2301      	movs	r3, #1
 8005204:	e7f0      	b.n	80051e8 <_svfiprintf_r+0x194>
 8005206:	ab03      	add	r3, sp, #12
 8005208:	9300      	str	r3, [sp, #0]
 800520a:	462a      	mov	r2, r5
 800520c:	4b0f      	ldr	r3, [pc, #60]	; (800524c <_svfiprintf_r+0x1f8>)
 800520e:	a904      	add	r1, sp, #16
 8005210:	4638      	mov	r0, r7
 8005212:	f3af 8000 	nop.w
 8005216:	1c42      	adds	r2, r0, #1
 8005218:	4606      	mov	r6, r0
 800521a:	d1d6      	bne.n	80051ca <_svfiprintf_r+0x176>
 800521c:	89ab      	ldrh	r3, [r5, #12]
 800521e:	065b      	lsls	r3, r3, #25
 8005220:	f53f af2c 	bmi.w	800507c <_svfiprintf_r+0x28>
 8005224:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005226:	b01d      	add	sp, #116	; 0x74
 8005228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800522c:	ab03      	add	r3, sp, #12
 800522e:	9300      	str	r3, [sp, #0]
 8005230:	462a      	mov	r2, r5
 8005232:	4b06      	ldr	r3, [pc, #24]	; (800524c <_svfiprintf_r+0x1f8>)
 8005234:	a904      	add	r1, sp, #16
 8005236:	4638      	mov	r0, r7
 8005238:	f000 f87a 	bl	8005330 <_printf_i>
 800523c:	e7eb      	b.n	8005216 <_svfiprintf_r+0x1c2>
 800523e:	bf00      	nop
 8005240:	08005878 	.word	0x08005878
 8005244:	08005882 	.word	0x08005882
 8005248:	00000000 	.word	0x00000000
 800524c:	08004f9d 	.word	0x08004f9d
 8005250:	0800587e 	.word	0x0800587e

08005254 <_printf_common>:
 8005254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005258:	4616      	mov	r6, r2
 800525a:	4699      	mov	r9, r3
 800525c:	688a      	ldr	r2, [r1, #8]
 800525e:	690b      	ldr	r3, [r1, #16]
 8005260:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005264:	4293      	cmp	r3, r2
 8005266:	bfb8      	it	lt
 8005268:	4613      	movlt	r3, r2
 800526a:	6033      	str	r3, [r6, #0]
 800526c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005270:	4607      	mov	r7, r0
 8005272:	460c      	mov	r4, r1
 8005274:	b10a      	cbz	r2, 800527a <_printf_common+0x26>
 8005276:	3301      	adds	r3, #1
 8005278:	6033      	str	r3, [r6, #0]
 800527a:	6823      	ldr	r3, [r4, #0]
 800527c:	0699      	lsls	r1, r3, #26
 800527e:	bf42      	ittt	mi
 8005280:	6833      	ldrmi	r3, [r6, #0]
 8005282:	3302      	addmi	r3, #2
 8005284:	6033      	strmi	r3, [r6, #0]
 8005286:	6825      	ldr	r5, [r4, #0]
 8005288:	f015 0506 	ands.w	r5, r5, #6
 800528c:	d106      	bne.n	800529c <_printf_common+0x48>
 800528e:	f104 0a19 	add.w	sl, r4, #25
 8005292:	68e3      	ldr	r3, [r4, #12]
 8005294:	6832      	ldr	r2, [r6, #0]
 8005296:	1a9b      	subs	r3, r3, r2
 8005298:	42ab      	cmp	r3, r5
 800529a:	dc26      	bgt.n	80052ea <_printf_common+0x96>
 800529c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80052a0:	1e13      	subs	r3, r2, #0
 80052a2:	6822      	ldr	r2, [r4, #0]
 80052a4:	bf18      	it	ne
 80052a6:	2301      	movne	r3, #1
 80052a8:	0692      	lsls	r2, r2, #26
 80052aa:	d42b      	bmi.n	8005304 <_printf_common+0xb0>
 80052ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80052b0:	4649      	mov	r1, r9
 80052b2:	4638      	mov	r0, r7
 80052b4:	47c0      	blx	r8
 80052b6:	3001      	adds	r0, #1
 80052b8:	d01e      	beq.n	80052f8 <_printf_common+0xa4>
 80052ba:	6823      	ldr	r3, [r4, #0]
 80052bc:	68e5      	ldr	r5, [r4, #12]
 80052be:	6832      	ldr	r2, [r6, #0]
 80052c0:	f003 0306 	and.w	r3, r3, #6
 80052c4:	2b04      	cmp	r3, #4
 80052c6:	bf08      	it	eq
 80052c8:	1aad      	subeq	r5, r5, r2
 80052ca:	68a3      	ldr	r3, [r4, #8]
 80052cc:	6922      	ldr	r2, [r4, #16]
 80052ce:	bf0c      	ite	eq
 80052d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052d4:	2500      	movne	r5, #0
 80052d6:	4293      	cmp	r3, r2
 80052d8:	bfc4      	itt	gt
 80052da:	1a9b      	subgt	r3, r3, r2
 80052dc:	18ed      	addgt	r5, r5, r3
 80052de:	2600      	movs	r6, #0
 80052e0:	341a      	adds	r4, #26
 80052e2:	42b5      	cmp	r5, r6
 80052e4:	d11a      	bne.n	800531c <_printf_common+0xc8>
 80052e6:	2000      	movs	r0, #0
 80052e8:	e008      	b.n	80052fc <_printf_common+0xa8>
 80052ea:	2301      	movs	r3, #1
 80052ec:	4652      	mov	r2, sl
 80052ee:	4649      	mov	r1, r9
 80052f0:	4638      	mov	r0, r7
 80052f2:	47c0      	blx	r8
 80052f4:	3001      	adds	r0, #1
 80052f6:	d103      	bne.n	8005300 <_printf_common+0xac>
 80052f8:	f04f 30ff 	mov.w	r0, #4294967295
 80052fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005300:	3501      	adds	r5, #1
 8005302:	e7c6      	b.n	8005292 <_printf_common+0x3e>
 8005304:	18e1      	adds	r1, r4, r3
 8005306:	1c5a      	adds	r2, r3, #1
 8005308:	2030      	movs	r0, #48	; 0x30
 800530a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800530e:	4422      	add	r2, r4
 8005310:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005314:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005318:	3302      	adds	r3, #2
 800531a:	e7c7      	b.n	80052ac <_printf_common+0x58>
 800531c:	2301      	movs	r3, #1
 800531e:	4622      	mov	r2, r4
 8005320:	4649      	mov	r1, r9
 8005322:	4638      	mov	r0, r7
 8005324:	47c0      	blx	r8
 8005326:	3001      	adds	r0, #1
 8005328:	d0e6      	beq.n	80052f8 <_printf_common+0xa4>
 800532a:	3601      	adds	r6, #1
 800532c:	e7d9      	b.n	80052e2 <_printf_common+0x8e>
	...

08005330 <_printf_i>:
 8005330:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005334:	460c      	mov	r4, r1
 8005336:	4691      	mov	r9, r2
 8005338:	7e27      	ldrb	r7, [r4, #24]
 800533a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800533c:	2f78      	cmp	r7, #120	; 0x78
 800533e:	4680      	mov	r8, r0
 8005340:	469a      	mov	sl, r3
 8005342:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005346:	d807      	bhi.n	8005358 <_printf_i+0x28>
 8005348:	2f62      	cmp	r7, #98	; 0x62
 800534a:	d80a      	bhi.n	8005362 <_printf_i+0x32>
 800534c:	2f00      	cmp	r7, #0
 800534e:	f000 80d8 	beq.w	8005502 <_printf_i+0x1d2>
 8005352:	2f58      	cmp	r7, #88	; 0x58
 8005354:	f000 80a3 	beq.w	800549e <_printf_i+0x16e>
 8005358:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800535c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005360:	e03a      	b.n	80053d8 <_printf_i+0xa8>
 8005362:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005366:	2b15      	cmp	r3, #21
 8005368:	d8f6      	bhi.n	8005358 <_printf_i+0x28>
 800536a:	a001      	add	r0, pc, #4	; (adr r0, 8005370 <_printf_i+0x40>)
 800536c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005370:	080053c9 	.word	0x080053c9
 8005374:	080053dd 	.word	0x080053dd
 8005378:	08005359 	.word	0x08005359
 800537c:	08005359 	.word	0x08005359
 8005380:	08005359 	.word	0x08005359
 8005384:	08005359 	.word	0x08005359
 8005388:	080053dd 	.word	0x080053dd
 800538c:	08005359 	.word	0x08005359
 8005390:	08005359 	.word	0x08005359
 8005394:	08005359 	.word	0x08005359
 8005398:	08005359 	.word	0x08005359
 800539c:	080054e9 	.word	0x080054e9
 80053a0:	0800540d 	.word	0x0800540d
 80053a4:	080054cb 	.word	0x080054cb
 80053a8:	08005359 	.word	0x08005359
 80053ac:	08005359 	.word	0x08005359
 80053b0:	0800550b 	.word	0x0800550b
 80053b4:	08005359 	.word	0x08005359
 80053b8:	0800540d 	.word	0x0800540d
 80053bc:	08005359 	.word	0x08005359
 80053c0:	08005359 	.word	0x08005359
 80053c4:	080054d3 	.word	0x080054d3
 80053c8:	680b      	ldr	r3, [r1, #0]
 80053ca:	1d1a      	adds	r2, r3, #4
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	600a      	str	r2, [r1, #0]
 80053d0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80053d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053d8:	2301      	movs	r3, #1
 80053da:	e0a3      	b.n	8005524 <_printf_i+0x1f4>
 80053dc:	6825      	ldr	r5, [r4, #0]
 80053de:	6808      	ldr	r0, [r1, #0]
 80053e0:	062e      	lsls	r6, r5, #24
 80053e2:	f100 0304 	add.w	r3, r0, #4
 80053e6:	d50a      	bpl.n	80053fe <_printf_i+0xce>
 80053e8:	6805      	ldr	r5, [r0, #0]
 80053ea:	600b      	str	r3, [r1, #0]
 80053ec:	2d00      	cmp	r5, #0
 80053ee:	da03      	bge.n	80053f8 <_printf_i+0xc8>
 80053f0:	232d      	movs	r3, #45	; 0x2d
 80053f2:	426d      	negs	r5, r5
 80053f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053f8:	485e      	ldr	r0, [pc, #376]	; (8005574 <_printf_i+0x244>)
 80053fa:	230a      	movs	r3, #10
 80053fc:	e019      	b.n	8005432 <_printf_i+0x102>
 80053fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005402:	6805      	ldr	r5, [r0, #0]
 8005404:	600b      	str	r3, [r1, #0]
 8005406:	bf18      	it	ne
 8005408:	b22d      	sxthne	r5, r5
 800540a:	e7ef      	b.n	80053ec <_printf_i+0xbc>
 800540c:	680b      	ldr	r3, [r1, #0]
 800540e:	6825      	ldr	r5, [r4, #0]
 8005410:	1d18      	adds	r0, r3, #4
 8005412:	6008      	str	r0, [r1, #0]
 8005414:	0628      	lsls	r0, r5, #24
 8005416:	d501      	bpl.n	800541c <_printf_i+0xec>
 8005418:	681d      	ldr	r5, [r3, #0]
 800541a:	e002      	b.n	8005422 <_printf_i+0xf2>
 800541c:	0669      	lsls	r1, r5, #25
 800541e:	d5fb      	bpl.n	8005418 <_printf_i+0xe8>
 8005420:	881d      	ldrh	r5, [r3, #0]
 8005422:	4854      	ldr	r0, [pc, #336]	; (8005574 <_printf_i+0x244>)
 8005424:	2f6f      	cmp	r7, #111	; 0x6f
 8005426:	bf0c      	ite	eq
 8005428:	2308      	moveq	r3, #8
 800542a:	230a      	movne	r3, #10
 800542c:	2100      	movs	r1, #0
 800542e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005432:	6866      	ldr	r6, [r4, #4]
 8005434:	60a6      	str	r6, [r4, #8]
 8005436:	2e00      	cmp	r6, #0
 8005438:	bfa2      	ittt	ge
 800543a:	6821      	ldrge	r1, [r4, #0]
 800543c:	f021 0104 	bicge.w	r1, r1, #4
 8005440:	6021      	strge	r1, [r4, #0]
 8005442:	b90d      	cbnz	r5, 8005448 <_printf_i+0x118>
 8005444:	2e00      	cmp	r6, #0
 8005446:	d04d      	beq.n	80054e4 <_printf_i+0x1b4>
 8005448:	4616      	mov	r6, r2
 800544a:	fbb5 f1f3 	udiv	r1, r5, r3
 800544e:	fb03 5711 	mls	r7, r3, r1, r5
 8005452:	5dc7      	ldrb	r7, [r0, r7]
 8005454:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005458:	462f      	mov	r7, r5
 800545a:	42bb      	cmp	r3, r7
 800545c:	460d      	mov	r5, r1
 800545e:	d9f4      	bls.n	800544a <_printf_i+0x11a>
 8005460:	2b08      	cmp	r3, #8
 8005462:	d10b      	bne.n	800547c <_printf_i+0x14c>
 8005464:	6823      	ldr	r3, [r4, #0]
 8005466:	07df      	lsls	r7, r3, #31
 8005468:	d508      	bpl.n	800547c <_printf_i+0x14c>
 800546a:	6923      	ldr	r3, [r4, #16]
 800546c:	6861      	ldr	r1, [r4, #4]
 800546e:	4299      	cmp	r1, r3
 8005470:	bfde      	ittt	le
 8005472:	2330      	movle	r3, #48	; 0x30
 8005474:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005478:	f106 36ff 	addle.w	r6, r6, #4294967295
 800547c:	1b92      	subs	r2, r2, r6
 800547e:	6122      	str	r2, [r4, #16]
 8005480:	f8cd a000 	str.w	sl, [sp]
 8005484:	464b      	mov	r3, r9
 8005486:	aa03      	add	r2, sp, #12
 8005488:	4621      	mov	r1, r4
 800548a:	4640      	mov	r0, r8
 800548c:	f7ff fee2 	bl	8005254 <_printf_common>
 8005490:	3001      	adds	r0, #1
 8005492:	d14c      	bne.n	800552e <_printf_i+0x1fe>
 8005494:	f04f 30ff 	mov.w	r0, #4294967295
 8005498:	b004      	add	sp, #16
 800549a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800549e:	4835      	ldr	r0, [pc, #212]	; (8005574 <_printf_i+0x244>)
 80054a0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80054a4:	6823      	ldr	r3, [r4, #0]
 80054a6:	680e      	ldr	r6, [r1, #0]
 80054a8:	061f      	lsls	r7, r3, #24
 80054aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80054ae:	600e      	str	r6, [r1, #0]
 80054b0:	d514      	bpl.n	80054dc <_printf_i+0x1ac>
 80054b2:	07d9      	lsls	r1, r3, #31
 80054b4:	bf44      	itt	mi
 80054b6:	f043 0320 	orrmi.w	r3, r3, #32
 80054ba:	6023      	strmi	r3, [r4, #0]
 80054bc:	b91d      	cbnz	r5, 80054c6 <_printf_i+0x196>
 80054be:	6823      	ldr	r3, [r4, #0]
 80054c0:	f023 0320 	bic.w	r3, r3, #32
 80054c4:	6023      	str	r3, [r4, #0]
 80054c6:	2310      	movs	r3, #16
 80054c8:	e7b0      	b.n	800542c <_printf_i+0xfc>
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	f043 0320 	orr.w	r3, r3, #32
 80054d0:	6023      	str	r3, [r4, #0]
 80054d2:	2378      	movs	r3, #120	; 0x78
 80054d4:	4828      	ldr	r0, [pc, #160]	; (8005578 <_printf_i+0x248>)
 80054d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054da:	e7e3      	b.n	80054a4 <_printf_i+0x174>
 80054dc:	065e      	lsls	r6, r3, #25
 80054de:	bf48      	it	mi
 80054e0:	b2ad      	uxthmi	r5, r5
 80054e2:	e7e6      	b.n	80054b2 <_printf_i+0x182>
 80054e4:	4616      	mov	r6, r2
 80054e6:	e7bb      	b.n	8005460 <_printf_i+0x130>
 80054e8:	680b      	ldr	r3, [r1, #0]
 80054ea:	6826      	ldr	r6, [r4, #0]
 80054ec:	6960      	ldr	r0, [r4, #20]
 80054ee:	1d1d      	adds	r5, r3, #4
 80054f0:	600d      	str	r5, [r1, #0]
 80054f2:	0635      	lsls	r5, r6, #24
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	d501      	bpl.n	80054fc <_printf_i+0x1cc>
 80054f8:	6018      	str	r0, [r3, #0]
 80054fa:	e002      	b.n	8005502 <_printf_i+0x1d2>
 80054fc:	0671      	lsls	r1, r6, #25
 80054fe:	d5fb      	bpl.n	80054f8 <_printf_i+0x1c8>
 8005500:	8018      	strh	r0, [r3, #0]
 8005502:	2300      	movs	r3, #0
 8005504:	6123      	str	r3, [r4, #16]
 8005506:	4616      	mov	r6, r2
 8005508:	e7ba      	b.n	8005480 <_printf_i+0x150>
 800550a:	680b      	ldr	r3, [r1, #0]
 800550c:	1d1a      	adds	r2, r3, #4
 800550e:	600a      	str	r2, [r1, #0]
 8005510:	681e      	ldr	r6, [r3, #0]
 8005512:	6862      	ldr	r2, [r4, #4]
 8005514:	2100      	movs	r1, #0
 8005516:	4630      	mov	r0, r6
 8005518:	f7fa fe62 	bl	80001e0 <memchr>
 800551c:	b108      	cbz	r0, 8005522 <_printf_i+0x1f2>
 800551e:	1b80      	subs	r0, r0, r6
 8005520:	6060      	str	r0, [r4, #4]
 8005522:	6863      	ldr	r3, [r4, #4]
 8005524:	6123      	str	r3, [r4, #16]
 8005526:	2300      	movs	r3, #0
 8005528:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800552c:	e7a8      	b.n	8005480 <_printf_i+0x150>
 800552e:	6923      	ldr	r3, [r4, #16]
 8005530:	4632      	mov	r2, r6
 8005532:	4649      	mov	r1, r9
 8005534:	4640      	mov	r0, r8
 8005536:	47d0      	blx	sl
 8005538:	3001      	adds	r0, #1
 800553a:	d0ab      	beq.n	8005494 <_printf_i+0x164>
 800553c:	6823      	ldr	r3, [r4, #0]
 800553e:	079b      	lsls	r3, r3, #30
 8005540:	d413      	bmi.n	800556a <_printf_i+0x23a>
 8005542:	68e0      	ldr	r0, [r4, #12]
 8005544:	9b03      	ldr	r3, [sp, #12]
 8005546:	4298      	cmp	r0, r3
 8005548:	bfb8      	it	lt
 800554a:	4618      	movlt	r0, r3
 800554c:	e7a4      	b.n	8005498 <_printf_i+0x168>
 800554e:	2301      	movs	r3, #1
 8005550:	4632      	mov	r2, r6
 8005552:	4649      	mov	r1, r9
 8005554:	4640      	mov	r0, r8
 8005556:	47d0      	blx	sl
 8005558:	3001      	adds	r0, #1
 800555a:	d09b      	beq.n	8005494 <_printf_i+0x164>
 800555c:	3501      	adds	r5, #1
 800555e:	68e3      	ldr	r3, [r4, #12]
 8005560:	9903      	ldr	r1, [sp, #12]
 8005562:	1a5b      	subs	r3, r3, r1
 8005564:	42ab      	cmp	r3, r5
 8005566:	dcf2      	bgt.n	800554e <_printf_i+0x21e>
 8005568:	e7eb      	b.n	8005542 <_printf_i+0x212>
 800556a:	2500      	movs	r5, #0
 800556c:	f104 0619 	add.w	r6, r4, #25
 8005570:	e7f5      	b.n	800555e <_printf_i+0x22e>
 8005572:	bf00      	nop
 8005574:	08005889 	.word	0x08005889
 8005578:	0800589a 	.word	0x0800589a

0800557c <memcpy>:
 800557c:	440a      	add	r2, r1
 800557e:	4291      	cmp	r1, r2
 8005580:	f100 33ff 	add.w	r3, r0, #4294967295
 8005584:	d100      	bne.n	8005588 <memcpy+0xc>
 8005586:	4770      	bx	lr
 8005588:	b510      	push	{r4, lr}
 800558a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800558e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005592:	4291      	cmp	r1, r2
 8005594:	d1f9      	bne.n	800558a <memcpy+0xe>
 8005596:	bd10      	pop	{r4, pc}

08005598 <memmove>:
 8005598:	4288      	cmp	r0, r1
 800559a:	b510      	push	{r4, lr}
 800559c:	eb01 0402 	add.w	r4, r1, r2
 80055a0:	d902      	bls.n	80055a8 <memmove+0x10>
 80055a2:	4284      	cmp	r4, r0
 80055a4:	4623      	mov	r3, r4
 80055a6:	d807      	bhi.n	80055b8 <memmove+0x20>
 80055a8:	1e43      	subs	r3, r0, #1
 80055aa:	42a1      	cmp	r1, r4
 80055ac:	d008      	beq.n	80055c0 <memmove+0x28>
 80055ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055b6:	e7f8      	b.n	80055aa <memmove+0x12>
 80055b8:	4402      	add	r2, r0
 80055ba:	4601      	mov	r1, r0
 80055bc:	428a      	cmp	r2, r1
 80055be:	d100      	bne.n	80055c2 <memmove+0x2a>
 80055c0:	bd10      	pop	{r4, pc}
 80055c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055ca:	e7f7      	b.n	80055bc <memmove+0x24>

080055cc <_free_r>:
 80055cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055ce:	2900      	cmp	r1, #0
 80055d0:	d048      	beq.n	8005664 <_free_r+0x98>
 80055d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055d6:	9001      	str	r0, [sp, #4]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f1a1 0404 	sub.w	r4, r1, #4
 80055de:	bfb8      	it	lt
 80055e0:	18e4      	addlt	r4, r4, r3
 80055e2:	f000 f8d3 	bl	800578c <__malloc_lock>
 80055e6:	4a20      	ldr	r2, [pc, #128]	; (8005668 <_free_r+0x9c>)
 80055e8:	9801      	ldr	r0, [sp, #4]
 80055ea:	6813      	ldr	r3, [r2, #0]
 80055ec:	4615      	mov	r5, r2
 80055ee:	b933      	cbnz	r3, 80055fe <_free_r+0x32>
 80055f0:	6063      	str	r3, [r4, #4]
 80055f2:	6014      	str	r4, [r2, #0]
 80055f4:	b003      	add	sp, #12
 80055f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055fa:	f000 b8cd 	b.w	8005798 <__malloc_unlock>
 80055fe:	42a3      	cmp	r3, r4
 8005600:	d90b      	bls.n	800561a <_free_r+0x4e>
 8005602:	6821      	ldr	r1, [r4, #0]
 8005604:	1862      	adds	r2, r4, r1
 8005606:	4293      	cmp	r3, r2
 8005608:	bf04      	itt	eq
 800560a:	681a      	ldreq	r2, [r3, #0]
 800560c:	685b      	ldreq	r3, [r3, #4]
 800560e:	6063      	str	r3, [r4, #4]
 8005610:	bf04      	itt	eq
 8005612:	1852      	addeq	r2, r2, r1
 8005614:	6022      	streq	r2, [r4, #0]
 8005616:	602c      	str	r4, [r5, #0]
 8005618:	e7ec      	b.n	80055f4 <_free_r+0x28>
 800561a:	461a      	mov	r2, r3
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	b10b      	cbz	r3, 8005624 <_free_r+0x58>
 8005620:	42a3      	cmp	r3, r4
 8005622:	d9fa      	bls.n	800561a <_free_r+0x4e>
 8005624:	6811      	ldr	r1, [r2, #0]
 8005626:	1855      	adds	r5, r2, r1
 8005628:	42a5      	cmp	r5, r4
 800562a:	d10b      	bne.n	8005644 <_free_r+0x78>
 800562c:	6824      	ldr	r4, [r4, #0]
 800562e:	4421      	add	r1, r4
 8005630:	1854      	adds	r4, r2, r1
 8005632:	42a3      	cmp	r3, r4
 8005634:	6011      	str	r1, [r2, #0]
 8005636:	d1dd      	bne.n	80055f4 <_free_r+0x28>
 8005638:	681c      	ldr	r4, [r3, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	6053      	str	r3, [r2, #4]
 800563e:	4421      	add	r1, r4
 8005640:	6011      	str	r1, [r2, #0]
 8005642:	e7d7      	b.n	80055f4 <_free_r+0x28>
 8005644:	d902      	bls.n	800564c <_free_r+0x80>
 8005646:	230c      	movs	r3, #12
 8005648:	6003      	str	r3, [r0, #0]
 800564a:	e7d3      	b.n	80055f4 <_free_r+0x28>
 800564c:	6825      	ldr	r5, [r4, #0]
 800564e:	1961      	adds	r1, r4, r5
 8005650:	428b      	cmp	r3, r1
 8005652:	bf04      	itt	eq
 8005654:	6819      	ldreq	r1, [r3, #0]
 8005656:	685b      	ldreq	r3, [r3, #4]
 8005658:	6063      	str	r3, [r4, #4]
 800565a:	bf04      	itt	eq
 800565c:	1949      	addeq	r1, r1, r5
 800565e:	6021      	streq	r1, [r4, #0]
 8005660:	6054      	str	r4, [r2, #4]
 8005662:	e7c7      	b.n	80055f4 <_free_r+0x28>
 8005664:	b003      	add	sp, #12
 8005666:	bd30      	pop	{r4, r5, pc}
 8005668:	20000098 	.word	0x20000098

0800566c <_malloc_r>:
 800566c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800566e:	1ccd      	adds	r5, r1, #3
 8005670:	f025 0503 	bic.w	r5, r5, #3
 8005674:	3508      	adds	r5, #8
 8005676:	2d0c      	cmp	r5, #12
 8005678:	bf38      	it	cc
 800567a:	250c      	movcc	r5, #12
 800567c:	2d00      	cmp	r5, #0
 800567e:	4606      	mov	r6, r0
 8005680:	db01      	blt.n	8005686 <_malloc_r+0x1a>
 8005682:	42a9      	cmp	r1, r5
 8005684:	d903      	bls.n	800568e <_malloc_r+0x22>
 8005686:	230c      	movs	r3, #12
 8005688:	6033      	str	r3, [r6, #0]
 800568a:	2000      	movs	r0, #0
 800568c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800568e:	f000 f87d 	bl	800578c <__malloc_lock>
 8005692:	4921      	ldr	r1, [pc, #132]	; (8005718 <_malloc_r+0xac>)
 8005694:	680a      	ldr	r2, [r1, #0]
 8005696:	4614      	mov	r4, r2
 8005698:	b99c      	cbnz	r4, 80056c2 <_malloc_r+0x56>
 800569a:	4f20      	ldr	r7, [pc, #128]	; (800571c <_malloc_r+0xb0>)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	b923      	cbnz	r3, 80056aa <_malloc_r+0x3e>
 80056a0:	4621      	mov	r1, r4
 80056a2:	4630      	mov	r0, r6
 80056a4:	f000 f862 	bl	800576c <_sbrk_r>
 80056a8:	6038      	str	r0, [r7, #0]
 80056aa:	4629      	mov	r1, r5
 80056ac:	4630      	mov	r0, r6
 80056ae:	f000 f85d 	bl	800576c <_sbrk_r>
 80056b2:	1c43      	adds	r3, r0, #1
 80056b4:	d123      	bne.n	80056fe <_malloc_r+0x92>
 80056b6:	230c      	movs	r3, #12
 80056b8:	6033      	str	r3, [r6, #0]
 80056ba:	4630      	mov	r0, r6
 80056bc:	f000 f86c 	bl	8005798 <__malloc_unlock>
 80056c0:	e7e3      	b.n	800568a <_malloc_r+0x1e>
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	1b5b      	subs	r3, r3, r5
 80056c6:	d417      	bmi.n	80056f8 <_malloc_r+0x8c>
 80056c8:	2b0b      	cmp	r3, #11
 80056ca:	d903      	bls.n	80056d4 <_malloc_r+0x68>
 80056cc:	6023      	str	r3, [r4, #0]
 80056ce:	441c      	add	r4, r3
 80056d0:	6025      	str	r5, [r4, #0]
 80056d2:	e004      	b.n	80056de <_malloc_r+0x72>
 80056d4:	6863      	ldr	r3, [r4, #4]
 80056d6:	42a2      	cmp	r2, r4
 80056d8:	bf0c      	ite	eq
 80056da:	600b      	streq	r3, [r1, #0]
 80056dc:	6053      	strne	r3, [r2, #4]
 80056de:	4630      	mov	r0, r6
 80056e0:	f000 f85a 	bl	8005798 <__malloc_unlock>
 80056e4:	f104 000b 	add.w	r0, r4, #11
 80056e8:	1d23      	adds	r3, r4, #4
 80056ea:	f020 0007 	bic.w	r0, r0, #7
 80056ee:	1ac2      	subs	r2, r0, r3
 80056f0:	d0cc      	beq.n	800568c <_malloc_r+0x20>
 80056f2:	1a1b      	subs	r3, r3, r0
 80056f4:	50a3      	str	r3, [r4, r2]
 80056f6:	e7c9      	b.n	800568c <_malloc_r+0x20>
 80056f8:	4622      	mov	r2, r4
 80056fa:	6864      	ldr	r4, [r4, #4]
 80056fc:	e7cc      	b.n	8005698 <_malloc_r+0x2c>
 80056fe:	1cc4      	adds	r4, r0, #3
 8005700:	f024 0403 	bic.w	r4, r4, #3
 8005704:	42a0      	cmp	r0, r4
 8005706:	d0e3      	beq.n	80056d0 <_malloc_r+0x64>
 8005708:	1a21      	subs	r1, r4, r0
 800570a:	4630      	mov	r0, r6
 800570c:	f000 f82e 	bl	800576c <_sbrk_r>
 8005710:	3001      	adds	r0, #1
 8005712:	d1dd      	bne.n	80056d0 <_malloc_r+0x64>
 8005714:	e7cf      	b.n	80056b6 <_malloc_r+0x4a>
 8005716:	bf00      	nop
 8005718:	20000098 	.word	0x20000098
 800571c:	2000009c 	.word	0x2000009c

08005720 <_realloc_r>:
 8005720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005722:	4607      	mov	r7, r0
 8005724:	4614      	mov	r4, r2
 8005726:	460e      	mov	r6, r1
 8005728:	b921      	cbnz	r1, 8005734 <_realloc_r+0x14>
 800572a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800572e:	4611      	mov	r1, r2
 8005730:	f7ff bf9c 	b.w	800566c <_malloc_r>
 8005734:	b922      	cbnz	r2, 8005740 <_realloc_r+0x20>
 8005736:	f7ff ff49 	bl	80055cc <_free_r>
 800573a:	4625      	mov	r5, r4
 800573c:	4628      	mov	r0, r5
 800573e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005740:	f000 f830 	bl	80057a4 <_malloc_usable_size_r>
 8005744:	42a0      	cmp	r0, r4
 8005746:	d20f      	bcs.n	8005768 <_realloc_r+0x48>
 8005748:	4621      	mov	r1, r4
 800574a:	4638      	mov	r0, r7
 800574c:	f7ff ff8e 	bl	800566c <_malloc_r>
 8005750:	4605      	mov	r5, r0
 8005752:	2800      	cmp	r0, #0
 8005754:	d0f2      	beq.n	800573c <_realloc_r+0x1c>
 8005756:	4631      	mov	r1, r6
 8005758:	4622      	mov	r2, r4
 800575a:	f7ff ff0f 	bl	800557c <memcpy>
 800575e:	4631      	mov	r1, r6
 8005760:	4638      	mov	r0, r7
 8005762:	f7ff ff33 	bl	80055cc <_free_r>
 8005766:	e7e9      	b.n	800573c <_realloc_r+0x1c>
 8005768:	4635      	mov	r5, r6
 800576a:	e7e7      	b.n	800573c <_realloc_r+0x1c>

0800576c <_sbrk_r>:
 800576c:	b538      	push	{r3, r4, r5, lr}
 800576e:	4d06      	ldr	r5, [pc, #24]	; (8005788 <_sbrk_r+0x1c>)
 8005770:	2300      	movs	r3, #0
 8005772:	4604      	mov	r4, r0
 8005774:	4608      	mov	r0, r1
 8005776:	602b      	str	r3, [r5, #0]
 8005778:	f7fb fb80 	bl	8000e7c <_sbrk>
 800577c:	1c43      	adds	r3, r0, #1
 800577e:	d102      	bne.n	8005786 <_sbrk_r+0x1a>
 8005780:	682b      	ldr	r3, [r5, #0]
 8005782:	b103      	cbz	r3, 8005786 <_sbrk_r+0x1a>
 8005784:	6023      	str	r3, [r4, #0]
 8005786:	bd38      	pop	{r3, r4, r5, pc}
 8005788:	200001b0 	.word	0x200001b0

0800578c <__malloc_lock>:
 800578c:	4801      	ldr	r0, [pc, #4]	; (8005794 <__malloc_lock+0x8>)
 800578e:	f000 b811 	b.w	80057b4 <__retarget_lock_acquire_recursive>
 8005792:	bf00      	nop
 8005794:	200001b8 	.word	0x200001b8

08005798 <__malloc_unlock>:
 8005798:	4801      	ldr	r0, [pc, #4]	; (80057a0 <__malloc_unlock+0x8>)
 800579a:	f000 b80c 	b.w	80057b6 <__retarget_lock_release_recursive>
 800579e:	bf00      	nop
 80057a0:	200001b8 	.word	0x200001b8

080057a4 <_malloc_usable_size_r>:
 80057a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057a8:	1f18      	subs	r0, r3, #4
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	bfbc      	itt	lt
 80057ae:	580b      	ldrlt	r3, [r1, r0]
 80057b0:	18c0      	addlt	r0, r0, r3
 80057b2:	4770      	bx	lr

080057b4 <__retarget_lock_acquire_recursive>:
 80057b4:	4770      	bx	lr

080057b6 <__retarget_lock_release_recursive>:
 80057b6:	4770      	bx	lr

080057b8 <_init>:
 80057b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ba:	bf00      	nop
 80057bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057be:	bc08      	pop	{r3}
 80057c0:	469e      	mov	lr, r3
 80057c2:	4770      	bx	lr

080057c4 <_fini>:
 80057c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057c6:	bf00      	nop
 80057c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ca:	bc08      	pop	{r3}
 80057cc:	469e      	mov	lr, r3
 80057ce:	4770      	bx	lr
