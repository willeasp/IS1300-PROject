
IS1300-PROject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c590  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  0800c720  0800c720  0001c720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ca4c  0800ca4c  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800ca4c  0800ca4c  0001ca4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ca54  0800ca54  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ca54  0800ca54  0001ca54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ca58  0800ca58  0001ca58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800ca5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002004  20000084  0800cae0  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002088  0800cae0  00022088  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   000330c5  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005bd1  00000000  00000000  00053179  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002058  00000000  00000000  00058d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001df0  00000000  00000000  0005ada8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ef76  00000000  00000000  0005cb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00029311  00000000  00000000  0008bb0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011b1fc  00000000  00000000  000b4e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d001b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008fe0  00000000  00000000  001d0070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c708 	.word	0x0800c708

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800c708 	.word	0x0800c708

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000d5a:	f107 031c 	add.w	r3, r7, #28
 8000d5e:	2200      	movs	r2, #0
 8000d60:	601a      	str	r2, [r3, #0]
 8000d62:	605a      	str	r2, [r3, #4]
 8000d64:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d66:	1d3b      	adds	r3, r7, #4
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	60da      	str	r2, [r3, #12]
 8000d72:	611a      	str	r2, [r3, #16]
 8000d74:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000d76:	4b2f      	ldr	r3, [pc, #188]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d78:	4a2f      	ldr	r2, [pc, #188]	; (8000e38 <MX_ADC1_Init+0xe4>)
 8000d7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d7c:	4b2d      	ldr	r3, [pc, #180]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d82:	4b2c      	ldr	r3, [pc, #176]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d88:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d8e:	4b29      	ldr	r3, [pc, #164]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d94:	4b27      	ldr	r3, [pc, #156]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d96:	2204      	movs	r2, #4
 8000d98:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000da0:	4b24      	ldr	r3, [pc, #144]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8000da6:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000da8:	2201      	movs	r2, #1
 8000daa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dac:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dc0:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dd6:	4817      	ldr	r0, [pc, #92]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000dd8:	f001 fb14 	bl	8002404 <HAL_ADC_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000de2:	f000 fc39 	bl	8001658 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	4619      	mov	r1, r3
 8000df0:	4810      	ldr	r0, [pc, #64]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000df2:	f002 fb61 	bl	80034b8 <HAL_ADCEx_MultiModeConfigChannel>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000dfc:	f000 fc2c 	bl	8001658 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_16;
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_ADC1_Init+0xe8>)
 8000e02:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e04:	2306      	movs	r3, #6
 8000e06:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e0c:	237f      	movs	r3, #127	; 0x7f
 8000e0e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e10:	2304      	movs	r3, #4
 8000e12:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e14:	2300      	movs	r3, #0
 8000e16:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <MX_ADC1_Init+0xe0>)
 8000e1e:	f001 fde7 	bl	80029f0 <HAL_ADC_ConfigChannel>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d001      	beq.n	8000e2c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000e28:	f000 fc16 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e2c:	bf00      	nop
 8000e2e:	3728      	adds	r7, #40	; 0x28
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20001e20 	.word	0x20001e20
 8000e38:	50040000 	.word	0x50040000
 8000e3c:	43210000 	.word	0x43210000

08000e40 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b0ac      	sub	sp, #176	; 0xb0
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2288      	movs	r2, #136	; 0x88
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f00a fafd 	bl	800b460 <memset>
  if(adcHandle->Instance==ADC1)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a27      	ldr	r2, [pc, #156]	; (8000f08 <HAL_ADC_MspInit+0xc8>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d146      	bne.n	8000efe <HAL_ADC_MspInit+0xbe>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e70:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e74:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000e76:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000e82:	2301      	movs	r3, #1
 8000e84:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8000e86:	2308      	movs	r3, #8
 8000e88:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000e8a:	2307      	movs	r3, #7
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000e92:	2302      	movs	r3, #2
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000e96:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e9a:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e9c:	f107 0314 	add.w	r3, r7, #20
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	f003 fd5f 	bl	8004964 <HAL_RCCEx_PeriphCLKConfig>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d001      	beq.n	8000eb0 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8000eac:	f000 fbd4 	bl	8001658 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000eb0:	4b16      	ldr	r3, [pc, #88]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb4:	4a15      	ldr	r2, [pc, #84]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000eb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000eba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000ebe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec8:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000eca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ecc:	4a0f      	ldr	r2, [pc, #60]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000ece:	f043 0302 	orr.w	r3, r3, #2
 8000ed2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed4:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <HAL_ADC_MspInit+0xcc>)
 8000ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	60fb      	str	r3, [r7, #12]
 8000ede:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000ee6:	230b      	movs	r3, #11
 8000ee8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ef2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <HAL_ADC_MspInit+0xd0>)
 8000efa:	f002 fcef 	bl	80038dc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000efe:	bf00      	nop
 8000f00:	37b0      	adds	r7, #176	; 0xb0
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	50040000 	.word	0x50040000
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	48000400 	.word	0x48000400

08000f14 <start_clock>:


/**
 * @brief start the RTC clock
 */
void start_clock (uint8_t hours, uint8_t minutes, uint8_t seconds) {
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b088      	sub	sp, #32
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	71fb      	strb	r3, [r7, #7]
 8000f1e:	460b      	mov	r3, r1
 8000f20:	71bb      	strb	r3, [r7, #6]
 8000f22:	4613      	mov	r3, r2
 8000f24:	717b      	strb	r3, [r7, #5]
    RTC_TimeTypeDef time = {0};
 8000f26:	f107 030c 	add.w	r3, r7, #12
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	60da      	str	r2, [r3, #12]
 8000f34:	611a      	str	r2, [r3, #16]
    time.Hours = hours;
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	733b      	strb	r3, [r7, #12]
    time.Minutes = minutes;
 8000f3a:	79bb      	ldrb	r3, [r7, #6]
 8000f3c:	737b      	strb	r3, [r7, #13]
    time.Seconds = seconds;
 8000f3e:	797b      	ldrb	r3, [r7, #5]
 8000f40:	73bb      	strb	r3, [r7, #14]

    /* date has to be set to start the clock */
    HAL_RTC_SetDate(&hrtc, NULL, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2100      	movs	r1, #0
 8000f46:	4807      	ldr	r0, [pc, #28]	; (8000f64 <start_clock+0x50>)
 8000f48:	f004 fb3c 	bl	80055c4 <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	2200      	movs	r2, #0
 8000f52:	4619      	mov	r1, r3
 8000f54:	4803      	ldr	r0, [pc, #12]	; (8000f64 <start_clock+0x50>)
 8000f56:	f004 fa3c 	bl	80053d2 <HAL_RTC_SetTime>
}
 8000f5a:	bf00      	nop
 8000f5c:	3720      	adds	r7, #32
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20001e90 	.word	0x20001e90

08000f68 <get_time>:
/**
 * @brief Get the current RTC time
 * @param[out] time The current time
 * @return Pointer to the time struct
 */
void get_time (RTC_TimeTypeDef *time) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
    HAL_RTC_GetTime(&hrtc, time, RTC_FORMAT_BIN);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	4805      	ldr	r0, [pc, #20]	; (8000f8c <get_time+0x24>)
 8000f76:	f004 fac9 	bl	800550c <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, NULL, RTC_FORMAT_BIN);
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	4803      	ldr	r0, [pc, #12]	; (8000f8c <get_time+0x24>)
 8000f80:	f004 fba7 	bl	80056d2 <HAL_RTC_GetDate>
//        start_clock(0, 0, 0);
//        time->Hours = 0;
//        time->Minutes = 0;
//        time->Seconds = 0;
//    }
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	20001e90 	.word	0x20001e90

08000f90 <hardware_reset>:
uint16_t pins[] = {Disp_White_Pin, Disp_Green_Pin};

/**
 * @brief Perform a hardware reset on the display
 */
void hardware_reset () {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
    HAL_Delay(5);
 8000f94:	2005      	movs	r0, #5
 8000f96:	f001 f807 	bl	8001fa8 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_RESET);
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fa0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fa4:	f002 fe44 	bl	8003c30 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000fa8:	200a      	movs	r0, #10
 8000faa:	f000 fffd 	bl	8001fa8 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000fb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb8:	f002 fe3a 	bl	8003c30 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	f000 fff3 	bl	8001fa8 <HAL_Delay>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <set_backlight>:


/**
 * @brief Set a backlight color
 */
void set_backlight (uint8_t color, GPIO_PinState state) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	460a      	mov	r2, r1
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(ports[color], pins[color], state);
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	4a07      	ldr	r2, [pc, #28]	; (8000ff8 <set_backlight+0x30>)
 8000fdc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000fe0:	79fb      	ldrb	r3, [r7, #7]
 8000fe2:	4a06      	ldr	r2, [pc, #24]	; (8000ffc <set_backlight+0x34>)
 8000fe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000fe8:	79ba      	ldrb	r2, [r7, #6]
 8000fea:	4619      	mov	r1, r3
 8000fec:	f002 fe20 	bl	8003c30 <HAL_GPIO_WritePin>
}
 8000ff0:	bf00      	nop
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	20000000 	.word	0x20000000
 8000ffc:	20000008 	.word	0x20000008

08001000 <split_byte>:
/**
 * @brief Split a byte to send to the display
 * @param[in] byte The byte to split into two
 * @param[out] buffer Where to place the two new bytes
 */
void split_byte (uint8_t byte, uint8_t *buffer) {
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	4603      	mov	r3, r0
 8001008:	6039      	str	r1, [r7, #0]
 800100a:	71fb      	strb	r3, [r7, #7]
    buffer[0] = byte & 0x0F;            // lower bits first
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	b2da      	uxtb	r2, r3
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	701a      	strb	r2, [r3, #0]
    buffer[1] = (byte & 0xF0) >> 4;     // upper bits second
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	3301      	adds	r3, #1
 800101c:	79fa      	ldrb	r2, [r7, #7]
 800101e:	0912      	lsrs	r2, r2, #4
 8001020:	b2d2      	uxtb	r2, r2
 8001022:	701a      	strb	r2, [r3, #0]
}
 8001024:	bf00      	nop
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <display_transmit>:
 * @brief Send the display data or instructions
 * @param[in] startbyte The byte setting that initiates the transmit
 * @param[in] bytes The bytes that will be sent to the display
 * @param[in] length The number of bytes to send
 */
int display_transmit (uint8_t startbyte, uint8_t *bytes, uint16_t length) {
 8001030:	b5b0      	push	{r4, r5, r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	6039      	str	r1, [r7, #0]
 800103a:	71fb      	strb	r3, [r7, #7]
 800103c:	4613      	mov	r3, r2
 800103e:	80bb      	strh	r3, [r7, #4]
 8001040:	466b      	mov	r3, sp
 8001042:	461d      	mov	r5, r3
    /* create message to transmit */
    uint16_t mes_length = length*2 +1; // +1 for start byte
 8001044:	88bb      	ldrh	r3, [r7, #4]
 8001046:	005b      	lsls	r3, r3, #1
 8001048:	b29b      	uxth	r3, r3
 800104a:	3301      	adds	r3, #1
 800104c:	837b      	strh	r3, [r7, #26]
    uint8_t message[mes_length];
 800104e:	8b7c      	ldrh	r4, [r7, #26]
 8001050:	4623      	mov	r3, r4
 8001052:	3b01      	subs	r3, #1
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	b2a0      	uxth	r0, r4
 8001058:	f04f 0100 	mov.w	r1, #0
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	00cb      	lsls	r3, r1, #3
 8001066:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800106a:	00c2      	lsls	r2, r0, #3
 800106c:	b2a0      	uxth	r0, r4
 800106e:	f04f 0100 	mov.w	r1, #0
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	f04f 0300 	mov.w	r3, #0
 800107a:	00cb      	lsls	r3, r1, #3
 800107c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001080:	00c2      	lsls	r2, r0, #3
 8001082:	4623      	mov	r3, r4
 8001084:	3307      	adds	r3, #7
 8001086:	08db      	lsrs	r3, r3, #3
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	ebad 0d03 	sub.w	sp, sp, r3
 800108e:	466b      	mov	r3, sp
 8001090:	3300      	adds	r3, #0
 8001092:	613b      	str	r3, [r7, #16]

    message[0] = startbyte;  // start byte
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	79fa      	ldrb	r2, [r7, #7]
 8001098:	701a      	strb	r2, [r3, #0]

    uint8_t divided[2]; // for splitting a byte into two
    for (int i = 0; i < length; ++i) {
 800109a:	2300      	movs	r3, #0
 800109c:	61fb      	str	r3, [r7, #28]
 800109e:	e018      	b.n	80010d2 <display_transmit+0xa2>
        split_byte(bytes[i], divided);
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	4413      	add	r3, r2
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	f107 020c 	add.w	r2, r7, #12
 80010ac:	4611      	mov	r1, r2
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ffa6 	bl	8001000 <split_byte>
        message[1 + i*2] = divided[0];
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	3301      	adds	r3, #1
 80010ba:	7b39      	ldrb	r1, [r7, #12]
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	54d1      	strb	r1, [r2, r3]
        message[1 + i*2 +1] = divided[1];
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	3301      	adds	r3, #1
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	7b79      	ldrb	r1, [r7, #13]
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < length; ++i) {
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	3301      	adds	r3, #1
 80010d0:	61fb      	str	r3, [r7, #28]
 80010d2:	88bb      	ldrh	r3, [r7, #4]
 80010d4:	69fa      	ldr	r2, [r7, #28]
 80010d6:	429a      	cmp	r2, r3
 80010d8:	dbe2      	blt.n	80010a0 <display_transmit+0x70>
    }

    if (HAL_SPI_Transmit(&hspi2, message, mes_length, 100) != HAL_OK) {
 80010da:	6939      	ldr	r1, [r7, #16]
 80010dc:	8b7a      	ldrh	r2, [r7, #26]
 80010de:	2364      	movs	r3, #100	; 0x64
 80010e0:	4806      	ldr	r0, [pc, #24]	; (80010fc <display_transmit+0xcc>)
 80010e2:	f004 fcb8 	bl	8005a56 <HAL_SPI_Transmit>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <display_transmit+0xc0>
        return 1;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e000      	b.n	80010f2 <display_transmit+0xc2>
    }
    return 0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	46ad      	mov	sp, r5
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3720      	adds	r7, #32
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bdb0      	pop	{r4, r5, r7, pc}
 80010fc:	20001eb4 	.word	0x20001eb4

08001100 <display_send_instruction>:
/**
 * @brief Send instruction bytes via spi to the display
 * @param[in] instructions A pointer to the instructions to send to the display
 * @param[in] length The number of instructions
 */
int display_send_instruction (uint8_t *instructions, uint16_t length) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
 8001108:	460b      	mov	r3, r1
 800110a:	807b      	strh	r3, [r7, #2]
    return display_transmit(0x1F, instructions, length);
 800110c:	887b      	ldrh	r3, [r7, #2]
 800110e:	461a      	mov	r2, r3
 8001110:	6879      	ldr	r1, [r7, #4]
 8001112:	201f      	movs	r0, #31
 8001114:	f7ff ff8c 	bl	8001030 <display_transmit>
 8001118:	4603      	mov	r3, r0
}
 800111a:	4618      	mov	r0, r3
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <display_write>:
/**
 * @brief Write characters to the display where the cursor currently are
 * @param characters The characters to write
 * @param length The number of characters
 */
int display_write (char *characters, uint16_t length) {
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	460b      	mov	r3, r1
 800112c:	807b      	strh	r3, [r7, #2]
    return display_transmit(0b01011111, (uint8_t*)characters, length);
 800112e:	887b      	ldrh	r3, [r7, #2]
 8001130:	461a      	mov	r2, r3
 8001132:	6879      	ldr	r1, [r7, #4]
 8001134:	205f      	movs	r0, #95	; 0x5f
 8001136:	f7ff ff7b 	bl	8001030 <display_transmit>
 800113a:	4603      	mov	r3, r0
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <set_row>:
uint8_t rows[] = {0b10000000, 0b10100000, 0b11000000, 0b11100000};
/**
 * @brief Set the cursor on the display
 * @param[in] row The row to write to
 */
int set_row (uint8_t row) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	71fb      	strb	r3, [r7, #7]
    /* the address range of DDARM is 00H-13H, 20H-33H, 40H53H, 60H-73H */
    return display_send_instruction(&rows[row], 1);
 800114e:	79fb      	ldrb	r3, [r7, #7]
 8001150:	4a05      	ldr	r2, [pc, #20]	; (8001168 <set_row+0x24>)
 8001152:	4413      	add	r3, r2
 8001154:	2101      	movs	r1, #1
 8001156:	4618      	mov	r0, r3
 8001158:	f7ff ffd2 	bl	8001100 <display_send_instruction>
 800115c:	4603      	mov	r3, r0
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000000c 	.word	0x2000000c

0800116c <display_write_row>:
 * @brief Write text to a specific row on the display
 * @param[in] characters The characters to write
 * @param[in] length The number of characters
 * @param[in] row The row to write to
 */
int display_write_row (char *characters, uint16_t length, uint8_t row) {
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
 8001178:	4613      	mov	r3, r2
 800117a:	707b      	strb	r3, [r7, #1]
    set_row(row);
 800117c:	787b      	ldrb	r3, [r7, #1]
 800117e:	4618      	mov	r0, r3
 8001180:	f7ff ffe0 	bl	8001144 <set_row>
    return display_write(characters, length);
 8001184:	887b      	ldrh	r3, [r7, #2]
 8001186:	4619      	mov	r1, r3
 8001188:	6878      	ldr	r0, [r7, #4]
 800118a:	f7ff ffca 	bl	8001122 <display_write>
 800118e:	4603      	mov	r3, r0
}
 8001190:	4618      	mov	r0, r3
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <clear_display>:

/**
 * @brief Clears the display
 */
int clear_display () {
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
    uint8_t ins = 0x01;
 800119e:	2301      	movs	r3, #1
 80011a0:	71fb      	strb	r3, [r7, #7]
    return display_send_instruction(&ins, 1);
 80011a2:	1dfb      	adds	r3, r7, #7
 80011a4:	2101      	movs	r1, #1
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff ffaa 	bl	8001100 <display_send_instruction>
 80011ac:	4603      	mov	r3, r0
}
 80011ae:	4618      	mov	r0, r3
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <init_display>:

/**
 * @brief Initialise the display
 */
void init_display () {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
    hardware_reset();
 80011be:	f7ff fee7 	bl	8000f90 <hardware_reset>

    uint16_t ins_length = 12;
 80011c2:	230c      	movs	r3, #12
 80011c4:	81fb      	strh	r3, [r7, #14]
    uint8_t instructions[] = {
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <init_display+0x38>)
 80011c8:	463b      	mov	r3, r7
 80011ca:	ca07      	ldmia	r2, {r0, r1, r2}
 80011cc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0x01,
        0x38,
        0x0C,       // display on
    };

    if (display_send_instruction(instructions, ins_length))
 80011d0:	89fa      	ldrh	r2, [r7, #14]
 80011d2:	463b      	mov	r3, r7
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff ff92 	bl	8001100 <display_send_instruction>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <init_display+0x2e>
        handle_error();
 80011e2:	f000 f807 	bl	80011f4 <handle_error>

    clear_display();

    HAL_Delay(10);
#endif
}
 80011e6:	bf00      	nop
 80011e8:	3710      	adds	r7, #16
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	0800c720 	.word	0x0800c720

080011f4 <handle_error>:
 *      Author: Dell
 */

#include "main.h"

void handle_error( void ) {
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f8:	b672      	cpsid	i
}
 80011fa:	bf00      	nop
    __disable_irq();
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2120      	movs	r1, #32
 8001200:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001204:	f002 fd14 	bl	8003c30 <HAL_GPIO_WritePin>
    while (1)
 8001208:	e7fe      	b.n	8001208 <handle_error+0x14>
	...

0800120c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001210:	4a0c      	ldr	r2, [pc, #48]	; (8001244 <MX_FREERTOS_Init+0x38>)
 8001212:	2100      	movs	r1, #0
 8001214:	480c      	ldr	r0, [pc, #48]	; (8001248 <MX_FREERTOS_Init+0x3c>)
 8001216:	f007 fb3d 	bl	8008894 <osThreadNew>
 800121a:	4603      	mov	r3, r0
 800121c:	4a0b      	ldr	r2, [pc, #44]	; (800124c <MX_FREERTOS_Init+0x40>)
 800121e:	6013      	str	r3, [r2, #0]

  /* creation of backlightTask */
  backlightTaskHandle = osThreadNew(startBacklightTask, NULL, &backlightTask_attributes);
 8001220:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <MX_FREERTOS_Init+0x44>)
 8001222:	2100      	movs	r1, #0
 8001224:	480b      	ldr	r0, [pc, #44]	; (8001254 <MX_FREERTOS_Init+0x48>)
 8001226:	f007 fb35 	bl	8008894 <osThreadNew>
 800122a:	4603      	mov	r3, r0
 800122c:	4a0a      	ldr	r2, [pc, #40]	; (8001258 <MX_FREERTOS_Init+0x4c>)
 800122e:	6013      	str	r3, [r2, #0]

  /* creation of clockTask */
  clockTaskHandle = osThreadNew(startClockTask, NULL, &clockTask_attributes);
 8001230:	4a0a      	ldr	r2, [pc, #40]	; (800125c <MX_FREERTOS_Init+0x50>)
 8001232:	2100      	movs	r1, #0
 8001234:	480a      	ldr	r0, [pc, #40]	; (8001260 <MX_FREERTOS_Init+0x54>)
 8001236:	f007 fb2d 	bl	8008894 <osThreadNew>
 800123a:	4603      	mov	r3, r0
 800123c:	4a09      	ldr	r2, [pc, #36]	; (8001264 <MX_FREERTOS_Init+0x58>)
 800123e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001240:	bf00      	nop
 8001242:	bd80      	pop	{r7, pc}
 8001244:	0800c7e8 	.word	0x0800c7e8
 8001248:	08001269 	.word	0x08001269
 800124c:	20001e84 	.word	0x20001e84
 8001250:	0800c80c 	.word	0x0800c80c
 8001254:	08001279 	.word	0x08001279
 8001258:	20001e8c 	.word	0x20001e8c
 800125c:	0800c830 	.word	0x0800c830
 8001260:	080012d1 	.word	0x080012d1
 8001264:	20001e88 	.word	0x20001e88

08001268 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001270:	2001      	movs	r0, #1
 8001272:	f007 fba1 	bl	80089b8 <osDelay>
 8001276:	e7fb      	b.n	8001270 <StartDefaultTask+0x8>

08001278 <startBacklightTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startBacklightTask */
void startBacklightTask(void *argument)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b086      	sub	sp, #24
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startBacklightTask */
    TickType_t lastWakeTime;
    const TickType_t period = pdMS_TO_TICKS(100);
 8001280:	2364      	movs	r3, #100	; 0x64
 8001282:	617b      	str	r3, [r7, #20]
    lastWakeTime = xTaskGetTickCount();
 8001284:	f008 fd0e 	bl	8009ca4 <xTaskGetTickCount>
 8001288:	4603      	mov	r3, r0
 800128a:	60fb      	str	r3, [r7, #12]
    uint32_t pot;

  /* Infinite loop */
  for(;;)
  {
    pot = get_potentiometer_value();
 800128c:	f000 f9ea 	bl	8001664 <get_potentiometer_value>
 8001290:	6138      	str	r0, [r7, #16]
    set_brightness((double)pot/POT_MAX);
 8001292:	6938      	ldr	r0, [r7, #16]
 8001294:	f7ff f936 	bl	8000504 <__aeabi_ui2d>
 8001298:	a30b      	add	r3, pc, #44	; (adr r3, 80012c8 <startBacklightTask+0x50>)
 800129a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129e:	f7ff fad5 	bl	800084c <__aeabi_ddiv>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	ec43 2b17 	vmov	d7, r2, r3
 80012aa:	eeb0 0a47 	vmov.f32	s0, s14
 80012ae:	eef0 0a67 	vmov.f32	s1, s15
 80012b2:	f000 f9e9 	bl	8001688 <set_brightness>

    vTaskDelayUntil(&lastWakeTime, period);
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	6979      	ldr	r1, [r7, #20]
 80012bc:	4618      	mov	r0, r3
 80012be:	f008 fb23 	bl	8009908 <vTaskDelayUntil>
    pot = get_potentiometer_value();
 80012c2:	e7e3      	b.n	800128c <startBacklightTask+0x14>
 80012c4:	f3af 8000 	nop.w
 80012c8:	00000000 	.word	0x00000000
 80012cc:	40afc400 	.word	0x40afc400

080012d0 <startClockTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startClockTask */
void startClockTask(void *argument)
{
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b08f      	sub	sp, #60	; 0x3c
 80012d4:	af02      	add	r7, sp, #8
 80012d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startClockTask */
    TickType_t lastWakeTime;
    const TickType_t period = pdMS_TO_TICKS(1000);
 80012d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    lastWakeTime = xTaskGetTickCount();
 80012de:	f008 fce1 	bl	8009ca4 <xTaskGetTickCount>
 80012e2:	4603      	mov	r3, r0
 80012e4:	61fb      	str	r3, [r7, #28]

    RTC_TimeTypeDef time;
    uint8_t buf_len = 8;
 80012e6:	2308      	movs	r3, #8
 80012e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    char buf[buf_len];
 80012ec:	f897 402b 	ldrb.w	r4, [r7, #43]	; 0x2b
 80012f0:	4623      	mov	r3, r4
 80012f2:	3b01      	subs	r3, #1
 80012f4:	627b      	str	r3, [r7, #36]	; 0x24
 80012f6:	b2e0      	uxtb	r0, r4
 80012f8:	f04f 0100 	mov.w	r1, #0
 80012fc:	f04f 0200 	mov.w	r2, #0
 8001300:	f04f 0300 	mov.w	r3, #0
 8001304:	00cb      	lsls	r3, r1, #3
 8001306:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800130a:	00c2      	lsls	r2, r0, #3
 800130c:	b2e0      	uxtb	r0, r4
 800130e:	f04f 0100 	mov.w	r1, #0
 8001312:	f04f 0200 	mov.w	r2, #0
 8001316:	f04f 0300 	mov.w	r3, #0
 800131a:	00cb      	lsls	r3, r1, #3
 800131c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001320:	00c2      	lsls	r2, r0, #3
 8001322:	4623      	mov	r3, r4
 8001324:	3307      	adds	r3, #7
 8001326:	08db      	lsrs	r3, r3, #3
 8001328:	00db      	lsls	r3, r3, #3
 800132a:	ebad 0d03 	sub.w	sp, sp, r3
 800132e:	ab02      	add	r3, sp, #8
 8001330:	3300      	adds	r3, #0
 8001332:	623b      	str	r3, [r7, #32]

  /* Infinite loop */
  for(;;)
  {
    get_time(&time);
 8001334:	f107 0308 	add.w	r3, r7, #8
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff fe15 	bl	8000f68 <get_time>
    sprintf(buf, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 800133e:	6a38      	ldr	r0, [r7, #32]
 8001340:	7a3b      	ldrb	r3, [r7, #8]
 8001342:	461a      	mov	r2, r3
 8001344:	7a7b      	ldrb	r3, [r7, #9]
 8001346:	4619      	mov	r1, r3
 8001348:	7abb      	ldrb	r3, [r7, #10]
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	460b      	mov	r3, r1
 800134e:	490b      	ldr	r1, [pc, #44]	; (800137c <startClockTask+0xac>)
 8001350:	f00a f962 	bl	800b618 <siprintf>
    uart_println(buf);
 8001354:	6a3b      	ldr	r3, [r7, #32]
 8001356:	4618      	mov	r0, r3
 8001358:	f000 fcaa 	bl	8001cb0 <uart_println>
    display_write_row(buf, buf_len, 0);
 800135c:	6a3b      	ldr	r3, [r7, #32]
 800135e:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001362:	b291      	uxth	r1, r2
 8001364:	2200      	movs	r2, #0
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ff00 	bl	800116c <display_write_row>

    vTaskDelayUntil(&lastWakeTime, period);
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001372:	4618      	mov	r0, r3
 8001374:	f008 fac8 	bl	8009908 <vTaskDelayUntil>
    get_time(&time);
 8001378:	e7dc      	b.n	8001334 <startClockTask+0x64>
 800137a:	bf00      	nop
 800137c:	0800c754 	.word	0x0800c754

08001380 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001386:	f107 0314 	add.w	r3, r7, #20
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]
 8001390:	609a      	str	r2, [r3, #8]
 8001392:	60da      	str	r2, [r3, #12]
 8001394:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001396:	4b40      	ldr	r3, [pc, #256]	; (8001498 <MX_GPIO_Init+0x118>)
 8001398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139a:	4a3f      	ldr	r2, [pc, #252]	; (8001498 <MX_GPIO_Init+0x118>)
 800139c:	f043 0304 	orr.w	r3, r3, #4
 80013a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013a2:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <MX_GPIO_Init+0x118>)
 80013a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013ae:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <MX_GPIO_Init+0x118>)
 80013b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b2:	4a39      	ldr	r2, [pc, #228]	; (8001498 <MX_GPIO_Init+0x118>)
 80013b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ba:	4b37      	ldr	r3, [pc, #220]	; (8001498 <MX_GPIO_Init+0x118>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c6:	4b34      	ldr	r3, [pc, #208]	; (8001498 <MX_GPIO_Init+0x118>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	4a33      	ldr	r2, [pc, #204]	; (8001498 <MX_GPIO_Init+0x118>)
 80013cc:	f043 0301 	orr.w	r3, r3, #1
 80013d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013d2:	4b31      	ldr	r3, [pc, #196]	; (8001498 <MX_GPIO_Init+0x118>)
 80013d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d6:	f003 0301 	and.w	r3, r3, #1
 80013da:	60bb      	str	r3, [r7, #8]
 80013dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <MX_GPIO_Init+0x118>)
 80013e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e2:	4a2d      	ldr	r2, [pc, #180]	; (8001498 <MX_GPIO_Init+0x118>)
 80013e4:	f043 0302 	orr.w	r3, r3, #2
 80013e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ea:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <MX_GPIO_Init+0x118>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013f6:	4b28      	ldr	r3, [pc, #160]	; (8001498 <MX_GPIO_Init+0x118>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	4a27      	ldr	r2, [pc, #156]	; (8001498 <MX_GPIO_Init+0x118>)
 80013fc:	f043 0308 	orr.w	r3, r3, #8
 8001400:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001402:	4b25      	ldr	r3, [pc, #148]	; (8001498 <MX_GPIO_Init+0x118>)
 8001404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001406:	f003 0308 	and.w	r3, r3, #8
 800140a:	603b      	str	r3, [r7, #0]
 800140c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800140e:	2200      	movs	r2, #0
 8001410:	2120      	movs	r1, #32
 8001412:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001416:	f002 fc0b 	bl	8003c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 800141a:	2201      	movs	r2, #1
 800141c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001420:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001424:	f002 fc04 	bl	8003c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Disp_Green_Pin|Disp_White_Pin, GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 800142e:	481b      	ldr	r0, [pc, #108]	; (800149c <MX_GPIO_Init+0x11c>)
 8001430:	f002 fbfe 	bl	8003c30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001434:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001438:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800143a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800143e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001444:	f107 0314 	add.w	r3, r7, #20
 8001448:	4619      	mov	r1, r3
 800144a:	4814      	ldr	r0, [pc, #80]	; (800149c <MX_GPIO_Init+0x11c>)
 800144c:	f002 fa46 	bl	80038dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Disp_Reset_Pin;
 8001450:	f248 0320 	movw	r3, #32800	; 0x8020
 8001454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001456:	2301      	movs	r3, #1
 8001458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 0314 	add.w	r3, r7, #20
 8001466:	4619      	mov	r1, r3
 8001468:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800146c:	f002 fa36 	bl	80038dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Disp_Green_Pin|Disp_White_Pin;
 8001470:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	2301      	movs	r3, #1
 8001478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	4804      	ldr	r0, [pc, #16]	; (800149c <MX_GPIO_Init+0x11c>)
 800148a:	f002 fa27 	bl	80038dc <HAL_GPIO_Init>

}
 800148e:	bf00      	nop
 8001490:	3728      	adds	r7, #40	; 0x28
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	48000800 	.word	0x48000800

080014a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014a6:	f000 fd3f 	bl	8001f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014aa:	f000 f85f 	bl	800156c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ae:	f7ff ff67 	bl	8001380 <MX_GPIO_Init>
  MX_UART5_Init();
 80014b2:	f000 fc55 	bl	8001d60 <MX_UART5_Init>
  MX_SPI2_Init();
 80014b6:	f000 f973 	bl	80017a0 <MX_SPI2_Init>
  MX_RTC_Init();
 80014ba:	f000 f917 	bl	80016ec <MX_RTC_Init>
  MX_TIM3_Init();
 80014be:	f000 faff 	bl	8001ac0 <MX_TIM3_Init>
  MX_ADC1_Init();
 80014c2:	f7ff fc47 	bl	8000d54 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  /* init display */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80014c6:	2104      	movs	r1, #4
 80014c8:	4823      	ldr	r0, [pc, #140]	; (8001558 <main+0xb8>)
 80014ca:	f004 fec1 	bl	8006250 <HAL_TIM_PWM_Start>
  init_display();
 80014ce:	f7ff fe73 	bl	80011b8 <init_display>

  /* program variables */
  char buf[] = "00:00:00";
 80014d2:	4a22      	ldr	r2, [pc, #136]	; (800155c <main+0xbc>)
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80014da:	c303      	stmia	r3!, {r0, r1}
 80014dc:	701a      	strb	r2, [r3, #0]

  /* initialise time */
  set_backlight(WHITE, GPIO_PIN_SET);
 80014de:	2101      	movs	r1, #1
 80014e0:	2000      	movs	r0, #0
 80014e2:	f7ff fd71 	bl	8000fc8 <set_backlight>
  int h, m, s;
  display_write_row("Enter time", 10, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	210a      	movs	r1, #10
 80014ea:	481d      	ldr	r0, [pc, #116]	; (8001560 <main+0xc0>)
 80014ec:	f7ff fe3e 	bl	800116c <display_write_row>
  uart_get_clock_input(buf);
 80014f0:	f107 030c 	add.w	r3, r7, #12
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 fbf3 	bl	8001ce0 <uart_get_clock_input>
  sscanf(buf, "%02d:%02d:%02d", &h, &m, &s);
 80014fa:	1d39      	adds	r1, r7, #4
 80014fc:	f107 0208 	add.w	r2, r7, #8
 8001500:	f107 000c 	add.w	r0, r7, #12
 8001504:	463b      	mov	r3, r7
 8001506:	9300      	str	r3, [sp, #0]
 8001508:	460b      	mov	r3, r1
 800150a:	4916      	ldr	r1, [pc, #88]	; (8001564 <main+0xc4>)
 800150c:	f00a f8a4 	bl	800b658 <siscanf>
  start_clock(h, m, s);
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	b2db      	uxtb	r3, r3
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	b2d1      	uxtb	r1, r2
 8001518:	683a      	ldr	r2, [r7, #0]
 800151a:	b2d2      	uxtb	r2, r2
 800151c:	4618      	mov	r0, r3
 800151e:	f7ff fcf9 	bl	8000f14 <start_clock>
  clear_display();
 8001522:	f7ff fe39 	bl	8001198 <clear_display>
  set_backlight(WHITE, GPIO_PIN_RESET);
 8001526:	2100      	movs	r1, #0
 8001528:	2000      	movs	r0, #0
 800152a:	f7ff fd4d 	bl	8000fc8 <set_backlight>
  set_brightness(1.0);
 800152e:	ed9f 0b08 	vldr	d0, [pc, #32]	; 8001550 <main+0xb0>
 8001532:	f000 f8a9 	bl	8001688 <set_brightness>

  /* initialise potentiometer */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8001536:	217f      	movs	r1, #127	; 0x7f
 8001538:	480b      	ldr	r0, [pc, #44]	; (8001568 <main+0xc8>)
 800153a:	f001 ff5d 	bl	80033f8 <HAL_ADCEx_Calibration_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800153e:	f007 f95f 	bl	8008800 <osKernelInitialize>
  MX_FREERTOS_Init();
 8001542:	f7ff fe63 	bl	800120c <MX_FREERTOS_Init>
  /* Start scheduler */
  osKernelStart();
 8001546:	f007 f97f 	bl	8008848 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//  RTC_TimeTypeDef time;
//  uint32_t pot;
  while (1)
 800154a:	e7fe      	b.n	800154a <main+0xaa>
 800154c:	f3af 8000 	nop.w
 8001550:	00000000 	.word	0x00000000
 8001554:	3ff00000 	.word	0x3ff00000
 8001558:	20001f64 	.word	0x20001f64
 800155c:	0800c780 	.word	0x0800c780
 8001560:	0800c764 	.word	0x0800c764
 8001564:	0800c770 	.word	0x0800c770
 8001568:	20001e20 	.word	0x20001e20

0800156c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b096      	sub	sp, #88	; 0x58
 8001570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001572:	f107 0314 	add.w	r3, r7, #20
 8001576:	2244      	movs	r2, #68	; 0x44
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f009 ff70 	bl	800b460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001580:	463b      	mov	r3, r7
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]
 800158a:	60da      	str	r2, [r3, #12]
 800158c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800158e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001592:	f002 fb73 	bl	8003c7c <HAL_PWREx_ControlVoltageScaling>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d001      	beq.n	80015a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800159c:	f000 f85c 	bl	8001658 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80015a0:	230a      	movs	r3, #10
 80015a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015a8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015aa:	2310      	movs	r3, #16
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80015ae:	2301      	movs	r3, #1
 80015b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015b2:	2302      	movs	r3, #2
 80015b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015b6:	2302      	movs	r3, #2
 80015b8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015be:	230a      	movs	r3, #10
 80015c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015c2:	2307      	movs	r3, #7
 80015c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015c6:	2302      	movs	r3, #2
 80015c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015ca:	2302      	movs	r3, #2
 80015cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	4618      	mov	r0, r3
 80015d4:	f002 fba8 	bl	8003d28 <HAL_RCC_OscConfig>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 80015de:	f000 f83b 	bl	8001658 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015e2:	230f      	movs	r3, #15
 80015e4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e6:	2303      	movs	r3, #3
 80015e8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015f6:	463b      	mov	r3, r7
 80015f8:	2104      	movs	r1, #4
 80015fa:	4618      	mov	r0, r3
 80015fc:	f002 ff7a 	bl	80044f4 <HAL_RCC_ClockConfig>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001606:	f000 f827 	bl	8001658 <Error_Handler>
  }
}
 800160a:	bf00      	nop
 800160c:	3758      	adds	r7, #88	; 0x58
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <HAL_UART_TxCpltCallback>:
* @note This example shows a simple way to report end of IT Tx transfer, and
* you can add your own implementation.
* @retval None
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
    /* Set transmission flag: transfer complete*/
    uartReady = SET;
 800161c:	4b04      	ldr	r3, [pc, #16]	; (8001630 <HAL_UART_TxCpltCallback+0x1c>)
 800161e:	2201      	movs	r2, #1
 8001620:	701a      	strb	r2, [r3, #0]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	200000a0 	.word	0x200000a0

08001634 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a04      	ldr	r2, [pc, #16]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d101      	bne.n	800164a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001646:	f000 fc8f 	bl	8001f68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40012c00 	.word	0x40012c00

08001658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    handle_error();
 800165c:	f7ff fdca 	bl	80011f4 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <get_potentiometer_value>:

/**
 * @brief Read the potentiometer value
 * @return The value of the potentiometer
 */
uint32_t get_potentiometer_value () {
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8001668:	4806      	ldr	r0, [pc, #24]	; (8001684 <get_potentiometer_value+0x20>)
 800166a:	f001 f821 	bl	80026b0 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, 1);
 800166e:	2101      	movs	r1, #1
 8001670:	4804      	ldr	r0, [pc, #16]	; (8001684 <get_potentiometer_value+0x20>)
 8001672:	f001 f8d7 	bl	8002824 <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1);
 8001676:	4803      	ldr	r0, [pc, #12]	; (8001684 <get_potentiometer_value+0x20>)
 8001678:	f001 f9ac 	bl	80029d4 <HAL_ADC_GetValue>
 800167c:	4603      	mov	r3, r0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	20001e20 	.word	0x20001e20

08001688 <set_brightness>:

/**
 * @brief Change the PWM pulse width of the red background light
 * @param[in] brightness The brightness of the backlight from 0 to 1
 */
void set_brightness (double brightness) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	ed87 0b00 	vstr	d0, [r7]
    brightness *= brightness * brightness;  // brightness^3
 8001692:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001696:	e9d7 0100 	ldrd	r0, r1, [r7]
 800169a:	f7fe ffad 	bl	80005f8 <__aeabi_dmul>
 800169e:	4602      	mov	r2, r0
 80016a0:	460b      	mov	r3, r1
 80016a2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016a6:	f7fe ffa7 	bl	80005f8 <__aeabi_dmul>
 80016aa:	4602      	mov	r2, r0
 80016ac:	460b      	mov	r3, r1
 80016ae:	e9c7 2300 	strd	r2, r3, [r7]
    uint16_t pulse = (uint16_t) (brightness * (double)0xFFFF);
 80016b2:	a30c      	add	r3, pc, #48	; (adr r3, 80016e4 <set_brightness+0x5c>)
 80016b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016bc:	f7fe ff9c 	bl	80005f8 <__aeabi_dmul>
 80016c0:	4602      	mov	r2, r0
 80016c2:	460b      	mov	r3, r1
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f7ff f9a8 	bl	8000a1c <__aeabi_d2uiz>
 80016cc:	4603      	mov	r3, r0
 80016ce:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim3, CHANNEL, pulse);
 80016d0:	4b03      	ldr	r3, [pc, #12]	; (80016e0 <set_brightness+0x58>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	89fa      	ldrh	r2, [r7, #14]
 80016d6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20001f64 	.word	0x20001f64
 80016e4:	00000000 	.word	0x00000000
 80016e8:	40efffe0 	.word	0x40efffe0

080016ec <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016f0:	4b10      	ldr	r3, [pc, #64]	; (8001734 <MX_RTC_Init+0x48>)
 80016f2:	4a11      	ldr	r2, [pc, #68]	; (8001738 <MX_RTC_Init+0x4c>)
 80016f4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <MX_RTC_Init+0x48>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80016fc:	4b0d      	ldr	r3, [pc, #52]	; (8001734 <MX_RTC_Init+0x48>)
 80016fe:	227f      	movs	r2, #127	; 0x7f
 8001700:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <MX_RTC_Init+0x48>)
 8001704:	22ff      	movs	r2, #255	; 0xff
 8001706:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001708:	4b0a      	ldr	r3, [pc, #40]	; (8001734 <MX_RTC_Init+0x48>)
 800170a:	2200      	movs	r2, #0
 800170c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <MX_RTC_Init+0x48>)
 8001710:	2200      	movs	r2, #0
 8001712:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001714:	4b07      	ldr	r3, [pc, #28]	; (8001734 <MX_RTC_Init+0x48>)
 8001716:	2200      	movs	r2, #0
 8001718:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <MX_RTC_Init+0x48>)
 800171c:	2200      	movs	r2, #0
 800171e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001720:	4804      	ldr	r0, [pc, #16]	; (8001734 <MX_RTC_Init+0x48>)
 8001722:	f003 fddb 	bl	80052dc <HAL_RTC_Init>
 8001726:	4603      	mov	r3, r0
 8001728:	2b00      	cmp	r3, #0
 800172a:	d001      	beq.n	8001730 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800172c:	f7ff ff94 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001730:	bf00      	nop
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20001e90 	.word	0x20001e90
 8001738:	40002800 	.word	0x40002800

0800173c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b0a4      	sub	sp, #144	; 0x90
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001744:	f107 0308 	add.w	r3, r7, #8
 8001748:	2288      	movs	r2, #136	; 0x88
 800174a:	2100      	movs	r1, #0
 800174c:	4618      	mov	r0, r3
 800174e:	f009 fe87 	bl	800b460 <memset>
  if(rtcHandle->Instance==RTC)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a10      	ldr	r2, [pc, #64]	; (8001798 <HAL_RTC_MspInit+0x5c>)
 8001758:	4293      	cmp	r3, r2
 800175a:	d118      	bne.n	800178e <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800175c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001760:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001762:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001766:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	4618      	mov	r0, r3
 8001770:	f003 f8f8 	bl	8004964 <HAL_RCCEx_PeriphCLKConfig>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800177a:	f7ff ff6d 	bl	8001658 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <HAL_RTC_MspInit+0x60>)
 8001780:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001784:	4a05      	ldr	r2, [pc, #20]	; (800179c <HAL_RTC_MspInit+0x60>)
 8001786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800178a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800178e:	bf00      	nop
 8001790:	3790      	adds	r7, #144	; 0x90
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40002800 	.word	0x40002800
 800179c:	40021000 	.word	0x40021000

080017a0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80017a4:	4b1b      	ldr	r3, [pc, #108]	; (8001814 <MX_SPI2_Init+0x74>)
 80017a6:	4a1c      	ldr	r2, [pc, #112]	; (8001818 <MX_SPI2_Init+0x78>)
 80017a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80017aa:	4b1a      	ldr	r3, [pc, #104]	; (8001814 <MX_SPI2_Init+0x74>)
 80017ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80017b2:	4b18      	ldr	r3, [pc, #96]	; (8001814 <MX_SPI2_Init+0x74>)
 80017b4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80017b8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80017ba:	4b16      	ldr	r3, [pc, #88]	; (8001814 <MX_SPI2_Init+0x74>)
 80017bc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80017c0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80017c2:	4b14      	ldr	r3, [pc, #80]	; (8001814 <MX_SPI2_Init+0x74>)
 80017c4:	2202      	movs	r2, #2
 80017c6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <MX_SPI2_Init+0x74>)
 80017ca:	2201      	movs	r2, #1
 80017cc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80017ce:	4b11      	ldr	r3, [pc, #68]	; (8001814 <MX_SPI2_Init+0x74>)
 80017d0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80017d4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80017d6:	4b0f      	ldr	r3, [pc, #60]	; (8001814 <MX_SPI2_Init+0x74>)
 80017d8:	2230      	movs	r2, #48	; 0x30
 80017da:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80017dc:	4b0d      	ldr	r3, [pc, #52]	; (8001814 <MX_SPI2_Init+0x74>)
 80017de:	2280      	movs	r2, #128	; 0x80
 80017e0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80017e2:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <MX_SPI2_Init+0x74>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017e8:	4b0a      	ldr	r3, [pc, #40]	; (8001814 <MX_SPI2_Init+0x74>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80017ee:	4b09      	ldr	r3, [pc, #36]	; (8001814 <MX_SPI2_Init+0x74>)
 80017f0:	2207      	movs	r2, #7
 80017f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017f4:	4b07      	ldr	r3, [pc, #28]	; (8001814 <MX_SPI2_Init+0x74>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80017fa:	4b06      	ldr	r3, [pc, #24]	; (8001814 <MX_SPI2_Init+0x74>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001800:	4804      	ldr	r0, [pc, #16]	; (8001814 <MX_SPI2_Init+0x74>)
 8001802:	f004 f885 	bl	8005910 <HAL_SPI_Init>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 800180c:	f7ff ff24 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001810:	bf00      	nop
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20001eb4 	.word	0x20001eb4
 8001818:	40003800 	.word	0x40003800

0800181c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08a      	sub	sp, #40	; 0x28
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	2200      	movs	r2, #0
 800182a:	601a      	str	r2, [r3, #0]
 800182c:	605a      	str	r2, [r3, #4]
 800182e:	609a      	str	r2, [r3, #8]
 8001830:	60da      	str	r2, [r3, #12]
 8001832:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a25      	ldr	r2, [pc, #148]	; (80018d0 <HAL_SPI_MspInit+0xb4>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d144      	bne.n	80018c8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800183e:	4b25      	ldr	r3, [pc, #148]	; (80018d4 <HAL_SPI_MspInit+0xb8>)
 8001840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001842:	4a24      	ldr	r2, [pc, #144]	; (80018d4 <HAL_SPI_MspInit+0xb8>)
 8001844:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001848:	6593      	str	r3, [r2, #88]	; 0x58
 800184a:	4b22      	ldr	r3, [pc, #136]	; (80018d4 <HAL_SPI_MspInit+0xb8>)
 800184c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800184e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001856:	4b1f      	ldr	r3, [pc, #124]	; (80018d4 <HAL_SPI_MspInit+0xb8>)
 8001858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800185a:	4a1e      	ldr	r2, [pc, #120]	; (80018d4 <HAL_SPI_MspInit+0xb8>)
 800185c:	f043 0304 	orr.w	r3, r3, #4
 8001860:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001862:	4b1c      	ldr	r3, [pc, #112]	; (80018d4 <HAL_SPI_MspInit+0xb8>)
 8001864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001866:	f003 0304 	and.w	r3, r3, #4
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186e:	4b19      	ldr	r3, [pc, #100]	; (80018d4 <HAL_SPI_MspInit+0xb8>)
 8001870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001872:	4a18      	ldr	r2, [pc, #96]	; (80018d4 <HAL_SPI_MspInit+0xb8>)
 8001874:	f043 0302 	orr.w	r3, r3, #2
 8001878:	64d3      	str	r3, [r2, #76]	; 0x4c
 800187a:	4b16      	ldr	r3, [pc, #88]	; (80018d4 <HAL_SPI_MspInit+0xb8>)
 800187c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = Display_OUT_Pin;
 8001886:	2308      	movs	r3, #8
 8001888:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188a:	2302      	movs	r3, #2
 800188c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188e:	2300      	movs	r3, #0
 8001890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001892:	2303      	movs	r3, #3
 8001894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001896:	2305      	movs	r3, #5
 8001898:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Display_OUT_GPIO_Port, &GPIO_InitStruct);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	480d      	ldr	r0, [pc, #52]	; (80018d8 <HAL_SPI_MspInit+0xbc>)
 80018a2:	f002 f81b 	bl	80038dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Dispay_CLK_Pin|Display_CS_Pin;
 80018a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80018aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b4:	2303      	movs	r3, #3
 80018b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018b8:	2305      	movs	r3, #5
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018bc:	f107 0314 	add.w	r3, r7, #20
 80018c0:	4619      	mov	r1, r3
 80018c2:	4806      	ldr	r0, [pc, #24]	; (80018dc <HAL_SPI_MspInit+0xc0>)
 80018c4:	f002 f80a 	bl	80038dc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80018c8:	bf00      	nop
 80018ca:	3728      	adds	r7, #40	; 0x28
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}
 80018d0:	40003800 	.word	0x40003800
 80018d4:	40021000 	.word	0x40021000
 80018d8:	48000800 	.word	0x48000800
 80018dc:	48000400 	.word	0x48000400

080018e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_MspInit+0x4c>)
 80018e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018ea:	4a10      	ldr	r2, [pc, #64]	; (800192c <HAL_MspInit+0x4c>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6613      	str	r3, [r2, #96]	; 0x60
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_MspInit+0x4c>)
 80018f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	607b      	str	r3, [r7, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fe:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_MspInit+0x4c>)
 8001900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001902:	4a0a      	ldr	r2, [pc, #40]	; (800192c <HAL_MspInit+0x4c>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	6593      	str	r3, [r2, #88]	; 0x58
 800190a:	4b08      	ldr	r3, [pc, #32]	; (800192c <HAL_MspInit+0x4c>)
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001916:	2200      	movs	r2, #0
 8001918:	210f      	movs	r1, #15
 800191a:	f06f 0001 	mvn.w	r0, #1
 800191e:	f001 ff33 	bl	8003788 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001922:	bf00      	nop
 8001924:	3708      	adds	r7, #8
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000

08001930 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b08c      	sub	sp, #48	; 0x30
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001938:	2300      	movs	r3, #0
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800193c:	2300      	movs	r3, #0
 800193e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority ,0);
 8001940:	2200      	movs	r2, #0
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	2019      	movs	r0, #25
 8001946:	f001 ff1f 	bl	8003788 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800194a:	2019      	movs	r0, #25
 800194c:	f001 ff38 	bl	80037c0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001950:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <HAL_InitTick+0x9c>)
 8001952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001954:	4a1d      	ldr	r2, [pc, #116]	; (80019cc <HAL_InitTick+0x9c>)
 8001956:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800195a:	6613      	str	r3, [r2, #96]	; 0x60
 800195c:	4b1b      	ldr	r3, [pc, #108]	; (80019cc <HAL_InitTick+0x9c>)
 800195e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001960:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001968:	f107 0210 	add.w	r2, r7, #16
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4611      	mov	r1, r2
 8001972:	4618      	mov	r0, r3
 8001974:	f002 ff64 	bl	8004840 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001978:	f002 ff4c 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 800197c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800197e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001980:	4a13      	ldr	r2, [pc, #76]	; (80019d0 <HAL_InitTick+0xa0>)
 8001982:	fba2 2303 	umull	r2, r3, r2, r3
 8001986:	0c9b      	lsrs	r3, r3, #18
 8001988:	3b01      	subs	r3, #1
 800198a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 800198c:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <HAL_InitTick+0xa4>)
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <HAL_InitTick+0xa8>)
 8001990:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001992:	4b10      	ldr	r3, [pc, #64]	; (80019d4 <HAL_InitTick+0xa4>)
 8001994:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001998:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800199a:	4a0e      	ldr	r2, [pc, #56]	; (80019d4 <HAL_InitTick+0xa4>)
 800199c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800199e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <HAL_InitTick+0xa4>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <HAL_InitTick+0xa4>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80019ac:	4809      	ldr	r0, [pc, #36]	; (80019d4 <HAL_InitTick+0xa4>)
 80019ae:	f004 fb25 	bl	8005ffc <HAL_TIM_Base_Init>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d104      	bne.n	80019c2 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80019b8:	4806      	ldr	r0, [pc, #24]	; (80019d4 <HAL_InitTick+0xa4>)
 80019ba:	f004 fb77 	bl	80060ac <HAL_TIM_Base_Start_IT>
 80019be:	4603      	mov	r3, r0
 80019c0:	e000      	b.n	80019c4 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3730      	adds	r7, #48	; 0x30
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	40021000 	.word	0x40021000
 80019d0:	431bde83 	.word	0x431bde83
 80019d4:	20001f18 	.word	0x20001f18
 80019d8:	40012c00 	.word	0x40012c00

080019dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <NMI_Handler+0x4>

080019e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019e2:	b480      	push	{r7}
 80019e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019e6:	e7fe      	b.n	80019e6 <HardFault_Handler+0x4>

080019e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <MemManage_Handler+0x4>

080019ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019ee:	b480      	push	{r7}
 80019f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019f2:	e7fe      	b.n	80019f2 <BusFault_Handler+0x4>

080019f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019f8:	e7fe      	b.n	80019f8 <UsageFault_Handler+0x4>

080019fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019fa:	b480      	push	{r7}
 80019fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a0e:	f004 fd25 	bl	800645c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	20001f18 	.word	0x20001f18

08001a1c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <UART5_IRQHandler+0x10>)
 8001a22:	f005 fecb 	bl	80077bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	20001fb0 	.word	0x20001fb0

08001a30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a38:	4a14      	ldr	r2, [pc, #80]	; (8001a8c <_sbrk+0x5c>)
 8001a3a:	4b15      	ldr	r3, [pc, #84]	; (8001a90 <_sbrk+0x60>)
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a44:	4b13      	ldr	r3, [pc, #76]	; (8001a94 <_sbrk+0x64>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d102      	bne.n	8001a52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a4c:	4b11      	ldr	r3, [pc, #68]	; (8001a94 <_sbrk+0x64>)
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <_sbrk+0x68>)
 8001a50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a52:	4b10      	ldr	r3, [pc, #64]	; (8001a94 <_sbrk+0x64>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4413      	add	r3, r2
 8001a5a:	693a      	ldr	r2, [r7, #16]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d207      	bcs.n	8001a70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a60:	f009 fcc4 	bl	800b3ec <__errno>
 8001a64:	4603      	mov	r3, r0
 8001a66:	220c      	movs	r2, #12
 8001a68:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a6a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a6e:	e009      	b.n	8001a84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a70:	4b08      	ldr	r3, [pc, #32]	; (8001a94 <_sbrk+0x64>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a76:	4b07      	ldr	r3, [pc, #28]	; (8001a94 <_sbrk+0x64>)
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	4a05      	ldr	r2, [pc, #20]	; (8001a94 <_sbrk+0x64>)
 8001a80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a82:	68fb      	ldr	r3, [r7, #12]
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3718      	adds	r7, #24
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20018000 	.word	0x20018000
 8001a90:	00000400 	.word	0x00000400
 8001a94:	200000a4 	.word	0x200000a4
 8001a98:	20002088 	.word	0x20002088

08001a9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <SystemInit+0x20>)
 8001aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aa6:	4a05      	ldr	r2, [pc, #20]	; (8001abc <SystemInit+0x20>)
 8001aa8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001aac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ab0:	bf00      	nop
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08e      	sub	sp, #56	; 0x38
 8001ac4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ac6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]
 8001ad0:	609a      	str	r2, [r3, #8]
 8001ad2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ae0:	463b      	mov	r3, r7
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
 8001ae6:	605a      	str	r2, [r3, #4]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	60da      	str	r2, [r3, #12]
 8001aec:	611a      	str	r2, [r3, #16]
 8001aee:	615a      	str	r2, [r3, #20]
 8001af0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001af2:	4b2d      	ldr	r3, [pc, #180]	; (8001ba8 <MX_TIM3_Init+0xe8>)
 8001af4:	4a2d      	ldr	r2, [pc, #180]	; (8001bac <MX_TIM3_Init+0xec>)
 8001af6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001af8:	4b2b      	ldr	r3, [pc, #172]	; (8001ba8 <MX_TIM3_Init+0xe8>)
 8001afa:	2200      	movs	r2, #0
 8001afc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afe:	4b2a      	ldr	r3, [pc, #168]	; (8001ba8 <MX_TIM3_Init+0xe8>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b04:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <MX_TIM3_Init+0xe8>)
 8001b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b0a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b0c:	4b26      	ldr	r3, [pc, #152]	; (8001ba8 <MX_TIM3_Init+0xe8>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b12:	4b25      	ldr	r3, [pc, #148]	; (8001ba8 <MX_TIM3_Init+0xe8>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001b18:	4823      	ldr	r0, [pc, #140]	; (8001ba8 <MX_TIM3_Init+0xe8>)
 8001b1a:	f004 fa6f 	bl	8005ffc <HAL_TIM_Base_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001b24:	f7ff fd98 	bl	8001658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001b2e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b32:	4619      	mov	r1, r3
 8001b34:	481c      	ldr	r0, [pc, #112]	; (8001ba8 <MX_TIM3_Init+0xe8>)
 8001b36:	f004 fec5 	bl	80068c4 <HAL_TIM_ConfigClockSource>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001b40:	f7ff fd8a 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001b44:	4818      	ldr	r0, [pc, #96]	; (8001ba8 <MX_TIM3_Init+0xe8>)
 8001b46:	f004 fb21 	bl	800618c <HAL_TIM_PWM_Init>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001b50:	f7ff fd82 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b5c:	f107 031c 	add.w	r3, r7, #28
 8001b60:	4619      	mov	r1, r3
 8001b62:	4811      	ldr	r0, [pc, #68]	; (8001ba8 <MX_TIM3_Init+0xe8>)
 8001b64:	f005 fbd0 	bl	8007308 <HAL_TIMEx_MasterConfigSynchronization>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001b6e:	f7ff fd73 	bl	8001658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b72:	2360      	movs	r3, #96	; 0x60
 8001b74:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b76:	2300      	movs	r3, #0
 8001b78:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b82:	463b      	mov	r3, r7
 8001b84:	2204      	movs	r2, #4
 8001b86:	4619      	mov	r1, r3
 8001b88:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <MX_TIM3_Init+0xe8>)
 8001b8a:	f004 fd87 	bl	800669c <HAL_TIM_PWM_ConfigChannel>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001b94:	f7ff fd60 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b98:	4803      	ldr	r0, [pc, #12]	; (8001ba8 <MX_TIM3_Init+0xe8>)
 8001b9a:	f000 f829 	bl	8001bf0 <HAL_TIM_MspPostInit>

}
 8001b9e:	bf00      	nop
 8001ba0:	3738      	adds	r7, #56	; 0x38
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	20001f64 	.word	0x20001f64
 8001bac:	40000400 	.word	0x40000400

08001bb0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <HAL_TIM_Base_MspInit+0x38>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d10b      	bne.n	8001bda <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <HAL_TIM_Base_MspInit+0x3c>)
 8001bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc6:	4a09      	ldr	r2, [pc, #36]	; (8001bec <HAL_TIM_Base_MspInit+0x3c>)
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8001bce:	4b07      	ldr	r3, [pc, #28]	; (8001bec <HAL_TIM_Base_MspInit+0x3c>)
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	60fb      	str	r3, [r7, #12]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40000400 	.word	0x40000400
 8001bec:	40021000 	.word	0x40021000

08001bf0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf8:	f107 030c 	add.w	r3, r7, #12
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	609a      	str	r2, [r3, #8]
 8001c04:	60da      	str	r2, [r3, #12]
 8001c06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a11      	ldr	r2, [pc, #68]	; (8001c54 <HAL_TIM_MspPostInit+0x64>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d11b      	bne.n	8001c4a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <HAL_TIM_MspPostInit+0x68>)
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	4a10      	ldr	r2, [pc, #64]	; (8001c58 <HAL_TIM_MspPostInit+0x68>)
 8001c18:	f043 0304 	orr.w	r3, r3, #4
 8001c1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c1e:	4b0e      	ldr	r3, [pc, #56]	; (8001c58 <HAL_TIM_MspPostInit+0x68>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	f003 0304 	and.w	r3, r3, #4
 8001c26:	60bb      	str	r3, [r7, #8]
 8001c28:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Red_PWM_Pin;
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c36:	2300      	movs	r3, #0
 8001c38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Red_PWM_GPIO_Port, &GPIO_InitStruct);
 8001c3e:	f107 030c 	add.w	r3, r7, #12
 8001c42:	4619      	mov	r1, r3
 8001c44:	4805      	ldr	r0, [pc, #20]	; (8001c5c <HAL_TIM_MspPostInit+0x6c>)
 8001c46:	f001 fe49 	bl	80038dc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c4a:	bf00      	nop
 8001c4c:	3720      	adds	r7, #32
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	40000400 	.word	0x40000400
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	48000800 	.word	0x48000800

08001c60 <uart_send>:

/**
 * @brief Send a string over uart
 * @param[in] message The character array to send
 */
int uart_send (char *buffer, uint16_t length) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Transmit(&huart5, (uint8_t*)buffer, length, TIMEOUT);
 8001c6c:	887a      	ldrh	r2, [r7, #2]
 8001c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c72:	6879      	ldr	r1, [r7, #4]
 8001c74:	4803      	ldr	r0, [pc, #12]	; (8001c84 <uart_send+0x24>)
 8001c76:	f005 fc3b 	bl	80074f0 <HAL_UART_Transmit>
 8001c7a:	4603      	mov	r3, r0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3708      	adds	r7, #8
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20001fb0 	.word	0x20001fb0

08001c88 <uart_receive>:
/**
 * @brief Recieve a string over uart
 * @param[out] buffer The place to write the recieved string
 * @param[in] length The amount of data to read
 */
int uart_receive (char *buffer, uint16_t length) {
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Receive(&huart5, (uint8_t *)buffer, length, TIMEOUT);
 8001c94:	887a      	ldrh	r2, [r7, #2]
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9a:	6879      	ldr	r1, [r7, #4]
 8001c9c:	4803      	ldr	r0, [pc, #12]	; (8001cac <uart_receive+0x24>)
 8001c9e:	f005 fcbb 	bl	8007618 <HAL_UART_Receive>
 8001ca2:	4603      	mov	r3, r0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3708      	adds	r7, #8
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}
 8001cac:	20001fb0 	.word	0x20001fb0

08001cb0 <uart_println>:

/**
 * @brief send a string line to uart
 * @param[in] string The string to send
 */
int uart_println (char *string) {
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
    uart_send(string, strlen(string));
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f7fe fa89 	bl	80001d0 <strlen>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	b29b      	uxth	r3, r3
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7ff ffcb 	bl	8001c60 <uart_send>
    return uart_send("\r\n", 2);
 8001cca:	2102      	movs	r1, #2
 8001ccc:	4803      	ldr	r0, [pc, #12]	; (8001cdc <uart_println+0x2c>)
 8001cce:	f7ff ffc7 	bl	8001c60 <uart_send>
 8001cd2:	4603      	mov	r3, r0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	0800c78c 	.word	0x0800c78c

08001ce0 <uart_get_clock_input>:

/**
 * @brief Let user input the time
 * @param[out] buffer The buffer to write to
 */
void uart_get_clock_input (char *buffer) {
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
    uart_println("Please enter the time in HH:MM:SS format!");
 8001ce8:	481b      	ldr	r0, [pc, #108]	; (8001d58 <uart_get_clock_input+0x78>)
 8001cea:	f7ff ffe1 	bl	8001cb0 <uart_println>

    char c;
    uint8_t i = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	73fb      	strb	r3, [r7, #15]
    while (1) {
        uart_receive(&c, 1);
 8001cf2:	f107 030e 	add.w	r3, r7, #14
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff ffc5 	bl	8001c88 <uart_receive>
        /* as long as i < 8 and c != \r
         * If a char 127 (backspace) is written
         * move cursor back */

        /* check if done */
        if (i == 8) {
 8001cfe:	7bfb      	ldrb	r3, [r7, #15]
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d109      	bne.n	8001d18 <uart_get_clock_input+0x38>
            if (c == '\r') {
 8001d04:	7bbb      	ldrb	r3, [r7, #14]
 8001d06:	2b0d      	cmp	r3, #13
 8001d08:	d103      	bne.n	8001d12 <uart_get_clock_input+0x32>
                uart_println("");
 8001d0a:	4814      	ldr	r0, [pc, #80]	; (8001d5c <uart_get_clock_input+0x7c>)
 8001d0c:	f7ff ffd0 	bl	8001cb0 <uart_println>
                break;
 8001d10:	e01d      	b.n	8001d4e <uart_get_clock_input+0x6e>
            }
            else if (c != 127)
 8001d12:	7bbb      	ldrb	r3, [r7, #14]
 8001d14:	2b7f      	cmp	r3, #127	; 0x7f
 8001d16:	d118      	bne.n	8001d4a <uart_get_clock_input+0x6a>
                continue;
        }

        uart_send(&c, 1);
 8001d18:	f107 030e 	add.w	r3, r7, #14
 8001d1c:	2101      	movs	r1, #1
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ff9e 	bl	8001c60 <uart_send>

        /* write to buffer */
        if (c == 127) {
 8001d24:	7bbb      	ldrb	r3, [r7, #14]
 8001d26:	2b7f      	cmp	r3, #127	; 0x7f
 8001d28:	d106      	bne.n	8001d38 <uart_get_clock_input+0x58>
            if (i != 0)
 8001d2a:	7bfb      	ldrb	r3, [r7, #15]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d0e0      	beq.n	8001cf2 <uart_get_clock_input+0x12>
                --i;
 8001d30:	7bfb      	ldrb	r3, [r7, #15]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	73fb      	strb	r3, [r7, #15]
 8001d36:	e7dc      	b.n	8001cf2 <uart_get_clock_input+0x12>
        }
        else
            buffer[i++] = c;
 8001d38:	7bfb      	ldrb	r3, [r7, #15]
 8001d3a:	1c5a      	adds	r2, r3, #1
 8001d3c:	73fa      	strb	r2, [r7, #15]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	4413      	add	r3, r2
 8001d44:	7bba      	ldrb	r2, [r7, #14]
 8001d46:	701a      	strb	r2, [r3, #0]
 8001d48:	e7d3      	b.n	8001cf2 <uart_get_clock_input+0x12>
                continue;
 8001d4a:	bf00      	nop
        uart_receive(&c, 1);
 8001d4c:	e7d1      	b.n	8001cf2 <uart_get_clock_input+0x12>
    }
}
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	0800c794 	.word	0x0800c794
 8001d5c:	0800c7c0 	.word	0x0800c7c0

08001d60 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001d64:	4b14      	ldr	r3, [pc, #80]	; (8001db8 <MX_UART5_Init+0x58>)
 8001d66:	4a15      	ldr	r2, [pc, #84]	; (8001dbc <MX_UART5_Init+0x5c>)
 8001d68:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001d6a:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <MX_UART5_Init+0x58>)
 8001d6c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d70:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001d72:	4b11      	ldr	r3, [pc, #68]	; (8001db8 <MX_UART5_Init+0x58>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001d78:	4b0f      	ldr	r3, [pc, #60]	; (8001db8 <MX_UART5_Init+0x58>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001d7e:	4b0e      	ldr	r3, [pc, #56]	; (8001db8 <MX_UART5_Init+0x58>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001d84:	4b0c      	ldr	r3, [pc, #48]	; (8001db8 <MX_UART5_Init+0x58>)
 8001d86:	220c      	movs	r2, #12
 8001d88:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d8a:	4b0b      	ldr	r3, [pc, #44]	; (8001db8 <MX_UART5_Init+0x58>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <MX_UART5_Init+0x58>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d96:	4b08      	ldr	r3, [pc, #32]	; (8001db8 <MX_UART5_Init+0x58>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <MX_UART5_Init+0x58>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001da2:	4805      	ldr	r0, [pc, #20]	; (8001db8 <MX_UART5_Init+0x58>)
 8001da4:	f005 fb56 	bl	8007454 <HAL_UART_Init>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001dae:	f7ff fc53 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001db2:	bf00      	nop
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	20001fb0 	.word	0x20001fb0
 8001dbc:	40005000 	.word	0x40005000

08001dc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b0ac      	sub	sp, #176	; 0xb0
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dcc:	2200      	movs	r2, #0
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	609a      	str	r2, [r3, #8]
 8001dd4:	60da      	str	r2, [r3, #12]
 8001dd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001dd8:	f107 0314 	add.w	r3, r7, #20
 8001ddc:	2288      	movs	r2, #136	; 0x88
 8001dde:	2100      	movs	r1, #0
 8001de0:	4618      	mov	r0, r3
 8001de2:	f009 fb3d 	bl	800b460 <memset>
  if(uartHandle->Instance==UART5)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a36      	ldr	r2, [pc, #216]	; (8001ec4 <HAL_UART_MspInit+0x104>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d164      	bne.n	8001eba <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001df0:	2310      	movs	r3, #16
 8001df2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001df4:	2300      	movs	r3, #0
 8001df6:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f002 fdb1 	bl	8004964 <HAL_RCCEx_PeriphCLKConfig>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e08:	f7ff fc26 	bl	8001658 <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001e0c:	4b2e      	ldr	r3, [pc, #184]	; (8001ec8 <HAL_UART_MspInit+0x108>)
 8001e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e10:	4a2d      	ldr	r2, [pc, #180]	; (8001ec8 <HAL_UART_MspInit+0x108>)
 8001e12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e16:	6593      	str	r3, [r2, #88]	; 0x58
 8001e18:	4b2b      	ldr	r3, [pc, #172]	; (8001ec8 <HAL_UART_MspInit+0x108>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e20:	613b      	str	r3, [r7, #16]
 8001e22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e24:	4b28      	ldr	r3, [pc, #160]	; (8001ec8 <HAL_UART_MspInit+0x108>)
 8001e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e28:	4a27      	ldr	r2, [pc, #156]	; (8001ec8 <HAL_UART_MspInit+0x108>)
 8001e2a:	f043 0304 	orr.w	r3, r3, #4
 8001e2e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e30:	4b25      	ldr	r3, [pc, #148]	; (8001ec8 <HAL_UART_MspInit+0x108>)
 8001e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e3c:	4b22      	ldr	r3, [pc, #136]	; (8001ec8 <HAL_UART_MspInit+0x108>)
 8001e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e40:	4a21      	ldr	r2, [pc, #132]	; (8001ec8 <HAL_UART_MspInit+0x108>)
 8001e42:	f043 0308 	orr.w	r3, r3, #8
 8001e46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e48:	4b1f      	ldr	r3, [pc, #124]	; (8001ec8 <HAL_UART_MspInit+0x108>)
 8001e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	60bb      	str	r3, [r7, #8]
 8001e52:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e62:	2300      	movs	r3, #0
 8001e64:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001e6e:	2308      	movs	r3, #8
 8001e70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e74:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4814      	ldr	r0, [pc, #80]	; (8001ecc <HAL_UART_MspInit+0x10c>)
 8001e7c:	f001 fd2e 	bl	80038dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001e80:	2304      	movs	r3, #4
 8001e82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e86:	2302      	movs	r3, #2
 8001e88:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e92:	2303      	movs	r3, #3
 8001e94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001e98:	2308      	movs	r3, #8
 8001e9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e9e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	480a      	ldr	r0, [pc, #40]	; (8001ed0 <HAL_UART_MspInit+0x110>)
 8001ea6:	f001 fd19 	bl	80038dc <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2105      	movs	r1, #5
 8001eae:	2035      	movs	r0, #53	; 0x35
 8001eb0:	f001 fc6a 	bl	8003788 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001eb4:	2035      	movs	r0, #53	; 0x35
 8001eb6:	f001 fc83 	bl	80037c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001eba:	bf00      	nop
 8001ebc:	37b0      	adds	r7, #176	; 0xb0
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40005000 	.word	0x40005000
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	48000800 	.word	0x48000800
 8001ed0:	48000c00 	.word	0x48000c00

08001ed4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ed4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ed8:	f7ff fde0 	bl	8001a9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001edc:	480c      	ldr	r0, [pc, #48]	; (8001f10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ede:	490d      	ldr	r1, [pc, #52]	; (8001f14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ee0:	4a0d      	ldr	r2, [pc, #52]	; (8001f18 <LoopForever+0xe>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ee4:	e002      	b.n	8001eec <LoopCopyDataInit>

08001ee6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ee6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ee8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eea:	3304      	adds	r3, #4

08001eec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef0:	d3f9      	bcc.n	8001ee6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ef4:	4c0a      	ldr	r4, [pc, #40]	; (8001f20 <LoopForever+0x16>)
  movs r3, #0
 8001ef6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ef8:	e001      	b.n	8001efe <LoopFillZerobss>

08001efa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001efa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001efc:	3204      	adds	r2, #4

08001efe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001efe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f00:	d3fb      	bcc.n	8001efa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f02:	f009 fa79 	bl	800b3f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f06:	f7ff facb 	bl	80014a0 <main>

08001f0a <LoopForever>:

LoopForever:
    b LoopForever
 8001f0a:	e7fe      	b.n	8001f0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001f0c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f14:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8001f18:	0800ca5c 	.word	0x0800ca5c
  ldr r2, =_sbss
 8001f1c:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8001f20:	20002088 	.word	0x20002088

08001f24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f24:	e7fe      	b.n	8001f24 <ADC1_2_IRQHandler>
	...

08001f28 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f32:	4b0c      	ldr	r3, [pc, #48]	; (8001f64 <HAL_Init+0x3c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a0b      	ldr	r2, [pc, #44]	; (8001f64 <HAL_Init+0x3c>)
 8001f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f3e:	2003      	movs	r0, #3
 8001f40:	f001 fc17 	bl	8003772 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f44:	200f      	movs	r0, #15
 8001f46:	f7ff fcf3 	bl	8001930 <HAL_InitTick>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d002      	beq.n	8001f56 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	71fb      	strb	r3, [r7, #7]
 8001f54:	e001      	b.n	8001f5a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f56:	f7ff fcc3 	bl	80018e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f5a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	40022000 	.word	0x40022000

08001f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_IncTick+0x20>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_IncTick+0x24>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <HAL_IncTick+0x24>)
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000018 	.word	0x20000018
 8001f8c:	20002034 	.word	0x20002034

08001f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return uwTick;
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <HAL_GetTick+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20002034 	.word	0x20002034

08001fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff ffee 	bl	8001f90 <HAL_GetTick>
 8001fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d005      	beq.n	8001fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_Delay+0x44>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4413      	add	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fce:	bf00      	nop
 8001fd0:	f7ff ffde 	bl	8001f90 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d8f7      	bhi.n	8001fd0 <HAL_Delay+0x28>
  {
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000018 	.word	0x20000018

08001ff0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	431a      	orrs	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	609a      	str	r2, [r3, #8]
}
 800200a:	bf00      	nop
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr

08002016 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002016:	b480      	push	{r7}
 8002018:	b083      	sub	sp, #12
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
 800201e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	431a      	orrs	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	609a      	str	r2, [r3, #8]
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800204c:	4618      	mov	r0, r3
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	3360      	adds	r3, #96	; 0x60
 800206a:	461a      	mov	r2, r3
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	4413      	add	r3, r2
 8002072:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b08      	ldr	r3, [pc, #32]	; (800209c <LL_ADC_SetOffset+0x44>)
 800207a:	4013      	ands	r3, r2
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	430a      	orrs	r2, r1
 8002086:	4313      	orrs	r3, r2
 8002088:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002090:	bf00      	nop
 8002092:	371c      	adds	r7, #28
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	03fff000 	.word	0x03fff000

080020a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b085      	sub	sp, #20
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	3360      	adds	r3, #96	; 0x60
 80020ae:	461a      	mov	r2, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b087      	sub	sp, #28
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	3360      	adds	r3, #96	; 0x60
 80020dc:	461a      	mov	r2, r3
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	431a      	orrs	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80020f6:	bf00      	nop
 80020f8:	371c      	adds	r7, #28
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002102:	b480      	push	{r7}
 8002104:	b083      	sub	sp, #12
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	370c      	adds	r7, #12
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002128:	b480      	push	{r7}
 800212a:	b087      	sub	sp, #28
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	3330      	adds	r3, #48	; 0x30
 8002138:	461a      	mov	r2, r3
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	0a1b      	lsrs	r3, r3, #8
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	f003 030c 	and.w	r3, r3, #12
 8002144:	4413      	add	r3, r2
 8002146:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	f003 031f 	and.w	r3, r3, #31
 8002152:	211f      	movs	r1, #31
 8002154:	fa01 f303 	lsl.w	r3, r1, r3
 8002158:	43db      	mvns	r3, r3
 800215a:	401a      	ands	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	0e9b      	lsrs	r3, r3, #26
 8002160:	f003 011f 	and.w	r1, r3, #31
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	f003 031f 	and.w	r3, r3, #31
 800216a:	fa01 f303 	lsl.w	r3, r1, r3
 800216e:	431a      	orrs	r2, r3
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002174:	bf00      	nop
 8002176:	371c      	adds	r7, #28
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	60b9      	str	r1, [r7, #8]
 800218a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	3314      	adds	r3, #20
 8002190:	461a      	mov	r2, r3
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	0e5b      	lsrs	r3, r3, #25
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	f003 0304 	and.w	r3, r3, #4
 800219c:	4413      	add	r3, r2
 800219e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	0d1b      	lsrs	r3, r3, #20
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	2107      	movs	r1, #7
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	401a      	ands	r2, r3
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	0d1b      	lsrs	r3, r3, #20
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	431a      	orrs	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021ca:	bf00      	nop
 80021cc:	371c      	adds	r7, #28
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr
	...

080021d8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021d8:	b480      	push	{r7}
 80021da:	b085      	sub	sp, #20
 80021dc:	af00      	add	r7, sp, #0
 80021de:	60f8      	str	r0, [r7, #12]
 80021e0:	60b9      	str	r1, [r7, #8]
 80021e2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021f0:	43db      	mvns	r3, r3
 80021f2:	401a      	ands	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f003 0318 	and.w	r3, r3, #24
 80021fa:	4908      	ldr	r1, [pc, #32]	; (800221c <LL_ADC_SetChannelSingleDiff+0x44>)
 80021fc:	40d9      	lsrs	r1, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	400b      	ands	r3, r1
 8002202:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002206:	431a      	orrs	r2, r3
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800220e:	bf00      	nop
 8002210:	3714      	adds	r7, #20
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	0007ffff 	.word	0x0007ffff

08002220 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002220:	b480      	push	{r7}
 8002222:	b083      	sub	sp, #12
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	f003 031f 	and.w	r3, r3, #31
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002268:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	6093      	str	r3, [r2, #8]
}
 8002270:	bf00      	nop
 8002272:	370c      	adds	r7, #12
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr

0800227c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800228c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002290:	d101      	bne.n	8002296 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80022b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022c0:	bf00      	nop
 80022c2:	370c      	adds	r7, #12
 80022c4:	46bd      	mov	sp, r7
 80022c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ca:	4770      	bx	lr

080022cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022e0:	d101      	bne.n	80022e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002304:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002308:	f043 0201 	orr.w	r2, r3, #1
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689b      	ldr	r3, [r3, #8]
 8002328:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800232c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002330:	f043 0202 	orr.w	r2, r3, #2
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002338:	bf00      	nop
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002342:	4770      	bx	lr

08002344 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002344:	b480      	push	{r7}
 8002346:	b083      	sub	sp, #12
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <LL_ADC_IsEnabled+0x18>
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <LL_ADC_IsEnabled+0x1a>
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	2b02      	cmp	r3, #2
 800237c:	d101      	bne.n	8002382 <LL_ADC_IsDisableOngoing+0x18>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <LL_ADC_IsDisableOngoing+0x1a>
 8002382:	2300      	movs	r3, #0
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023a4:	f043 0204 	orr.w	r2, r3, #4
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	f003 0304 	and.w	r3, r3, #4
 80023c8:	2b04      	cmp	r3, #4
 80023ca:	d101      	bne.n	80023d0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023cc:	2301      	movs	r3, #1
 80023ce:	e000      	b.n	80023d2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b08      	cmp	r3, #8
 80023f0:	d101      	bne.n	80023f6 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023f2:	2301      	movs	r3, #1
 80023f4:	e000      	b.n	80023f8 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr

08002404 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b089      	sub	sp, #36	; 0x24
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800240c:	2300      	movs	r3, #0
 800240e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002410:	2300      	movs	r3, #0
 8002412:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e136      	b.n	800268c <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002428:	2b00      	cmp	r3, #0
 800242a:	d109      	bne.n	8002440 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	f7fe fd07 	bl	8000e40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff ff19 	bl	800227c <LL_ADC_IsDeepPowerDownEnabled>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d004      	beq.n	800245a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff feff 	bl	8002258 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7ff ff34 	bl	80022cc <LL_ADC_IsInternalRegulatorEnabled>
 8002464:	4603      	mov	r3, r0
 8002466:	2b00      	cmp	r3, #0
 8002468:	d115      	bne.n	8002496 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff ff18 	bl	80022a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002474:	4b87      	ldr	r3, [pc, #540]	; (8002694 <HAL_ADC_Init+0x290>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	099b      	lsrs	r3, r3, #6
 800247a:	4a87      	ldr	r2, [pc, #540]	; (8002698 <HAL_ADC_Init+0x294>)
 800247c:	fba2 2303 	umull	r2, r3, r2, r3
 8002480:	099b      	lsrs	r3, r3, #6
 8002482:	3301      	adds	r3, #1
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002488:	e002      	b.n	8002490 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	3b01      	subs	r3, #1
 800248e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f9      	bne.n	800248a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff ff16 	bl	80022cc <LL_ADC_IsInternalRegulatorEnabled>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d10d      	bne.n	80024c2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024aa:	f043 0210 	orr.w	r2, r3, #16
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024b6:	f043 0201 	orr.w	r2, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff ff76 	bl	80023b8 <LL_ADC_REG_IsConversionOngoing>
 80024cc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024d2:	f003 0310 	and.w	r3, r3, #16
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f040 80cf 	bne.w	800267a <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	f040 80cb 	bne.w	800267a <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024e8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024ec:	f043 0202 	orr.w	r2, r3, #2
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7ff ff23 	bl	8002344 <LL_ADC_IsEnabled>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d115      	bne.n	8002530 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002504:	4865      	ldr	r0, [pc, #404]	; (800269c <HAL_ADC_Init+0x298>)
 8002506:	f7ff ff1d 	bl	8002344 <LL_ADC_IsEnabled>
 800250a:	4604      	mov	r4, r0
 800250c:	4864      	ldr	r0, [pc, #400]	; (80026a0 <HAL_ADC_Init+0x29c>)
 800250e:	f7ff ff19 	bl	8002344 <LL_ADC_IsEnabled>
 8002512:	4603      	mov	r3, r0
 8002514:	431c      	orrs	r4, r3
 8002516:	4863      	ldr	r0, [pc, #396]	; (80026a4 <HAL_ADC_Init+0x2a0>)
 8002518:	f7ff ff14 	bl	8002344 <LL_ADC_IsEnabled>
 800251c:	4603      	mov	r3, r0
 800251e:	4323      	orrs	r3, r4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d105      	bne.n	8002530 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	4619      	mov	r1, r3
 800252a:	485f      	ldr	r0, [pc, #380]	; (80026a8 <HAL_ADC_Init+0x2a4>)
 800252c:	f7ff fd60 	bl	8001ff0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	7e5b      	ldrb	r3, [r3, #25]
 8002534:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800253a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002540:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002546:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800254e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002550:	4313      	orrs	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f893 3020 	ldrb.w	r3, [r3, #32]
 800255a:	2b01      	cmp	r3, #1
 800255c:	d106      	bne.n	800256c <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002562:	3b01      	subs	r3, #1
 8002564:	045b      	lsls	r3, r3, #17
 8002566:	69ba      	ldr	r2, [r7, #24]
 8002568:	4313      	orrs	r3, r2
 800256a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002570:	2b00      	cmp	r3, #0
 8002572:	d009      	beq.n	8002588 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002580:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68da      	ldr	r2, [r3, #12]
 800258e:	4b47      	ldr	r3, [pc, #284]	; (80026ac <HAL_ADC_Init+0x2a8>)
 8002590:	4013      	ands	r3, r2
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	6812      	ldr	r2, [r2, #0]
 8002596:	69b9      	ldr	r1, [r7, #24]
 8002598:	430b      	orrs	r3, r1
 800259a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff ff09 	bl	80023b8 <LL_ADC_REG_IsConversionOngoing>
 80025a6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ff16 	bl	80023de <LL_ADC_INJ_IsConversionOngoing>
 80025b2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d13d      	bne.n	8002636 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d13a      	bne.n	8002636 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025c4:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025cc:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025dc:	f023 0302 	bic.w	r3, r3, #2
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	6812      	ldr	r2, [r2, #0]
 80025e4:	69b9      	ldr	r1, [r7, #24]
 80025e6:	430b      	orrs	r3, r1
 80025e8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025f0:	2b01      	cmp	r3, #1
 80025f2:	d118      	bne.n	8002626 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80025fe:	f023 0304 	bic.w	r3, r3, #4
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800260a:	4311      	orrs	r1, r2
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002610:	4311      	orrs	r1, r2
 8002612:	687a      	ldr	r2, [r7, #4]
 8002614:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002616:	430a      	orrs	r2, r1
 8002618:	431a      	orrs	r2, r3
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	611a      	str	r2, [r3, #16]
 8002624:	e007      	b.n	8002636 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f022 0201 	bic.w	r2, r2, #1
 8002634:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d10c      	bne.n	8002658 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	f023 010f 	bic.w	r1, r3, #15
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	1e5a      	subs	r2, r3, #1
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	430a      	orrs	r2, r1
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
 8002656:	e007      	b.n	8002668 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 020f 	bic.w	r2, r2, #15
 8002666:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266c:	f023 0303 	bic.w	r3, r3, #3
 8002670:	f043 0201 	orr.w	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	655a      	str	r2, [r3, #84]	; 0x54
 8002678:	e007      	b.n	800268a <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800267e:	f043 0210 	orr.w	r2, r3, #16
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800268a:	7ffb      	ldrb	r3, [r7, #31]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3724      	adds	r7, #36	; 0x24
 8002690:	46bd      	mov	sp, r7
 8002692:	bd90      	pop	{r4, r7, pc}
 8002694:	20000010 	.word	0x20000010
 8002698:	053e2d63 	.word	0x053e2d63
 800269c:	50040000 	.word	0x50040000
 80026a0:	50040100 	.word	0x50040100
 80026a4:	50040200 	.word	0x50040200
 80026a8:	50040300 	.word	0x50040300
 80026ac:	fff0c007 	.word	0xfff0c007

080026b0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80026b8:	4857      	ldr	r0, [pc, #348]	; (8002818 <HAL_ADC_Start+0x168>)
 80026ba:	f7ff fdb1 	bl	8002220 <LL_ADC_GetMultimode>
 80026be:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff fe77 	bl	80023b8 <LL_ADC_REG_IsConversionOngoing>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f040 809c 	bne.w	800280a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80026d8:	2b01      	cmp	r3, #1
 80026da:	d101      	bne.n	80026e0 <HAL_ADC_Start+0x30>
 80026dc:	2302      	movs	r3, #2
 80026de:	e097      	b.n	8002810 <HAL_ADC_Start+0x160>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2201      	movs	r2, #1
 80026e4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	f000 fd71 	bl	80031d0 <ADC_Enable>
 80026ee:	4603      	mov	r3, r0
 80026f0:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	f040 8083 	bne.w	8002800 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002702:	f023 0301 	bic.w	r3, r3, #1
 8002706:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a42      	ldr	r2, [pc, #264]	; (800281c <HAL_ADC_Start+0x16c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d002      	beq.n	800271e <HAL_ADC_Start+0x6e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	e000      	b.n	8002720 <HAL_ADC_Start+0x70>
 800271e:	4b40      	ldr	r3, [pc, #256]	; (8002820 <HAL_ADC_Start+0x170>)
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	6812      	ldr	r2, [r2, #0]
 8002724:	4293      	cmp	r3, r2
 8002726:	d002      	beq.n	800272e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d105      	bne.n	800273a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002732:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800273e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002746:	d106      	bne.n	8002756 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274c:	f023 0206 	bic.w	r2, r3, #6
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	659a      	str	r2, [r3, #88]	; 0x58
 8002754:	e002      	b.n	800275c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	221c      	movs	r2, #28
 8002762:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a2a      	ldr	r2, [pc, #168]	; (800281c <HAL_ADC_Start+0x16c>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d002      	beq.n	800277c <HAL_ADC_Start+0xcc>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	e000      	b.n	800277e <HAL_ADC_Start+0xce>
 800277c:	4b28      	ldr	r3, [pc, #160]	; (8002820 <HAL_ADC_Start+0x170>)
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	6812      	ldr	r2, [r2, #0]
 8002782:	4293      	cmp	r3, r2
 8002784:	d008      	beq.n	8002798 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d005      	beq.n	8002798 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800278c:	693b      	ldr	r3, [r7, #16]
 800278e:	2b05      	cmp	r3, #5
 8002790:	d002      	beq.n	8002798 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	2b09      	cmp	r3, #9
 8002796:	d114      	bne.n	80027c2 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fde8 	bl	8002390 <LL_ADC_REG_StartConversion>
 80027c0:	e025      	b.n	800280e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a12      	ldr	r2, [pc, #72]	; (800281c <HAL_ADC_Start+0x16c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d002      	beq.n	80027de <HAL_ADC_Start+0x12e>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	e000      	b.n	80027e0 <HAL_ADC_Start+0x130>
 80027de:	4b10      	ldr	r3, [pc, #64]	; (8002820 <HAL_ADC_Start+0x170>)
 80027e0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d00f      	beq.n	800280e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027f6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	655a      	str	r2, [r3, #84]	; 0x54
 80027fe:	e006      	b.n	800280e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002808:	e001      	b.n	800280e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800280a:	2302      	movs	r3, #2
 800280c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800280e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002810:	4618      	mov	r0, r3
 8002812:	3718      	adds	r7, #24
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	50040300 	.word	0x50040300
 800281c:	50040100 	.word	0x50040100
 8002820:	50040000 	.word	0x50040000

08002824 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800282e:	4866      	ldr	r0, [pc, #408]	; (80029c8 <HAL_ADC_PollForConversion+0x1a4>)
 8002830:	f7ff fcf6 	bl	8002220 <LL_ADC_GetMultimode>
 8002834:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	695b      	ldr	r3, [r3, #20]
 800283a:	2b08      	cmp	r3, #8
 800283c:	d102      	bne.n	8002844 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800283e:	2308      	movs	r3, #8
 8002840:	61fb      	str	r3, [r7, #28]
 8002842:	e02a      	b.n	800289a <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d005      	beq.n	8002856 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	2b05      	cmp	r3, #5
 800284e:	d002      	beq.n	8002856 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	2b09      	cmp	r3, #9
 8002854:	d111      	bne.n	800287a <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d007      	beq.n	8002874 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002868:	f043 0220 	orr.w	r2, r3, #32
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0a4      	b.n	80029be <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002874:	2304      	movs	r3, #4
 8002876:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002878:	e00f      	b.n	800289a <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800287a:	4853      	ldr	r0, [pc, #332]	; (80029c8 <HAL_ADC_PollForConversion+0x1a4>)
 800287c:	f7ff fcde 	bl	800223c <LL_ADC_GetMultiDMATransfer>
 8002880:	4603      	mov	r3, r0
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800288a:	f043 0220 	orr.w	r2, r3, #32
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e093      	b.n	80029be <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002896:	2304      	movs	r3, #4
 8002898:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800289a:	f7ff fb79 	bl	8001f90 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028a0:	e021      	b.n	80028e6 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028a8:	d01d      	beq.n	80028e6 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80028aa:	f7ff fb71 	bl	8001f90 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	683a      	ldr	r2, [r7, #0]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d302      	bcc.n	80028c0 <HAL_ADC_PollForConversion+0x9c>
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d112      	bne.n	80028e6 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d10b      	bne.n	80028e6 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d2:	f043 0204 	orr.w	r2, r3, #4
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e06b      	b.n	80029be <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d0d6      	beq.n	80028a2 <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fbfc 	bl	8002102 <LL_ADC_REG_IsTriggerSourceSWStart>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d01c      	beq.n	800294a <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	7e5b      	ldrb	r3, [r3, #25]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d118      	bne.n	800294a <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b08      	cmp	r3, #8
 8002924:	d111      	bne.n	800294a <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002936:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d105      	bne.n	800294a <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002942:	f043 0201 	orr.w	r2, r3, #1
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a1f      	ldr	r2, [pc, #124]	; (80029cc <HAL_ADC_PollForConversion+0x1a8>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d002      	beq.n	800295a <HAL_ADC_PollForConversion+0x136>
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	e000      	b.n	800295c <HAL_ADC_PollForConversion+0x138>
 800295a:	4b1d      	ldr	r3, [pc, #116]	; (80029d0 <HAL_ADC_PollForConversion+0x1ac>)
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	6812      	ldr	r2, [r2, #0]
 8002960:	4293      	cmp	r3, r2
 8002962:	d008      	beq.n	8002976 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d005      	beq.n	8002976 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b05      	cmp	r3, #5
 800296e:	d002      	beq.n	8002976 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	2b09      	cmp	r3, #9
 8002974:	d104      	bne.n	8002980 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	61bb      	str	r3, [r7, #24]
 800297e:	e00c      	b.n	800299a <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a11      	ldr	r2, [pc, #68]	; (80029cc <HAL_ADC_PollForConversion+0x1a8>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d002      	beq.n	8002990 <HAL_ADC_PollForConversion+0x16c>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	e000      	b.n	8002992 <HAL_ADC_PollForConversion+0x16e>
 8002990:	4b0f      	ldr	r3, [pc, #60]	; (80029d0 <HAL_ADC_PollForConversion+0x1ac>)
 8002992:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	2b08      	cmp	r3, #8
 800299e:	d104      	bne.n	80029aa <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2208      	movs	r2, #8
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	e008      	b.n	80029bc <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d103      	bne.n	80029bc <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	220c      	movs	r2, #12
 80029ba:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3720      	adds	r7, #32
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	50040300 	.word	0x50040300
 80029cc:	50040100 	.word	0x50040100
 80029d0:	50040000 	.word	0x50040000

080029d4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	370c      	adds	r7, #12
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr
	...

080029f0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b0b6      	sub	sp, #216	; 0xd8
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029fa:	2300      	movs	r3, #0
 80029fc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_ADC_ConfigChannel+0x22>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e3c7      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x7b2>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7ff fcca 	bl	80023b8 <LL_ADC_REG_IsConversionOngoing>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f040 83a8 	bne.w	800317c <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	2b05      	cmp	r3, #5
 8002a32:	d824      	bhi.n	8002a7e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	3b02      	subs	r3, #2
 8002a3a:	2b03      	cmp	r3, #3
 8002a3c:	d81b      	bhi.n	8002a76 <HAL_ADC_ConfigChannel+0x86>
 8002a3e:	a201      	add	r2, pc, #4	; (adr r2, 8002a44 <HAL_ADC_ConfigChannel+0x54>)
 8002a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a44:	08002a55 	.word	0x08002a55
 8002a48:	08002a5d 	.word	0x08002a5d
 8002a4c:	08002a65 	.word	0x08002a65
 8002a50:	08002a6d 	.word	0x08002a6d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	220c      	movs	r2, #12
 8002a58:	605a      	str	r2, [r3, #4]
          break;
 8002a5a:	e011      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2212      	movs	r2, #18
 8002a60:	605a      	str	r2, [r3, #4]
          break;
 8002a62:	e00d      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	2218      	movs	r2, #24
 8002a68:	605a      	str	r2, [r3, #4]
          break;
 8002a6a:	e009      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a72:	605a      	str	r2, [r3, #4]
          break;
 8002a74:	e004      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	2206      	movs	r2, #6
 8002a7a:	605a      	str	r2, [r3, #4]
          break;
 8002a7c:	e000      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002a7e:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	6859      	ldr	r1, [r3, #4]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f7ff fb4b 	bl	8002128 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fc8e 	bl	80023b8 <LL_ADC_REG_IsConversionOngoing>
 8002a9c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff fc9a 	bl	80023de <LL_ADC_INJ_IsConversionOngoing>
 8002aaa:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002aae:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	f040 81a6 	bne.w	8002e04 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002ab8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	f040 81a1 	bne.w	8002e04 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	6819      	ldr	r1, [r3, #0]
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	461a      	mov	r2, r3
 8002ad0:	f7ff fb56 	bl	8002180 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002ad4:	683b      	ldr	r3, [r7, #0]
 8002ad6:	695a      	ldr	r2, [r3, #20]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	08db      	lsrs	r3, r3, #3
 8002ae0:	f003 0303 	and.w	r3, r3, #3
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	2b04      	cmp	r3, #4
 8002af4:	d00a      	beq.n	8002b0c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6818      	ldr	r0, [r3, #0]
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	6919      	ldr	r1, [r3, #16]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b06:	f7ff faa7 	bl	8002058 <LL_ADC_SetOffset>
 8002b0a:	e17b      	b.n	8002e04 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2100      	movs	r1, #0
 8002b12:	4618      	mov	r0, r3
 8002b14:	f7ff fac4 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10a      	bne.n	8002b38 <HAL_ADC_ConfigChannel+0x148>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2100      	movs	r1, #0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff fab9 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	0e9b      	lsrs	r3, r3, #26
 8002b32:	f003 021f 	and.w	r2, r3, #31
 8002b36:	e01e      	b.n	8002b76 <HAL_ADC_ConfigChannel+0x186>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2100      	movs	r1, #0
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff faae 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b4a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b4e:	fa93 f3a3 	rbit	r3, r3
 8002b52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b56:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b5a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d101      	bne.n	8002b6a <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002b66:	2320      	movs	r3, #32
 8002b68:	e004      	b.n	8002b74 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002b6a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b6e:	fab3 f383 	clz	r3, r3
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d105      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x19e>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	0e9b      	lsrs	r3, r3, #26
 8002b88:	f003 031f 	and.w	r3, r3, #31
 8002b8c:	e018      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x1d0>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002ba2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ba6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002baa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002bb2:	2320      	movs	r3, #32
 8002bb4:	e004      	b.n	8002bc0 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002bb6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002bba:	fab3 f383 	clz	r3, r3
 8002bbe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d106      	bne.n	8002bd2 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	2100      	movs	r1, #0
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7ff fa7d 	bl	80020cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	2101      	movs	r1, #1
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f7ff fa61 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002bde:	4603      	mov	r3, r0
 8002be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d10a      	bne.n	8002bfe <HAL_ADC_ConfigChannel+0x20e>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2101      	movs	r1, #1
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f7ff fa56 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	0e9b      	lsrs	r3, r3, #26
 8002bf8:	f003 021f 	and.w	r2, r3, #31
 8002bfc:	e01e      	b.n	8002c3c <HAL_ADC_ConfigChannel+0x24c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	2101      	movs	r1, #1
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fa4b 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c14:	fa93 f3a3 	rbit	r3, r3
 8002c18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002c1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002c24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d101      	bne.n	8002c30 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002c2c:	2320      	movs	r3, #32
 8002c2e:	e004      	b.n	8002c3a <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002c30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002c34:	fab3 f383 	clz	r3, r3
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d105      	bne.n	8002c54 <HAL_ADC_ConfigChannel+0x264>
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	0e9b      	lsrs	r3, r3, #26
 8002c4e:	f003 031f 	and.w	r3, r3, #31
 8002c52:	e018      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x296>
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c5c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c60:	fa93 f3a3 	rbit	r3, r3
 8002c64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002c68:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c6c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002c70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002c78:	2320      	movs	r3, #32
 8002c7a:	e004      	b.n	8002c86 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002c7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c80:	fab3 f383 	clz	r3, r3
 8002c84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d106      	bne.n	8002c98 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2101      	movs	r1, #1
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7ff fa1a 	bl	80020cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2102      	movs	r1, #2
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f7ff f9fe 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10a      	bne.n	8002cc4 <HAL_ADC_ConfigChannel+0x2d4>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	2102      	movs	r1, #2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff f9f3 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	0e9b      	lsrs	r3, r3, #26
 8002cbe:	f003 021f 	and.w	r2, r3, #31
 8002cc2:	e01e      	b.n	8002d02 <HAL_ADC_ConfigChannel+0x312>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2102      	movs	r1, #2
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff f9e8 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cd6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002cda:	fa93 f3a3 	rbit	r3, r3
 8002cde:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002ce2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002cea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002cf2:	2320      	movs	r3, #32
 8002cf4:	e004      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002cf6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d105      	bne.n	8002d1a <HAL_ADC_ConfigChannel+0x32a>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	0e9b      	lsrs	r3, r3, #26
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	e016      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x358>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002d26:	fa93 f3a3 	rbit	r3, r3
 8002d2a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002d2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d2e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002d32:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002d3a:	2320      	movs	r3, #32
 8002d3c:	e004      	b.n	8002d48 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002d3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d42:	fab3 f383 	clz	r3, r3
 8002d46:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d106      	bne.n	8002d5a <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2200      	movs	r2, #0
 8002d52:	2102      	movs	r1, #2
 8002d54:	4618      	mov	r0, r3
 8002d56:	f7ff f9b9 	bl	80020cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2103      	movs	r1, #3
 8002d60:	4618      	mov	r0, r3
 8002d62:	f7ff f99d 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002d66:	4603      	mov	r3, r0
 8002d68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10a      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x396>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2103      	movs	r1, #3
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7ff f992 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	0e9b      	lsrs	r3, r3, #26
 8002d80:	f003 021f 	and.w	r2, r3, #31
 8002d84:	e017      	b.n	8002db6 <HAL_ADC_ConfigChannel+0x3c6>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2103      	movs	r1, #3
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff f987 	bl	80020a0 <LL_ADC_GetOffsetChannel>
 8002d92:	4603      	mov	r3, r0
 8002d94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d98:	fa93 f3a3 	rbit	r3, r3
 8002d9c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002d9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002da0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002da2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8002da8:	2320      	movs	r3, #32
 8002daa:	e003      	b.n	8002db4 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8002dac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dae:	fab3 f383 	clz	r3, r3
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d105      	bne.n	8002dce <HAL_ADC_ConfigChannel+0x3de>
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	0e9b      	lsrs	r3, r3, #26
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	e011      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x402>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dd6:	fa93 f3a3 	rbit	r3, r3
 8002dda:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dde:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d101      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8002de6:	2320      	movs	r3, #32
 8002de8:	e003      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8002dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002dec:	fab3 f383 	clz	r3, r3
 8002df0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d106      	bne.n	8002e04 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	2103      	movs	r1, #3
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff f964 	bl	80020cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4618      	mov	r0, r3
 8002e0a:	f7ff fa9b 	bl	8002344 <LL_ADC_IsEnabled>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	f040 813f 	bne.w	8003094 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	6819      	ldr	r1, [r3, #0]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68db      	ldr	r3, [r3, #12]
 8002e22:	461a      	mov	r2, r3
 8002e24:	f7ff f9d8 	bl	80021d8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	68db      	ldr	r3, [r3, #12]
 8002e2c:	4a8e      	ldr	r2, [pc, #568]	; (8003068 <HAL_ADC_ConfigChannel+0x678>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	f040 8130 	bne.w	8003094 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d10b      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x46c>
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	0e9b      	lsrs	r3, r3, #26
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	f003 031f 	and.w	r3, r3, #31
 8002e50:	2b09      	cmp	r3, #9
 8002e52:	bf94      	ite	ls
 8002e54:	2301      	movls	r3, #1
 8002e56:	2300      	movhi	r3, #0
 8002e58:	b2db      	uxtb	r3, r3
 8002e5a:	e019      	b.n	8002e90 <HAL_ADC_ConfigChannel+0x4a0>
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e64:	fa93 f3a3 	rbit	r3, r3
 8002e68:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e6c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002e6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d101      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8002e74:	2320      	movs	r3, #32
 8002e76:	e003      	b.n	8002e80 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8002e78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e7a:	fab3 f383 	clz	r3, r3
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	3301      	adds	r3, #1
 8002e82:	f003 031f 	and.w	r3, r3, #31
 8002e86:	2b09      	cmp	r3, #9
 8002e88:	bf94      	ite	ls
 8002e8a:	2301      	movls	r3, #1
 8002e8c:	2300      	movhi	r3, #0
 8002e8e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d079      	beq.n	8002f88 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d107      	bne.n	8002eb0 <HAL_ADC_ConfigChannel+0x4c0>
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	0e9b      	lsrs	r3, r3, #26
 8002ea6:	3301      	adds	r3, #1
 8002ea8:	069b      	lsls	r3, r3, #26
 8002eaa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002eae:	e015      	b.n	8002edc <HAL_ADC_ConfigChannel+0x4ec>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb8:	fa93 f3a3 	rbit	r3, r3
 8002ebc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec0:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002ec2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8002ec8:	2320      	movs	r3, #32
 8002eca:	e003      	b.n	8002ed4 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8002ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	3301      	adds	r3, #1
 8002ed6:	069b      	lsls	r3, r3, #26
 8002ed8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d109      	bne.n	8002efc <HAL_ADC_ConfigChannel+0x50c>
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	0e9b      	lsrs	r3, r3, #26
 8002eee:	3301      	adds	r3, #1
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8002efa:	e017      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x53c>
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f04:	fa93 f3a3 	rbit	r3, r3
 8002f08:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002f0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f0c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8002f14:	2320      	movs	r3, #32
 8002f16:	e003      	b.n	8002f20 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8002f18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f1a:	fab3 f383 	clz	r3, r3
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	3301      	adds	r3, #1
 8002f22:	f003 031f 	and.w	r3, r3, #31
 8002f26:	2101      	movs	r1, #1
 8002f28:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2c:	ea42 0103 	orr.w	r1, r2, r3
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d10a      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x562>
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	0e9b      	lsrs	r3, r3, #26
 8002f42:	3301      	adds	r3, #1
 8002f44:	f003 021f 	and.w	r2, r3, #31
 8002f48:	4613      	mov	r3, r2
 8002f4a:	005b      	lsls	r3, r3, #1
 8002f4c:	4413      	add	r3, r2
 8002f4e:	051b      	lsls	r3, r3, #20
 8002f50:	e018      	b.n	8002f84 <HAL_ADC_ConfigChannel+0x594>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f5a:	fa93 f3a3 	rbit	r3, r3
 8002f5e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f62:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d101      	bne.n	8002f6e <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8002f6a:	2320      	movs	r3, #32
 8002f6c:	e003      	b.n	8002f76 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8002f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f70:	fab3 f383 	clz	r3, r3
 8002f74:	b2db      	uxtb	r3, r3
 8002f76:	3301      	adds	r3, #1
 8002f78:	f003 021f 	and.w	r2, r3, #31
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	005b      	lsls	r3, r3, #1
 8002f80:	4413      	add	r3, r2
 8002f82:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f84:	430b      	orrs	r3, r1
 8002f86:	e080      	b.n	800308a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d107      	bne.n	8002fa4 <HAL_ADC_ConfigChannel+0x5b4>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	0e9b      	lsrs	r3, r3, #26
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	069b      	lsls	r3, r3, #26
 8002f9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fa2:	e015      	b.n	8002fd0 <HAL_ADC_ConfigChannel+0x5e0>
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fac:	fa93 f3a3 	rbit	r3, r3
 8002fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d101      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8002fbc:	2320      	movs	r3, #32
 8002fbe:	e003      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8002fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fc2:	fab3 f383 	clz	r3, r3
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	3301      	adds	r3, #1
 8002fca:	069b      	lsls	r3, r3, #26
 8002fcc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d109      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x600>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	0e9b      	lsrs	r3, r3, #26
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	2101      	movs	r1, #1
 8002fea:	fa01 f303 	lsl.w	r3, r1, r3
 8002fee:	e017      	b.n	8003020 <HAL_ADC_ConfigChannel+0x630>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff6:	6a3b      	ldr	r3, [r7, #32]
 8002ff8:	fa93 f3a3 	rbit	r3, r3
 8002ffc:	61fb      	str	r3, [r7, #28]
  return result;
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003004:	2b00      	cmp	r3, #0
 8003006:	d101      	bne.n	800300c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003008:	2320      	movs	r3, #32
 800300a:	e003      	b.n	8003014 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	fab3 f383 	clz	r3, r3
 8003012:	b2db      	uxtb	r3, r3
 8003014:	3301      	adds	r3, #1
 8003016:	f003 031f 	and.w	r3, r3, #31
 800301a:	2101      	movs	r1, #1
 800301c:	fa01 f303 	lsl.w	r3, r1, r3
 8003020:	ea42 0103 	orr.w	r1, r2, r3
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302c:	2b00      	cmp	r3, #0
 800302e:	d10d      	bne.n	800304c <HAL_ADC_ConfigChannel+0x65c>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	0e9b      	lsrs	r3, r3, #26
 8003036:	3301      	adds	r3, #1
 8003038:	f003 021f 	and.w	r2, r3, #31
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	3b1e      	subs	r3, #30
 8003044:	051b      	lsls	r3, r3, #20
 8003046:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800304a:	e01d      	b.n	8003088 <HAL_ADC_ConfigChannel+0x698>
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	fa93 f3a3 	rbit	r3, r3
 8003058:	613b      	str	r3, [r7, #16]
  return result;
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d103      	bne.n	800306c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003064:	2320      	movs	r3, #32
 8003066:	e005      	b.n	8003074 <HAL_ADC_ConfigChannel+0x684>
 8003068:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	fab3 f383 	clz	r3, r3
 8003072:	b2db      	uxtb	r3, r3
 8003074:	3301      	adds	r3, #1
 8003076:	f003 021f 	and.w	r2, r3, #31
 800307a:	4613      	mov	r3, r2
 800307c:	005b      	lsls	r3, r3, #1
 800307e:	4413      	add	r3, r2
 8003080:	3b1e      	subs	r3, #30
 8003082:	051b      	lsls	r3, r3, #20
 8003084:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003088:	430b      	orrs	r3, r1
 800308a:	683a      	ldr	r2, [r7, #0]
 800308c:	6892      	ldr	r2, [r2, #8]
 800308e:	4619      	mov	r1, r3
 8003090:	f7ff f876 	bl	8002180 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	4b44      	ldr	r3, [pc, #272]	; (80031ac <HAL_ADC_ConfigChannel+0x7bc>)
 800309a:	4013      	ands	r3, r2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d07a      	beq.n	8003196 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80030a0:	4843      	ldr	r0, [pc, #268]	; (80031b0 <HAL_ADC_ConfigChannel+0x7c0>)
 80030a2:	f7fe ffcb 	bl	800203c <LL_ADC_GetCommonPathInternalCh>
 80030a6:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a41      	ldr	r2, [pc, #260]	; (80031b4 <HAL_ADC_ConfigChannel+0x7c4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d12c      	bne.n	800310e <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80030b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d126      	bne.n	800310e <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a3c      	ldr	r2, [pc, #240]	; (80031b8 <HAL_ADC_ConfigChannel+0x7c8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d004      	beq.n	80030d4 <HAL_ADC_ConfigChannel+0x6e4>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a3b      	ldr	r2, [pc, #236]	; (80031bc <HAL_ADC_ConfigChannel+0x7cc>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d15d      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030dc:	4619      	mov	r1, r3
 80030de:	4834      	ldr	r0, [pc, #208]	; (80031b0 <HAL_ADC_ConfigChannel+0x7c0>)
 80030e0:	f7fe ff99 	bl	8002016 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030e4:	4b36      	ldr	r3, [pc, #216]	; (80031c0 <HAL_ADC_ConfigChannel+0x7d0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	099b      	lsrs	r3, r3, #6
 80030ea:	4a36      	ldr	r2, [pc, #216]	; (80031c4 <HAL_ADC_ConfigChannel+0x7d4>)
 80030ec:	fba2 2303 	umull	r2, r3, r2, r3
 80030f0:	099b      	lsrs	r3, r3, #6
 80030f2:	1c5a      	adds	r2, r3, #1
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030fe:	e002      	b.n	8003106 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	3b01      	subs	r3, #1
 8003104:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1f9      	bne.n	8003100 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800310c:	e040      	b.n	8003190 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a2d      	ldr	r2, [pc, #180]	; (80031c8 <HAL_ADC_ConfigChannel+0x7d8>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d118      	bne.n	800314a <HAL_ADC_ConfigChannel+0x75a>
 8003118:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800311c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d112      	bne.n	800314a <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a23      	ldr	r2, [pc, #140]	; (80031b8 <HAL_ADC_ConfigChannel+0x7c8>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d004      	beq.n	8003138 <HAL_ADC_ConfigChannel+0x748>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a22      	ldr	r2, [pc, #136]	; (80031bc <HAL_ADC_ConfigChannel+0x7cc>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d12d      	bne.n	8003194 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003138:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800313c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003140:	4619      	mov	r1, r3
 8003142:	481b      	ldr	r0, [pc, #108]	; (80031b0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003144:	f7fe ff67 	bl	8002016 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003148:	e024      	b.n	8003194 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800314a:	683b      	ldr	r3, [r7, #0]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a1f      	ldr	r2, [pc, #124]	; (80031cc <HAL_ADC_ConfigChannel+0x7dc>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d120      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003154:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003158:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d11a      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a14      	ldr	r2, [pc, #80]	; (80031b8 <HAL_ADC_ConfigChannel+0x7c8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d115      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800316a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800316e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003172:	4619      	mov	r1, r3
 8003174:	480e      	ldr	r0, [pc, #56]	; (80031b0 <HAL_ADC_ConfigChannel+0x7c0>)
 8003176:	f7fe ff4e 	bl	8002016 <LL_ADC_SetCommonPathInternalCh>
 800317a:	e00c      	b.n	8003196 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003180:	f043 0220 	orr.w	r2, r3, #32
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800318e:	e002      	b.n	8003196 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003190:	bf00      	nop
 8003192:	e000      	b.n	8003196 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003194:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800319e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	37d8      	adds	r7, #216	; 0xd8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
 80031aa:	bf00      	nop
 80031ac:	80080000 	.word	0x80080000
 80031b0:	50040300 	.word	0x50040300
 80031b4:	c7520000 	.word	0xc7520000
 80031b8:	50040000 	.word	0x50040000
 80031bc:	50040200 	.word	0x50040200
 80031c0:	20000010 	.word	0x20000010
 80031c4:	053e2d63 	.word	0x053e2d63
 80031c8:	cb840000 	.word	0xcb840000
 80031cc:	80000001 	.word	0x80000001

080031d0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b084      	sub	sp, #16
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff f8b1 	bl	8002344 <LL_ADC_IsEnabled>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d14d      	bne.n	8003284 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	4b28      	ldr	r3, [pc, #160]	; (8003290 <ADC_Enable+0xc0>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00d      	beq.n	8003212 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fa:	f043 0210 	orr.w	r2, r3, #16
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003206:	f043 0201 	orr.w	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e039      	b.n	8003286 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff f86c 	bl	80022f4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800321c:	f7fe feb8 	bl	8001f90 <HAL_GetTick>
 8003220:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003222:	e028      	b.n	8003276 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff f88b 	bl	8002344 <LL_ADC_IsEnabled>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d104      	bne.n	800323e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff f85b 	bl	80022f4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800323e:	f7fe fea7 	bl	8001f90 <HAL_GetTick>
 8003242:	4602      	mov	r2, r0
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	1ad3      	subs	r3, r2, r3
 8003248:	2b02      	cmp	r3, #2
 800324a:	d914      	bls.n	8003276 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0301 	and.w	r3, r3, #1
 8003256:	2b01      	cmp	r3, #1
 8003258:	d00d      	beq.n	8003276 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800325e:	f043 0210 	orr.w	r2, r3, #16
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326a:	f043 0201 	orr.w	r2, r3, #1
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e007      	b.n	8003286 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b01      	cmp	r3, #1
 8003282:	d1cf      	bne.n	8003224 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	8000003f 	.word	0x8000003f

08003294 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff f862 	bl	800236a <LL_ADC_IsDisableOngoing>
 80032a6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f7ff f849 	bl	8002344 <LL_ADC_IsEnabled>
 80032b2:	4603      	mov	r3, r0
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d047      	beq.n	8003348 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d144      	bne.n	8003348 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	f003 030d 	and.w	r3, r3, #13
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d10c      	bne.n	80032e6 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff f823 	bl	800231c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2203      	movs	r2, #3
 80032dc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80032de:	f7fe fe57 	bl	8001f90 <HAL_GetTick>
 80032e2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80032e4:	e029      	b.n	800333a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ea:	f043 0210 	orr.w	r2, r3, #16
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f6:	f043 0201 	orr.w	r2, r3, #1
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e023      	b.n	800334a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003302:	f7fe fe45 	bl	8001f90 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d914      	bls.n	800333a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d00d      	beq.n	800333a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003322:	f043 0210 	orr.w	r2, r3, #16
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800332e:	f043 0201 	orr.w	r2, r3, #1
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e007      	b.n	800334a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	d1dc      	bne.n	8003302 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	3710      	adds	r7, #16
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}

08003352 <LL_ADC_IsEnabled>:
{
 8003352:	b480      	push	{r7}
 8003354:	b083      	sub	sp, #12
 8003356:	af00      	add	r7, sp, #0
 8003358:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <LL_ADC_IsEnabled+0x18>
 8003366:	2301      	movs	r3, #1
 8003368:	e000      	b.n	800336c <LL_ADC_IsEnabled+0x1a>
 800336a:	2300      	movs	r3, #0
}
 800336c:	4618      	mov	r0, r3
 800336e:	370c      	adds	r7, #12
 8003370:	46bd      	mov	sp, r7
 8003372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003376:	4770      	bx	lr

08003378 <LL_ADC_StartCalibration>:
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
 8003380:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800338a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800338e:	683a      	ldr	r2, [r7, #0]
 8003390:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003394:	4313      	orrs	r3, r2
 8003396:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	609a      	str	r2, [r3, #8]
}
 800339e:	bf00      	nop
 80033a0:	370c      	adds	r7, #12
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr

080033aa <LL_ADC_IsCalibrationOnGoing>:
{
 80033aa:	b480      	push	{r7}
 80033ac:	b083      	sub	sp, #12
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80033ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80033be:	d101      	bne.n	80033c4 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80033c0:	2301      	movs	r3, #1
 80033c2:	e000      	b.n	80033c6 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80033c4:	2300      	movs	r3, #0
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	370c      	adds	r7, #12
 80033ca:	46bd      	mov	sp, r7
 80033cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d0:	4770      	bx	lr

080033d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 0304 	and.w	r3, r3, #4
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d101      	bne.n	80033ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80033e6:	2301      	movs	r3, #1
 80033e8:	e000      	b.n	80033ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003402:	2300      	movs	r3, #0
 8003404:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <HAL_ADCEx_Calibration_Start+0x1c>
 8003410:	2302      	movs	r3, #2
 8003412:	e04d      	b.n	80034b0 <HAL_ADCEx_Calibration_Start+0xb8>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff ff39 	bl	8003294 <ADC_Disable>
 8003422:	4603      	mov	r3, r0
 8003424:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003426:	7bfb      	ldrb	r3, [r7, #15]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d136      	bne.n	800349a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003430:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003434:	f023 0302 	bic.w	r3, r3, #2
 8003438:	f043 0202 	orr.w	r2, r3, #2
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6839      	ldr	r1, [r7, #0]
 8003446:	4618      	mov	r0, r3
 8003448:	f7ff ff96 	bl	8003378 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800344c:	e014      	b.n	8003478 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	3301      	adds	r3, #1
 8003452:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	f5b3 2f91 	cmp.w	r3, #296960	; 0x48800
 800345a:	d30d      	bcc.n	8003478 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003460:	f023 0312 	bic.w	r3, r3, #18
 8003464:	f043 0210 	orr.w	r2, r3, #16
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e01b      	b.n	80034b0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4618      	mov	r0, r3
 800347e:	f7ff ff94 	bl	80033aa <LL_ADC_IsCalibrationOnGoing>
 8003482:	4603      	mov	r3, r0
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e2      	bne.n	800344e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348c:	f023 0303 	bic.w	r3, r3, #3
 8003490:	f043 0201 	orr.w	r2, r3, #1
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	655a      	str	r2, [r3, #84]	; 0x54
 8003498:	e005      	b.n	80034a6 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800349e:	f043 0210 	orr.w	r2, r3, #16
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3710      	adds	r7, #16
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80034b8:	b590      	push	{r4, r7, lr}
 80034ba:	b09f      	sub	sp, #124	; 0x7c
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034c2:	2300      	movs	r3, #0
 80034c4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d101      	bne.n	80034d6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80034d2:	2302      	movs	r3, #2
 80034d4:	e093      	b.n	80035fe <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80034de:	2300      	movs	r3, #0
 80034e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80034e2:	2300      	movs	r3, #0
 80034e4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a47      	ldr	r2, [pc, #284]	; (8003608 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d102      	bne.n	80034f6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80034f0:	4b46      	ldr	r3, [pc, #280]	; (800360c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80034f2:	60bb      	str	r3, [r7, #8]
 80034f4:	e001      	b.n	80034fa <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80034f6:	2300      	movs	r3, #0
 80034f8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80034fa:	68bb      	ldr	r3, [r7, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d10b      	bne.n	8003518 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003504:	f043 0220 	orr.w	r2, r3, #32
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e072      	b.n	80035fe <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	4618      	mov	r0, r3
 800351c:	f7ff ff59 	bl	80033d2 <LL_ADC_REG_IsConversionOngoing>
 8003520:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff ff53 	bl	80033d2 <LL_ADC_REG_IsConversionOngoing>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d154      	bne.n	80035dc <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003534:	2b00      	cmp	r3, #0
 8003536:	d151      	bne.n	80035dc <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003538:	4b35      	ldr	r3, [pc, #212]	; (8003610 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 800353a:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d02c      	beq.n	800359e <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	6859      	ldr	r1, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003556:	035b      	lsls	r3, r3, #13
 8003558:	430b      	orrs	r3, r1
 800355a:	431a      	orrs	r2, r3
 800355c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800355e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003560:	4829      	ldr	r0, [pc, #164]	; (8003608 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 8003562:	f7ff fef6 	bl	8003352 <LL_ADC_IsEnabled>
 8003566:	4604      	mov	r4, r0
 8003568:	4828      	ldr	r0, [pc, #160]	; (800360c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 800356a:	f7ff fef2 	bl	8003352 <LL_ADC_IsEnabled>
 800356e:	4603      	mov	r3, r0
 8003570:	431c      	orrs	r4, r3
 8003572:	4828      	ldr	r0, [pc, #160]	; (8003614 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003574:	f7ff feed 	bl	8003352 <LL_ADC_IsEnabled>
 8003578:	4603      	mov	r3, r0
 800357a:	4323      	orrs	r3, r4
 800357c:	2b00      	cmp	r3, #0
 800357e:	d137      	bne.n	80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003580:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003588:	f023 030f 	bic.w	r3, r3, #15
 800358c:	683a      	ldr	r2, [r7, #0]
 800358e:	6811      	ldr	r1, [r2, #0]
 8003590:	683a      	ldr	r2, [r7, #0]
 8003592:	6892      	ldr	r2, [r2, #8]
 8003594:	430a      	orrs	r2, r1
 8003596:	431a      	orrs	r2, r3
 8003598:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800359a:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800359c:	e028      	b.n	80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800359e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035a8:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80035aa:	4817      	ldr	r0, [pc, #92]	; (8003608 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80035ac:	f7ff fed1 	bl	8003352 <LL_ADC_IsEnabled>
 80035b0:	4604      	mov	r4, r0
 80035b2:	4816      	ldr	r0, [pc, #88]	; (800360c <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80035b4:	f7ff fecd 	bl	8003352 <LL_ADC_IsEnabled>
 80035b8:	4603      	mov	r3, r0
 80035ba:	431c      	orrs	r4, r3
 80035bc:	4815      	ldr	r0, [pc, #84]	; (8003614 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80035be:	f7ff fec8 	bl	8003352 <LL_ADC_IsEnabled>
 80035c2:	4603      	mov	r3, r0
 80035c4:	4323      	orrs	r3, r4
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d112      	bne.n	80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80035ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80035d2:	f023 030f 	bic.w	r3, r3, #15
 80035d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80035d8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035da:	e009      	b.n	80035f0 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e0:	f043 0220 	orr.w	r2, r3, #32
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80035ee:	e000      	b.n	80035f2 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80035f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80035fa:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 80035fe:	4618      	mov	r0, r3
 8003600:	377c      	adds	r7, #124	; 0x7c
 8003602:	46bd      	mov	sp, r7
 8003604:	bd90      	pop	{r4, r7, pc}
 8003606:	bf00      	nop
 8003608:	50040000 	.word	0x50040000
 800360c:	50040100 	.word	0x50040100
 8003610:	50040300 	.word	0x50040300
 8003614:	50040200 	.word	0x50040200

08003618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003628:	4b0c      	ldr	r3, [pc, #48]	; (800365c <__NVIC_SetPriorityGrouping+0x44>)
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003634:	4013      	ands	r3, r2
 8003636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800364a:	4a04      	ldr	r2, [pc, #16]	; (800365c <__NVIC_SetPriorityGrouping+0x44>)
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	60d3      	str	r3, [r2, #12]
}
 8003650:	bf00      	nop
 8003652:	3714      	adds	r7, #20
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	e000ed00 	.word	0xe000ed00

08003660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003660:	b480      	push	{r7}
 8003662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003664:	4b04      	ldr	r3, [pc, #16]	; (8003678 <__NVIC_GetPriorityGrouping+0x18>)
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	0a1b      	lsrs	r3, r3, #8
 800366a:	f003 0307 	and.w	r3, r3, #7
}
 800366e:	4618      	mov	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	e000ed00 	.word	0xe000ed00

0800367c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	4603      	mov	r3, r0
 8003684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368a:	2b00      	cmp	r3, #0
 800368c:	db0b      	blt.n	80036a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800368e:	79fb      	ldrb	r3, [r7, #7]
 8003690:	f003 021f 	and.w	r2, r3, #31
 8003694:	4907      	ldr	r1, [pc, #28]	; (80036b4 <__NVIC_EnableIRQ+0x38>)
 8003696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800369a:	095b      	lsrs	r3, r3, #5
 800369c:	2001      	movs	r0, #1
 800369e:	fa00 f202 	lsl.w	r2, r0, r2
 80036a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr
 80036b2:	bf00      	nop
 80036b4:	e000e100 	.word	0xe000e100

080036b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	6039      	str	r1, [r7, #0]
 80036c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	db0a      	blt.n	80036e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	490c      	ldr	r1, [pc, #48]	; (8003704 <__NVIC_SetPriority+0x4c>)
 80036d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036d6:	0112      	lsls	r2, r2, #4
 80036d8:	b2d2      	uxtb	r2, r2
 80036da:	440b      	add	r3, r1
 80036dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036e0:	e00a      	b.n	80036f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	b2da      	uxtb	r2, r3
 80036e6:	4908      	ldr	r1, [pc, #32]	; (8003708 <__NVIC_SetPriority+0x50>)
 80036e8:	79fb      	ldrb	r3, [r7, #7]
 80036ea:	f003 030f 	and.w	r3, r3, #15
 80036ee:	3b04      	subs	r3, #4
 80036f0:	0112      	lsls	r2, r2, #4
 80036f2:	b2d2      	uxtb	r2, r2
 80036f4:	440b      	add	r3, r1
 80036f6:	761a      	strb	r2, [r3, #24]
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	e000e100 	.word	0xe000e100
 8003708:	e000ed00 	.word	0xe000ed00

0800370c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800370c:	b480      	push	{r7}
 800370e:	b089      	sub	sp, #36	; 0x24
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 0307 	and.w	r3, r3, #7
 800371e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	f1c3 0307 	rsb	r3, r3, #7
 8003726:	2b04      	cmp	r3, #4
 8003728:	bf28      	it	cs
 800372a:	2304      	movcs	r3, #4
 800372c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	3304      	adds	r3, #4
 8003732:	2b06      	cmp	r3, #6
 8003734:	d902      	bls.n	800373c <NVIC_EncodePriority+0x30>
 8003736:	69fb      	ldr	r3, [r7, #28]
 8003738:	3b03      	subs	r3, #3
 800373a:	e000      	b.n	800373e <NVIC_EncodePriority+0x32>
 800373c:	2300      	movs	r3, #0
 800373e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003740:	f04f 32ff 	mov.w	r2, #4294967295
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	fa02 f303 	lsl.w	r3, r2, r3
 800374a:	43da      	mvns	r2, r3
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	401a      	ands	r2, r3
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003754:	f04f 31ff 	mov.w	r1, #4294967295
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	fa01 f303 	lsl.w	r3, r1, r3
 800375e:	43d9      	mvns	r1, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003764:	4313      	orrs	r3, r2
         );
}
 8003766:	4618      	mov	r0, r3
 8003768:	3724      	adds	r7, #36	; 0x24
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr

08003772 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003772:	b580      	push	{r7, lr}
 8003774:	b082      	sub	sp, #8
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7ff ff4c 	bl	8003618 <__NVIC_SetPriorityGrouping>
}
 8003780:	bf00      	nop
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	4603      	mov	r3, r0
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
 8003794:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003796:	2300      	movs	r3, #0
 8003798:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800379a:	f7ff ff61 	bl	8003660 <__NVIC_GetPriorityGrouping>
 800379e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	6978      	ldr	r0, [r7, #20]
 80037a6:	f7ff ffb1 	bl	800370c <NVIC_EncodePriority>
 80037aa:	4602      	mov	r2, r0
 80037ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037b0:	4611      	mov	r1, r2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff ff80 	bl	80036b8 <__NVIC_SetPriority>
}
 80037b8:	bf00      	nop
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	4603      	mov	r3, r0
 80037c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80037ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7ff ff54 	bl	800367c <__NVIC_EnableIRQ>
}
 80037d4:	bf00      	nop
 80037d6:	3708      	adds	r7, #8
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037dc:	b480      	push	{r7}
 80037de:	b085      	sub	sp, #20
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037e4:	2300      	movs	r3, #0
 80037e6:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d008      	beq.n	8003806 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2204      	movs	r2, #4
 80037f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e022      	b.n	800384c <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f022 020e 	bic.w	r2, r2, #14
 8003814:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0201 	bic.w	r2, r2, #1
 8003824:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800382a:	f003 021c 	and.w	r2, r3, #28
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003832:	2101      	movs	r1, #1
 8003834:	fa01 f202 	lsl.w	r2, r1, r2
 8003838:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800384a:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800384c:	4618      	mov	r0, r3
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003860:	2300      	movs	r3, #0
 8003862:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d005      	beq.n	800387c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2204      	movs	r2, #4
 8003874:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	73fb      	strb	r3, [r7, #15]
 800387a:	e029      	b.n	80038d0 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 020e 	bic.w	r2, r2, #14
 800388a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 0201 	bic.w	r2, r2, #1
 800389a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a0:	f003 021c 	and.w	r2, r3, #28
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	2101      	movs	r1, #1
 80038aa:	fa01 f202 	lsl.w	r2, r1, r2
 80038ae:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d003      	beq.n	80038d0 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	4798      	blx	r3
    }
  }
  return status;
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3710      	adds	r7, #16
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
	...

080038dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038dc:	b480      	push	{r7}
 80038de:	b087      	sub	sp, #28
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038ea:	e17f      	b.n	8003bec <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	2101      	movs	r1, #1
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	fa01 f303 	lsl.w	r3, r1, r3
 80038f8:	4013      	ands	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 8171 	beq.w	8003be6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 0303 	and.w	r3, r3, #3
 800390c:	2b01      	cmp	r3, #1
 800390e:	d005      	beq.n	800391c <HAL_GPIO_Init+0x40>
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f003 0303 	and.w	r3, r3, #3
 8003918:	2b02      	cmp	r3, #2
 800391a:	d130      	bne.n	800397e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	2203      	movs	r2, #3
 8003928:	fa02 f303 	lsl.w	r3, r2, r3
 800392c:	43db      	mvns	r3, r3
 800392e:	693a      	ldr	r2, [r7, #16]
 8003930:	4013      	ands	r3, r2
 8003932:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	693a      	ldr	r2, [r7, #16]
 800394a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003952:	2201      	movs	r2, #1
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	fa02 f303 	lsl.w	r3, r2, r3
 800395a:	43db      	mvns	r3, r3
 800395c:	693a      	ldr	r2, [r7, #16]
 800395e:	4013      	ands	r3, r2
 8003960:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	091b      	lsrs	r3, r3, #4
 8003968:	f003 0201 	and.w	r2, r3, #1
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	2b03      	cmp	r3, #3
 8003988:	d118      	bne.n	80039bc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003990:	2201      	movs	r2, #1
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	43db      	mvns	r3, r3
 800399a:	693a      	ldr	r2, [r7, #16]
 800399c:	4013      	ands	r3, r2
 800399e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	08db      	lsrs	r3, r3, #3
 80039a6:	f003 0201 	and.w	r2, r3, #1
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	fa02 f303 	lsl.w	r3, r2, r3
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	f003 0303 	and.w	r3, r3, #3
 80039c4:	2b03      	cmp	r3, #3
 80039c6:	d017      	beq.n	80039f8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	005b      	lsls	r3, r3, #1
 80039d2:	2203      	movs	r2, #3
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4013      	ands	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	689a      	ldr	r2, [r3, #8]
 80039e4:	697b      	ldr	r3, [r7, #20]
 80039e6:	005b      	lsls	r3, r3, #1
 80039e8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	693a      	ldr	r2, [r7, #16]
 80039f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f003 0303 	and.w	r3, r3, #3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d123      	bne.n	8003a4c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	08da      	lsrs	r2, r3, #3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3208      	adds	r2, #8
 8003a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a10:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	009b      	lsls	r3, r3, #2
 8003a1a:	220f      	movs	r2, #15
 8003a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a20:	43db      	mvns	r3, r3
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	4013      	ands	r3, r2
 8003a26:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	691a      	ldr	r2, [r3, #16]
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f003 0307 	and.w	r3, r3, #7
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	fa02 f303 	lsl.w	r3, r2, r3
 8003a38:	693a      	ldr	r2, [r7, #16]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	08da      	lsrs	r2, r3, #3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	3208      	adds	r2, #8
 8003a46:	6939      	ldr	r1, [r7, #16]
 8003a48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a52:	697b      	ldr	r3, [r7, #20]
 8003a54:	005b      	lsls	r3, r3, #1
 8003a56:	2203      	movs	r2, #3
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	4013      	ands	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 0203 	and.w	r2, r3, #3
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f000 80ac 	beq.w	8003be6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a8e:	4b5f      	ldr	r3, [pc, #380]	; (8003c0c <HAL_GPIO_Init+0x330>)
 8003a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a92:	4a5e      	ldr	r2, [pc, #376]	; (8003c0c <HAL_GPIO_Init+0x330>)
 8003a94:	f043 0301 	orr.w	r3, r3, #1
 8003a98:	6613      	str	r3, [r2, #96]	; 0x60
 8003a9a:	4b5c      	ldr	r3, [pc, #368]	; (8003c0c <HAL_GPIO_Init+0x330>)
 8003a9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a9e:	f003 0301 	and.w	r3, r3, #1
 8003aa2:	60bb      	str	r3, [r7, #8]
 8003aa4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003aa6:	4a5a      	ldr	r2, [pc, #360]	; (8003c10 <HAL_GPIO_Init+0x334>)
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	089b      	lsrs	r3, r3, #2
 8003aac:	3302      	adds	r3, #2
 8003aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	f003 0303 	and.w	r3, r3, #3
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	220f      	movs	r2, #15
 8003abe:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac2:	43db      	mvns	r3, r3
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	4013      	ands	r3, r2
 8003ac8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ad0:	d025      	beq.n	8003b1e <HAL_GPIO_Init+0x242>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a4f      	ldr	r2, [pc, #316]	; (8003c14 <HAL_GPIO_Init+0x338>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d01f      	beq.n	8003b1a <HAL_GPIO_Init+0x23e>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a4e      	ldr	r2, [pc, #312]	; (8003c18 <HAL_GPIO_Init+0x33c>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d019      	beq.n	8003b16 <HAL_GPIO_Init+0x23a>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a4d      	ldr	r2, [pc, #308]	; (8003c1c <HAL_GPIO_Init+0x340>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d013      	beq.n	8003b12 <HAL_GPIO_Init+0x236>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a4c      	ldr	r2, [pc, #304]	; (8003c20 <HAL_GPIO_Init+0x344>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00d      	beq.n	8003b0e <HAL_GPIO_Init+0x232>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a4b      	ldr	r2, [pc, #300]	; (8003c24 <HAL_GPIO_Init+0x348>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d007      	beq.n	8003b0a <HAL_GPIO_Init+0x22e>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a4a      	ldr	r2, [pc, #296]	; (8003c28 <HAL_GPIO_Init+0x34c>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d101      	bne.n	8003b06 <HAL_GPIO_Init+0x22a>
 8003b02:	2306      	movs	r3, #6
 8003b04:	e00c      	b.n	8003b20 <HAL_GPIO_Init+0x244>
 8003b06:	2307      	movs	r3, #7
 8003b08:	e00a      	b.n	8003b20 <HAL_GPIO_Init+0x244>
 8003b0a:	2305      	movs	r3, #5
 8003b0c:	e008      	b.n	8003b20 <HAL_GPIO_Init+0x244>
 8003b0e:	2304      	movs	r3, #4
 8003b10:	e006      	b.n	8003b20 <HAL_GPIO_Init+0x244>
 8003b12:	2303      	movs	r3, #3
 8003b14:	e004      	b.n	8003b20 <HAL_GPIO_Init+0x244>
 8003b16:	2302      	movs	r3, #2
 8003b18:	e002      	b.n	8003b20 <HAL_GPIO_Init+0x244>
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e000      	b.n	8003b20 <HAL_GPIO_Init+0x244>
 8003b1e:	2300      	movs	r3, #0
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	f002 0203 	and.w	r2, r2, #3
 8003b26:	0092      	lsls	r2, r2, #2
 8003b28:	4093      	lsls	r3, r2
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b30:	4937      	ldr	r1, [pc, #220]	; (8003c10 <HAL_GPIO_Init+0x334>)
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	089b      	lsrs	r3, r3, #2
 8003b36:	3302      	adds	r3, #2
 8003b38:	693a      	ldr	r2, [r7, #16]
 8003b3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003b3e:	4b3b      	ldr	r3, [pc, #236]	; (8003c2c <HAL_GPIO_Init+0x350>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	43db      	mvns	r3, r3
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003b62:	4a32      	ldr	r2, [pc, #200]	; (8003c2c <HAL_GPIO_Init+0x350>)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003b68:	4b30      	ldr	r3, [pc, #192]	; (8003c2c <HAL_GPIO_Init+0x350>)
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	43db      	mvns	r3, r3
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4013      	ands	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d003      	beq.n	8003b8c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003b84:	693a      	ldr	r2, [r7, #16]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b8c:	4a27      	ldr	r2, [pc, #156]	; (8003c2c <HAL_GPIO_Init+0x350>)
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b92:	4b26      	ldr	r3, [pc, #152]	; (8003c2c <HAL_GPIO_Init+0x350>)
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	43db      	mvns	r3, r3
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d003      	beq.n	8003bb6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003bb6:	4a1d      	ldr	r2, [pc, #116]	; (8003c2c <HAL_GPIO_Init+0x350>)
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003bbc:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <HAL_GPIO_Init+0x350>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	43db      	mvns	r3, r3
 8003bc6:	693a      	ldr	r2, [r7, #16]
 8003bc8:	4013      	ands	r3, r2
 8003bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685b      	ldr	r3, [r3, #4]
 8003bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d003      	beq.n	8003be0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003be0:	4a12      	ldr	r2, [pc, #72]	; (8003c2c <HAL_GPIO_Init+0x350>)
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	3301      	adds	r3, #1
 8003bea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	f47f ae78 	bne.w	80038ec <HAL_GPIO_Init+0x10>
  }
}
 8003bfc:	bf00      	nop
 8003bfe:	bf00      	nop
 8003c00:	371c      	adds	r7, #28
 8003c02:	46bd      	mov	sp, r7
 8003c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c08:	4770      	bx	lr
 8003c0a:	bf00      	nop
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40010000 	.word	0x40010000
 8003c14:	48000400 	.word	0x48000400
 8003c18:	48000800 	.word	0x48000800
 8003c1c:	48000c00 	.word	0x48000c00
 8003c20:	48001000 	.word	0x48001000
 8003c24:	48001400 	.word	0x48001400
 8003c28:	48001800 	.word	0x48001800
 8003c2c:	40010400 	.word	0x40010400

08003c30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	460b      	mov	r3, r1
 8003c3a:	807b      	strh	r3, [r7, #2]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c40:	787b      	ldrb	r3, [r7, #1]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c46:	887a      	ldrh	r2, [r7, #2]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003c4c:	e002      	b.n	8003c54 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003c4e:	887a      	ldrh	r2, [r7, #2]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr

08003c60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003c60:	b480      	push	{r7}
 8003c62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003c64:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <HAL_PWREx_GetVoltageRange+0x18>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	40007000 	.word	0x40007000

08003c7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c8a:	d130      	bne.n	8003cee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c8c:	4b23      	ldr	r3, [pc, #140]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c98:	d038      	beq.n	8003d0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c9a:	4b20      	ldr	r3, [pc, #128]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ca2:	4a1e      	ldr	r2, [pc, #120]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ca4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ca8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003caa:	4b1d      	ldr	r3, [pc, #116]	; (8003d20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2232      	movs	r2, #50	; 0x32
 8003cb0:	fb02 f303 	mul.w	r3, r2, r3
 8003cb4:	4a1b      	ldr	r2, [pc, #108]	; (8003d24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8003cba:	0c9b      	lsrs	r3, r3, #18
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cc0:	e002      	b.n	8003cc8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cc8:	4b14      	ldr	r3, [pc, #80]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cca:	695b      	ldr	r3, [r3, #20]
 8003ccc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd4:	d102      	bne.n	8003cdc <HAL_PWREx_ControlVoltageScaling+0x60>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d1f2      	bne.n	8003cc2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cdc:	4b0f      	ldr	r3, [pc, #60]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cde:	695b      	ldr	r3, [r3, #20]
 8003ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ce8:	d110      	bne.n	8003d0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e00f      	b.n	8003d0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cee:	4b0b      	ldr	r3, [pc, #44]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfa:	d007      	beq.n	8003d0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003cfc:	4b07      	ldr	r3, [pc, #28]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003d04:	4a05      	ldr	r2, [pc, #20]	; (8003d1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003d0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	3714      	adds	r7, #20
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
 8003d1a:	bf00      	nop
 8003d1c:	40007000 	.word	0x40007000
 8003d20:	20000010 	.word	0x20000010
 8003d24:	431bde83 	.word	0x431bde83

08003d28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e3d4      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d3a:	4ba1      	ldr	r3, [pc, #644]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
 8003d42:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d44:	4b9e      	ldr	r3, [pc, #632]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0310 	and.w	r3, r3, #16
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	f000 80e4 	beq.w	8003f24 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d007      	beq.n	8003d72 <HAL_RCC_OscConfig+0x4a>
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	2b0c      	cmp	r3, #12
 8003d66:	f040 808b 	bne.w	8003e80 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	f040 8087 	bne.w	8003e80 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003d72:	4b93      	ldr	r3, [pc, #588]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d005      	beq.n	8003d8a <HAL_RCC_OscConfig+0x62>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e3ac      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6a1a      	ldr	r2, [r3, #32]
 8003d8e:	4b8c      	ldr	r3, [pc, #560]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0308 	and.w	r3, r3, #8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d004      	beq.n	8003da4 <HAL_RCC_OscConfig+0x7c>
 8003d9a:	4b89      	ldr	r3, [pc, #548]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003da2:	e005      	b.n	8003db0 <HAL_RCC_OscConfig+0x88>
 8003da4:	4b86      	ldr	r3, [pc, #536]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003da6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003daa:	091b      	lsrs	r3, r3, #4
 8003dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d223      	bcs.n	8003dfc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f000 fd73 	bl	80048a4 <RCC_SetFlashLatencyFromMSIRange>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d001      	beq.n	8003dc8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	e38d      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dc8:	4b7d      	ldr	r3, [pc, #500]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a7c      	ldr	r2, [pc, #496]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003dce:	f043 0308 	orr.w	r3, r3, #8
 8003dd2:	6013      	str	r3, [r2, #0]
 8003dd4:	4b7a      	ldr	r3, [pc, #488]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6a1b      	ldr	r3, [r3, #32]
 8003de0:	4977      	ldr	r1, [pc, #476]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003de2:	4313      	orrs	r3, r2
 8003de4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003de6:	4b76      	ldr	r3, [pc, #472]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	69db      	ldr	r3, [r3, #28]
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	4972      	ldr	r1, [pc, #456]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003df6:	4313      	orrs	r3, r2
 8003df8:	604b      	str	r3, [r1, #4]
 8003dfa:	e025      	b.n	8003e48 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dfc:	4b70      	ldr	r3, [pc, #448]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a6f      	ldr	r2, [pc, #444]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003e02:	f043 0308 	orr.w	r3, r3, #8
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	4b6d      	ldr	r3, [pc, #436]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	496a      	ldr	r1, [pc, #424]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e1a:	4b69      	ldr	r3, [pc, #420]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69db      	ldr	r3, [r3, #28]
 8003e26:	021b      	lsls	r3, r3, #8
 8003e28:	4965      	ldr	r1, [pc, #404]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d109      	bne.n	8003e48 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a1b      	ldr	r3, [r3, #32]
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 fd33 	bl	80048a4 <RCC_SetFlashLatencyFromMSIRange>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d001      	beq.n	8003e48 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e34d      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003e48:	f000 fc36 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	4b5c      	ldr	r3, [pc, #368]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	091b      	lsrs	r3, r3, #4
 8003e54:	f003 030f 	and.w	r3, r3, #15
 8003e58:	495a      	ldr	r1, [pc, #360]	; (8003fc4 <HAL_RCC_OscConfig+0x29c>)
 8003e5a:	5ccb      	ldrb	r3, [r1, r3]
 8003e5c:	f003 031f 	and.w	r3, r3, #31
 8003e60:	fa22 f303 	lsr.w	r3, r2, r3
 8003e64:	4a58      	ldr	r2, [pc, #352]	; (8003fc8 <HAL_RCC_OscConfig+0x2a0>)
 8003e66:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003e68:	4b58      	ldr	r3, [pc, #352]	; (8003fcc <HAL_RCC_OscConfig+0x2a4>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fd fd5f 	bl	8001930 <HAL_InitTick>
 8003e72:	4603      	mov	r3, r0
 8003e74:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003e76:	7bfb      	ldrb	r3, [r7, #15]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d052      	beq.n	8003f22 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003e7c:	7bfb      	ldrb	r3, [r7, #15]
 8003e7e:	e331      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d032      	beq.n	8003eee <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003e88:	4b4d      	ldr	r3, [pc, #308]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a4c      	ldr	r2, [pc, #304]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003e8e:	f043 0301 	orr.w	r3, r3, #1
 8003e92:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e94:	f7fe f87c 	bl	8001f90 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e9c:	f7fe f878 	bl	8001f90 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e31a      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003eae:	4b44      	ldr	r3, [pc, #272]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003eba:	4b41      	ldr	r3, [pc, #260]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a40      	ldr	r2, [pc, #256]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003ec0:	f043 0308 	orr.w	r3, r3, #8
 8003ec4:	6013      	str	r3, [r2, #0]
 8003ec6:	4b3e      	ldr	r3, [pc, #248]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	493b      	ldr	r1, [pc, #236]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ed8:	4b39      	ldr	r3, [pc, #228]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	69db      	ldr	r3, [r3, #28]
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	4936      	ldr	r1, [pc, #216]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	604b      	str	r3, [r1, #4]
 8003eec:	e01a      	b.n	8003f24 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003eee:	4b34      	ldr	r3, [pc, #208]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a33      	ldr	r2, [pc, #204]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003ef4:	f023 0301 	bic.w	r3, r3, #1
 8003ef8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003efa:	f7fe f849 	bl	8001f90 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003f02:	f7fe f845 	bl	8001f90 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e2e7      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003f14:	4b2a      	ldr	r3, [pc, #168]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0302 	and.w	r3, r3, #2
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1f0      	bne.n	8003f02 <HAL_RCC_OscConfig+0x1da>
 8003f20:	e000      	b.n	8003f24 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003f22:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d074      	beq.n	800401a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	2b08      	cmp	r3, #8
 8003f34:	d005      	beq.n	8003f42 <HAL_RCC_OscConfig+0x21a>
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	2b0c      	cmp	r3, #12
 8003f3a:	d10e      	bne.n	8003f5a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003f3c:	697b      	ldr	r3, [r7, #20]
 8003f3e:	2b03      	cmp	r3, #3
 8003f40:	d10b      	bne.n	8003f5a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f42:	4b1f      	ldr	r3, [pc, #124]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d064      	beq.n	8004018 <HAL_RCC_OscConfig+0x2f0>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d160      	bne.n	8004018 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e2c4      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f62:	d106      	bne.n	8003f72 <HAL_RCC_OscConfig+0x24a>
 8003f64:	4b16      	ldr	r3, [pc, #88]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a15      	ldr	r2, [pc, #84]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003f6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f6e:	6013      	str	r3, [r2, #0]
 8003f70:	e01d      	b.n	8003fae <HAL_RCC_OscConfig+0x286>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f7a:	d10c      	bne.n	8003f96 <HAL_RCC_OscConfig+0x26e>
 8003f7c:	4b10      	ldr	r3, [pc, #64]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a0f      	ldr	r2, [pc, #60]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003f82:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f86:	6013      	str	r3, [r2, #0]
 8003f88:	4b0d      	ldr	r3, [pc, #52]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a0c      	ldr	r2, [pc, #48]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003f8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f92:	6013      	str	r3, [r2, #0]
 8003f94:	e00b      	b.n	8003fae <HAL_RCC_OscConfig+0x286>
 8003f96:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a09      	ldr	r2, [pc, #36]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003f9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	4b07      	ldr	r3, [pc, #28]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	4a06      	ldr	r2, [pc, #24]	; (8003fc0 <HAL_RCC_OscConfig+0x298>)
 8003fa8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fac:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d01c      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fb6:	f7fd ffeb 	bl	8001f90 <HAL_GetTick>
 8003fba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fbc:	e011      	b.n	8003fe2 <HAL_RCC_OscConfig+0x2ba>
 8003fbe:	bf00      	nop
 8003fc0:	40021000 	.word	0x40021000
 8003fc4:	0800c854 	.word	0x0800c854
 8003fc8:	20000010 	.word	0x20000010
 8003fcc:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fd0:	f7fd ffde 	bl	8001f90 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b64      	cmp	r3, #100	; 0x64
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e280      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fe2:	4baf      	ldr	r3, [pc, #700]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x2a8>
 8003fee:	e014      	b.n	800401a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7fd ffce 	bl	8001f90 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff8:	f7fd ffca 	bl	8001f90 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b64      	cmp	r3, #100	; 0x64
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e26c      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800400a:	4ba5      	ldr	r3, [pc, #660]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x2d0>
 8004016:	e000      	b.n	800401a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d060      	beq.n	80040e8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	2b04      	cmp	r3, #4
 800402a:	d005      	beq.n	8004038 <HAL_RCC_OscConfig+0x310>
 800402c:	69bb      	ldr	r3, [r7, #24]
 800402e:	2b0c      	cmp	r3, #12
 8004030:	d119      	bne.n	8004066 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2b02      	cmp	r3, #2
 8004036:	d116      	bne.n	8004066 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004038:	4b99      	ldr	r3, [pc, #612]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004040:	2b00      	cmp	r3, #0
 8004042:	d005      	beq.n	8004050 <HAL_RCC_OscConfig+0x328>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d101      	bne.n	8004050 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e249      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004050:	4b93      	ldr	r3, [pc, #588]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	061b      	lsls	r3, r3, #24
 800405e:	4990      	ldr	r1, [pc, #576]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 8004060:	4313      	orrs	r3, r2
 8004062:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004064:	e040      	b.n	80040e8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d023      	beq.n	80040b6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800406e:	4b8c      	ldr	r3, [pc, #560]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a8b      	ldr	r2, [pc, #556]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 8004074:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004078:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800407a:	f7fd ff89 	bl	8001f90 <HAL_GetTick>
 800407e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004080:	e008      	b.n	8004094 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004082:	f7fd ff85 	bl	8001f90 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	1ad3      	subs	r3, r2, r3
 800408c:	2b02      	cmp	r3, #2
 800408e:	d901      	bls.n	8004094 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e227      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004094:	4b82      	ldr	r3, [pc, #520]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409c:	2b00      	cmp	r3, #0
 800409e:	d0f0      	beq.n	8004082 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a0:	4b7f      	ldr	r3, [pc, #508]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	061b      	lsls	r3, r3, #24
 80040ae:	497c      	ldr	r1, [pc, #496]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	604b      	str	r3, [r1, #4]
 80040b4:	e018      	b.n	80040e8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040b6:	4b7a      	ldr	r3, [pc, #488]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a79      	ldr	r2, [pc, #484]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 80040bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c2:	f7fd ff65 	bl	8001f90 <HAL_GetTick>
 80040c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040c8:	e008      	b.n	80040dc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ca:	f7fd ff61 	bl	8001f90 <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	2b02      	cmp	r3, #2
 80040d6:	d901      	bls.n	80040dc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e203      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040dc:	4b70      	ldr	r3, [pc, #448]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d1f0      	bne.n	80040ca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d03c      	beq.n	800416e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	695b      	ldr	r3, [r3, #20]
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d01c      	beq.n	8004136 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80040fc:	4b68      	ldr	r3, [pc, #416]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 80040fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004102:	4a67      	ldr	r2, [pc, #412]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410c:	f7fd ff40 	bl	8001f90 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004114:	f7fd ff3c 	bl	8001f90 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e1de      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004126:	4b5e      	ldr	r3, [pc, #376]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 8004128:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800412c:	f003 0302 	and.w	r3, r3, #2
 8004130:	2b00      	cmp	r3, #0
 8004132:	d0ef      	beq.n	8004114 <HAL_RCC_OscConfig+0x3ec>
 8004134:	e01b      	b.n	800416e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004136:	4b5a      	ldr	r3, [pc, #360]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 8004138:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800413c:	4a58      	ldr	r2, [pc, #352]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 800413e:	f023 0301 	bic.w	r3, r3, #1
 8004142:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004146:	f7fd ff23 	bl	8001f90 <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800414e:	f7fd ff1f 	bl	8001f90 <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e1c1      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004160:	4b4f      	ldr	r3, [pc, #316]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 8004162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004166:	f003 0302 	and.w	r3, r3, #2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1ef      	bne.n	800414e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0304 	and.w	r3, r3, #4
 8004176:	2b00      	cmp	r3, #0
 8004178:	f000 80a6 	beq.w	80042c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800417c:	2300      	movs	r3, #0
 800417e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004180:	4b47      	ldr	r3, [pc, #284]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 8004182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004184:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10d      	bne.n	80041a8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800418c:	4b44      	ldr	r3, [pc, #272]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 800418e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004190:	4a43      	ldr	r2, [pc, #268]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 8004192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004196:	6593      	str	r3, [r2, #88]	; 0x58
 8004198:	4b41      	ldr	r3, [pc, #260]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 800419a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800419c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041a0:	60bb      	str	r3, [r7, #8]
 80041a2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041a4:	2301      	movs	r3, #1
 80041a6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041a8:	4b3e      	ldr	r3, [pc, #248]	; (80042a4 <HAL_RCC_OscConfig+0x57c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d118      	bne.n	80041e6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041b4:	4b3b      	ldr	r3, [pc, #236]	; (80042a4 <HAL_RCC_OscConfig+0x57c>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a3a      	ldr	r2, [pc, #232]	; (80042a4 <HAL_RCC_OscConfig+0x57c>)
 80041ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041be:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041c0:	f7fd fee6 	bl	8001f90 <HAL_GetTick>
 80041c4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041c6:	e008      	b.n	80041da <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041c8:	f7fd fee2 	bl	8001f90 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	2b02      	cmp	r3, #2
 80041d4:	d901      	bls.n	80041da <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80041d6:	2303      	movs	r3, #3
 80041d8:	e184      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041da:	4b32      	ldr	r3, [pc, #200]	; (80042a4 <HAL_RCC_OscConfig+0x57c>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d0f0      	beq.n	80041c8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d108      	bne.n	8004200 <HAL_RCC_OscConfig+0x4d8>
 80041ee:	4b2c      	ldr	r3, [pc, #176]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 80041f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041f4:	4a2a      	ldr	r2, [pc, #168]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 80041f6:	f043 0301 	orr.w	r3, r3, #1
 80041fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80041fe:	e024      	b.n	800424a <HAL_RCC_OscConfig+0x522>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	2b05      	cmp	r3, #5
 8004206:	d110      	bne.n	800422a <HAL_RCC_OscConfig+0x502>
 8004208:	4b25      	ldr	r3, [pc, #148]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	4a24      	ldr	r2, [pc, #144]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 8004210:	f043 0304 	orr.w	r3, r3, #4
 8004214:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004218:	4b21      	ldr	r3, [pc, #132]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 800421a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800421e:	4a20      	ldr	r2, [pc, #128]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 8004220:	f043 0301 	orr.w	r3, r3, #1
 8004224:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004228:	e00f      	b.n	800424a <HAL_RCC_OscConfig+0x522>
 800422a:	4b1d      	ldr	r3, [pc, #116]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 800422c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004230:	4a1b      	ldr	r2, [pc, #108]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 8004232:	f023 0301 	bic.w	r3, r3, #1
 8004236:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800423a:	4b19      	ldr	r3, [pc, #100]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 800423c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004240:	4a17      	ldr	r2, [pc, #92]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 8004242:	f023 0304 	bic.w	r3, r3, #4
 8004246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d016      	beq.n	8004280 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004252:	f7fd fe9d 	bl	8001f90 <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004258:	e00a      	b.n	8004270 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800425a:	f7fd fe99 	bl	8001f90 <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	f241 3288 	movw	r2, #5000	; 0x1388
 8004268:	4293      	cmp	r3, r2
 800426a:	d901      	bls.n	8004270 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 800426c:	2303      	movs	r3, #3
 800426e:	e139      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004270:	4b0b      	ldr	r3, [pc, #44]	; (80042a0 <HAL_RCC_OscConfig+0x578>)
 8004272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004276:	f003 0302 	and.w	r3, r3, #2
 800427a:	2b00      	cmp	r3, #0
 800427c:	d0ed      	beq.n	800425a <HAL_RCC_OscConfig+0x532>
 800427e:	e01a      	b.n	80042b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004280:	f7fd fe86 	bl	8001f90 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004286:	e00f      	b.n	80042a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004288:	f7fd fe82 	bl	8001f90 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	f241 3288 	movw	r2, #5000	; 0x1388
 8004296:	4293      	cmp	r3, r2
 8004298:	d906      	bls.n	80042a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e122      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
 800429e:	bf00      	nop
 80042a0:	40021000 	.word	0x40021000
 80042a4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042a8:	4b90      	ldr	r3, [pc, #576]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 80042aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1e8      	bne.n	8004288 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042b6:	7ffb      	ldrb	r3, [r7, #31]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d105      	bne.n	80042c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042bc:	4b8b      	ldr	r3, [pc, #556]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 80042be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c0:	4a8a      	ldr	r2, [pc, #552]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 80042c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042c6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 8108 	beq.w	80044e2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	f040 80d0 	bne.w	800447c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042dc:	4b83      	ldr	r3, [pc, #524]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	f003 0203 	and.w	r2, r3, #3
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d130      	bne.n	8004352 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042fa:	3b01      	subs	r3, #1
 80042fc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042fe:	429a      	cmp	r2, r3
 8004300:	d127      	bne.n	8004352 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800430c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800430e:	429a      	cmp	r2, r3
 8004310:	d11f      	bne.n	8004352 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800431c:	2a07      	cmp	r2, #7
 800431e:	bf14      	ite	ne
 8004320:	2201      	movne	r2, #1
 8004322:	2200      	moveq	r2, #0
 8004324:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004326:	4293      	cmp	r3, r2
 8004328:	d113      	bne.n	8004352 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004334:	085b      	lsrs	r3, r3, #1
 8004336:	3b01      	subs	r3, #1
 8004338:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800433a:	429a      	cmp	r2, r3
 800433c:	d109      	bne.n	8004352 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004348:	085b      	lsrs	r3, r3, #1
 800434a:	3b01      	subs	r3, #1
 800434c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800434e:	429a      	cmp	r2, r3
 8004350:	d06e      	beq.n	8004430 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	2b0c      	cmp	r3, #12
 8004356:	d069      	beq.n	800442c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004358:	4b64      	ldr	r3, [pc, #400]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d105      	bne.n	8004370 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004364:	4b61      	ldr	r3, [pc, #388]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e0b7      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004374:	4b5d      	ldr	r3, [pc, #372]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a5c      	ldr	r2, [pc, #368]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 800437a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800437e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004380:	f7fd fe06 	bl	8001f90 <HAL_GetTick>
 8004384:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004386:	e008      	b.n	800439a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004388:	f7fd fe02 	bl	8001f90 <HAL_GetTick>
 800438c:	4602      	mov	r2, r0
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	1ad3      	subs	r3, r2, r3
 8004392:	2b02      	cmp	r3, #2
 8004394:	d901      	bls.n	800439a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e0a4      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800439a:	4b54      	ldr	r3, [pc, #336]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d1f0      	bne.n	8004388 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043a6:	4b51      	ldr	r3, [pc, #324]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 80043a8:	68da      	ldr	r2, [r3, #12]
 80043aa:	4b51      	ldr	r3, [pc, #324]	; (80044f0 <HAL_RCC_OscConfig+0x7c8>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80043b6:	3a01      	subs	r2, #1
 80043b8:	0112      	lsls	r2, r2, #4
 80043ba:	4311      	orrs	r1, r2
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80043c0:	0212      	lsls	r2, r2, #8
 80043c2:	4311      	orrs	r1, r2
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80043c8:	0852      	lsrs	r2, r2, #1
 80043ca:	3a01      	subs	r2, #1
 80043cc:	0552      	lsls	r2, r2, #21
 80043ce:	4311      	orrs	r1, r2
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80043d4:	0852      	lsrs	r2, r2, #1
 80043d6:	3a01      	subs	r2, #1
 80043d8:	0652      	lsls	r2, r2, #25
 80043da:	4311      	orrs	r1, r2
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043e0:	0912      	lsrs	r2, r2, #4
 80043e2:	0452      	lsls	r2, r2, #17
 80043e4:	430a      	orrs	r2, r1
 80043e6:	4941      	ldr	r1, [pc, #260]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043ec:	4b3f      	ldr	r3, [pc, #252]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a3e      	ldr	r2, [pc, #248]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 80043f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043f8:	4b3c      	ldr	r3, [pc, #240]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 80043fa:	68db      	ldr	r3, [r3, #12]
 80043fc:	4a3b      	ldr	r2, [pc, #236]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 80043fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004402:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004404:	f7fd fdc4 	bl	8001f90 <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800440c:	f7fd fdc0 	bl	8001f90 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b02      	cmp	r3, #2
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e062      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800441e:	4b33      	ldr	r3, [pc, #204]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d0f0      	beq.n	800440c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800442a:	e05a      	b.n	80044e2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e059      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004430:	4b2e      	ldr	r3, [pc, #184]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d152      	bne.n	80044e2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800443c:	4b2b      	ldr	r3, [pc, #172]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a2a      	ldr	r2, [pc, #168]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 8004442:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004446:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004448:	4b28      	ldr	r3, [pc, #160]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	4a27      	ldr	r2, [pc, #156]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 800444e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004452:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004454:	f7fd fd9c 	bl	8001f90 <HAL_GetTick>
 8004458:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800445a:	e008      	b.n	800446e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800445c:	f7fd fd98 	bl	8001f90 <HAL_GetTick>
 8004460:	4602      	mov	r2, r0
 8004462:	693b      	ldr	r3, [r7, #16]
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	2b02      	cmp	r3, #2
 8004468:	d901      	bls.n	800446e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800446a:	2303      	movs	r3, #3
 800446c:	e03a      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800446e:	4b1f      	ldr	r3, [pc, #124]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d0f0      	beq.n	800445c <HAL_RCC_OscConfig+0x734>
 800447a:	e032      	b.n	80044e2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2b0c      	cmp	r3, #12
 8004480:	d02d      	beq.n	80044de <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004482:	4b1a      	ldr	r3, [pc, #104]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a19      	ldr	r2, [pc, #100]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 8004488:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800448c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800448e:	4b17      	ldr	r3, [pc, #92]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d105      	bne.n	80044a6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800449a:	4b14      	ldr	r3, [pc, #80]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	4a13      	ldr	r2, [pc, #76]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 80044a0:	f023 0303 	bic.w	r3, r3, #3
 80044a4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80044a6:	4b11      	ldr	r3, [pc, #68]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 80044a8:	68db      	ldr	r3, [r3, #12]
 80044aa:	4a10      	ldr	r2, [pc, #64]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 80044ac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80044b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044b4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b6:	f7fd fd6b 	bl	8001f90 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044bc:	e008      	b.n	80044d0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80044be:	f7fd fd67 	bl	8001f90 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d901      	bls.n	80044d0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80044cc:	2303      	movs	r3, #3
 80044ce:	e009      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044d0:	4b06      	ldr	r3, [pc, #24]	; (80044ec <HAL_RCC_OscConfig+0x7c4>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1f0      	bne.n	80044be <HAL_RCC_OscConfig+0x796>
 80044dc:	e001      	b.n	80044e2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80044de:	2301      	movs	r3, #1
 80044e0:	e000      	b.n	80044e4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80044e2:	2300      	movs	r3, #0
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3720      	adds	r7, #32
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	40021000 	.word	0x40021000
 80044f0:	f99d808c 	.word	0xf99d808c

080044f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
 80044fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	e0c8      	b.n	800469a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004508:	4b66      	ldr	r3, [pc, #408]	; (80046a4 <HAL_RCC_ClockConfig+0x1b0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	683a      	ldr	r2, [r7, #0]
 8004512:	429a      	cmp	r2, r3
 8004514:	d910      	bls.n	8004538 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004516:	4b63      	ldr	r3, [pc, #396]	; (80046a4 <HAL_RCC_ClockConfig+0x1b0>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f023 0207 	bic.w	r2, r3, #7
 800451e:	4961      	ldr	r1, [pc, #388]	; (80046a4 <HAL_RCC_ClockConfig+0x1b0>)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	4313      	orrs	r3, r2
 8004524:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004526:	4b5f      	ldr	r3, [pc, #380]	; (80046a4 <HAL_RCC_ClockConfig+0x1b0>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0307 	and.w	r3, r3, #7
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	429a      	cmp	r2, r3
 8004532:	d001      	beq.n	8004538 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004534:	2301      	movs	r3, #1
 8004536:	e0b0      	b.n	800469a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0301 	and.w	r3, r3, #1
 8004540:	2b00      	cmp	r3, #0
 8004542:	d04c      	beq.n	80045de <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	2b03      	cmp	r3, #3
 800454a:	d107      	bne.n	800455c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800454c:	4b56      	ldr	r3, [pc, #344]	; (80046a8 <HAL_RCC_ClockConfig+0x1b4>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d121      	bne.n	800459c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004558:	2301      	movs	r3, #1
 800455a:	e09e      	b.n	800469a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	2b02      	cmp	r3, #2
 8004562:	d107      	bne.n	8004574 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004564:	4b50      	ldr	r3, [pc, #320]	; (80046a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d115      	bne.n	800459c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e092      	b.n	800469a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d107      	bne.n	800458c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800457c:	4b4a      	ldr	r3, [pc, #296]	; (80046a8 <HAL_RCC_ClockConfig+0x1b4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d109      	bne.n	800459c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e086      	b.n	800469a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800458c:	4b46      	ldr	r3, [pc, #280]	; (80046a8 <HAL_RCC_ClockConfig+0x1b4>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004598:	2301      	movs	r3, #1
 800459a:	e07e      	b.n	800469a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800459c:	4b42      	ldr	r3, [pc, #264]	; (80046a8 <HAL_RCC_ClockConfig+0x1b4>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f023 0203 	bic.w	r2, r3, #3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	493f      	ldr	r1, [pc, #252]	; (80046a8 <HAL_RCC_ClockConfig+0x1b4>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045ae:	f7fd fcef 	bl	8001f90 <HAL_GetTick>
 80045b2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b4:	e00a      	b.n	80045cc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b6:	f7fd fceb 	bl	8001f90 <HAL_GetTick>
 80045ba:	4602      	mov	r2, r0
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d901      	bls.n	80045cc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80045c8:	2303      	movs	r3, #3
 80045ca:	e066      	b.n	800469a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045cc:	4b36      	ldr	r3, [pc, #216]	; (80046a8 <HAL_RCC_ClockConfig+0x1b4>)
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 020c 	and.w	r2, r3, #12
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	429a      	cmp	r2, r3
 80045dc:	d1eb      	bne.n	80045b6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d008      	beq.n	80045fc <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045ea:	4b2f      	ldr	r3, [pc, #188]	; (80046a8 <HAL_RCC_ClockConfig+0x1b4>)
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	492c      	ldr	r1, [pc, #176]	; (80046a8 <HAL_RCC_ClockConfig+0x1b4>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045fc:	4b29      	ldr	r3, [pc, #164]	; (80046a4 <HAL_RCC_ClockConfig+0x1b0>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d210      	bcs.n	800462c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800460a:	4b26      	ldr	r3, [pc, #152]	; (80046a4 <HAL_RCC_ClockConfig+0x1b0>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f023 0207 	bic.w	r2, r3, #7
 8004612:	4924      	ldr	r1, [pc, #144]	; (80046a4 <HAL_RCC_ClockConfig+0x1b0>)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	4313      	orrs	r3, r2
 8004618:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800461a:	4b22      	ldr	r3, [pc, #136]	; (80046a4 <HAL_RCC_ClockConfig+0x1b0>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d001      	beq.n	800462c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e036      	b.n	800469a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0304 	and.w	r3, r3, #4
 8004634:	2b00      	cmp	r3, #0
 8004636:	d008      	beq.n	800464a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004638:	4b1b      	ldr	r3, [pc, #108]	; (80046a8 <HAL_RCC_ClockConfig+0x1b4>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4918      	ldr	r1, [pc, #96]	; (80046a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004646:	4313      	orrs	r3, r2
 8004648:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d009      	beq.n	800466a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004656:	4b14      	ldr	r3, [pc, #80]	; (80046a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	00db      	lsls	r3, r3, #3
 8004664:	4910      	ldr	r1, [pc, #64]	; (80046a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004666:	4313      	orrs	r3, r2
 8004668:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800466a:	f000 f825 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 800466e:	4602      	mov	r2, r0
 8004670:	4b0d      	ldr	r3, [pc, #52]	; (80046a8 <HAL_RCC_ClockConfig+0x1b4>)
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	091b      	lsrs	r3, r3, #4
 8004676:	f003 030f 	and.w	r3, r3, #15
 800467a:	490c      	ldr	r1, [pc, #48]	; (80046ac <HAL_RCC_ClockConfig+0x1b8>)
 800467c:	5ccb      	ldrb	r3, [r1, r3]
 800467e:	f003 031f 	and.w	r3, r3, #31
 8004682:	fa22 f303 	lsr.w	r3, r2, r3
 8004686:	4a0a      	ldr	r2, [pc, #40]	; (80046b0 <HAL_RCC_ClockConfig+0x1bc>)
 8004688:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800468a:	4b0a      	ldr	r3, [pc, #40]	; (80046b4 <HAL_RCC_ClockConfig+0x1c0>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f7fd f94e 	bl	8001930 <HAL_InitTick>
 8004694:	4603      	mov	r3, r0
 8004696:	72fb      	strb	r3, [r7, #11]

  return status;
 8004698:	7afb      	ldrb	r3, [r7, #11]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	40022000 	.word	0x40022000
 80046a8:	40021000 	.word	0x40021000
 80046ac:	0800c854 	.word	0x0800c854
 80046b0:	20000010 	.word	0x20000010
 80046b4:	20000014 	.word	0x20000014

080046b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b089      	sub	sp, #36	; 0x24
 80046bc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	2300      	movs	r3, #0
 80046c4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046c6:	4b3e      	ldr	r3, [pc, #248]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f003 030c 	and.w	r3, r3, #12
 80046ce:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046d0:	4b3b      	ldr	r3, [pc, #236]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d005      	beq.n	80046ec <HAL_RCC_GetSysClockFreq+0x34>
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	2b0c      	cmp	r3, #12
 80046e4:	d121      	bne.n	800472a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2b01      	cmp	r3, #1
 80046ea:	d11e      	bne.n	800472a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046ec:	4b34      	ldr	r3, [pc, #208]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0308 	and.w	r3, r3, #8
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d107      	bne.n	8004708 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046f8:	4b31      	ldr	r3, [pc, #196]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046fe:	0a1b      	lsrs	r3, r3, #8
 8004700:	f003 030f 	and.w	r3, r3, #15
 8004704:	61fb      	str	r3, [r7, #28]
 8004706:	e005      	b.n	8004714 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004708:	4b2d      	ldr	r3, [pc, #180]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	091b      	lsrs	r3, r3, #4
 800470e:	f003 030f 	and.w	r3, r3, #15
 8004712:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004714:	4a2b      	ldr	r2, [pc, #172]	; (80047c4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800471c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d10d      	bne.n	8004740 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004728:	e00a      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	2b04      	cmp	r3, #4
 800472e:	d102      	bne.n	8004736 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004730:	4b25      	ldr	r3, [pc, #148]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004732:	61bb      	str	r3, [r7, #24]
 8004734:	e004      	b.n	8004740 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	2b08      	cmp	r3, #8
 800473a:	d101      	bne.n	8004740 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800473c:	4b23      	ldr	r3, [pc, #140]	; (80047cc <HAL_RCC_GetSysClockFreq+0x114>)
 800473e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	2b0c      	cmp	r3, #12
 8004744:	d134      	bne.n	80047b0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004746:	4b1e      	ldr	r3, [pc, #120]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f003 0303 	and.w	r3, r3, #3
 800474e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	2b02      	cmp	r3, #2
 8004754:	d003      	beq.n	800475e <HAL_RCC_GetSysClockFreq+0xa6>
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b03      	cmp	r3, #3
 800475a:	d003      	beq.n	8004764 <HAL_RCC_GetSysClockFreq+0xac>
 800475c:	e005      	b.n	800476a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800475e:	4b1a      	ldr	r3, [pc, #104]	; (80047c8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004760:	617b      	str	r3, [r7, #20]
      break;
 8004762:	e005      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004764:	4b19      	ldr	r3, [pc, #100]	; (80047cc <HAL_RCC_GetSysClockFreq+0x114>)
 8004766:	617b      	str	r3, [r7, #20]
      break;
 8004768:	e002      	b.n	8004770 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	617b      	str	r3, [r7, #20]
      break;
 800476e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004770:	4b13      	ldr	r3, [pc, #76]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	091b      	lsrs	r3, r3, #4
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	3301      	adds	r3, #1
 800477c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800477e:	4b10      	ldr	r3, [pc, #64]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	0a1b      	lsrs	r3, r3, #8
 8004784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	fb02 f203 	mul.w	r2, r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	fbb2 f3f3 	udiv	r3, r2, r3
 8004794:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004796:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	0e5b      	lsrs	r3, r3, #25
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	3301      	adds	r3, #1
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ae:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047b0:	69bb      	ldr	r3, [r7, #24]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3724      	adds	r7, #36	; 0x24
 80047b6:	46bd      	mov	sp, r7
 80047b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047bc:	4770      	bx	lr
 80047be:	bf00      	nop
 80047c0:	40021000 	.word	0x40021000
 80047c4:	0800c86c 	.word	0x0800c86c
 80047c8:	00f42400 	.word	0x00f42400
 80047cc:	007a1200 	.word	0x007a1200

080047d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047d4:	4b03      	ldr	r3, [pc, #12]	; (80047e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047d6:	681b      	ldr	r3, [r3, #0]
}
 80047d8:	4618      	mov	r0, r3
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	20000010 	.word	0x20000010

080047e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047ec:	f7ff fff0 	bl	80047d0 <HAL_RCC_GetHCLKFreq>
 80047f0:	4602      	mov	r2, r0
 80047f2:	4b06      	ldr	r3, [pc, #24]	; (800480c <HAL_RCC_GetPCLK1Freq+0x24>)
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	0a1b      	lsrs	r3, r3, #8
 80047f8:	f003 0307 	and.w	r3, r3, #7
 80047fc:	4904      	ldr	r1, [pc, #16]	; (8004810 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047fe:	5ccb      	ldrb	r3, [r1, r3]
 8004800:	f003 031f 	and.w	r3, r3, #31
 8004804:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004808:	4618      	mov	r0, r3
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40021000 	.word	0x40021000
 8004810:	0800c864 	.word	0x0800c864

08004814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004818:	f7ff ffda 	bl	80047d0 <HAL_RCC_GetHCLKFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b06      	ldr	r3, [pc, #24]	; (8004838 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	0adb      	lsrs	r3, r3, #11
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	4904      	ldr	r1, [pc, #16]	; (800483c <HAL_RCC_GetPCLK2Freq+0x28>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	f003 031f 	and.w	r3, r3, #31
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004834:	4618      	mov	r0, r3
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40021000 	.word	0x40021000
 800483c:	0800c864 	.word	0x0800c864

08004840 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004840:	b480      	push	{r7}
 8004842:	b083      	sub	sp, #12
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	220f      	movs	r2, #15
 800484e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004850:	4b12      	ldr	r3, [pc, #72]	; (800489c <HAL_RCC_GetClockConfig+0x5c>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 0203 	and.w	r2, r3, #3
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800485c:	4b0f      	ldr	r3, [pc, #60]	; (800489c <HAL_RCC_GetClockConfig+0x5c>)
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004868:	4b0c      	ldr	r3, [pc, #48]	; (800489c <HAL_RCC_GetClockConfig+0x5c>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004874:	4b09      	ldr	r3, [pc, #36]	; (800489c <HAL_RCC_GetClockConfig+0x5c>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	08db      	lsrs	r3, r3, #3
 800487a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004882:	4b07      	ldr	r3, [pc, #28]	; (80048a0 <HAL_RCC_GetClockConfig+0x60>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0207 	and.w	r2, r3, #7
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	601a      	str	r2, [r3, #0]
}
 800488e:	bf00      	nop
 8004890:	370c      	adds	r7, #12
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	40021000 	.word	0x40021000
 80048a0:	40022000 	.word	0x40022000

080048a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b086      	sub	sp, #24
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80048ac:	2300      	movs	r3, #0
 80048ae:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80048b0:	4b2a      	ldr	r3, [pc, #168]	; (800495c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d003      	beq.n	80048c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80048bc:	f7ff f9d0 	bl	8003c60 <HAL_PWREx_GetVoltageRange>
 80048c0:	6178      	str	r0, [r7, #20]
 80048c2:	e014      	b.n	80048ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80048c4:	4b25      	ldr	r3, [pc, #148]	; (800495c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048c8:	4a24      	ldr	r2, [pc, #144]	; (800495c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048ce:	6593      	str	r3, [r2, #88]	; 0x58
 80048d0:	4b22      	ldr	r3, [pc, #136]	; (800495c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048d8:	60fb      	str	r3, [r7, #12]
 80048da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80048dc:	f7ff f9c0 	bl	8003c60 <HAL_PWREx_GetVoltageRange>
 80048e0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80048e2:	4b1e      	ldr	r3, [pc, #120]	; (800495c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048e6:	4a1d      	ldr	r2, [pc, #116]	; (800495c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80048e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048f4:	d10b      	bne.n	800490e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2b80      	cmp	r3, #128	; 0x80
 80048fa:	d919      	bls.n	8004930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2ba0      	cmp	r3, #160	; 0xa0
 8004900:	d902      	bls.n	8004908 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004902:	2302      	movs	r3, #2
 8004904:	613b      	str	r3, [r7, #16]
 8004906:	e013      	b.n	8004930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004908:	2301      	movs	r3, #1
 800490a:	613b      	str	r3, [r7, #16]
 800490c:	e010      	b.n	8004930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b80      	cmp	r3, #128	; 0x80
 8004912:	d902      	bls.n	800491a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004914:	2303      	movs	r3, #3
 8004916:	613b      	str	r3, [r7, #16]
 8004918:	e00a      	b.n	8004930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2b80      	cmp	r3, #128	; 0x80
 800491e:	d102      	bne.n	8004926 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004920:	2302      	movs	r3, #2
 8004922:	613b      	str	r3, [r7, #16]
 8004924:	e004      	b.n	8004930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b70      	cmp	r3, #112	; 0x70
 800492a:	d101      	bne.n	8004930 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800492c:	2301      	movs	r3, #1
 800492e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004930:	4b0b      	ldr	r3, [pc, #44]	; (8004960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f023 0207 	bic.w	r2, r3, #7
 8004938:	4909      	ldr	r1, [pc, #36]	; (8004960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4313      	orrs	r3, r2
 800493e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004940:	4b07      	ldr	r3, [pc, #28]	; (8004960 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0307 	and.w	r3, r3, #7
 8004948:	693a      	ldr	r2, [r7, #16]
 800494a:	429a      	cmp	r2, r3
 800494c:	d001      	beq.n	8004952 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e000      	b.n	8004954 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	40021000 	.word	0x40021000
 8004960:	40022000 	.word	0x40022000

08004964 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800496c:	2300      	movs	r3, #0
 800496e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004970:	2300      	movs	r3, #0
 8004972:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800497c:	2b00      	cmp	r3, #0
 800497e:	d041      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004984:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004988:	d02a      	beq.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800498a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800498e:	d824      	bhi.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004990:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004994:	d008      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004996:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800499a:	d81e      	bhi.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x76>
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00a      	beq.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80049a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049a4:	d010      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80049a6:	e018      	b.n	80049da <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80049a8:	4b86      	ldr	r3, [pc, #536]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	4a85      	ldr	r2, [pc, #532]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049b4:	e015      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3304      	adds	r3, #4
 80049ba:	2100      	movs	r1, #0
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fabb 	bl	8004f38 <RCCEx_PLLSAI1_Config>
 80049c2:	4603      	mov	r3, r0
 80049c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049c6:	e00c      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	3320      	adds	r3, #32
 80049cc:	2100      	movs	r1, #0
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fba6 	bl	8005120 <RCCEx_PLLSAI2_Config>
 80049d4:	4603      	mov	r3, r0
 80049d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80049d8:	e003      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	74fb      	strb	r3, [r7, #19]
      break;
 80049de:	e000      	b.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80049e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049e2:	7cfb      	ldrb	r3, [r7, #19]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d10b      	bne.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049e8:	4b76      	ldr	r3, [pc, #472]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80049f6:	4973      	ldr	r1, [pc, #460]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80049fe:	e001      	b.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a00:	7cfb      	ldrb	r3, [r7, #19]
 8004a02:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d041      	beq.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a14:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a18:	d02a      	beq.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004a1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004a1e:	d824      	bhi.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a20:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a24:	d008      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004a2a:	d81e      	bhi.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d00a      	beq.n	8004a46 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004a30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a34:	d010      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004a36:	e018      	b.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004a38:	4b62      	ldr	r3, [pc, #392]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	4a61      	ldr	r2, [pc, #388]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a42:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a44:	e015      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	2100      	movs	r1, #0
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	f000 fa73 	bl	8004f38 <RCCEx_PLLSAI1_Config>
 8004a52:	4603      	mov	r3, r0
 8004a54:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a56:	e00c      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	3320      	adds	r3, #32
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f000 fb5e 	bl	8005120 <RCCEx_PLLSAI2_Config>
 8004a64:	4603      	mov	r3, r0
 8004a66:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004a68:	e003      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	74fb      	strb	r3, [r7, #19]
      break;
 8004a6e:	e000      	b.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004a70:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004a72:	7cfb      	ldrb	r3, [r7, #19]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10b      	bne.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004a78:	4b52      	ldr	r3, [pc, #328]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a86:	494f      	ldr	r1, [pc, #316]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a8e:	e001      	b.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a90:	7cfb      	ldrb	r3, [r7, #19]
 8004a92:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 80a0 	beq.w	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004aa6:	4b47      	ldr	r3, [pc, #284]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e000      	b.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d00d      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004abc:	4b41      	ldr	r3, [pc, #260]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac0:	4a40      	ldr	r2, [pc, #256]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac6:	6593      	str	r3, [r2, #88]	; 0x58
 8004ac8:	4b3e      	ldr	r3, [pc, #248]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004acc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ad0:	60bb      	str	r3, [r7, #8]
 8004ad2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ad8:	4b3b      	ldr	r3, [pc, #236]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a3a      	ldr	r2, [pc, #232]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ade:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ae2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004ae4:	f7fd fa54 	bl	8001f90 <HAL_GetTick>
 8004ae8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004aea:	e009      	b.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aec:	f7fd fa50 	bl	8001f90 <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d902      	bls.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	74fb      	strb	r3, [r7, #19]
        break;
 8004afe:	e005      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004b00:	4b31      	ldr	r3, [pc, #196]	; (8004bc8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0ef      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004b0c:	7cfb      	ldrb	r3, [r7, #19]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d15c      	bne.n	8004bcc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004b12:	4b2c      	ldr	r3, [pc, #176]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b1c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d01f      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b2a:	697a      	ldr	r2, [r7, #20]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d019      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004b30:	4b24      	ldr	r3, [pc, #144]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b3a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b3c:	4b21      	ldr	r3, [pc, #132]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b42:	4a20      	ldr	r2, [pc, #128]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b4c:	4b1d      	ldr	r3, [pc, #116]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b52:	4a1c      	ldr	r2, [pc, #112]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004b5c:	4a19      	ldr	r2, [pc, #100]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d016      	beq.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b6e:	f7fd fa0f 	bl	8001f90 <HAL_GetTick>
 8004b72:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b74:	e00b      	b.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b76:	f7fd fa0b 	bl	8001f90 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d902      	bls.n	8004b8e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004b88:	2303      	movs	r3, #3
 8004b8a:	74fb      	strb	r3, [r7, #19]
            break;
 8004b8c:	e006      	b.n	8004b9c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004b8e:	4b0d      	ldr	r3, [pc, #52]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004b90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b94:	f003 0302 	and.w	r3, r3, #2
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0ec      	beq.n	8004b76 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004b9c:	7cfb      	ldrb	r3, [r7, #19]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d10c      	bne.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ba2:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ba8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004bb2:	4904      	ldr	r1, [pc, #16]	; (8004bc4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004bba:	e009      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004bbc:	7cfb      	ldrb	r3, [r7, #19]
 8004bbe:	74bb      	strb	r3, [r7, #18]
 8004bc0:	e006      	b.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004bc2:	bf00      	nop
 8004bc4:	40021000 	.word	0x40021000
 8004bc8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bcc:	7cfb      	ldrb	r3, [r7, #19]
 8004bce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004bd0:	7c7b      	ldrb	r3, [r7, #17]
 8004bd2:	2b01      	cmp	r3, #1
 8004bd4:	d105      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bd6:	4b9e      	ldr	r3, [pc, #632]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bda:	4a9d      	ldr	r2, [pc, #628]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004be0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00a      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004bee:	4b98      	ldr	r3, [pc, #608]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf4:	f023 0203 	bic.w	r2, r3, #3
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bfc:	4994      	ldr	r1, [pc, #592]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004c10:	4b8f      	ldr	r3, [pc, #572]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c16:	f023 020c 	bic.w	r2, r3, #12
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1e:	498c      	ldr	r1, [pc, #560]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f003 0304 	and.w	r3, r3, #4
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004c32:	4b87      	ldr	r3, [pc, #540]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c38:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c40:	4983      	ldr	r1, [pc, #524]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0308 	and.w	r3, r3, #8
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00a      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004c54:	4b7e      	ldr	r3, [pc, #504]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c62:	497b      	ldr	r1, [pc, #492]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0310 	and.w	r3, r3, #16
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d00a      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004c76:	4b76      	ldr	r3, [pc, #472]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c84:	4972      	ldr	r1, [pc, #456]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0320 	and.w	r3, r3, #32
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00a      	beq.n	8004cae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004c98:	4b6d      	ldr	r3, [pc, #436]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ca6:	496a      	ldr	r1, [pc, #424]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00a      	beq.n	8004cd0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004cba:	4b65      	ldr	r3, [pc, #404]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cc0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cc8:	4961      	ldr	r1, [pc, #388]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00a      	beq.n	8004cf2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004cdc:	4b5c      	ldr	r3, [pc, #368]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ce2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cea:	4959      	ldr	r1, [pc, #356]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cec:	4313      	orrs	r3, r2
 8004cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004cfe:	4b54      	ldr	r3, [pc, #336]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d04:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0c:	4950      	ldr	r1, [pc, #320]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00a      	beq.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004d20:	4b4b      	ldr	r3, [pc, #300]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d26:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d2e:	4948      	ldr	r1, [pc, #288]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d00a      	beq.n	8004d58 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004d42:	4b43      	ldr	r3, [pc, #268]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d50:	493f      	ldr	r1, [pc, #252]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d52:	4313      	orrs	r3, r2
 8004d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d028      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004d64:	4b3a      	ldr	r3, [pc, #232]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d72:	4937      	ldr	r1, [pc, #220]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d82:	d106      	bne.n	8004d92 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d84:	4b32      	ldr	r3, [pc, #200]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	4a31      	ldr	r2, [pc, #196]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d8e:	60d3      	str	r3, [r2, #12]
 8004d90:	e011      	b.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d9a:	d10c      	bne.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	3304      	adds	r3, #4
 8004da0:	2101      	movs	r1, #1
 8004da2:	4618      	mov	r0, r3
 8004da4:	f000 f8c8 	bl	8004f38 <RCCEx_PLLSAI1_Config>
 8004da8:	4603      	mov	r3, r0
 8004daa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004dac:	7cfb      	ldrb	r3, [r7, #19]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004db2:	7cfb      	ldrb	r3, [r7, #19]
 8004db4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d028      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004dc2:	4b23      	ldr	r3, [pc, #140]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd0:	491f      	ldr	r1, [pc, #124]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ddc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004de0:	d106      	bne.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004de2:	4b1b      	ldr	r3, [pc, #108]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	4a1a      	ldr	r2, [pc, #104]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004de8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004dec:	60d3      	str	r3, [r2, #12]
 8004dee:	e011      	b.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004df8:	d10c      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	2101      	movs	r1, #1
 8004e00:	4618      	mov	r0, r3
 8004e02:	f000 f899 	bl	8004f38 <RCCEx_PLLSAI1_Config>
 8004e06:	4603      	mov	r3, r0
 8004e08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e0a:	7cfb      	ldrb	r3, [r7, #19]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d001      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004e10:	7cfb      	ldrb	r3, [r7, #19]
 8004e12:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d02b      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004e20:	4b0b      	ldr	r3, [pc, #44]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e2e:	4908      	ldr	r1, [pc, #32]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e30:	4313      	orrs	r3, r2
 8004e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e3e:	d109      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e40:	4b03      	ldr	r3, [pc, #12]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4a02      	ldr	r2, [pc, #8]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004e46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e4a:	60d3      	str	r3, [r2, #12]
 8004e4c:	e014      	b.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004e4e:	bf00      	nop
 8004e50:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e58:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004e5c:	d10c      	bne.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3304      	adds	r3, #4
 8004e62:	2101      	movs	r1, #1
 8004e64:	4618      	mov	r0, r3
 8004e66:	f000 f867 	bl	8004f38 <RCCEx_PLLSAI1_Config>
 8004e6a:	4603      	mov	r3, r0
 8004e6c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004e6e:	7cfb      	ldrb	r3, [r7, #19]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d001      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004e74:	7cfb      	ldrb	r3, [r7, #19]
 8004e76:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d02f      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e84:	4b2b      	ldr	r3, [pc, #172]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e92:	4928      	ldr	r1, [pc, #160]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004e94:	4313      	orrs	r3, r2
 8004e96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004e9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004ea2:	d10d      	bne.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	3304      	adds	r3, #4
 8004ea8:	2102      	movs	r1, #2
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 f844 	bl	8004f38 <RCCEx_PLLSAI1_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eb4:	7cfb      	ldrb	r3, [r7, #19]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d014      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004eba:	7cfb      	ldrb	r3, [r7, #19]
 8004ebc:	74bb      	strb	r3, [r7, #18]
 8004ebe:	e011      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ec8:	d10c      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3320      	adds	r3, #32
 8004ece:	2102      	movs	r1, #2
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f000 f925 	bl	8005120 <RCCEx_PLLSAI2_Config>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004eda:	7cfb      	ldrb	r3, [r7, #19]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004ee0:	7cfb      	ldrb	r3, [r7, #19]
 8004ee2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004ef0:	4b10      	ldr	r3, [pc, #64]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ef6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004efe:	490d      	ldr	r1, [pc, #52]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00b      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f12:	4b08      	ldr	r3, [pc, #32]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f18:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f22:	4904      	ldr	r1, [pc, #16]	; (8004f34 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004f24:	4313      	orrs	r3, r2
 8004f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004f2a:	7cbb      	ldrb	r3, [r7, #18]
}
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	3718      	adds	r7, #24
 8004f30:	46bd      	mov	sp, r7
 8004f32:	bd80      	pop	{r7, pc}
 8004f34:	40021000 	.word	0x40021000

08004f38 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004f46:	4b75      	ldr	r3, [pc, #468]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d018      	beq.n	8004f84 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004f52:	4b72      	ldr	r3, [pc, #456]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f54:	68db      	ldr	r3, [r3, #12]
 8004f56:	f003 0203 	and.w	r2, r3, #3
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d10d      	bne.n	8004f7e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
       ||
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d009      	beq.n	8004f7e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004f6a:	4b6c      	ldr	r3, [pc, #432]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	091b      	lsrs	r3, r3, #4
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	1c5a      	adds	r2, r3, #1
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	685b      	ldr	r3, [r3, #4]
       ||
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d047      	beq.n	800500e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	73fb      	strb	r3, [r7, #15]
 8004f82:	e044      	b.n	800500e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b03      	cmp	r3, #3
 8004f8a:	d018      	beq.n	8004fbe <RCCEx_PLLSAI1_Config+0x86>
 8004f8c:	2b03      	cmp	r3, #3
 8004f8e:	d825      	bhi.n	8004fdc <RCCEx_PLLSAI1_Config+0xa4>
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d002      	beq.n	8004f9a <RCCEx_PLLSAI1_Config+0x62>
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d009      	beq.n	8004fac <RCCEx_PLLSAI1_Config+0x74>
 8004f98:	e020      	b.n	8004fdc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004f9a:	4b60      	ldr	r3, [pc, #384]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d11d      	bne.n	8004fe2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004faa:	e01a      	b.n	8004fe2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004fac:	4b5b      	ldr	r3, [pc, #364]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d116      	bne.n	8004fe6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004fbc:	e013      	b.n	8004fe6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004fbe:	4b57      	ldr	r3, [pc, #348]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10f      	bne.n	8004fea <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004fca:	4b54      	ldr	r3, [pc, #336]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d109      	bne.n	8004fea <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004fda:	e006      	b.n	8004fea <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
      break;
 8004fe0:	e004      	b.n	8004fec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fe2:	bf00      	nop
 8004fe4:	e002      	b.n	8004fec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fe6:	bf00      	nop
 8004fe8:	e000      	b.n	8004fec <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004fea:	bf00      	nop
    }

    if(status == HAL_OK)
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d10d      	bne.n	800500e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004ff2:	4b4a      	ldr	r3, [pc, #296]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6819      	ldr	r1, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	3b01      	subs	r3, #1
 8005004:	011b      	lsls	r3, r3, #4
 8005006:	430b      	orrs	r3, r1
 8005008:	4944      	ldr	r1, [pc, #272]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 800500a:	4313      	orrs	r3, r2
 800500c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d17d      	bne.n	8005110 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005014:	4b41      	ldr	r3, [pc, #260]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a40      	ldr	r2, [pc, #256]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 800501a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800501e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005020:	f7fc ffb6 	bl	8001f90 <HAL_GetTick>
 8005024:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005026:	e009      	b.n	800503c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005028:	f7fc ffb2 	bl	8001f90 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	2b02      	cmp	r3, #2
 8005034:	d902      	bls.n	800503c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005036:	2303      	movs	r3, #3
 8005038:	73fb      	strb	r3, [r7, #15]
        break;
 800503a:	e005      	b.n	8005048 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800503c:	4b37      	ldr	r3, [pc, #220]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1ef      	bne.n	8005028 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005048:	7bfb      	ldrb	r3, [r7, #15]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d160      	bne.n	8005110 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	2b00      	cmp	r3, #0
 8005052:	d111      	bne.n	8005078 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005054:	4b31      	ldr	r3, [pc, #196]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800505c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	6892      	ldr	r2, [r2, #8]
 8005064:	0211      	lsls	r1, r2, #8
 8005066:	687a      	ldr	r2, [r7, #4]
 8005068:	68d2      	ldr	r2, [r2, #12]
 800506a:	0912      	lsrs	r2, r2, #4
 800506c:	0452      	lsls	r2, r2, #17
 800506e:	430a      	orrs	r2, r1
 8005070:	492a      	ldr	r1, [pc, #168]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005072:	4313      	orrs	r3, r2
 8005074:	610b      	str	r3, [r1, #16]
 8005076:	e027      	b.n	80050c8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	2b01      	cmp	r3, #1
 800507c:	d112      	bne.n	80050a4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800507e:	4b27      	ldr	r3, [pc, #156]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005086:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	6892      	ldr	r2, [r2, #8]
 800508e:	0211      	lsls	r1, r2, #8
 8005090:	687a      	ldr	r2, [r7, #4]
 8005092:	6912      	ldr	r2, [r2, #16]
 8005094:	0852      	lsrs	r2, r2, #1
 8005096:	3a01      	subs	r2, #1
 8005098:	0552      	lsls	r2, r2, #21
 800509a:	430a      	orrs	r2, r1
 800509c:	491f      	ldr	r1, [pc, #124]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 800509e:	4313      	orrs	r3, r2
 80050a0:	610b      	str	r3, [r1, #16]
 80050a2:	e011      	b.n	80050c8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80050a4:	4b1d      	ldr	r3, [pc, #116]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050a6:	691b      	ldr	r3, [r3, #16]
 80050a8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80050ac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6892      	ldr	r2, [r2, #8]
 80050b4:	0211      	lsls	r1, r2, #8
 80050b6:	687a      	ldr	r2, [r7, #4]
 80050b8:	6952      	ldr	r2, [r2, #20]
 80050ba:	0852      	lsrs	r2, r2, #1
 80050bc:	3a01      	subs	r2, #1
 80050be:	0652      	lsls	r2, r2, #25
 80050c0:	430a      	orrs	r2, r1
 80050c2:	4916      	ldr	r1, [pc, #88]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80050c8:	4b14      	ldr	r3, [pc, #80]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a13      	ldr	r2, [pc, #76]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050ce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050d2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d4:	f7fc ff5c 	bl	8001f90 <HAL_GetTick>
 80050d8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050da:	e009      	b.n	80050f0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80050dc:	f7fc ff58 	bl	8001f90 <HAL_GetTick>
 80050e0:	4602      	mov	r2, r0
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	1ad3      	subs	r3, r2, r3
 80050e6:	2b02      	cmp	r3, #2
 80050e8:	d902      	bls.n	80050f0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	73fb      	strb	r3, [r7, #15]
          break;
 80050ee:	e005      	b.n	80050fc <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80050f0:	4b0a      	ldr	r3, [pc, #40]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0ef      	beq.n	80050dc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80050fc:	7bfb      	ldrb	r3, [r7, #15]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d106      	bne.n	8005110 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005102:	4b06      	ldr	r3, [pc, #24]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005104:	691a      	ldr	r2, [r3, #16]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	699b      	ldr	r3, [r3, #24]
 800510a:	4904      	ldr	r1, [pc, #16]	; (800511c <RCCEx_PLLSAI1_Config+0x1e4>)
 800510c:	4313      	orrs	r3, r2
 800510e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005110:	7bfb      	ldrb	r3, [r7, #15]
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	40021000 	.word	0x40021000

08005120 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800512e:	4b6a      	ldr	r3, [pc, #424]	; (80052d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005130:	68db      	ldr	r3, [r3, #12]
 8005132:	f003 0303 	and.w	r3, r3, #3
 8005136:	2b00      	cmp	r3, #0
 8005138:	d018      	beq.n	800516c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800513a:	4b67      	ldr	r3, [pc, #412]	; (80052d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	f003 0203 	and.w	r2, r3, #3
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	429a      	cmp	r2, r3
 8005148:	d10d      	bne.n	8005166 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
       ||
 800514e:	2b00      	cmp	r3, #0
 8005150:	d009      	beq.n	8005166 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005152:	4b61      	ldr	r3, [pc, #388]	; (80052d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	091b      	lsrs	r3, r3, #4
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	1c5a      	adds	r2, r3, #1
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
       ||
 8005162:	429a      	cmp	r2, r3
 8005164:	d047      	beq.n	80051f6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	73fb      	strb	r3, [r7, #15]
 800516a:	e044      	b.n	80051f6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2b03      	cmp	r3, #3
 8005172:	d018      	beq.n	80051a6 <RCCEx_PLLSAI2_Config+0x86>
 8005174:	2b03      	cmp	r3, #3
 8005176:	d825      	bhi.n	80051c4 <RCCEx_PLLSAI2_Config+0xa4>
 8005178:	2b01      	cmp	r3, #1
 800517a:	d002      	beq.n	8005182 <RCCEx_PLLSAI2_Config+0x62>
 800517c:	2b02      	cmp	r3, #2
 800517e:	d009      	beq.n	8005194 <RCCEx_PLLSAI2_Config+0x74>
 8005180:	e020      	b.n	80051c4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005182:	4b55      	ldr	r3, [pc, #340]	; (80052d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d11d      	bne.n	80051ca <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005192:	e01a      	b.n	80051ca <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005194:	4b50      	ldr	r3, [pc, #320]	; (80052d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800519c:	2b00      	cmp	r3, #0
 800519e:	d116      	bne.n	80051ce <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80051a0:	2301      	movs	r3, #1
 80051a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051a4:	e013      	b.n	80051ce <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80051a6:	4b4c      	ldr	r3, [pc, #304]	; (80052d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d10f      	bne.n	80051d2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80051b2:	4b49      	ldr	r3, [pc, #292]	; (80052d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d109      	bne.n	80051d2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80051be:	2301      	movs	r3, #1
 80051c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80051c2:	e006      	b.n	80051d2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	73fb      	strb	r3, [r7, #15]
      break;
 80051c8:	e004      	b.n	80051d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051ca:	bf00      	nop
 80051cc:	e002      	b.n	80051d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051ce:	bf00      	nop
 80051d0:	e000      	b.n	80051d4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80051d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80051d4:	7bfb      	ldrb	r3, [r7, #15]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d10d      	bne.n	80051f6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80051da:	4b3f      	ldr	r3, [pc, #252]	; (80052d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6819      	ldr	r1, [r3, #0]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	3b01      	subs	r3, #1
 80051ec:	011b      	lsls	r3, r3, #4
 80051ee:	430b      	orrs	r3, r1
 80051f0:	4939      	ldr	r1, [pc, #228]	; (80052d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051f2:	4313      	orrs	r3, r2
 80051f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d167      	bne.n	80052cc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80051fc:	4b36      	ldr	r3, [pc, #216]	; (80052d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a35      	ldr	r2, [pc, #212]	; (80052d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005206:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005208:	f7fc fec2 	bl	8001f90 <HAL_GetTick>
 800520c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800520e:	e009      	b.n	8005224 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005210:	f7fc febe 	bl	8001f90 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d902      	bls.n	8005224 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	73fb      	strb	r3, [r7, #15]
        break;
 8005222:	e005      	b.n	8005230 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005224:	4b2c      	ldr	r3, [pc, #176]	; (80052d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1ef      	bne.n	8005210 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005230:	7bfb      	ldrb	r3, [r7, #15]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d14a      	bne.n	80052cc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d111      	bne.n	8005260 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800523c:	4b26      	ldr	r3, [pc, #152]	; (80052d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005244:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005248:	687a      	ldr	r2, [r7, #4]
 800524a:	6892      	ldr	r2, [r2, #8]
 800524c:	0211      	lsls	r1, r2, #8
 800524e:	687a      	ldr	r2, [r7, #4]
 8005250:	68d2      	ldr	r2, [r2, #12]
 8005252:	0912      	lsrs	r2, r2, #4
 8005254:	0452      	lsls	r2, r2, #17
 8005256:	430a      	orrs	r2, r1
 8005258:	491f      	ldr	r1, [pc, #124]	; (80052d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800525a:	4313      	orrs	r3, r2
 800525c:	614b      	str	r3, [r1, #20]
 800525e:	e011      	b.n	8005284 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005260:	4b1d      	ldr	r3, [pc, #116]	; (80052d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005262:	695b      	ldr	r3, [r3, #20]
 8005264:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005268:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	6892      	ldr	r2, [r2, #8]
 8005270:	0211      	lsls	r1, r2, #8
 8005272:	687a      	ldr	r2, [r7, #4]
 8005274:	6912      	ldr	r2, [r2, #16]
 8005276:	0852      	lsrs	r2, r2, #1
 8005278:	3a01      	subs	r2, #1
 800527a:	0652      	lsls	r2, r2, #25
 800527c:	430a      	orrs	r2, r1
 800527e:	4916      	ldr	r1, [pc, #88]	; (80052d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005280:	4313      	orrs	r3, r2
 8005282:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005284:	4b14      	ldr	r3, [pc, #80]	; (80052d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a13      	ldr	r2, [pc, #76]	; (80052d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800528a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800528e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005290:	f7fc fe7e 	bl	8001f90 <HAL_GetTick>
 8005294:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005296:	e009      	b.n	80052ac <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005298:	f7fc fe7a 	bl	8001f90 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d902      	bls.n	80052ac <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	73fb      	strb	r3, [r7, #15]
          break;
 80052aa:	e005      	b.n	80052b8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80052ac:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0ef      	beq.n	8005298 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d106      	bne.n	80052cc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80052be:	4b06      	ldr	r3, [pc, #24]	; (80052d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052c0:	695a      	ldr	r2, [r3, #20]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	695b      	ldr	r3, [r3, #20]
 80052c6:	4904      	ldr	r1, [pc, #16]	; (80052d8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80052cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3710      	adds	r7, #16
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	40021000 	.word	0x40021000

080052dc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d06c      	beq.n	80053c8 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fc fa1a 	bl	800173c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2202      	movs	r2, #2
 800530c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	22ca      	movs	r2, #202	; 0xca
 8005316:	625a      	str	r2, [r3, #36]	; 0x24
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	2253      	movs	r2, #83	; 0x53
 800531e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fa49 	bl	80057b8 <RTC_EnterInitMode>
 8005326:	4603      	mov	r3, r0
 8005328:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800532a:	7bfb      	ldrb	r3, [r7, #15]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d14b      	bne.n	80053c8 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	687a      	ldr	r2, [r7, #4]
 8005338:	6812      	ldr	r2, [r2, #0]
 800533a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800533e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005342:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	6899      	ldr	r1, [r3, #8]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685a      	ldr	r2, [r3, #4]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	431a      	orrs	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	431a      	orrs	r2, r3
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	430a      	orrs	r2, r1
 8005360:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	687a      	ldr	r2, [r7, #4]
 8005368:	68d2      	ldr	r2, [r2, #12]
 800536a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6919      	ldr	r1, [r3, #16]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	041a      	lsls	r2, r3, #16
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	430a      	orrs	r2, r1
 800537e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 fa4d 	bl	8005820 <RTC_ExitInitMode>
 8005386:	4603      	mov	r3, r0
 8005388:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800538a:	7bfb      	ldrb	r3, [r7, #15]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d11b      	bne.n	80053c8 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0203 	bic.w	r2, r2, #3
 800539e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	69da      	ldr	r2, [r3, #28]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	431a      	orrs	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	430a      	orrs	r2, r1
 80053b6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	22ff      	movs	r2, #255	; 0xff
 80053be:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80053d2:	b590      	push	{r4, r7, lr}
 80053d4:	b087      	sub	sp, #28
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d101      	bne.n	80053ec <HAL_RTC_SetTime+0x1a>
 80053e8:	2302      	movs	r3, #2
 80053ea:	e08b      	b.n	8005504 <HAL_RTC_SetTime+0x132>
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2201      	movs	r2, #1
 80053f0:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2202      	movs	r2, #2
 80053f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	22ca      	movs	r2, #202	; 0xca
 8005402:	625a      	str	r2, [r3, #36]	; 0x24
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	2253      	movs	r2, #83	; 0x53
 800540a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 f9d3 	bl	80057b8 <RTC_EnterInitMode>
 8005412:	4603      	mov	r3, r0
 8005414:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8005416:	7cfb      	ldrb	r3, [r7, #19]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d163      	bne.n	80054e4 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d126      	bne.n	8005470 <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542c:	2b00      	cmp	r3, #0
 800542e:	d102      	bne.n	8005436 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8005430:	68bb      	ldr	r3, [r7, #8]
 8005432:	2200      	movs	r2, #0
 8005434:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fa2e 	bl	800589c <RTC_ByteToBcd2>
 8005440:	4603      	mov	r3, r0
 8005442:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	785b      	ldrb	r3, [r3, #1]
 8005448:	4618      	mov	r0, r3
 800544a:	f000 fa27 	bl	800589c <RTC_ByteToBcd2>
 800544e:	4603      	mov	r3, r0
 8005450:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005452:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	789b      	ldrb	r3, [r3, #2]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fa1f 	bl	800589c <RTC_ByteToBcd2>
 800545e:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005460:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	78db      	ldrb	r3, [r3, #3]
 8005468:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800546a:	4313      	orrs	r3, r2
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	e018      	b.n	80054a2 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800547a:	2b00      	cmp	r3, #0
 800547c:	d102      	bne.n	8005484 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2200      	movs	r2, #0
 8005482:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	781b      	ldrb	r3, [r3, #0]
 8005488:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	785b      	ldrb	r3, [r3, #1]
 800548e:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8005490:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8005492:	68ba      	ldr	r2, [r7, #8]
 8005494:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8005496:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	78db      	ldrb	r3, [r3, #3]
 800549c:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80054ac:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80054b0:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054c0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6899      	ldr	r1, [r3, #8]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	68da      	ldr	r2, [r3, #12]
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	691b      	ldr	r3, [r3, #16]
 80054d0:	431a      	orrs	r2, r3
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	430a      	orrs	r2, r1
 80054d8:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 f9a0 	bl	8005820 <RTC_ExitInitMode>
 80054e0:	4603      	mov	r3, r0
 80054e2:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	22ff      	movs	r2, #255	; 0xff
 80054ea:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80054ec:	7cfb      	ldrb	r3, [r7, #19]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d103      	bne.n	80054fa <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2201      	movs	r2, #1
 80054f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8005502:	7cfb      	ldrb	r3, [r7, #19]
}
 8005504:	4618      	mov	r0, r3
 8005506:	371c      	adds	r7, #28
 8005508:	46bd      	mov	sp, r7
 800550a:	bd90      	pop	{r4, r7, pc}

0800550c <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800553a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800553e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	0c1b      	lsrs	r3, r3, #16
 8005544:	b2db      	uxtb	r3, r3
 8005546:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800554a:	b2da      	uxtb	r2, r3
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	0a1b      	lsrs	r3, r3, #8
 8005554:	b2db      	uxtb	r3, r3
 8005556:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800555a:	b2da      	uxtb	r2, r3
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	b2db      	uxtb	r3, r3
 8005564:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005568:	b2da      	uxtb	r2, r3
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	0d9b      	lsrs	r3, r3, #22
 8005572:	b2db      	uxtb	r3, r3
 8005574:	f003 0301 	and.w	r3, r3, #1
 8005578:	b2da      	uxtb	r2, r3
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d11a      	bne.n	80055ba <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	781b      	ldrb	r3, [r3, #0]
 8005588:	4618      	mov	r0, r3
 800558a:	f000 f9a7 	bl	80058dc <RTC_Bcd2ToByte>
 800558e:	4603      	mov	r3, r0
 8005590:	461a      	mov	r2, r3
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	785b      	ldrb	r3, [r3, #1]
 800559a:	4618      	mov	r0, r3
 800559c:	f000 f99e 	bl	80058dc <RTC_Bcd2ToByte>
 80055a0:	4603      	mov	r3, r0
 80055a2:	461a      	mov	r2, r3
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80055a8:	68bb      	ldr	r3, [r7, #8]
 80055aa:	789b      	ldrb	r3, [r3, #2]
 80055ac:	4618      	mov	r0, r3
 80055ae:	f000 f995 	bl	80058dc <RTC_Bcd2ToByte>
 80055b2:	4603      	mov	r3, r0
 80055b4:	461a      	mov	r2, r3
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80055c4:	b590      	push	{r4, r7, lr}
 80055c6:	b087      	sub	sp, #28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d101      	bne.n	80055de <HAL_RTC_SetDate+0x1a>
 80055da:	2302      	movs	r3, #2
 80055dc:	e075      	b.n	80056ca <HAL_RTC_SetDate+0x106>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	2202      	movs	r2, #2
 80055ea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10e      	bne.n	8005612 <HAL_RTC_SetDate+0x4e>
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	785b      	ldrb	r3, [r3, #1]
 80055f8:	f003 0310 	and.w	r3, r3, #16
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d008      	beq.n	8005612 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	785b      	ldrb	r3, [r3, #1]
 8005604:	f023 0310 	bic.w	r3, r3, #16
 8005608:	b2db      	uxtb	r3, r3
 800560a:	330a      	adds	r3, #10
 800560c:	b2da      	uxtb	r2, r3
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d11c      	bne.n	8005652 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	78db      	ldrb	r3, [r3, #3]
 800561c:	4618      	mov	r0, r3
 800561e:	f000 f93d 	bl	800589c <RTC_ByteToBcd2>
 8005622:	4603      	mov	r3, r0
 8005624:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	785b      	ldrb	r3, [r3, #1]
 800562a:	4618      	mov	r0, r3
 800562c:	f000 f936 	bl	800589c <RTC_ByteToBcd2>
 8005630:	4603      	mov	r3, r0
 8005632:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8005634:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	789b      	ldrb	r3, [r3, #2]
 800563a:	4618      	mov	r0, r3
 800563c:	f000 f92e 	bl	800589c <RTC_ByteToBcd2>
 8005640:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8005642:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 800564c:	4313      	orrs	r3, r2
 800564e:	617b      	str	r3, [r7, #20]
 8005650:	e00e      	b.n	8005670 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	78db      	ldrb	r3, [r3, #3]
 8005656:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	785b      	ldrb	r3, [r3, #1]
 800565c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800565e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8005664:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 800566c:	4313      	orrs	r3, r2
 800566e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	22ca      	movs	r2, #202	; 0xca
 8005676:	625a      	str	r2, [r3, #36]	; 0x24
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2253      	movs	r2, #83	; 0x53
 800567e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 f899 	bl	80057b8 <RTC_EnterInitMode>
 8005686:	4603      	mov	r3, r0
 8005688:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800568a:	7cfb      	ldrb	r3, [r7, #19]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d10c      	bne.n	80056aa <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681a      	ldr	r2, [r3, #0]
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800569a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800569e:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80056a0:	68f8      	ldr	r0, [r7, #12]
 80056a2:	f000 f8bd 	bl	8005820 <RTC_ExitInitMode>
 80056a6:	4603      	mov	r3, r0
 80056a8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	22ff      	movs	r2, #255	; 0xff
 80056b0:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80056b2:	7cfb      	ldrb	r3, [r7, #19]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d103      	bne.n	80056c0 <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 80056c8:	7cfb      	ldrb	r3, [r7, #19]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	371c      	adds	r7, #28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd90      	pop	{r4, r7, pc}

080056d2 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b086      	sub	sp, #24
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80056e8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80056ec:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80056ee:	697b      	ldr	r3, [r7, #20]
 80056f0:	0c1b      	lsrs	r3, r3, #16
 80056f2:	b2da      	uxtb	r2, r3
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	0a1b      	lsrs	r3, r3, #8
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	f003 031f 	and.w	r3, r3, #31
 8005702:	b2da      	uxtb	r2, r3
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	b2db      	uxtb	r3, r3
 800570c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005710:	b2da      	uxtb	r2, r3
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	0b5b      	lsrs	r3, r3, #13
 800571a:	b2db      	uxtb	r3, r3
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	b2da      	uxtb	r2, r3
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d11a      	bne.n	8005762 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	78db      	ldrb	r3, [r3, #3]
 8005730:	4618      	mov	r0, r3
 8005732:	f000 f8d3 	bl	80058dc <RTC_Bcd2ToByte>
 8005736:	4603      	mov	r3, r0
 8005738:	461a      	mov	r2, r3
 800573a:	68bb      	ldr	r3, [r7, #8]
 800573c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	785b      	ldrb	r3, [r3, #1]
 8005742:	4618      	mov	r0, r3
 8005744:	f000 f8ca 	bl	80058dc <RTC_Bcd2ToByte>
 8005748:	4603      	mov	r3, r0
 800574a:	461a      	mov	r2, r3
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	789b      	ldrb	r3, [r3, #2]
 8005754:	4618      	mov	r0, r3
 8005756:	f000 f8c1 	bl	80058dc <RTC_Bcd2ToByte>
 800575a:	4603      	mov	r3, r0
 800575c:	461a      	mov	r2, r3
 800575e:	68bb      	ldr	r3, [r7, #8]
 8005760:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8005762:	2300      	movs	r3, #0
}
 8005764:	4618      	mov	r0, r3
 8005766:	3718      	adds	r7, #24
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68da      	ldr	r2, [r3, #12]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005782:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8005784:	f7fc fc04 	bl	8001f90 <HAL_GetTick>
 8005788:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800578a:	e009      	b.n	80057a0 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800578c:	f7fc fc00 	bl	8001f90 <HAL_GetTick>
 8005790:	4602      	mov	r2, r0
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	1ad3      	subs	r3, r2, r3
 8005796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800579a:	d901      	bls.n	80057a0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	e007      	b.n	80057b0 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68db      	ldr	r3, [r3, #12]
 80057a6:	f003 0320 	and.w	r3, r3, #32
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d0ee      	beq.n	800578c <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80057c0:	2300      	movs	r3, #0
 80057c2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68db      	ldr	r3, [r3, #12]
 80057ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d120      	bne.n	8005814 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f04f 32ff 	mov.w	r2, #4294967295
 80057da:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80057dc:	f7fc fbd8 	bl	8001f90 <HAL_GetTick>
 80057e0:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80057e2:	e00d      	b.n	8005800 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80057e4:	f7fc fbd4 	bl	8001f90 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057f2:	d905      	bls.n	8005800 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 80057f4:	2303      	movs	r3, #3
 80057f6:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2203      	movs	r2, #3
 80057fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800580a:	2b00      	cmp	r3, #0
 800580c:	d102      	bne.n	8005814 <RTC_EnterInitMode+0x5c>
 800580e:	7bfb      	ldrb	r3, [r7, #15]
 8005810:	2b03      	cmp	r3, #3
 8005812:	d1e7      	bne.n	80057e4 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8005814:	7bfb      	ldrb	r3, [r7, #15]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
	...

08005820 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b084      	sub	sp, #16
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005828:	2300      	movs	r3, #0
 800582a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 800582c:	4b1a      	ldr	r3, [pc, #104]	; (8005898 <RTC_ExitInitMode+0x78>)
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	4a19      	ldr	r2, [pc, #100]	; (8005898 <RTC_ExitInitMode+0x78>)
 8005832:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005836:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8005838:	4b17      	ldr	r3, [pc, #92]	; (8005898 <RTC_ExitInitMode+0x78>)
 800583a:	689b      	ldr	r3, [r3, #8]
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10c      	bne.n	800585e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f7ff ff91 	bl	800576c <HAL_RTC_WaitForSynchro>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01e      	beq.n	800588e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2203      	movs	r2, #3
 8005854:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	73fb      	strb	r3, [r7, #15]
 800585c:	e017      	b.n	800588e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800585e:	4b0e      	ldr	r3, [pc, #56]	; (8005898 <RTC_ExitInitMode+0x78>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	4a0d      	ldr	r2, [pc, #52]	; (8005898 <RTC_ExitInitMode+0x78>)
 8005864:	f023 0320 	bic.w	r3, r3, #32
 8005868:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	f7ff ff7e 	bl	800576c <HAL_RTC_WaitForSynchro>
 8005870:	4603      	mov	r3, r0
 8005872:	2b00      	cmp	r3, #0
 8005874:	d005      	beq.n	8005882 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2203      	movs	r2, #3
 800587a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8005882:	4b05      	ldr	r3, [pc, #20]	; (8005898 <RTC_ExitInitMode+0x78>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	4a04      	ldr	r2, [pc, #16]	; (8005898 <RTC_ExitInitMode+0x78>)
 8005888:	f043 0320 	orr.w	r3, r3, #32
 800588c:	6093      	str	r3, [r2, #8]
  }

  return status;
 800588e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	40002800 	.word	0x40002800

0800589c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	4603      	mov	r3, r0
 80058a4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 80058ae:	e005      	b.n	80058bc <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	3301      	adds	r3, #1
 80058b4:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 80058b6:	7afb      	ldrb	r3, [r7, #11]
 80058b8:	3b0a      	subs	r3, #10
 80058ba:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 80058bc:	7afb      	ldrb	r3, [r7, #11]
 80058be:	2b09      	cmp	r3, #9
 80058c0:	d8f6      	bhi.n	80058b0 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	011b      	lsls	r3, r3, #4
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	7afb      	ldrb	r3, [r7, #11]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	b2db      	uxtb	r3, r3
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	4603      	mov	r3, r0
 80058e4:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	091b      	lsrs	r3, r3, #4
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	461a      	mov	r2, r3
 80058ee:	0092      	lsls	r2, r2, #2
 80058f0:	4413      	add	r3, r2
 80058f2:	005b      	lsls	r3, r3, #1
 80058f4:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80058f6:	79fb      	ldrb	r3, [r7, #7]
 80058f8:	f003 030f 	and.w	r3, r3, #15
 80058fc:	b2da      	uxtb	r2, r3
 80058fe:	7bfb      	ldrb	r3, [r7, #15]
 8005900:	4413      	add	r3, r2
 8005902:	b2db      	uxtb	r3, r3
}
 8005904:	4618      	mov	r0, r3
 8005906:	3714      	adds	r7, #20
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d101      	bne.n	8005922 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	e095      	b.n	8005a4e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	2b00      	cmp	r3, #0
 8005928:	d108      	bne.n	800593c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005932:	d009      	beq.n	8005948 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	61da      	str	r2, [r3, #28]
 800593a:	e005      	b.n	8005948 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005954:	b2db      	uxtb	r3, r3
 8005956:	2b00      	cmp	r3, #0
 8005958:	d106      	bne.n	8005968 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2200      	movs	r2, #0
 800595e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f7fb ff5a 	bl	800181c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2202      	movs	r2, #2
 800596c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800597e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005988:	d902      	bls.n	8005990 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800598a:	2300      	movs	r3, #0
 800598c:	60fb      	str	r3, [r7, #12]
 800598e:	e002      	b.n	8005996 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005994:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800599e:	d007      	beq.n	80059b0 <HAL_SPI_Init+0xa0>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	68db      	ldr	r3, [r3, #12]
 80059a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80059a8:	d002      	beq.n	80059b0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80059c0:	431a      	orrs	r2, r3
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	691b      	ldr	r3, [r3, #16]
 80059c6:	f003 0302 	and.w	r3, r3, #2
 80059ca:	431a      	orrs	r2, r3
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	431a      	orrs	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	69db      	ldr	r3, [r3, #28]
 80059e4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80059e8:	431a      	orrs	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6a1b      	ldr	r3, [r3, #32]
 80059ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f2:	ea42 0103 	orr.w	r1, r2, r3
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	430a      	orrs	r2, r1
 8005a04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	699b      	ldr	r3, [r3, #24]
 8005a0a:	0c1b      	lsrs	r3, r3, #16
 8005a0c:	f003 0204 	and.w	r2, r3, #4
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a1e:	f003 0308 	and.w	r3, r3, #8
 8005a22:	431a      	orrs	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005a2c:	ea42 0103 	orr.w	r1, r2, r3
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	430a      	orrs	r2, r1
 8005a3c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005a4c:	2300      	movs	r3, #0
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a56:	b580      	push	{r7, lr}
 8005a58:	b088      	sub	sp, #32
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	60f8      	str	r0, [r7, #12]
 8005a5e:	60b9      	str	r1, [r7, #8]
 8005a60:	603b      	str	r3, [r7, #0]
 8005a62:	4613      	mov	r3, r2
 8005a64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005a66:	2300      	movs	r3, #0
 8005a68:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d101      	bne.n	8005a78 <HAL_SPI_Transmit+0x22>
 8005a74:	2302      	movs	r3, #2
 8005a76:	e158      	b.n	8005d2a <HAL_SPI_Transmit+0x2d4>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2201      	movs	r2, #1
 8005a7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a80:	f7fc fa86 	bl	8001f90 <HAL_GetTick>
 8005a84:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005a86:	88fb      	ldrh	r3, [r7, #6]
 8005a88:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d002      	beq.n	8005a9c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005a96:	2302      	movs	r3, #2
 8005a98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005a9a:	e13d      	b.n	8005d18 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d002      	beq.n	8005aa8 <HAL_SPI_Transmit+0x52>
 8005aa2:	88fb      	ldrh	r3, [r7, #6]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d102      	bne.n	8005aae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005aac:	e134      	b.n	8005d18 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2203      	movs	r2, #3
 8005ab2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	68ba      	ldr	r2, [r7, #8]
 8005ac0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	88fa      	ldrh	r2, [r7, #6]
 8005ac6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	88fa      	ldrh	r2, [r7, #6]
 8005acc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	2200      	movs	r2, #0
 8005aee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005af8:	d10f      	bne.n	8005b1a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b08:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b18:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b24:	2b40      	cmp	r3, #64	; 0x40
 8005b26:	d007      	beq.n	8005b38 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b36:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	68db      	ldr	r3, [r3, #12]
 8005b3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b40:	d94b      	bls.n	8005bda <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d002      	beq.n	8005b50 <HAL_SPI_Transmit+0xfa>
 8005b4a:	8afb      	ldrh	r3, [r7, #22]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d13e      	bne.n	8005bce <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b54:	881a      	ldrh	r2, [r3, #0]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	1c9a      	adds	r2, r3, #2
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	b29a      	uxth	r2, r3
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005b74:	e02b      	b.n	8005bce <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f003 0302 	and.w	r3, r3, #2
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d112      	bne.n	8005baa <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b88:	881a      	ldrh	r2, [r3, #0]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b94:	1c9a      	adds	r2, r3, #2
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b9e:	b29b      	uxth	r3, r3
 8005ba0:	3b01      	subs	r3, #1
 8005ba2:	b29a      	uxth	r2, r3
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ba8:	e011      	b.n	8005bce <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005baa:	f7fc f9f1 	bl	8001f90 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	683a      	ldr	r2, [r7, #0]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d803      	bhi.n	8005bc2 <HAL_SPI_Transmit+0x16c>
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc0:	d102      	bne.n	8005bc8 <HAL_SPI_Transmit+0x172>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d102      	bne.n	8005bce <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005bcc:	e0a4      	b.n	8005d18 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bd2:	b29b      	uxth	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d1ce      	bne.n	8005b76 <HAL_SPI_Transmit+0x120>
 8005bd8:	e07c      	b.n	8005cd4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d002      	beq.n	8005be8 <HAL_SPI_Transmit+0x192>
 8005be2:	8afb      	ldrh	r3, [r7, #22]
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d170      	bne.n	8005cca <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	2b01      	cmp	r3, #1
 8005bf0:	d912      	bls.n	8005c18 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bf6:	881a      	ldrh	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c02:	1c9a      	adds	r2, r3, #2
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	3b02      	subs	r3, #2
 8005c10:	b29a      	uxth	r2, r3
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c16:	e058      	b.n	8005cca <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	330c      	adds	r3, #12
 8005c22:	7812      	ldrb	r2, [r2, #0]
 8005c24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c2a:	1c5a      	adds	r2, r3, #1
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	3b01      	subs	r3, #1
 8005c38:	b29a      	uxth	r2, r3
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005c3e:	e044      	b.n	8005cca <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f003 0302 	and.w	r3, r3, #2
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d12b      	bne.n	8005ca6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d912      	bls.n	8005c7e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	881a      	ldrh	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c68:	1c9a      	adds	r2, r3, #2
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	3b02      	subs	r3, #2
 8005c76:	b29a      	uxth	r2, r3
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005c7c:	e025      	b.n	8005cca <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	330c      	adds	r3, #12
 8005c88:	7812      	ldrb	r2, [r2, #0]
 8005c8a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c90:	1c5a      	adds	r2, r3, #1
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c9a:	b29b      	uxth	r3, r3
 8005c9c:	3b01      	subs	r3, #1
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ca4:	e011      	b.n	8005cca <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005ca6:	f7fc f973 	bl	8001f90 <HAL_GetTick>
 8005caa:	4602      	mov	r2, r0
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	683a      	ldr	r2, [r7, #0]
 8005cb2:	429a      	cmp	r2, r3
 8005cb4:	d803      	bhi.n	8005cbe <HAL_SPI_Transmit+0x268>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cbc:	d102      	bne.n	8005cc4 <HAL_SPI_Transmit+0x26e>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d102      	bne.n	8005cca <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005cc8:	e026      	b.n	8005d18 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d1b5      	bne.n	8005c40 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cd4:	69ba      	ldr	r2, [r7, #24]
 8005cd6:	6839      	ldr	r1, [r7, #0]
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 f949 	bl	8005f70 <SPI_EndRxTxTransaction>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d002      	beq.n	8005cea <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	689b      	ldr	r3, [r3, #8]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d10a      	bne.n	8005d08 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	613b      	str	r3, [r7, #16]
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	613b      	str	r3, [r7, #16]
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	613b      	str	r3, [r7, #16]
 8005d06:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	77fb      	strb	r3, [r7, #31]
 8005d14:	e000      	b.n	8005d18 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005d16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005d28:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3720      	adds	r7, #32
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b088      	sub	sp, #32
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	60f8      	str	r0, [r7, #12]
 8005d3c:	60b9      	str	r1, [r7, #8]
 8005d3e:	603b      	str	r3, [r7, #0]
 8005d40:	4613      	mov	r3, r2
 8005d42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d44:	f7fc f924 	bl	8001f90 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4c:	1a9b      	subs	r3, r3, r2
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	4413      	add	r3, r2
 8005d52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d54:	f7fc f91c 	bl	8001f90 <HAL_GetTick>
 8005d58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d5a:	4b39      	ldr	r3, [pc, #228]	; (8005e40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	015b      	lsls	r3, r3, #5
 8005d60:	0d1b      	lsrs	r3, r3, #20
 8005d62:	69fa      	ldr	r2, [r7, #28]
 8005d64:	fb02 f303 	mul.w	r3, r2, r3
 8005d68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d6a:	e054      	b.n	8005e16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d72:	d050      	beq.n	8005e16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d74:	f7fc f90c 	bl	8001f90 <HAL_GetTick>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	69fa      	ldr	r2, [r7, #28]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d902      	bls.n	8005d8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d13d      	bne.n	8005e06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	685a      	ldr	r2, [r3, #4]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005da2:	d111      	bne.n	8005dc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dac:	d004      	beq.n	8005db8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005db6:	d107      	bne.n	8005dc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dd0:	d10f      	bne.n	8005df2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005de0:	601a      	str	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005df0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e017      	b.n	8005e36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d101      	bne.n	8005e10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	3b01      	subs	r3, #1
 8005e14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	4013      	ands	r3, r2
 8005e20:	68ba      	ldr	r2, [r7, #8]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	bf0c      	ite	eq
 8005e26:	2301      	moveq	r3, #1
 8005e28:	2300      	movne	r3, #0
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	79fb      	ldrb	r3, [r7, #7]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d19b      	bne.n	8005d6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3720      	adds	r7, #32
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000010 	.word	0x20000010

08005e44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08a      	sub	sp, #40	; 0x28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
 8005e50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005e52:	2300      	movs	r3, #0
 8005e54:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005e56:	f7fc f89b 	bl	8001f90 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5e:	1a9b      	subs	r3, r3, r2
 8005e60:	683a      	ldr	r2, [r7, #0]
 8005e62:	4413      	add	r3, r2
 8005e64:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005e66:	f7fc f893 	bl	8001f90 <HAL_GetTick>
 8005e6a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	330c      	adds	r3, #12
 8005e72:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005e74:	4b3d      	ldr	r3, [pc, #244]	; (8005f6c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	4613      	mov	r3, r2
 8005e7a:	009b      	lsls	r3, r3, #2
 8005e7c:	4413      	add	r3, r2
 8005e7e:	00da      	lsls	r2, r3, #3
 8005e80:	1ad3      	subs	r3, r2, r3
 8005e82:	0d1b      	lsrs	r3, r3, #20
 8005e84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e86:	fb02 f303 	mul.w	r3, r2, r3
 8005e8a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005e8c:	e060      	b.n	8005f50 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005e94:	d107      	bne.n	8005ea6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d104      	bne.n	8005ea6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005ea4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eac:	d050      	beq.n	8005f50 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005eae:	f7fc f86f 	bl	8001f90 <HAL_GetTick>
 8005eb2:	4602      	mov	r2, r0
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	1ad3      	subs	r3, r2, r3
 8005eb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d902      	bls.n	8005ec4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d13d      	bne.n	8005f40 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	685a      	ldr	r2, [r3, #4]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005ed2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005edc:	d111      	bne.n	8005f02 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ee6:	d004      	beq.n	8005ef2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ef0:	d107      	bne.n	8005f02 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f00:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f0a:	d10f      	bne.n	8005f2c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f1a:	601a      	str	r2, [r3, #0]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681a      	ldr	r2, [r3, #0]
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2200      	movs	r2, #0
 8005f38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f3c:	2303      	movs	r3, #3
 8005f3e:	e010      	b.n	8005f62 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005f46:	2300      	movs	r3, #0
 8005f48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	3b01      	subs	r3, #1
 8005f4e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	689a      	ldr	r2, [r3, #8]
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	4013      	ands	r3, r2
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d196      	bne.n	8005e8e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3728      	adds	r7, #40	; 0x28
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	20000010 	.word	0x20000010

08005f70 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f7ff ff5b 	bl	8005e44 <SPI_WaitFifoStateUntilTimeout>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d007      	beq.n	8005fa4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f98:	f043 0220 	orr.w	r2, r3, #32
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fa0:	2303      	movs	r3, #3
 8005fa2:	e027      	b.n	8005ff4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	9300      	str	r3, [sp, #0]
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	2200      	movs	r2, #0
 8005fac:	2180      	movs	r1, #128	; 0x80
 8005fae:	68f8      	ldr	r0, [r7, #12]
 8005fb0:	f7ff fec0 	bl	8005d34 <SPI_WaitFlagStateUntilTimeout>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d007      	beq.n	8005fca <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fbe:	f043 0220 	orr.w	r2, r3, #32
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fc6:	2303      	movs	r3, #3
 8005fc8:	e014      	b.n	8005ff4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	9300      	str	r3, [sp, #0]
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f7ff ff34 	bl	8005e44 <SPI_WaitFifoStateUntilTimeout>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d007      	beq.n	8005ff2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005fe6:	f043 0220 	orr.w	r2, r3, #32
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005fee:	2303      	movs	r3, #3
 8005ff0:	e000      	b.n	8005ff4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e049      	b.n	80060a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d106      	bne.n	8006028 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f7fb fdc4 	bl	8001bb0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2202      	movs	r2, #2
 800602c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	3304      	adds	r3, #4
 8006038:	4619      	mov	r1, r3
 800603a:	4610      	mov	r0, r2
 800603c:	f000 fd34 	bl	8006aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2201      	movs	r2, #1
 800605c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2201      	movs	r2, #1
 8006074:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3708      	adds	r7, #8
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b085      	sub	sp, #20
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	2b01      	cmp	r3, #1
 80060be:	d001      	beq.n	80060c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060c0:	2301      	movs	r3, #1
 80060c2:	e04f      	b.n	8006164 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2202      	movs	r2, #2
 80060c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68da      	ldr	r2, [r3, #12]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f042 0201 	orr.w	r2, r2, #1
 80060da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	4a23      	ldr	r2, [pc, #140]	; (8006170 <HAL_TIM_Base_Start_IT+0xc4>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d01d      	beq.n	8006122 <HAL_TIM_Base_Start_IT+0x76>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060ee:	d018      	beq.n	8006122 <HAL_TIM_Base_Start_IT+0x76>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a1f      	ldr	r2, [pc, #124]	; (8006174 <HAL_TIM_Base_Start_IT+0xc8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d013      	beq.n	8006122 <HAL_TIM_Base_Start_IT+0x76>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a1e      	ldr	r2, [pc, #120]	; (8006178 <HAL_TIM_Base_Start_IT+0xcc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d00e      	beq.n	8006122 <HAL_TIM_Base_Start_IT+0x76>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	4a1c      	ldr	r2, [pc, #112]	; (800617c <HAL_TIM_Base_Start_IT+0xd0>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d009      	beq.n	8006122 <HAL_TIM_Base_Start_IT+0x76>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4a1b      	ldr	r2, [pc, #108]	; (8006180 <HAL_TIM_Base_Start_IT+0xd4>)
 8006114:	4293      	cmp	r3, r2
 8006116:	d004      	beq.n	8006122 <HAL_TIM_Base_Start_IT+0x76>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a19      	ldr	r2, [pc, #100]	; (8006184 <HAL_TIM_Base_Start_IT+0xd8>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d115      	bne.n	800614e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	4b17      	ldr	r3, [pc, #92]	; (8006188 <HAL_TIM_Base_Start_IT+0xdc>)
 800612a:	4013      	ands	r3, r2
 800612c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b06      	cmp	r3, #6
 8006132:	d015      	beq.n	8006160 <HAL_TIM_Base_Start_IT+0xb4>
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800613a:	d011      	beq.n	8006160 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f042 0201 	orr.w	r2, r2, #1
 800614a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800614c:	e008      	b.n	8006160 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f042 0201 	orr.w	r2, r2, #1
 800615c:	601a      	str	r2, [r3, #0]
 800615e:	e000      	b.n	8006162 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006160:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	40012c00 	.word	0x40012c00
 8006174:	40000400 	.word	0x40000400
 8006178:	40000800 	.word	0x40000800
 800617c:	40000c00 	.word	0x40000c00
 8006180:	40013400 	.word	0x40013400
 8006184:	40014000 	.word	0x40014000
 8006188:	00010007 	.word	0x00010007

0800618c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b082      	sub	sp, #8
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d101      	bne.n	800619e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e049      	b.n	8006232 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d106      	bne.n	80061b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f841 	bl	800623a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2202      	movs	r2, #2
 80061bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	3304      	adds	r3, #4
 80061c8:	4619      	mov	r1, r3
 80061ca:	4610      	mov	r0, r2
 80061cc:	f000 fc6c 	bl	8006aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2201      	movs	r2, #1
 80061d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2201      	movs	r2, #1
 80061dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2201      	movs	r2, #1
 80061e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2201      	movs	r2, #1
 80061f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	3708      	adds	r7, #8
 8006236:	46bd      	mov	sp, r7
 8006238:	bd80      	pop	{r7, pc}

0800623a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800623a:	b480      	push	{r7}
 800623c:	b083      	sub	sp, #12
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
	...

08006250 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d109      	bne.n	8006274 <HAL_TIM_PWM_Start+0x24>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006266:	b2db      	uxtb	r3, r3
 8006268:	2b01      	cmp	r3, #1
 800626a:	bf14      	ite	ne
 800626c:	2301      	movne	r3, #1
 800626e:	2300      	moveq	r3, #0
 8006270:	b2db      	uxtb	r3, r3
 8006272:	e03c      	b.n	80062ee <HAL_TIM_PWM_Start+0x9e>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b04      	cmp	r3, #4
 8006278:	d109      	bne.n	800628e <HAL_TIM_PWM_Start+0x3e>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006280:	b2db      	uxtb	r3, r3
 8006282:	2b01      	cmp	r3, #1
 8006284:	bf14      	ite	ne
 8006286:	2301      	movne	r3, #1
 8006288:	2300      	moveq	r3, #0
 800628a:	b2db      	uxtb	r3, r3
 800628c:	e02f      	b.n	80062ee <HAL_TIM_PWM_Start+0x9e>
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	2b08      	cmp	r3, #8
 8006292:	d109      	bne.n	80062a8 <HAL_TIM_PWM_Start+0x58>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800629a:	b2db      	uxtb	r3, r3
 800629c:	2b01      	cmp	r3, #1
 800629e:	bf14      	ite	ne
 80062a0:	2301      	movne	r3, #1
 80062a2:	2300      	moveq	r3, #0
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	e022      	b.n	80062ee <HAL_TIM_PWM_Start+0x9e>
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	2b0c      	cmp	r3, #12
 80062ac:	d109      	bne.n	80062c2 <HAL_TIM_PWM_Start+0x72>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	bf14      	ite	ne
 80062ba:	2301      	movne	r3, #1
 80062bc:	2300      	moveq	r3, #0
 80062be:	b2db      	uxtb	r3, r3
 80062c0:	e015      	b.n	80062ee <HAL_TIM_PWM_Start+0x9e>
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	2b10      	cmp	r3, #16
 80062c6:	d109      	bne.n	80062dc <HAL_TIM_PWM_Start+0x8c>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80062ce:	b2db      	uxtb	r3, r3
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	bf14      	ite	ne
 80062d4:	2301      	movne	r3, #1
 80062d6:	2300      	moveq	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	e008      	b.n	80062ee <HAL_TIM_PWM_Start+0x9e>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	bf14      	ite	ne
 80062e8:	2301      	movne	r3, #1
 80062ea:	2300      	moveq	r3, #0
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d001      	beq.n	80062f6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e09c      	b.n	8006430 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d104      	bne.n	8006306 <HAL_TIM_PWM_Start+0xb6>
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2202      	movs	r2, #2
 8006300:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006304:	e023      	b.n	800634e <HAL_TIM_PWM_Start+0xfe>
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	2b04      	cmp	r3, #4
 800630a:	d104      	bne.n	8006316 <HAL_TIM_PWM_Start+0xc6>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2202      	movs	r2, #2
 8006310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006314:	e01b      	b.n	800634e <HAL_TIM_PWM_Start+0xfe>
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	2b08      	cmp	r3, #8
 800631a:	d104      	bne.n	8006326 <HAL_TIM_PWM_Start+0xd6>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2202      	movs	r2, #2
 8006320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006324:	e013      	b.n	800634e <HAL_TIM_PWM_Start+0xfe>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b0c      	cmp	r3, #12
 800632a:	d104      	bne.n	8006336 <HAL_TIM_PWM_Start+0xe6>
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2202      	movs	r2, #2
 8006330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006334:	e00b      	b.n	800634e <HAL_TIM_PWM_Start+0xfe>
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	2b10      	cmp	r3, #16
 800633a:	d104      	bne.n	8006346 <HAL_TIM_PWM_Start+0xf6>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006344:	e003      	b.n	800634e <HAL_TIM_PWM_Start+0xfe>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2202      	movs	r2, #2
 800634a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2201      	movs	r2, #1
 8006354:	6839      	ldr	r1, [r7, #0]
 8006356:	4618      	mov	r0, r3
 8006358:	f000 ffb0 	bl	80072bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a35      	ldr	r2, [pc, #212]	; (8006438 <HAL_TIM_PWM_Start+0x1e8>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d013      	beq.n	800638e <HAL_TIM_PWM_Start+0x13e>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a34      	ldr	r2, [pc, #208]	; (800643c <HAL_TIM_PWM_Start+0x1ec>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d00e      	beq.n	800638e <HAL_TIM_PWM_Start+0x13e>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a32      	ldr	r2, [pc, #200]	; (8006440 <HAL_TIM_PWM_Start+0x1f0>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d009      	beq.n	800638e <HAL_TIM_PWM_Start+0x13e>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a31      	ldr	r2, [pc, #196]	; (8006444 <HAL_TIM_PWM_Start+0x1f4>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d004      	beq.n	800638e <HAL_TIM_PWM_Start+0x13e>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a2f      	ldr	r2, [pc, #188]	; (8006448 <HAL_TIM_PWM_Start+0x1f8>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d101      	bne.n	8006392 <HAL_TIM_PWM_Start+0x142>
 800638e:	2301      	movs	r3, #1
 8006390:	e000      	b.n	8006394 <HAL_TIM_PWM_Start+0x144>
 8006392:	2300      	movs	r3, #0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d007      	beq.n	80063a8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063a6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a22      	ldr	r2, [pc, #136]	; (8006438 <HAL_TIM_PWM_Start+0x1e8>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d01d      	beq.n	80063ee <HAL_TIM_PWM_Start+0x19e>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063ba:	d018      	beq.n	80063ee <HAL_TIM_PWM_Start+0x19e>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a22      	ldr	r2, [pc, #136]	; (800644c <HAL_TIM_PWM_Start+0x1fc>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d013      	beq.n	80063ee <HAL_TIM_PWM_Start+0x19e>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a21      	ldr	r2, [pc, #132]	; (8006450 <HAL_TIM_PWM_Start+0x200>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d00e      	beq.n	80063ee <HAL_TIM_PWM_Start+0x19e>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a1f      	ldr	r2, [pc, #124]	; (8006454 <HAL_TIM_PWM_Start+0x204>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d009      	beq.n	80063ee <HAL_TIM_PWM_Start+0x19e>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a17      	ldr	r2, [pc, #92]	; (800643c <HAL_TIM_PWM_Start+0x1ec>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d004      	beq.n	80063ee <HAL_TIM_PWM_Start+0x19e>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a15      	ldr	r2, [pc, #84]	; (8006440 <HAL_TIM_PWM_Start+0x1f0>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d115      	bne.n	800641a <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689a      	ldr	r2, [r3, #8]
 80063f4:	4b18      	ldr	r3, [pc, #96]	; (8006458 <HAL_TIM_PWM_Start+0x208>)
 80063f6:	4013      	ands	r3, r2
 80063f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	2b06      	cmp	r3, #6
 80063fe:	d015      	beq.n	800642c <HAL_TIM_PWM_Start+0x1dc>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006406:	d011      	beq.n	800642c <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0201 	orr.w	r2, r2, #1
 8006416:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006418:	e008      	b.n	800642c <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f042 0201 	orr.w	r2, r2, #1
 8006428:	601a      	str	r2, [r3, #0]
 800642a:	e000      	b.n	800642e <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800642c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	40012c00 	.word	0x40012c00
 800643c:	40013400 	.word	0x40013400
 8006440:	40014000 	.word	0x40014000
 8006444:	40014400 	.word	0x40014400
 8006448:	40014800 	.word	0x40014800
 800644c:	40000400 	.word	0x40000400
 8006450:	40000800 	.word	0x40000800
 8006454:	40000c00 	.word	0x40000c00
 8006458:	00010007 	.word	0x00010007

0800645c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	f003 0302 	and.w	r3, r3, #2
 800646e:	2b02      	cmp	r3, #2
 8006470:	d122      	bne.n	80064b8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	68db      	ldr	r3, [r3, #12]
 8006478:	f003 0302 	and.w	r3, r3, #2
 800647c:	2b02      	cmp	r3, #2
 800647e:	d11b      	bne.n	80064b8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f06f 0202 	mvn.w	r2, #2
 8006488:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	f003 0303 	and.w	r3, r3, #3
 800649a:	2b00      	cmp	r3, #0
 800649c:	d003      	beq.n	80064a6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fae3 	bl	8006a6a <HAL_TIM_IC_CaptureCallback>
 80064a4:	e005      	b.n	80064b2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 fad5 	bl	8006a56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fae6 	bl	8006a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	691b      	ldr	r3, [r3, #16]
 80064be:	f003 0304 	and.w	r3, r3, #4
 80064c2:	2b04      	cmp	r3, #4
 80064c4:	d122      	bne.n	800650c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f003 0304 	and.w	r3, r3, #4
 80064d0:	2b04      	cmp	r3, #4
 80064d2:	d11b      	bne.n	800650c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f06f 0204 	mvn.w	r2, #4
 80064dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	2202      	movs	r2, #2
 80064e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d003      	beq.n	80064fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f000 fab9 	bl	8006a6a <HAL_TIM_IC_CaptureCallback>
 80064f8:	e005      	b.n	8006506 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 faab 	bl	8006a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	f000 fabc 	bl	8006a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2200      	movs	r2, #0
 800650a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	691b      	ldr	r3, [r3, #16]
 8006512:	f003 0308 	and.w	r3, r3, #8
 8006516:	2b08      	cmp	r3, #8
 8006518:	d122      	bne.n	8006560 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	f003 0308 	and.w	r3, r3, #8
 8006524:	2b08      	cmp	r3, #8
 8006526:	d11b      	bne.n	8006560 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	f06f 0208 	mvn.w	r2, #8
 8006530:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	2204      	movs	r2, #4
 8006536:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	69db      	ldr	r3, [r3, #28]
 800653e:	f003 0303 	and.w	r3, r3, #3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fa8f 	bl	8006a6a <HAL_TIM_IC_CaptureCallback>
 800654c:	e005      	b.n	800655a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 fa81 	bl	8006a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fa92 	bl	8006a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f003 0310 	and.w	r3, r3, #16
 800656a:	2b10      	cmp	r3, #16
 800656c:	d122      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f003 0310 	and.w	r3, r3, #16
 8006578:	2b10      	cmp	r3, #16
 800657a:	d11b      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f06f 0210 	mvn.w	r2, #16
 8006584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2208      	movs	r2, #8
 800658a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fa65 	bl	8006a6a <HAL_TIM_IC_CaptureCallback>
 80065a0:	e005      	b.n	80065ae <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fa57 	bl	8006a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fa68 	bl	8006a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f003 0301 	and.w	r3, r3, #1
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d10e      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f003 0301 	and.w	r3, r3, #1
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d107      	bne.n	80065e0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f06f 0201 	mvn.w	r2, #1
 80065d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7fb f82a 	bl	8001634 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065ea:	2b80      	cmp	r3, #128	; 0x80
 80065ec:	d10e      	bne.n	800660c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065f8:	2b80      	cmp	r3, #128	; 0x80
 80065fa:	d107      	bne.n	800660c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 ff10 	bl	800742c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	691b      	ldr	r3, [r3, #16]
 8006612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006616:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800661a:	d10e      	bne.n	800663a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006626:	2b80      	cmp	r3, #128	; 0x80
 8006628:	d107      	bne.n	800663a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006632:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006634:	6878      	ldr	r0, [r7, #4]
 8006636:	f000 ff03 	bl	8007440 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	691b      	ldr	r3, [r3, #16]
 8006640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006644:	2b40      	cmp	r3, #64	; 0x40
 8006646:	d10e      	bne.n	8006666 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	68db      	ldr	r3, [r3, #12]
 800664e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006652:	2b40      	cmp	r3, #64	; 0x40
 8006654:	d107      	bne.n	8006666 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800665e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 fa16 	bl	8006a92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	691b      	ldr	r3, [r3, #16]
 800666c:	f003 0320 	and.w	r3, r3, #32
 8006670:	2b20      	cmp	r3, #32
 8006672:	d10e      	bne.n	8006692 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f003 0320 	and.w	r3, r3, #32
 800667e:	2b20      	cmp	r3, #32
 8006680:	d107      	bne.n	8006692 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f06f 0220 	mvn.w	r2, #32
 800668a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 fec3 	bl	8007418 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006692:	bf00      	nop
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
	...

0800669c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80066a8:	2300      	movs	r3, #0
 80066aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d101      	bne.n	80066ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80066b6:	2302      	movs	r3, #2
 80066b8:	e0ff      	b.n	80068ba <HAL_TIM_PWM_ConfigChannel+0x21e>
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2201      	movs	r2, #1
 80066be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	2b14      	cmp	r3, #20
 80066c6:	f200 80f0 	bhi.w	80068aa <HAL_TIM_PWM_ConfigChannel+0x20e>
 80066ca:	a201      	add	r2, pc, #4	; (adr r2, 80066d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80066cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066d0:	08006725 	.word	0x08006725
 80066d4:	080068ab 	.word	0x080068ab
 80066d8:	080068ab 	.word	0x080068ab
 80066dc:	080068ab 	.word	0x080068ab
 80066e0:	08006765 	.word	0x08006765
 80066e4:	080068ab 	.word	0x080068ab
 80066e8:	080068ab 	.word	0x080068ab
 80066ec:	080068ab 	.word	0x080068ab
 80066f0:	080067a7 	.word	0x080067a7
 80066f4:	080068ab 	.word	0x080068ab
 80066f8:	080068ab 	.word	0x080068ab
 80066fc:	080068ab 	.word	0x080068ab
 8006700:	080067e7 	.word	0x080067e7
 8006704:	080068ab 	.word	0x080068ab
 8006708:	080068ab 	.word	0x080068ab
 800670c:	080068ab 	.word	0x080068ab
 8006710:	08006829 	.word	0x08006829
 8006714:	080068ab 	.word	0x080068ab
 8006718:	080068ab 	.word	0x080068ab
 800671c:	080068ab 	.word	0x080068ab
 8006720:	08006869 	.word	0x08006869
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68b9      	ldr	r1, [r7, #8]
 800672a:	4618      	mov	r0, r3
 800672c:	f000 fa56 	bl	8006bdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	699a      	ldr	r2, [r3, #24]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f042 0208 	orr.w	r2, r2, #8
 800673e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	699a      	ldr	r2, [r3, #24]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0204 	bic.w	r2, r2, #4
 800674e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6999      	ldr	r1, [r3, #24]
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	691a      	ldr	r2, [r3, #16]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	430a      	orrs	r2, r1
 8006760:	619a      	str	r2, [r3, #24]
      break;
 8006762:	e0a5      	b.n	80068b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fac6 	bl	8006cfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	699a      	ldr	r2, [r3, #24]
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800677e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	699a      	ldr	r2, [r3, #24]
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800678e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	6999      	ldr	r1, [r3, #24]
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	021a      	lsls	r2, r3, #8
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	619a      	str	r2, [r3, #24]
      break;
 80067a4:	e084      	b.n	80068b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68b9      	ldr	r1, [r7, #8]
 80067ac:	4618      	mov	r0, r3
 80067ae:	f000 fb2f 	bl	8006e10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	69da      	ldr	r2, [r3, #28]
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f042 0208 	orr.w	r2, r2, #8
 80067c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	69da      	ldr	r2, [r3, #28]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f022 0204 	bic.w	r2, r2, #4
 80067d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	69d9      	ldr	r1, [r3, #28]
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	691a      	ldr	r2, [r3, #16]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	61da      	str	r2, [r3, #28]
      break;
 80067e4:	e064      	b.n	80068b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68b9      	ldr	r1, [r7, #8]
 80067ec:	4618      	mov	r0, r3
 80067ee:	f000 fb97 	bl	8006f20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69da      	ldr	r2, [r3, #28]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006800:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	69da      	ldr	r2, [r3, #28]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006810:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69d9      	ldr	r1, [r3, #28]
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	021a      	lsls	r2, r3, #8
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	430a      	orrs	r2, r1
 8006824:	61da      	str	r2, [r3, #28]
      break;
 8006826:	e043      	b.n	80068b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	68b9      	ldr	r1, [r7, #8]
 800682e:	4618      	mov	r0, r3
 8006830:	f000 fbe0 	bl	8006ff4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f042 0208 	orr.w	r2, r2, #8
 8006842:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 0204 	bic.w	r2, r2, #4
 8006852:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800685a:	68bb      	ldr	r3, [r7, #8]
 800685c:	691a      	ldr	r2, [r3, #16]
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	430a      	orrs	r2, r1
 8006864:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006866:	e023      	b.n	80068b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	68b9      	ldr	r1, [r7, #8]
 800686e:	4618      	mov	r0, r3
 8006870:	f000 fc24 	bl	80070bc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006882:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006892:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	021a      	lsls	r2, r3, #8
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80068a8:	e002      	b.n	80068b0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	75fb      	strb	r3, [r7, #23]
      break;
 80068ae:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2200      	movs	r2, #0
 80068b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3718      	adds	r7, #24
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
 80068c2:	bf00      	nop

080068c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068ce:	2300      	movs	r3, #0
 80068d0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d101      	bne.n	80068e0 <HAL_TIM_ConfigClockSource+0x1c>
 80068dc:	2302      	movs	r3, #2
 80068de:	e0b6      	b.n	8006a4e <HAL_TIM_ConfigClockSource+0x18a>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2201      	movs	r2, #1
 80068e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2202      	movs	r2, #2
 80068ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	689b      	ldr	r3, [r3, #8]
 80068f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006902:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800690a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	68ba      	ldr	r2, [r7, #8]
 8006912:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800691c:	d03e      	beq.n	800699c <HAL_TIM_ConfigClockSource+0xd8>
 800691e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006922:	f200 8087 	bhi.w	8006a34 <HAL_TIM_ConfigClockSource+0x170>
 8006926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800692a:	f000 8086 	beq.w	8006a3a <HAL_TIM_ConfigClockSource+0x176>
 800692e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006932:	d87f      	bhi.n	8006a34 <HAL_TIM_ConfigClockSource+0x170>
 8006934:	2b70      	cmp	r3, #112	; 0x70
 8006936:	d01a      	beq.n	800696e <HAL_TIM_ConfigClockSource+0xaa>
 8006938:	2b70      	cmp	r3, #112	; 0x70
 800693a:	d87b      	bhi.n	8006a34 <HAL_TIM_ConfigClockSource+0x170>
 800693c:	2b60      	cmp	r3, #96	; 0x60
 800693e:	d050      	beq.n	80069e2 <HAL_TIM_ConfigClockSource+0x11e>
 8006940:	2b60      	cmp	r3, #96	; 0x60
 8006942:	d877      	bhi.n	8006a34 <HAL_TIM_ConfigClockSource+0x170>
 8006944:	2b50      	cmp	r3, #80	; 0x50
 8006946:	d03c      	beq.n	80069c2 <HAL_TIM_ConfigClockSource+0xfe>
 8006948:	2b50      	cmp	r3, #80	; 0x50
 800694a:	d873      	bhi.n	8006a34 <HAL_TIM_ConfigClockSource+0x170>
 800694c:	2b40      	cmp	r3, #64	; 0x40
 800694e:	d058      	beq.n	8006a02 <HAL_TIM_ConfigClockSource+0x13e>
 8006950:	2b40      	cmp	r3, #64	; 0x40
 8006952:	d86f      	bhi.n	8006a34 <HAL_TIM_ConfigClockSource+0x170>
 8006954:	2b30      	cmp	r3, #48	; 0x30
 8006956:	d064      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x15e>
 8006958:	2b30      	cmp	r3, #48	; 0x30
 800695a:	d86b      	bhi.n	8006a34 <HAL_TIM_ConfigClockSource+0x170>
 800695c:	2b20      	cmp	r3, #32
 800695e:	d060      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x15e>
 8006960:	2b20      	cmp	r3, #32
 8006962:	d867      	bhi.n	8006a34 <HAL_TIM_ConfigClockSource+0x170>
 8006964:	2b00      	cmp	r3, #0
 8006966:	d05c      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x15e>
 8006968:	2b10      	cmp	r3, #16
 800696a:	d05a      	beq.n	8006a22 <HAL_TIM_ConfigClockSource+0x15e>
 800696c:	e062      	b.n	8006a34 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6818      	ldr	r0, [r3, #0]
 8006972:	683b      	ldr	r3, [r7, #0]
 8006974:	6899      	ldr	r1, [r3, #8]
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	685a      	ldr	r2, [r3, #4]
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	68db      	ldr	r3, [r3, #12]
 800697e:	f000 fc7d 	bl	800727c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006990:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	68ba      	ldr	r2, [r7, #8]
 8006998:	609a      	str	r2, [r3, #8]
      break;
 800699a:	e04f      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6818      	ldr	r0, [r3, #0]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	6899      	ldr	r1, [r3, #8]
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	685a      	ldr	r2, [r3, #4]
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	f000 fc66 	bl	800727c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689a      	ldr	r2, [r3, #8]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80069be:	609a      	str	r2, [r3, #8]
      break;
 80069c0:	e03c      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6818      	ldr	r0, [r3, #0]
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	6859      	ldr	r1, [r3, #4]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	68db      	ldr	r3, [r3, #12]
 80069ce:	461a      	mov	r2, r3
 80069d0:	f000 fbda 	bl	8007188 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2150      	movs	r1, #80	; 0x50
 80069da:	4618      	mov	r0, r3
 80069dc:	f000 fc33 	bl	8007246 <TIM_ITRx_SetConfig>
      break;
 80069e0:	e02c      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6818      	ldr	r0, [r3, #0]
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	6859      	ldr	r1, [r3, #4]
 80069ea:	683b      	ldr	r3, [r7, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	461a      	mov	r2, r3
 80069f0:	f000 fbf9 	bl	80071e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	2160      	movs	r1, #96	; 0x60
 80069fa:	4618      	mov	r0, r3
 80069fc:	f000 fc23 	bl	8007246 <TIM_ITRx_SetConfig>
      break;
 8006a00:	e01c      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6818      	ldr	r0, [r3, #0]
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	6859      	ldr	r1, [r3, #4]
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	461a      	mov	r2, r3
 8006a10:	f000 fbba 	bl	8007188 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2140      	movs	r1, #64	; 0x40
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 fc13 	bl	8007246 <TIM_ITRx_SetConfig>
      break;
 8006a20:	e00c      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681a      	ldr	r2, [r3, #0]
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	f000 fc0a 	bl	8007246 <TIM_ITRx_SetConfig>
      break;
 8006a32:	e003      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	73fb      	strb	r3, [r7, #15]
      break;
 8006a38:	e000      	b.n	8006a3c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006a3a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}

08006a56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a56:	b480      	push	{r7}
 8006a58:	b083      	sub	sp, #12
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006a5e:	bf00      	nop
 8006a60:	370c      	adds	r7, #12
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006a6a:	b480      	push	{r7}
 8006a6c:	b083      	sub	sp, #12
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006a72:	bf00      	nop
 8006a74:	370c      	adds	r7, #12
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr

08006a7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006a7e:	b480      	push	{r7}
 8006a80:	b083      	sub	sp, #12
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr

08006a92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006a92:	b480      	push	{r7}
 8006a94:	b083      	sub	sp, #12
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006a9a:	bf00      	nop
 8006a9c:	370c      	adds	r7, #12
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr
	...

08006aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006aa8:	b480      	push	{r7}
 8006aaa:	b085      	sub	sp, #20
 8006aac:	af00      	add	r7, sp, #0
 8006aae:	6078      	str	r0, [r7, #4]
 8006ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a40      	ldr	r2, [pc, #256]	; (8006bbc <TIM_Base_SetConfig+0x114>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d013      	beq.n	8006ae8 <TIM_Base_SetConfig+0x40>
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ac6:	d00f      	beq.n	8006ae8 <TIM_Base_SetConfig+0x40>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	4a3d      	ldr	r2, [pc, #244]	; (8006bc0 <TIM_Base_SetConfig+0x118>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d00b      	beq.n	8006ae8 <TIM_Base_SetConfig+0x40>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	4a3c      	ldr	r2, [pc, #240]	; (8006bc4 <TIM_Base_SetConfig+0x11c>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d007      	beq.n	8006ae8 <TIM_Base_SetConfig+0x40>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	4a3b      	ldr	r2, [pc, #236]	; (8006bc8 <TIM_Base_SetConfig+0x120>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d003      	beq.n	8006ae8 <TIM_Base_SetConfig+0x40>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a3a      	ldr	r2, [pc, #232]	; (8006bcc <TIM_Base_SetConfig+0x124>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d108      	bne.n	8006afa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006aee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	68fa      	ldr	r2, [r7, #12]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a2f      	ldr	r2, [pc, #188]	; (8006bbc <TIM_Base_SetConfig+0x114>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d01f      	beq.n	8006b42 <TIM_Base_SetConfig+0x9a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b08:	d01b      	beq.n	8006b42 <TIM_Base_SetConfig+0x9a>
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	4a2c      	ldr	r2, [pc, #176]	; (8006bc0 <TIM_Base_SetConfig+0x118>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d017      	beq.n	8006b42 <TIM_Base_SetConfig+0x9a>
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	4a2b      	ldr	r2, [pc, #172]	; (8006bc4 <TIM_Base_SetConfig+0x11c>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d013      	beq.n	8006b42 <TIM_Base_SetConfig+0x9a>
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	4a2a      	ldr	r2, [pc, #168]	; (8006bc8 <TIM_Base_SetConfig+0x120>)
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d00f      	beq.n	8006b42 <TIM_Base_SetConfig+0x9a>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	4a29      	ldr	r2, [pc, #164]	; (8006bcc <TIM_Base_SetConfig+0x124>)
 8006b26:	4293      	cmp	r3, r2
 8006b28:	d00b      	beq.n	8006b42 <TIM_Base_SetConfig+0x9a>
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4a28      	ldr	r2, [pc, #160]	; (8006bd0 <TIM_Base_SetConfig+0x128>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d007      	beq.n	8006b42 <TIM_Base_SetConfig+0x9a>
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	4a27      	ldr	r2, [pc, #156]	; (8006bd4 <TIM_Base_SetConfig+0x12c>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d003      	beq.n	8006b42 <TIM_Base_SetConfig+0x9a>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a26      	ldr	r2, [pc, #152]	; (8006bd8 <TIM_Base_SetConfig+0x130>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d108      	bne.n	8006b54 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	68fa      	ldr	r2, [r7, #12]
 8006b50:	4313      	orrs	r3, r2
 8006b52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	695b      	ldr	r3, [r3, #20]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b68:	683b      	ldr	r3, [r7, #0]
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a10      	ldr	r2, [pc, #64]	; (8006bbc <TIM_Base_SetConfig+0x114>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d00f      	beq.n	8006ba0 <TIM_Base_SetConfig+0xf8>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a12      	ldr	r2, [pc, #72]	; (8006bcc <TIM_Base_SetConfig+0x124>)
 8006b84:	4293      	cmp	r3, r2
 8006b86:	d00b      	beq.n	8006ba0 <TIM_Base_SetConfig+0xf8>
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	4a11      	ldr	r2, [pc, #68]	; (8006bd0 <TIM_Base_SetConfig+0x128>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d007      	beq.n	8006ba0 <TIM_Base_SetConfig+0xf8>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	4a10      	ldr	r2, [pc, #64]	; (8006bd4 <TIM_Base_SetConfig+0x12c>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d003      	beq.n	8006ba0 <TIM_Base_SetConfig+0xf8>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	4a0f      	ldr	r2, [pc, #60]	; (8006bd8 <TIM_Base_SetConfig+0x130>)
 8006b9c:	4293      	cmp	r3, r2
 8006b9e:	d103      	bne.n	8006ba8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	691a      	ldr	r2, [r3, #16]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2201      	movs	r2, #1
 8006bac:	615a      	str	r2, [r3, #20]
}
 8006bae:	bf00      	nop
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr
 8006bba:	bf00      	nop
 8006bbc:	40012c00 	.word	0x40012c00
 8006bc0:	40000400 	.word	0x40000400
 8006bc4:	40000800 	.word	0x40000800
 8006bc8:	40000c00 	.word	0x40000c00
 8006bcc:	40013400 	.word	0x40013400
 8006bd0:	40014000 	.word	0x40014000
 8006bd4:	40014400 	.word	0x40014400
 8006bd8:	40014800 	.word	0x40014800

08006bdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b087      	sub	sp, #28
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
 8006be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	f023 0201 	bic.w	r2, r3, #1
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006c0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f023 0303 	bic.w	r3, r3, #3
 8006c16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f023 0302 	bic.w	r3, r3, #2
 8006c28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	4a2c      	ldr	r2, [pc, #176]	; (8006ce8 <TIM_OC1_SetConfig+0x10c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d00f      	beq.n	8006c5c <TIM_OC1_SetConfig+0x80>
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	4a2b      	ldr	r2, [pc, #172]	; (8006cec <TIM_OC1_SetConfig+0x110>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d00b      	beq.n	8006c5c <TIM_OC1_SetConfig+0x80>
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	4a2a      	ldr	r2, [pc, #168]	; (8006cf0 <TIM_OC1_SetConfig+0x114>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d007      	beq.n	8006c5c <TIM_OC1_SetConfig+0x80>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a29      	ldr	r2, [pc, #164]	; (8006cf4 <TIM_OC1_SetConfig+0x118>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d003      	beq.n	8006c5c <TIM_OC1_SetConfig+0x80>
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a28      	ldr	r2, [pc, #160]	; (8006cf8 <TIM_OC1_SetConfig+0x11c>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d10c      	bne.n	8006c76 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	f023 0308 	bic.w	r3, r3, #8
 8006c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	697a      	ldr	r2, [r7, #20]
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	f023 0304 	bic.w	r3, r3, #4
 8006c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	4a1b      	ldr	r2, [pc, #108]	; (8006ce8 <TIM_OC1_SetConfig+0x10c>)
 8006c7a:	4293      	cmp	r3, r2
 8006c7c:	d00f      	beq.n	8006c9e <TIM_OC1_SetConfig+0xc2>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	4a1a      	ldr	r2, [pc, #104]	; (8006cec <TIM_OC1_SetConfig+0x110>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d00b      	beq.n	8006c9e <TIM_OC1_SetConfig+0xc2>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	4a19      	ldr	r2, [pc, #100]	; (8006cf0 <TIM_OC1_SetConfig+0x114>)
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	d007      	beq.n	8006c9e <TIM_OC1_SetConfig+0xc2>
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	4a18      	ldr	r2, [pc, #96]	; (8006cf4 <TIM_OC1_SetConfig+0x118>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d003      	beq.n	8006c9e <TIM_OC1_SetConfig+0xc2>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	4a17      	ldr	r2, [pc, #92]	; (8006cf8 <TIM_OC1_SetConfig+0x11c>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d111      	bne.n	8006cc2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c9e:	693b      	ldr	r3, [r7, #16]
 8006ca0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	695b      	ldr	r3, [r3, #20]
 8006cb2:	693a      	ldr	r2, [r7, #16]
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	699b      	ldr	r3, [r3, #24]
 8006cbc:	693a      	ldr	r2, [r7, #16]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68fa      	ldr	r2, [r7, #12]
 8006ccc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	685a      	ldr	r2, [r3, #4]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	697a      	ldr	r2, [r7, #20]
 8006cda:	621a      	str	r2, [r3, #32]
}
 8006cdc:	bf00      	nop
 8006cde:	371c      	adds	r7, #28
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr
 8006ce8:	40012c00 	.word	0x40012c00
 8006cec:	40013400 	.word	0x40013400
 8006cf0:	40014000 	.word	0x40014000
 8006cf4:	40014400 	.word	0x40014400
 8006cf8:	40014800 	.word	0x40014800

08006cfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b087      	sub	sp, #28
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a1b      	ldr	r3, [r3, #32]
 8006d0a:	f023 0210 	bic.w	r2, r3, #16
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
 8006d1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	021b      	lsls	r3, r3, #8
 8006d3e:	68fa      	ldr	r2, [r7, #12]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	f023 0320 	bic.w	r3, r3, #32
 8006d4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	011b      	lsls	r3, r3, #4
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a28      	ldr	r2, [pc, #160]	; (8006dfc <TIM_OC2_SetConfig+0x100>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d003      	beq.n	8006d68 <TIM_OC2_SetConfig+0x6c>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	4a27      	ldr	r2, [pc, #156]	; (8006e00 <TIM_OC2_SetConfig+0x104>)
 8006d64:	4293      	cmp	r3, r2
 8006d66:	d10d      	bne.n	8006d84 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	68db      	ldr	r3, [r3, #12]
 8006d74:	011b      	lsls	r3, r3, #4
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	4a1d      	ldr	r2, [pc, #116]	; (8006dfc <TIM_OC2_SetConfig+0x100>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d00f      	beq.n	8006dac <TIM_OC2_SetConfig+0xb0>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	4a1c      	ldr	r2, [pc, #112]	; (8006e00 <TIM_OC2_SetConfig+0x104>)
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d00b      	beq.n	8006dac <TIM_OC2_SetConfig+0xb0>
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	4a1b      	ldr	r2, [pc, #108]	; (8006e04 <TIM_OC2_SetConfig+0x108>)
 8006d98:	4293      	cmp	r3, r2
 8006d9a:	d007      	beq.n	8006dac <TIM_OC2_SetConfig+0xb0>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	4a1a      	ldr	r2, [pc, #104]	; (8006e08 <TIM_OC2_SetConfig+0x10c>)
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d003      	beq.n	8006dac <TIM_OC2_SetConfig+0xb0>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	4a19      	ldr	r2, [pc, #100]	; (8006e0c <TIM_OC2_SetConfig+0x110>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d113      	bne.n	8006dd4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006db2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006dba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	695b      	ldr	r3, [r3, #20]
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	699b      	ldr	r3, [r3, #24]
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	693a      	ldr	r2, [r7, #16]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	693a      	ldr	r2, [r7, #16]
 8006dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68fa      	ldr	r2, [r7, #12]
 8006dde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	685a      	ldr	r2, [r3, #4]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	621a      	str	r2, [r3, #32]
}
 8006dee:	bf00      	nop
 8006df0:	371c      	adds	r7, #28
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr
 8006dfa:	bf00      	nop
 8006dfc:	40012c00 	.word	0x40012c00
 8006e00:	40013400 	.word	0x40013400
 8006e04:	40014000 	.word	0x40014000
 8006e08:	40014400 	.word	0x40014400
 8006e0c:	40014800 	.word	0x40014800

08006e10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b087      	sub	sp, #28
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6a1b      	ldr	r3, [r3, #32]
 8006e1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	6a1b      	ldr	r3, [r3, #32]
 8006e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	69db      	ldr	r3, [r3, #28]
 8006e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f023 0303 	bic.w	r3, r3, #3
 8006e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	021b      	lsls	r3, r3, #8
 8006e64:	697a      	ldr	r2, [r7, #20]
 8006e66:	4313      	orrs	r3, r2
 8006e68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4a27      	ldr	r2, [pc, #156]	; (8006f0c <TIM_OC3_SetConfig+0xfc>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d003      	beq.n	8006e7a <TIM_OC3_SetConfig+0x6a>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	4a26      	ldr	r2, [pc, #152]	; (8006f10 <TIM_OC3_SetConfig+0x100>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d10d      	bne.n	8006e96 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	021b      	lsls	r3, r3, #8
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a1c      	ldr	r2, [pc, #112]	; (8006f0c <TIM_OC3_SetConfig+0xfc>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d00f      	beq.n	8006ebe <TIM_OC3_SetConfig+0xae>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a1b      	ldr	r2, [pc, #108]	; (8006f10 <TIM_OC3_SetConfig+0x100>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d00b      	beq.n	8006ebe <TIM_OC3_SetConfig+0xae>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a1a      	ldr	r2, [pc, #104]	; (8006f14 <TIM_OC3_SetConfig+0x104>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d007      	beq.n	8006ebe <TIM_OC3_SetConfig+0xae>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a19      	ldr	r2, [pc, #100]	; (8006f18 <TIM_OC3_SetConfig+0x108>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d003      	beq.n	8006ebe <TIM_OC3_SetConfig+0xae>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a18      	ldr	r2, [pc, #96]	; (8006f1c <TIM_OC3_SetConfig+0x10c>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d113      	bne.n	8006ee6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	695b      	ldr	r3, [r3, #20]
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	699b      	ldr	r3, [r3, #24]
 8006ede:	011b      	lsls	r3, r3, #4
 8006ee0:	693a      	ldr	r2, [r7, #16]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	693a      	ldr	r2, [r7, #16]
 8006eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	68fa      	ldr	r2, [r7, #12]
 8006ef0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	685a      	ldr	r2, [r3, #4]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	621a      	str	r2, [r3, #32]
}
 8006f00:	bf00      	nop
 8006f02:	371c      	adds	r7, #28
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	40012c00 	.word	0x40012c00
 8006f10:	40013400 	.word	0x40013400
 8006f14:	40014000 	.word	0x40014000
 8006f18:	40014400 	.word	0x40014400
 8006f1c:	40014800 	.word	0x40014800

08006f20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f20:	b480      	push	{r7}
 8006f22:	b087      	sub	sp, #28
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
 8006f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a1b      	ldr	r3, [r3, #32]
 8006f3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	69db      	ldr	r3, [r3, #28]
 8006f46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	021b      	lsls	r3, r3, #8
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	4313      	orrs	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	031b      	lsls	r3, r3, #12
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a18      	ldr	r2, [pc, #96]	; (8006fe0 <TIM_OC4_SetConfig+0xc0>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d00f      	beq.n	8006fa4 <TIM_OC4_SetConfig+0x84>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a17      	ldr	r2, [pc, #92]	; (8006fe4 <TIM_OC4_SetConfig+0xc4>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d00b      	beq.n	8006fa4 <TIM_OC4_SetConfig+0x84>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a16      	ldr	r2, [pc, #88]	; (8006fe8 <TIM_OC4_SetConfig+0xc8>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d007      	beq.n	8006fa4 <TIM_OC4_SetConfig+0x84>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a15      	ldr	r2, [pc, #84]	; (8006fec <TIM_OC4_SetConfig+0xcc>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d003      	beq.n	8006fa4 <TIM_OC4_SetConfig+0x84>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	4a14      	ldr	r2, [pc, #80]	; (8006ff0 <TIM_OC4_SetConfig+0xd0>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d109      	bne.n	8006fb8 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006fa4:	697b      	ldr	r3, [r7, #20]
 8006fa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006faa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	695b      	ldr	r3, [r3, #20]
 8006fb0:	019b      	lsls	r3, r3, #6
 8006fb2:	697a      	ldr	r2, [r7, #20]
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	697a      	ldr	r2, [r7, #20]
 8006fbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	685a      	ldr	r2, [r3, #4]
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	693a      	ldr	r2, [r7, #16]
 8006fd0:	621a      	str	r2, [r3, #32]
}
 8006fd2:	bf00      	nop
 8006fd4:	371c      	adds	r7, #28
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
 8006fde:	bf00      	nop
 8006fe0:	40012c00 	.word	0x40012c00
 8006fe4:	40013400 	.word	0x40013400
 8006fe8:	40014000 	.word	0x40014000
 8006fec:	40014400 	.word	0x40014400
 8006ff0:	40014800 	.word	0x40014800

08006ff4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6a1b      	ldr	r3, [r3, #32]
 8007002:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	6a1b      	ldr	r3, [r3, #32]
 800700e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800701a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007026:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007038:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	041b      	lsls	r3, r3, #16
 8007040:	693a      	ldr	r2, [r7, #16]
 8007042:	4313      	orrs	r3, r2
 8007044:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	4a17      	ldr	r2, [pc, #92]	; (80070a8 <TIM_OC5_SetConfig+0xb4>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d00f      	beq.n	800706e <TIM_OC5_SetConfig+0x7a>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	4a16      	ldr	r2, [pc, #88]	; (80070ac <TIM_OC5_SetConfig+0xb8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d00b      	beq.n	800706e <TIM_OC5_SetConfig+0x7a>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	4a15      	ldr	r2, [pc, #84]	; (80070b0 <TIM_OC5_SetConfig+0xbc>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d007      	beq.n	800706e <TIM_OC5_SetConfig+0x7a>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	4a14      	ldr	r2, [pc, #80]	; (80070b4 <TIM_OC5_SetConfig+0xc0>)
 8007062:	4293      	cmp	r3, r2
 8007064:	d003      	beq.n	800706e <TIM_OC5_SetConfig+0x7a>
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	4a13      	ldr	r2, [pc, #76]	; (80070b8 <TIM_OC5_SetConfig+0xc4>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d109      	bne.n	8007082 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800706e:	697b      	ldr	r3, [r7, #20]
 8007070:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007074:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007076:	683b      	ldr	r3, [r7, #0]
 8007078:	695b      	ldr	r3, [r3, #20]
 800707a:	021b      	lsls	r3, r3, #8
 800707c:	697a      	ldr	r2, [r7, #20]
 800707e:	4313      	orrs	r3, r2
 8007080:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	697a      	ldr	r2, [r7, #20]
 8007086:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800708e:	683b      	ldr	r3, [r7, #0]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	693a      	ldr	r2, [r7, #16]
 800709a:	621a      	str	r2, [r3, #32]
}
 800709c:	bf00      	nop
 800709e:	371c      	adds	r7, #28
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	40012c00 	.word	0x40012c00
 80070ac:	40013400 	.word	0x40013400
 80070b0:	40014000 	.word	0x40014000
 80070b4:	40014400 	.word	0x40014400
 80070b8:	40014800 	.word	0x40014800

080070bc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
 80070c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6a1b      	ldr	r3, [r3, #32]
 80070ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6a1b      	ldr	r3, [r3, #32]
 80070d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80070ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	021b      	lsls	r3, r3, #8
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	4313      	orrs	r3, r2
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80070fc:	693b      	ldr	r3, [r7, #16]
 80070fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	051b      	lsls	r3, r3, #20
 800710a:	693a      	ldr	r2, [r7, #16]
 800710c:	4313      	orrs	r3, r2
 800710e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a18      	ldr	r2, [pc, #96]	; (8007174 <TIM_OC6_SetConfig+0xb8>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d00f      	beq.n	8007138 <TIM_OC6_SetConfig+0x7c>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	4a17      	ldr	r2, [pc, #92]	; (8007178 <TIM_OC6_SetConfig+0xbc>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d00b      	beq.n	8007138 <TIM_OC6_SetConfig+0x7c>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	4a16      	ldr	r2, [pc, #88]	; (800717c <TIM_OC6_SetConfig+0xc0>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d007      	beq.n	8007138 <TIM_OC6_SetConfig+0x7c>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	4a15      	ldr	r2, [pc, #84]	; (8007180 <TIM_OC6_SetConfig+0xc4>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d003      	beq.n	8007138 <TIM_OC6_SetConfig+0x7c>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a14      	ldr	r2, [pc, #80]	; (8007184 <TIM_OC6_SetConfig+0xc8>)
 8007134:	4293      	cmp	r3, r2
 8007136:	d109      	bne.n	800714c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800713e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	029b      	lsls	r3, r3, #10
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	4313      	orrs	r3, r2
 800714a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	697a      	ldr	r2, [r7, #20]
 8007150:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	693a      	ldr	r2, [r7, #16]
 8007164:	621a      	str	r2, [r3, #32]
}
 8007166:	bf00      	nop
 8007168:	371c      	adds	r7, #28
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr
 8007172:	bf00      	nop
 8007174:	40012c00 	.word	0x40012c00
 8007178:	40013400 	.word	0x40013400
 800717c:	40014000 	.word	0x40014000
 8007180:	40014400 	.word	0x40014400
 8007184:	40014800 	.word	0x40014800

08007188 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007188:	b480      	push	{r7}
 800718a:	b087      	sub	sp, #28
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6a1b      	ldr	r3, [r3, #32]
 8007198:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	6a1b      	ldr	r3, [r3, #32]
 800719e:	f023 0201 	bic.w	r2, r3, #1
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	699b      	ldr	r3, [r3, #24]
 80071aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071ac:	693b      	ldr	r3, [r7, #16]
 80071ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	011b      	lsls	r3, r3, #4
 80071b8:	693a      	ldr	r2, [r7, #16]
 80071ba:	4313      	orrs	r3, r2
 80071bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071be:	697b      	ldr	r3, [r7, #20]
 80071c0:	f023 030a 	bic.w	r3, r3, #10
 80071c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071c6:	697a      	ldr	r2, [r7, #20]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	693a      	ldr	r2, [r7, #16]
 80071d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	697a      	ldr	r2, [r7, #20]
 80071d8:	621a      	str	r2, [r3, #32]
}
 80071da:	bf00      	nop
 80071dc:	371c      	adds	r7, #28
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b087      	sub	sp, #28
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	60f8      	str	r0, [r7, #12]
 80071ee:	60b9      	str	r1, [r7, #8]
 80071f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	6a1b      	ldr	r3, [r3, #32]
 80071f6:	f023 0210 	bic.w	r2, r3, #16
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	699b      	ldr	r3, [r3, #24]
 8007202:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6a1b      	ldr	r3, [r3, #32]
 8007208:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007210:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	031b      	lsls	r3, r3, #12
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	4313      	orrs	r3, r2
 800721a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007222:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	011b      	lsls	r3, r3, #4
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	4313      	orrs	r3, r2
 800722c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	693a      	ldr	r2, [r7, #16]
 8007238:	621a      	str	r2, [r3, #32]
}
 800723a:	bf00      	nop
 800723c:	371c      	adds	r7, #28
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr

08007246 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007246:	b480      	push	{r7}
 8007248:	b085      	sub	sp, #20
 800724a:	af00      	add	r7, sp, #0
 800724c:	6078      	str	r0, [r7, #4]
 800724e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800725c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800725e:	683a      	ldr	r2, [r7, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	4313      	orrs	r3, r2
 8007264:	f043 0307 	orr.w	r3, r3, #7
 8007268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	68fa      	ldr	r2, [r7, #12]
 800726e:	609a      	str	r2, [r3, #8]
}
 8007270:	bf00      	nop
 8007272:	3714      	adds	r7, #20
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800727c:	b480      	push	{r7}
 800727e:	b087      	sub	sp, #28
 8007280:	af00      	add	r7, sp, #0
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	021a      	lsls	r2, r3, #8
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	431a      	orrs	r2, r3
 80072a0:	68bb      	ldr	r3, [r7, #8]
 80072a2:	4313      	orrs	r3, r2
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	697a      	ldr	r2, [r7, #20]
 80072ae:	609a      	str	r2, [r3, #8]
}
 80072b0:	bf00      	nop
 80072b2:	371c      	adds	r7, #28
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072bc:	b480      	push	{r7}
 80072be:	b087      	sub	sp, #28
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	60f8      	str	r0, [r7, #12]
 80072c4:	60b9      	str	r1, [r7, #8]
 80072c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	f003 031f 	and.w	r3, r3, #31
 80072ce:	2201      	movs	r2, #1
 80072d0:	fa02 f303 	lsl.w	r3, r2, r3
 80072d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6a1a      	ldr	r2, [r3, #32]
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	43db      	mvns	r3, r3
 80072de:	401a      	ands	r2, r3
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6a1a      	ldr	r2, [r3, #32]
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	f003 031f 	and.w	r3, r3, #31
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	fa01 f303 	lsl.w	r3, r1, r3
 80072f4:	431a      	orrs	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	621a      	str	r2, [r3, #32]
}
 80072fa:	bf00      	nop
 80072fc:	371c      	adds	r7, #28
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
	...

08007308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007308:	b480      	push	{r7}
 800730a:	b085      	sub	sp, #20
 800730c:	af00      	add	r7, sp, #0
 800730e:	6078      	str	r0, [r7, #4]
 8007310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007318:	2b01      	cmp	r3, #1
 800731a:	d101      	bne.n	8007320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800731c:	2302      	movs	r3, #2
 800731e:	e068      	b.n	80073f2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2202      	movs	r2, #2
 800732c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	685b      	ldr	r3, [r3, #4]
 8007336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	689b      	ldr	r3, [r3, #8]
 800733e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a2e      	ldr	r2, [pc, #184]	; (8007400 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d004      	beq.n	8007354 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a2d      	ldr	r2, [pc, #180]	; (8007404 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d108      	bne.n	8007366 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800735a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	4313      	orrs	r3, r2
 8007364:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800736c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800736e:	683b      	ldr	r3, [r7, #0]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	68fa      	ldr	r2, [r7, #12]
 8007374:	4313      	orrs	r3, r2
 8007376:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a1e      	ldr	r2, [pc, #120]	; (8007400 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8007386:	4293      	cmp	r3, r2
 8007388:	d01d      	beq.n	80073c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007392:	d018      	beq.n	80073c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a1b      	ldr	r2, [pc, #108]	; (8007408 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d013      	beq.n	80073c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a1a      	ldr	r2, [pc, #104]	; (800740c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d00e      	beq.n	80073c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a18      	ldr	r2, [pc, #96]	; (8007410 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80073ae:	4293      	cmp	r3, r2
 80073b0:	d009      	beq.n	80073c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a13      	ldr	r2, [pc, #76]	; (8007404 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d004      	beq.n	80073c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	4a14      	ldr	r2, [pc, #80]	; (8007414 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d10c      	bne.n	80073e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073ce:	683b      	ldr	r3, [r7, #0]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	4313      	orrs	r3, r2
 80073d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073f0:	2300      	movs	r3, #0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3714      	adds	r7, #20
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
 80073fe:	bf00      	nop
 8007400:	40012c00 	.word	0x40012c00
 8007404:	40013400 	.word	0x40013400
 8007408:	40000400 	.word	0x40000400
 800740c:	40000800 	.word	0x40000800
 8007410:	40000c00 	.word	0x40000c00
 8007414:	40014000 	.word	0x40014000

08007418 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800742c:	b480      	push	{r7}
 800742e:	b083      	sub	sp, #12
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr

08007440 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b082      	sub	sp, #8
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d101      	bne.n	8007466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007462:	2301      	movs	r3, #1
 8007464:	e040      	b.n	80074e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800746a:	2b00      	cmp	r3, #0
 800746c:	d106      	bne.n	800747c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2200      	movs	r2, #0
 8007472:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f7fa fca2 	bl	8001dc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2224      	movs	r2, #36	; 0x24
 8007480:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681a      	ldr	r2, [r3, #0]
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	f022 0201 	bic.w	r2, r2, #1
 8007490:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fc8a 	bl	8007dac <UART_SetConfig>
 8007498:	4603      	mov	r3, r0
 800749a:	2b01      	cmp	r3, #1
 800749c:	d101      	bne.n	80074a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800749e:	2301      	movs	r3, #1
 80074a0:	e022      	b.n	80074e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d002      	beq.n	80074b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 ff08 	bl	80082c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	685a      	ldr	r2, [r3, #4]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	689a      	ldr	r2, [r3, #8]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681a      	ldr	r2, [r3, #0]
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f042 0201 	orr.w	r2, r2, #1
 80074de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f000 ff8f 	bl	8008404 <UART_CheckIdleState>
 80074e6:	4603      	mov	r3, r0
}
 80074e8:	4618      	mov	r0, r3
 80074ea:	3708      	adds	r7, #8
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b08a      	sub	sp, #40	; 0x28
 80074f4:	af02      	add	r7, sp, #8
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	603b      	str	r3, [r7, #0]
 80074fc:	4613      	mov	r3, r2
 80074fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007504:	2b20      	cmp	r3, #32
 8007506:	f040 8082 	bne.w	800760e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d002      	beq.n	8007516 <HAL_UART_Transmit+0x26>
 8007510:	88fb      	ldrh	r3, [r7, #6]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	e07a      	b.n	8007610 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007520:	2b01      	cmp	r3, #1
 8007522:	d101      	bne.n	8007528 <HAL_UART_Transmit+0x38>
 8007524:	2302      	movs	r3, #2
 8007526:	e073      	b.n	8007610 <HAL_UART_Transmit+0x120>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	2201      	movs	r2, #1
 800752c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	2200      	movs	r2, #0
 8007534:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2221      	movs	r2, #33	; 0x21
 800753c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800753e:	f7fa fd27 	bl	8001f90 <HAL_GetTick>
 8007542:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	88fa      	ldrh	r2, [r7, #6]
 8007548:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	88fa      	ldrh	r2, [r7, #6]
 8007550:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800755c:	d108      	bne.n	8007570 <HAL_UART_Transmit+0x80>
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	691b      	ldr	r3, [r3, #16]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d104      	bne.n	8007570 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8007566:	2300      	movs	r3, #0
 8007568:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	61bb      	str	r3, [r7, #24]
 800756e:	e003      	b.n	8007578 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007574:	2300      	movs	r3, #0
 8007576:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8007580:	e02d      	b.n	80075de <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	9300      	str	r3, [sp, #0]
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	2200      	movs	r2, #0
 800758a:	2180      	movs	r1, #128	; 0x80
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f000 ff82 	bl	8008496 <UART_WaitOnFlagUntilTimeout>
 8007592:	4603      	mov	r3, r0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d001      	beq.n	800759c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8007598:	2303      	movs	r3, #3
 800759a:	e039      	b.n	8007610 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800759c:	69fb      	ldr	r3, [r7, #28]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d10b      	bne.n	80075ba <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	881a      	ldrh	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075ae:	b292      	uxth	r2, r2
 80075b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	3302      	adds	r3, #2
 80075b6:	61bb      	str	r3, [r7, #24]
 80075b8:	e008      	b.n	80075cc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075ba:	69fb      	ldr	r3, [r7, #28]
 80075bc:	781a      	ldrb	r2, [r3, #0]
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	b292      	uxth	r2, r2
 80075c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80075c6:	69fb      	ldr	r3, [r7, #28]
 80075c8:	3301      	adds	r3, #1
 80075ca:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075d2:	b29b      	uxth	r3, r3
 80075d4:	3b01      	subs	r3, #1
 80075d6:	b29a      	uxth	r2, r3
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d1cb      	bne.n	8007582 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	9300      	str	r3, [sp, #0]
 80075ee:	697b      	ldr	r3, [r7, #20]
 80075f0:	2200      	movs	r2, #0
 80075f2:	2140      	movs	r1, #64	; 0x40
 80075f4:	68f8      	ldr	r0, [r7, #12]
 80075f6:	f000 ff4e 	bl	8008496 <UART_WaitOnFlagUntilTimeout>
 80075fa:	4603      	mov	r3, r0
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d001      	beq.n	8007604 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e005      	b.n	8007610 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2220      	movs	r2, #32
 8007608:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800760a:	2300      	movs	r3, #0
 800760c:	e000      	b.n	8007610 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800760e:	2302      	movs	r3, #2
  }
}
 8007610:	4618      	mov	r0, r3
 8007612:	3720      	adds	r7, #32
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}

08007618 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b08a      	sub	sp, #40	; 0x28
 800761c:	af02      	add	r7, sp, #8
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	603b      	str	r3, [r7, #0]
 8007624:	4613      	mov	r3, r2
 8007626:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800762c:	2b20      	cmp	r3, #32
 800762e:	f040 80bf 	bne.w	80077b0 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d002      	beq.n	800763e <HAL_UART_Receive+0x26>
 8007638:	88fb      	ldrh	r3, [r7, #6]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d101      	bne.n	8007642 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 800763e:	2301      	movs	r3, #1
 8007640:	e0b7      	b.n	80077b2 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007648:	2b01      	cmp	r3, #1
 800764a:	d101      	bne.n	8007650 <HAL_UART_Receive+0x38>
 800764c:	2302      	movs	r3, #2
 800764e:	e0b0      	b.n	80077b2 <HAL_UART_Receive+0x19a>
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	2201      	movs	r2, #1
 8007654:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	2200      	movs	r2, #0
 800765c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2222      	movs	r2, #34	; 0x22
 8007664:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2200      	movs	r2, #0
 800766a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800766c:	f7fa fc90 	bl	8001f90 <HAL_GetTick>
 8007670:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	88fa      	ldrh	r2, [r7, #6]
 8007676:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	88fa      	ldrh	r2, [r7, #6]
 800767e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	689b      	ldr	r3, [r3, #8]
 8007686:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800768a:	d10e      	bne.n	80076aa <HAL_UART_Receive+0x92>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d105      	bne.n	80076a0 <HAL_UART_Receive+0x88>
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f240 12ff 	movw	r2, #511	; 0x1ff
 800769a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800769e:	e02d      	b.n	80076fc <HAL_UART_Receive+0xe4>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	22ff      	movs	r2, #255	; 0xff
 80076a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076a8:	e028      	b.n	80076fc <HAL_UART_Receive+0xe4>
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10d      	bne.n	80076ce <HAL_UART_Receive+0xb6>
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d104      	bne.n	80076c4 <HAL_UART_Receive+0xac>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	22ff      	movs	r2, #255	; 0xff
 80076be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076c2:	e01b      	b.n	80076fc <HAL_UART_Receive+0xe4>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	227f      	movs	r2, #127	; 0x7f
 80076c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076cc:	e016      	b.n	80076fc <HAL_UART_Receive+0xe4>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	689b      	ldr	r3, [r3, #8]
 80076d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80076d6:	d10d      	bne.n	80076f4 <HAL_UART_Receive+0xdc>
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d104      	bne.n	80076ea <HAL_UART_Receive+0xd2>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	227f      	movs	r2, #127	; 0x7f
 80076e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076e8:	e008      	b.n	80076fc <HAL_UART_Receive+0xe4>
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	223f      	movs	r2, #63	; 0x3f
 80076ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80076f2:	e003      	b.n	80076fc <HAL_UART_Receive+0xe4>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2200      	movs	r2, #0
 80076f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007702:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	689b      	ldr	r3, [r3, #8]
 8007708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800770c:	d108      	bne.n	8007720 <HAL_UART_Receive+0x108>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	691b      	ldr	r3, [r3, #16]
 8007712:	2b00      	cmp	r3, #0
 8007714:	d104      	bne.n	8007720 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8007716:	2300      	movs	r3, #0
 8007718:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	61bb      	str	r3, [r7, #24]
 800771e:	e003      	b.n	8007728 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007724:	2300      	movs	r3, #0
 8007726:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8007730:	e033      	b.n	800779a <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	9300      	str	r3, [sp, #0]
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	2200      	movs	r2, #0
 800773a:	2120      	movs	r1, #32
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 feaa 	bl	8008496 <UART_WaitOnFlagUntilTimeout>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d001      	beq.n	800774c <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8007748:	2303      	movs	r3, #3
 800774a:	e032      	b.n	80077b2 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d10c      	bne.n	800776c <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007758:	b29a      	uxth	r2, r3
 800775a:	8a7b      	ldrh	r3, [r7, #18]
 800775c:	4013      	ands	r3, r2
 800775e:	b29a      	uxth	r2, r3
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	3302      	adds	r3, #2
 8007768:	61bb      	str	r3, [r7, #24]
 800776a:	e00d      	b.n	8007788 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007772:	b29b      	uxth	r3, r3
 8007774:	b2da      	uxtb	r2, r3
 8007776:	8a7b      	ldrh	r3, [r7, #18]
 8007778:	b2db      	uxtb	r3, r3
 800777a:	4013      	ands	r3, r2
 800777c:	b2da      	uxtb	r2, r3
 800777e:	69fb      	ldr	r3, [r7, #28]
 8007780:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8007782:	69fb      	ldr	r3, [r7, #28]
 8007784:	3301      	adds	r3, #1
 8007786:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800778e:	b29b      	uxth	r3, r3
 8007790:	3b01      	subs	r3, #1
 8007792:	b29a      	uxth	r2, r3
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d1c5      	bne.n	8007732 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2220      	movs	r2, #32
 80077aa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80077ac:	2300      	movs	r3, #0
 80077ae:	e000      	b.n	80077b2 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 80077b0:	2302      	movs	r3, #2
  }
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3720      	adds	r7, #32
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b0ba      	sub	sp, #232	; 0xe8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	69db      	ldr	r3, [r3, #28]
 80077ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	689b      	ldr	r3, [r3, #8]
 80077de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80077e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80077e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80077ea:	4013      	ands	r3, r2
 80077ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80077f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d115      	bne.n	8007824 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80077f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077fc:	f003 0320 	and.w	r3, r3, #32
 8007800:	2b00      	cmp	r3, #0
 8007802:	d00f      	beq.n	8007824 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007808:	f003 0320 	and.w	r3, r3, #32
 800780c:	2b00      	cmp	r3, #0
 800780e:	d009      	beq.n	8007824 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 82a6 	beq.w	8007d66 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	4798      	blx	r3
      }
      return;
 8007822:	e2a0      	b.n	8007d66 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8007824:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007828:	2b00      	cmp	r3, #0
 800782a:	f000 8117 	beq.w	8007a5c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800782e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	2b00      	cmp	r3, #0
 8007838:	d106      	bne.n	8007848 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800783a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800783e:	4b85      	ldr	r3, [pc, #532]	; (8007a54 <HAL_UART_IRQHandler+0x298>)
 8007840:	4013      	ands	r3, r2
 8007842:	2b00      	cmp	r3, #0
 8007844:	f000 810a 	beq.w	8007a5c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800784c:	f003 0301 	and.w	r3, r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	d011      	beq.n	8007878 <HAL_UART_IRQHandler+0xbc>
 8007854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007858:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800785c:	2b00      	cmp	r3, #0
 800785e:	d00b      	beq.n	8007878 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2201      	movs	r2, #1
 8007866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800786e:	f043 0201 	orr.w	r2, r3, #1
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800787c:	f003 0302 	and.w	r3, r3, #2
 8007880:	2b00      	cmp	r3, #0
 8007882:	d011      	beq.n	80078a8 <HAL_UART_IRQHandler+0xec>
 8007884:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00b      	beq.n	80078a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2202      	movs	r2, #2
 8007896:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800789e:	f043 0204 	orr.w	r2, r3, #4
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078ac:	f003 0304 	and.w	r3, r3, #4
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d011      	beq.n	80078d8 <HAL_UART_IRQHandler+0x11c>
 80078b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078b8:	f003 0301 	and.w	r3, r3, #1
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00b      	beq.n	80078d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	2204      	movs	r2, #4
 80078c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80078ce:	f043 0202 	orr.w	r2, r3, #2
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078dc:	f003 0308 	and.w	r3, r3, #8
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d017      	beq.n	8007914 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80078e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078e8:	f003 0320 	and.w	r3, r3, #32
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d105      	bne.n	80078fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80078f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d00b      	beq.n	8007914 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2208      	movs	r2, #8
 8007902:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800790a:	f043 0208 	orr.w	r2, r3, #8
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007918:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800791c:	2b00      	cmp	r3, #0
 800791e:	d012      	beq.n	8007946 <HAL_UART_IRQHandler+0x18a>
 8007920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007924:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00c      	beq.n	8007946 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007934:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800793c:	f043 0220 	orr.w	r2, r3, #32
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800794c:	2b00      	cmp	r3, #0
 800794e:	f000 820c 	beq.w	8007d6a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007956:	f003 0320 	and.w	r3, r3, #32
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00d      	beq.n	800797a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800795e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007962:	f003 0320 	and.w	r3, r3, #32
 8007966:	2b00      	cmp	r3, #0
 8007968:	d007      	beq.n	800797a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800796e:	2b00      	cmp	r3, #0
 8007970:	d003      	beq.n	800797a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007976:	6878      	ldr	r0, [r7, #4]
 8007978:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007980:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	689b      	ldr	r3, [r3, #8]
 800798a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800798e:	2b40      	cmp	r3, #64	; 0x40
 8007990:	d005      	beq.n	800799e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007992:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007996:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800799a:	2b00      	cmp	r3, #0
 800799c:	d04f      	beq.n	8007a3e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800799e:	6878      	ldr	r0, [r7, #4]
 80079a0:	f000 fe3d 	bl	800861e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ae:	2b40      	cmp	r3, #64	; 0x40
 80079b0:	d141      	bne.n	8007a36 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3308      	adds	r3, #8
 80079b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3308      	adds	r3, #8
 80079da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80079de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80079e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80079ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80079f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1d9      	bne.n	80079b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d013      	beq.n	8007a2e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a0a:	4a13      	ldr	r2, [pc, #76]	; (8007a58 <HAL_UART_IRQHandler+0x29c>)
 8007a0c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a12:	4618      	mov	r0, r3
 8007a14:	f7fb ff20 	bl	8003858 <HAL_DMA_Abort_IT>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d017      	beq.n	8007a4e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007a28:	4610      	mov	r0, r2
 8007a2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a2c:	e00f      	b.n	8007a4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f9a6 	bl	8007d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a34:	e00b      	b.n	8007a4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f9a2 	bl	8007d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a3c:	e007      	b.n	8007a4e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f99e 	bl	8007d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007a4c:	e18d      	b.n	8007d6a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a4e:	bf00      	nop
    return;
 8007a50:	e18b      	b.n	8007d6a <HAL_UART_IRQHandler+0x5ae>
 8007a52:	bf00      	nop
 8007a54:	04000120 	.word	0x04000120
 8007a58:	080086e5 	.word	0x080086e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	f040 8146 	bne.w	8007cf2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a6a:	f003 0310 	and.w	r3, r3, #16
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	f000 813f 	beq.w	8007cf2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a78:	f003 0310 	and.w	r3, r3, #16
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	f000 8138 	beq.w	8007cf2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2210      	movs	r2, #16
 8007a88:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a94:	2b40      	cmp	r3, #64	; 0x40
 8007a96:	f040 80b4 	bne.w	8007c02 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007aa6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	f000 815f 	beq.w	8007d6e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ab6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007aba:	429a      	cmp	r2, r3
 8007abc:	f080 8157 	bcs.w	8007d6e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ac6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 0320 	and.w	r3, r3, #32
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	f040 8085 	bne.w	8007be6 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007af0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007af4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007af8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	461a      	mov	r2, r3
 8007b02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b0a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b0e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b12:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b16:	e841 2300 	strex	r3, r2, [r1]
 8007b1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1da      	bne.n	8007adc <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3308      	adds	r3, #8
 8007b2c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b30:	e853 3f00 	ldrex	r3, [r3]
 8007b34:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b36:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b38:	f023 0301 	bic.w	r3, r3, #1
 8007b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	3308      	adds	r3, #8
 8007b46:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b4a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b4e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b50:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b52:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b56:	e841 2300 	strex	r3, r2, [r1]
 8007b5a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d1e1      	bne.n	8007b26 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	3308      	adds	r3, #8
 8007b68:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b6c:	e853 3f00 	ldrex	r3, [r3]
 8007b70:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b74:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	3308      	adds	r3, #8
 8007b82:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b86:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b88:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b8e:	e841 2300 	strex	r3, r2, [r1]
 8007b92:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1e3      	bne.n	8007b62 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2220      	movs	r2, #32
 8007b9e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bae:	e853 3f00 	ldrex	r3, [r3]
 8007bb2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bb6:	f023 0310 	bic.w	r3, r3, #16
 8007bba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	461a      	mov	r2, r3
 8007bc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bc8:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bca:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bcc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bd0:	e841 2300 	strex	r3, r2, [r1]
 8007bd4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007bd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1e4      	bne.n	8007ba6 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007be0:	4618      	mov	r0, r3
 8007be2:	f7fb fdfb 	bl	80037dc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	b29b      	uxth	r3, r3
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	f000 f8ca 	bl	8007d94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c00:	e0b5      	b.n	8007d6e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	f000 80a7 	beq.w	8007d72 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8007c24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 80a2 	beq.w	8007d72 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c36:	e853 3f00 	ldrex	r3, [r3]
 8007c3a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c42:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c50:	647b      	str	r3, [r7, #68]	; 0x44
 8007c52:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c58:	e841 2300 	strex	r3, r2, [r1]
 8007c5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1e4      	bne.n	8007c2e <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	3308      	adds	r3, #8
 8007c6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c6e:	e853 3f00 	ldrex	r3, [r3]
 8007c72:	623b      	str	r3, [r7, #32]
   return(result);
 8007c74:	6a3b      	ldr	r3, [r7, #32]
 8007c76:	f023 0301 	bic.w	r3, r3, #1
 8007c7a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	3308      	adds	r3, #8
 8007c84:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c88:	633a      	str	r2, [r7, #48]	; 0x30
 8007c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c90:	e841 2300 	strex	r3, r2, [r1]
 8007c94:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d1e3      	bne.n	8007c64 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2220      	movs	r2, #32
 8007ca0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2200      	movs	r2, #0
 8007cac:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	e853 3f00 	ldrex	r3, [r3]
 8007cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f023 0310 	bic.w	r3, r3, #16
 8007cc2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007cd0:	61fb      	str	r3, [r7, #28]
 8007cd2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd4:	69b9      	ldr	r1, [r7, #24]
 8007cd6:	69fa      	ldr	r2, [r7, #28]
 8007cd8:	e841 2300 	strex	r3, r2, [r1]
 8007cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d1e4      	bne.n	8007cae <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ce4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 f852 	bl	8007d94 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cf0:	e03f      	b.n	8007d72 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00e      	beq.n	8007d1c <HAL_UART_IRQHandler+0x560>
 8007cfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d008      	beq.n	8007d1c <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007d12:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f000 fd25 	bl	8008764 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d1a:	e02d      	b.n	8007d78 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007d1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d00e      	beq.n	8007d46 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007d28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d008      	beq.n	8007d46 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d01c      	beq.n	8007d76 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	4798      	blx	r3
    }
    return;
 8007d44:	e017      	b.n	8007d76 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d012      	beq.n	8007d78 <HAL_UART_IRQHandler+0x5bc>
 8007d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00c      	beq.n	8007d78 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fcd6 	bl	8008710 <UART_EndTransmit_IT>
    return;
 8007d64:	e008      	b.n	8007d78 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007d66:	bf00      	nop
 8007d68:	e006      	b.n	8007d78 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007d6a:	bf00      	nop
 8007d6c:	e004      	b.n	8007d78 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007d6e:	bf00      	nop
 8007d70:	e002      	b.n	8007d78 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007d72:	bf00      	nop
 8007d74:	e000      	b.n	8007d78 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007d76:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007d78:	37e8      	adds	r7, #232	; 0xe8
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}
 8007d7e:	bf00      	nop

08007d80 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
 8007d9c:	460b      	mov	r3, r1
 8007d9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007da0:	bf00      	nop
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr

08007dac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007dac:	b5b0      	push	{r4, r5, r7, lr}
 8007dae:	b088      	sub	sp, #32
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007db4:	2300      	movs	r3, #0
 8007db6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	689a      	ldr	r2, [r3, #8]
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	691b      	ldr	r3, [r3, #16]
 8007dc0:	431a      	orrs	r2, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	431a      	orrs	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	69db      	ldr	r3, [r3, #28]
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	4bad      	ldr	r3, [pc, #692]	; (800808c <UART_SetConfig+0x2e0>)
 8007dd8:	4013      	ands	r3, r2
 8007dda:	687a      	ldr	r2, [r7, #4]
 8007ddc:	6812      	ldr	r2, [r2, #0]
 8007dde:	69f9      	ldr	r1, [r7, #28]
 8007de0:	430b      	orrs	r3, r1
 8007de2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	430a      	orrs	r2, r1
 8007df8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4aa2      	ldr	r2, [pc, #648]	; (8008090 <UART_SetConfig+0x2e4>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d004      	beq.n	8007e14 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6a1b      	ldr	r3, [r3, #32]
 8007e0e:	69fa      	ldr	r2, [r7, #28]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	689b      	ldr	r3, [r3, #8]
 8007e1a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	69fa      	ldr	r2, [r7, #28]
 8007e24:	430a      	orrs	r2, r1
 8007e26:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a99      	ldr	r2, [pc, #612]	; (8008094 <UART_SetConfig+0x2e8>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d121      	bne.n	8007e76 <UART_SetConfig+0xca>
 8007e32:	4b99      	ldr	r3, [pc, #612]	; (8008098 <UART_SetConfig+0x2ec>)
 8007e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e38:	f003 0303 	and.w	r3, r3, #3
 8007e3c:	2b03      	cmp	r3, #3
 8007e3e:	d817      	bhi.n	8007e70 <UART_SetConfig+0xc4>
 8007e40:	a201      	add	r2, pc, #4	; (adr r2, 8007e48 <UART_SetConfig+0x9c>)
 8007e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e46:	bf00      	nop
 8007e48:	08007e59 	.word	0x08007e59
 8007e4c:	08007e65 	.word	0x08007e65
 8007e50:	08007e5f 	.word	0x08007e5f
 8007e54:	08007e6b 	.word	0x08007e6b
 8007e58:	2301      	movs	r3, #1
 8007e5a:	76fb      	strb	r3, [r7, #27]
 8007e5c:	e0e7      	b.n	800802e <UART_SetConfig+0x282>
 8007e5e:	2302      	movs	r3, #2
 8007e60:	76fb      	strb	r3, [r7, #27]
 8007e62:	e0e4      	b.n	800802e <UART_SetConfig+0x282>
 8007e64:	2304      	movs	r3, #4
 8007e66:	76fb      	strb	r3, [r7, #27]
 8007e68:	e0e1      	b.n	800802e <UART_SetConfig+0x282>
 8007e6a:	2308      	movs	r3, #8
 8007e6c:	76fb      	strb	r3, [r7, #27]
 8007e6e:	e0de      	b.n	800802e <UART_SetConfig+0x282>
 8007e70:	2310      	movs	r3, #16
 8007e72:	76fb      	strb	r3, [r7, #27]
 8007e74:	e0db      	b.n	800802e <UART_SetConfig+0x282>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	4a88      	ldr	r2, [pc, #544]	; (800809c <UART_SetConfig+0x2f0>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d132      	bne.n	8007ee6 <UART_SetConfig+0x13a>
 8007e80:	4b85      	ldr	r3, [pc, #532]	; (8008098 <UART_SetConfig+0x2ec>)
 8007e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e86:	f003 030c 	and.w	r3, r3, #12
 8007e8a:	2b0c      	cmp	r3, #12
 8007e8c:	d828      	bhi.n	8007ee0 <UART_SetConfig+0x134>
 8007e8e:	a201      	add	r2, pc, #4	; (adr r2, 8007e94 <UART_SetConfig+0xe8>)
 8007e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e94:	08007ec9 	.word	0x08007ec9
 8007e98:	08007ee1 	.word	0x08007ee1
 8007e9c:	08007ee1 	.word	0x08007ee1
 8007ea0:	08007ee1 	.word	0x08007ee1
 8007ea4:	08007ed5 	.word	0x08007ed5
 8007ea8:	08007ee1 	.word	0x08007ee1
 8007eac:	08007ee1 	.word	0x08007ee1
 8007eb0:	08007ee1 	.word	0x08007ee1
 8007eb4:	08007ecf 	.word	0x08007ecf
 8007eb8:	08007ee1 	.word	0x08007ee1
 8007ebc:	08007ee1 	.word	0x08007ee1
 8007ec0:	08007ee1 	.word	0x08007ee1
 8007ec4:	08007edb 	.word	0x08007edb
 8007ec8:	2300      	movs	r3, #0
 8007eca:	76fb      	strb	r3, [r7, #27]
 8007ecc:	e0af      	b.n	800802e <UART_SetConfig+0x282>
 8007ece:	2302      	movs	r3, #2
 8007ed0:	76fb      	strb	r3, [r7, #27]
 8007ed2:	e0ac      	b.n	800802e <UART_SetConfig+0x282>
 8007ed4:	2304      	movs	r3, #4
 8007ed6:	76fb      	strb	r3, [r7, #27]
 8007ed8:	e0a9      	b.n	800802e <UART_SetConfig+0x282>
 8007eda:	2308      	movs	r3, #8
 8007edc:	76fb      	strb	r3, [r7, #27]
 8007ede:	e0a6      	b.n	800802e <UART_SetConfig+0x282>
 8007ee0:	2310      	movs	r3, #16
 8007ee2:	76fb      	strb	r3, [r7, #27]
 8007ee4:	e0a3      	b.n	800802e <UART_SetConfig+0x282>
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4a6d      	ldr	r2, [pc, #436]	; (80080a0 <UART_SetConfig+0x2f4>)
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d120      	bne.n	8007f32 <UART_SetConfig+0x186>
 8007ef0:	4b69      	ldr	r3, [pc, #420]	; (8008098 <UART_SetConfig+0x2ec>)
 8007ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ef6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007efa:	2b30      	cmp	r3, #48	; 0x30
 8007efc:	d013      	beq.n	8007f26 <UART_SetConfig+0x17a>
 8007efe:	2b30      	cmp	r3, #48	; 0x30
 8007f00:	d814      	bhi.n	8007f2c <UART_SetConfig+0x180>
 8007f02:	2b20      	cmp	r3, #32
 8007f04:	d009      	beq.n	8007f1a <UART_SetConfig+0x16e>
 8007f06:	2b20      	cmp	r3, #32
 8007f08:	d810      	bhi.n	8007f2c <UART_SetConfig+0x180>
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d002      	beq.n	8007f14 <UART_SetConfig+0x168>
 8007f0e:	2b10      	cmp	r3, #16
 8007f10:	d006      	beq.n	8007f20 <UART_SetConfig+0x174>
 8007f12:	e00b      	b.n	8007f2c <UART_SetConfig+0x180>
 8007f14:	2300      	movs	r3, #0
 8007f16:	76fb      	strb	r3, [r7, #27]
 8007f18:	e089      	b.n	800802e <UART_SetConfig+0x282>
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	76fb      	strb	r3, [r7, #27]
 8007f1e:	e086      	b.n	800802e <UART_SetConfig+0x282>
 8007f20:	2304      	movs	r3, #4
 8007f22:	76fb      	strb	r3, [r7, #27]
 8007f24:	e083      	b.n	800802e <UART_SetConfig+0x282>
 8007f26:	2308      	movs	r3, #8
 8007f28:	76fb      	strb	r3, [r7, #27]
 8007f2a:	e080      	b.n	800802e <UART_SetConfig+0x282>
 8007f2c:	2310      	movs	r3, #16
 8007f2e:	76fb      	strb	r3, [r7, #27]
 8007f30:	e07d      	b.n	800802e <UART_SetConfig+0x282>
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a5b      	ldr	r2, [pc, #364]	; (80080a4 <UART_SetConfig+0x2f8>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d120      	bne.n	8007f7e <UART_SetConfig+0x1d2>
 8007f3c:	4b56      	ldr	r3, [pc, #344]	; (8008098 <UART_SetConfig+0x2ec>)
 8007f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007f46:	2bc0      	cmp	r3, #192	; 0xc0
 8007f48:	d013      	beq.n	8007f72 <UART_SetConfig+0x1c6>
 8007f4a:	2bc0      	cmp	r3, #192	; 0xc0
 8007f4c:	d814      	bhi.n	8007f78 <UART_SetConfig+0x1cc>
 8007f4e:	2b80      	cmp	r3, #128	; 0x80
 8007f50:	d009      	beq.n	8007f66 <UART_SetConfig+0x1ba>
 8007f52:	2b80      	cmp	r3, #128	; 0x80
 8007f54:	d810      	bhi.n	8007f78 <UART_SetConfig+0x1cc>
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d002      	beq.n	8007f60 <UART_SetConfig+0x1b4>
 8007f5a:	2b40      	cmp	r3, #64	; 0x40
 8007f5c:	d006      	beq.n	8007f6c <UART_SetConfig+0x1c0>
 8007f5e:	e00b      	b.n	8007f78 <UART_SetConfig+0x1cc>
 8007f60:	2300      	movs	r3, #0
 8007f62:	76fb      	strb	r3, [r7, #27]
 8007f64:	e063      	b.n	800802e <UART_SetConfig+0x282>
 8007f66:	2302      	movs	r3, #2
 8007f68:	76fb      	strb	r3, [r7, #27]
 8007f6a:	e060      	b.n	800802e <UART_SetConfig+0x282>
 8007f6c:	2304      	movs	r3, #4
 8007f6e:	76fb      	strb	r3, [r7, #27]
 8007f70:	e05d      	b.n	800802e <UART_SetConfig+0x282>
 8007f72:	2308      	movs	r3, #8
 8007f74:	76fb      	strb	r3, [r7, #27]
 8007f76:	e05a      	b.n	800802e <UART_SetConfig+0x282>
 8007f78:	2310      	movs	r3, #16
 8007f7a:	76fb      	strb	r3, [r7, #27]
 8007f7c:	e057      	b.n	800802e <UART_SetConfig+0x282>
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	4a49      	ldr	r2, [pc, #292]	; (80080a8 <UART_SetConfig+0x2fc>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d125      	bne.n	8007fd4 <UART_SetConfig+0x228>
 8007f88:	4b43      	ldr	r3, [pc, #268]	; (8008098 <UART_SetConfig+0x2ec>)
 8007f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f96:	d017      	beq.n	8007fc8 <UART_SetConfig+0x21c>
 8007f98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f9c:	d817      	bhi.n	8007fce <UART_SetConfig+0x222>
 8007f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fa2:	d00b      	beq.n	8007fbc <UART_SetConfig+0x210>
 8007fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fa8:	d811      	bhi.n	8007fce <UART_SetConfig+0x222>
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d003      	beq.n	8007fb6 <UART_SetConfig+0x20a>
 8007fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fb2:	d006      	beq.n	8007fc2 <UART_SetConfig+0x216>
 8007fb4:	e00b      	b.n	8007fce <UART_SetConfig+0x222>
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	76fb      	strb	r3, [r7, #27]
 8007fba:	e038      	b.n	800802e <UART_SetConfig+0x282>
 8007fbc:	2302      	movs	r3, #2
 8007fbe:	76fb      	strb	r3, [r7, #27]
 8007fc0:	e035      	b.n	800802e <UART_SetConfig+0x282>
 8007fc2:	2304      	movs	r3, #4
 8007fc4:	76fb      	strb	r3, [r7, #27]
 8007fc6:	e032      	b.n	800802e <UART_SetConfig+0x282>
 8007fc8:	2308      	movs	r3, #8
 8007fca:	76fb      	strb	r3, [r7, #27]
 8007fcc:	e02f      	b.n	800802e <UART_SetConfig+0x282>
 8007fce:	2310      	movs	r3, #16
 8007fd0:	76fb      	strb	r3, [r7, #27]
 8007fd2:	e02c      	b.n	800802e <UART_SetConfig+0x282>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a2d      	ldr	r2, [pc, #180]	; (8008090 <UART_SetConfig+0x2e4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d125      	bne.n	800802a <UART_SetConfig+0x27e>
 8007fde:	4b2e      	ldr	r3, [pc, #184]	; (8008098 <UART_SetConfig+0x2ec>)
 8007fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fe4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007fe8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007fec:	d017      	beq.n	800801e <UART_SetConfig+0x272>
 8007fee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ff2:	d817      	bhi.n	8008024 <UART_SetConfig+0x278>
 8007ff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ff8:	d00b      	beq.n	8008012 <UART_SetConfig+0x266>
 8007ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ffe:	d811      	bhi.n	8008024 <UART_SetConfig+0x278>
 8008000:	2b00      	cmp	r3, #0
 8008002:	d003      	beq.n	800800c <UART_SetConfig+0x260>
 8008004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008008:	d006      	beq.n	8008018 <UART_SetConfig+0x26c>
 800800a:	e00b      	b.n	8008024 <UART_SetConfig+0x278>
 800800c:	2300      	movs	r3, #0
 800800e:	76fb      	strb	r3, [r7, #27]
 8008010:	e00d      	b.n	800802e <UART_SetConfig+0x282>
 8008012:	2302      	movs	r3, #2
 8008014:	76fb      	strb	r3, [r7, #27]
 8008016:	e00a      	b.n	800802e <UART_SetConfig+0x282>
 8008018:	2304      	movs	r3, #4
 800801a:	76fb      	strb	r3, [r7, #27]
 800801c:	e007      	b.n	800802e <UART_SetConfig+0x282>
 800801e:	2308      	movs	r3, #8
 8008020:	76fb      	strb	r3, [r7, #27]
 8008022:	e004      	b.n	800802e <UART_SetConfig+0x282>
 8008024:	2310      	movs	r3, #16
 8008026:	76fb      	strb	r3, [r7, #27]
 8008028:	e001      	b.n	800802e <UART_SetConfig+0x282>
 800802a:	2310      	movs	r3, #16
 800802c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	4a17      	ldr	r2, [pc, #92]	; (8008090 <UART_SetConfig+0x2e4>)
 8008034:	4293      	cmp	r3, r2
 8008036:	f040 8087 	bne.w	8008148 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800803a:	7efb      	ldrb	r3, [r7, #27]
 800803c:	2b08      	cmp	r3, #8
 800803e:	d837      	bhi.n	80080b0 <UART_SetConfig+0x304>
 8008040:	a201      	add	r2, pc, #4	; (adr r2, 8008048 <UART_SetConfig+0x29c>)
 8008042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008046:	bf00      	nop
 8008048:	0800806d 	.word	0x0800806d
 800804c:	080080b1 	.word	0x080080b1
 8008050:	08008075 	.word	0x08008075
 8008054:	080080b1 	.word	0x080080b1
 8008058:	0800807b 	.word	0x0800807b
 800805c:	080080b1 	.word	0x080080b1
 8008060:	080080b1 	.word	0x080080b1
 8008064:	080080b1 	.word	0x080080b1
 8008068:	08008083 	.word	0x08008083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800806c:	f7fc fbbc 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8008070:	6178      	str	r0, [r7, #20]
        break;
 8008072:	e022      	b.n	80080ba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008074:	4b0d      	ldr	r3, [pc, #52]	; (80080ac <UART_SetConfig+0x300>)
 8008076:	617b      	str	r3, [r7, #20]
        break;
 8008078:	e01f      	b.n	80080ba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800807a:	f7fc fb1d 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 800807e:	6178      	str	r0, [r7, #20]
        break;
 8008080:	e01b      	b.n	80080ba <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008086:	617b      	str	r3, [r7, #20]
        break;
 8008088:	e017      	b.n	80080ba <UART_SetConfig+0x30e>
 800808a:	bf00      	nop
 800808c:	efff69f3 	.word	0xefff69f3
 8008090:	40008000 	.word	0x40008000
 8008094:	40013800 	.word	0x40013800
 8008098:	40021000 	.word	0x40021000
 800809c:	40004400 	.word	0x40004400
 80080a0:	40004800 	.word	0x40004800
 80080a4:	40004c00 	.word	0x40004c00
 80080a8:	40005000 	.word	0x40005000
 80080ac:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80080b0:	2300      	movs	r3, #0
 80080b2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80080b4:	2301      	movs	r3, #1
 80080b6:	76bb      	strb	r3, [r7, #26]
        break;
 80080b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 80f1 	beq.w	80082a4 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	685a      	ldr	r2, [r3, #4]
 80080c6:	4613      	mov	r3, r2
 80080c8:	005b      	lsls	r3, r3, #1
 80080ca:	4413      	add	r3, r2
 80080cc:	697a      	ldr	r2, [r7, #20]
 80080ce:	429a      	cmp	r2, r3
 80080d0:	d305      	bcc.n	80080de <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	685b      	ldr	r3, [r3, #4]
 80080d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d902      	bls.n	80080e4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	76bb      	strb	r3, [r7, #26]
 80080e2:	e0df      	b.n	80082a4 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	4618      	mov	r0, r3
 80080e8:	f04f 0100 	mov.w	r1, #0
 80080ec:	f04f 0200 	mov.w	r2, #0
 80080f0:	f04f 0300 	mov.w	r3, #0
 80080f4:	020b      	lsls	r3, r1, #8
 80080f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80080fa:	0202      	lsls	r2, r0, #8
 80080fc:	6879      	ldr	r1, [r7, #4]
 80080fe:	6849      	ldr	r1, [r1, #4]
 8008100:	0849      	lsrs	r1, r1, #1
 8008102:	4608      	mov	r0, r1
 8008104:	f04f 0100 	mov.w	r1, #0
 8008108:	1814      	adds	r4, r2, r0
 800810a:	eb43 0501 	adc.w	r5, r3, r1
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	461a      	mov	r2, r3
 8008114:	f04f 0300 	mov.w	r3, #0
 8008118:	4620      	mov	r0, r4
 800811a:	4629      	mov	r1, r5
 800811c:	f7f8 fc9e 	bl	8000a5c <__aeabi_uldivmod>
 8008120:	4602      	mov	r2, r0
 8008122:	460b      	mov	r3, r1
 8008124:	4613      	mov	r3, r2
 8008126:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800812e:	d308      	bcc.n	8008142 <UART_SetConfig+0x396>
 8008130:	693b      	ldr	r3, [r7, #16]
 8008132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008136:	d204      	bcs.n	8008142 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	693a      	ldr	r2, [r7, #16]
 800813e:	60da      	str	r2, [r3, #12]
 8008140:	e0b0      	b.n	80082a4 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8008142:	2301      	movs	r3, #1
 8008144:	76bb      	strb	r3, [r7, #26]
 8008146:	e0ad      	b.n	80082a4 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	69db      	ldr	r3, [r3, #28]
 800814c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008150:	d15b      	bne.n	800820a <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8008152:	7efb      	ldrb	r3, [r7, #27]
 8008154:	2b08      	cmp	r3, #8
 8008156:	d828      	bhi.n	80081aa <UART_SetConfig+0x3fe>
 8008158:	a201      	add	r2, pc, #4	; (adr r2, 8008160 <UART_SetConfig+0x3b4>)
 800815a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815e:	bf00      	nop
 8008160:	08008185 	.word	0x08008185
 8008164:	0800818d 	.word	0x0800818d
 8008168:	08008195 	.word	0x08008195
 800816c:	080081ab 	.word	0x080081ab
 8008170:	0800819b 	.word	0x0800819b
 8008174:	080081ab 	.word	0x080081ab
 8008178:	080081ab 	.word	0x080081ab
 800817c:	080081ab 	.word	0x080081ab
 8008180:	080081a3 	.word	0x080081a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008184:	f7fc fb30 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8008188:	6178      	str	r0, [r7, #20]
        break;
 800818a:	e013      	b.n	80081b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800818c:	f7fc fb42 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 8008190:	6178      	str	r0, [r7, #20]
        break;
 8008192:	e00f      	b.n	80081b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008194:	4b49      	ldr	r3, [pc, #292]	; (80082bc <UART_SetConfig+0x510>)
 8008196:	617b      	str	r3, [r7, #20]
        break;
 8008198:	e00c      	b.n	80081b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800819a:	f7fc fa8d 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 800819e:	6178      	str	r0, [r7, #20]
        break;
 80081a0:	e008      	b.n	80081b4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80081a6:	617b      	str	r3, [r7, #20]
        break;
 80081a8:	e004      	b.n	80081b4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80081aa:	2300      	movs	r3, #0
 80081ac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80081ae:	2301      	movs	r3, #1
 80081b0:	76bb      	strb	r3, [r7, #26]
        break;
 80081b2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d074      	beq.n	80082a4 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	005a      	lsls	r2, r3, #1
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	085b      	lsrs	r3, r3, #1
 80081c4:	441a      	add	r2, r3
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80081ce:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	2b0f      	cmp	r3, #15
 80081d4:	d916      	bls.n	8008204 <UART_SetConfig+0x458>
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081dc:	d212      	bcs.n	8008204 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	b29b      	uxth	r3, r3
 80081e2:	f023 030f 	bic.w	r3, r3, #15
 80081e6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	085b      	lsrs	r3, r3, #1
 80081ec:	b29b      	uxth	r3, r3
 80081ee:	f003 0307 	and.w	r3, r3, #7
 80081f2:	b29a      	uxth	r2, r3
 80081f4:	89fb      	ldrh	r3, [r7, #14]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	89fa      	ldrh	r2, [r7, #14]
 8008200:	60da      	str	r2, [r3, #12]
 8008202:	e04f      	b.n	80082a4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8008204:	2301      	movs	r3, #1
 8008206:	76bb      	strb	r3, [r7, #26]
 8008208:	e04c      	b.n	80082a4 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800820a:	7efb      	ldrb	r3, [r7, #27]
 800820c:	2b08      	cmp	r3, #8
 800820e:	d828      	bhi.n	8008262 <UART_SetConfig+0x4b6>
 8008210:	a201      	add	r2, pc, #4	; (adr r2, 8008218 <UART_SetConfig+0x46c>)
 8008212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008216:	bf00      	nop
 8008218:	0800823d 	.word	0x0800823d
 800821c:	08008245 	.word	0x08008245
 8008220:	0800824d 	.word	0x0800824d
 8008224:	08008263 	.word	0x08008263
 8008228:	08008253 	.word	0x08008253
 800822c:	08008263 	.word	0x08008263
 8008230:	08008263 	.word	0x08008263
 8008234:	08008263 	.word	0x08008263
 8008238:	0800825b 	.word	0x0800825b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800823c:	f7fc fad4 	bl	80047e8 <HAL_RCC_GetPCLK1Freq>
 8008240:	6178      	str	r0, [r7, #20]
        break;
 8008242:	e013      	b.n	800826c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008244:	f7fc fae6 	bl	8004814 <HAL_RCC_GetPCLK2Freq>
 8008248:	6178      	str	r0, [r7, #20]
        break;
 800824a:	e00f      	b.n	800826c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800824c:	4b1b      	ldr	r3, [pc, #108]	; (80082bc <UART_SetConfig+0x510>)
 800824e:	617b      	str	r3, [r7, #20]
        break;
 8008250:	e00c      	b.n	800826c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008252:	f7fc fa31 	bl	80046b8 <HAL_RCC_GetSysClockFreq>
 8008256:	6178      	str	r0, [r7, #20]
        break;
 8008258:	e008      	b.n	800826c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800825a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800825e:	617b      	str	r3, [r7, #20]
        break;
 8008260:	e004      	b.n	800826c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8008262:	2300      	movs	r3, #0
 8008264:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8008266:	2301      	movs	r3, #1
 8008268:	76bb      	strb	r3, [r7, #26]
        break;
 800826a:	bf00      	nop
    }

    if (pclk != 0U)
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d018      	beq.n	80082a4 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	085a      	lsrs	r2, r3, #1
 8008278:	697b      	ldr	r3, [r7, #20]
 800827a:	441a      	add	r2, r3
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	685b      	ldr	r3, [r3, #4]
 8008280:	fbb2 f3f3 	udiv	r3, r2, r3
 8008284:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	2b0f      	cmp	r3, #15
 800828a:	d909      	bls.n	80082a0 <UART_SetConfig+0x4f4>
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008292:	d205      	bcs.n	80082a0 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	b29a      	uxth	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	60da      	str	r2, [r3, #12]
 800829e:	e001      	b.n	80082a4 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80082a0:	2301      	movs	r3, #1
 80082a2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80082b0:	7ebb      	ldrb	r3, [r7, #26]
}
 80082b2:	4618      	mov	r0, r3
 80082b4:	3720      	adds	r7, #32
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bdb0      	pop	{r4, r5, r7, pc}
 80082ba:	bf00      	nop
 80082bc:	00f42400 	.word	0x00f42400

080082c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082cc:	f003 0301 	and.w	r3, r3, #1
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d00a      	beq.n	80082ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	685b      	ldr	r3, [r3, #4]
 80082da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	430a      	orrs	r2, r1
 80082e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ee:	f003 0302 	and.w	r3, r3, #2
 80082f2:	2b00      	cmp	r3, #0
 80082f4:	d00a      	beq.n	800830c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	430a      	orrs	r2, r1
 800830a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008310:	f003 0304 	and.w	r3, r3, #4
 8008314:	2b00      	cmp	r3, #0
 8008316:	d00a      	beq.n	800832e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	685b      	ldr	r3, [r3, #4]
 800831e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	430a      	orrs	r2, r1
 800832c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008332:	f003 0308 	and.w	r3, r3, #8
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00a      	beq.n	8008350 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	685b      	ldr	r3, [r3, #4]
 8008340:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	430a      	orrs	r2, r1
 800834e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008354:	f003 0310 	and.w	r3, r3, #16
 8008358:	2b00      	cmp	r3, #0
 800835a:	d00a      	beq.n	8008372 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	689b      	ldr	r3, [r3, #8]
 8008362:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	430a      	orrs	r2, r1
 8008370:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008376:	f003 0320 	and.w	r3, r3, #32
 800837a:	2b00      	cmp	r3, #0
 800837c:	d00a      	beq.n	8008394 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	689b      	ldr	r3, [r3, #8]
 8008384:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	430a      	orrs	r2, r1
 8008392:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800839c:	2b00      	cmp	r3, #0
 800839e:	d01a      	beq.n	80083d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	685b      	ldr	r3, [r3, #4]
 80083a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	430a      	orrs	r2, r1
 80083b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083be:	d10a      	bne.n	80083d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	430a      	orrs	r2, r1
 80083d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d00a      	beq.n	80083f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	430a      	orrs	r2, r1
 80083f6:	605a      	str	r2, [r3, #4]
  }
}
 80083f8:	bf00      	nop
 80083fa:	370c      	adds	r7, #12
 80083fc:	46bd      	mov	sp, r7
 80083fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008402:	4770      	bx	lr

08008404 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b086      	sub	sp, #24
 8008408:	af02      	add	r7, sp, #8
 800840a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2200      	movs	r2, #0
 8008410:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008414:	f7f9 fdbc 	bl	8001f90 <HAL_GetTick>
 8008418:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f003 0308 	and.w	r3, r3, #8
 8008424:	2b08      	cmp	r3, #8
 8008426:	d10e      	bne.n	8008446 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008428:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800842c:	9300      	str	r3, [sp, #0]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	2200      	movs	r2, #0
 8008432:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f82d 	bl	8008496 <UART_WaitOnFlagUntilTimeout>
 800843c:	4603      	mov	r3, r0
 800843e:	2b00      	cmp	r3, #0
 8008440:	d001      	beq.n	8008446 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008442:	2303      	movs	r3, #3
 8008444:	e023      	b.n	800848e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f003 0304 	and.w	r3, r3, #4
 8008450:	2b04      	cmp	r3, #4
 8008452:	d10e      	bne.n	8008472 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008454:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2200      	movs	r2, #0
 800845e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f000 f817 	bl	8008496 <UART_WaitOnFlagUntilTimeout>
 8008468:	4603      	mov	r3, r0
 800846a:	2b00      	cmp	r3, #0
 800846c:	d001      	beq.n	8008472 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e00d      	b.n	800848e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2220      	movs	r2, #32
 8008476:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2220      	movs	r2, #32
 800847c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2200      	movs	r2, #0
 8008482:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	2200      	movs	r2, #0
 8008488:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800848c:	2300      	movs	r3, #0
}
 800848e:	4618      	mov	r0, r3
 8008490:	3710      	adds	r7, #16
 8008492:	46bd      	mov	sp, r7
 8008494:	bd80      	pop	{r7, pc}

08008496 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008496:	b580      	push	{r7, lr}
 8008498:	b09c      	sub	sp, #112	; 0x70
 800849a:	af00      	add	r7, sp, #0
 800849c:	60f8      	str	r0, [r7, #12]
 800849e:	60b9      	str	r1, [r7, #8]
 80084a0:	603b      	str	r3, [r7, #0]
 80084a2:	4613      	mov	r3, r2
 80084a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80084a6:	e0a5      	b.n	80085f4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ae:	f000 80a1 	beq.w	80085f4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80084b2:	f7f9 fd6d 	bl	8001f90 <HAL_GetTick>
 80084b6:	4602      	mov	r2, r0
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80084be:	429a      	cmp	r2, r3
 80084c0:	d302      	bcc.n	80084c8 <UART_WaitOnFlagUntilTimeout+0x32>
 80084c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d13e      	bne.n	8008546 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084d0:	e853 3f00 	ldrex	r3, [r3]
 80084d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80084d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80084dc:	667b      	str	r3, [r7, #100]	; 0x64
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	461a      	mov	r2, r3
 80084e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80084e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80084e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80084ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80084ee:	e841 2300 	strex	r3, r2, [r1]
 80084f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80084f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d1e6      	bne.n	80084c8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	3308      	adds	r3, #8
 8008500:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008502:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008504:	e853 3f00 	ldrex	r3, [r3]
 8008508:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800850a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800850c:	f023 0301 	bic.w	r3, r3, #1
 8008510:	663b      	str	r3, [r7, #96]	; 0x60
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3308      	adds	r3, #8
 8008518:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800851a:	64ba      	str	r2, [r7, #72]	; 0x48
 800851c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800851e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008520:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008522:	e841 2300 	strex	r3, r2, [r1]
 8008526:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800852a:	2b00      	cmp	r3, #0
 800852c:	d1e5      	bne.n	80084fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	2220      	movs	r2, #32
 8008532:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	2220      	movs	r2, #32
 8008538:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008542:	2303      	movs	r3, #3
 8008544:	e067      	b.n	8008616 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0304 	and.w	r3, r3, #4
 8008550:	2b00      	cmp	r3, #0
 8008552:	d04f      	beq.n	80085f4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	69db      	ldr	r3, [r3, #28]
 800855a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800855e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008562:	d147      	bne.n	80085f4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800856c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008576:	e853 3f00 	ldrex	r3, [r3]
 800857a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800857c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800857e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008582:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	461a      	mov	r2, r3
 800858a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800858c:	637b      	str	r3, [r7, #52]	; 0x34
 800858e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008590:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008592:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008594:	e841 2300 	strex	r3, r2, [r1]
 8008598:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800859a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800859c:	2b00      	cmp	r3, #0
 800859e:	d1e6      	bne.n	800856e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	3308      	adds	r3, #8
 80085a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	e853 3f00 	ldrex	r3, [r3]
 80085ae:	613b      	str	r3, [r7, #16]
   return(result);
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	f023 0301 	bic.w	r3, r3, #1
 80085b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	3308      	adds	r3, #8
 80085be:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80085c0:	623a      	str	r2, [r7, #32]
 80085c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c4:	69f9      	ldr	r1, [r7, #28]
 80085c6:	6a3a      	ldr	r2, [r7, #32]
 80085c8:	e841 2300 	strex	r3, r2, [r1]
 80085cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d1e5      	bne.n	80085a0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	2220      	movs	r2, #32
 80085d8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2220      	movs	r2, #32
 80085de:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2220      	movs	r2, #32
 80085e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2200      	movs	r2, #0
 80085ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e010      	b.n	8008616 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	69da      	ldr	r2, [r3, #28]
 80085fa:	68bb      	ldr	r3, [r7, #8]
 80085fc:	4013      	ands	r3, r2
 80085fe:	68ba      	ldr	r2, [r7, #8]
 8008600:	429a      	cmp	r2, r3
 8008602:	bf0c      	ite	eq
 8008604:	2301      	moveq	r3, #1
 8008606:	2300      	movne	r3, #0
 8008608:	b2db      	uxtb	r3, r3
 800860a:	461a      	mov	r2, r3
 800860c:	79fb      	ldrb	r3, [r7, #7]
 800860e:	429a      	cmp	r2, r3
 8008610:	f43f af4a 	beq.w	80084a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008614:	2300      	movs	r3, #0
}
 8008616:	4618      	mov	r0, r3
 8008618:	3770      	adds	r7, #112	; 0x70
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800861e:	b480      	push	{r7}
 8008620:	b095      	sub	sp, #84	; 0x54
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800862e:	e853 3f00 	ldrex	r3, [r3]
 8008632:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008636:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800863a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	461a      	mov	r2, r3
 8008642:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008644:	643b      	str	r3, [r7, #64]	; 0x40
 8008646:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008648:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800864a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800864c:	e841 2300 	strex	r3, r2, [r1]
 8008650:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1e6      	bne.n	8008626 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3308      	adds	r3, #8
 800865e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008660:	6a3b      	ldr	r3, [r7, #32]
 8008662:	e853 3f00 	ldrex	r3, [r3]
 8008666:	61fb      	str	r3, [r7, #28]
   return(result);
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	f023 0301 	bic.w	r3, r3, #1
 800866e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	3308      	adds	r3, #8
 8008676:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008678:	62fa      	str	r2, [r7, #44]	; 0x2c
 800867a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800867e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008680:	e841 2300 	strex	r3, r2, [r1]
 8008684:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008688:	2b00      	cmp	r3, #0
 800868a:	d1e5      	bne.n	8008658 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008690:	2b01      	cmp	r3, #1
 8008692:	d118      	bne.n	80086c6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	e853 3f00 	ldrex	r3, [r3]
 80086a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80086a2:	68bb      	ldr	r3, [r7, #8]
 80086a4:	f023 0310 	bic.w	r3, r3, #16
 80086a8:	647b      	str	r3, [r7, #68]	; 0x44
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	461a      	mov	r2, r3
 80086b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086b2:	61bb      	str	r3, [r7, #24]
 80086b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b6:	6979      	ldr	r1, [r7, #20]
 80086b8:	69ba      	ldr	r2, [r7, #24]
 80086ba:	e841 2300 	strex	r3, r2, [r1]
 80086be:	613b      	str	r3, [r7, #16]
   return(result);
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1e6      	bne.n	8008694 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2220      	movs	r2, #32
 80086ca:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2200      	movs	r2, #0
 80086d6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80086d8:	bf00      	nop
 80086da:	3754      	adds	r7, #84	; 0x54
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2200      	movs	r2, #0
 80086f6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008702:	68f8      	ldr	r0, [r7, #12]
 8008704:	f7ff fb3c 	bl	8007d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008708:	bf00      	nop
 800870a:	3710      	adds	r7, #16
 800870c:	46bd      	mov	sp, r7
 800870e:	bd80      	pop	{r7, pc}

08008710 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b088      	sub	sp, #32
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	e853 3f00 	ldrex	r3, [r3]
 8008724:	60bb      	str	r3, [r7, #8]
   return(result);
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800872c:	61fb      	str	r3, [r7, #28]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	461a      	mov	r2, r3
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	61bb      	str	r3, [r7, #24]
 8008738:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873a:	6979      	ldr	r1, [r7, #20]
 800873c:	69ba      	ldr	r2, [r7, #24]
 800873e:	e841 2300 	strex	r3, r2, [r1]
 8008742:	613b      	str	r3, [r7, #16]
   return(result);
 8008744:	693b      	ldr	r3, [r7, #16]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d1e6      	bne.n	8008718 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2220      	movs	r2, #32
 800874e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f7f8 ff5c 	bl	8001614 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800875c:	bf00      	nop
 800875e:	3720      	adds	r7, #32
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}

08008764 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <__NVIC_SetPriority>:
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	4603      	mov	r3, r0
 8008780:	6039      	str	r1, [r7, #0]
 8008782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008788:	2b00      	cmp	r3, #0
 800878a:	db0a      	blt.n	80087a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	b2da      	uxtb	r2, r3
 8008790:	490c      	ldr	r1, [pc, #48]	; (80087c4 <__NVIC_SetPriority+0x4c>)
 8008792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008796:	0112      	lsls	r2, r2, #4
 8008798:	b2d2      	uxtb	r2, r2
 800879a:	440b      	add	r3, r1
 800879c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80087a0:	e00a      	b.n	80087b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	b2da      	uxtb	r2, r3
 80087a6:	4908      	ldr	r1, [pc, #32]	; (80087c8 <__NVIC_SetPriority+0x50>)
 80087a8:	79fb      	ldrb	r3, [r7, #7]
 80087aa:	f003 030f 	and.w	r3, r3, #15
 80087ae:	3b04      	subs	r3, #4
 80087b0:	0112      	lsls	r2, r2, #4
 80087b2:	b2d2      	uxtb	r2, r2
 80087b4:	440b      	add	r3, r1
 80087b6:	761a      	strb	r2, [r3, #24]
}
 80087b8:	bf00      	nop
 80087ba:	370c      	adds	r7, #12
 80087bc:	46bd      	mov	sp, r7
 80087be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c2:	4770      	bx	lr
 80087c4:	e000e100 	.word	0xe000e100
 80087c8:	e000ed00 	.word	0xe000ed00

080087cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80087cc:	b580      	push	{r7, lr}
 80087ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80087d0:	4b05      	ldr	r3, [pc, #20]	; (80087e8 <SysTick_Handler+0x1c>)
 80087d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80087d4:	f001 fda6 	bl	800a324 <xTaskGetSchedulerState>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d001      	beq.n	80087e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80087de:	f002 fb8b 	bl	800aef8 <xPortSysTickHandler>
  }
}
 80087e2:	bf00      	nop
 80087e4:	bd80      	pop	{r7, pc}
 80087e6:	bf00      	nop
 80087e8:	e000e010 	.word	0xe000e010

080087ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80087ec:	b580      	push	{r7, lr}
 80087ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80087f0:	2100      	movs	r1, #0
 80087f2:	f06f 0004 	mvn.w	r0, #4
 80087f6:	f7ff ffbf 	bl	8008778 <__NVIC_SetPriority>
#endif
}
 80087fa:	bf00      	nop
 80087fc:	bd80      	pop	{r7, pc}
	...

08008800 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008806:	f3ef 8305 	mrs	r3, IPSR
 800880a:	603b      	str	r3, [r7, #0]
  return(result);
 800880c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800880e:	2b00      	cmp	r3, #0
 8008810:	d003      	beq.n	800881a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008812:	f06f 0305 	mvn.w	r3, #5
 8008816:	607b      	str	r3, [r7, #4]
 8008818:	e00c      	b.n	8008834 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800881a:	4b0a      	ldr	r3, [pc, #40]	; (8008844 <osKernelInitialize+0x44>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d105      	bne.n	800882e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008822:	4b08      	ldr	r3, [pc, #32]	; (8008844 <osKernelInitialize+0x44>)
 8008824:	2201      	movs	r2, #1
 8008826:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008828:	2300      	movs	r3, #0
 800882a:	607b      	str	r3, [r7, #4]
 800882c:	e002      	b.n	8008834 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800882e:	f04f 33ff 	mov.w	r3, #4294967295
 8008832:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008834:	687b      	ldr	r3, [r7, #4]
}
 8008836:	4618      	mov	r0, r3
 8008838:	370c      	adds	r7, #12
 800883a:	46bd      	mov	sp, r7
 800883c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008840:	4770      	bx	lr
 8008842:	bf00      	nop
 8008844:	200000a8 	.word	0x200000a8

08008848 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008848:	b580      	push	{r7, lr}
 800884a:	b082      	sub	sp, #8
 800884c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800884e:	f3ef 8305 	mrs	r3, IPSR
 8008852:	603b      	str	r3, [r7, #0]
  return(result);
 8008854:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008856:	2b00      	cmp	r3, #0
 8008858:	d003      	beq.n	8008862 <osKernelStart+0x1a>
    stat = osErrorISR;
 800885a:	f06f 0305 	mvn.w	r3, #5
 800885e:	607b      	str	r3, [r7, #4]
 8008860:	e010      	b.n	8008884 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008862:	4b0b      	ldr	r3, [pc, #44]	; (8008890 <osKernelStart+0x48>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d109      	bne.n	800887e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800886a:	f7ff ffbf 	bl	80087ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800886e:	4b08      	ldr	r3, [pc, #32]	; (8008890 <osKernelStart+0x48>)
 8008870:	2202      	movs	r2, #2
 8008872:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008874:	f001 f8fa 	bl	8009a6c <vTaskStartScheduler>
      stat = osOK;
 8008878:	2300      	movs	r3, #0
 800887a:	607b      	str	r3, [r7, #4]
 800887c:	e002      	b.n	8008884 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800887e:	f04f 33ff 	mov.w	r3, #4294967295
 8008882:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008884:	687b      	ldr	r3, [r7, #4]
}
 8008886:	4618      	mov	r0, r3
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	200000a8 	.word	0x200000a8

08008894 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008894:	b580      	push	{r7, lr}
 8008896:	b08e      	sub	sp, #56	; 0x38
 8008898:	af04      	add	r7, sp, #16
 800889a:	60f8      	str	r0, [r7, #12]
 800889c:	60b9      	str	r1, [r7, #8]
 800889e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80088a0:	2300      	movs	r3, #0
 80088a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80088a4:	f3ef 8305 	mrs	r3, IPSR
 80088a8:	617b      	str	r3, [r7, #20]
  return(result);
 80088aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d17e      	bne.n	80089ae <osThreadNew+0x11a>
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d07b      	beq.n	80089ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80088b6:	2380      	movs	r3, #128	; 0x80
 80088b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80088ba:	2318      	movs	r3, #24
 80088bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80088be:	2300      	movs	r3, #0
 80088c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80088c2:	f04f 33ff 	mov.w	r3, #4294967295
 80088c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d045      	beq.n	800895a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d002      	beq.n	80088dc <osThreadNew+0x48>
        name = attr->name;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	699b      	ldr	r3, [r3, #24]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d002      	beq.n	80088ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	699b      	ldr	r3, [r3, #24]
 80088e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80088ea:	69fb      	ldr	r3, [r7, #28]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d008      	beq.n	8008902 <osThreadNew+0x6e>
 80088f0:	69fb      	ldr	r3, [r7, #28]
 80088f2:	2b38      	cmp	r3, #56	; 0x38
 80088f4:	d805      	bhi.n	8008902 <osThreadNew+0x6e>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	f003 0301 	and.w	r3, r3, #1
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d001      	beq.n	8008906 <osThreadNew+0x72>
        return (NULL);
 8008902:	2300      	movs	r3, #0
 8008904:	e054      	b.n	80089b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	695b      	ldr	r3, [r3, #20]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d003      	beq.n	8008916 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	695b      	ldr	r3, [r3, #20]
 8008912:	089b      	lsrs	r3, r3, #2
 8008914:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	2b00      	cmp	r3, #0
 800891c:	d00e      	beq.n	800893c <osThreadNew+0xa8>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	68db      	ldr	r3, [r3, #12]
 8008922:	2bbb      	cmp	r3, #187	; 0xbb
 8008924:	d90a      	bls.n	800893c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800892a:	2b00      	cmp	r3, #0
 800892c:	d006      	beq.n	800893c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d002      	beq.n	800893c <osThreadNew+0xa8>
        mem = 1;
 8008936:	2301      	movs	r3, #1
 8008938:	61bb      	str	r3, [r7, #24]
 800893a:	e010      	b.n	800895e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d10c      	bne.n	800895e <osThreadNew+0xca>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	68db      	ldr	r3, [r3, #12]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d108      	bne.n	800895e <osThreadNew+0xca>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	691b      	ldr	r3, [r3, #16]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d104      	bne.n	800895e <osThreadNew+0xca>
          mem = 0;
 8008954:	2300      	movs	r3, #0
 8008956:	61bb      	str	r3, [r7, #24]
 8008958:	e001      	b.n	800895e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800895a:	2300      	movs	r3, #0
 800895c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d110      	bne.n	8008986 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800896c:	9202      	str	r2, [sp, #8]
 800896e:	9301      	str	r3, [sp, #4]
 8008970:	69fb      	ldr	r3, [r7, #28]
 8008972:	9300      	str	r3, [sp, #0]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	6a3a      	ldr	r2, [r7, #32]
 8008978:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f000 fe0c 	bl	8009598 <xTaskCreateStatic>
 8008980:	4603      	mov	r3, r0
 8008982:	613b      	str	r3, [r7, #16]
 8008984:	e013      	b.n	80089ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d110      	bne.n	80089ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800898c:	6a3b      	ldr	r3, [r7, #32]
 800898e:	b29a      	uxth	r2, r3
 8008990:	f107 0310 	add.w	r3, r7, #16
 8008994:	9301      	str	r3, [sp, #4]
 8008996:	69fb      	ldr	r3, [r7, #28]
 8008998:	9300      	str	r3, [sp, #0]
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f000 fe57 	bl	8009652 <xTaskCreate>
 80089a4:	4603      	mov	r3, r0
 80089a6:	2b01      	cmp	r3, #1
 80089a8:	d001      	beq.n	80089ae <osThreadNew+0x11a>
            hTask = NULL;
 80089aa:	2300      	movs	r3, #0
 80089ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80089ae:	693b      	ldr	r3, [r7, #16]
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3728      	adds	r7, #40	; 0x28
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b084      	sub	sp, #16
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80089c0:	f3ef 8305 	mrs	r3, IPSR
 80089c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80089c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d003      	beq.n	80089d4 <osDelay+0x1c>
    stat = osErrorISR;
 80089cc:	f06f 0305 	mvn.w	r3, #5
 80089d0:	60fb      	str	r3, [r7, #12]
 80089d2:	e007      	b.n	80089e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80089d4:	2300      	movs	r3, #0
 80089d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d002      	beq.n	80089e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f001 f810 	bl	8009a04 <vTaskDelay>
    }
  }

  return (stat);
 80089e4:	68fb      	ldr	r3, [r7, #12]
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
	...

080089f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80089f0:	b480      	push	{r7}
 80089f2:	b085      	sub	sp, #20
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4a07      	ldr	r2, [pc, #28]	; (8008a1c <vApplicationGetIdleTaskMemory+0x2c>)
 8008a00:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	4a06      	ldr	r2, [pc, #24]	; (8008a20 <vApplicationGetIdleTaskMemory+0x30>)
 8008a06:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	2280      	movs	r2, #128	; 0x80
 8008a0c:	601a      	str	r2, [r3, #0]
}
 8008a0e:	bf00      	nop
 8008a10:	3714      	adds	r7, #20
 8008a12:	46bd      	mov	sp, r7
 8008a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a18:	4770      	bx	lr
 8008a1a:	bf00      	nop
 8008a1c:	200000ac 	.word	0x200000ac
 8008a20:	20000168 	.word	0x20000168

08008a24 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008a24:	b480      	push	{r7}
 8008a26:	b085      	sub	sp, #20
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	60f8      	str	r0, [r7, #12]
 8008a2c:	60b9      	str	r1, [r7, #8]
 8008a2e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	4a07      	ldr	r2, [pc, #28]	; (8008a50 <vApplicationGetTimerTaskMemory+0x2c>)
 8008a34:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008a36:	68bb      	ldr	r3, [r7, #8]
 8008a38:	4a06      	ldr	r2, [pc, #24]	; (8008a54 <vApplicationGetTimerTaskMemory+0x30>)
 8008a3a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008a42:	601a      	str	r2, [r3, #0]
}
 8008a44:	bf00      	nop
 8008a46:	3714      	adds	r7, #20
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr
 8008a50:	20000368 	.word	0x20000368
 8008a54:	20000424 	.word	0x20000424

08008a58 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f103 0208 	add.w	r2, r3, #8
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008a70:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f103 0208 	add.w	r2, r3, #8
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f103 0208 	add.w	r2, r3, #8
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	2200      	movs	r2, #0
 8008a8a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008a8c:	bf00      	nop
 8008a8e:	370c      	adds	r7, #12
 8008a90:	46bd      	mov	sp, r7
 8008a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a96:	4770      	bx	lr

08008a98 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008a98:	b480      	push	{r7}
 8008a9a:	b083      	sub	sp, #12
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008aa6:	bf00      	nop
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	b085      	sub	sp, #20
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008ac2:	683b      	ldr	r3, [r7, #0]
 8008ac4:	68fa      	ldr	r2, [r7, #12]
 8008ac6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	689a      	ldr	r2, [r3, #8]
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	689b      	ldr	r3, [r3, #8]
 8008ad4:	683a      	ldr	r2, [r7, #0]
 8008ad6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	683a      	ldr	r2, [r7, #0]
 8008adc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	687a      	ldr	r2, [r7, #4]
 8008ae2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	1c5a      	adds	r2, r3, #1
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	601a      	str	r2, [r3, #0]
}
 8008aee:	bf00      	nop
 8008af0:	3714      	adds	r7, #20
 8008af2:	46bd      	mov	sp, r7
 8008af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af8:	4770      	bx	lr

08008afa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008afa:	b480      	push	{r7}
 8008afc:	b085      	sub	sp, #20
 8008afe:	af00      	add	r7, sp, #0
 8008b00:	6078      	str	r0, [r7, #4]
 8008b02:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b10:	d103      	bne.n	8008b1a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	60fb      	str	r3, [r7, #12]
 8008b18:	e00c      	b.n	8008b34 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	3308      	adds	r3, #8
 8008b1e:	60fb      	str	r3, [r7, #12]
 8008b20:	e002      	b.n	8008b28 <vListInsert+0x2e>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	685b      	ldr	r3, [r3, #4]
 8008b26:	60fb      	str	r3, [r7, #12]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	685b      	ldr	r3, [r3, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d2f6      	bcs.n	8008b22 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	685a      	ldr	r2, [r3, #4]
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	685b      	ldr	r3, [r3, #4]
 8008b40:	683a      	ldr	r2, [r7, #0]
 8008b42:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008b44:	683b      	ldr	r3, [r7, #0]
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	683a      	ldr	r2, [r7, #0]
 8008b4e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	1c5a      	adds	r2, r3, #1
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	601a      	str	r2, [r3, #0]
}
 8008b60:	bf00      	nop
 8008b62:	3714      	adds	r7, #20
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b085      	sub	sp, #20
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	685b      	ldr	r3, [r3, #4]
 8008b7e:	687a      	ldr	r2, [r7, #4]
 8008b80:	6892      	ldr	r2, [r2, #8]
 8008b82:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	687a      	ldr	r2, [r7, #4]
 8008b8a:	6852      	ldr	r2, [r2, #4]
 8008b8c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	685b      	ldr	r3, [r3, #4]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d103      	bne.n	8008ba0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	689a      	ldr	r2, [r3, #8]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	1e5a      	subs	r2, r3, #1
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3714      	adds	r7, #20
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10a      	bne.n	8008bea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008be6:	bf00      	nop
 8008be8:	e7fe      	b.n	8008be8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008bea:	f002 f8f3 	bl	800add4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bf6:	68f9      	ldr	r1, [r7, #12]
 8008bf8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008bfa:	fb01 f303 	mul.w	r3, r1, r3
 8008bfe:	441a      	add	r2, r3
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	2200      	movs	r2, #0
 8008c08:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681a      	ldr	r2, [r3, #0]
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c1a:	3b01      	subs	r3, #1
 8008c1c:	68f9      	ldr	r1, [r7, #12]
 8008c1e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008c20:	fb01 f303 	mul.w	r3, r1, r3
 8008c24:	441a      	add	r2, r3
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	22ff      	movs	r2, #255	; 0xff
 8008c2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	22ff      	movs	r2, #255	; 0xff
 8008c36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d114      	bne.n	8008c6a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d01a      	beq.n	8008c7e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	3310      	adds	r3, #16
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f001 f9a7 	bl	8009fa0 <xTaskRemoveFromEventList>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d012      	beq.n	8008c7e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008c58:	4b0c      	ldr	r3, [pc, #48]	; (8008c8c <xQueueGenericReset+0xcc>)
 8008c5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c5e:	601a      	str	r2, [r3, #0]
 8008c60:	f3bf 8f4f 	dsb	sy
 8008c64:	f3bf 8f6f 	isb	sy
 8008c68:	e009      	b.n	8008c7e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	3310      	adds	r3, #16
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7ff fef2 	bl	8008a58 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	3324      	adds	r3, #36	; 0x24
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7ff feed 	bl	8008a58 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008c7e:	f002 f8d9 	bl	800ae34 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008c82:	2301      	movs	r3, #1
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3710      	adds	r7, #16
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}
 8008c8c:	e000ed04 	.word	0xe000ed04

08008c90 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b08e      	sub	sp, #56	; 0x38
 8008c94:	af02      	add	r7, sp, #8
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
 8008c9c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d10a      	bne.n	8008cba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008ca4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ca8:	f383 8811 	msr	BASEPRI, r3
 8008cac:	f3bf 8f6f 	isb	sy
 8008cb0:	f3bf 8f4f 	dsb	sy
 8008cb4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008cb6:	bf00      	nop
 8008cb8:	e7fe      	b.n	8008cb8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10a      	bne.n	8008cd6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008cd2:	bf00      	nop
 8008cd4:	e7fe      	b.n	8008cd4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d002      	beq.n	8008ce2 <xQueueGenericCreateStatic+0x52>
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <xQueueGenericCreateStatic+0x56>
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	e000      	b.n	8008ce8 <xQueueGenericCreateStatic+0x58>
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d10a      	bne.n	8008d02 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cf0:	f383 8811 	msr	BASEPRI, r3
 8008cf4:	f3bf 8f6f 	isb	sy
 8008cf8:	f3bf 8f4f 	dsb	sy
 8008cfc:	623b      	str	r3, [r7, #32]
}
 8008cfe:	bf00      	nop
 8008d00:	e7fe      	b.n	8008d00 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d102      	bne.n	8008d0e <xQueueGenericCreateStatic+0x7e>
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d101      	bne.n	8008d12 <xQueueGenericCreateStatic+0x82>
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e000      	b.n	8008d14 <xQueueGenericCreateStatic+0x84>
 8008d12:	2300      	movs	r3, #0
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10a      	bne.n	8008d2e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d1c:	f383 8811 	msr	BASEPRI, r3
 8008d20:	f3bf 8f6f 	isb	sy
 8008d24:	f3bf 8f4f 	dsb	sy
 8008d28:	61fb      	str	r3, [r7, #28]
}
 8008d2a:	bf00      	nop
 8008d2c:	e7fe      	b.n	8008d2c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008d2e:	2350      	movs	r3, #80	; 0x50
 8008d30:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008d32:	697b      	ldr	r3, [r7, #20]
 8008d34:	2b50      	cmp	r3, #80	; 0x50
 8008d36:	d00a      	beq.n	8008d4e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008d38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d3c:	f383 8811 	msr	BASEPRI, r3
 8008d40:	f3bf 8f6f 	isb	sy
 8008d44:	f3bf 8f4f 	dsb	sy
 8008d48:	61bb      	str	r3, [r7, #24]
}
 8008d4a:	bf00      	nop
 8008d4c:	e7fe      	b.n	8008d4c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008d4e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008d54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00d      	beq.n	8008d76 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008d62:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d68:	9300      	str	r3, [sp, #0]
 8008d6a:	4613      	mov	r3, r2
 8008d6c:	687a      	ldr	r2, [r7, #4]
 8008d6e:	68b9      	ldr	r1, [r7, #8]
 8008d70:	68f8      	ldr	r0, [r7, #12]
 8008d72:	f000 f805 	bl	8008d80 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3730      	adds	r7, #48	; 0x30
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}

08008d80 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	607a      	str	r2, [r7, #4]
 8008d8c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008d8e:	68bb      	ldr	r3, [r7, #8]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d103      	bne.n	8008d9c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	69ba      	ldr	r2, [r7, #24]
 8008d98:	601a      	str	r2, [r3, #0]
 8008d9a:	e002      	b.n	8008da2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	68fa      	ldr	r2, [r7, #12]
 8008da6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008da8:	69bb      	ldr	r3, [r7, #24]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008dae:	2101      	movs	r1, #1
 8008db0:	69b8      	ldr	r0, [r7, #24]
 8008db2:	f7ff ff05 	bl	8008bc0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008db6:	69bb      	ldr	r3, [r7, #24]
 8008db8:	78fa      	ldrb	r2, [r7, #3]
 8008dba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008dbe:	bf00      	nop
 8008dc0:	3710      	adds	r7, #16
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
	...

08008dc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b08e      	sub	sp, #56	; 0x38
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	607a      	str	r2, [r7, #4]
 8008dd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d10a      	bne.n	8008dfa <xQueueGenericSend+0x32>
	__asm volatile
 8008de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de8:	f383 8811 	msr	BASEPRI, r3
 8008dec:	f3bf 8f6f 	isb	sy
 8008df0:	f3bf 8f4f 	dsb	sy
 8008df4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008df6:	bf00      	nop
 8008df8:	e7fe      	b.n	8008df8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d103      	bne.n	8008e08 <xQueueGenericSend+0x40>
 8008e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d101      	bne.n	8008e0c <xQueueGenericSend+0x44>
 8008e08:	2301      	movs	r3, #1
 8008e0a:	e000      	b.n	8008e0e <xQueueGenericSend+0x46>
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d10a      	bne.n	8008e28 <xQueueGenericSend+0x60>
	__asm volatile
 8008e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e16:	f383 8811 	msr	BASEPRI, r3
 8008e1a:	f3bf 8f6f 	isb	sy
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008e24:	bf00      	nop
 8008e26:	e7fe      	b.n	8008e26 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	2b02      	cmp	r3, #2
 8008e2c:	d103      	bne.n	8008e36 <xQueueGenericSend+0x6e>
 8008e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d101      	bne.n	8008e3a <xQueueGenericSend+0x72>
 8008e36:	2301      	movs	r3, #1
 8008e38:	e000      	b.n	8008e3c <xQueueGenericSend+0x74>
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d10a      	bne.n	8008e56 <xQueueGenericSend+0x8e>
	__asm volatile
 8008e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e44:	f383 8811 	msr	BASEPRI, r3
 8008e48:	f3bf 8f6f 	isb	sy
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	623b      	str	r3, [r7, #32]
}
 8008e52:	bf00      	nop
 8008e54:	e7fe      	b.n	8008e54 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008e56:	f001 fa65 	bl	800a324 <xTaskGetSchedulerState>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d102      	bne.n	8008e66 <xQueueGenericSend+0x9e>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d101      	bne.n	8008e6a <xQueueGenericSend+0xa2>
 8008e66:	2301      	movs	r3, #1
 8008e68:	e000      	b.n	8008e6c <xQueueGenericSend+0xa4>
 8008e6a:	2300      	movs	r3, #0
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d10a      	bne.n	8008e86 <xQueueGenericSend+0xbe>
	__asm volatile
 8008e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e74:	f383 8811 	msr	BASEPRI, r3
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	f3bf 8f4f 	dsb	sy
 8008e80:	61fb      	str	r3, [r7, #28]
}
 8008e82:	bf00      	nop
 8008e84:	e7fe      	b.n	8008e84 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008e86:	f001 ffa5 	bl	800add4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e92:	429a      	cmp	r2, r3
 8008e94:	d302      	bcc.n	8008e9c <xQueueGenericSend+0xd4>
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b02      	cmp	r3, #2
 8008e9a:	d129      	bne.n	8008ef0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e9c:	683a      	ldr	r2, [r7, #0]
 8008e9e:	68b9      	ldr	r1, [r7, #8]
 8008ea0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ea2:	f000 fa0b 	bl	80092bc <prvCopyDataToQueue>
 8008ea6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d010      	beq.n	8008ed2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb2:	3324      	adds	r3, #36	; 0x24
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f001 f873 	bl	8009fa0 <xTaskRemoveFromEventList>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d013      	beq.n	8008ee8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008ec0:	4b3f      	ldr	r3, [pc, #252]	; (8008fc0 <xQueueGenericSend+0x1f8>)
 8008ec2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ec6:	601a      	str	r2, [r3, #0]
 8008ec8:	f3bf 8f4f 	dsb	sy
 8008ecc:	f3bf 8f6f 	isb	sy
 8008ed0:	e00a      	b.n	8008ee8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d007      	beq.n	8008ee8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008ed8:	4b39      	ldr	r3, [pc, #228]	; (8008fc0 <xQueueGenericSend+0x1f8>)
 8008eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008ee8:	f001 ffa4 	bl	800ae34 <vPortExitCritical>
				return pdPASS;
 8008eec:	2301      	movs	r3, #1
 8008eee:	e063      	b.n	8008fb8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d103      	bne.n	8008efe <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008ef6:	f001 ff9d 	bl	800ae34 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008efa:	2300      	movs	r3, #0
 8008efc:	e05c      	b.n	8008fb8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d106      	bne.n	8008f12 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008f04:	f107 0314 	add.w	r3, r7, #20
 8008f08:	4618      	mov	r0, r3
 8008f0a:	f001 f8ad 	bl	800a068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008f0e:	2301      	movs	r3, #1
 8008f10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008f12:	f001 ff8f 	bl	800ae34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008f16:	f000 fe19 	bl	8009b4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008f1a:	f001 ff5b 	bl	800add4 <vPortEnterCritical>
 8008f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f24:	b25b      	sxtb	r3, r3
 8008f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f2a:	d103      	bne.n	8008f34 <xQueueGenericSend+0x16c>
 8008f2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f3a:	b25b      	sxtb	r3, r3
 8008f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f40:	d103      	bne.n	8008f4a <xQueueGenericSend+0x182>
 8008f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f44:	2200      	movs	r2, #0
 8008f46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f4a:	f001 ff73 	bl	800ae34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008f4e:	1d3a      	adds	r2, r7, #4
 8008f50:	f107 0314 	add.w	r3, r7, #20
 8008f54:	4611      	mov	r1, r2
 8008f56:	4618      	mov	r0, r3
 8008f58:	f001 f89c 	bl	800a094 <xTaskCheckForTimeOut>
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d124      	bne.n	8008fac <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008f62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f64:	f000 faa2 	bl	80094ac <prvIsQueueFull>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d018      	beq.n	8008fa0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f70:	3310      	adds	r3, #16
 8008f72:	687a      	ldr	r2, [r7, #4]
 8008f74:	4611      	mov	r1, r2
 8008f76:	4618      	mov	r0, r3
 8008f78:	f000 ffc2 	bl	8009f00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008f7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f7e:	f000 fa2d 	bl	80093dc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008f82:	f000 fdf1 	bl	8009b68 <xTaskResumeAll>
 8008f86:	4603      	mov	r3, r0
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	f47f af7c 	bne.w	8008e86 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008f8e:	4b0c      	ldr	r3, [pc, #48]	; (8008fc0 <xQueueGenericSend+0x1f8>)
 8008f90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f94:	601a      	str	r2, [r3, #0]
 8008f96:	f3bf 8f4f 	dsb	sy
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	e772      	b.n	8008e86 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008fa0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fa2:	f000 fa1b 	bl	80093dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008fa6:	f000 fddf 	bl	8009b68 <xTaskResumeAll>
 8008faa:	e76c      	b.n	8008e86 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008fac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fae:	f000 fa15 	bl	80093dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008fb2:	f000 fdd9 	bl	8009b68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008fb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3738      	adds	r7, #56	; 0x38
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	bd80      	pop	{r7, pc}
 8008fc0:	e000ed04 	.word	0xe000ed04

08008fc4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b090      	sub	sp, #64	; 0x40
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
 8008fd0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008fd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10a      	bne.n	8008ff2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008fee:	bf00      	nop
 8008ff0:	e7fe      	b.n	8008ff0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ff2:	68bb      	ldr	r3, [r7, #8]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d103      	bne.n	8009000 <xQueueGenericSendFromISR+0x3c>
 8008ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d101      	bne.n	8009004 <xQueueGenericSendFromISR+0x40>
 8009000:	2301      	movs	r3, #1
 8009002:	e000      	b.n	8009006 <xQueueGenericSendFromISR+0x42>
 8009004:	2300      	movs	r3, #0
 8009006:	2b00      	cmp	r3, #0
 8009008:	d10a      	bne.n	8009020 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800900a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900e:	f383 8811 	msr	BASEPRI, r3
 8009012:	f3bf 8f6f 	isb	sy
 8009016:	f3bf 8f4f 	dsb	sy
 800901a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800901c:	bf00      	nop
 800901e:	e7fe      	b.n	800901e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009020:	683b      	ldr	r3, [r7, #0]
 8009022:	2b02      	cmp	r3, #2
 8009024:	d103      	bne.n	800902e <xQueueGenericSendFromISR+0x6a>
 8009026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800902a:	2b01      	cmp	r3, #1
 800902c:	d101      	bne.n	8009032 <xQueueGenericSendFromISR+0x6e>
 800902e:	2301      	movs	r3, #1
 8009030:	e000      	b.n	8009034 <xQueueGenericSendFromISR+0x70>
 8009032:	2300      	movs	r3, #0
 8009034:	2b00      	cmp	r3, #0
 8009036:	d10a      	bne.n	800904e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800903c:	f383 8811 	msr	BASEPRI, r3
 8009040:	f3bf 8f6f 	isb	sy
 8009044:	f3bf 8f4f 	dsb	sy
 8009048:	623b      	str	r3, [r7, #32]
}
 800904a:	bf00      	nop
 800904c:	e7fe      	b.n	800904c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800904e:	f001 ffa3 	bl	800af98 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009052:	f3ef 8211 	mrs	r2, BASEPRI
 8009056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800905a:	f383 8811 	msr	BASEPRI, r3
 800905e:	f3bf 8f6f 	isb	sy
 8009062:	f3bf 8f4f 	dsb	sy
 8009066:	61fa      	str	r2, [r7, #28]
 8009068:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800906a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800906c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800906e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009070:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009076:	429a      	cmp	r2, r3
 8009078:	d302      	bcc.n	8009080 <xQueueGenericSendFromISR+0xbc>
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	2b02      	cmp	r3, #2
 800907e:	d12f      	bne.n	80090e0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009082:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009086:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800908a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800908c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800908e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009090:	683a      	ldr	r2, [r7, #0]
 8009092:	68b9      	ldr	r1, [r7, #8]
 8009094:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009096:	f000 f911 	bl	80092bc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800909a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800909e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090a2:	d112      	bne.n	80090ca <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d016      	beq.n	80090da <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090ae:	3324      	adds	r3, #36	; 0x24
 80090b0:	4618      	mov	r0, r3
 80090b2:	f000 ff75 	bl	8009fa0 <xTaskRemoveFromEventList>
 80090b6:	4603      	mov	r3, r0
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d00e      	beq.n	80090da <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d00b      	beq.n	80090da <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	601a      	str	r2, [r3, #0]
 80090c8:	e007      	b.n	80090da <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80090ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80090ce:	3301      	adds	r3, #1
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	b25a      	sxtb	r2, r3
 80090d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80090da:	2301      	movs	r3, #1
 80090dc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80090de:	e001      	b.n	80090e4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80090e0:	2300      	movs	r3, #0
 80090e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80090e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090e6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80090ee:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80090f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80090f2:	4618      	mov	r0, r3
 80090f4:	3740      	adds	r7, #64	; 0x40
 80090f6:	46bd      	mov	sp, r7
 80090f8:	bd80      	pop	{r7, pc}
	...

080090fc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b08c      	sub	sp, #48	; 0x30
 8009100:	af00      	add	r7, sp, #0
 8009102:	60f8      	str	r0, [r7, #12]
 8009104:	60b9      	str	r1, [r7, #8]
 8009106:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009108:	2300      	movs	r3, #0
 800910a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009112:	2b00      	cmp	r3, #0
 8009114:	d10a      	bne.n	800912c <xQueueReceive+0x30>
	__asm volatile
 8009116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800911a:	f383 8811 	msr	BASEPRI, r3
 800911e:	f3bf 8f6f 	isb	sy
 8009122:	f3bf 8f4f 	dsb	sy
 8009126:	623b      	str	r3, [r7, #32]
}
 8009128:	bf00      	nop
 800912a:	e7fe      	b.n	800912a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800912c:	68bb      	ldr	r3, [r7, #8]
 800912e:	2b00      	cmp	r3, #0
 8009130:	d103      	bne.n	800913a <xQueueReceive+0x3e>
 8009132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009136:	2b00      	cmp	r3, #0
 8009138:	d101      	bne.n	800913e <xQueueReceive+0x42>
 800913a:	2301      	movs	r3, #1
 800913c:	e000      	b.n	8009140 <xQueueReceive+0x44>
 800913e:	2300      	movs	r3, #0
 8009140:	2b00      	cmp	r3, #0
 8009142:	d10a      	bne.n	800915a <xQueueReceive+0x5e>
	__asm volatile
 8009144:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009148:	f383 8811 	msr	BASEPRI, r3
 800914c:	f3bf 8f6f 	isb	sy
 8009150:	f3bf 8f4f 	dsb	sy
 8009154:	61fb      	str	r3, [r7, #28]
}
 8009156:	bf00      	nop
 8009158:	e7fe      	b.n	8009158 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800915a:	f001 f8e3 	bl	800a324 <xTaskGetSchedulerState>
 800915e:	4603      	mov	r3, r0
 8009160:	2b00      	cmp	r3, #0
 8009162:	d102      	bne.n	800916a <xQueueReceive+0x6e>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d101      	bne.n	800916e <xQueueReceive+0x72>
 800916a:	2301      	movs	r3, #1
 800916c:	e000      	b.n	8009170 <xQueueReceive+0x74>
 800916e:	2300      	movs	r3, #0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d10a      	bne.n	800918a <xQueueReceive+0x8e>
	__asm volatile
 8009174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009178:	f383 8811 	msr	BASEPRI, r3
 800917c:	f3bf 8f6f 	isb	sy
 8009180:	f3bf 8f4f 	dsb	sy
 8009184:	61bb      	str	r3, [r7, #24]
}
 8009186:	bf00      	nop
 8009188:	e7fe      	b.n	8009188 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800918a:	f001 fe23 	bl	800add4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800918e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009192:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009196:	2b00      	cmp	r3, #0
 8009198:	d01f      	beq.n	80091da <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800919a:	68b9      	ldr	r1, [r7, #8]
 800919c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800919e:	f000 f8f7 	bl	8009390 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80091a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a4:	1e5a      	subs	r2, r3, #1
 80091a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091a8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80091aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d00f      	beq.n	80091d2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80091b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091b4:	3310      	adds	r3, #16
 80091b6:	4618      	mov	r0, r3
 80091b8:	f000 fef2 	bl	8009fa0 <xTaskRemoveFromEventList>
 80091bc:	4603      	mov	r3, r0
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d007      	beq.n	80091d2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80091c2:	4b3d      	ldr	r3, [pc, #244]	; (80092b8 <xQueueReceive+0x1bc>)
 80091c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091c8:	601a      	str	r2, [r3, #0]
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80091d2:	f001 fe2f 	bl	800ae34 <vPortExitCritical>
				return pdPASS;
 80091d6:	2301      	movs	r3, #1
 80091d8:	e069      	b.n	80092ae <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d103      	bne.n	80091e8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80091e0:	f001 fe28 	bl	800ae34 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80091e4:	2300      	movs	r3, #0
 80091e6:	e062      	b.n	80092ae <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80091e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d106      	bne.n	80091fc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80091ee:	f107 0310 	add.w	r3, r7, #16
 80091f2:	4618      	mov	r0, r3
 80091f4:	f000 ff38 	bl	800a068 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80091f8:	2301      	movs	r3, #1
 80091fa:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80091fc:	f001 fe1a 	bl	800ae34 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009200:	f000 fca4 	bl	8009b4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009204:	f001 fde6 	bl	800add4 <vPortEnterCritical>
 8009208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800920a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800920e:	b25b      	sxtb	r3, r3
 8009210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009214:	d103      	bne.n	800921e <xQueueReceive+0x122>
 8009216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009218:	2200      	movs	r2, #0
 800921a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800921e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009220:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009224:	b25b      	sxtb	r3, r3
 8009226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800922a:	d103      	bne.n	8009234 <xQueueReceive+0x138>
 800922c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800922e:	2200      	movs	r2, #0
 8009230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009234:	f001 fdfe 	bl	800ae34 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009238:	1d3a      	adds	r2, r7, #4
 800923a:	f107 0310 	add.w	r3, r7, #16
 800923e:	4611      	mov	r1, r2
 8009240:	4618      	mov	r0, r3
 8009242:	f000 ff27 	bl	800a094 <xTaskCheckForTimeOut>
 8009246:	4603      	mov	r3, r0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d123      	bne.n	8009294 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800924c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800924e:	f000 f917 	bl	8009480 <prvIsQueueEmpty>
 8009252:	4603      	mov	r3, r0
 8009254:	2b00      	cmp	r3, #0
 8009256:	d017      	beq.n	8009288 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925a:	3324      	adds	r3, #36	; 0x24
 800925c:	687a      	ldr	r2, [r7, #4]
 800925e:	4611      	mov	r1, r2
 8009260:	4618      	mov	r0, r3
 8009262:	f000 fe4d 	bl	8009f00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009266:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009268:	f000 f8b8 	bl	80093dc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800926c:	f000 fc7c 	bl	8009b68 <xTaskResumeAll>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d189      	bne.n	800918a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009276:	4b10      	ldr	r3, [pc, #64]	; (80092b8 <xQueueReceive+0x1bc>)
 8009278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800927c:	601a      	str	r2, [r3, #0]
 800927e:	f3bf 8f4f 	dsb	sy
 8009282:	f3bf 8f6f 	isb	sy
 8009286:	e780      	b.n	800918a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009288:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800928a:	f000 f8a7 	bl	80093dc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800928e:	f000 fc6b 	bl	8009b68 <xTaskResumeAll>
 8009292:	e77a      	b.n	800918a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009296:	f000 f8a1 	bl	80093dc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800929a:	f000 fc65 	bl	8009b68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800929e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092a0:	f000 f8ee 	bl	8009480 <prvIsQueueEmpty>
 80092a4:	4603      	mov	r3, r0
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f43f af6f 	beq.w	800918a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80092ac:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3730      	adds	r7, #48	; 0x30
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}
 80092b6:	bf00      	nop
 80092b8:	e000ed04 	.word	0xe000ed04

080092bc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b086      	sub	sp, #24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80092c8:	2300      	movs	r3, #0
 80092ca:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092d0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d10d      	bne.n	80092f6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d14d      	bne.n	800937e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	689b      	ldr	r3, [r3, #8]
 80092e6:	4618      	mov	r0, r3
 80092e8:	f001 f83a 	bl	800a360 <xTaskPriorityDisinherit>
 80092ec:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	2200      	movs	r2, #0
 80092f2:	609a      	str	r2, [r3, #8]
 80092f4:	e043      	b.n	800937e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d119      	bne.n	8009330 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80092fc:	68fb      	ldr	r3, [r7, #12]
 80092fe:	6858      	ldr	r0, [r3, #4]
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009304:	461a      	mov	r2, r3
 8009306:	68b9      	ldr	r1, [r7, #8]
 8009308:	f002 f89c 	bl	800b444 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	685a      	ldr	r2, [r3, #4]
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009314:	441a      	add	r2, r3
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	689b      	ldr	r3, [r3, #8]
 8009322:	429a      	cmp	r2, r3
 8009324:	d32b      	bcc.n	800937e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681a      	ldr	r2, [r3, #0]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	605a      	str	r2, [r3, #4]
 800932e:	e026      	b.n	800937e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	68d8      	ldr	r0, [r3, #12]
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009338:	461a      	mov	r2, r3
 800933a:	68b9      	ldr	r1, [r7, #8]
 800933c:	f002 f882 	bl	800b444 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	68da      	ldr	r2, [r3, #12]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009348:	425b      	negs	r3, r3
 800934a:	441a      	add	r2, r3
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	68da      	ldr	r2, [r3, #12]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	429a      	cmp	r2, r3
 800935a:	d207      	bcs.n	800936c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	689a      	ldr	r2, [r3, #8]
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009364:	425b      	negs	r3, r3
 8009366:	441a      	add	r2, r3
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2b02      	cmp	r3, #2
 8009370:	d105      	bne.n	800937e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d002      	beq.n	800937e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	3b01      	subs	r3, #1
 800937c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	1c5a      	adds	r2, r3, #1
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8009386:	697b      	ldr	r3, [r7, #20]
}
 8009388:	4618      	mov	r0, r3
 800938a:	3718      	adds	r7, #24
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d018      	beq.n	80093d4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	68da      	ldr	r2, [r3, #12]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093aa:	441a      	add	r2, r3
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	68da      	ldr	r2, [r3, #12]
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	429a      	cmp	r2, r3
 80093ba:	d303      	bcc.n	80093c4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681a      	ldr	r2, [r3, #0]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	68d9      	ldr	r1, [r3, #12]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093cc:	461a      	mov	r2, r3
 80093ce:	6838      	ldr	r0, [r7, #0]
 80093d0:	f002 f838 	bl	800b444 <memcpy>
	}
}
 80093d4:	bf00      	nop
 80093d6:	3708      	adds	r7, #8
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80093e4:	f001 fcf6 	bl	800add4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80093ee:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80093f0:	e011      	b.n	8009416 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d012      	beq.n	8009420 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	3324      	adds	r3, #36	; 0x24
 80093fe:	4618      	mov	r0, r3
 8009400:	f000 fdce 	bl	8009fa0 <xTaskRemoveFromEventList>
 8009404:	4603      	mov	r3, r0
 8009406:	2b00      	cmp	r3, #0
 8009408:	d001      	beq.n	800940e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800940a:	f000 fea5 	bl	800a158 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800940e:	7bfb      	ldrb	r3, [r7, #15]
 8009410:	3b01      	subs	r3, #1
 8009412:	b2db      	uxtb	r3, r3
 8009414:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009416:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800941a:	2b00      	cmp	r3, #0
 800941c:	dce9      	bgt.n	80093f2 <prvUnlockQueue+0x16>
 800941e:	e000      	b.n	8009422 <prvUnlockQueue+0x46>
					break;
 8009420:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	22ff      	movs	r2, #255	; 0xff
 8009426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800942a:	f001 fd03 	bl	800ae34 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800942e:	f001 fcd1 	bl	800add4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009438:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800943a:	e011      	b.n	8009460 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	2b00      	cmp	r3, #0
 8009442:	d012      	beq.n	800946a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	3310      	adds	r3, #16
 8009448:	4618      	mov	r0, r3
 800944a:	f000 fda9 	bl	8009fa0 <xTaskRemoveFromEventList>
 800944e:	4603      	mov	r3, r0
 8009450:	2b00      	cmp	r3, #0
 8009452:	d001      	beq.n	8009458 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009454:	f000 fe80 	bl	800a158 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8009458:	7bbb      	ldrb	r3, [r7, #14]
 800945a:	3b01      	subs	r3, #1
 800945c:	b2db      	uxtb	r3, r3
 800945e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009460:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009464:	2b00      	cmp	r3, #0
 8009466:	dce9      	bgt.n	800943c <prvUnlockQueue+0x60>
 8009468:	e000      	b.n	800946c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800946a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	22ff      	movs	r2, #255	; 0xff
 8009470:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009474:	f001 fcde 	bl	800ae34 <vPortExitCritical>
}
 8009478:	bf00      	nop
 800947a:	3710      	adds	r7, #16
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}

08009480 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009488:	f001 fca4 	bl	800add4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009490:	2b00      	cmp	r3, #0
 8009492:	d102      	bne.n	800949a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8009494:	2301      	movs	r3, #1
 8009496:	60fb      	str	r3, [r7, #12]
 8009498:	e001      	b.n	800949e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800949a:	2300      	movs	r3, #0
 800949c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800949e:	f001 fcc9 	bl	800ae34 <vPortExitCritical>

	return xReturn;
 80094a2:	68fb      	ldr	r3, [r7, #12]
}
 80094a4:	4618      	mov	r0, r3
 80094a6:	3710      	adds	r7, #16
 80094a8:	46bd      	mov	sp, r7
 80094aa:	bd80      	pop	{r7, pc}

080094ac <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b084      	sub	sp, #16
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80094b4:	f001 fc8e 	bl	800add4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d102      	bne.n	80094ca <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80094c4:	2301      	movs	r3, #1
 80094c6:	60fb      	str	r3, [r7, #12]
 80094c8:	e001      	b.n	80094ce <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80094ca:	2300      	movs	r3, #0
 80094cc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80094ce:	f001 fcb1 	bl	800ae34 <vPortExitCritical>

	return xReturn;
 80094d2:	68fb      	ldr	r3, [r7, #12]
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80094e6:	2300      	movs	r3, #0
 80094e8:	60fb      	str	r3, [r7, #12]
 80094ea:	e014      	b.n	8009516 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80094ec:	4a0f      	ldr	r2, [pc, #60]	; (800952c <vQueueAddToRegistry+0x50>)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10b      	bne.n	8009510 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80094f8:	490c      	ldr	r1, [pc, #48]	; (800952c <vQueueAddToRegistry+0x50>)
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	683a      	ldr	r2, [r7, #0]
 80094fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009502:	4a0a      	ldr	r2, [pc, #40]	; (800952c <vQueueAddToRegistry+0x50>)
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	00db      	lsls	r3, r3, #3
 8009508:	4413      	add	r3, r2
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800950e:	e006      	b.n	800951e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	3301      	adds	r3, #1
 8009514:	60fb      	str	r3, [r7, #12]
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	2b07      	cmp	r3, #7
 800951a:	d9e7      	bls.n	80094ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800951c:	bf00      	nop
 800951e:	bf00      	nop
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	20002038 	.word	0x20002038

08009530 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009530:	b580      	push	{r7, lr}
 8009532:	b086      	sub	sp, #24
 8009534:	af00      	add	r7, sp, #0
 8009536:	60f8      	str	r0, [r7, #12]
 8009538:	60b9      	str	r1, [r7, #8]
 800953a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009540:	f001 fc48 	bl	800add4 <vPortEnterCritical>
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800954a:	b25b      	sxtb	r3, r3
 800954c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009550:	d103      	bne.n	800955a <vQueueWaitForMessageRestricted+0x2a>
 8009552:	697b      	ldr	r3, [r7, #20]
 8009554:	2200      	movs	r2, #0
 8009556:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009560:	b25b      	sxtb	r3, r3
 8009562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009566:	d103      	bne.n	8009570 <vQueueWaitForMessageRestricted+0x40>
 8009568:	697b      	ldr	r3, [r7, #20]
 800956a:	2200      	movs	r2, #0
 800956c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009570:	f001 fc60 	bl	800ae34 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009574:	697b      	ldr	r3, [r7, #20]
 8009576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009578:	2b00      	cmp	r3, #0
 800957a:	d106      	bne.n	800958a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	3324      	adds	r3, #36	; 0x24
 8009580:	687a      	ldr	r2, [r7, #4]
 8009582:	68b9      	ldr	r1, [r7, #8]
 8009584:	4618      	mov	r0, r3
 8009586:	f000 fcdf 	bl	8009f48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800958a:	6978      	ldr	r0, [r7, #20]
 800958c:	f7ff ff26 	bl	80093dc <prvUnlockQueue>
	}
 8009590:	bf00      	nop
 8009592:	3718      	adds	r7, #24
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8009598:	b580      	push	{r7, lr}
 800959a:	b08e      	sub	sp, #56	; 0x38
 800959c:	af04      	add	r7, sp, #16
 800959e:	60f8      	str	r0, [r7, #12]
 80095a0:	60b9      	str	r1, [r7, #8]
 80095a2:	607a      	str	r2, [r7, #4]
 80095a4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80095a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d10a      	bne.n	80095c2 <xTaskCreateStatic+0x2a>
	__asm volatile
 80095ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b0:	f383 8811 	msr	BASEPRI, r3
 80095b4:	f3bf 8f6f 	isb	sy
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	623b      	str	r3, [r7, #32]
}
 80095be:	bf00      	nop
 80095c0:	e7fe      	b.n	80095c0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80095c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d10a      	bne.n	80095de <xTaskCreateStatic+0x46>
	__asm volatile
 80095c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095cc:	f383 8811 	msr	BASEPRI, r3
 80095d0:	f3bf 8f6f 	isb	sy
 80095d4:	f3bf 8f4f 	dsb	sy
 80095d8:	61fb      	str	r3, [r7, #28]
}
 80095da:	bf00      	nop
 80095dc:	e7fe      	b.n	80095dc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80095de:	23bc      	movs	r3, #188	; 0xbc
 80095e0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	2bbc      	cmp	r3, #188	; 0xbc
 80095e6:	d00a      	beq.n	80095fe <xTaskCreateStatic+0x66>
	__asm volatile
 80095e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	61bb      	str	r3, [r7, #24]
}
 80095fa:	bf00      	nop
 80095fc:	e7fe      	b.n	80095fc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80095fe:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009602:	2b00      	cmp	r3, #0
 8009604:	d01e      	beq.n	8009644 <xTaskCreateStatic+0xac>
 8009606:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009608:	2b00      	cmp	r3, #0
 800960a:	d01b      	beq.n	8009644 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800960c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800960e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009614:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009618:	2202      	movs	r2, #2
 800961a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800961e:	2300      	movs	r3, #0
 8009620:	9303      	str	r3, [sp, #12]
 8009622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009624:	9302      	str	r3, [sp, #8]
 8009626:	f107 0314 	add.w	r3, r7, #20
 800962a:	9301      	str	r3, [sp, #4]
 800962c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800962e:	9300      	str	r3, [sp, #0]
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	68b9      	ldr	r1, [r7, #8]
 8009636:	68f8      	ldr	r0, [r7, #12]
 8009638:	f000 f850 	bl	80096dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800963c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800963e:	f000 f8f3 	bl	8009828 <prvAddNewTaskToReadyList>
 8009642:	e001      	b.n	8009648 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009644:	2300      	movs	r3, #0
 8009646:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009648:	697b      	ldr	r3, [r7, #20]
	}
 800964a:	4618      	mov	r0, r3
 800964c:	3728      	adds	r7, #40	; 0x28
 800964e:	46bd      	mov	sp, r7
 8009650:	bd80      	pop	{r7, pc}

08009652 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009652:	b580      	push	{r7, lr}
 8009654:	b08c      	sub	sp, #48	; 0x30
 8009656:	af04      	add	r7, sp, #16
 8009658:	60f8      	str	r0, [r7, #12]
 800965a:	60b9      	str	r1, [r7, #8]
 800965c:	603b      	str	r3, [r7, #0]
 800965e:	4613      	mov	r3, r2
 8009660:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009662:	88fb      	ldrh	r3, [r7, #6]
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4618      	mov	r0, r3
 8009668:	f001 fcd6 	bl	800b018 <pvPortMalloc>
 800966c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800966e:	697b      	ldr	r3, [r7, #20]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d00e      	beq.n	8009692 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009674:	20bc      	movs	r0, #188	; 0xbc
 8009676:	f001 fccf 	bl	800b018 <pvPortMalloc>
 800967a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d003      	beq.n	800968a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009682:	69fb      	ldr	r3, [r7, #28]
 8009684:	697a      	ldr	r2, [r7, #20]
 8009686:	631a      	str	r2, [r3, #48]	; 0x30
 8009688:	e005      	b.n	8009696 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800968a:	6978      	ldr	r0, [r7, #20]
 800968c:	f001 fd90 	bl	800b1b0 <vPortFree>
 8009690:	e001      	b.n	8009696 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009692:	2300      	movs	r3, #0
 8009694:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d017      	beq.n	80096cc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	2200      	movs	r2, #0
 80096a0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80096a4:	88fa      	ldrh	r2, [r7, #6]
 80096a6:	2300      	movs	r3, #0
 80096a8:	9303      	str	r3, [sp, #12]
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	9302      	str	r3, [sp, #8]
 80096ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096b0:	9301      	str	r3, [sp, #4]
 80096b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096b4:	9300      	str	r3, [sp, #0]
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	68b9      	ldr	r1, [r7, #8]
 80096ba:	68f8      	ldr	r0, [r7, #12]
 80096bc:	f000 f80e 	bl	80096dc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80096c0:	69f8      	ldr	r0, [r7, #28]
 80096c2:	f000 f8b1 	bl	8009828 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80096c6:	2301      	movs	r3, #1
 80096c8:	61bb      	str	r3, [r7, #24]
 80096ca:	e002      	b.n	80096d2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80096cc:	f04f 33ff 	mov.w	r3, #4294967295
 80096d0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80096d2:	69bb      	ldr	r3, [r7, #24]
	}
 80096d4:	4618      	mov	r0, r3
 80096d6:	3720      	adds	r7, #32
 80096d8:	46bd      	mov	sp, r7
 80096da:	bd80      	pop	{r7, pc}

080096dc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b088      	sub	sp, #32
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	60f8      	str	r0, [r7, #12]
 80096e4:	60b9      	str	r1, [r7, #8]
 80096e6:	607a      	str	r2, [r7, #4]
 80096e8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80096ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096ec:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	461a      	mov	r2, r3
 80096f4:	21a5      	movs	r1, #165	; 0xa5
 80096f6:	f001 feb3 	bl	800b460 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80096fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009704:	3b01      	subs	r3, #1
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	4413      	add	r3, r2
 800970a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800970c:	69bb      	ldr	r3, [r7, #24]
 800970e:	f023 0307 	bic.w	r3, r3, #7
 8009712:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009714:	69bb      	ldr	r3, [r7, #24]
 8009716:	f003 0307 	and.w	r3, r3, #7
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00a      	beq.n	8009734 <prvInitialiseNewTask+0x58>
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	617b      	str	r3, [r7, #20]
}
 8009730:	bf00      	nop
 8009732:	e7fe      	b.n	8009732 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	2b00      	cmp	r3, #0
 8009738:	d01f      	beq.n	800977a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800973a:	2300      	movs	r3, #0
 800973c:	61fb      	str	r3, [r7, #28]
 800973e:	e012      	b.n	8009766 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009740:	68ba      	ldr	r2, [r7, #8]
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	4413      	add	r3, r2
 8009746:	7819      	ldrb	r1, [r3, #0]
 8009748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	4413      	add	r3, r2
 800974e:	3334      	adds	r3, #52	; 0x34
 8009750:	460a      	mov	r2, r1
 8009752:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	4413      	add	r3, r2
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d006      	beq.n	800976e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009760:	69fb      	ldr	r3, [r7, #28]
 8009762:	3301      	adds	r3, #1
 8009764:	61fb      	str	r3, [r7, #28]
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	2b0f      	cmp	r3, #15
 800976a:	d9e9      	bls.n	8009740 <prvInitialiseNewTask+0x64>
 800976c:	e000      	b.n	8009770 <prvInitialiseNewTask+0x94>
			{
				break;
 800976e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009772:	2200      	movs	r2, #0
 8009774:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009778:	e003      	b.n	8009782 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800977a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800977c:	2200      	movs	r2, #0
 800977e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009784:	2b37      	cmp	r3, #55	; 0x37
 8009786:	d901      	bls.n	800978c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009788:	2337      	movs	r3, #55	; 0x37
 800978a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800978c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800978e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009790:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009794:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009796:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800979a:	2200      	movs	r2, #0
 800979c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800979e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a0:	3304      	adds	r3, #4
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7ff f978 	bl	8008a98 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80097a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097aa:	3318      	adds	r3, #24
 80097ac:	4618      	mov	r0, r3
 80097ae:	f7ff f973 	bl	8008a98 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80097b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097b6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ba:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80097be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80097c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80097c6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80097c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ca:	2200      	movs	r2, #0
 80097cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80097d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d2:	2200      	movs	r2, #0
 80097d4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80097d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097da:	3354      	adds	r3, #84	; 0x54
 80097dc:	2260      	movs	r2, #96	; 0x60
 80097de:	2100      	movs	r1, #0
 80097e0:	4618      	mov	r0, r3
 80097e2:	f001 fe3d 	bl	800b460 <memset>
 80097e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e8:	4a0c      	ldr	r2, [pc, #48]	; (800981c <prvInitialiseNewTask+0x140>)
 80097ea:	659a      	str	r2, [r3, #88]	; 0x58
 80097ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097ee:	4a0c      	ldr	r2, [pc, #48]	; (8009820 <prvInitialiseNewTask+0x144>)
 80097f0:	65da      	str	r2, [r3, #92]	; 0x5c
 80097f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097f4:	4a0b      	ldr	r2, [pc, #44]	; (8009824 <prvInitialiseNewTask+0x148>)
 80097f6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80097f8:	683a      	ldr	r2, [r7, #0]
 80097fa:	68f9      	ldr	r1, [r7, #12]
 80097fc:	69b8      	ldr	r0, [r7, #24]
 80097fe:	f001 f9bf 	bl	800ab80 <pxPortInitialiseStack>
 8009802:	4602      	mov	r2, r0
 8009804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009806:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800980a:	2b00      	cmp	r3, #0
 800980c:	d002      	beq.n	8009814 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800980e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009812:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009814:	bf00      	nop
 8009816:	3720      	adds	r7, #32
 8009818:	46bd      	mov	sp, r7
 800981a:	bd80      	pop	{r7, pc}
 800981c:	0800c8bc 	.word	0x0800c8bc
 8009820:	0800c8dc 	.word	0x0800c8dc
 8009824:	0800c89c 	.word	0x0800c89c

08009828 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009830:	f001 fad0 	bl	800add4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009834:	4b2d      	ldr	r3, [pc, #180]	; (80098ec <prvAddNewTaskToReadyList+0xc4>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	3301      	adds	r3, #1
 800983a:	4a2c      	ldr	r2, [pc, #176]	; (80098ec <prvAddNewTaskToReadyList+0xc4>)
 800983c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800983e:	4b2c      	ldr	r3, [pc, #176]	; (80098f0 <prvAddNewTaskToReadyList+0xc8>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d109      	bne.n	800985a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009846:	4a2a      	ldr	r2, [pc, #168]	; (80098f0 <prvAddNewTaskToReadyList+0xc8>)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800984c:	4b27      	ldr	r3, [pc, #156]	; (80098ec <prvAddNewTaskToReadyList+0xc4>)
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	2b01      	cmp	r3, #1
 8009852:	d110      	bne.n	8009876 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009854:	f000 fca4 	bl	800a1a0 <prvInitialiseTaskLists>
 8009858:	e00d      	b.n	8009876 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800985a:	4b26      	ldr	r3, [pc, #152]	; (80098f4 <prvAddNewTaskToReadyList+0xcc>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d109      	bne.n	8009876 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009862:	4b23      	ldr	r3, [pc, #140]	; (80098f0 <prvAddNewTaskToReadyList+0xc8>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800986c:	429a      	cmp	r2, r3
 800986e:	d802      	bhi.n	8009876 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009870:	4a1f      	ldr	r2, [pc, #124]	; (80098f0 <prvAddNewTaskToReadyList+0xc8>)
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009876:	4b20      	ldr	r3, [pc, #128]	; (80098f8 <prvAddNewTaskToReadyList+0xd0>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	3301      	adds	r3, #1
 800987c:	4a1e      	ldr	r2, [pc, #120]	; (80098f8 <prvAddNewTaskToReadyList+0xd0>)
 800987e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009880:	4b1d      	ldr	r3, [pc, #116]	; (80098f8 <prvAddNewTaskToReadyList+0xd0>)
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800988c:	4b1b      	ldr	r3, [pc, #108]	; (80098fc <prvAddNewTaskToReadyList+0xd4>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	429a      	cmp	r2, r3
 8009892:	d903      	bls.n	800989c <prvAddNewTaskToReadyList+0x74>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009898:	4a18      	ldr	r2, [pc, #96]	; (80098fc <prvAddNewTaskToReadyList+0xd4>)
 800989a:	6013      	str	r3, [r2, #0]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098a0:	4613      	mov	r3, r2
 80098a2:	009b      	lsls	r3, r3, #2
 80098a4:	4413      	add	r3, r2
 80098a6:	009b      	lsls	r3, r3, #2
 80098a8:	4a15      	ldr	r2, [pc, #84]	; (8009900 <prvAddNewTaskToReadyList+0xd8>)
 80098aa:	441a      	add	r2, r3
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	3304      	adds	r3, #4
 80098b0:	4619      	mov	r1, r3
 80098b2:	4610      	mov	r0, r2
 80098b4:	f7ff f8fd 	bl	8008ab2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80098b8:	f001 fabc 	bl	800ae34 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80098bc:	4b0d      	ldr	r3, [pc, #52]	; (80098f4 <prvAddNewTaskToReadyList+0xcc>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00e      	beq.n	80098e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80098c4:	4b0a      	ldr	r3, [pc, #40]	; (80098f0 <prvAddNewTaskToReadyList+0xc8>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d207      	bcs.n	80098e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80098d2:	4b0c      	ldr	r3, [pc, #48]	; (8009904 <prvAddNewTaskToReadyList+0xdc>)
 80098d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098d8:	601a      	str	r2, [r3, #0]
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80098e2:	bf00      	nop
 80098e4:	3708      	adds	r7, #8
 80098e6:	46bd      	mov	sp, r7
 80098e8:	bd80      	pop	{r7, pc}
 80098ea:	bf00      	nop
 80098ec:	20000cf8 	.word	0x20000cf8
 80098f0:	20000824 	.word	0x20000824
 80098f4:	20000d04 	.word	0x20000d04
 80098f8:	20000d14 	.word	0x20000d14
 80098fc:	20000d00 	.word	0x20000d00
 8009900:	20000828 	.word	0x20000828
 8009904:	e000ed04 	.word	0xe000ed04

08009908 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8009908:	b580      	push	{r7, lr}
 800990a:	b08a      	sub	sp, #40	; 0x28
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8009912:	2300      	movs	r3, #0
 8009914:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d10a      	bne.n	8009932 <vTaskDelayUntil+0x2a>
	__asm volatile
 800991c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009920:	f383 8811 	msr	BASEPRI, r3
 8009924:	f3bf 8f6f 	isb	sy
 8009928:	f3bf 8f4f 	dsb	sy
 800992c:	617b      	str	r3, [r7, #20]
}
 800992e:	bf00      	nop
 8009930:	e7fe      	b.n	8009930 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	2b00      	cmp	r3, #0
 8009936:	d10a      	bne.n	800994e <vTaskDelayUntil+0x46>
	__asm volatile
 8009938:	f04f 0350 	mov.w	r3, #80	; 0x50
 800993c:	f383 8811 	msr	BASEPRI, r3
 8009940:	f3bf 8f6f 	isb	sy
 8009944:	f3bf 8f4f 	dsb	sy
 8009948:	613b      	str	r3, [r7, #16]
}
 800994a:	bf00      	nop
 800994c:	e7fe      	b.n	800994c <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800994e:	4b2a      	ldr	r3, [pc, #168]	; (80099f8 <vTaskDelayUntil+0xf0>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00a      	beq.n	800996c <vTaskDelayUntil+0x64>
	__asm volatile
 8009956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800995a:	f383 8811 	msr	BASEPRI, r3
 800995e:	f3bf 8f6f 	isb	sy
 8009962:	f3bf 8f4f 	dsb	sy
 8009966:	60fb      	str	r3, [r7, #12]
}
 8009968:	bf00      	nop
 800996a:	e7fe      	b.n	800996a <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800996c:	f000 f8ee 	bl	8009b4c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8009970:	4b22      	ldr	r3, [pc, #136]	; (80099fc <vTaskDelayUntil+0xf4>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	683a      	ldr	r2, [r7, #0]
 800997c:	4413      	add	r3, r2
 800997e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	6a3a      	ldr	r2, [r7, #32]
 8009986:	429a      	cmp	r2, r3
 8009988:	d20b      	bcs.n	80099a2 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	69fa      	ldr	r2, [r7, #28]
 8009990:	429a      	cmp	r2, r3
 8009992:	d211      	bcs.n	80099b8 <vTaskDelayUntil+0xb0>
 8009994:	69fa      	ldr	r2, [r7, #28]
 8009996:	6a3b      	ldr	r3, [r7, #32]
 8009998:	429a      	cmp	r2, r3
 800999a:	d90d      	bls.n	80099b8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800999c:	2301      	movs	r3, #1
 800999e:	627b      	str	r3, [r7, #36]	; 0x24
 80099a0:	e00a      	b.n	80099b8 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	69fa      	ldr	r2, [r7, #28]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d303      	bcc.n	80099b4 <vTaskDelayUntil+0xac>
 80099ac:	69fa      	ldr	r2, [r7, #28]
 80099ae:	6a3b      	ldr	r3, [r7, #32]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d901      	bls.n	80099b8 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 80099b4:	2301      	movs	r3, #1
 80099b6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	69fa      	ldr	r2, [r7, #28]
 80099bc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80099be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d006      	beq.n	80099d2 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80099c4:	69fa      	ldr	r2, [r7, #28]
 80099c6:	6a3b      	ldr	r3, [r7, #32]
 80099c8:	1ad3      	subs	r3, r2, r3
 80099ca:	2100      	movs	r1, #0
 80099cc:	4618      	mov	r0, r3
 80099ce:	f000 fd35 	bl	800a43c <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80099d2:	f000 f8c9 	bl	8009b68 <xTaskResumeAll>
 80099d6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d107      	bne.n	80099ee <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80099de:	4b08      	ldr	r3, [pc, #32]	; (8009a00 <vTaskDelayUntil+0xf8>)
 80099e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099e4:	601a      	str	r2, [r3, #0]
 80099e6:	f3bf 8f4f 	dsb	sy
 80099ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80099ee:	bf00      	nop
 80099f0:	3728      	adds	r7, #40	; 0x28
 80099f2:	46bd      	mov	sp, r7
 80099f4:	bd80      	pop	{r7, pc}
 80099f6:	bf00      	nop
 80099f8:	20000d20 	.word	0x20000d20
 80099fc:	20000cfc 	.word	0x20000cfc
 8009a00:	e000ed04 	.word	0xe000ed04

08009a04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b084      	sub	sp, #16
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009a0c:	2300      	movs	r3, #0
 8009a0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d017      	beq.n	8009a46 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009a16:	4b13      	ldr	r3, [pc, #76]	; (8009a64 <vTaskDelay+0x60>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d00a      	beq.n	8009a34 <vTaskDelay+0x30>
	__asm volatile
 8009a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	60bb      	str	r3, [r7, #8]
}
 8009a30:	bf00      	nop
 8009a32:	e7fe      	b.n	8009a32 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009a34:	f000 f88a 	bl	8009b4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009a38:	2100      	movs	r1, #0
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 fcfe 	bl	800a43c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009a40:	f000 f892 	bl	8009b68 <xTaskResumeAll>
 8009a44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d107      	bne.n	8009a5c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009a4c:	4b06      	ldr	r3, [pc, #24]	; (8009a68 <vTaskDelay+0x64>)
 8009a4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	f3bf 8f4f 	dsb	sy
 8009a58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009a5c:	bf00      	nop
 8009a5e:	3710      	adds	r7, #16
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	20000d20 	.word	0x20000d20
 8009a68:	e000ed04 	.word	0xe000ed04

08009a6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b08a      	sub	sp, #40	; 0x28
 8009a70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009a72:	2300      	movs	r3, #0
 8009a74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009a76:	2300      	movs	r3, #0
 8009a78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009a7a:	463a      	mov	r2, r7
 8009a7c:	1d39      	adds	r1, r7, #4
 8009a7e:	f107 0308 	add.w	r3, r7, #8
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fe ffb4 	bl	80089f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009a88:	6839      	ldr	r1, [r7, #0]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	68ba      	ldr	r2, [r7, #8]
 8009a8e:	9202      	str	r2, [sp, #8]
 8009a90:	9301      	str	r3, [sp, #4]
 8009a92:	2300      	movs	r3, #0
 8009a94:	9300      	str	r3, [sp, #0]
 8009a96:	2300      	movs	r3, #0
 8009a98:	460a      	mov	r2, r1
 8009a9a:	4924      	ldr	r1, [pc, #144]	; (8009b2c <vTaskStartScheduler+0xc0>)
 8009a9c:	4824      	ldr	r0, [pc, #144]	; (8009b30 <vTaskStartScheduler+0xc4>)
 8009a9e:	f7ff fd7b 	bl	8009598 <xTaskCreateStatic>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	4a23      	ldr	r2, [pc, #140]	; (8009b34 <vTaskStartScheduler+0xc8>)
 8009aa6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009aa8:	4b22      	ldr	r3, [pc, #136]	; (8009b34 <vTaskStartScheduler+0xc8>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d002      	beq.n	8009ab6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	617b      	str	r3, [r7, #20]
 8009ab4:	e001      	b.n	8009aba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009ab6:	2300      	movs	r3, #0
 8009ab8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	2b01      	cmp	r3, #1
 8009abe:	d102      	bne.n	8009ac6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009ac0:	f000 fd10 	bl	800a4e4 <xTimerCreateTimerTask>
 8009ac4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009ac6:	697b      	ldr	r3, [r7, #20]
 8009ac8:	2b01      	cmp	r3, #1
 8009aca:	d11b      	bne.n	8009b04 <vTaskStartScheduler+0x98>
	__asm volatile
 8009acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ad0:	f383 8811 	msr	BASEPRI, r3
 8009ad4:	f3bf 8f6f 	isb	sy
 8009ad8:	f3bf 8f4f 	dsb	sy
 8009adc:	613b      	str	r3, [r7, #16]
}
 8009ade:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ae0:	4b15      	ldr	r3, [pc, #84]	; (8009b38 <vTaskStartScheduler+0xcc>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	3354      	adds	r3, #84	; 0x54
 8009ae6:	4a15      	ldr	r2, [pc, #84]	; (8009b3c <vTaskStartScheduler+0xd0>)
 8009ae8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009aea:	4b15      	ldr	r3, [pc, #84]	; (8009b40 <vTaskStartScheduler+0xd4>)
 8009aec:	f04f 32ff 	mov.w	r2, #4294967295
 8009af0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009af2:	4b14      	ldr	r3, [pc, #80]	; (8009b44 <vTaskStartScheduler+0xd8>)
 8009af4:	2201      	movs	r2, #1
 8009af6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009af8:	4b13      	ldr	r3, [pc, #76]	; (8009b48 <vTaskStartScheduler+0xdc>)
 8009afa:	2200      	movs	r2, #0
 8009afc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009afe:	f001 f8c7 	bl	800ac90 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009b02:	e00e      	b.n	8009b22 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b0a:	d10a      	bne.n	8009b22 <vTaskStartScheduler+0xb6>
	__asm volatile
 8009b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b10:	f383 8811 	msr	BASEPRI, r3
 8009b14:	f3bf 8f6f 	isb	sy
 8009b18:	f3bf 8f4f 	dsb	sy
 8009b1c:	60fb      	str	r3, [r7, #12]
}
 8009b1e:	bf00      	nop
 8009b20:	e7fe      	b.n	8009b20 <vTaskStartScheduler+0xb4>
}
 8009b22:	bf00      	nop
 8009b24:	3718      	adds	r7, #24
 8009b26:	46bd      	mov	sp, r7
 8009b28:	bd80      	pop	{r7, pc}
 8009b2a:	bf00      	nop
 8009b2c:	0800c7c4 	.word	0x0800c7c4
 8009b30:	0800a171 	.word	0x0800a171
 8009b34:	20000d1c 	.word	0x20000d1c
 8009b38:	20000824 	.word	0x20000824
 8009b3c:	20000020 	.word	0x20000020
 8009b40:	20000d18 	.word	0x20000d18
 8009b44:	20000d04 	.word	0x20000d04
 8009b48:	20000cfc 	.word	0x20000cfc

08009b4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009b50:	4b04      	ldr	r3, [pc, #16]	; (8009b64 <vTaskSuspendAll+0x18>)
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	3301      	adds	r3, #1
 8009b56:	4a03      	ldr	r2, [pc, #12]	; (8009b64 <vTaskSuspendAll+0x18>)
 8009b58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009b5a:	bf00      	nop
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr
 8009b64:	20000d20 	.word	0x20000d20

08009b68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009b72:	2300      	movs	r3, #0
 8009b74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009b76:	4b42      	ldr	r3, [pc, #264]	; (8009c80 <xTaskResumeAll+0x118>)
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	2b00      	cmp	r3, #0
 8009b7c:	d10a      	bne.n	8009b94 <xTaskResumeAll+0x2c>
	__asm volatile
 8009b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b82:	f383 8811 	msr	BASEPRI, r3
 8009b86:	f3bf 8f6f 	isb	sy
 8009b8a:	f3bf 8f4f 	dsb	sy
 8009b8e:	603b      	str	r3, [r7, #0]
}
 8009b90:	bf00      	nop
 8009b92:	e7fe      	b.n	8009b92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009b94:	f001 f91e 	bl	800add4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009b98:	4b39      	ldr	r3, [pc, #228]	; (8009c80 <xTaskResumeAll+0x118>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	3b01      	subs	r3, #1
 8009b9e:	4a38      	ldr	r2, [pc, #224]	; (8009c80 <xTaskResumeAll+0x118>)
 8009ba0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009ba2:	4b37      	ldr	r3, [pc, #220]	; (8009c80 <xTaskResumeAll+0x118>)
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d162      	bne.n	8009c70 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009baa:	4b36      	ldr	r3, [pc, #216]	; (8009c84 <xTaskResumeAll+0x11c>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d05e      	beq.n	8009c70 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009bb2:	e02f      	b.n	8009c14 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009bb4:	4b34      	ldr	r3, [pc, #208]	; (8009c88 <xTaskResumeAll+0x120>)
 8009bb6:	68db      	ldr	r3, [r3, #12]
 8009bb8:	68db      	ldr	r3, [r3, #12]
 8009bba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	3318      	adds	r3, #24
 8009bc0:	4618      	mov	r0, r3
 8009bc2:	f7fe ffd3 	bl	8008b6c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	3304      	adds	r3, #4
 8009bca:	4618      	mov	r0, r3
 8009bcc:	f7fe ffce 	bl	8008b6c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009bd4:	4b2d      	ldr	r3, [pc, #180]	; (8009c8c <xTaskResumeAll+0x124>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	d903      	bls.n	8009be4 <xTaskResumeAll+0x7c>
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be0:	4a2a      	ldr	r2, [pc, #168]	; (8009c8c <xTaskResumeAll+0x124>)
 8009be2:	6013      	str	r3, [r2, #0]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009be8:	4613      	mov	r3, r2
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	009b      	lsls	r3, r3, #2
 8009bf0:	4a27      	ldr	r2, [pc, #156]	; (8009c90 <xTaskResumeAll+0x128>)
 8009bf2:	441a      	add	r2, r3
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	3304      	adds	r3, #4
 8009bf8:	4619      	mov	r1, r3
 8009bfa:	4610      	mov	r0, r2
 8009bfc:	f7fe ff59 	bl	8008ab2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c04:	4b23      	ldr	r3, [pc, #140]	; (8009c94 <xTaskResumeAll+0x12c>)
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	d302      	bcc.n	8009c14 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009c0e:	4b22      	ldr	r3, [pc, #136]	; (8009c98 <xTaskResumeAll+0x130>)
 8009c10:	2201      	movs	r2, #1
 8009c12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009c14:	4b1c      	ldr	r3, [pc, #112]	; (8009c88 <xTaskResumeAll+0x120>)
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d1cb      	bne.n	8009bb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d001      	beq.n	8009c26 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009c22:	f000 fb5f 	bl	800a2e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009c26:	4b1d      	ldr	r3, [pc, #116]	; (8009c9c <xTaskResumeAll+0x134>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d010      	beq.n	8009c54 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009c32:	f000 f847 	bl	8009cc4 <xTaskIncrementTick>
 8009c36:	4603      	mov	r3, r0
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d002      	beq.n	8009c42 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009c3c:	4b16      	ldr	r3, [pc, #88]	; (8009c98 <xTaskResumeAll+0x130>)
 8009c3e:	2201      	movs	r2, #1
 8009c40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	3b01      	subs	r3, #1
 8009c46:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d1f1      	bne.n	8009c32 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009c4e:	4b13      	ldr	r3, [pc, #76]	; (8009c9c <xTaskResumeAll+0x134>)
 8009c50:	2200      	movs	r2, #0
 8009c52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009c54:	4b10      	ldr	r3, [pc, #64]	; (8009c98 <xTaskResumeAll+0x130>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d009      	beq.n	8009c70 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009c60:	4b0f      	ldr	r3, [pc, #60]	; (8009ca0 <xTaskResumeAll+0x138>)
 8009c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c66:	601a      	str	r2, [r3, #0]
 8009c68:	f3bf 8f4f 	dsb	sy
 8009c6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009c70:	f001 f8e0 	bl	800ae34 <vPortExitCritical>

	return xAlreadyYielded;
 8009c74:	68bb      	ldr	r3, [r7, #8]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	20000d20 	.word	0x20000d20
 8009c84:	20000cf8 	.word	0x20000cf8
 8009c88:	20000cb8 	.word	0x20000cb8
 8009c8c:	20000d00 	.word	0x20000d00
 8009c90:	20000828 	.word	0x20000828
 8009c94:	20000824 	.word	0x20000824
 8009c98:	20000d0c 	.word	0x20000d0c
 8009c9c:	20000d08 	.word	0x20000d08
 8009ca0:	e000ed04 	.word	0xe000ed04

08009ca4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b083      	sub	sp, #12
 8009ca8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009caa:	4b05      	ldr	r3, [pc, #20]	; (8009cc0 <xTaskGetTickCount+0x1c>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009cb0:	687b      	ldr	r3, [r7, #4]
}
 8009cb2:	4618      	mov	r0, r3
 8009cb4:	370c      	adds	r7, #12
 8009cb6:	46bd      	mov	sp, r7
 8009cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cbc:	4770      	bx	lr
 8009cbe:	bf00      	nop
 8009cc0:	20000cfc 	.word	0x20000cfc

08009cc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b086      	sub	sp, #24
 8009cc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009cca:	2300      	movs	r3, #0
 8009ccc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cce:	4b4f      	ldr	r3, [pc, #316]	; (8009e0c <xTaskIncrementTick+0x148>)
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f040 808f 	bne.w	8009df6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009cd8:	4b4d      	ldr	r3, [pc, #308]	; (8009e10 <xTaskIncrementTick+0x14c>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009ce0:	4a4b      	ldr	r2, [pc, #300]	; (8009e10 <xTaskIncrementTick+0x14c>)
 8009ce2:	693b      	ldr	r3, [r7, #16]
 8009ce4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d120      	bne.n	8009d2e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009cec:	4b49      	ldr	r3, [pc, #292]	; (8009e14 <xTaskIncrementTick+0x150>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d00a      	beq.n	8009d0c <xTaskIncrementTick+0x48>
	__asm volatile
 8009cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cfa:	f383 8811 	msr	BASEPRI, r3
 8009cfe:	f3bf 8f6f 	isb	sy
 8009d02:	f3bf 8f4f 	dsb	sy
 8009d06:	603b      	str	r3, [r7, #0]
}
 8009d08:	bf00      	nop
 8009d0a:	e7fe      	b.n	8009d0a <xTaskIncrementTick+0x46>
 8009d0c:	4b41      	ldr	r3, [pc, #260]	; (8009e14 <xTaskIncrementTick+0x150>)
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	60fb      	str	r3, [r7, #12]
 8009d12:	4b41      	ldr	r3, [pc, #260]	; (8009e18 <xTaskIncrementTick+0x154>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a3f      	ldr	r2, [pc, #252]	; (8009e14 <xTaskIncrementTick+0x150>)
 8009d18:	6013      	str	r3, [r2, #0]
 8009d1a:	4a3f      	ldr	r2, [pc, #252]	; (8009e18 <xTaskIncrementTick+0x154>)
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6013      	str	r3, [r2, #0]
 8009d20:	4b3e      	ldr	r3, [pc, #248]	; (8009e1c <xTaskIncrementTick+0x158>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	3301      	adds	r3, #1
 8009d26:	4a3d      	ldr	r2, [pc, #244]	; (8009e1c <xTaskIncrementTick+0x158>)
 8009d28:	6013      	str	r3, [r2, #0]
 8009d2a:	f000 fadb 	bl	800a2e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009d2e:	4b3c      	ldr	r3, [pc, #240]	; (8009e20 <xTaskIncrementTick+0x15c>)
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	693a      	ldr	r2, [r7, #16]
 8009d34:	429a      	cmp	r2, r3
 8009d36:	d349      	bcc.n	8009dcc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009d38:	4b36      	ldr	r3, [pc, #216]	; (8009e14 <xTaskIncrementTick+0x150>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d104      	bne.n	8009d4c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009d42:	4b37      	ldr	r3, [pc, #220]	; (8009e20 <xTaskIncrementTick+0x15c>)
 8009d44:	f04f 32ff 	mov.w	r2, #4294967295
 8009d48:	601a      	str	r2, [r3, #0]
					break;
 8009d4a:	e03f      	b.n	8009dcc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d4c:	4b31      	ldr	r3, [pc, #196]	; (8009e14 <xTaskIncrementTick+0x150>)
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	68db      	ldr	r3, [r3, #12]
 8009d52:	68db      	ldr	r3, [r3, #12]
 8009d54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	685b      	ldr	r3, [r3, #4]
 8009d5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009d5c:	693a      	ldr	r2, [r7, #16]
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	429a      	cmp	r2, r3
 8009d62:	d203      	bcs.n	8009d6c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009d64:	4a2e      	ldr	r2, [pc, #184]	; (8009e20 <xTaskIncrementTick+0x15c>)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009d6a:	e02f      	b.n	8009dcc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	3304      	adds	r3, #4
 8009d70:	4618      	mov	r0, r3
 8009d72:	f7fe fefb 	bl	8008b6c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d004      	beq.n	8009d88 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	3318      	adds	r3, #24
 8009d82:	4618      	mov	r0, r3
 8009d84:	f7fe fef2 	bl	8008b6c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d8c:	4b25      	ldr	r3, [pc, #148]	; (8009e24 <xTaskIncrementTick+0x160>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	429a      	cmp	r2, r3
 8009d92:	d903      	bls.n	8009d9c <xTaskIncrementTick+0xd8>
 8009d94:	68bb      	ldr	r3, [r7, #8]
 8009d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d98:	4a22      	ldr	r2, [pc, #136]	; (8009e24 <xTaskIncrementTick+0x160>)
 8009d9a:	6013      	str	r3, [r2, #0]
 8009d9c:	68bb      	ldr	r3, [r7, #8]
 8009d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009da0:	4613      	mov	r3, r2
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	4413      	add	r3, r2
 8009da6:	009b      	lsls	r3, r3, #2
 8009da8:	4a1f      	ldr	r2, [pc, #124]	; (8009e28 <xTaskIncrementTick+0x164>)
 8009daa:	441a      	add	r2, r3
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	3304      	adds	r3, #4
 8009db0:	4619      	mov	r1, r3
 8009db2:	4610      	mov	r0, r2
 8009db4:	f7fe fe7d 	bl	8008ab2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dbc:	4b1b      	ldr	r3, [pc, #108]	; (8009e2c <xTaskIncrementTick+0x168>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc2:	429a      	cmp	r2, r3
 8009dc4:	d3b8      	bcc.n	8009d38 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009dc6:	2301      	movs	r3, #1
 8009dc8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009dca:	e7b5      	b.n	8009d38 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009dcc:	4b17      	ldr	r3, [pc, #92]	; (8009e2c <xTaskIncrementTick+0x168>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dd2:	4915      	ldr	r1, [pc, #84]	; (8009e28 <xTaskIncrementTick+0x164>)
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	009b      	lsls	r3, r3, #2
 8009dd8:	4413      	add	r3, r2
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	440b      	add	r3, r1
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d901      	bls.n	8009de8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009de4:	2301      	movs	r3, #1
 8009de6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009de8:	4b11      	ldr	r3, [pc, #68]	; (8009e30 <xTaskIncrementTick+0x16c>)
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d007      	beq.n	8009e00 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009df0:	2301      	movs	r3, #1
 8009df2:	617b      	str	r3, [r7, #20]
 8009df4:	e004      	b.n	8009e00 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009df6:	4b0f      	ldr	r3, [pc, #60]	; (8009e34 <xTaskIncrementTick+0x170>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	3301      	adds	r3, #1
 8009dfc:	4a0d      	ldr	r2, [pc, #52]	; (8009e34 <xTaskIncrementTick+0x170>)
 8009dfe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009e00:	697b      	ldr	r3, [r7, #20]
}
 8009e02:	4618      	mov	r0, r3
 8009e04:	3718      	adds	r7, #24
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bd80      	pop	{r7, pc}
 8009e0a:	bf00      	nop
 8009e0c:	20000d20 	.word	0x20000d20
 8009e10:	20000cfc 	.word	0x20000cfc
 8009e14:	20000cb0 	.word	0x20000cb0
 8009e18:	20000cb4 	.word	0x20000cb4
 8009e1c:	20000d10 	.word	0x20000d10
 8009e20:	20000d18 	.word	0x20000d18
 8009e24:	20000d00 	.word	0x20000d00
 8009e28:	20000828 	.word	0x20000828
 8009e2c:	20000824 	.word	0x20000824
 8009e30:	20000d0c 	.word	0x20000d0c
 8009e34:	20000d08 	.word	0x20000d08

08009e38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b085      	sub	sp, #20
 8009e3c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009e3e:	4b2a      	ldr	r3, [pc, #168]	; (8009ee8 <vTaskSwitchContext+0xb0>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d003      	beq.n	8009e4e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009e46:	4b29      	ldr	r3, [pc, #164]	; (8009eec <vTaskSwitchContext+0xb4>)
 8009e48:	2201      	movs	r2, #1
 8009e4a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009e4c:	e046      	b.n	8009edc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009e4e:	4b27      	ldr	r3, [pc, #156]	; (8009eec <vTaskSwitchContext+0xb4>)
 8009e50:	2200      	movs	r2, #0
 8009e52:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e54:	4b26      	ldr	r3, [pc, #152]	; (8009ef0 <vTaskSwitchContext+0xb8>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	60fb      	str	r3, [r7, #12]
 8009e5a:	e010      	b.n	8009e7e <vTaskSwitchContext+0x46>
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d10a      	bne.n	8009e78 <vTaskSwitchContext+0x40>
	__asm volatile
 8009e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e66:	f383 8811 	msr	BASEPRI, r3
 8009e6a:	f3bf 8f6f 	isb	sy
 8009e6e:	f3bf 8f4f 	dsb	sy
 8009e72:	607b      	str	r3, [r7, #4]
}
 8009e74:	bf00      	nop
 8009e76:	e7fe      	b.n	8009e76 <vTaskSwitchContext+0x3e>
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	60fb      	str	r3, [r7, #12]
 8009e7e:	491d      	ldr	r1, [pc, #116]	; (8009ef4 <vTaskSwitchContext+0xbc>)
 8009e80:	68fa      	ldr	r2, [r7, #12]
 8009e82:	4613      	mov	r3, r2
 8009e84:	009b      	lsls	r3, r3, #2
 8009e86:	4413      	add	r3, r2
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	440b      	add	r3, r1
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d0e4      	beq.n	8009e5c <vTaskSwitchContext+0x24>
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	4613      	mov	r3, r2
 8009e96:	009b      	lsls	r3, r3, #2
 8009e98:	4413      	add	r3, r2
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	4a15      	ldr	r2, [pc, #84]	; (8009ef4 <vTaskSwitchContext+0xbc>)
 8009e9e:	4413      	add	r3, r2
 8009ea0:	60bb      	str	r3, [r7, #8]
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	685a      	ldr	r2, [r3, #4]
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	605a      	str	r2, [r3, #4]
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	685a      	ldr	r2, [r3, #4]
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	3308      	adds	r3, #8
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d104      	bne.n	8009ec2 <vTaskSwitchContext+0x8a>
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	685b      	ldr	r3, [r3, #4]
 8009ebc:	685a      	ldr	r2, [r3, #4]
 8009ebe:	68bb      	ldr	r3, [r7, #8]
 8009ec0:	605a      	str	r2, [r3, #4]
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	4a0b      	ldr	r2, [pc, #44]	; (8009ef8 <vTaskSwitchContext+0xc0>)
 8009eca:	6013      	str	r3, [r2, #0]
 8009ecc:	4a08      	ldr	r2, [pc, #32]	; (8009ef0 <vTaskSwitchContext+0xb8>)
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009ed2:	4b09      	ldr	r3, [pc, #36]	; (8009ef8 <vTaskSwitchContext+0xc0>)
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	3354      	adds	r3, #84	; 0x54
 8009ed8:	4a08      	ldr	r2, [pc, #32]	; (8009efc <vTaskSwitchContext+0xc4>)
 8009eda:	6013      	str	r3, [r2, #0]
}
 8009edc:	bf00      	nop
 8009ede:	3714      	adds	r7, #20
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr
 8009ee8:	20000d20 	.word	0x20000d20
 8009eec:	20000d0c 	.word	0x20000d0c
 8009ef0:	20000d00 	.word	0x20000d00
 8009ef4:	20000828 	.word	0x20000828
 8009ef8:	20000824 	.word	0x20000824
 8009efc:	20000020 	.word	0x20000020

08009f00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d10a      	bne.n	8009f26 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8009f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f14:	f383 8811 	msr	BASEPRI, r3
 8009f18:	f3bf 8f6f 	isb	sy
 8009f1c:	f3bf 8f4f 	dsb	sy
 8009f20:	60fb      	str	r3, [r7, #12]
}
 8009f22:	bf00      	nop
 8009f24:	e7fe      	b.n	8009f24 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f26:	4b07      	ldr	r3, [pc, #28]	; (8009f44 <vTaskPlaceOnEventList+0x44>)
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	3318      	adds	r3, #24
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f7fe fde3 	bl	8008afa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009f34:	2101      	movs	r1, #1
 8009f36:	6838      	ldr	r0, [r7, #0]
 8009f38:	f000 fa80 	bl	800a43c <prvAddCurrentTaskToDelayedList>
}
 8009f3c:	bf00      	nop
 8009f3e:	3710      	adds	r7, #16
 8009f40:	46bd      	mov	sp, r7
 8009f42:	bd80      	pop	{r7, pc}
 8009f44:	20000824 	.word	0x20000824

08009f48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b086      	sub	sp, #24
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	60b9      	str	r1, [r7, #8]
 8009f52:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d10a      	bne.n	8009f70 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5e:	f383 8811 	msr	BASEPRI, r3
 8009f62:	f3bf 8f6f 	isb	sy
 8009f66:	f3bf 8f4f 	dsb	sy
 8009f6a:	617b      	str	r3, [r7, #20]
}
 8009f6c:	bf00      	nop
 8009f6e:	e7fe      	b.n	8009f6e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009f70:	4b0a      	ldr	r3, [pc, #40]	; (8009f9c <vTaskPlaceOnEventListRestricted+0x54>)
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	3318      	adds	r3, #24
 8009f76:	4619      	mov	r1, r3
 8009f78:	68f8      	ldr	r0, [r7, #12]
 8009f7a:	f7fe fd9a 	bl	8008ab2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d002      	beq.n	8009f8a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009f84:	f04f 33ff 	mov.w	r3, #4294967295
 8009f88:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009f8a:	6879      	ldr	r1, [r7, #4]
 8009f8c:	68b8      	ldr	r0, [r7, #8]
 8009f8e:	f000 fa55 	bl	800a43c <prvAddCurrentTaskToDelayedList>
	}
 8009f92:	bf00      	nop
 8009f94:	3718      	adds	r7, #24
 8009f96:	46bd      	mov	sp, r7
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	20000824 	.word	0x20000824

08009fa0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b086      	sub	sp, #24
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	68db      	ldr	r3, [r3, #12]
 8009fae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009fb0:	693b      	ldr	r3, [r7, #16]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d10a      	bne.n	8009fcc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8009fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fba:	f383 8811 	msr	BASEPRI, r3
 8009fbe:	f3bf 8f6f 	isb	sy
 8009fc2:	f3bf 8f4f 	dsb	sy
 8009fc6:	60fb      	str	r3, [r7, #12]
}
 8009fc8:	bf00      	nop
 8009fca:	e7fe      	b.n	8009fca <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	3318      	adds	r3, #24
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f7fe fdcb 	bl	8008b6c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009fd6:	4b1e      	ldr	r3, [pc, #120]	; (800a050 <xTaskRemoveFromEventList+0xb0>)
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d11d      	bne.n	800a01a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009fde:	693b      	ldr	r3, [r7, #16]
 8009fe0:	3304      	adds	r3, #4
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	f7fe fdc2 	bl	8008b6c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009fe8:	693b      	ldr	r3, [r7, #16]
 8009fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009fec:	4b19      	ldr	r3, [pc, #100]	; (800a054 <xTaskRemoveFromEventList+0xb4>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	429a      	cmp	r2, r3
 8009ff2:	d903      	bls.n	8009ffc <xTaskRemoveFromEventList+0x5c>
 8009ff4:	693b      	ldr	r3, [r7, #16]
 8009ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff8:	4a16      	ldr	r2, [pc, #88]	; (800a054 <xTaskRemoveFromEventList+0xb4>)
 8009ffa:	6013      	str	r3, [r2, #0]
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a000:	4613      	mov	r3, r2
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	4413      	add	r3, r2
 800a006:	009b      	lsls	r3, r3, #2
 800a008:	4a13      	ldr	r2, [pc, #76]	; (800a058 <xTaskRemoveFromEventList+0xb8>)
 800a00a:	441a      	add	r2, r3
 800a00c:	693b      	ldr	r3, [r7, #16]
 800a00e:	3304      	adds	r3, #4
 800a010:	4619      	mov	r1, r3
 800a012:	4610      	mov	r0, r2
 800a014:	f7fe fd4d 	bl	8008ab2 <vListInsertEnd>
 800a018:	e005      	b.n	800a026 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	3318      	adds	r3, #24
 800a01e:	4619      	mov	r1, r3
 800a020:	480e      	ldr	r0, [pc, #56]	; (800a05c <xTaskRemoveFromEventList+0xbc>)
 800a022:	f7fe fd46 	bl	8008ab2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a026:	693b      	ldr	r3, [r7, #16]
 800a028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a02a:	4b0d      	ldr	r3, [pc, #52]	; (800a060 <xTaskRemoveFromEventList+0xc0>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a030:	429a      	cmp	r2, r3
 800a032:	d905      	bls.n	800a040 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a034:	2301      	movs	r3, #1
 800a036:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a038:	4b0a      	ldr	r3, [pc, #40]	; (800a064 <xTaskRemoveFromEventList+0xc4>)
 800a03a:	2201      	movs	r2, #1
 800a03c:	601a      	str	r2, [r3, #0]
 800a03e:	e001      	b.n	800a044 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a040:	2300      	movs	r3, #0
 800a042:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a044:	697b      	ldr	r3, [r7, #20]
}
 800a046:	4618      	mov	r0, r3
 800a048:	3718      	adds	r7, #24
 800a04a:	46bd      	mov	sp, r7
 800a04c:	bd80      	pop	{r7, pc}
 800a04e:	bf00      	nop
 800a050:	20000d20 	.word	0x20000d20
 800a054:	20000d00 	.word	0x20000d00
 800a058:	20000828 	.word	0x20000828
 800a05c:	20000cb8 	.word	0x20000cb8
 800a060:	20000824 	.word	0x20000824
 800a064:	20000d0c 	.word	0x20000d0c

0800a068 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a070:	4b06      	ldr	r3, [pc, #24]	; (800a08c <vTaskInternalSetTimeOutState+0x24>)
 800a072:	681a      	ldr	r2, [r3, #0]
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a078:	4b05      	ldr	r3, [pc, #20]	; (800a090 <vTaskInternalSetTimeOutState+0x28>)
 800a07a:	681a      	ldr	r2, [r3, #0]
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	605a      	str	r2, [r3, #4]
}
 800a080:	bf00      	nop
 800a082:	370c      	adds	r7, #12
 800a084:	46bd      	mov	sp, r7
 800a086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08a:	4770      	bx	lr
 800a08c:	20000d10 	.word	0x20000d10
 800a090:	20000cfc 	.word	0x20000cfc

0800a094 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a094:	b580      	push	{r7, lr}
 800a096:	b088      	sub	sp, #32
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
 800a09c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d10a      	bne.n	800a0ba <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a8:	f383 8811 	msr	BASEPRI, r3
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	613b      	str	r3, [r7, #16]
}
 800a0b6:	bf00      	nop
 800a0b8:	e7fe      	b.n	800a0b8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d10a      	bne.n	800a0d6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a0c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0c4:	f383 8811 	msr	BASEPRI, r3
 800a0c8:	f3bf 8f6f 	isb	sy
 800a0cc:	f3bf 8f4f 	dsb	sy
 800a0d0:	60fb      	str	r3, [r7, #12]
}
 800a0d2:	bf00      	nop
 800a0d4:	e7fe      	b.n	800a0d4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a0d6:	f000 fe7d 	bl	800add4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a0da:	4b1d      	ldr	r3, [pc, #116]	; (800a150 <xTaskCheckForTimeOut+0xbc>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	69ba      	ldr	r2, [r7, #24]
 800a0e6:	1ad3      	subs	r3, r2, r3
 800a0e8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a0ea:	683b      	ldr	r3, [r7, #0]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0f2:	d102      	bne.n	800a0fa <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	61fb      	str	r3, [r7, #28]
 800a0f8:	e023      	b.n	800a142 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	4b15      	ldr	r3, [pc, #84]	; (800a154 <xTaskCheckForTimeOut+0xc0>)
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	429a      	cmp	r2, r3
 800a104:	d007      	beq.n	800a116 <xTaskCheckForTimeOut+0x82>
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	685b      	ldr	r3, [r3, #4]
 800a10a:	69ba      	ldr	r2, [r7, #24]
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d302      	bcc.n	800a116 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a110:	2301      	movs	r3, #1
 800a112:	61fb      	str	r3, [r7, #28]
 800a114:	e015      	b.n	800a142 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	697a      	ldr	r2, [r7, #20]
 800a11c:	429a      	cmp	r2, r3
 800a11e:	d20b      	bcs.n	800a138 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	1ad2      	subs	r2, r2, r3
 800a128:	683b      	ldr	r3, [r7, #0]
 800a12a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f7ff ff9b 	bl	800a068 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a132:	2300      	movs	r3, #0
 800a134:	61fb      	str	r3, [r7, #28]
 800a136:	e004      	b.n	800a142 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	2200      	movs	r2, #0
 800a13c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a13e:	2301      	movs	r3, #1
 800a140:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a142:	f000 fe77 	bl	800ae34 <vPortExitCritical>

	return xReturn;
 800a146:	69fb      	ldr	r3, [r7, #28]
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3720      	adds	r7, #32
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	20000cfc 	.word	0x20000cfc
 800a154:	20000d10 	.word	0x20000d10

0800a158 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a158:	b480      	push	{r7}
 800a15a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a15c:	4b03      	ldr	r3, [pc, #12]	; (800a16c <vTaskMissedYield+0x14>)
 800a15e:	2201      	movs	r2, #1
 800a160:	601a      	str	r2, [r3, #0]
}
 800a162:	bf00      	nop
 800a164:	46bd      	mov	sp, r7
 800a166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16a:	4770      	bx	lr
 800a16c:	20000d0c 	.word	0x20000d0c

0800a170 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b082      	sub	sp, #8
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a178:	f000 f852 	bl	800a220 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a17c:	4b06      	ldr	r3, [pc, #24]	; (800a198 <prvIdleTask+0x28>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	2b01      	cmp	r3, #1
 800a182:	d9f9      	bls.n	800a178 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a184:	4b05      	ldr	r3, [pc, #20]	; (800a19c <prvIdleTask+0x2c>)
 800a186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a18a:	601a      	str	r2, [r3, #0]
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a194:	e7f0      	b.n	800a178 <prvIdleTask+0x8>
 800a196:	bf00      	nop
 800a198:	20000828 	.word	0x20000828
 800a19c:	e000ed04 	.word	0xe000ed04

0800a1a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b082      	sub	sp, #8
 800a1a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	607b      	str	r3, [r7, #4]
 800a1aa:	e00c      	b.n	800a1c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	4613      	mov	r3, r2
 800a1b0:	009b      	lsls	r3, r3, #2
 800a1b2:	4413      	add	r3, r2
 800a1b4:	009b      	lsls	r3, r3, #2
 800a1b6:	4a12      	ldr	r2, [pc, #72]	; (800a200 <prvInitialiseTaskLists+0x60>)
 800a1b8:	4413      	add	r3, r2
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f7fe fc4c 	bl	8008a58 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	3301      	adds	r3, #1
 800a1c4:	607b      	str	r3, [r7, #4]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	2b37      	cmp	r3, #55	; 0x37
 800a1ca:	d9ef      	bls.n	800a1ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a1cc:	480d      	ldr	r0, [pc, #52]	; (800a204 <prvInitialiseTaskLists+0x64>)
 800a1ce:	f7fe fc43 	bl	8008a58 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a1d2:	480d      	ldr	r0, [pc, #52]	; (800a208 <prvInitialiseTaskLists+0x68>)
 800a1d4:	f7fe fc40 	bl	8008a58 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a1d8:	480c      	ldr	r0, [pc, #48]	; (800a20c <prvInitialiseTaskLists+0x6c>)
 800a1da:	f7fe fc3d 	bl	8008a58 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a1de:	480c      	ldr	r0, [pc, #48]	; (800a210 <prvInitialiseTaskLists+0x70>)
 800a1e0:	f7fe fc3a 	bl	8008a58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a1e4:	480b      	ldr	r0, [pc, #44]	; (800a214 <prvInitialiseTaskLists+0x74>)
 800a1e6:	f7fe fc37 	bl	8008a58 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a1ea:	4b0b      	ldr	r3, [pc, #44]	; (800a218 <prvInitialiseTaskLists+0x78>)
 800a1ec:	4a05      	ldr	r2, [pc, #20]	; (800a204 <prvInitialiseTaskLists+0x64>)
 800a1ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a1f0:	4b0a      	ldr	r3, [pc, #40]	; (800a21c <prvInitialiseTaskLists+0x7c>)
 800a1f2:	4a05      	ldr	r2, [pc, #20]	; (800a208 <prvInitialiseTaskLists+0x68>)
 800a1f4:	601a      	str	r2, [r3, #0]
}
 800a1f6:	bf00      	nop
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	20000828 	.word	0x20000828
 800a204:	20000c88 	.word	0x20000c88
 800a208:	20000c9c 	.word	0x20000c9c
 800a20c:	20000cb8 	.word	0x20000cb8
 800a210:	20000ccc 	.word	0x20000ccc
 800a214:	20000ce4 	.word	0x20000ce4
 800a218:	20000cb0 	.word	0x20000cb0
 800a21c:	20000cb4 	.word	0x20000cb4

0800a220 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a226:	e019      	b.n	800a25c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a228:	f000 fdd4 	bl	800add4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a22c:	4b10      	ldr	r3, [pc, #64]	; (800a270 <prvCheckTasksWaitingTermination+0x50>)
 800a22e:	68db      	ldr	r3, [r3, #12]
 800a230:	68db      	ldr	r3, [r3, #12]
 800a232:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	3304      	adds	r3, #4
 800a238:	4618      	mov	r0, r3
 800a23a:	f7fe fc97 	bl	8008b6c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a23e:	4b0d      	ldr	r3, [pc, #52]	; (800a274 <prvCheckTasksWaitingTermination+0x54>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	3b01      	subs	r3, #1
 800a244:	4a0b      	ldr	r2, [pc, #44]	; (800a274 <prvCheckTasksWaitingTermination+0x54>)
 800a246:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a248:	4b0b      	ldr	r3, [pc, #44]	; (800a278 <prvCheckTasksWaitingTermination+0x58>)
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	3b01      	subs	r3, #1
 800a24e:	4a0a      	ldr	r2, [pc, #40]	; (800a278 <prvCheckTasksWaitingTermination+0x58>)
 800a250:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a252:	f000 fdef 	bl	800ae34 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 f810 	bl	800a27c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a25c:	4b06      	ldr	r3, [pc, #24]	; (800a278 <prvCheckTasksWaitingTermination+0x58>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	2b00      	cmp	r3, #0
 800a262:	d1e1      	bne.n	800a228 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a264:	bf00      	nop
 800a266:	bf00      	nop
 800a268:	3708      	adds	r7, #8
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	bf00      	nop
 800a270:	20000ccc 	.word	0x20000ccc
 800a274:	20000cf8 	.word	0x20000cf8
 800a278:	20000ce0 	.word	0x20000ce0

0800a27c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b084      	sub	sp, #16
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	3354      	adds	r3, #84	; 0x54
 800a288:	4618      	mov	r0, r3
 800a28a:	f001 f959 	bl	800b540 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a294:	2b00      	cmp	r3, #0
 800a296:	d108      	bne.n	800a2aa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a29c:	4618      	mov	r0, r3
 800a29e:	f000 ff87 	bl	800b1b0 <vPortFree>
				vPortFree( pxTCB );
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 ff84 	bl	800b1b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a2a8:	e018      	b.n	800a2dc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	d103      	bne.n	800a2bc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 ff7b 	bl	800b1b0 <vPortFree>
	}
 800a2ba:	e00f      	b.n	800a2dc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a2c2:	2b02      	cmp	r3, #2
 800a2c4:	d00a      	beq.n	800a2dc <prvDeleteTCB+0x60>
	__asm volatile
 800a2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a2ca:	f383 8811 	msr	BASEPRI, r3
 800a2ce:	f3bf 8f6f 	isb	sy
 800a2d2:	f3bf 8f4f 	dsb	sy
 800a2d6:	60fb      	str	r3, [r7, #12]
}
 800a2d8:	bf00      	nop
 800a2da:	e7fe      	b.n	800a2da <prvDeleteTCB+0x5e>
	}
 800a2dc:	bf00      	nop
 800a2de:	3710      	adds	r7, #16
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a2ea:	4b0c      	ldr	r3, [pc, #48]	; (800a31c <prvResetNextTaskUnblockTime+0x38>)
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d104      	bne.n	800a2fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a2f4:	4b0a      	ldr	r3, [pc, #40]	; (800a320 <prvResetNextTaskUnblockTime+0x3c>)
 800a2f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a2fc:	e008      	b.n	800a310 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2fe:	4b07      	ldr	r3, [pc, #28]	; (800a31c <prvResetNextTaskUnblockTime+0x38>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	68db      	ldr	r3, [r3, #12]
 800a304:	68db      	ldr	r3, [r3, #12]
 800a306:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	685b      	ldr	r3, [r3, #4]
 800a30c:	4a04      	ldr	r2, [pc, #16]	; (800a320 <prvResetNextTaskUnblockTime+0x3c>)
 800a30e:	6013      	str	r3, [r2, #0]
}
 800a310:	bf00      	nop
 800a312:	370c      	adds	r7, #12
 800a314:	46bd      	mov	sp, r7
 800a316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31a:	4770      	bx	lr
 800a31c:	20000cb0 	.word	0x20000cb0
 800a320:	20000d18 	.word	0x20000d18

0800a324 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a324:	b480      	push	{r7}
 800a326:	b083      	sub	sp, #12
 800a328:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a32a:	4b0b      	ldr	r3, [pc, #44]	; (800a358 <xTaskGetSchedulerState+0x34>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d102      	bne.n	800a338 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a332:	2301      	movs	r3, #1
 800a334:	607b      	str	r3, [r7, #4]
 800a336:	e008      	b.n	800a34a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a338:	4b08      	ldr	r3, [pc, #32]	; (800a35c <xTaskGetSchedulerState+0x38>)
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d102      	bne.n	800a346 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a340:	2302      	movs	r3, #2
 800a342:	607b      	str	r3, [r7, #4]
 800a344:	e001      	b.n	800a34a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a346:	2300      	movs	r3, #0
 800a348:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a34a:	687b      	ldr	r3, [r7, #4]
	}
 800a34c:	4618      	mov	r0, r3
 800a34e:	370c      	adds	r7, #12
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr
 800a358:	20000d04 	.word	0x20000d04
 800a35c:	20000d20 	.word	0x20000d20

0800a360 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a360:	b580      	push	{r7, lr}
 800a362:	b086      	sub	sp, #24
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a36c:	2300      	movs	r3, #0
 800a36e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d056      	beq.n	800a424 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a376:	4b2e      	ldr	r3, [pc, #184]	; (800a430 <xTaskPriorityDisinherit+0xd0>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	693a      	ldr	r2, [r7, #16]
 800a37c:	429a      	cmp	r2, r3
 800a37e:	d00a      	beq.n	800a396 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a380:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a384:	f383 8811 	msr	BASEPRI, r3
 800a388:	f3bf 8f6f 	isb	sy
 800a38c:	f3bf 8f4f 	dsb	sy
 800a390:	60fb      	str	r3, [r7, #12]
}
 800a392:	bf00      	nop
 800a394:	e7fe      	b.n	800a394 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a396:	693b      	ldr	r3, [r7, #16]
 800a398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d10a      	bne.n	800a3b4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a39e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a2:	f383 8811 	msr	BASEPRI, r3
 800a3a6:	f3bf 8f6f 	isb	sy
 800a3aa:	f3bf 8f4f 	dsb	sy
 800a3ae:	60bb      	str	r3, [r7, #8]
}
 800a3b0:	bf00      	nop
 800a3b2:	e7fe      	b.n	800a3b2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a3b4:	693b      	ldr	r3, [r7, #16]
 800a3b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3b8:	1e5a      	subs	r2, r3, #1
 800a3ba:	693b      	ldr	r3, [r7, #16]
 800a3bc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3c2:	693b      	ldr	r3, [r7, #16]
 800a3c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d02c      	beq.n	800a424 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a3ca:	693b      	ldr	r3, [r7, #16]
 800a3cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d128      	bne.n	800a424 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a3d2:	693b      	ldr	r3, [r7, #16]
 800a3d4:	3304      	adds	r3, #4
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f7fe fbc8 	bl	8008b6c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a3dc:	693b      	ldr	r3, [r7, #16]
 800a3de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3e8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a3ec:	693b      	ldr	r3, [r7, #16]
 800a3ee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a3f4:	4b0f      	ldr	r3, [pc, #60]	; (800a434 <xTaskPriorityDisinherit+0xd4>)
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	429a      	cmp	r2, r3
 800a3fa:	d903      	bls.n	800a404 <xTaskPriorityDisinherit+0xa4>
 800a3fc:	693b      	ldr	r3, [r7, #16]
 800a3fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a400:	4a0c      	ldr	r2, [pc, #48]	; (800a434 <xTaskPriorityDisinherit+0xd4>)
 800a402:	6013      	str	r3, [r2, #0]
 800a404:	693b      	ldr	r3, [r7, #16]
 800a406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a408:	4613      	mov	r3, r2
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	4413      	add	r3, r2
 800a40e:	009b      	lsls	r3, r3, #2
 800a410:	4a09      	ldr	r2, [pc, #36]	; (800a438 <xTaskPriorityDisinherit+0xd8>)
 800a412:	441a      	add	r2, r3
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	3304      	adds	r3, #4
 800a418:	4619      	mov	r1, r3
 800a41a:	4610      	mov	r0, r2
 800a41c:	f7fe fb49 	bl	8008ab2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a420:	2301      	movs	r3, #1
 800a422:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a424:	697b      	ldr	r3, [r7, #20]
	}
 800a426:	4618      	mov	r0, r3
 800a428:	3718      	adds	r7, #24
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bd80      	pop	{r7, pc}
 800a42e:	bf00      	nop
 800a430:	20000824 	.word	0x20000824
 800a434:	20000d00 	.word	0x20000d00
 800a438:	20000828 	.word	0x20000828

0800a43c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a446:	4b21      	ldr	r3, [pc, #132]	; (800a4cc <prvAddCurrentTaskToDelayedList+0x90>)
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a44c:	4b20      	ldr	r3, [pc, #128]	; (800a4d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	3304      	adds	r3, #4
 800a452:	4618      	mov	r0, r3
 800a454:	f7fe fb8a 	bl	8008b6c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a45e:	d10a      	bne.n	800a476 <prvAddCurrentTaskToDelayedList+0x3a>
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	d007      	beq.n	800a476 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a466:	4b1a      	ldr	r3, [pc, #104]	; (800a4d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	3304      	adds	r3, #4
 800a46c:	4619      	mov	r1, r3
 800a46e:	4819      	ldr	r0, [pc, #100]	; (800a4d4 <prvAddCurrentTaskToDelayedList+0x98>)
 800a470:	f7fe fb1f 	bl	8008ab2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a474:	e026      	b.n	800a4c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4413      	add	r3, r2
 800a47c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a47e:	4b14      	ldr	r3, [pc, #80]	; (800a4d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	68ba      	ldr	r2, [r7, #8]
 800a484:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a486:	68ba      	ldr	r2, [r7, #8]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d209      	bcs.n	800a4a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a48e:	4b12      	ldr	r3, [pc, #72]	; (800a4d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a490:	681a      	ldr	r2, [r3, #0]
 800a492:	4b0f      	ldr	r3, [pc, #60]	; (800a4d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	3304      	adds	r3, #4
 800a498:	4619      	mov	r1, r3
 800a49a:	4610      	mov	r0, r2
 800a49c:	f7fe fb2d 	bl	8008afa <vListInsert>
}
 800a4a0:	e010      	b.n	800a4c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a4a2:	4b0e      	ldr	r3, [pc, #56]	; (800a4dc <prvAddCurrentTaskToDelayedList+0xa0>)
 800a4a4:	681a      	ldr	r2, [r3, #0]
 800a4a6:	4b0a      	ldr	r3, [pc, #40]	; (800a4d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	3304      	adds	r3, #4
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	4610      	mov	r0, r2
 800a4b0:	f7fe fb23 	bl	8008afa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a4b4:	4b0a      	ldr	r3, [pc, #40]	; (800a4e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	68ba      	ldr	r2, [r7, #8]
 800a4ba:	429a      	cmp	r2, r3
 800a4bc:	d202      	bcs.n	800a4c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a4be:	4a08      	ldr	r2, [pc, #32]	; (800a4e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	6013      	str	r3, [r2, #0]
}
 800a4c4:	bf00      	nop
 800a4c6:	3710      	adds	r7, #16
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}
 800a4cc:	20000cfc 	.word	0x20000cfc
 800a4d0:	20000824 	.word	0x20000824
 800a4d4:	20000ce4 	.word	0x20000ce4
 800a4d8:	20000cb4 	.word	0x20000cb4
 800a4dc:	20000cb0 	.word	0x20000cb0
 800a4e0:	20000d18 	.word	0x20000d18

0800a4e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b08a      	sub	sp, #40	; 0x28
 800a4e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a4ee:	f000 fb07 	bl	800ab00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a4f2:	4b1c      	ldr	r3, [pc, #112]	; (800a564 <xTimerCreateTimerTask+0x80>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d021      	beq.n	800a53e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a4fe:	2300      	movs	r3, #0
 800a500:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a502:	1d3a      	adds	r2, r7, #4
 800a504:	f107 0108 	add.w	r1, r7, #8
 800a508:	f107 030c 	add.w	r3, r7, #12
 800a50c:	4618      	mov	r0, r3
 800a50e:	f7fe fa89 	bl	8008a24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a512:	6879      	ldr	r1, [r7, #4]
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	9202      	str	r2, [sp, #8]
 800a51a:	9301      	str	r3, [sp, #4]
 800a51c:	2302      	movs	r3, #2
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	2300      	movs	r3, #0
 800a522:	460a      	mov	r2, r1
 800a524:	4910      	ldr	r1, [pc, #64]	; (800a568 <xTimerCreateTimerTask+0x84>)
 800a526:	4811      	ldr	r0, [pc, #68]	; (800a56c <xTimerCreateTimerTask+0x88>)
 800a528:	f7ff f836 	bl	8009598 <xTaskCreateStatic>
 800a52c:	4603      	mov	r3, r0
 800a52e:	4a10      	ldr	r2, [pc, #64]	; (800a570 <xTimerCreateTimerTask+0x8c>)
 800a530:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a532:	4b0f      	ldr	r3, [pc, #60]	; (800a570 <xTimerCreateTimerTask+0x8c>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d001      	beq.n	800a53e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a53a:	2301      	movs	r3, #1
 800a53c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d10a      	bne.n	800a55a <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a544:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a548:	f383 8811 	msr	BASEPRI, r3
 800a54c:	f3bf 8f6f 	isb	sy
 800a550:	f3bf 8f4f 	dsb	sy
 800a554:	613b      	str	r3, [r7, #16]
}
 800a556:	bf00      	nop
 800a558:	e7fe      	b.n	800a558 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a55a:	697b      	ldr	r3, [r7, #20]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3718      	adds	r7, #24
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	20000d54 	.word	0x20000d54
 800a568:	0800c7cc 	.word	0x0800c7cc
 800a56c:	0800a6a9 	.word	0x0800a6a9
 800a570:	20000d58 	.word	0x20000d58

0800a574 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b08a      	sub	sp, #40	; 0x28
 800a578:	af00      	add	r7, sp, #0
 800a57a:	60f8      	str	r0, [r7, #12]
 800a57c:	60b9      	str	r1, [r7, #8]
 800a57e:	607a      	str	r2, [r7, #4]
 800a580:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a582:	2300      	movs	r3, #0
 800a584:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d10a      	bne.n	800a5a2 <xTimerGenericCommand+0x2e>
	__asm volatile
 800a58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a590:	f383 8811 	msr	BASEPRI, r3
 800a594:	f3bf 8f6f 	isb	sy
 800a598:	f3bf 8f4f 	dsb	sy
 800a59c:	623b      	str	r3, [r7, #32]
}
 800a59e:	bf00      	nop
 800a5a0:	e7fe      	b.n	800a5a0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a5a2:	4b1a      	ldr	r3, [pc, #104]	; (800a60c <xTimerGenericCommand+0x98>)
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d02a      	beq.n	800a600 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	2b05      	cmp	r3, #5
 800a5ba:	dc18      	bgt.n	800a5ee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a5bc:	f7ff feb2 	bl	800a324 <xTaskGetSchedulerState>
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	2b02      	cmp	r3, #2
 800a5c4:	d109      	bne.n	800a5da <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a5c6:	4b11      	ldr	r3, [pc, #68]	; (800a60c <xTimerGenericCommand+0x98>)
 800a5c8:	6818      	ldr	r0, [r3, #0]
 800a5ca:	f107 0110 	add.w	r1, r7, #16
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5d2:	f7fe fbf9 	bl	8008dc8 <xQueueGenericSend>
 800a5d6:	6278      	str	r0, [r7, #36]	; 0x24
 800a5d8:	e012      	b.n	800a600 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a5da:	4b0c      	ldr	r3, [pc, #48]	; (800a60c <xTimerGenericCommand+0x98>)
 800a5dc:	6818      	ldr	r0, [r3, #0]
 800a5de:	f107 0110 	add.w	r1, r7, #16
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f7fe fbef 	bl	8008dc8 <xQueueGenericSend>
 800a5ea:	6278      	str	r0, [r7, #36]	; 0x24
 800a5ec:	e008      	b.n	800a600 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a5ee:	4b07      	ldr	r3, [pc, #28]	; (800a60c <xTimerGenericCommand+0x98>)
 800a5f0:	6818      	ldr	r0, [r3, #0]
 800a5f2:	f107 0110 	add.w	r1, r7, #16
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	683a      	ldr	r2, [r7, #0]
 800a5fa:	f7fe fce3 	bl	8008fc4 <xQueueGenericSendFromISR>
 800a5fe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a602:	4618      	mov	r0, r3
 800a604:	3728      	adds	r7, #40	; 0x28
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop
 800a60c:	20000d54 	.word	0x20000d54

0800a610 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a610:	b580      	push	{r7, lr}
 800a612:	b088      	sub	sp, #32
 800a614:	af02      	add	r7, sp, #8
 800a616:	6078      	str	r0, [r7, #4]
 800a618:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a61a:	4b22      	ldr	r3, [pc, #136]	; (800a6a4 <prvProcessExpiredTimer+0x94>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	68db      	ldr	r3, [r3, #12]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a624:	697b      	ldr	r3, [r7, #20]
 800a626:	3304      	adds	r3, #4
 800a628:	4618      	mov	r0, r3
 800a62a:	f7fe fa9f 	bl	8008b6c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a62e:	697b      	ldr	r3, [r7, #20]
 800a630:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a634:	f003 0304 	and.w	r3, r3, #4
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d022      	beq.n	800a682 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a63c:	697b      	ldr	r3, [r7, #20]
 800a63e:	699a      	ldr	r2, [r3, #24]
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	18d1      	adds	r1, r2, r3
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	6978      	ldr	r0, [r7, #20]
 800a64a:	f000 f8d1 	bl	800a7f0 <prvInsertTimerInActiveList>
 800a64e:	4603      	mov	r3, r0
 800a650:	2b00      	cmp	r3, #0
 800a652:	d01f      	beq.n	800a694 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a654:	2300      	movs	r3, #0
 800a656:	9300      	str	r3, [sp, #0]
 800a658:	2300      	movs	r3, #0
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	2100      	movs	r1, #0
 800a65e:	6978      	ldr	r0, [r7, #20]
 800a660:	f7ff ff88 	bl	800a574 <xTimerGenericCommand>
 800a664:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d113      	bne.n	800a694 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a670:	f383 8811 	msr	BASEPRI, r3
 800a674:	f3bf 8f6f 	isb	sy
 800a678:	f3bf 8f4f 	dsb	sy
 800a67c:	60fb      	str	r3, [r7, #12]
}
 800a67e:	bf00      	nop
 800a680:	e7fe      	b.n	800a680 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a688:	f023 0301 	bic.w	r3, r3, #1
 800a68c:	b2da      	uxtb	r2, r3
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a694:	697b      	ldr	r3, [r7, #20]
 800a696:	6a1b      	ldr	r3, [r3, #32]
 800a698:	6978      	ldr	r0, [r7, #20]
 800a69a:	4798      	blx	r3
}
 800a69c:	bf00      	nop
 800a69e:	3718      	adds	r7, #24
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	bd80      	pop	{r7, pc}
 800a6a4:	20000d4c 	.word	0x20000d4c

0800a6a8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a6b0:	f107 0308 	add.w	r3, r7, #8
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f000 f857 	bl	800a768 <prvGetNextExpireTime>
 800a6ba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	4619      	mov	r1, r3
 800a6c0:	68f8      	ldr	r0, [r7, #12]
 800a6c2:	f000 f803 	bl	800a6cc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a6c6:	f000 f8d5 	bl	800a874 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a6ca:	e7f1      	b.n	800a6b0 <prvTimerTask+0x8>

0800a6cc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b084      	sub	sp, #16
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
 800a6d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a6d6:	f7ff fa39 	bl	8009b4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a6da:	f107 0308 	add.w	r3, r7, #8
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f000 f866 	bl	800a7b0 <prvSampleTimeNow>
 800a6e4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d130      	bne.n	800a74e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a6ec:	683b      	ldr	r3, [r7, #0]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d10a      	bne.n	800a708 <prvProcessTimerOrBlockTask+0x3c>
 800a6f2:	687a      	ldr	r2, [r7, #4]
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	429a      	cmp	r2, r3
 800a6f8:	d806      	bhi.n	800a708 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a6fa:	f7ff fa35 	bl	8009b68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a6fe:	68f9      	ldr	r1, [r7, #12]
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f7ff ff85 	bl	800a610 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a706:	e024      	b.n	800a752 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d008      	beq.n	800a720 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a70e:	4b13      	ldr	r3, [pc, #76]	; (800a75c <prvProcessTimerOrBlockTask+0x90>)
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	2b00      	cmp	r3, #0
 800a716:	d101      	bne.n	800a71c <prvProcessTimerOrBlockTask+0x50>
 800a718:	2301      	movs	r3, #1
 800a71a:	e000      	b.n	800a71e <prvProcessTimerOrBlockTask+0x52>
 800a71c:	2300      	movs	r3, #0
 800a71e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a720:	4b0f      	ldr	r3, [pc, #60]	; (800a760 <prvProcessTimerOrBlockTask+0x94>)
 800a722:	6818      	ldr	r0, [r3, #0]
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	1ad3      	subs	r3, r2, r3
 800a72a:	683a      	ldr	r2, [r7, #0]
 800a72c:	4619      	mov	r1, r3
 800a72e:	f7fe feff 	bl	8009530 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a732:	f7ff fa19 	bl	8009b68 <xTaskResumeAll>
 800a736:	4603      	mov	r3, r0
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d10a      	bne.n	800a752 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a73c:	4b09      	ldr	r3, [pc, #36]	; (800a764 <prvProcessTimerOrBlockTask+0x98>)
 800a73e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a742:	601a      	str	r2, [r3, #0]
 800a744:	f3bf 8f4f 	dsb	sy
 800a748:	f3bf 8f6f 	isb	sy
}
 800a74c:	e001      	b.n	800a752 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a74e:	f7ff fa0b 	bl	8009b68 <xTaskResumeAll>
}
 800a752:	bf00      	nop
 800a754:	3710      	adds	r7, #16
 800a756:	46bd      	mov	sp, r7
 800a758:	bd80      	pop	{r7, pc}
 800a75a:	bf00      	nop
 800a75c:	20000d50 	.word	0x20000d50
 800a760:	20000d54 	.word	0x20000d54
 800a764:	e000ed04 	.word	0xe000ed04

0800a768 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a768:	b480      	push	{r7}
 800a76a:	b085      	sub	sp, #20
 800a76c:	af00      	add	r7, sp, #0
 800a76e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a770:	4b0e      	ldr	r3, [pc, #56]	; (800a7ac <prvGetNextExpireTime+0x44>)
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d101      	bne.n	800a77e <prvGetNextExpireTime+0x16>
 800a77a:	2201      	movs	r2, #1
 800a77c:	e000      	b.n	800a780 <prvGetNextExpireTime+0x18>
 800a77e:	2200      	movs	r2, #0
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	2b00      	cmp	r3, #0
 800a78a:	d105      	bne.n	800a798 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a78c:	4b07      	ldr	r3, [pc, #28]	; (800a7ac <prvGetNextExpireTime+0x44>)
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	68db      	ldr	r3, [r3, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	60fb      	str	r3, [r7, #12]
 800a796:	e001      	b.n	800a79c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a798:	2300      	movs	r3, #0
 800a79a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a79c:	68fb      	ldr	r3, [r7, #12]
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3714      	adds	r7, #20
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr
 800a7aa:	bf00      	nop
 800a7ac:	20000d4c 	.word	0x20000d4c

0800a7b0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b084      	sub	sp, #16
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a7b8:	f7ff fa74 	bl	8009ca4 <xTaskGetTickCount>
 800a7bc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a7be:	4b0b      	ldr	r3, [pc, #44]	; (800a7ec <prvSampleTimeNow+0x3c>)
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	429a      	cmp	r2, r3
 800a7c6:	d205      	bcs.n	800a7d4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a7c8:	f000 f936 	bl	800aa38 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2201      	movs	r2, #1
 800a7d0:	601a      	str	r2, [r3, #0]
 800a7d2:	e002      	b.n	800a7da <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a7da:	4a04      	ldr	r2, [pc, #16]	; (800a7ec <prvSampleTimeNow+0x3c>)
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
}
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	3710      	adds	r7, #16
 800a7e6:	46bd      	mov	sp, r7
 800a7e8:	bd80      	pop	{r7, pc}
 800a7ea:	bf00      	nop
 800a7ec:	20000d5c 	.word	0x20000d5c

0800a7f0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
 800a7fc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a7fe:	2300      	movs	r3, #0
 800a800:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a802:	68fb      	ldr	r3, [r7, #12]
 800a804:	68ba      	ldr	r2, [r7, #8]
 800a806:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	68fa      	ldr	r2, [r7, #12]
 800a80c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a80e:	68ba      	ldr	r2, [r7, #8]
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	429a      	cmp	r2, r3
 800a814:	d812      	bhi.n	800a83c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a816:	687a      	ldr	r2, [r7, #4]
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	1ad2      	subs	r2, r2, r3
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	699b      	ldr	r3, [r3, #24]
 800a820:	429a      	cmp	r2, r3
 800a822:	d302      	bcc.n	800a82a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a824:	2301      	movs	r3, #1
 800a826:	617b      	str	r3, [r7, #20]
 800a828:	e01b      	b.n	800a862 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a82a:	4b10      	ldr	r3, [pc, #64]	; (800a86c <prvInsertTimerInActiveList+0x7c>)
 800a82c:	681a      	ldr	r2, [r3, #0]
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	3304      	adds	r3, #4
 800a832:	4619      	mov	r1, r3
 800a834:	4610      	mov	r0, r2
 800a836:	f7fe f960 	bl	8008afa <vListInsert>
 800a83a:	e012      	b.n	800a862 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	429a      	cmp	r2, r3
 800a842:	d206      	bcs.n	800a852 <prvInsertTimerInActiveList+0x62>
 800a844:	68ba      	ldr	r2, [r7, #8]
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	429a      	cmp	r2, r3
 800a84a:	d302      	bcc.n	800a852 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a84c:	2301      	movs	r3, #1
 800a84e:	617b      	str	r3, [r7, #20]
 800a850:	e007      	b.n	800a862 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a852:	4b07      	ldr	r3, [pc, #28]	; (800a870 <prvInsertTimerInActiveList+0x80>)
 800a854:	681a      	ldr	r2, [r3, #0]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	3304      	adds	r3, #4
 800a85a:	4619      	mov	r1, r3
 800a85c:	4610      	mov	r0, r2
 800a85e:	f7fe f94c 	bl	8008afa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a862:	697b      	ldr	r3, [r7, #20]
}
 800a864:	4618      	mov	r0, r3
 800a866:	3718      	adds	r7, #24
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}
 800a86c:	20000d50 	.word	0x20000d50
 800a870:	20000d4c 	.word	0x20000d4c

0800a874 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a874:	b580      	push	{r7, lr}
 800a876:	b08e      	sub	sp, #56	; 0x38
 800a878:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a87a:	e0ca      	b.n	800aa12 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	da18      	bge.n	800a8b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a882:	1d3b      	adds	r3, r7, #4
 800a884:	3304      	adds	r3, #4
 800a886:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d10a      	bne.n	800a8a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a88e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a892:	f383 8811 	msr	BASEPRI, r3
 800a896:	f3bf 8f6f 	isb	sy
 800a89a:	f3bf 8f4f 	dsb	sy
 800a89e:	61fb      	str	r3, [r7, #28]
}
 800a8a0:	bf00      	nop
 800a8a2:	e7fe      	b.n	800a8a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8aa:	6850      	ldr	r0, [r2, #4]
 800a8ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a8ae:	6892      	ldr	r2, [r2, #8]
 800a8b0:	4611      	mov	r1, r2
 800a8b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	f2c0 80aa 	blt.w	800aa10 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a8bc:	68fb      	ldr	r3, [r7, #12]
 800a8be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c2:	695b      	ldr	r3, [r3, #20]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d004      	beq.n	800a8d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a8c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ca:	3304      	adds	r3, #4
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f7fe f94d 	bl	8008b6c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a8d2:	463b      	mov	r3, r7
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	f7ff ff6b 	bl	800a7b0 <prvSampleTimeNow>
 800a8da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2b09      	cmp	r3, #9
 800a8e0:	f200 8097 	bhi.w	800aa12 <prvProcessReceivedCommands+0x19e>
 800a8e4:	a201      	add	r2, pc, #4	; (adr r2, 800a8ec <prvProcessReceivedCommands+0x78>)
 800a8e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ea:	bf00      	nop
 800a8ec:	0800a915 	.word	0x0800a915
 800a8f0:	0800a915 	.word	0x0800a915
 800a8f4:	0800a915 	.word	0x0800a915
 800a8f8:	0800a989 	.word	0x0800a989
 800a8fc:	0800a99d 	.word	0x0800a99d
 800a900:	0800a9e7 	.word	0x0800a9e7
 800a904:	0800a915 	.word	0x0800a915
 800a908:	0800a915 	.word	0x0800a915
 800a90c:	0800a989 	.word	0x0800a989
 800a910:	0800a99d 	.word	0x0800a99d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a916:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a91a:	f043 0301 	orr.w	r3, r3, #1
 800a91e:	b2da      	uxtb	r2, r3
 800a920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a922:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a926:	68ba      	ldr	r2, [r7, #8]
 800a928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a92a:	699b      	ldr	r3, [r3, #24]
 800a92c:	18d1      	adds	r1, r2, r3
 800a92e:	68bb      	ldr	r3, [r7, #8]
 800a930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a934:	f7ff ff5c 	bl	800a7f0 <prvInsertTimerInActiveList>
 800a938:	4603      	mov	r3, r0
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d069      	beq.n	800aa12 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a93e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a940:	6a1b      	ldr	r3, [r3, #32]
 800a942:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a944:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a948:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a94c:	f003 0304 	and.w	r3, r3, #4
 800a950:	2b00      	cmp	r3, #0
 800a952:	d05e      	beq.n	800aa12 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a954:	68ba      	ldr	r2, [r7, #8]
 800a956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a958:	699b      	ldr	r3, [r3, #24]
 800a95a:	441a      	add	r2, r3
 800a95c:	2300      	movs	r3, #0
 800a95e:	9300      	str	r3, [sp, #0]
 800a960:	2300      	movs	r3, #0
 800a962:	2100      	movs	r1, #0
 800a964:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a966:	f7ff fe05 	bl	800a574 <xTimerGenericCommand>
 800a96a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a96c:	6a3b      	ldr	r3, [r7, #32]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d14f      	bne.n	800aa12 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a972:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a976:	f383 8811 	msr	BASEPRI, r3
 800a97a:	f3bf 8f6f 	isb	sy
 800a97e:	f3bf 8f4f 	dsb	sy
 800a982:	61bb      	str	r3, [r7, #24]
}
 800a984:	bf00      	nop
 800a986:	e7fe      	b.n	800a986 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a98a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a98e:	f023 0301 	bic.w	r3, r3, #1
 800a992:	b2da      	uxtb	r2, r3
 800a994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a996:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a99a:	e03a      	b.n	800aa12 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a99c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a99e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9a2:	f043 0301 	orr.w	r3, r3, #1
 800a9a6:	b2da      	uxtb	r2, r3
 800a9a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a9ae:	68ba      	ldr	r2, [r7, #8]
 800a9b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a9b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9b6:	699b      	ldr	r3, [r3, #24]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d10a      	bne.n	800a9d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9c0:	f383 8811 	msr	BASEPRI, r3
 800a9c4:	f3bf 8f6f 	isb	sy
 800a9c8:	f3bf 8f4f 	dsb	sy
 800a9cc:	617b      	str	r3, [r7, #20]
}
 800a9ce:	bf00      	nop
 800a9d0:	e7fe      	b.n	800a9d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9d4:	699a      	ldr	r2, [r3, #24]
 800a9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d8:	18d1      	adds	r1, r2, r3
 800a9da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9e0:	f7ff ff06 	bl	800a7f0 <prvInsertTimerInActiveList>
					break;
 800a9e4:	e015      	b.n	800aa12 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a9ec:	f003 0302 	and.w	r3, r3, #2
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d103      	bne.n	800a9fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a9f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a9f6:	f000 fbdb 	bl	800b1b0 <vPortFree>
 800a9fa:	e00a      	b.n	800aa12 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a9fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa02:	f023 0301 	bic.w	r3, r3, #1
 800aa06:	b2da      	uxtb	r2, r3
 800aa08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800aa0e:	e000      	b.n	800aa12 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800aa10:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800aa12:	4b08      	ldr	r3, [pc, #32]	; (800aa34 <prvProcessReceivedCommands+0x1c0>)
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	1d39      	adds	r1, r7, #4
 800aa18:	2200      	movs	r2, #0
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f7fe fb6e 	bl	80090fc <xQueueReceive>
 800aa20:	4603      	mov	r3, r0
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	f47f af2a 	bne.w	800a87c <prvProcessReceivedCommands+0x8>
	}
}
 800aa28:	bf00      	nop
 800aa2a:	bf00      	nop
 800aa2c:	3730      	adds	r7, #48	; 0x30
 800aa2e:	46bd      	mov	sp, r7
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	bf00      	nop
 800aa34:	20000d54 	.word	0x20000d54

0800aa38 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b088      	sub	sp, #32
 800aa3c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aa3e:	e048      	b.n	800aad2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800aa40:	4b2d      	ldr	r3, [pc, #180]	; (800aaf8 <prvSwitchTimerLists+0xc0>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	68db      	ldr	r3, [r3, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aa4a:	4b2b      	ldr	r3, [pc, #172]	; (800aaf8 <prvSwitchTimerLists+0xc0>)
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	68db      	ldr	r3, [r3, #12]
 800aa52:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	3304      	adds	r3, #4
 800aa58:	4618      	mov	r0, r3
 800aa5a:	f7fe f887 	bl	8008b6c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	6a1b      	ldr	r3, [r3, #32]
 800aa62:	68f8      	ldr	r0, [r7, #12]
 800aa64:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa6c:	f003 0304 	and.w	r3, r3, #4
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d02e      	beq.n	800aad2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	699b      	ldr	r3, [r3, #24]
 800aa78:	693a      	ldr	r2, [r7, #16]
 800aa7a:	4413      	add	r3, r2
 800aa7c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800aa7e:	68ba      	ldr	r2, [r7, #8]
 800aa80:	693b      	ldr	r3, [r7, #16]
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d90e      	bls.n	800aaa4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	68ba      	ldr	r2, [r7, #8]
 800aa8a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	68fa      	ldr	r2, [r7, #12]
 800aa90:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800aa92:	4b19      	ldr	r3, [pc, #100]	; (800aaf8 <prvSwitchTimerLists+0xc0>)
 800aa94:	681a      	ldr	r2, [r3, #0]
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	3304      	adds	r3, #4
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	4610      	mov	r0, r2
 800aa9e:	f7fe f82c 	bl	8008afa <vListInsert>
 800aaa2:	e016      	b.n	800aad2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	9300      	str	r3, [sp, #0]
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	693a      	ldr	r2, [r7, #16]
 800aaac:	2100      	movs	r1, #0
 800aaae:	68f8      	ldr	r0, [r7, #12]
 800aab0:	f7ff fd60 	bl	800a574 <xTimerGenericCommand>
 800aab4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d10a      	bne.n	800aad2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800aabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac0:	f383 8811 	msr	BASEPRI, r3
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	f3bf 8f4f 	dsb	sy
 800aacc:	603b      	str	r3, [r7, #0]
}
 800aace:	bf00      	nop
 800aad0:	e7fe      	b.n	800aad0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800aad2:	4b09      	ldr	r3, [pc, #36]	; (800aaf8 <prvSwitchTimerLists+0xc0>)
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d1b1      	bne.n	800aa40 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800aadc:	4b06      	ldr	r3, [pc, #24]	; (800aaf8 <prvSwitchTimerLists+0xc0>)
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800aae2:	4b06      	ldr	r3, [pc, #24]	; (800aafc <prvSwitchTimerLists+0xc4>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4a04      	ldr	r2, [pc, #16]	; (800aaf8 <prvSwitchTimerLists+0xc0>)
 800aae8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800aaea:	4a04      	ldr	r2, [pc, #16]	; (800aafc <prvSwitchTimerLists+0xc4>)
 800aaec:	697b      	ldr	r3, [r7, #20]
 800aaee:	6013      	str	r3, [r2, #0]
}
 800aaf0:	bf00      	nop
 800aaf2:	3718      	adds	r7, #24
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}
 800aaf8:	20000d4c 	.word	0x20000d4c
 800aafc:	20000d50 	.word	0x20000d50

0800ab00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b082      	sub	sp, #8
 800ab04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ab06:	f000 f965 	bl	800add4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ab0a:	4b15      	ldr	r3, [pc, #84]	; (800ab60 <prvCheckForValidListAndQueue+0x60>)
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d120      	bne.n	800ab54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ab12:	4814      	ldr	r0, [pc, #80]	; (800ab64 <prvCheckForValidListAndQueue+0x64>)
 800ab14:	f7fd ffa0 	bl	8008a58 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ab18:	4813      	ldr	r0, [pc, #76]	; (800ab68 <prvCheckForValidListAndQueue+0x68>)
 800ab1a:	f7fd ff9d 	bl	8008a58 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ab1e:	4b13      	ldr	r3, [pc, #76]	; (800ab6c <prvCheckForValidListAndQueue+0x6c>)
 800ab20:	4a10      	ldr	r2, [pc, #64]	; (800ab64 <prvCheckForValidListAndQueue+0x64>)
 800ab22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ab24:	4b12      	ldr	r3, [pc, #72]	; (800ab70 <prvCheckForValidListAndQueue+0x70>)
 800ab26:	4a10      	ldr	r2, [pc, #64]	; (800ab68 <prvCheckForValidListAndQueue+0x68>)
 800ab28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	9300      	str	r3, [sp, #0]
 800ab2e:	4b11      	ldr	r3, [pc, #68]	; (800ab74 <prvCheckForValidListAndQueue+0x74>)
 800ab30:	4a11      	ldr	r2, [pc, #68]	; (800ab78 <prvCheckForValidListAndQueue+0x78>)
 800ab32:	2110      	movs	r1, #16
 800ab34:	200a      	movs	r0, #10
 800ab36:	f7fe f8ab 	bl	8008c90 <xQueueGenericCreateStatic>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	4a08      	ldr	r2, [pc, #32]	; (800ab60 <prvCheckForValidListAndQueue+0x60>)
 800ab3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ab40:	4b07      	ldr	r3, [pc, #28]	; (800ab60 <prvCheckForValidListAndQueue+0x60>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d005      	beq.n	800ab54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ab48:	4b05      	ldr	r3, [pc, #20]	; (800ab60 <prvCheckForValidListAndQueue+0x60>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	490b      	ldr	r1, [pc, #44]	; (800ab7c <prvCheckForValidListAndQueue+0x7c>)
 800ab4e:	4618      	mov	r0, r3
 800ab50:	f7fe fcc4 	bl	80094dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ab54:	f000 f96e 	bl	800ae34 <vPortExitCritical>
}
 800ab58:	bf00      	nop
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	bd80      	pop	{r7, pc}
 800ab5e:	bf00      	nop
 800ab60:	20000d54 	.word	0x20000d54
 800ab64:	20000d24 	.word	0x20000d24
 800ab68:	20000d38 	.word	0x20000d38
 800ab6c:	20000d4c 	.word	0x20000d4c
 800ab70:	20000d50 	.word	0x20000d50
 800ab74:	20000e00 	.word	0x20000e00
 800ab78:	20000d60 	.word	0x20000d60
 800ab7c:	0800c7d4 	.word	0x0800c7d4

0800ab80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ab80:	b480      	push	{r7}
 800ab82:	b085      	sub	sp, #20
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	3b04      	subs	r3, #4
 800ab90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ab98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	3b04      	subs	r3, #4
 800ab9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	f023 0201 	bic.w	r2, r3, #1
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	3b04      	subs	r3, #4
 800abae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800abb0:	4a0c      	ldr	r2, [pc, #48]	; (800abe4 <pxPortInitialiseStack+0x64>)
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	3b14      	subs	r3, #20
 800abba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800abbc:	687a      	ldr	r2, [r7, #4]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	3b04      	subs	r3, #4
 800abc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	f06f 0202 	mvn.w	r2, #2
 800abce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	3b20      	subs	r3, #32
 800abd4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800abd6:	68fb      	ldr	r3, [r7, #12]
}
 800abd8:	4618      	mov	r0, r3
 800abda:	3714      	adds	r7, #20
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr
 800abe4:	0800abe9 	.word	0x0800abe9

0800abe8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800abe8:	b480      	push	{r7}
 800abea:	b085      	sub	sp, #20
 800abec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800abee:	2300      	movs	r3, #0
 800abf0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800abf2:	4b12      	ldr	r3, [pc, #72]	; (800ac3c <prvTaskExitError+0x54>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abfa:	d00a      	beq.n	800ac12 <prvTaskExitError+0x2a>
	__asm volatile
 800abfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac00:	f383 8811 	msr	BASEPRI, r3
 800ac04:	f3bf 8f6f 	isb	sy
 800ac08:	f3bf 8f4f 	dsb	sy
 800ac0c:	60fb      	str	r3, [r7, #12]
}
 800ac0e:	bf00      	nop
 800ac10:	e7fe      	b.n	800ac10 <prvTaskExitError+0x28>
	__asm volatile
 800ac12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac16:	f383 8811 	msr	BASEPRI, r3
 800ac1a:	f3bf 8f6f 	isb	sy
 800ac1e:	f3bf 8f4f 	dsb	sy
 800ac22:	60bb      	str	r3, [r7, #8]
}
 800ac24:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ac26:	bf00      	nop
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d0fc      	beq.n	800ac28 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ac2e:	bf00      	nop
 800ac30:	bf00      	nop
 800ac32:	3714      	adds	r7, #20
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr
 800ac3c:	2000001c 	.word	0x2000001c

0800ac40 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ac40:	4b07      	ldr	r3, [pc, #28]	; (800ac60 <pxCurrentTCBConst2>)
 800ac42:	6819      	ldr	r1, [r3, #0]
 800ac44:	6808      	ldr	r0, [r1, #0]
 800ac46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac4a:	f380 8809 	msr	PSP, r0
 800ac4e:	f3bf 8f6f 	isb	sy
 800ac52:	f04f 0000 	mov.w	r0, #0
 800ac56:	f380 8811 	msr	BASEPRI, r0
 800ac5a:	4770      	bx	lr
 800ac5c:	f3af 8000 	nop.w

0800ac60 <pxCurrentTCBConst2>:
 800ac60:	20000824 	.word	0x20000824
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ac64:	bf00      	nop
 800ac66:	bf00      	nop

0800ac68 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ac68:	4808      	ldr	r0, [pc, #32]	; (800ac8c <prvPortStartFirstTask+0x24>)
 800ac6a:	6800      	ldr	r0, [r0, #0]
 800ac6c:	6800      	ldr	r0, [r0, #0]
 800ac6e:	f380 8808 	msr	MSP, r0
 800ac72:	f04f 0000 	mov.w	r0, #0
 800ac76:	f380 8814 	msr	CONTROL, r0
 800ac7a:	b662      	cpsie	i
 800ac7c:	b661      	cpsie	f
 800ac7e:	f3bf 8f4f 	dsb	sy
 800ac82:	f3bf 8f6f 	isb	sy
 800ac86:	df00      	svc	0
 800ac88:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ac8a:	bf00      	nop
 800ac8c:	e000ed08 	.word	0xe000ed08

0800ac90 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b086      	sub	sp, #24
 800ac94:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ac96:	4b46      	ldr	r3, [pc, #280]	; (800adb0 <xPortStartScheduler+0x120>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	4a46      	ldr	r2, [pc, #280]	; (800adb4 <xPortStartScheduler+0x124>)
 800ac9c:	4293      	cmp	r3, r2
 800ac9e:	d10a      	bne.n	800acb6 <xPortStartScheduler+0x26>
	__asm volatile
 800aca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aca4:	f383 8811 	msr	BASEPRI, r3
 800aca8:	f3bf 8f6f 	isb	sy
 800acac:	f3bf 8f4f 	dsb	sy
 800acb0:	613b      	str	r3, [r7, #16]
}
 800acb2:	bf00      	nop
 800acb4:	e7fe      	b.n	800acb4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800acb6:	4b3e      	ldr	r3, [pc, #248]	; (800adb0 <xPortStartScheduler+0x120>)
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	4a3f      	ldr	r2, [pc, #252]	; (800adb8 <xPortStartScheduler+0x128>)
 800acbc:	4293      	cmp	r3, r2
 800acbe:	d10a      	bne.n	800acd6 <xPortStartScheduler+0x46>
	__asm volatile
 800acc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800acc4:	f383 8811 	msr	BASEPRI, r3
 800acc8:	f3bf 8f6f 	isb	sy
 800accc:	f3bf 8f4f 	dsb	sy
 800acd0:	60fb      	str	r3, [r7, #12]
}
 800acd2:	bf00      	nop
 800acd4:	e7fe      	b.n	800acd4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800acd6:	4b39      	ldr	r3, [pc, #228]	; (800adbc <xPortStartScheduler+0x12c>)
 800acd8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800acda:	697b      	ldr	r3, [r7, #20]
 800acdc:	781b      	ldrb	r3, [r3, #0]
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ace2:	697b      	ldr	r3, [r7, #20]
 800ace4:	22ff      	movs	r2, #255	; 0xff
 800ace6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	b2db      	uxtb	r3, r3
 800acee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800acf0:	78fb      	ldrb	r3, [r7, #3]
 800acf2:	b2db      	uxtb	r3, r3
 800acf4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800acf8:	b2da      	uxtb	r2, r3
 800acfa:	4b31      	ldr	r3, [pc, #196]	; (800adc0 <xPortStartScheduler+0x130>)
 800acfc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800acfe:	4b31      	ldr	r3, [pc, #196]	; (800adc4 <xPortStartScheduler+0x134>)
 800ad00:	2207      	movs	r2, #7
 800ad02:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad04:	e009      	b.n	800ad1a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ad06:	4b2f      	ldr	r3, [pc, #188]	; (800adc4 <xPortStartScheduler+0x134>)
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	4a2d      	ldr	r2, [pc, #180]	; (800adc4 <xPortStartScheduler+0x134>)
 800ad0e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ad10:	78fb      	ldrb	r3, [r7, #3]
 800ad12:	b2db      	uxtb	r3, r3
 800ad14:	005b      	lsls	r3, r3, #1
 800ad16:	b2db      	uxtb	r3, r3
 800ad18:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ad1a:	78fb      	ldrb	r3, [r7, #3]
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad22:	2b80      	cmp	r3, #128	; 0x80
 800ad24:	d0ef      	beq.n	800ad06 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ad26:	4b27      	ldr	r3, [pc, #156]	; (800adc4 <xPortStartScheduler+0x134>)
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	f1c3 0307 	rsb	r3, r3, #7
 800ad2e:	2b04      	cmp	r3, #4
 800ad30:	d00a      	beq.n	800ad48 <xPortStartScheduler+0xb8>
	__asm volatile
 800ad32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad36:	f383 8811 	msr	BASEPRI, r3
 800ad3a:	f3bf 8f6f 	isb	sy
 800ad3e:	f3bf 8f4f 	dsb	sy
 800ad42:	60bb      	str	r3, [r7, #8]
}
 800ad44:	bf00      	nop
 800ad46:	e7fe      	b.n	800ad46 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ad48:	4b1e      	ldr	r3, [pc, #120]	; (800adc4 <xPortStartScheduler+0x134>)
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	021b      	lsls	r3, r3, #8
 800ad4e:	4a1d      	ldr	r2, [pc, #116]	; (800adc4 <xPortStartScheduler+0x134>)
 800ad50:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ad52:	4b1c      	ldr	r3, [pc, #112]	; (800adc4 <xPortStartScheduler+0x134>)
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ad5a:	4a1a      	ldr	r2, [pc, #104]	; (800adc4 <xPortStartScheduler+0x134>)
 800ad5c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	b2da      	uxtb	r2, r3
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ad66:	4b18      	ldr	r3, [pc, #96]	; (800adc8 <xPortStartScheduler+0x138>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a17      	ldr	r2, [pc, #92]	; (800adc8 <xPortStartScheduler+0x138>)
 800ad6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ad70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ad72:	4b15      	ldr	r3, [pc, #84]	; (800adc8 <xPortStartScheduler+0x138>)
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	4a14      	ldr	r2, [pc, #80]	; (800adc8 <xPortStartScheduler+0x138>)
 800ad78:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ad7c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ad7e:	f000 f8dd 	bl	800af3c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ad82:	4b12      	ldr	r3, [pc, #72]	; (800adcc <xPortStartScheduler+0x13c>)
 800ad84:	2200      	movs	r2, #0
 800ad86:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ad88:	f000 f8fc 	bl	800af84 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ad8c:	4b10      	ldr	r3, [pc, #64]	; (800add0 <xPortStartScheduler+0x140>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	4a0f      	ldr	r2, [pc, #60]	; (800add0 <xPortStartScheduler+0x140>)
 800ad92:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ad96:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ad98:	f7ff ff66 	bl	800ac68 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ad9c:	f7ff f84c 	bl	8009e38 <vTaskSwitchContext>
	prvTaskExitError();
 800ada0:	f7ff ff22 	bl	800abe8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ada4:	2300      	movs	r3, #0
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3718      	adds	r7, #24
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	e000ed00 	.word	0xe000ed00
 800adb4:	410fc271 	.word	0x410fc271
 800adb8:	410fc270 	.word	0x410fc270
 800adbc:	e000e400 	.word	0xe000e400
 800adc0:	20000e50 	.word	0x20000e50
 800adc4:	20000e54 	.word	0x20000e54
 800adc8:	e000ed20 	.word	0xe000ed20
 800adcc:	2000001c 	.word	0x2000001c
 800add0:	e000ef34 	.word	0xe000ef34

0800add4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800add4:	b480      	push	{r7}
 800add6:	b083      	sub	sp, #12
 800add8:	af00      	add	r7, sp, #0
	__asm volatile
 800adda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adde:	f383 8811 	msr	BASEPRI, r3
 800ade2:	f3bf 8f6f 	isb	sy
 800ade6:	f3bf 8f4f 	dsb	sy
 800adea:	607b      	str	r3, [r7, #4]
}
 800adec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800adee:	4b0f      	ldr	r3, [pc, #60]	; (800ae2c <vPortEnterCritical+0x58>)
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	3301      	adds	r3, #1
 800adf4:	4a0d      	ldr	r2, [pc, #52]	; (800ae2c <vPortEnterCritical+0x58>)
 800adf6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800adf8:	4b0c      	ldr	r3, [pc, #48]	; (800ae2c <vPortEnterCritical+0x58>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2b01      	cmp	r3, #1
 800adfe:	d10f      	bne.n	800ae20 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ae00:	4b0b      	ldr	r3, [pc, #44]	; (800ae30 <vPortEnterCritical+0x5c>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	b2db      	uxtb	r3, r3
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d00a      	beq.n	800ae20 <vPortEnterCritical+0x4c>
	__asm volatile
 800ae0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae0e:	f383 8811 	msr	BASEPRI, r3
 800ae12:	f3bf 8f6f 	isb	sy
 800ae16:	f3bf 8f4f 	dsb	sy
 800ae1a:	603b      	str	r3, [r7, #0]
}
 800ae1c:	bf00      	nop
 800ae1e:	e7fe      	b.n	800ae1e <vPortEnterCritical+0x4a>
	}
}
 800ae20:	bf00      	nop
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr
 800ae2c:	2000001c 	.word	0x2000001c
 800ae30:	e000ed04 	.word	0xe000ed04

0800ae34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ae34:	b480      	push	{r7}
 800ae36:	b083      	sub	sp, #12
 800ae38:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ae3a:	4b12      	ldr	r3, [pc, #72]	; (800ae84 <vPortExitCritical+0x50>)
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d10a      	bne.n	800ae58 <vPortExitCritical+0x24>
	__asm volatile
 800ae42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae46:	f383 8811 	msr	BASEPRI, r3
 800ae4a:	f3bf 8f6f 	isb	sy
 800ae4e:	f3bf 8f4f 	dsb	sy
 800ae52:	607b      	str	r3, [r7, #4]
}
 800ae54:	bf00      	nop
 800ae56:	e7fe      	b.n	800ae56 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ae58:	4b0a      	ldr	r3, [pc, #40]	; (800ae84 <vPortExitCritical+0x50>)
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	3b01      	subs	r3, #1
 800ae5e:	4a09      	ldr	r2, [pc, #36]	; (800ae84 <vPortExitCritical+0x50>)
 800ae60:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ae62:	4b08      	ldr	r3, [pc, #32]	; (800ae84 <vPortExitCritical+0x50>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d105      	bne.n	800ae76 <vPortExitCritical+0x42>
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	f383 8811 	msr	BASEPRI, r3
}
 800ae74:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ae76:	bf00      	nop
 800ae78:	370c      	adds	r7, #12
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	2000001c 	.word	0x2000001c
	...

0800ae90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ae90:	f3ef 8009 	mrs	r0, PSP
 800ae94:	f3bf 8f6f 	isb	sy
 800ae98:	4b15      	ldr	r3, [pc, #84]	; (800aef0 <pxCurrentTCBConst>)
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	f01e 0f10 	tst.w	lr, #16
 800aea0:	bf08      	it	eq
 800aea2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aea6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeaa:	6010      	str	r0, [r2, #0]
 800aeac:	e92d 0009 	stmdb	sp!, {r0, r3}
 800aeb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800aeb4:	f380 8811 	msr	BASEPRI, r0
 800aeb8:	f3bf 8f4f 	dsb	sy
 800aebc:	f3bf 8f6f 	isb	sy
 800aec0:	f7fe ffba 	bl	8009e38 <vTaskSwitchContext>
 800aec4:	f04f 0000 	mov.w	r0, #0
 800aec8:	f380 8811 	msr	BASEPRI, r0
 800aecc:	bc09      	pop	{r0, r3}
 800aece:	6819      	ldr	r1, [r3, #0]
 800aed0:	6808      	ldr	r0, [r1, #0]
 800aed2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aed6:	f01e 0f10 	tst.w	lr, #16
 800aeda:	bf08      	it	eq
 800aedc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aee0:	f380 8809 	msr	PSP, r0
 800aee4:	f3bf 8f6f 	isb	sy
 800aee8:	4770      	bx	lr
 800aeea:	bf00      	nop
 800aeec:	f3af 8000 	nop.w

0800aef0 <pxCurrentTCBConst>:
 800aef0:	20000824 	.word	0x20000824
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aef4:	bf00      	nop
 800aef6:	bf00      	nop

0800aef8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b082      	sub	sp, #8
 800aefc:	af00      	add	r7, sp, #0
	__asm volatile
 800aefe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af02:	f383 8811 	msr	BASEPRI, r3
 800af06:	f3bf 8f6f 	isb	sy
 800af0a:	f3bf 8f4f 	dsb	sy
 800af0e:	607b      	str	r3, [r7, #4]
}
 800af10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800af12:	f7fe fed7 	bl	8009cc4 <xTaskIncrementTick>
 800af16:	4603      	mov	r3, r0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d003      	beq.n	800af24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800af1c:	4b06      	ldr	r3, [pc, #24]	; (800af38 <xPortSysTickHandler+0x40>)
 800af1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af22:	601a      	str	r2, [r3, #0]
 800af24:	2300      	movs	r3, #0
 800af26:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	f383 8811 	msr	BASEPRI, r3
}
 800af2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800af30:	bf00      	nop
 800af32:	3708      	adds	r7, #8
 800af34:	46bd      	mov	sp, r7
 800af36:	bd80      	pop	{r7, pc}
 800af38:	e000ed04 	.word	0xe000ed04

0800af3c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800af3c:	b480      	push	{r7}
 800af3e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800af40:	4b0b      	ldr	r3, [pc, #44]	; (800af70 <vPortSetupTimerInterrupt+0x34>)
 800af42:	2200      	movs	r2, #0
 800af44:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800af46:	4b0b      	ldr	r3, [pc, #44]	; (800af74 <vPortSetupTimerInterrupt+0x38>)
 800af48:	2200      	movs	r2, #0
 800af4a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800af4c:	4b0a      	ldr	r3, [pc, #40]	; (800af78 <vPortSetupTimerInterrupt+0x3c>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	4a0a      	ldr	r2, [pc, #40]	; (800af7c <vPortSetupTimerInterrupt+0x40>)
 800af52:	fba2 2303 	umull	r2, r3, r2, r3
 800af56:	099b      	lsrs	r3, r3, #6
 800af58:	4a09      	ldr	r2, [pc, #36]	; (800af80 <vPortSetupTimerInterrupt+0x44>)
 800af5a:	3b01      	subs	r3, #1
 800af5c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800af5e:	4b04      	ldr	r3, [pc, #16]	; (800af70 <vPortSetupTimerInterrupt+0x34>)
 800af60:	2207      	movs	r2, #7
 800af62:	601a      	str	r2, [r3, #0]
}
 800af64:	bf00      	nop
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop
 800af70:	e000e010 	.word	0xe000e010
 800af74:	e000e018 	.word	0xe000e018
 800af78:	20000010 	.word	0x20000010
 800af7c:	10624dd3 	.word	0x10624dd3
 800af80:	e000e014 	.word	0xe000e014

0800af84 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800af84:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800af94 <vPortEnableVFP+0x10>
 800af88:	6801      	ldr	r1, [r0, #0]
 800af8a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800af8e:	6001      	str	r1, [r0, #0]
 800af90:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800af92:	bf00      	nop
 800af94:	e000ed88 	.word	0xe000ed88

0800af98 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800af98:	b480      	push	{r7}
 800af9a:	b085      	sub	sp, #20
 800af9c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800af9e:	f3ef 8305 	mrs	r3, IPSR
 800afa2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2b0f      	cmp	r3, #15
 800afa8:	d914      	bls.n	800afd4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800afaa:	4a17      	ldr	r2, [pc, #92]	; (800b008 <vPortValidateInterruptPriority+0x70>)
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	4413      	add	r3, r2
 800afb0:	781b      	ldrb	r3, [r3, #0]
 800afb2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800afb4:	4b15      	ldr	r3, [pc, #84]	; (800b00c <vPortValidateInterruptPriority+0x74>)
 800afb6:	781b      	ldrb	r3, [r3, #0]
 800afb8:	7afa      	ldrb	r2, [r7, #11]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d20a      	bcs.n	800afd4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800afbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afc2:	f383 8811 	msr	BASEPRI, r3
 800afc6:	f3bf 8f6f 	isb	sy
 800afca:	f3bf 8f4f 	dsb	sy
 800afce:	607b      	str	r3, [r7, #4]
}
 800afd0:	bf00      	nop
 800afd2:	e7fe      	b.n	800afd2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800afd4:	4b0e      	ldr	r3, [pc, #56]	; (800b010 <vPortValidateInterruptPriority+0x78>)
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800afdc:	4b0d      	ldr	r3, [pc, #52]	; (800b014 <vPortValidateInterruptPriority+0x7c>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	429a      	cmp	r2, r3
 800afe2:	d90a      	bls.n	800affa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800afe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800afe8:	f383 8811 	msr	BASEPRI, r3
 800afec:	f3bf 8f6f 	isb	sy
 800aff0:	f3bf 8f4f 	dsb	sy
 800aff4:	603b      	str	r3, [r7, #0]
}
 800aff6:	bf00      	nop
 800aff8:	e7fe      	b.n	800aff8 <vPortValidateInterruptPriority+0x60>
	}
 800affa:	bf00      	nop
 800affc:	3714      	adds	r7, #20
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr
 800b006:	bf00      	nop
 800b008:	e000e3f0 	.word	0xe000e3f0
 800b00c:	20000e50 	.word	0x20000e50
 800b010:	e000ed0c 	.word	0xe000ed0c
 800b014:	20000e54 	.word	0x20000e54

0800b018 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b08a      	sub	sp, #40	; 0x28
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b020:	2300      	movs	r3, #0
 800b022:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b024:	f7fe fd92 	bl	8009b4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b028:	4b5b      	ldr	r3, [pc, #364]	; (800b198 <pvPortMalloc+0x180>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d101      	bne.n	800b034 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b030:	f000 f920 	bl	800b274 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b034:	4b59      	ldr	r3, [pc, #356]	; (800b19c <pvPortMalloc+0x184>)
 800b036:	681a      	ldr	r2, [r3, #0]
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	4013      	ands	r3, r2
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	f040 8093 	bne.w	800b168 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d01d      	beq.n	800b084 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b048:	2208      	movs	r2, #8
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	4413      	add	r3, r2
 800b04e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f003 0307 	and.w	r3, r3, #7
 800b056:	2b00      	cmp	r3, #0
 800b058:	d014      	beq.n	800b084 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f023 0307 	bic.w	r3, r3, #7
 800b060:	3308      	adds	r3, #8
 800b062:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f003 0307 	and.w	r3, r3, #7
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d00a      	beq.n	800b084 <pvPortMalloc+0x6c>
	__asm volatile
 800b06e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b072:	f383 8811 	msr	BASEPRI, r3
 800b076:	f3bf 8f6f 	isb	sy
 800b07a:	f3bf 8f4f 	dsb	sy
 800b07e:	617b      	str	r3, [r7, #20]
}
 800b080:	bf00      	nop
 800b082:	e7fe      	b.n	800b082 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d06e      	beq.n	800b168 <pvPortMalloc+0x150>
 800b08a:	4b45      	ldr	r3, [pc, #276]	; (800b1a0 <pvPortMalloc+0x188>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	687a      	ldr	r2, [r7, #4]
 800b090:	429a      	cmp	r2, r3
 800b092:	d869      	bhi.n	800b168 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b094:	4b43      	ldr	r3, [pc, #268]	; (800b1a4 <pvPortMalloc+0x18c>)
 800b096:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b098:	4b42      	ldr	r3, [pc, #264]	; (800b1a4 <pvPortMalloc+0x18c>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b09e:	e004      	b.n	800b0aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b0a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b0aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	687a      	ldr	r2, [r7, #4]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d903      	bls.n	800b0bc <pvPortMalloc+0xa4>
 800b0b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d1f1      	bne.n	800b0a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b0bc:	4b36      	ldr	r3, [pc, #216]	; (800b198 <pvPortMalloc+0x180>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d050      	beq.n	800b168 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b0c6:	6a3b      	ldr	r3, [r7, #32]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	2208      	movs	r2, #8
 800b0cc:	4413      	add	r3, r2
 800b0ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d2:	681a      	ldr	r2, [r3, #0]
 800b0d4:	6a3b      	ldr	r3, [r7, #32]
 800b0d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0da:	685a      	ldr	r2, [r3, #4]
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	1ad2      	subs	r2, r2, r3
 800b0e0:	2308      	movs	r3, #8
 800b0e2:	005b      	lsls	r3, r3, #1
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d91f      	bls.n	800b128 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b0e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b0f0:	69bb      	ldr	r3, [r7, #24]
 800b0f2:	f003 0307 	and.w	r3, r3, #7
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00a      	beq.n	800b110 <pvPortMalloc+0xf8>
	__asm volatile
 800b0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0fe:	f383 8811 	msr	BASEPRI, r3
 800b102:	f3bf 8f6f 	isb	sy
 800b106:	f3bf 8f4f 	dsb	sy
 800b10a:	613b      	str	r3, [r7, #16]
}
 800b10c:	bf00      	nop
 800b10e:	e7fe      	b.n	800b10e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b112:	685a      	ldr	r2, [r3, #4]
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	1ad2      	subs	r2, r2, r3
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b122:	69b8      	ldr	r0, [r7, #24]
 800b124:	f000 f908 	bl	800b338 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b128:	4b1d      	ldr	r3, [pc, #116]	; (800b1a0 <pvPortMalloc+0x188>)
 800b12a:	681a      	ldr	r2, [r3, #0]
 800b12c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	1ad3      	subs	r3, r2, r3
 800b132:	4a1b      	ldr	r2, [pc, #108]	; (800b1a0 <pvPortMalloc+0x188>)
 800b134:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b136:	4b1a      	ldr	r3, [pc, #104]	; (800b1a0 <pvPortMalloc+0x188>)
 800b138:	681a      	ldr	r2, [r3, #0]
 800b13a:	4b1b      	ldr	r3, [pc, #108]	; (800b1a8 <pvPortMalloc+0x190>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d203      	bcs.n	800b14a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b142:	4b17      	ldr	r3, [pc, #92]	; (800b1a0 <pvPortMalloc+0x188>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	4a18      	ldr	r2, [pc, #96]	; (800b1a8 <pvPortMalloc+0x190>)
 800b148:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14c:	685a      	ldr	r2, [r3, #4]
 800b14e:	4b13      	ldr	r3, [pc, #76]	; (800b19c <pvPortMalloc+0x184>)
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	431a      	orrs	r2, r3
 800b154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b156:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15a:	2200      	movs	r2, #0
 800b15c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b15e:	4b13      	ldr	r3, [pc, #76]	; (800b1ac <pvPortMalloc+0x194>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	3301      	adds	r3, #1
 800b164:	4a11      	ldr	r2, [pc, #68]	; (800b1ac <pvPortMalloc+0x194>)
 800b166:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b168:	f7fe fcfe 	bl	8009b68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	f003 0307 	and.w	r3, r3, #7
 800b172:	2b00      	cmp	r3, #0
 800b174:	d00a      	beq.n	800b18c <pvPortMalloc+0x174>
	__asm volatile
 800b176:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b17a:	f383 8811 	msr	BASEPRI, r3
 800b17e:	f3bf 8f6f 	isb	sy
 800b182:	f3bf 8f4f 	dsb	sy
 800b186:	60fb      	str	r3, [r7, #12]
}
 800b188:	bf00      	nop
 800b18a:	e7fe      	b.n	800b18a <pvPortMalloc+0x172>
	return pvReturn;
 800b18c:	69fb      	ldr	r3, [r7, #28]
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3728      	adds	r7, #40	; 0x28
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}
 800b196:	bf00      	nop
 800b198:	20001e00 	.word	0x20001e00
 800b19c:	20001e14 	.word	0x20001e14
 800b1a0:	20001e04 	.word	0x20001e04
 800b1a4:	20001df8 	.word	0x20001df8
 800b1a8:	20001e08 	.word	0x20001e08
 800b1ac:	20001e0c 	.word	0x20001e0c

0800b1b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b086      	sub	sp, #24
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d04d      	beq.n	800b25e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b1c2:	2308      	movs	r3, #8
 800b1c4:	425b      	negs	r3, r3
 800b1c6:	697a      	ldr	r2, [r7, #20]
 800b1c8:	4413      	add	r3, r2
 800b1ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b1cc:	697b      	ldr	r3, [r7, #20]
 800b1ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	685a      	ldr	r2, [r3, #4]
 800b1d4:	4b24      	ldr	r3, [pc, #144]	; (800b268 <vPortFree+0xb8>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4013      	ands	r3, r2
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d10a      	bne.n	800b1f4 <vPortFree+0x44>
	__asm volatile
 800b1de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1e2:	f383 8811 	msr	BASEPRI, r3
 800b1e6:	f3bf 8f6f 	isb	sy
 800b1ea:	f3bf 8f4f 	dsb	sy
 800b1ee:	60fb      	str	r3, [r7, #12]
}
 800b1f0:	bf00      	nop
 800b1f2:	e7fe      	b.n	800b1f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d00a      	beq.n	800b212 <vPortFree+0x62>
	__asm volatile
 800b1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b200:	f383 8811 	msr	BASEPRI, r3
 800b204:	f3bf 8f6f 	isb	sy
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	60bb      	str	r3, [r7, #8]
}
 800b20e:	bf00      	nop
 800b210:	e7fe      	b.n	800b210 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b212:	693b      	ldr	r3, [r7, #16]
 800b214:	685a      	ldr	r2, [r3, #4]
 800b216:	4b14      	ldr	r3, [pc, #80]	; (800b268 <vPortFree+0xb8>)
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4013      	ands	r3, r2
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d01e      	beq.n	800b25e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b220:	693b      	ldr	r3, [r7, #16]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d11a      	bne.n	800b25e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b228:	693b      	ldr	r3, [r7, #16]
 800b22a:	685a      	ldr	r2, [r3, #4]
 800b22c:	4b0e      	ldr	r3, [pc, #56]	; (800b268 <vPortFree+0xb8>)
 800b22e:	681b      	ldr	r3, [r3, #0]
 800b230:	43db      	mvns	r3, r3
 800b232:	401a      	ands	r2, r3
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b238:	f7fe fc88 	bl	8009b4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b23c:	693b      	ldr	r3, [r7, #16]
 800b23e:	685a      	ldr	r2, [r3, #4]
 800b240:	4b0a      	ldr	r3, [pc, #40]	; (800b26c <vPortFree+0xbc>)
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	4413      	add	r3, r2
 800b246:	4a09      	ldr	r2, [pc, #36]	; (800b26c <vPortFree+0xbc>)
 800b248:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b24a:	6938      	ldr	r0, [r7, #16]
 800b24c:	f000 f874 	bl	800b338 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b250:	4b07      	ldr	r3, [pc, #28]	; (800b270 <vPortFree+0xc0>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	3301      	adds	r3, #1
 800b256:	4a06      	ldr	r2, [pc, #24]	; (800b270 <vPortFree+0xc0>)
 800b258:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b25a:	f7fe fc85 	bl	8009b68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b25e:	bf00      	nop
 800b260:	3718      	adds	r7, #24
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	20001e14 	.word	0x20001e14
 800b26c:	20001e04 	.word	0x20001e04
 800b270:	20001e10 	.word	0x20001e10

0800b274 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b274:	b480      	push	{r7}
 800b276:	b085      	sub	sp, #20
 800b278:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b27a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800b27e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b280:	4b27      	ldr	r3, [pc, #156]	; (800b320 <prvHeapInit+0xac>)
 800b282:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	f003 0307 	and.w	r3, r3, #7
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d00c      	beq.n	800b2a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	3307      	adds	r3, #7
 800b292:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f023 0307 	bic.w	r3, r3, #7
 800b29a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b29c:	68ba      	ldr	r2, [r7, #8]
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	1ad3      	subs	r3, r2, r3
 800b2a2:	4a1f      	ldr	r2, [pc, #124]	; (800b320 <prvHeapInit+0xac>)
 800b2a4:	4413      	add	r3, r2
 800b2a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b2ac:	4a1d      	ldr	r2, [pc, #116]	; (800b324 <prvHeapInit+0xb0>)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b2b2:	4b1c      	ldr	r3, [pc, #112]	; (800b324 <prvHeapInit+0xb0>)
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	68ba      	ldr	r2, [r7, #8]
 800b2bc:	4413      	add	r3, r2
 800b2be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b2c0:	2208      	movs	r2, #8
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	1a9b      	subs	r3, r3, r2
 800b2c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	f023 0307 	bic.w	r3, r3, #7
 800b2ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	4a15      	ldr	r2, [pc, #84]	; (800b328 <prvHeapInit+0xb4>)
 800b2d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b2d6:	4b14      	ldr	r3, [pc, #80]	; (800b328 <prvHeapInit+0xb4>)
 800b2d8:	681b      	ldr	r3, [r3, #0]
 800b2da:	2200      	movs	r2, #0
 800b2dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b2de:	4b12      	ldr	r3, [pc, #72]	; (800b328 <prvHeapInit+0xb4>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	2200      	movs	r2, #0
 800b2e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	68fa      	ldr	r2, [r7, #12]
 800b2ee:	1ad2      	subs	r2, r2, r3
 800b2f0:	683b      	ldr	r3, [r7, #0]
 800b2f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b2f4:	4b0c      	ldr	r3, [pc, #48]	; (800b328 <prvHeapInit+0xb4>)
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	685b      	ldr	r3, [r3, #4]
 800b300:	4a0a      	ldr	r2, [pc, #40]	; (800b32c <prvHeapInit+0xb8>)
 800b302:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b304:	683b      	ldr	r3, [r7, #0]
 800b306:	685b      	ldr	r3, [r3, #4]
 800b308:	4a09      	ldr	r2, [pc, #36]	; (800b330 <prvHeapInit+0xbc>)
 800b30a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b30c:	4b09      	ldr	r3, [pc, #36]	; (800b334 <prvHeapInit+0xc0>)
 800b30e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b312:	601a      	str	r2, [r3, #0]
}
 800b314:	bf00      	nop
 800b316:	3714      	adds	r7, #20
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr
 800b320:	20000e58 	.word	0x20000e58
 800b324:	20001df8 	.word	0x20001df8
 800b328:	20001e00 	.word	0x20001e00
 800b32c:	20001e08 	.word	0x20001e08
 800b330:	20001e04 	.word	0x20001e04
 800b334:	20001e14 	.word	0x20001e14

0800b338 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b338:	b480      	push	{r7}
 800b33a:	b085      	sub	sp, #20
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b340:	4b28      	ldr	r3, [pc, #160]	; (800b3e4 <prvInsertBlockIntoFreeList+0xac>)
 800b342:	60fb      	str	r3, [r7, #12]
 800b344:	e002      	b.n	800b34c <prvInsertBlockIntoFreeList+0x14>
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	60fb      	str	r3, [r7, #12]
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	429a      	cmp	r2, r3
 800b354:	d8f7      	bhi.n	800b346 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	68ba      	ldr	r2, [r7, #8]
 800b360:	4413      	add	r3, r2
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	429a      	cmp	r2, r3
 800b366:	d108      	bne.n	800b37a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	685a      	ldr	r2, [r3, #4]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	441a      	add	r2, r3
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	685b      	ldr	r3, [r3, #4]
 800b382:	68ba      	ldr	r2, [r7, #8]
 800b384:	441a      	add	r2, r3
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d118      	bne.n	800b3c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	681a      	ldr	r2, [r3, #0]
 800b392:	4b15      	ldr	r3, [pc, #84]	; (800b3e8 <prvInsertBlockIntoFreeList+0xb0>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	429a      	cmp	r2, r3
 800b398:	d00d      	beq.n	800b3b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	685a      	ldr	r2, [r3, #4]
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	685b      	ldr	r3, [r3, #4]
 800b3a4:	441a      	add	r2, r3
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	601a      	str	r2, [r3, #0]
 800b3b4:	e008      	b.n	800b3c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b3b6:	4b0c      	ldr	r3, [pc, #48]	; (800b3e8 <prvInsertBlockIntoFreeList+0xb0>)
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	601a      	str	r2, [r3, #0]
 800b3be:	e003      	b.n	800b3c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b3c8:	68fa      	ldr	r2, [r7, #12]
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d002      	beq.n	800b3d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	687a      	ldr	r2, [r7, #4]
 800b3d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b3d6:	bf00      	nop
 800b3d8:	3714      	adds	r7, #20
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr
 800b3e2:	bf00      	nop
 800b3e4:	20001df8 	.word	0x20001df8
 800b3e8:	20001e00 	.word	0x20001e00

0800b3ec <__errno>:
 800b3ec:	4b01      	ldr	r3, [pc, #4]	; (800b3f4 <__errno+0x8>)
 800b3ee:	6818      	ldr	r0, [r3, #0]
 800b3f0:	4770      	bx	lr
 800b3f2:	bf00      	nop
 800b3f4:	20000020 	.word	0x20000020

0800b3f8 <__libc_init_array>:
 800b3f8:	b570      	push	{r4, r5, r6, lr}
 800b3fa:	4d0d      	ldr	r5, [pc, #52]	; (800b430 <__libc_init_array+0x38>)
 800b3fc:	4c0d      	ldr	r4, [pc, #52]	; (800b434 <__libc_init_array+0x3c>)
 800b3fe:	1b64      	subs	r4, r4, r5
 800b400:	10a4      	asrs	r4, r4, #2
 800b402:	2600      	movs	r6, #0
 800b404:	42a6      	cmp	r6, r4
 800b406:	d109      	bne.n	800b41c <__libc_init_array+0x24>
 800b408:	4d0b      	ldr	r5, [pc, #44]	; (800b438 <__libc_init_array+0x40>)
 800b40a:	4c0c      	ldr	r4, [pc, #48]	; (800b43c <__libc_init_array+0x44>)
 800b40c:	f001 f97c 	bl	800c708 <_init>
 800b410:	1b64      	subs	r4, r4, r5
 800b412:	10a4      	asrs	r4, r4, #2
 800b414:	2600      	movs	r6, #0
 800b416:	42a6      	cmp	r6, r4
 800b418:	d105      	bne.n	800b426 <__libc_init_array+0x2e>
 800b41a:	bd70      	pop	{r4, r5, r6, pc}
 800b41c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b420:	4798      	blx	r3
 800b422:	3601      	adds	r6, #1
 800b424:	e7ee      	b.n	800b404 <__libc_init_array+0xc>
 800b426:	f855 3b04 	ldr.w	r3, [r5], #4
 800b42a:	4798      	blx	r3
 800b42c:	3601      	adds	r6, #1
 800b42e:	e7f2      	b.n	800b416 <__libc_init_array+0x1e>
 800b430:	0800ca54 	.word	0x0800ca54
 800b434:	0800ca54 	.word	0x0800ca54
 800b438:	0800ca54 	.word	0x0800ca54
 800b43c:	0800ca58 	.word	0x0800ca58

0800b440 <__retarget_lock_acquire_recursive>:
 800b440:	4770      	bx	lr

0800b442 <__retarget_lock_release_recursive>:
 800b442:	4770      	bx	lr

0800b444 <memcpy>:
 800b444:	440a      	add	r2, r1
 800b446:	4291      	cmp	r1, r2
 800b448:	f100 33ff 	add.w	r3, r0, #4294967295
 800b44c:	d100      	bne.n	800b450 <memcpy+0xc>
 800b44e:	4770      	bx	lr
 800b450:	b510      	push	{r4, lr}
 800b452:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b456:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b45a:	4291      	cmp	r1, r2
 800b45c:	d1f9      	bne.n	800b452 <memcpy+0xe>
 800b45e:	bd10      	pop	{r4, pc}

0800b460 <memset>:
 800b460:	4402      	add	r2, r0
 800b462:	4603      	mov	r3, r0
 800b464:	4293      	cmp	r3, r2
 800b466:	d100      	bne.n	800b46a <memset+0xa>
 800b468:	4770      	bx	lr
 800b46a:	f803 1b01 	strb.w	r1, [r3], #1
 800b46e:	e7f9      	b.n	800b464 <memset+0x4>

0800b470 <_malloc_r>:
 800b470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b472:	1ccd      	adds	r5, r1, #3
 800b474:	f025 0503 	bic.w	r5, r5, #3
 800b478:	3508      	adds	r5, #8
 800b47a:	2d0c      	cmp	r5, #12
 800b47c:	bf38      	it	cc
 800b47e:	250c      	movcc	r5, #12
 800b480:	2d00      	cmp	r5, #0
 800b482:	4606      	mov	r6, r0
 800b484:	db01      	blt.n	800b48a <_malloc_r+0x1a>
 800b486:	42a9      	cmp	r1, r5
 800b488:	d903      	bls.n	800b492 <_malloc_r+0x22>
 800b48a:	230c      	movs	r3, #12
 800b48c:	6033      	str	r3, [r6, #0]
 800b48e:	2000      	movs	r0, #0
 800b490:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b492:	f000 f90f 	bl	800b6b4 <__malloc_lock>
 800b496:	4921      	ldr	r1, [pc, #132]	; (800b51c <_malloc_r+0xac>)
 800b498:	680a      	ldr	r2, [r1, #0]
 800b49a:	4614      	mov	r4, r2
 800b49c:	b99c      	cbnz	r4, 800b4c6 <_malloc_r+0x56>
 800b49e:	4f20      	ldr	r7, [pc, #128]	; (800b520 <_malloc_r+0xb0>)
 800b4a0:	683b      	ldr	r3, [r7, #0]
 800b4a2:	b923      	cbnz	r3, 800b4ae <_malloc_r+0x3e>
 800b4a4:	4621      	mov	r1, r4
 800b4a6:	4630      	mov	r0, r6
 800b4a8:	f000 f8a6 	bl	800b5f8 <_sbrk_r>
 800b4ac:	6038      	str	r0, [r7, #0]
 800b4ae:	4629      	mov	r1, r5
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	f000 f8a1 	bl	800b5f8 <_sbrk_r>
 800b4b6:	1c43      	adds	r3, r0, #1
 800b4b8:	d123      	bne.n	800b502 <_malloc_r+0x92>
 800b4ba:	230c      	movs	r3, #12
 800b4bc:	6033      	str	r3, [r6, #0]
 800b4be:	4630      	mov	r0, r6
 800b4c0:	f000 f8fe 	bl	800b6c0 <__malloc_unlock>
 800b4c4:	e7e3      	b.n	800b48e <_malloc_r+0x1e>
 800b4c6:	6823      	ldr	r3, [r4, #0]
 800b4c8:	1b5b      	subs	r3, r3, r5
 800b4ca:	d417      	bmi.n	800b4fc <_malloc_r+0x8c>
 800b4cc:	2b0b      	cmp	r3, #11
 800b4ce:	d903      	bls.n	800b4d8 <_malloc_r+0x68>
 800b4d0:	6023      	str	r3, [r4, #0]
 800b4d2:	441c      	add	r4, r3
 800b4d4:	6025      	str	r5, [r4, #0]
 800b4d6:	e004      	b.n	800b4e2 <_malloc_r+0x72>
 800b4d8:	6863      	ldr	r3, [r4, #4]
 800b4da:	42a2      	cmp	r2, r4
 800b4dc:	bf0c      	ite	eq
 800b4de:	600b      	streq	r3, [r1, #0]
 800b4e0:	6053      	strne	r3, [r2, #4]
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	f000 f8ec 	bl	800b6c0 <__malloc_unlock>
 800b4e8:	f104 000b 	add.w	r0, r4, #11
 800b4ec:	1d23      	adds	r3, r4, #4
 800b4ee:	f020 0007 	bic.w	r0, r0, #7
 800b4f2:	1ac2      	subs	r2, r0, r3
 800b4f4:	d0cc      	beq.n	800b490 <_malloc_r+0x20>
 800b4f6:	1a1b      	subs	r3, r3, r0
 800b4f8:	50a3      	str	r3, [r4, r2]
 800b4fa:	e7c9      	b.n	800b490 <_malloc_r+0x20>
 800b4fc:	4622      	mov	r2, r4
 800b4fe:	6864      	ldr	r4, [r4, #4]
 800b500:	e7cc      	b.n	800b49c <_malloc_r+0x2c>
 800b502:	1cc4      	adds	r4, r0, #3
 800b504:	f024 0403 	bic.w	r4, r4, #3
 800b508:	42a0      	cmp	r0, r4
 800b50a:	d0e3      	beq.n	800b4d4 <_malloc_r+0x64>
 800b50c:	1a21      	subs	r1, r4, r0
 800b50e:	4630      	mov	r0, r6
 800b510:	f000 f872 	bl	800b5f8 <_sbrk_r>
 800b514:	3001      	adds	r0, #1
 800b516:	d1dd      	bne.n	800b4d4 <_malloc_r+0x64>
 800b518:	e7cf      	b.n	800b4ba <_malloc_r+0x4a>
 800b51a:	bf00      	nop
 800b51c:	20001e18 	.word	0x20001e18
 800b520:	20001e1c 	.word	0x20001e1c

0800b524 <cleanup_glue>:
 800b524:	b538      	push	{r3, r4, r5, lr}
 800b526:	460c      	mov	r4, r1
 800b528:	6809      	ldr	r1, [r1, #0]
 800b52a:	4605      	mov	r5, r0
 800b52c:	b109      	cbz	r1, 800b532 <cleanup_glue+0xe>
 800b52e:	f7ff fff9 	bl	800b524 <cleanup_glue>
 800b532:	4621      	mov	r1, r4
 800b534:	4628      	mov	r0, r5
 800b536:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b53a:	f000 b8c7 	b.w	800b6cc <_free_r>
	...

0800b540 <_reclaim_reent>:
 800b540:	4b2c      	ldr	r3, [pc, #176]	; (800b5f4 <_reclaim_reent+0xb4>)
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	4283      	cmp	r3, r0
 800b546:	b570      	push	{r4, r5, r6, lr}
 800b548:	4604      	mov	r4, r0
 800b54a:	d051      	beq.n	800b5f0 <_reclaim_reent+0xb0>
 800b54c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800b54e:	b143      	cbz	r3, 800b562 <_reclaim_reent+0x22>
 800b550:	68db      	ldr	r3, [r3, #12]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d14a      	bne.n	800b5ec <_reclaim_reent+0xac>
 800b556:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b558:	6819      	ldr	r1, [r3, #0]
 800b55a:	b111      	cbz	r1, 800b562 <_reclaim_reent+0x22>
 800b55c:	4620      	mov	r0, r4
 800b55e:	f000 f8b5 	bl	800b6cc <_free_r>
 800b562:	6961      	ldr	r1, [r4, #20]
 800b564:	b111      	cbz	r1, 800b56c <_reclaim_reent+0x2c>
 800b566:	4620      	mov	r0, r4
 800b568:	f000 f8b0 	bl	800b6cc <_free_r>
 800b56c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800b56e:	b111      	cbz	r1, 800b576 <_reclaim_reent+0x36>
 800b570:	4620      	mov	r0, r4
 800b572:	f000 f8ab 	bl	800b6cc <_free_r>
 800b576:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800b578:	b111      	cbz	r1, 800b580 <_reclaim_reent+0x40>
 800b57a:	4620      	mov	r0, r4
 800b57c:	f000 f8a6 	bl	800b6cc <_free_r>
 800b580:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800b582:	b111      	cbz	r1, 800b58a <_reclaim_reent+0x4a>
 800b584:	4620      	mov	r0, r4
 800b586:	f000 f8a1 	bl	800b6cc <_free_r>
 800b58a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800b58c:	b111      	cbz	r1, 800b594 <_reclaim_reent+0x54>
 800b58e:	4620      	mov	r0, r4
 800b590:	f000 f89c 	bl	800b6cc <_free_r>
 800b594:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800b596:	b111      	cbz	r1, 800b59e <_reclaim_reent+0x5e>
 800b598:	4620      	mov	r0, r4
 800b59a:	f000 f897 	bl	800b6cc <_free_r>
 800b59e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800b5a0:	b111      	cbz	r1, 800b5a8 <_reclaim_reent+0x68>
 800b5a2:	4620      	mov	r0, r4
 800b5a4:	f000 f892 	bl	800b6cc <_free_r>
 800b5a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b5aa:	b111      	cbz	r1, 800b5b2 <_reclaim_reent+0x72>
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	f000 f88d 	bl	800b6cc <_free_r>
 800b5b2:	69a3      	ldr	r3, [r4, #24]
 800b5b4:	b1e3      	cbz	r3, 800b5f0 <_reclaim_reent+0xb0>
 800b5b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800b5b8:	4620      	mov	r0, r4
 800b5ba:	4798      	blx	r3
 800b5bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800b5be:	b1b9      	cbz	r1, 800b5f0 <_reclaim_reent+0xb0>
 800b5c0:	4620      	mov	r0, r4
 800b5c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b5c6:	f7ff bfad 	b.w	800b524 <cleanup_glue>
 800b5ca:	5949      	ldr	r1, [r1, r5]
 800b5cc:	b941      	cbnz	r1, 800b5e0 <_reclaim_reent+0xa0>
 800b5ce:	3504      	adds	r5, #4
 800b5d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5d2:	2d80      	cmp	r5, #128	; 0x80
 800b5d4:	68d9      	ldr	r1, [r3, #12]
 800b5d6:	d1f8      	bne.n	800b5ca <_reclaim_reent+0x8a>
 800b5d8:	4620      	mov	r0, r4
 800b5da:	f000 f877 	bl	800b6cc <_free_r>
 800b5de:	e7ba      	b.n	800b556 <_reclaim_reent+0x16>
 800b5e0:	680e      	ldr	r6, [r1, #0]
 800b5e2:	4620      	mov	r0, r4
 800b5e4:	f000 f872 	bl	800b6cc <_free_r>
 800b5e8:	4631      	mov	r1, r6
 800b5ea:	e7ef      	b.n	800b5cc <_reclaim_reent+0x8c>
 800b5ec:	2500      	movs	r5, #0
 800b5ee:	e7ef      	b.n	800b5d0 <_reclaim_reent+0x90>
 800b5f0:	bd70      	pop	{r4, r5, r6, pc}
 800b5f2:	bf00      	nop
 800b5f4:	20000020 	.word	0x20000020

0800b5f8 <_sbrk_r>:
 800b5f8:	b538      	push	{r3, r4, r5, lr}
 800b5fa:	4d06      	ldr	r5, [pc, #24]	; (800b614 <_sbrk_r+0x1c>)
 800b5fc:	2300      	movs	r3, #0
 800b5fe:	4604      	mov	r4, r0
 800b600:	4608      	mov	r0, r1
 800b602:	602b      	str	r3, [r5, #0]
 800b604:	f7f6 fa14 	bl	8001a30 <_sbrk>
 800b608:	1c43      	adds	r3, r0, #1
 800b60a:	d102      	bne.n	800b612 <_sbrk_r+0x1a>
 800b60c:	682b      	ldr	r3, [r5, #0]
 800b60e:	b103      	cbz	r3, 800b612 <_sbrk_r+0x1a>
 800b610:	6023      	str	r3, [r4, #0]
 800b612:	bd38      	pop	{r3, r4, r5, pc}
 800b614:	20002084 	.word	0x20002084

0800b618 <siprintf>:
 800b618:	b40e      	push	{r1, r2, r3}
 800b61a:	b500      	push	{lr}
 800b61c:	b09c      	sub	sp, #112	; 0x70
 800b61e:	ab1d      	add	r3, sp, #116	; 0x74
 800b620:	9002      	str	r0, [sp, #8]
 800b622:	9006      	str	r0, [sp, #24]
 800b624:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b628:	4809      	ldr	r0, [pc, #36]	; (800b650 <siprintf+0x38>)
 800b62a:	9107      	str	r1, [sp, #28]
 800b62c:	9104      	str	r1, [sp, #16]
 800b62e:	4909      	ldr	r1, [pc, #36]	; (800b654 <siprintf+0x3c>)
 800b630:	f853 2b04 	ldr.w	r2, [r3], #4
 800b634:	9105      	str	r1, [sp, #20]
 800b636:	6800      	ldr	r0, [r0, #0]
 800b638:	9301      	str	r3, [sp, #4]
 800b63a:	a902      	add	r1, sp, #8
 800b63c:	f000 f8f2 	bl	800b824 <_svfiprintf_r>
 800b640:	9b02      	ldr	r3, [sp, #8]
 800b642:	2200      	movs	r2, #0
 800b644:	701a      	strb	r2, [r3, #0]
 800b646:	b01c      	add	sp, #112	; 0x70
 800b648:	f85d eb04 	ldr.w	lr, [sp], #4
 800b64c:	b003      	add	sp, #12
 800b64e:	4770      	bx	lr
 800b650:	20000020 	.word	0x20000020
 800b654:	ffff0208 	.word	0xffff0208

0800b658 <siscanf>:
 800b658:	b40e      	push	{r1, r2, r3}
 800b65a:	b510      	push	{r4, lr}
 800b65c:	b09f      	sub	sp, #124	; 0x7c
 800b65e:	ac21      	add	r4, sp, #132	; 0x84
 800b660:	f44f 7101 	mov.w	r1, #516	; 0x204
 800b664:	f854 2b04 	ldr.w	r2, [r4], #4
 800b668:	9201      	str	r2, [sp, #4]
 800b66a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800b66e:	9004      	str	r0, [sp, #16]
 800b670:	9008      	str	r0, [sp, #32]
 800b672:	f7f4 fdad 	bl	80001d0 <strlen>
 800b676:	4b0c      	ldr	r3, [pc, #48]	; (800b6a8 <siscanf+0x50>)
 800b678:	9005      	str	r0, [sp, #20]
 800b67a:	9009      	str	r0, [sp, #36]	; 0x24
 800b67c:	930d      	str	r3, [sp, #52]	; 0x34
 800b67e:	480b      	ldr	r0, [pc, #44]	; (800b6ac <siscanf+0x54>)
 800b680:	9a01      	ldr	r2, [sp, #4]
 800b682:	6800      	ldr	r0, [r0, #0]
 800b684:	9403      	str	r4, [sp, #12]
 800b686:	2300      	movs	r3, #0
 800b688:	9311      	str	r3, [sp, #68]	; 0x44
 800b68a:	9316      	str	r3, [sp, #88]	; 0x58
 800b68c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b690:	f8ad 301e 	strh.w	r3, [sp, #30]
 800b694:	a904      	add	r1, sp, #16
 800b696:	4623      	mov	r3, r4
 800b698:	f000 fa1e 	bl	800bad8 <__ssvfiscanf_r>
 800b69c:	b01f      	add	sp, #124	; 0x7c
 800b69e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6a2:	b003      	add	sp, #12
 800b6a4:	4770      	bx	lr
 800b6a6:	bf00      	nop
 800b6a8:	0800b6b1 	.word	0x0800b6b1
 800b6ac:	20000020 	.word	0x20000020

0800b6b0 <__seofread>:
 800b6b0:	2000      	movs	r0, #0
 800b6b2:	4770      	bx	lr

0800b6b4 <__malloc_lock>:
 800b6b4:	4801      	ldr	r0, [pc, #4]	; (800b6bc <__malloc_lock+0x8>)
 800b6b6:	f7ff bec3 	b.w	800b440 <__retarget_lock_acquire_recursive>
 800b6ba:	bf00      	nop
 800b6bc:	2000207c 	.word	0x2000207c

0800b6c0 <__malloc_unlock>:
 800b6c0:	4801      	ldr	r0, [pc, #4]	; (800b6c8 <__malloc_unlock+0x8>)
 800b6c2:	f7ff bebe 	b.w	800b442 <__retarget_lock_release_recursive>
 800b6c6:	bf00      	nop
 800b6c8:	2000207c 	.word	0x2000207c

0800b6cc <_free_r>:
 800b6cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b6ce:	2900      	cmp	r1, #0
 800b6d0:	d048      	beq.n	800b764 <_free_r+0x98>
 800b6d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6d6:	9001      	str	r0, [sp, #4]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	f1a1 0404 	sub.w	r4, r1, #4
 800b6de:	bfb8      	it	lt
 800b6e0:	18e4      	addlt	r4, r4, r3
 800b6e2:	f7ff ffe7 	bl	800b6b4 <__malloc_lock>
 800b6e6:	4a20      	ldr	r2, [pc, #128]	; (800b768 <_free_r+0x9c>)
 800b6e8:	9801      	ldr	r0, [sp, #4]
 800b6ea:	6813      	ldr	r3, [r2, #0]
 800b6ec:	4615      	mov	r5, r2
 800b6ee:	b933      	cbnz	r3, 800b6fe <_free_r+0x32>
 800b6f0:	6063      	str	r3, [r4, #4]
 800b6f2:	6014      	str	r4, [r2, #0]
 800b6f4:	b003      	add	sp, #12
 800b6f6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6fa:	f7ff bfe1 	b.w	800b6c0 <__malloc_unlock>
 800b6fe:	42a3      	cmp	r3, r4
 800b700:	d90b      	bls.n	800b71a <_free_r+0x4e>
 800b702:	6821      	ldr	r1, [r4, #0]
 800b704:	1862      	adds	r2, r4, r1
 800b706:	4293      	cmp	r3, r2
 800b708:	bf04      	itt	eq
 800b70a:	681a      	ldreq	r2, [r3, #0]
 800b70c:	685b      	ldreq	r3, [r3, #4]
 800b70e:	6063      	str	r3, [r4, #4]
 800b710:	bf04      	itt	eq
 800b712:	1852      	addeq	r2, r2, r1
 800b714:	6022      	streq	r2, [r4, #0]
 800b716:	602c      	str	r4, [r5, #0]
 800b718:	e7ec      	b.n	800b6f4 <_free_r+0x28>
 800b71a:	461a      	mov	r2, r3
 800b71c:	685b      	ldr	r3, [r3, #4]
 800b71e:	b10b      	cbz	r3, 800b724 <_free_r+0x58>
 800b720:	42a3      	cmp	r3, r4
 800b722:	d9fa      	bls.n	800b71a <_free_r+0x4e>
 800b724:	6811      	ldr	r1, [r2, #0]
 800b726:	1855      	adds	r5, r2, r1
 800b728:	42a5      	cmp	r5, r4
 800b72a:	d10b      	bne.n	800b744 <_free_r+0x78>
 800b72c:	6824      	ldr	r4, [r4, #0]
 800b72e:	4421      	add	r1, r4
 800b730:	1854      	adds	r4, r2, r1
 800b732:	42a3      	cmp	r3, r4
 800b734:	6011      	str	r1, [r2, #0]
 800b736:	d1dd      	bne.n	800b6f4 <_free_r+0x28>
 800b738:	681c      	ldr	r4, [r3, #0]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	6053      	str	r3, [r2, #4]
 800b73e:	4421      	add	r1, r4
 800b740:	6011      	str	r1, [r2, #0]
 800b742:	e7d7      	b.n	800b6f4 <_free_r+0x28>
 800b744:	d902      	bls.n	800b74c <_free_r+0x80>
 800b746:	230c      	movs	r3, #12
 800b748:	6003      	str	r3, [r0, #0]
 800b74a:	e7d3      	b.n	800b6f4 <_free_r+0x28>
 800b74c:	6825      	ldr	r5, [r4, #0]
 800b74e:	1961      	adds	r1, r4, r5
 800b750:	428b      	cmp	r3, r1
 800b752:	bf04      	itt	eq
 800b754:	6819      	ldreq	r1, [r3, #0]
 800b756:	685b      	ldreq	r3, [r3, #4]
 800b758:	6063      	str	r3, [r4, #4]
 800b75a:	bf04      	itt	eq
 800b75c:	1949      	addeq	r1, r1, r5
 800b75e:	6021      	streq	r1, [r4, #0]
 800b760:	6054      	str	r4, [r2, #4]
 800b762:	e7c7      	b.n	800b6f4 <_free_r+0x28>
 800b764:	b003      	add	sp, #12
 800b766:	bd30      	pop	{r4, r5, pc}
 800b768:	20001e18 	.word	0x20001e18

0800b76c <__ssputs_r>:
 800b76c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b770:	688e      	ldr	r6, [r1, #8]
 800b772:	429e      	cmp	r6, r3
 800b774:	4682      	mov	sl, r0
 800b776:	460c      	mov	r4, r1
 800b778:	4690      	mov	r8, r2
 800b77a:	461f      	mov	r7, r3
 800b77c:	d838      	bhi.n	800b7f0 <__ssputs_r+0x84>
 800b77e:	898a      	ldrh	r2, [r1, #12]
 800b780:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b784:	d032      	beq.n	800b7ec <__ssputs_r+0x80>
 800b786:	6825      	ldr	r5, [r4, #0]
 800b788:	6909      	ldr	r1, [r1, #16]
 800b78a:	eba5 0901 	sub.w	r9, r5, r1
 800b78e:	6965      	ldr	r5, [r4, #20]
 800b790:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b794:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b798:	3301      	adds	r3, #1
 800b79a:	444b      	add	r3, r9
 800b79c:	106d      	asrs	r5, r5, #1
 800b79e:	429d      	cmp	r5, r3
 800b7a0:	bf38      	it	cc
 800b7a2:	461d      	movcc	r5, r3
 800b7a4:	0553      	lsls	r3, r2, #21
 800b7a6:	d531      	bpl.n	800b80c <__ssputs_r+0xa0>
 800b7a8:	4629      	mov	r1, r5
 800b7aa:	f7ff fe61 	bl	800b470 <_malloc_r>
 800b7ae:	4606      	mov	r6, r0
 800b7b0:	b950      	cbnz	r0, 800b7c8 <__ssputs_r+0x5c>
 800b7b2:	230c      	movs	r3, #12
 800b7b4:	f8ca 3000 	str.w	r3, [sl]
 800b7b8:	89a3      	ldrh	r3, [r4, #12]
 800b7ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7be:	81a3      	strh	r3, [r4, #12]
 800b7c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b7c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7c8:	6921      	ldr	r1, [r4, #16]
 800b7ca:	464a      	mov	r2, r9
 800b7cc:	f7ff fe3a 	bl	800b444 <memcpy>
 800b7d0:	89a3      	ldrh	r3, [r4, #12]
 800b7d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7da:	81a3      	strh	r3, [r4, #12]
 800b7dc:	6126      	str	r6, [r4, #16]
 800b7de:	6165      	str	r5, [r4, #20]
 800b7e0:	444e      	add	r6, r9
 800b7e2:	eba5 0509 	sub.w	r5, r5, r9
 800b7e6:	6026      	str	r6, [r4, #0]
 800b7e8:	60a5      	str	r5, [r4, #8]
 800b7ea:	463e      	mov	r6, r7
 800b7ec:	42be      	cmp	r6, r7
 800b7ee:	d900      	bls.n	800b7f2 <__ssputs_r+0x86>
 800b7f0:	463e      	mov	r6, r7
 800b7f2:	4632      	mov	r2, r6
 800b7f4:	6820      	ldr	r0, [r4, #0]
 800b7f6:	4641      	mov	r1, r8
 800b7f8:	f000 ff3e 	bl	800c678 <memmove>
 800b7fc:	68a3      	ldr	r3, [r4, #8]
 800b7fe:	6822      	ldr	r2, [r4, #0]
 800b800:	1b9b      	subs	r3, r3, r6
 800b802:	4432      	add	r2, r6
 800b804:	60a3      	str	r3, [r4, #8]
 800b806:	6022      	str	r2, [r4, #0]
 800b808:	2000      	movs	r0, #0
 800b80a:	e7db      	b.n	800b7c4 <__ssputs_r+0x58>
 800b80c:	462a      	mov	r2, r5
 800b80e:	f000 ff4d 	bl	800c6ac <_realloc_r>
 800b812:	4606      	mov	r6, r0
 800b814:	2800      	cmp	r0, #0
 800b816:	d1e1      	bne.n	800b7dc <__ssputs_r+0x70>
 800b818:	6921      	ldr	r1, [r4, #16]
 800b81a:	4650      	mov	r0, sl
 800b81c:	f7ff ff56 	bl	800b6cc <_free_r>
 800b820:	e7c7      	b.n	800b7b2 <__ssputs_r+0x46>
	...

0800b824 <_svfiprintf_r>:
 800b824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b828:	4698      	mov	r8, r3
 800b82a:	898b      	ldrh	r3, [r1, #12]
 800b82c:	061b      	lsls	r3, r3, #24
 800b82e:	b09d      	sub	sp, #116	; 0x74
 800b830:	4607      	mov	r7, r0
 800b832:	460d      	mov	r5, r1
 800b834:	4614      	mov	r4, r2
 800b836:	d50e      	bpl.n	800b856 <_svfiprintf_r+0x32>
 800b838:	690b      	ldr	r3, [r1, #16]
 800b83a:	b963      	cbnz	r3, 800b856 <_svfiprintf_r+0x32>
 800b83c:	2140      	movs	r1, #64	; 0x40
 800b83e:	f7ff fe17 	bl	800b470 <_malloc_r>
 800b842:	6028      	str	r0, [r5, #0]
 800b844:	6128      	str	r0, [r5, #16]
 800b846:	b920      	cbnz	r0, 800b852 <_svfiprintf_r+0x2e>
 800b848:	230c      	movs	r3, #12
 800b84a:	603b      	str	r3, [r7, #0]
 800b84c:	f04f 30ff 	mov.w	r0, #4294967295
 800b850:	e0d1      	b.n	800b9f6 <_svfiprintf_r+0x1d2>
 800b852:	2340      	movs	r3, #64	; 0x40
 800b854:	616b      	str	r3, [r5, #20]
 800b856:	2300      	movs	r3, #0
 800b858:	9309      	str	r3, [sp, #36]	; 0x24
 800b85a:	2320      	movs	r3, #32
 800b85c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b860:	f8cd 800c 	str.w	r8, [sp, #12]
 800b864:	2330      	movs	r3, #48	; 0x30
 800b866:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ba10 <_svfiprintf_r+0x1ec>
 800b86a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b86e:	f04f 0901 	mov.w	r9, #1
 800b872:	4623      	mov	r3, r4
 800b874:	469a      	mov	sl, r3
 800b876:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b87a:	b10a      	cbz	r2, 800b880 <_svfiprintf_r+0x5c>
 800b87c:	2a25      	cmp	r2, #37	; 0x25
 800b87e:	d1f9      	bne.n	800b874 <_svfiprintf_r+0x50>
 800b880:	ebba 0b04 	subs.w	fp, sl, r4
 800b884:	d00b      	beq.n	800b89e <_svfiprintf_r+0x7a>
 800b886:	465b      	mov	r3, fp
 800b888:	4622      	mov	r2, r4
 800b88a:	4629      	mov	r1, r5
 800b88c:	4638      	mov	r0, r7
 800b88e:	f7ff ff6d 	bl	800b76c <__ssputs_r>
 800b892:	3001      	adds	r0, #1
 800b894:	f000 80aa 	beq.w	800b9ec <_svfiprintf_r+0x1c8>
 800b898:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b89a:	445a      	add	r2, fp
 800b89c:	9209      	str	r2, [sp, #36]	; 0x24
 800b89e:	f89a 3000 	ldrb.w	r3, [sl]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	f000 80a2 	beq.w	800b9ec <_svfiprintf_r+0x1c8>
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	f04f 32ff 	mov.w	r2, #4294967295
 800b8ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8b2:	f10a 0a01 	add.w	sl, sl, #1
 800b8b6:	9304      	str	r3, [sp, #16]
 800b8b8:	9307      	str	r3, [sp, #28]
 800b8ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b8be:	931a      	str	r3, [sp, #104]	; 0x68
 800b8c0:	4654      	mov	r4, sl
 800b8c2:	2205      	movs	r2, #5
 800b8c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8c8:	4851      	ldr	r0, [pc, #324]	; (800ba10 <_svfiprintf_r+0x1ec>)
 800b8ca:	f7f4 fc89 	bl	80001e0 <memchr>
 800b8ce:	9a04      	ldr	r2, [sp, #16]
 800b8d0:	b9d8      	cbnz	r0, 800b90a <_svfiprintf_r+0xe6>
 800b8d2:	06d0      	lsls	r0, r2, #27
 800b8d4:	bf44      	itt	mi
 800b8d6:	2320      	movmi	r3, #32
 800b8d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8dc:	0711      	lsls	r1, r2, #28
 800b8de:	bf44      	itt	mi
 800b8e0:	232b      	movmi	r3, #43	; 0x2b
 800b8e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8e6:	f89a 3000 	ldrb.w	r3, [sl]
 800b8ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b8ec:	d015      	beq.n	800b91a <_svfiprintf_r+0xf6>
 800b8ee:	9a07      	ldr	r2, [sp, #28]
 800b8f0:	4654      	mov	r4, sl
 800b8f2:	2000      	movs	r0, #0
 800b8f4:	f04f 0c0a 	mov.w	ip, #10
 800b8f8:	4621      	mov	r1, r4
 800b8fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8fe:	3b30      	subs	r3, #48	; 0x30
 800b900:	2b09      	cmp	r3, #9
 800b902:	d94e      	bls.n	800b9a2 <_svfiprintf_r+0x17e>
 800b904:	b1b0      	cbz	r0, 800b934 <_svfiprintf_r+0x110>
 800b906:	9207      	str	r2, [sp, #28]
 800b908:	e014      	b.n	800b934 <_svfiprintf_r+0x110>
 800b90a:	eba0 0308 	sub.w	r3, r0, r8
 800b90e:	fa09 f303 	lsl.w	r3, r9, r3
 800b912:	4313      	orrs	r3, r2
 800b914:	9304      	str	r3, [sp, #16]
 800b916:	46a2      	mov	sl, r4
 800b918:	e7d2      	b.n	800b8c0 <_svfiprintf_r+0x9c>
 800b91a:	9b03      	ldr	r3, [sp, #12]
 800b91c:	1d19      	adds	r1, r3, #4
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	9103      	str	r1, [sp, #12]
 800b922:	2b00      	cmp	r3, #0
 800b924:	bfbb      	ittet	lt
 800b926:	425b      	neglt	r3, r3
 800b928:	f042 0202 	orrlt.w	r2, r2, #2
 800b92c:	9307      	strge	r3, [sp, #28]
 800b92e:	9307      	strlt	r3, [sp, #28]
 800b930:	bfb8      	it	lt
 800b932:	9204      	strlt	r2, [sp, #16]
 800b934:	7823      	ldrb	r3, [r4, #0]
 800b936:	2b2e      	cmp	r3, #46	; 0x2e
 800b938:	d10c      	bne.n	800b954 <_svfiprintf_r+0x130>
 800b93a:	7863      	ldrb	r3, [r4, #1]
 800b93c:	2b2a      	cmp	r3, #42	; 0x2a
 800b93e:	d135      	bne.n	800b9ac <_svfiprintf_r+0x188>
 800b940:	9b03      	ldr	r3, [sp, #12]
 800b942:	1d1a      	adds	r2, r3, #4
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	9203      	str	r2, [sp, #12]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	bfb8      	it	lt
 800b94c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b950:	3402      	adds	r4, #2
 800b952:	9305      	str	r3, [sp, #20]
 800b954:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ba20 <_svfiprintf_r+0x1fc>
 800b958:	7821      	ldrb	r1, [r4, #0]
 800b95a:	2203      	movs	r2, #3
 800b95c:	4650      	mov	r0, sl
 800b95e:	f7f4 fc3f 	bl	80001e0 <memchr>
 800b962:	b140      	cbz	r0, 800b976 <_svfiprintf_r+0x152>
 800b964:	2340      	movs	r3, #64	; 0x40
 800b966:	eba0 000a 	sub.w	r0, r0, sl
 800b96a:	fa03 f000 	lsl.w	r0, r3, r0
 800b96e:	9b04      	ldr	r3, [sp, #16]
 800b970:	4303      	orrs	r3, r0
 800b972:	3401      	adds	r4, #1
 800b974:	9304      	str	r3, [sp, #16]
 800b976:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b97a:	4826      	ldr	r0, [pc, #152]	; (800ba14 <_svfiprintf_r+0x1f0>)
 800b97c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b980:	2206      	movs	r2, #6
 800b982:	f7f4 fc2d 	bl	80001e0 <memchr>
 800b986:	2800      	cmp	r0, #0
 800b988:	d038      	beq.n	800b9fc <_svfiprintf_r+0x1d8>
 800b98a:	4b23      	ldr	r3, [pc, #140]	; (800ba18 <_svfiprintf_r+0x1f4>)
 800b98c:	bb1b      	cbnz	r3, 800b9d6 <_svfiprintf_r+0x1b2>
 800b98e:	9b03      	ldr	r3, [sp, #12]
 800b990:	3307      	adds	r3, #7
 800b992:	f023 0307 	bic.w	r3, r3, #7
 800b996:	3308      	adds	r3, #8
 800b998:	9303      	str	r3, [sp, #12]
 800b99a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b99c:	4433      	add	r3, r6
 800b99e:	9309      	str	r3, [sp, #36]	; 0x24
 800b9a0:	e767      	b.n	800b872 <_svfiprintf_r+0x4e>
 800b9a2:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9a6:	460c      	mov	r4, r1
 800b9a8:	2001      	movs	r0, #1
 800b9aa:	e7a5      	b.n	800b8f8 <_svfiprintf_r+0xd4>
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	3401      	adds	r4, #1
 800b9b0:	9305      	str	r3, [sp, #20]
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	f04f 0c0a 	mov.w	ip, #10
 800b9b8:	4620      	mov	r0, r4
 800b9ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9be:	3a30      	subs	r2, #48	; 0x30
 800b9c0:	2a09      	cmp	r2, #9
 800b9c2:	d903      	bls.n	800b9cc <_svfiprintf_r+0x1a8>
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d0c5      	beq.n	800b954 <_svfiprintf_r+0x130>
 800b9c8:	9105      	str	r1, [sp, #20]
 800b9ca:	e7c3      	b.n	800b954 <_svfiprintf_r+0x130>
 800b9cc:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9d0:	4604      	mov	r4, r0
 800b9d2:	2301      	movs	r3, #1
 800b9d4:	e7f0      	b.n	800b9b8 <_svfiprintf_r+0x194>
 800b9d6:	ab03      	add	r3, sp, #12
 800b9d8:	9300      	str	r3, [sp, #0]
 800b9da:	462a      	mov	r2, r5
 800b9dc:	4b0f      	ldr	r3, [pc, #60]	; (800ba1c <_svfiprintf_r+0x1f8>)
 800b9de:	a904      	add	r1, sp, #16
 800b9e0:	4638      	mov	r0, r7
 800b9e2:	f3af 8000 	nop.w
 800b9e6:	1c42      	adds	r2, r0, #1
 800b9e8:	4606      	mov	r6, r0
 800b9ea:	d1d6      	bne.n	800b99a <_svfiprintf_r+0x176>
 800b9ec:	89ab      	ldrh	r3, [r5, #12]
 800b9ee:	065b      	lsls	r3, r3, #25
 800b9f0:	f53f af2c 	bmi.w	800b84c <_svfiprintf_r+0x28>
 800b9f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9f6:	b01d      	add	sp, #116	; 0x74
 800b9f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9fc:	ab03      	add	r3, sp, #12
 800b9fe:	9300      	str	r3, [sp, #0]
 800ba00:	462a      	mov	r2, r5
 800ba02:	4b06      	ldr	r3, [pc, #24]	; (800ba1c <_svfiprintf_r+0x1f8>)
 800ba04:	a904      	add	r1, sp, #16
 800ba06:	4638      	mov	r0, r7
 800ba08:	f000 fa4c 	bl	800bea4 <_printf_i>
 800ba0c:	e7eb      	b.n	800b9e6 <_svfiprintf_r+0x1c2>
 800ba0e:	bf00      	nop
 800ba10:	0800c8fc 	.word	0x0800c8fc
 800ba14:	0800c906 	.word	0x0800c906
 800ba18:	00000000 	.word	0x00000000
 800ba1c:	0800b76d 	.word	0x0800b76d
 800ba20:	0800c902 	.word	0x0800c902

0800ba24 <_sungetc_r>:
 800ba24:	b538      	push	{r3, r4, r5, lr}
 800ba26:	1c4b      	adds	r3, r1, #1
 800ba28:	4614      	mov	r4, r2
 800ba2a:	d103      	bne.n	800ba34 <_sungetc_r+0x10>
 800ba2c:	f04f 35ff 	mov.w	r5, #4294967295
 800ba30:	4628      	mov	r0, r5
 800ba32:	bd38      	pop	{r3, r4, r5, pc}
 800ba34:	8993      	ldrh	r3, [r2, #12]
 800ba36:	f023 0320 	bic.w	r3, r3, #32
 800ba3a:	8193      	strh	r3, [r2, #12]
 800ba3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba3e:	6852      	ldr	r2, [r2, #4]
 800ba40:	b2cd      	uxtb	r5, r1
 800ba42:	b18b      	cbz	r3, 800ba68 <_sungetc_r+0x44>
 800ba44:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800ba46:	4293      	cmp	r3, r2
 800ba48:	dd08      	ble.n	800ba5c <_sungetc_r+0x38>
 800ba4a:	6823      	ldr	r3, [r4, #0]
 800ba4c:	1e5a      	subs	r2, r3, #1
 800ba4e:	6022      	str	r2, [r4, #0]
 800ba50:	f803 5c01 	strb.w	r5, [r3, #-1]
 800ba54:	6863      	ldr	r3, [r4, #4]
 800ba56:	3301      	adds	r3, #1
 800ba58:	6063      	str	r3, [r4, #4]
 800ba5a:	e7e9      	b.n	800ba30 <_sungetc_r+0xc>
 800ba5c:	4621      	mov	r1, r4
 800ba5e:	f000 fdd1 	bl	800c604 <__submore>
 800ba62:	2800      	cmp	r0, #0
 800ba64:	d0f1      	beq.n	800ba4a <_sungetc_r+0x26>
 800ba66:	e7e1      	b.n	800ba2c <_sungetc_r+0x8>
 800ba68:	6921      	ldr	r1, [r4, #16]
 800ba6a:	6823      	ldr	r3, [r4, #0]
 800ba6c:	b151      	cbz	r1, 800ba84 <_sungetc_r+0x60>
 800ba6e:	4299      	cmp	r1, r3
 800ba70:	d208      	bcs.n	800ba84 <_sungetc_r+0x60>
 800ba72:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800ba76:	42a9      	cmp	r1, r5
 800ba78:	d104      	bne.n	800ba84 <_sungetc_r+0x60>
 800ba7a:	3b01      	subs	r3, #1
 800ba7c:	3201      	adds	r2, #1
 800ba7e:	6023      	str	r3, [r4, #0]
 800ba80:	6062      	str	r2, [r4, #4]
 800ba82:	e7d5      	b.n	800ba30 <_sungetc_r+0xc>
 800ba84:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800ba88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ba8c:	6363      	str	r3, [r4, #52]	; 0x34
 800ba8e:	2303      	movs	r3, #3
 800ba90:	63a3      	str	r3, [r4, #56]	; 0x38
 800ba92:	4623      	mov	r3, r4
 800ba94:	f803 5f46 	strb.w	r5, [r3, #70]!
 800ba98:	6023      	str	r3, [r4, #0]
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	e7dc      	b.n	800ba58 <_sungetc_r+0x34>

0800ba9e <__ssrefill_r>:
 800ba9e:	b510      	push	{r4, lr}
 800baa0:	460c      	mov	r4, r1
 800baa2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800baa4:	b169      	cbz	r1, 800bac2 <__ssrefill_r+0x24>
 800baa6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800baaa:	4299      	cmp	r1, r3
 800baac:	d001      	beq.n	800bab2 <__ssrefill_r+0x14>
 800baae:	f7ff fe0d 	bl	800b6cc <_free_r>
 800bab2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bab4:	6063      	str	r3, [r4, #4]
 800bab6:	2000      	movs	r0, #0
 800bab8:	6360      	str	r0, [r4, #52]	; 0x34
 800baba:	b113      	cbz	r3, 800bac2 <__ssrefill_r+0x24>
 800babc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800babe:	6023      	str	r3, [r4, #0]
 800bac0:	bd10      	pop	{r4, pc}
 800bac2:	6923      	ldr	r3, [r4, #16]
 800bac4:	6023      	str	r3, [r4, #0]
 800bac6:	2300      	movs	r3, #0
 800bac8:	6063      	str	r3, [r4, #4]
 800baca:	89a3      	ldrh	r3, [r4, #12]
 800bacc:	f043 0320 	orr.w	r3, r3, #32
 800bad0:	81a3      	strh	r3, [r4, #12]
 800bad2:	f04f 30ff 	mov.w	r0, #4294967295
 800bad6:	e7f3      	b.n	800bac0 <__ssrefill_r+0x22>

0800bad8 <__ssvfiscanf_r>:
 800bad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800badc:	460c      	mov	r4, r1
 800bade:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800bae2:	2100      	movs	r1, #0
 800bae4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800bae8:	49b2      	ldr	r1, [pc, #712]	; (800bdb4 <__ssvfiscanf_r+0x2dc>)
 800baea:	91a0      	str	r1, [sp, #640]	; 0x280
 800baec:	f10d 0804 	add.w	r8, sp, #4
 800baf0:	49b1      	ldr	r1, [pc, #708]	; (800bdb8 <__ssvfiscanf_r+0x2e0>)
 800baf2:	4fb2      	ldr	r7, [pc, #712]	; (800bdbc <__ssvfiscanf_r+0x2e4>)
 800baf4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800bdc0 <__ssvfiscanf_r+0x2e8>
 800baf8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800bafc:	4606      	mov	r6, r0
 800bafe:	91a1      	str	r1, [sp, #644]	; 0x284
 800bb00:	9300      	str	r3, [sp, #0]
 800bb02:	f892 a000 	ldrb.w	sl, [r2]
 800bb06:	f1ba 0f00 	cmp.w	sl, #0
 800bb0a:	f000 8151 	beq.w	800bdb0 <__ssvfiscanf_r+0x2d8>
 800bb0e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800bb12:	f013 0308 	ands.w	r3, r3, #8
 800bb16:	f102 0501 	add.w	r5, r2, #1
 800bb1a:	d019      	beq.n	800bb50 <__ssvfiscanf_r+0x78>
 800bb1c:	6863      	ldr	r3, [r4, #4]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	dd0f      	ble.n	800bb42 <__ssvfiscanf_r+0x6a>
 800bb22:	6823      	ldr	r3, [r4, #0]
 800bb24:	781a      	ldrb	r2, [r3, #0]
 800bb26:	5cba      	ldrb	r2, [r7, r2]
 800bb28:	0712      	lsls	r2, r2, #28
 800bb2a:	d401      	bmi.n	800bb30 <__ssvfiscanf_r+0x58>
 800bb2c:	462a      	mov	r2, r5
 800bb2e:	e7e8      	b.n	800bb02 <__ssvfiscanf_r+0x2a>
 800bb30:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bb32:	3201      	adds	r2, #1
 800bb34:	9245      	str	r2, [sp, #276]	; 0x114
 800bb36:	6862      	ldr	r2, [r4, #4]
 800bb38:	3301      	adds	r3, #1
 800bb3a:	3a01      	subs	r2, #1
 800bb3c:	6062      	str	r2, [r4, #4]
 800bb3e:	6023      	str	r3, [r4, #0]
 800bb40:	e7ec      	b.n	800bb1c <__ssvfiscanf_r+0x44>
 800bb42:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bb44:	4621      	mov	r1, r4
 800bb46:	4630      	mov	r0, r6
 800bb48:	4798      	blx	r3
 800bb4a:	2800      	cmp	r0, #0
 800bb4c:	d0e9      	beq.n	800bb22 <__ssvfiscanf_r+0x4a>
 800bb4e:	e7ed      	b.n	800bb2c <__ssvfiscanf_r+0x54>
 800bb50:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800bb54:	f040 8083 	bne.w	800bc5e <__ssvfiscanf_r+0x186>
 800bb58:	9341      	str	r3, [sp, #260]	; 0x104
 800bb5a:	9343      	str	r3, [sp, #268]	; 0x10c
 800bb5c:	7853      	ldrb	r3, [r2, #1]
 800bb5e:	2b2a      	cmp	r3, #42	; 0x2a
 800bb60:	bf02      	ittt	eq
 800bb62:	2310      	moveq	r3, #16
 800bb64:	1c95      	addeq	r5, r2, #2
 800bb66:	9341      	streq	r3, [sp, #260]	; 0x104
 800bb68:	220a      	movs	r2, #10
 800bb6a:	46ab      	mov	fp, r5
 800bb6c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800bb70:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800bb74:	2b09      	cmp	r3, #9
 800bb76:	d91d      	bls.n	800bbb4 <__ssvfiscanf_r+0xdc>
 800bb78:	4891      	ldr	r0, [pc, #580]	; (800bdc0 <__ssvfiscanf_r+0x2e8>)
 800bb7a:	2203      	movs	r2, #3
 800bb7c:	f7f4 fb30 	bl	80001e0 <memchr>
 800bb80:	b140      	cbz	r0, 800bb94 <__ssvfiscanf_r+0xbc>
 800bb82:	2301      	movs	r3, #1
 800bb84:	eba0 0009 	sub.w	r0, r0, r9
 800bb88:	fa03 f000 	lsl.w	r0, r3, r0
 800bb8c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bb8e:	4318      	orrs	r0, r3
 800bb90:	9041      	str	r0, [sp, #260]	; 0x104
 800bb92:	465d      	mov	r5, fp
 800bb94:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bb98:	2b78      	cmp	r3, #120	; 0x78
 800bb9a:	d806      	bhi.n	800bbaa <__ssvfiscanf_r+0xd2>
 800bb9c:	2b57      	cmp	r3, #87	; 0x57
 800bb9e:	d810      	bhi.n	800bbc2 <__ssvfiscanf_r+0xea>
 800bba0:	2b25      	cmp	r3, #37	; 0x25
 800bba2:	d05c      	beq.n	800bc5e <__ssvfiscanf_r+0x186>
 800bba4:	d856      	bhi.n	800bc54 <__ssvfiscanf_r+0x17c>
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d074      	beq.n	800bc94 <__ssvfiscanf_r+0x1bc>
 800bbaa:	2303      	movs	r3, #3
 800bbac:	9347      	str	r3, [sp, #284]	; 0x11c
 800bbae:	230a      	movs	r3, #10
 800bbb0:	9342      	str	r3, [sp, #264]	; 0x108
 800bbb2:	e081      	b.n	800bcb8 <__ssvfiscanf_r+0x1e0>
 800bbb4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800bbb6:	fb02 1303 	mla	r3, r2, r3, r1
 800bbba:	3b30      	subs	r3, #48	; 0x30
 800bbbc:	9343      	str	r3, [sp, #268]	; 0x10c
 800bbbe:	465d      	mov	r5, fp
 800bbc0:	e7d3      	b.n	800bb6a <__ssvfiscanf_r+0x92>
 800bbc2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800bbc6:	2a20      	cmp	r2, #32
 800bbc8:	d8ef      	bhi.n	800bbaa <__ssvfiscanf_r+0xd2>
 800bbca:	a101      	add	r1, pc, #4	; (adr r1, 800bbd0 <__ssvfiscanf_r+0xf8>)
 800bbcc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bbd0:	0800bca3 	.word	0x0800bca3
 800bbd4:	0800bbab 	.word	0x0800bbab
 800bbd8:	0800bbab 	.word	0x0800bbab
 800bbdc:	0800bd01 	.word	0x0800bd01
 800bbe0:	0800bbab 	.word	0x0800bbab
 800bbe4:	0800bbab 	.word	0x0800bbab
 800bbe8:	0800bbab 	.word	0x0800bbab
 800bbec:	0800bbab 	.word	0x0800bbab
 800bbf0:	0800bbab 	.word	0x0800bbab
 800bbf4:	0800bbab 	.word	0x0800bbab
 800bbf8:	0800bbab 	.word	0x0800bbab
 800bbfc:	0800bd17 	.word	0x0800bd17
 800bc00:	0800bced 	.word	0x0800bced
 800bc04:	0800bc5b 	.word	0x0800bc5b
 800bc08:	0800bc5b 	.word	0x0800bc5b
 800bc0c:	0800bc5b 	.word	0x0800bc5b
 800bc10:	0800bbab 	.word	0x0800bbab
 800bc14:	0800bcf1 	.word	0x0800bcf1
 800bc18:	0800bbab 	.word	0x0800bbab
 800bc1c:	0800bbab 	.word	0x0800bbab
 800bc20:	0800bbab 	.word	0x0800bbab
 800bc24:	0800bbab 	.word	0x0800bbab
 800bc28:	0800bd27 	.word	0x0800bd27
 800bc2c:	0800bcf9 	.word	0x0800bcf9
 800bc30:	0800bc9b 	.word	0x0800bc9b
 800bc34:	0800bbab 	.word	0x0800bbab
 800bc38:	0800bbab 	.word	0x0800bbab
 800bc3c:	0800bd23 	.word	0x0800bd23
 800bc40:	0800bbab 	.word	0x0800bbab
 800bc44:	0800bced 	.word	0x0800bced
 800bc48:	0800bbab 	.word	0x0800bbab
 800bc4c:	0800bbab 	.word	0x0800bbab
 800bc50:	0800bca3 	.word	0x0800bca3
 800bc54:	3b45      	subs	r3, #69	; 0x45
 800bc56:	2b02      	cmp	r3, #2
 800bc58:	d8a7      	bhi.n	800bbaa <__ssvfiscanf_r+0xd2>
 800bc5a:	2305      	movs	r3, #5
 800bc5c:	e02b      	b.n	800bcb6 <__ssvfiscanf_r+0x1de>
 800bc5e:	6863      	ldr	r3, [r4, #4]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	dd0d      	ble.n	800bc80 <__ssvfiscanf_r+0x1a8>
 800bc64:	6823      	ldr	r3, [r4, #0]
 800bc66:	781a      	ldrb	r2, [r3, #0]
 800bc68:	4552      	cmp	r2, sl
 800bc6a:	f040 80a1 	bne.w	800bdb0 <__ssvfiscanf_r+0x2d8>
 800bc6e:	3301      	adds	r3, #1
 800bc70:	6862      	ldr	r2, [r4, #4]
 800bc72:	6023      	str	r3, [r4, #0]
 800bc74:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800bc76:	3a01      	subs	r2, #1
 800bc78:	3301      	adds	r3, #1
 800bc7a:	6062      	str	r2, [r4, #4]
 800bc7c:	9345      	str	r3, [sp, #276]	; 0x114
 800bc7e:	e755      	b.n	800bb2c <__ssvfiscanf_r+0x54>
 800bc80:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bc82:	4621      	mov	r1, r4
 800bc84:	4630      	mov	r0, r6
 800bc86:	4798      	blx	r3
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	d0eb      	beq.n	800bc64 <__ssvfiscanf_r+0x18c>
 800bc8c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	f040 8084 	bne.w	800bd9c <__ssvfiscanf_r+0x2c4>
 800bc94:	f04f 30ff 	mov.w	r0, #4294967295
 800bc98:	e086      	b.n	800bda8 <__ssvfiscanf_r+0x2d0>
 800bc9a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bc9c:	f042 0220 	orr.w	r2, r2, #32
 800bca0:	9241      	str	r2, [sp, #260]	; 0x104
 800bca2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800bca4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bca8:	9241      	str	r2, [sp, #260]	; 0x104
 800bcaa:	2210      	movs	r2, #16
 800bcac:	2b6f      	cmp	r3, #111	; 0x6f
 800bcae:	9242      	str	r2, [sp, #264]	; 0x108
 800bcb0:	bf34      	ite	cc
 800bcb2:	2303      	movcc	r3, #3
 800bcb4:	2304      	movcs	r3, #4
 800bcb6:	9347      	str	r3, [sp, #284]	; 0x11c
 800bcb8:	6863      	ldr	r3, [r4, #4]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	dd41      	ble.n	800bd42 <__ssvfiscanf_r+0x26a>
 800bcbe:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bcc0:	0659      	lsls	r1, r3, #25
 800bcc2:	d404      	bmi.n	800bcce <__ssvfiscanf_r+0x1f6>
 800bcc4:	6823      	ldr	r3, [r4, #0]
 800bcc6:	781a      	ldrb	r2, [r3, #0]
 800bcc8:	5cba      	ldrb	r2, [r7, r2]
 800bcca:	0712      	lsls	r2, r2, #28
 800bccc:	d440      	bmi.n	800bd50 <__ssvfiscanf_r+0x278>
 800bcce:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800bcd0:	2b02      	cmp	r3, #2
 800bcd2:	dc4f      	bgt.n	800bd74 <__ssvfiscanf_r+0x29c>
 800bcd4:	466b      	mov	r3, sp
 800bcd6:	4622      	mov	r2, r4
 800bcd8:	a941      	add	r1, sp, #260	; 0x104
 800bcda:	4630      	mov	r0, r6
 800bcdc:	f000 fa08 	bl	800c0f0 <_scanf_chars>
 800bce0:	2801      	cmp	r0, #1
 800bce2:	d065      	beq.n	800bdb0 <__ssvfiscanf_r+0x2d8>
 800bce4:	2802      	cmp	r0, #2
 800bce6:	f47f af21 	bne.w	800bb2c <__ssvfiscanf_r+0x54>
 800bcea:	e7cf      	b.n	800bc8c <__ssvfiscanf_r+0x1b4>
 800bcec:	220a      	movs	r2, #10
 800bcee:	e7dd      	b.n	800bcac <__ssvfiscanf_r+0x1d4>
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	9342      	str	r3, [sp, #264]	; 0x108
 800bcf4:	2303      	movs	r3, #3
 800bcf6:	e7de      	b.n	800bcb6 <__ssvfiscanf_r+0x1de>
 800bcf8:	2308      	movs	r3, #8
 800bcfa:	9342      	str	r3, [sp, #264]	; 0x108
 800bcfc:	2304      	movs	r3, #4
 800bcfe:	e7da      	b.n	800bcb6 <__ssvfiscanf_r+0x1de>
 800bd00:	4629      	mov	r1, r5
 800bd02:	4640      	mov	r0, r8
 800bd04:	f000 fb40 	bl	800c388 <__sccl>
 800bd08:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bd0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd0e:	9341      	str	r3, [sp, #260]	; 0x104
 800bd10:	4605      	mov	r5, r0
 800bd12:	2301      	movs	r3, #1
 800bd14:	e7cf      	b.n	800bcb6 <__ssvfiscanf_r+0x1de>
 800bd16:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800bd18:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd1c:	9341      	str	r3, [sp, #260]	; 0x104
 800bd1e:	2300      	movs	r3, #0
 800bd20:	e7c9      	b.n	800bcb6 <__ssvfiscanf_r+0x1de>
 800bd22:	2302      	movs	r3, #2
 800bd24:	e7c7      	b.n	800bcb6 <__ssvfiscanf_r+0x1de>
 800bd26:	9841      	ldr	r0, [sp, #260]	; 0x104
 800bd28:	06c3      	lsls	r3, r0, #27
 800bd2a:	f53f aeff 	bmi.w	800bb2c <__ssvfiscanf_r+0x54>
 800bd2e:	9b00      	ldr	r3, [sp, #0]
 800bd30:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bd32:	1d19      	adds	r1, r3, #4
 800bd34:	9100      	str	r1, [sp, #0]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	07c0      	lsls	r0, r0, #31
 800bd3a:	bf4c      	ite	mi
 800bd3c:	801a      	strhmi	r2, [r3, #0]
 800bd3e:	601a      	strpl	r2, [r3, #0]
 800bd40:	e6f4      	b.n	800bb2c <__ssvfiscanf_r+0x54>
 800bd42:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bd44:	4621      	mov	r1, r4
 800bd46:	4630      	mov	r0, r6
 800bd48:	4798      	blx	r3
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	d0b7      	beq.n	800bcbe <__ssvfiscanf_r+0x1e6>
 800bd4e:	e79d      	b.n	800bc8c <__ssvfiscanf_r+0x1b4>
 800bd50:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800bd52:	3201      	adds	r2, #1
 800bd54:	9245      	str	r2, [sp, #276]	; 0x114
 800bd56:	6862      	ldr	r2, [r4, #4]
 800bd58:	3a01      	subs	r2, #1
 800bd5a:	2a00      	cmp	r2, #0
 800bd5c:	6062      	str	r2, [r4, #4]
 800bd5e:	dd02      	ble.n	800bd66 <__ssvfiscanf_r+0x28e>
 800bd60:	3301      	adds	r3, #1
 800bd62:	6023      	str	r3, [r4, #0]
 800bd64:	e7ae      	b.n	800bcc4 <__ssvfiscanf_r+0x1ec>
 800bd66:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800bd68:	4621      	mov	r1, r4
 800bd6a:	4630      	mov	r0, r6
 800bd6c:	4798      	blx	r3
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	d0a8      	beq.n	800bcc4 <__ssvfiscanf_r+0x1ec>
 800bd72:	e78b      	b.n	800bc8c <__ssvfiscanf_r+0x1b4>
 800bd74:	2b04      	cmp	r3, #4
 800bd76:	dc06      	bgt.n	800bd86 <__ssvfiscanf_r+0x2ae>
 800bd78:	466b      	mov	r3, sp
 800bd7a:	4622      	mov	r2, r4
 800bd7c:	a941      	add	r1, sp, #260	; 0x104
 800bd7e:	4630      	mov	r0, r6
 800bd80:	f000 fa0e 	bl	800c1a0 <_scanf_i>
 800bd84:	e7ac      	b.n	800bce0 <__ssvfiscanf_r+0x208>
 800bd86:	4b0f      	ldr	r3, [pc, #60]	; (800bdc4 <__ssvfiscanf_r+0x2ec>)
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	f43f aecf 	beq.w	800bb2c <__ssvfiscanf_r+0x54>
 800bd8e:	466b      	mov	r3, sp
 800bd90:	4622      	mov	r2, r4
 800bd92:	a941      	add	r1, sp, #260	; 0x104
 800bd94:	4630      	mov	r0, r6
 800bd96:	f3af 8000 	nop.w
 800bd9a:	e7a1      	b.n	800bce0 <__ssvfiscanf_r+0x208>
 800bd9c:	89a3      	ldrh	r3, [r4, #12]
 800bd9e:	f013 0f40 	tst.w	r3, #64	; 0x40
 800bda2:	bf18      	it	ne
 800bda4:	f04f 30ff 	movne.w	r0, #4294967295
 800bda8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800bdac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdb0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800bdb2:	e7f9      	b.n	800bda8 <__ssvfiscanf_r+0x2d0>
 800bdb4:	0800ba25 	.word	0x0800ba25
 800bdb8:	0800ba9f 	.word	0x0800ba9f
 800bdbc:	0800c94b 	.word	0x0800c94b
 800bdc0:	0800c902 	.word	0x0800c902
 800bdc4:	00000000 	.word	0x00000000

0800bdc8 <_printf_common>:
 800bdc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdcc:	4616      	mov	r6, r2
 800bdce:	4699      	mov	r9, r3
 800bdd0:	688a      	ldr	r2, [r1, #8]
 800bdd2:	690b      	ldr	r3, [r1, #16]
 800bdd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	bfb8      	it	lt
 800bddc:	4613      	movlt	r3, r2
 800bdde:	6033      	str	r3, [r6, #0]
 800bde0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bde4:	4607      	mov	r7, r0
 800bde6:	460c      	mov	r4, r1
 800bde8:	b10a      	cbz	r2, 800bdee <_printf_common+0x26>
 800bdea:	3301      	adds	r3, #1
 800bdec:	6033      	str	r3, [r6, #0]
 800bdee:	6823      	ldr	r3, [r4, #0]
 800bdf0:	0699      	lsls	r1, r3, #26
 800bdf2:	bf42      	ittt	mi
 800bdf4:	6833      	ldrmi	r3, [r6, #0]
 800bdf6:	3302      	addmi	r3, #2
 800bdf8:	6033      	strmi	r3, [r6, #0]
 800bdfa:	6825      	ldr	r5, [r4, #0]
 800bdfc:	f015 0506 	ands.w	r5, r5, #6
 800be00:	d106      	bne.n	800be10 <_printf_common+0x48>
 800be02:	f104 0a19 	add.w	sl, r4, #25
 800be06:	68e3      	ldr	r3, [r4, #12]
 800be08:	6832      	ldr	r2, [r6, #0]
 800be0a:	1a9b      	subs	r3, r3, r2
 800be0c:	42ab      	cmp	r3, r5
 800be0e:	dc26      	bgt.n	800be5e <_printf_common+0x96>
 800be10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be14:	1e13      	subs	r3, r2, #0
 800be16:	6822      	ldr	r2, [r4, #0]
 800be18:	bf18      	it	ne
 800be1a:	2301      	movne	r3, #1
 800be1c:	0692      	lsls	r2, r2, #26
 800be1e:	d42b      	bmi.n	800be78 <_printf_common+0xb0>
 800be20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be24:	4649      	mov	r1, r9
 800be26:	4638      	mov	r0, r7
 800be28:	47c0      	blx	r8
 800be2a:	3001      	adds	r0, #1
 800be2c:	d01e      	beq.n	800be6c <_printf_common+0xa4>
 800be2e:	6823      	ldr	r3, [r4, #0]
 800be30:	68e5      	ldr	r5, [r4, #12]
 800be32:	6832      	ldr	r2, [r6, #0]
 800be34:	f003 0306 	and.w	r3, r3, #6
 800be38:	2b04      	cmp	r3, #4
 800be3a:	bf08      	it	eq
 800be3c:	1aad      	subeq	r5, r5, r2
 800be3e:	68a3      	ldr	r3, [r4, #8]
 800be40:	6922      	ldr	r2, [r4, #16]
 800be42:	bf0c      	ite	eq
 800be44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be48:	2500      	movne	r5, #0
 800be4a:	4293      	cmp	r3, r2
 800be4c:	bfc4      	itt	gt
 800be4e:	1a9b      	subgt	r3, r3, r2
 800be50:	18ed      	addgt	r5, r5, r3
 800be52:	2600      	movs	r6, #0
 800be54:	341a      	adds	r4, #26
 800be56:	42b5      	cmp	r5, r6
 800be58:	d11a      	bne.n	800be90 <_printf_common+0xc8>
 800be5a:	2000      	movs	r0, #0
 800be5c:	e008      	b.n	800be70 <_printf_common+0xa8>
 800be5e:	2301      	movs	r3, #1
 800be60:	4652      	mov	r2, sl
 800be62:	4649      	mov	r1, r9
 800be64:	4638      	mov	r0, r7
 800be66:	47c0      	blx	r8
 800be68:	3001      	adds	r0, #1
 800be6a:	d103      	bne.n	800be74 <_printf_common+0xac>
 800be6c:	f04f 30ff 	mov.w	r0, #4294967295
 800be70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be74:	3501      	adds	r5, #1
 800be76:	e7c6      	b.n	800be06 <_printf_common+0x3e>
 800be78:	18e1      	adds	r1, r4, r3
 800be7a:	1c5a      	adds	r2, r3, #1
 800be7c:	2030      	movs	r0, #48	; 0x30
 800be7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be82:	4422      	add	r2, r4
 800be84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be8c:	3302      	adds	r3, #2
 800be8e:	e7c7      	b.n	800be20 <_printf_common+0x58>
 800be90:	2301      	movs	r3, #1
 800be92:	4622      	mov	r2, r4
 800be94:	4649      	mov	r1, r9
 800be96:	4638      	mov	r0, r7
 800be98:	47c0      	blx	r8
 800be9a:	3001      	adds	r0, #1
 800be9c:	d0e6      	beq.n	800be6c <_printf_common+0xa4>
 800be9e:	3601      	adds	r6, #1
 800bea0:	e7d9      	b.n	800be56 <_printf_common+0x8e>
	...

0800bea4 <_printf_i>:
 800bea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bea8:	460c      	mov	r4, r1
 800beaa:	4691      	mov	r9, r2
 800beac:	7e27      	ldrb	r7, [r4, #24]
 800beae:	990c      	ldr	r1, [sp, #48]	; 0x30
 800beb0:	2f78      	cmp	r7, #120	; 0x78
 800beb2:	4680      	mov	r8, r0
 800beb4:	469a      	mov	sl, r3
 800beb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800beba:	d807      	bhi.n	800becc <_printf_i+0x28>
 800bebc:	2f62      	cmp	r7, #98	; 0x62
 800bebe:	d80a      	bhi.n	800bed6 <_printf_i+0x32>
 800bec0:	2f00      	cmp	r7, #0
 800bec2:	f000 80d8 	beq.w	800c076 <_printf_i+0x1d2>
 800bec6:	2f58      	cmp	r7, #88	; 0x58
 800bec8:	f000 80a3 	beq.w	800c012 <_printf_i+0x16e>
 800becc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bed0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bed4:	e03a      	b.n	800bf4c <_printf_i+0xa8>
 800bed6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800beda:	2b15      	cmp	r3, #21
 800bedc:	d8f6      	bhi.n	800becc <_printf_i+0x28>
 800bede:	a001      	add	r0, pc, #4	; (adr r0, 800bee4 <_printf_i+0x40>)
 800bee0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bee4:	0800bf3d 	.word	0x0800bf3d
 800bee8:	0800bf51 	.word	0x0800bf51
 800beec:	0800becd 	.word	0x0800becd
 800bef0:	0800becd 	.word	0x0800becd
 800bef4:	0800becd 	.word	0x0800becd
 800bef8:	0800becd 	.word	0x0800becd
 800befc:	0800bf51 	.word	0x0800bf51
 800bf00:	0800becd 	.word	0x0800becd
 800bf04:	0800becd 	.word	0x0800becd
 800bf08:	0800becd 	.word	0x0800becd
 800bf0c:	0800becd 	.word	0x0800becd
 800bf10:	0800c05d 	.word	0x0800c05d
 800bf14:	0800bf81 	.word	0x0800bf81
 800bf18:	0800c03f 	.word	0x0800c03f
 800bf1c:	0800becd 	.word	0x0800becd
 800bf20:	0800becd 	.word	0x0800becd
 800bf24:	0800c07f 	.word	0x0800c07f
 800bf28:	0800becd 	.word	0x0800becd
 800bf2c:	0800bf81 	.word	0x0800bf81
 800bf30:	0800becd 	.word	0x0800becd
 800bf34:	0800becd 	.word	0x0800becd
 800bf38:	0800c047 	.word	0x0800c047
 800bf3c:	680b      	ldr	r3, [r1, #0]
 800bf3e:	1d1a      	adds	r2, r3, #4
 800bf40:	681b      	ldr	r3, [r3, #0]
 800bf42:	600a      	str	r2, [r1, #0]
 800bf44:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bf48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	e0a3      	b.n	800c098 <_printf_i+0x1f4>
 800bf50:	6825      	ldr	r5, [r4, #0]
 800bf52:	6808      	ldr	r0, [r1, #0]
 800bf54:	062e      	lsls	r6, r5, #24
 800bf56:	f100 0304 	add.w	r3, r0, #4
 800bf5a:	d50a      	bpl.n	800bf72 <_printf_i+0xce>
 800bf5c:	6805      	ldr	r5, [r0, #0]
 800bf5e:	600b      	str	r3, [r1, #0]
 800bf60:	2d00      	cmp	r5, #0
 800bf62:	da03      	bge.n	800bf6c <_printf_i+0xc8>
 800bf64:	232d      	movs	r3, #45	; 0x2d
 800bf66:	426d      	negs	r5, r5
 800bf68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bf6c:	485e      	ldr	r0, [pc, #376]	; (800c0e8 <_printf_i+0x244>)
 800bf6e:	230a      	movs	r3, #10
 800bf70:	e019      	b.n	800bfa6 <_printf_i+0x102>
 800bf72:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bf76:	6805      	ldr	r5, [r0, #0]
 800bf78:	600b      	str	r3, [r1, #0]
 800bf7a:	bf18      	it	ne
 800bf7c:	b22d      	sxthne	r5, r5
 800bf7e:	e7ef      	b.n	800bf60 <_printf_i+0xbc>
 800bf80:	680b      	ldr	r3, [r1, #0]
 800bf82:	6825      	ldr	r5, [r4, #0]
 800bf84:	1d18      	adds	r0, r3, #4
 800bf86:	6008      	str	r0, [r1, #0]
 800bf88:	0628      	lsls	r0, r5, #24
 800bf8a:	d501      	bpl.n	800bf90 <_printf_i+0xec>
 800bf8c:	681d      	ldr	r5, [r3, #0]
 800bf8e:	e002      	b.n	800bf96 <_printf_i+0xf2>
 800bf90:	0669      	lsls	r1, r5, #25
 800bf92:	d5fb      	bpl.n	800bf8c <_printf_i+0xe8>
 800bf94:	881d      	ldrh	r5, [r3, #0]
 800bf96:	4854      	ldr	r0, [pc, #336]	; (800c0e8 <_printf_i+0x244>)
 800bf98:	2f6f      	cmp	r7, #111	; 0x6f
 800bf9a:	bf0c      	ite	eq
 800bf9c:	2308      	moveq	r3, #8
 800bf9e:	230a      	movne	r3, #10
 800bfa0:	2100      	movs	r1, #0
 800bfa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bfa6:	6866      	ldr	r6, [r4, #4]
 800bfa8:	60a6      	str	r6, [r4, #8]
 800bfaa:	2e00      	cmp	r6, #0
 800bfac:	bfa2      	ittt	ge
 800bfae:	6821      	ldrge	r1, [r4, #0]
 800bfb0:	f021 0104 	bicge.w	r1, r1, #4
 800bfb4:	6021      	strge	r1, [r4, #0]
 800bfb6:	b90d      	cbnz	r5, 800bfbc <_printf_i+0x118>
 800bfb8:	2e00      	cmp	r6, #0
 800bfba:	d04d      	beq.n	800c058 <_printf_i+0x1b4>
 800bfbc:	4616      	mov	r6, r2
 800bfbe:	fbb5 f1f3 	udiv	r1, r5, r3
 800bfc2:	fb03 5711 	mls	r7, r3, r1, r5
 800bfc6:	5dc7      	ldrb	r7, [r0, r7]
 800bfc8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bfcc:	462f      	mov	r7, r5
 800bfce:	42bb      	cmp	r3, r7
 800bfd0:	460d      	mov	r5, r1
 800bfd2:	d9f4      	bls.n	800bfbe <_printf_i+0x11a>
 800bfd4:	2b08      	cmp	r3, #8
 800bfd6:	d10b      	bne.n	800bff0 <_printf_i+0x14c>
 800bfd8:	6823      	ldr	r3, [r4, #0]
 800bfda:	07df      	lsls	r7, r3, #31
 800bfdc:	d508      	bpl.n	800bff0 <_printf_i+0x14c>
 800bfde:	6923      	ldr	r3, [r4, #16]
 800bfe0:	6861      	ldr	r1, [r4, #4]
 800bfe2:	4299      	cmp	r1, r3
 800bfe4:	bfde      	ittt	le
 800bfe6:	2330      	movle	r3, #48	; 0x30
 800bfe8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bfec:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bff0:	1b92      	subs	r2, r2, r6
 800bff2:	6122      	str	r2, [r4, #16]
 800bff4:	f8cd a000 	str.w	sl, [sp]
 800bff8:	464b      	mov	r3, r9
 800bffa:	aa03      	add	r2, sp, #12
 800bffc:	4621      	mov	r1, r4
 800bffe:	4640      	mov	r0, r8
 800c000:	f7ff fee2 	bl	800bdc8 <_printf_common>
 800c004:	3001      	adds	r0, #1
 800c006:	d14c      	bne.n	800c0a2 <_printf_i+0x1fe>
 800c008:	f04f 30ff 	mov.w	r0, #4294967295
 800c00c:	b004      	add	sp, #16
 800c00e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c012:	4835      	ldr	r0, [pc, #212]	; (800c0e8 <_printf_i+0x244>)
 800c014:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c018:	6823      	ldr	r3, [r4, #0]
 800c01a:	680e      	ldr	r6, [r1, #0]
 800c01c:	061f      	lsls	r7, r3, #24
 800c01e:	f856 5b04 	ldr.w	r5, [r6], #4
 800c022:	600e      	str	r6, [r1, #0]
 800c024:	d514      	bpl.n	800c050 <_printf_i+0x1ac>
 800c026:	07d9      	lsls	r1, r3, #31
 800c028:	bf44      	itt	mi
 800c02a:	f043 0320 	orrmi.w	r3, r3, #32
 800c02e:	6023      	strmi	r3, [r4, #0]
 800c030:	b91d      	cbnz	r5, 800c03a <_printf_i+0x196>
 800c032:	6823      	ldr	r3, [r4, #0]
 800c034:	f023 0320 	bic.w	r3, r3, #32
 800c038:	6023      	str	r3, [r4, #0]
 800c03a:	2310      	movs	r3, #16
 800c03c:	e7b0      	b.n	800bfa0 <_printf_i+0xfc>
 800c03e:	6823      	ldr	r3, [r4, #0]
 800c040:	f043 0320 	orr.w	r3, r3, #32
 800c044:	6023      	str	r3, [r4, #0]
 800c046:	2378      	movs	r3, #120	; 0x78
 800c048:	4828      	ldr	r0, [pc, #160]	; (800c0ec <_printf_i+0x248>)
 800c04a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c04e:	e7e3      	b.n	800c018 <_printf_i+0x174>
 800c050:	065e      	lsls	r6, r3, #25
 800c052:	bf48      	it	mi
 800c054:	b2ad      	uxthmi	r5, r5
 800c056:	e7e6      	b.n	800c026 <_printf_i+0x182>
 800c058:	4616      	mov	r6, r2
 800c05a:	e7bb      	b.n	800bfd4 <_printf_i+0x130>
 800c05c:	680b      	ldr	r3, [r1, #0]
 800c05e:	6826      	ldr	r6, [r4, #0]
 800c060:	6960      	ldr	r0, [r4, #20]
 800c062:	1d1d      	adds	r5, r3, #4
 800c064:	600d      	str	r5, [r1, #0]
 800c066:	0635      	lsls	r5, r6, #24
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	d501      	bpl.n	800c070 <_printf_i+0x1cc>
 800c06c:	6018      	str	r0, [r3, #0]
 800c06e:	e002      	b.n	800c076 <_printf_i+0x1d2>
 800c070:	0671      	lsls	r1, r6, #25
 800c072:	d5fb      	bpl.n	800c06c <_printf_i+0x1c8>
 800c074:	8018      	strh	r0, [r3, #0]
 800c076:	2300      	movs	r3, #0
 800c078:	6123      	str	r3, [r4, #16]
 800c07a:	4616      	mov	r6, r2
 800c07c:	e7ba      	b.n	800bff4 <_printf_i+0x150>
 800c07e:	680b      	ldr	r3, [r1, #0]
 800c080:	1d1a      	adds	r2, r3, #4
 800c082:	600a      	str	r2, [r1, #0]
 800c084:	681e      	ldr	r6, [r3, #0]
 800c086:	6862      	ldr	r2, [r4, #4]
 800c088:	2100      	movs	r1, #0
 800c08a:	4630      	mov	r0, r6
 800c08c:	f7f4 f8a8 	bl	80001e0 <memchr>
 800c090:	b108      	cbz	r0, 800c096 <_printf_i+0x1f2>
 800c092:	1b80      	subs	r0, r0, r6
 800c094:	6060      	str	r0, [r4, #4]
 800c096:	6863      	ldr	r3, [r4, #4]
 800c098:	6123      	str	r3, [r4, #16]
 800c09a:	2300      	movs	r3, #0
 800c09c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0a0:	e7a8      	b.n	800bff4 <_printf_i+0x150>
 800c0a2:	6923      	ldr	r3, [r4, #16]
 800c0a4:	4632      	mov	r2, r6
 800c0a6:	4649      	mov	r1, r9
 800c0a8:	4640      	mov	r0, r8
 800c0aa:	47d0      	blx	sl
 800c0ac:	3001      	adds	r0, #1
 800c0ae:	d0ab      	beq.n	800c008 <_printf_i+0x164>
 800c0b0:	6823      	ldr	r3, [r4, #0]
 800c0b2:	079b      	lsls	r3, r3, #30
 800c0b4:	d413      	bmi.n	800c0de <_printf_i+0x23a>
 800c0b6:	68e0      	ldr	r0, [r4, #12]
 800c0b8:	9b03      	ldr	r3, [sp, #12]
 800c0ba:	4298      	cmp	r0, r3
 800c0bc:	bfb8      	it	lt
 800c0be:	4618      	movlt	r0, r3
 800c0c0:	e7a4      	b.n	800c00c <_printf_i+0x168>
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	4632      	mov	r2, r6
 800c0c6:	4649      	mov	r1, r9
 800c0c8:	4640      	mov	r0, r8
 800c0ca:	47d0      	blx	sl
 800c0cc:	3001      	adds	r0, #1
 800c0ce:	d09b      	beq.n	800c008 <_printf_i+0x164>
 800c0d0:	3501      	adds	r5, #1
 800c0d2:	68e3      	ldr	r3, [r4, #12]
 800c0d4:	9903      	ldr	r1, [sp, #12]
 800c0d6:	1a5b      	subs	r3, r3, r1
 800c0d8:	42ab      	cmp	r3, r5
 800c0da:	dcf2      	bgt.n	800c0c2 <_printf_i+0x21e>
 800c0dc:	e7eb      	b.n	800c0b6 <_printf_i+0x212>
 800c0de:	2500      	movs	r5, #0
 800c0e0:	f104 0619 	add.w	r6, r4, #25
 800c0e4:	e7f5      	b.n	800c0d2 <_printf_i+0x22e>
 800c0e6:	bf00      	nop
 800c0e8:	0800c90d 	.word	0x0800c90d
 800c0ec:	0800c91e 	.word	0x0800c91e

0800c0f0 <_scanf_chars>:
 800c0f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0f4:	4615      	mov	r5, r2
 800c0f6:	688a      	ldr	r2, [r1, #8]
 800c0f8:	4680      	mov	r8, r0
 800c0fa:	460c      	mov	r4, r1
 800c0fc:	b932      	cbnz	r2, 800c10c <_scanf_chars+0x1c>
 800c0fe:	698a      	ldr	r2, [r1, #24]
 800c100:	2a00      	cmp	r2, #0
 800c102:	bf0c      	ite	eq
 800c104:	2201      	moveq	r2, #1
 800c106:	f04f 32ff 	movne.w	r2, #4294967295
 800c10a:	608a      	str	r2, [r1, #8]
 800c10c:	6822      	ldr	r2, [r4, #0]
 800c10e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800c19c <_scanf_chars+0xac>
 800c112:	06d1      	lsls	r1, r2, #27
 800c114:	bf5f      	itttt	pl
 800c116:	681a      	ldrpl	r2, [r3, #0]
 800c118:	1d11      	addpl	r1, r2, #4
 800c11a:	6019      	strpl	r1, [r3, #0]
 800c11c:	6816      	ldrpl	r6, [r2, #0]
 800c11e:	2700      	movs	r7, #0
 800c120:	69a0      	ldr	r0, [r4, #24]
 800c122:	b188      	cbz	r0, 800c148 <_scanf_chars+0x58>
 800c124:	2801      	cmp	r0, #1
 800c126:	d107      	bne.n	800c138 <_scanf_chars+0x48>
 800c128:	682b      	ldr	r3, [r5, #0]
 800c12a:	781a      	ldrb	r2, [r3, #0]
 800c12c:	6963      	ldr	r3, [r4, #20]
 800c12e:	5c9b      	ldrb	r3, [r3, r2]
 800c130:	b953      	cbnz	r3, 800c148 <_scanf_chars+0x58>
 800c132:	bb27      	cbnz	r7, 800c17e <_scanf_chars+0x8e>
 800c134:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c138:	2802      	cmp	r0, #2
 800c13a:	d120      	bne.n	800c17e <_scanf_chars+0x8e>
 800c13c:	682b      	ldr	r3, [r5, #0]
 800c13e:	781b      	ldrb	r3, [r3, #0]
 800c140:	f813 3009 	ldrb.w	r3, [r3, r9]
 800c144:	071b      	lsls	r3, r3, #28
 800c146:	d41a      	bmi.n	800c17e <_scanf_chars+0x8e>
 800c148:	6823      	ldr	r3, [r4, #0]
 800c14a:	06da      	lsls	r2, r3, #27
 800c14c:	bf5e      	ittt	pl
 800c14e:	682b      	ldrpl	r3, [r5, #0]
 800c150:	781b      	ldrbpl	r3, [r3, #0]
 800c152:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c156:	682a      	ldr	r2, [r5, #0]
 800c158:	686b      	ldr	r3, [r5, #4]
 800c15a:	3201      	adds	r2, #1
 800c15c:	602a      	str	r2, [r5, #0]
 800c15e:	68a2      	ldr	r2, [r4, #8]
 800c160:	3b01      	subs	r3, #1
 800c162:	3a01      	subs	r2, #1
 800c164:	606b      	str	r3, [r5, #4]
 800c166:	3701      	adds	r7, #1
 800c168:	60a2      	str	r2, [r4, #8]
 800c16a:	b142      	cbz	r2, 800c17e <_scanf_chars+0x8e>
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	dcd7      	bgt.n	800c120 <_scanf_chars+0x30>
 800c170:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c174:	4629      	mov	r1, r5
 800c176:	4640      	mov	r0, r8
 800c178:	4798      	blx	r3
 800c17a:	2800      	cmp	r0, #0
 800c17c:	d0d0      	beq.n	800c120 <_scanf_chars+0x30>
 800c17e:	6823      	ldr	r3, [r4, #0]
 800c180:	f013 0310 	ands.w	r3, r3, #16
 800c184:	d105      	bne.n	800c192 <_scanf_chars+0xa2>
 800c186:	68e2      	ldr	r2, [r4, #12]
 800c188:	3201      	adds	r2, #1
 800c18a:	60e2      	str	r2, [r4, #12]
 800c18c:	69a2      	ldr	r2, [r4, #24]
 800c18e:	b102      	cbz	r2, 800c192 <_scanf_chars+0xa2>
 800c190:	7033      	strb	r3, [r6, #0]
 800c192:	6923      	ldr	r3, [r4, #16]
 800c194:	441f      	add	r7, r3
 800c196:	6127      	str	r7, [r4, #16]
 800c198:	2000      	movs	r0, #0
 800c19a:	e7cb      	b.n	800c134 <_scanf_chars+0x44>
 800c19c:	0800c94b 	.word	0x0800c94b

0800c1a0 <_scanf_i>:
 800c1a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1a4:	4698      	mov	r8, r3
 800c1a6:	4b74      	ldr	r3, [pc, #464]	; (800c378 <_scanf_i+0x1d8>)
 800c1a8:	460c      	mov	r4, r1
 800c1aa:	4682      	mov	sl, r0
 800c1ac:	4616      	mov	r6, r2
 800c1ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c1b2:	b087      	sub	sp, #28
 800c1b4:	ab03      	add	r3, sp, #12
 800c1b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c1ba:	4b70      	ldr	r3, [pc, #448]	; (800c37c <_scanf_i+0x1dc>)
 800c1bc:	69a1      	ldr	r1, [r4, #24]
 800c1be:	4a70      	ldr	r2, [pc, #448]	; (800c380 <_scanf_i+0x1e0>)
 800c1c0:	2903      	cmp	r1, #3
 800c1c2:	bf18      	it	ne
 800c1c4:	461a      	movne	r2, r3
 800c1c6:	68a3      	ldr	r3, [r4, #8]
 800c1c8:	9201      	str	r2, [sp, #4]
 800c1ca:	1e5a      	subs	r2, r3, #1
 800c1cc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c1d0:	bf88      	it	hi
 800c1d2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c1d6:	4627      	mov	r7, r4
 800c1d8:	bf82      	ittt	hi
 800c1da:	eb03 0905 	addhi.w	r9, r3, r5
 800c1de:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c1e2:	60a3      	strhi	r3, [r4, #8]
 800c1e4:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c1e8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800c1ec:	bf98      	it	ls
 800c1ee:	f04f 0900 	movls.w	r9, #0
 800c1f2:	6023      	str	r3, [r4, #0]
 800c1f4:	463d      	mov	r5, r7
 800c1f6:	f04f 0b00 	mov.w	fp, #0
 800c1fa:	6831      	ldr	r1, [r6, #0]
 800c1fc:	ab03      	add	r3, sp, #12
 800c1fe:	7809      	ldrb	r1, [r1, #0]
 800c200:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c204:	2202      	movs	r2, #2
 800c206:	f7f3 ffeb 	bl	80001e0 <memchr>
 800c20a:	b328      	cbz	r0, 800c258 <_scanf_i+0xb8>
 800c20c:	f1bb 0f01 	cmp.w	fp, #1
 800c210:	d159      	bne.n	800c2c6 <_scanf_i+0x126>
 800c212:	6862      	ldr	r2, [r4, #4]
 800c214:	b92a      	cbnz	r2, 800c222 <_scanf_i+0x82>
 800c216:	6822      	ldr	r2, [r4, #0]
 800c218:	2308      	movs	r3, #8
 800c21a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c21e:	6063      	str	r3, [r4, #4]
 800c220:	6022      	str	r2, [r4, #0]
 800c222:	6822      	ldr	r2, [r4, #0]
 800c224:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800c228:	6022      	str	r2, [r4, #0]
 800c22a:	68a2      	ldr	r2, [r4, #8]
 800c22c:	1e51      	subs	r1, r2, #1
 800c22e:	60a1      	str	r1, [r4, #8]
 800c230:	b192      	cbz	r2, 800c258 <_scanf_i+0xb8>
 800c232:	6832      	ldr	r2, [r6, #0]
 800c234:	1c51      	adds	r1, r2, #1
 800c236:	6031      	str	r1, [r6, #0]
 800c238:	7812      	ldrb	r2, [r2, #0]
 800c23a:	f805 2b01 	strb.w	r2, [r5], #1
 800c23e:	6872      	ldr	r2, [r6, #4]
 800c240:	3a01      	subs	r2, #1
 800c242:	2a00      	cmp	r2, #0
 800c244:	6072      	str	r2, [r6, #4]
 800c246:	dc07      	bgt.n	800c258 <_scanf_i+0xb8>
 800c248:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800c24c:	4631      	mov	r1, r6
 800c24e:	4650      	mov	r0, sl
 800c250:	4790      	blx	r2
 800c252:	2800      	cmp	r0, #0
 800c254:	f040 8085 	bne.w	800c362 <_scanf_i+0x1c2>
 800c258:	f10b 0b01 	add.w	fp, fp, #1
 800c25c:	f1bb 0f03 	cmp.w	fp, #3
 800c260:	d1cb      	bne.n	800c1fa <_scanf_i+0x5a>
 800c262:	6863      	ldr	r3, [r4, #4]
 800c264:	b90b      	cbnz	r3, 800c26a <_scanf_i+0xca>
 800c266:	230a      	movs	r3, #10
 800c268:	6063      	str	r3, [r4, #4]
 800c26a:	6863      	ldr	r3, [r4, #4]
 800c26c:	4945      	ldr	r1, [pc, #276]	; (800c384 <_scanf_i+0x1e4>)
 800c26e:	6960      	ldr	r0, [r4, #20]
 800c270:	1ac9      	subs	r1, r1, r3
 800c272:	f000 f889 	bl	800c388 <__sccl>
 800c276:	f04f 0b00 	mov.w	fp, #0
 800c27a:	68a3      	ldr	r3, [r4, #8]
 800c27c:	6822      	ldr	r2, [r4, #0]
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d03d      	beq.n	800c2fe <_scanf_i+0x15e>
 800c282:	6831      	ldr	r1, [r6, #0]
 800c284:	6960      	ldr	r0, [r4, #20]
 800c286:	f891 c000 	ldrb.w	ip, [r1]
 800c28a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c28e:	2800      	cmp	r0, #0
 800c290:	d035      	beq.n	800c2fe <_scanf_i+0x15e>
 800c292:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800c296:	d124      	bne.n	800c2e2 <_scanf_i+0x142>
 800c298:	0510      	lsls	r0, r2, #20
 800c29a:	d522      	bpl.n	800c2e2 <_scanf_i+0x142>
 800c29c:	f10b 0b01 	add.w	fp, fp, #1
 800c2a0:	f1b9 0f00 	cmp.w	r9, #0
 800c2a4:	d003      	beq.n	800c2ae <_scanf_i+0x10e>
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	f109 39ff 	add.w	r9, r9, #4294967295
 800c2ac:	60a3      	str	r3, [r4, #8]
 800c2ae:	6873      	ldr	r3, [r6, #4]
 800c2b0:	3b01      	subs	r3, #1
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	6073      	str	r3, [r6, #4]
 800c2b6:	dd1b      	ble.n	800c2f0 <_scanf_i+0x150>
 800c2b8:	6833      	ldr	r3, [r6, #0]
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	6033      	str	r3, [r6, #0]
 800c2be:	68a3      	ldr	r3, [r4, #8]
 800c2c0:	3b01      	subs	r3, #1
 800c2c2:	60a3      	str	r3, [r4, #8]
 800c2c4:	e7d9      	b.n	800c27a <_scanf_i+0xda>
 800c2c6:	f1bb 0f02 	cmp.w	fp, #2
 800c2ca:	d1ae      	bne.n	800c22a <_scanf_i+0x8a>
 800c2cc:	6822      	ldr	r2, [r4, #0]
 800c2ce:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800c2d2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800c2d6:	d1bf      	bne.n	800c258 <_scanf_i+0xb8>
 800c2d8:	2310      	movs	r3, #16
 800c2da:	6063      	str	r3, [r4, #4]
 800c2dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c2e0:	e7a2      	b.n	800c228 <_scanf_i+0x88>
 800c2e2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800c2e6:	6022      	str	r2, [r4, #0]
 800c2e8:	780b      	ldrb	r3, [r1, #0]
 800c2ea:	f805 3b01 	strb.w	r3, [r5], #1
 800c2ee:	e7de      	b.n	800c2ae <_scanf_i+0x10e>
 800c2f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c2f4:	4631      	mov	r1, r6
 800c2f6:	4650      	mov	r0, sl
 800c2f8:	4798      	blx	r3
 800c2fa:	2800      	cmp	r0, #0
 800c2fc:	d0df      	beq.n	800c2be <_scanf_i+0x11e>
 800c2fe:	6823      	ldr	r3, [r4, #0]
 800c300:	05d9      	lsls	r1, r3, #23
 800c302:	d50d      	bpl.n	800c320 <_scanf_i+0x180>
 800c304:	42bd      	cmp	r5, r7
 800c306:	d909      	bls.n	800c31c <_scanf_i+0x17c>
 800c308:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c30c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c310:	4632      	mov	r2, r6
 800c312:	4650      	mov	r0, sl
 800c314:	4798      	blx	r3
 800c316:	f105 39ff 	add.w	r9, r5, #4294967295
 800c31a:	464d      	mov	r5, r9
 800c31c:	42bd      	cmp	r5, r7
 800c31e:	d028      	beq.n	800c372 <_scanf_i+0x1d2>
 800c320:	6822      	ldr	r2, [r4, #0]
 800c322:	f012 0210 	ands.w	r2, r2, #16
 800c326:	d113      	bne.n	800c350 <_scanf_i+0x1b0>
 800c328:	702a      	strb	r2, [r5, #0]
 800c32a:	6863      	ldr	r3, [r4, #4]
 800c32c:	9e01      	ldr	r6, [sp, #4]
 800c32e:	4639      	mov	r1, r7
 800c330:	4650      	mov	r0, sl
 800c332:	47b0      	blx	r6
 800c334:	f8d8 3000 	ldr.w	r3, [r8]
 800c338:	6821      	ldr	r1, [r4, #0]
 800c33a:	1d1a      	adds	r2, r3, #4
 800c33c:	f8c8 2000 	str.w	r2, [r8]
 800c340:	f011 0f20 	tst.w	r1, #32
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	d00f      	beq.n	800c368 <_scanf_i+0x1c8>
 800c348:	6018      	str	r0, [r3, #0]
 800c34a:	68e3      	ldr	r3, [r4, #12]
 800c34c:	3301      	adds	r3, #1
 800c34e:	60e3      	str	r3, [r4, #12]
 800c350:	1bed      	subs	r5, r5, r7
 800c352:	44ab      	add	fp, r5
 800c354:	6925      	ldr	r5, [r4, #16]
 800c356:	445d      	add	r5, fp
 800c358:	6125      	str	r5, [r4, #16]
 800c35a:	2000      	movs	r0, #0
 800c35c:	b007      	add	sp, #28
 800c35e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c362:	f04f 0b00 	mov.w	fp, #0
 800c366:	e7ca      	b.n	800c2fe <_scanf_i+0x15e>
 800c368:	07ca      	lsls	r2, r1, #31
 800c36a:	bf4c      	ite	mi
 800c36c:	8018      	strhmi	r0, [r3, #0]
 800c36e:	6018      	strpl	r0, [r3, #0]
 800c370:	e7eb      	b.n	800c34a <_scanf_i+0x1aa>
 800c372:	2001      	movs	r0, #1
 800c374:	e7f2      	b.n	800c35c <_scanf_i+0x1bc>
 800c376:	bf00      	nop
 800c378:	0800c7dc 	.word	0x0800c7dc
 800c37c:	0800c601 	.word	0x0800c601
 800c380:	0800c505 	.word	0x0800c505
 800c384:	0800c948 	.word	0x0800c948

0800c388 <__sccl>:
 800c388:	b570      	push	{r4, r5, r6, lr}
 800c38a:	780b      	ldrb	r3, [r1, #0]
 800c38c:	4604      	mov	r4, r0
 800c38e:	2b5e      	cmp	r3, #94	; 0x5e
 800c390:	bf0b      	itete	eq
 800c392:	784b      	ldrbeq	r3, [r1, #1]
 800c394:	1c48      	addne	r0, r1, #1
 800c396:	1c88      	addeq	r0, r1, #2
 800c398:	2200      	movne	r2, #0
 800c39a:	bf08      	it	eq
 800c39c:	2201      	moveq	r2, #1
 800c39e:	1e61      	subs	r1, r4, #1
 800c3a0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800c3a4:	f801 2f01 	strb.w	r2, [r1, #1]!
 800c3a8:	42a9      	cmp	r1, r5
 800c3aa:	d1fb      	bne.n	800c3a4 <__sccl+0x1c>
 800c3ac:	b90b      	cbnz	r3, 800c3b2 <__sccl+0x2a>
 800c3ae:	3801      	subs	r0, #1
 800c3b0:	bd70      	pop	{r4, r5, r6, pc}
 800c3b2:	f082 0101 	eor.w	r1, r2, #1
 800c3b6:	54e1      	strb	r1, [r4, r3]
 800c3b8:	1c42      	adds	r2, r0, #1
 800c3ba:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800c3be:	2d2d      	cmp	r5, #45	; 0x2d
 800c3c0:	f102 36ff 	add.w	r6, r2, #4294967295
 800c3c4:	4610      	mov	r0, r2
 800c3c6:	d006      	beq.n	800c3d6 <__sccl+0x4e>
 800c3c8:	2d5d      	cmp	r5, #93	; 0x5d
 800c3ca:	d0f1      	beq.n	800c3b0 <__sccl+0x28>
 800c3cc:	b90d      	cbnz	r5, 800c3d2 <__sccl+0x4a>
 800c3ce:	4630      	mov	r0, r6
 800c3d0:	e7ee      	b.n	800c3b0 <__sccl+0x28>
 800c3d2:	462b      	mov	r3, r5
 800c3d4:	e7ef      	b.n	800c3b6 <__sccl+0x2e>
 800c3d6:	7816      	ldrb	r6, [r2, #0]
 800c3d8:	2e5d      	cmp	r6, #93	; 0x5d
 800c3da:	d0fa      	beq.n	800c3d2 <__sccl+0x4a>
 800c3dc:	42b3      	cmp	r3, r6
 800c3de:	dcf8      	bgt.n	800c3d2 <__sccl+0x4a>
 800c3e0:	4618      	mov	r0, r3
 800c3e2:	3001      	adds	r0, #1
 800c3e4:	4286      	cmp	r6, r0
 800c3e6:	5421      	strb	r1, [r4, r0]
 800c3e8:	dcfb      	bgt.n	800c3e2 <__sccl+0x5a>
 800c3ea:	43d8      	mvns	r0, r3
 800c3ec:	4430      	add	r0, r6
 800c3ee:	1c5d      	adds	r5, r3, #1
 800c3f0:	42b3      	cmp	r3, r6
 800c3f2:	bfa8      	it	ge
 800c3f4:	2000      	movge	r0, #0
 800c3f6:	182b      	adds	r3, r5, r0
 800c3f8:	3202      	adds	r2, #2
 800c3fa:	e7de      	b.n	800c3ba <__sccl+0x32>

0800c3fc <_strtol_l.isra.0>:
 800c3fc:	2b01      	cmp	r3, #1
 800c3fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c402:	d001      	beq.n	800c408 <_strtol_l.isra.0+0xc>
 800c404:	2b24      	cmp	r3, #36	; 0x24
 800c406:	d906      	bls.n	800c416 <_strtol_l.isra.0+0x1a>
 800c408:	f7fe fff0 	bl	800b3ec <__errno>
 800c40c:	2316      	movs	r3, #22
 800c40e:	6003      	str	r3, [r0, #0]
 800c410:	2000      	movs	r0, #0
 800c412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c416:	4f3a      	ldr	r7, [pc, #232]	; (800c500 <_strtol_l.isra.0+0x104>)
 800c418:	468e      	mov	lr, r1
 800c41a:	4676      	mov	r6, lr
 800c41c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c420:	5de5      	ldrb	r5, [r4, r7]
 800c422:	f015 0508 	ands.w	r5, r5, #8
 800c426:	d1f8      	bne.n	800c41a <_strtol_l.isra.0+0x1e>
 800c428:	2c2d      	cmp	r4, #45	; 0x2d
 800c42a:	d134      	bne.n	800c496 <_strtol_l.isra.0+0x9a>
 800c42c:	f89e 4000 	ldrb.w	r4, [lr]
 800c430:	f04f 0801 	mov.w	r8, #1
 800c434:	f106 0e02 	add.w	lr, r6, #2
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d05c      	beq.n	800c4f6 <_strtol_l.isra.0+0xfa>
 800c43c:	2b10      	cmp	r3, #16
 800c43e:	d10c      	bne.n	800c45a <_strtol_l.isra.0+0x5e>
 800c440:	2c30      	cmp	r4, #48	; 0x30
 800c442:	d10a      	bne.n	800c45a <_strtol_l.isra.0+0x5e>
 800c444:	f89e 4000 	ldrb.w	r4, [lr]
 800c448:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c44c:	2c58      	cmp	r4, #88	; 0x58
 800c44e:	d14d      	bne.n	800c4ec <_strtol_l.isra.0+0xf0>
 800c450:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800c454:	2310      	movs	r3, #16
 800c456:	f10e 0e02 	add.w	lr, lr, #2
 800c45a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800c45e:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c462:	2600      	movs	r6, #0
 800c464:	fbbc f9f3 	udiv	r9, ip, r3
 800c468:	4635      	mov	r5, r6
 800c46a:	fb03 ca19 	mls	sl, r3, r9, ip
 800c46e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800c472:	2f09      	cmp	r7, #9
 800c474:	d818      	bhi.n	800c4a8 <_strtol_l.isra.0+0xac>
 800c476:	463c      	mov	r4, r7
 800c478:	42a3      	cmp	r3, r4
 800c47a:	dd24      	ble.n	800c4c6 <_strtol_l.isra.0+0xca>
 800c47c:	2e00      	cmp	r6, #0
 800c47e:	db1f      	blt.n	800c4c0 <_strtol_l.isra.0+0xc4>
 800c480:	45a9      	cmp	r9, r5
 800c482:	d31d      	bcc.n	800c4c0 <_strtol_l.isra.0+0xc4>
 800c484:	d101      	bne.n	800c48a <_strtol_l.isra.0+0x8e>
 800c486:	45a2      	cmp	sl, r4
 800c488:	db1a      	blt.n	800c4c0 <_strtol_l.isra.0+0xc4>
 800c48a:	fb05 4503 	mla	r5, r5, r3, r4
 800c48e:	2601      	movs	r6, #1
 800c490:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800c494:	e7eb      	b.n	800c46e <_strtol_l.isra.0+0x72>
 800c496:	2c2b      	cmp	r4, #43	; 0x2b
 800c498:	bf08      	it	eq
 800c49a:	f89e 4000 	ldrbeq.w	r4, [lr]
 800c49e:	46a8      	mov	r8, r5
 800c4a0:	bf08      	it	eq
 800c4a2:	f106 0e02 	addeq.w	lr, r6, #2
 800c4a6:	e7c7      	b.n	800c438 <_strtol_l.isra.0+0x3c>
 800c4a8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800c4ac:	2f19      	cmp	r7, #25
 800c4ae:	d801      	bhi.n	800c4b4 <_strtol_l.isra.0+0xb8>
 800c4b0:	3c37      	subs	r4, #55	; 0x37
 800c4b2:	e7e1      	b.n	800c478 <_strtol_l.isra.0+0x7c>
 800c4b4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800c4b8:	2f19      	cmp	r7, #25
 800c4ba:	d804      	bhi.n	800c4c6 <_strtol_l.isra.0+0xca>
 800c4bc:	3c57      	subs	r4, #87	; 0x57
 800c4be:	e7db      	b.n	800c478 <_strtol_l.isra.0+0x7c>
 800c4c0:	f04f 36ff 	mov.w	r6, #4294967295
 800c4c4:	e7e4      	b.n	800c490 <_strtol_l.isra.0+0x94>
 800c4c6:	2e00      	cmp	r6, #0
 800c4c8:	da05      	bge.n	800c4d6 <_strtol_l.isra.0+0xda>
 800c4ca:	2322      	movs	r3, #34	; 0x22
 800c4cc:	6003      	str	r3, [r0, #0]
 800c4ce:	4665      	mov	r5, ip
 800c4d0:	b942      	cbnz	r2, 800c4e4 <_strtol_l.isra.0+0xe8>
 800c4d2:	4628      	mov	r0, r5
 800c4d4:	e79d      	b.n	800c412 <_strtol_l.isra.0+0x16>
 800c4d6:	f1b8 0f00 	cmp.w	r8, #0
 800c4da:	d000      	beq.n	800c4de <_strtol_l.isra.0+0xe2>
 800c4dc:	426d      	negs	r5, r5
 800c4de:	2a00      	cmp	r2, #0
 800c4e0:	d0f7      	beq.n	800c4d2 <_strtol_l.isra.0+0xd6>
 800c4e2:	b10e      	cbz	r6, 800c4e8 <_strtol_l.isra.0+0xec>
 800c4e4:	f10e 31ff 	add.w	r1, lr, #4294967295
 800c4e8:	6011      	str	r1, [r2, #0]
 800c4ea:	e7f2      	b.n	800c4d2 <_strtol_l.isra.0+0xd6>
 800c4ec:	2430      	movs	r4, #48	; 0x30
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d1b3      	bne.n	800c45a <_strtol_l.isra.0+0x5e>
 800c4f2:	2308      	movs	r3, #8
 800c4f4:	e7b1      	b.n	800c45a <_strtol_l.isra.0+0x5e>
 800c4f6:	2c30      	cmp	r4, #48	; 0x30
 800c4f8:	d0a4      	beq.n	800c444 <_strtol_l.isra.0+0x48>
 800c4fa:	230a      	movs	r3, #10
 800c4fc:	e7ad      	b.n	800c45a <_strtol_l.isra.0+0x5e>
 800c4fe:	bf00      	nop
 800c500:	0800c94b 	.word	0x0800c94b

0800c504 <_strtol_r>:
 800c504:	f7ff bf7a 	b.w	800c3fc <_strtol_l.isra.0>

0800c508 <_strtoul_l.isra.0>:
 800c508:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c50c:	4e3b      	ldr	r6, [pc, #236]	; (800c5fc <_strtoul_l.isra.0+0xf4>)
 800c50e:	4686      	mov	lr, r0
 800c510:	468c      	mov	ip, r1
 800c512:	4660      	mov	r0, ip
 800c514:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c518:	5da5      	ldrb	r5, [r4, r6]
 800c51a:	f015 0508 	ands.w	r5, r5, #8
 800c51e:	d1f8      	bne.n	800c512 <_strtoul_l.isra.0+0xa>
 800c520:	2c2d      	cmp	r4, #45	; 0x2d
 800c522:	d134      	bne.n	800c58e <_strtoul_l.isra.0+0x86>
 800c524:	f89c 4000 	ldrb.w	r4, [ip]
 800c528:	f04f 0801 	mov.w	r8, #1
 800c52c:	f100 0c02 	add.w	ip, r0, #2
 800c530:	2b00      	cmp	r3, #0
 800c532:	d05e      	beq.n	800c5f2 <_strtoul_l.isra.0+0xea>
 800c534:	2b10      	cmp	r3, #16
 800c536:	d10c      	bne.n	800c552 <_strtoul_l.isra.0+0x4a>
 800c538:	2c30      	cmp	r4, #48	; 0x30
 800c53a:	d10a      	bne.n	800c552 <_strtoul_l.isra.0+0x4a>
 800c53c:	f89c 0000 	ldrb.w	r0, [ip]
 800c540:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800c544:	2858      	cmp	r0, #88	; 0x58
 800c546:	d14f      	bne.n	800c5e8 <_strtoul_l.isra.0+0xe0>
 800c548:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800c54c:	2310      	movs	r3, #16
 800c54e:	f10c 0c02 	add.w	ip, ip, #2
 800c552:	f04f 37ff 	mov.w	r7, #4294967295
 800c556:	2500      	movs	r5, #0
 800c558:	fbb7 f7f3 	udiv	r7, r7, r3
 800c55c:	fb03 f907 	mul.w	r9, r3, r7
 800c560:	ea6f 0909 	mvn.w	r9, r9
 800c564:	4628      	mov	r0, r5
 800c566:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800c56a:	2e09      	cmp	r6, #9
 800c56c:	d818      	bhi.n	800c5a0 <_strtoul_l.isra.0+0x98>
 800c56e:	4634      	mov	r4, r6
 800c570:	42a3      	cmp	r3, r4
 800c572:	dd24      	ble.n	800c5be <_strtoul_l.isra.0+0xb6>
 800c574:	2d00      	cmp	r5, #0
 800c576:	db1f      	blt.n	800c5b8 <_strtoul_l.isra.0+0xb0>
 800c578:	4287      	cmp	r7, r0
 800c57a:	d31d      	bcc.n	800c5b8 <_strtoul_l.isra.0+0xb0>
 800c57c:	d101      	bne.n	800c582 <_strtoul_l.isra.0+0x7a>
 800c57e:	45a1      	cmp	r9, r4
 800c580:	db1a      	blt.n	800c5b8 <_strtoul_l.isra.0+0xb0>
 800c582:	fb00 4003 	mla	r0, r0, r3, r4
 800c586:	2501      	movs	r5, #1
 800c588:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800c58c:	e7eb      	b.n	800c566 <_strtoul_l.isra.0+0x5e>
 800c58e:	2c2b      	cmp	r4, #43	; 0x2b
 800c590:	bf08      	it	eq
 800c592:	f89c 4000 	ldrbeq.w	r4, [ip]
 800c596:	46a8      	mov	r8, r5
 800c598:	bf08      	it	eq
 800c59a:	f100 0c02 	addeq.w	ip, r0, #2
 800c59e:	e7c7      	b.n	800c530 <_strtoul_l.isra.0+0x28>
 800c5a0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800c5a4:	2e19      	cmp	r6, #25
 800c5a6:	d801      	bhi.n	800c5ac <_strtoul_l.isra.0+0xa4>
 800c5a8:	3c37      	subs	r4, #55	; 0x37
 800c5aa:	e7e1      	b.n	800c570 <_strtoul_l.isra.0+0x68>
 800c5ac:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800c5b0:	2e19      	cmp	r6, #25
 800c5b2:	d804      	bhi.n	800c5be <_strtoul_l.isra.0+0xb6>
 800c5b4:	3c57      	subs	r4, #87	; 0x57
 800c5b6:	e7db      	b.n	800c570 <_strtoul_l.isra.0+0x68>
 800c5b8:	f04f 35ff 	mov.w	r5, #4294967295
 800c5bc:	e7e4      	b.n	800c588 <_strtoul_l.isra.0+0x80>
 800c5be:	2d00      	cmp	r5, #0
 800c5c0:	da07      	bge.n	800c5d2 <_strtoul_l.isra.0+0xca>
 800c5c2:	2322      	movs	r3, #34	; 0x22
 800c5c4:	f8ce 3000 	str.w	r3, [lr]
 800c5c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c5cc:	b942      	cbnz	r2, 800c5e0 <_strtoul_l.isra.0+0xd8>
 800c5ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5d2:	f1b8 0f00 	cmp.w	r8, #0
 800c5d6:	d000      	beq.n	800c5da <_strtoul_l.isra.0+0xd2>
 800c5d8:	4240      	negs	r0, r0
 800c5da:	2a00      	cmp	r2, #0
 800c5dc:	d0f7      	beq.n	800c5ce <_strtoul_l.isra.0+0xc6>
 800c5de:	b10d      	cbz	r5, 800c5e4 <_strtoul_l.isra.0+0xdc>
 800c5e0:	f10c 31ff 	add.w	r1, ip, #4294967295
 800c5e4:	6011      	str	r1, [r2, #0]
 800c5e6:	e7f2      	b.n	800c5ce <_strtoul_l.isra.0+0xc6>
 800c5e8:	2430      	movs	r4, #48	; 0x30
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d1b1      	bne.n	800c552 <_strtoul_l.isra.0+0x4a>
 800c5ee:	2308      	movs	r3, #8
 800c5f0:	e7af      	b.n	800c552 <_strtoul_l.isra.0+0x4a>
 800c5f2:	2c30      	cmp	r4, #48	; 0x30
 800c5f4:	d0a2      	beq.n	800c53c <_strtoul_l.isra.0+0x34>
 800c5f6:	230a      	movs	r3, #10
 800c5f8:	e7ab      	b.n	800c552 <_strtoul_l.isra.0+0x4a>
 800c5fa:	bf00      	nop
 800c5fc:	0800c94b 	.word	0x0800c94b

0800c600 <_strtoul_r>:
 800c600:	f7ff bf82 	b.w	800c508 <_strtoul_l.isra.0>

0800c604 <__submore>:
 800c604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c608:	460c      	mov	r4, r1
 800c60a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800c60c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c610:	4299      	cmp	r1, r3
 800c612:	d11d      	bne.n	800c650 <__submore+0x4c>
 800c614:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c618:	f7fe ff2a 	bl	800b470 <_malloc_r>
 800c61c:	b918      	cbnz	r0, 800c626 <__submore+0x22>
 800c61e:	f04f 30ff 	mov.w	r0, #4294967295
 800c622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c626:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c62a:	63a3      	str	r3, [r4, #56]	; 0x38
 800c62c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800c630:	6360      	str	r0, [r4, #52]	; 0x34
 800c632:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c636:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800c63a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c63e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800c642:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c646:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800c64a:	6020      	str	r0, [r4, #0]
 800c64c:	2000      	movs	r0, #0
 800c64e:	e7e8      	b.n	800c622 <__submore+0x1e>
 800c650:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800c652:	0077      	lsls	r7, r6, #1
 800c654:	463a      	mov	r2, r7
 800c656:	f000 f829 	bl	800c6ac <_realloc_r>
 800c65a:	4605      	mov	r5, r0
 800c65c:	2800      	cmp	r0, #0
 800c65e:	d0de      	beq.n	800c61e <__submore+0x1a>
 800c660:	eb00 0806 	add.w	r8, r0, r6
 800c664:	4601      	mov	r1, r0
 800c666:	4632      	mov	r2, r6
 800c668:	4640      	mov	r0, r8
 800c66a:	f7fe feeb 	bl	800b444 <memcpy>
 800c66e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800c672:	f8c4 8000 	str.w	r8, [r4]
 800c676:	e7e9      	b.n	800c64c <__submore+0x48>

0800c678 <memmove>:
 800c678:	4288      	cmp	r0, r1
 800c67a:	b510      	push	{r4, lr}
 800c67c:	eb01 0402 	add.w	r4, r1, r2
 800c680:	d902      	bls.n	800c688 <memmove+0x10>
 800c682:	4284      	cmp	r4, r0
 800c684:	4623      	mov	r3, r4
 800c686:	d807      	bhi.n	800c698 <memmove+0x20>
 800c688:	1e43      	subs	r3, r0, #1
 800c68a:	42a1      	cmp	r1, r4
 800c68c:	d008      	beq.n	800c6a0 <memmove+0x28>
 800c68e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c692:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c696:	e7f8      	b.n	800c68a <memmove+0x12>
 800c698:	4402      	add	r2, r0
 800c69a:	4601      	mov	r1, r0
 800c69c:	428a      	cmp	r2, r1
 800c69e:	d100      	bne.n	800c6a2 <memmove+0x2a>
 800c6a0:	bd10      	pop	{r4, pc}
 800c6a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c6a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c6aa:	e7f7      	b.n	800c69c <memmove+0x24>

0800c6ac <_realloc_r>:
 800c6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ae:	4607      	mov	r7, r0
 800c6b0:	4614      	mov	r4, r2
 800c6b2:	460e      	mov	r6, r1
 800c6b4:	b921      	cbnz	r1, 800c6c0 <_realloc_r+0x14>
 800c6b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c6ba:	4611      	mov	r1, r2
 800c6bc:	f7fe bed8 	b.w	800b470 <_malloc_r>
 800c6c0:	b922      	cbnz	r2, 800c6cc <_realloc_r+0x20>
 800c6c2:	f7ff f803 	bl	800b6cc <_free_r>
 800c6c6:	4625      	mov	r5, r4
 800c6c8:	4628      	mov	r0, r5
 800c6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6cc:	f000 f814 	bl	800c6f8 <_malloc_usable_size_r>
 800c6d0:	42a0      	cmp	r0, r4
 800c6d2:	d20f      	bcs.n	800c6f4 <_realloc_r+0x48>
 800c6d4:	4621      	mov	r1, r4
 800c6d6:	4638      	mov	r0, r7
 800c6d8:	f7fe feca 	bl	800b470 <_malloc_r>
 800c6dc:	4605      	mov	r5, r0
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	d0f2      	beq.n	800c6c8 <_realloc_r+0x1c>
 800c6e2:	4631      	mov	r1, r6
 800c6e4:	4622      	mov	r2, r4
 800c6e6:	f7fe fead 	bl	800b444 <memcpy>
 800c6ea:	4631      	mov	r1, r6
 800c6ec:	4638      	mov	r0, r7
 800c6ee:	f7fe ffed 	bl	800b6cc <_free_r>
 800c6f2:	e7e9      	b.n	800c6c8 <_realloc_r+0x1c>
 800c6f4:	4635      	mov	r5, r6
 800c6f6:	e7e7      	b.n	800c6c8 <_realloc_r+0x1c>

0800c6f8 <_malloc_usable_size_r>:
 800c6f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6fc:	1f18      	subs	r0, r3, #4
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	bfbc      	itt	lt
 800c702:	580b      	ldrlt	r3, [r1, r0]
 800c704:	18c0      	addlt	r0, r0, r3
 800c706:	4770      	bx	lr

0800c708 <_init>:
 800c708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c70a:	bf00      	nop
 800c70c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c70e:	bc08      	pop	{r3}
 800c710:	469e      	mov	lr, r3
 800c712:	4770      	bx	lr

0800c714 <_fini>:
 800c714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c716:	bf00      	nop
 800c718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c71a:	bc08      	pop	{r3}
 800c71c:	469e      	mov	lr, r3
 800c71e:	4770      	bx	lr
