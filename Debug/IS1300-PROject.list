
IS1300-PROject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08007dd4  08007dd4  00017dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008044  08008044  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08008044  08008044  00018044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800804c  0800804c  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800804c  0800804c  0001804c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008050  08008050  00018050  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08008054  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000080  080080d4  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  080080d4  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d30e  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003860  00000000  00000000  0003d3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013c8  00000000  00000000  00040c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001230  00000000  00000000  00041fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029fe7  00000000  00000000  00043218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001abf4  00000000  00000000  0006d1ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd649  00000000  00000000  00087df3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0018543c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a40  00000000  00000000  00185490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007dbc 	.word	0x08007dbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	08007dbc 	.word	0x08007dbc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b96e 	b.w	8000d50 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9d08      	ldr	r5, [sp, #32]
 8000a92:	4604      	mov	r4, r0
 8000a94:	468c      	mov	ip, r1
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f040 8083 	bne.w	8000ba2 <__udivmoddi4+0x116>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4617      	mov	r7, r2
 8000aa0:	d947      	bls.n	8000b32 <__udivmoddi4+0xa6>
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	b142      	cbz	r2, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	f1c2 0020 	rsb	r0, r2, #32
 8000aac:	fa24 f000 	lsr.w	r0, r4, r0
 8000ab0:	4091      	lsls	r1, r2
 8000ab2:	4097      	lsls	r7, r2
 8000ab4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ab8:	4094      	lsls	r4, r2
 8000aba:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000abe:	0c23      	lsrs	r3, r4, #16
 8000ac0:	fbbc f6f8 	udiv	r6, ip, r8
 8000ac4:	fa1f fe87 	uxth.w	lr, r7
 8000ac8:	fb08 c116 	mls	r1, r8, r6, ip
 8000acc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ad0:	fb06 f10e 	mul.w	r1, r6, lr
 8000ad4:	4299      	cmp	r1, r3
 8000ad6:	d909      	bls.n	8000aec <__udivmoddi4+0x60>
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ade:	f080 8119 	bcs.w	8000d14 <__udivmoddi4+0x288>
 8000ae2:	4299      	cmp	r1, r3
 8000ae4:	f240 8116 	bls.w	8000d14 <__udivmoddi4+0x288>
 8000ae8:	3e02      	subs	r6, #2
 8000aea:	443b      	add	r3, r7
 8000aec:	1a5b      	subs	r3, r3, r1
 8000aee:	b2a4      	uxth	r4, r4
 8000af0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000af4:	fb08 3310 	mls	r3, r8, r0, r3
 8000af8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000afc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b00:	45a6      	cmp	lr, r4
 8000b02:	d909      	bls.n	8000b18 <__udivmoddi4+0x8c>
 8000b04:	193c      	adds	r4, r7, r4
 8000b06:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b0a:	f080 8105 	bcs.w	8000d18 <__udivmoddi4+0x28c>
 8000b0e:	45a6      	cmp	lr, r4
 8000b10:	f240 8102 	bls.w	8000d18 <__udivmoddi4+0x28c>
 8000b14:	3802      	subs	r0, #2
 8000b16:	443c      	add	r4, r7
 8000b18:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b1c:	eba4 040e 	sub.w	r4, r4, lr
 8000b20:	2600      	movs	r6, #0
 8000b22:	b11d      	cbz	r5, 8000b2c <__udivmoddi4+0xa0>
 8000b24:	40d4      	lsrs	r4, r2
 8000b26:	2300      	movs	r3, #0
 8000b28:	e9c5 4300 	strd	r4, r3, [r5]
 8000b2c:	4631      	mov	r1, r6
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	b902      	cbnz	r2, 8000b36 <__udivmoddi4+0xaa>
 8000b34:	deff      	udf	#255	; 0xff
 8000b36:	fab2 f282 	clz	r2, r2
 8000b3a:	2a00      	cmp	r2, #0
 8000b3c:	d150      	bne.n	8000be0 <__udivmoddi4+0x154>
 8000b3e:	1bcb      	subs	r3, r1, r7
 8000b40:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b44:	fa1f f887 	uxth.w	r8, r7
 8000b48:	2601      	movs	r6, #1
 8000b4a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b4e:	0c21      	lsrs	r1, r4, #16
 8000b50:	fb0e 331c 	mls	r3, lr, ip, r3
 8000b54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b58:	fb08 f30c 	mul.w	r3, r8, ip
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	d907      	bls.n	8000b70 <__udivmoddi4+0xe4>
 8000b60:	1879      	adds	r1, r7, r1
 8000b62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0xe2>
 8000b68:	428b      	cmp	r3, r1
 8000b6a:	f200 80e9 	bhi.w	8000d40 <__udivmoddi4+0x2b4>
 8000b6e:	4684      	mov	ip, r0
 8000b70:	1ac9      	subs	r1, r1, r3
 8000b72:	b2a3      	uxth	r3, r4
 8000b74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b78:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b80:	fb08 f800 	mul.w	r8, r8, r0
 8000b84:	45a0      	cmp	r8, r4
 8000b86:	d907      	bls.n	8000b98 <__udivmoddi4+0x10c>
 8000b88:	193c      	adds	r4, r7, r4
 8000b8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b8e:	d202      	bcs.n	8000b96 <__udivmoddi4+0x10a>
 8000b90:	45a0      	cmp	r8, r4
 8000b92:	f200 80d9 	bhi.w	8000d48 <__udivmoddi4+0x2bc>
 8000b96:	4618      	mov	r0, r3
 8000b98:	eba4 0408 	sub.w	r4, r4, r8
 8000b9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ba0:	e7bf      	b.n	8000b22 <__udivmoddi4+0x96>
 8000ba2:	428b      	cmp	r3, r1
 8000ba4:	d909      	bls.n	8000bba <__udivmoddi4+0x12e>
 8000ba6:	2d00      	cmp	r5, #0
 8000ba8:	f000 80b1 	beq.w	8000d0e <__udivmoddi4+0x282>
 8000bac:	2600      	movs	r6, #0
 8000bae:	e9c5 0100 	strd	r0, r1, [r5]
 8000bb2:	4630      	mov	r0, r6
 8000bb4:	4631      	mov	r1, r6
 8000bb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bba:	fab3 f683 	clz	r6, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d14a      	bne.n	8000c58 <__udivmoddi4+0x1cc>
 8000bc2:	428b      	cmp	r3, r1
 8000bc4:	d302      	bcc.n	8000bcc <__udivmoddi4+0x140>
 8000bc6:	4282      	cmp	r2, r0
 8000bc8:	f200 80b8 	bhi.w	8000d3c <__udivmoddi4+0x2b0>
 8000bcc:	1a84      	subs	r4, r0, r2
 8000bce:	eb61 0103 	sbc.w	r1, r1, r3
 8000bd2:	2001      	movs	r0, #1
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	2d00      	cmp	r5, #0
 8000bd8:	d0a8      	beq.n	8000b2c <__udivmoddi4+0xa0>
 8000bda:	e9c5 4c00 	strd	r4, ip, [r5]
 8000bde:	e7a5      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000be0:	f1c2 0320 	rsb	r3, r2, #32
 8000be4:	fa20 f603 	lsr.w	r6, r0, r3
 8000be8:	4097      	lsls	r7, r2
 8000bea:	fa01 f002 	lsl.w	r0, r1, r2
 8000bee:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf2:	40d9      	lsrs	r1, r3
 8000bf4:	4330      	orrs	r0, r6
 8000bf6:	0c03      	lsrs	r3, r0, #16
 8000bf8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000bfc:	fa1f f887 	uxth.w	r8, r7
 8000c00:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c08:	fb06 f108 	mul.w	r1, r6, r8
 8000c0c:	4299      	cmp	r1, r3
 8000c0e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c12:	d909      	bls.n	8000c28 <__udivmoddi4+0x19c>
 8000c14:	18fb      	adds	r3, r7, r3
 8000c16:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c1a:	f080 808d 	bcs.w	8000d38 <__udivmoddi4+0x2ac>
 8000c1e:	4299      	cmp	r1, r3
 8000c20:	f240 808a 	bls.w	8000d38 <__udivmoddi4+0x2ac>
 8000c24:	3e02      	subs	r6, #2
 8000c26:	443b      	add	r3, r7
 8000c28:	1a5b      	subs	r3, r3, r1
 8000c2a:	b281      	uxth	r1, r0
 8000c2c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c30:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c34:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c38:	fb00 f308 	mul.w	r3, r0, r8
 8000c3c:	428b      	cmp	r3, r1
 8000c3e:	d907      	bls.n	8000c50 <__udivmoddi4+0x1c4>
 8000c40:	1879      	adds	r1, r7, r1
 8000c42:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c46:	d273      	bcs.n	8000d30 <__udivmoddi4+0x2a4>
 8000c48:	428b      	cmp	r3, r1
 8000c4a:	d971      	bls.n	8000d30 <__udivmoddi4+0x2a4>
 8000c4c:	3802      	subs	r0, #2
 8000c4e:	4439      	add	r1, r7
 8000c50:	1acb      	subs	r3, r1, r3
 8000c52:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000c56:	e778      	b.n	8000b4a <__udivmoddi4+0xbe>
 8000c58:	f1c6 0c20 	rsb	ip, r6, #32
 8000c5c:	fa03 f406 	lsl.w	r4, r3, r6
 8000c60:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c64:	431c      	orrs	r4, r3
 8000c66:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000c6e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c72:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c76:	431f      	orrs	r7, r3
 8000c78:	0c3b      	lsrs	r3, r7, #16
 8000c7a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c7e:	fa1f f884 	uxth.w	r8, r4
 8000c82:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c86:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c8a:	fb09 fa08 	mul.w	sl, r9, r8
 8000c8e:	458a      	cmp	sl, r1
 8000c90:	fa02 f206 	lsl.w	r2, r2, r6
 8000c94:	fa00 f306 	lsl.w	r3, r0, r6
 8000c98:	d908      	bls.n	8000cac <__udivmoddi4+0x220>
 8000c9a:	1861      	adds	r1, r4, r1
 8000c9c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ca0:	d248      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca2:	458a      	cmp	sl, r1
 8000ca4:	d946      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000ca6:	f1a9 0902 	sub.w	r9, r9, #2
 8000caa:	4421      	add	r1, r4
 8000cac:	eba1 010a 	sub.w	r1, r1, sl
 8000cb0:	b2bf      	uxth	r7, r7
 8000cb2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cb6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000cba:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000cbe:	fb00 f808 	mul.w	r8, r0, r8
 8000cc2:	45b8      	cmp	r8, r7
 8000cc4:	d907      	bls.n	8000cd6 <__udivmoddi4+0x24a>
 8000cc6:	19e7      	adds	r7, r4, r7
 8000cc8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ccc:	d22e      	bcs.n	8000d2c <__udivmoddi4+0x2a0>
 8000cce:	45b8      	cmp	r8, r7
 8000cd0:	d92c      	bls.n	8000d2c <__udivmoddi4+0x2a0>
 8000cd2:	3802      	subs	r0, #2
 8000cd4:	4427      	add	r7, r4
 8000cd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cda:	eba7 0708 	sub.w	r7, r7, r8
 8000cde:	fba0 8902 	umull	r8, r9, r0, r2
 8000ce2:	454f      	cmp	r7, r9
 8000ce4:	46c6      	mov	lr, r8
 8000ce6:	4649      	mov	r1, r9
 8000ce8:	d31a      	bcc.n	8000d20 <__udivmoddi4+0x294>
 8000cea:	d017      	beq.n	8000d1c <__udivmoddi4+0x290>
 8000cec:	b15d      	cbz	r5, 8000d06 <__udivmoddi4+0x27a>
 8000cee:	ebb3 020e 	subs.w	r2, r3, lr
 8000cf2:	eb67 0701 	sbc.w	r7, r7, r1
 8000cf6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000cfa:	40f2      	lsrs	r2, r6
 8000cfc:	ea4c 0202 	orr.w	r2, ip, r2
 8000d00:	40f7      	lsrs	r7, r6
 8000d02:	e9c5 2700 	strd	r2, r7, [r5]
 8000d06:	2600      	movs	r6, #0
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	462e      	mov	r6, r5
 8000d10:	4628      	mov	r0, r5
 8000d12:	e70b      	b.n	8000b2c <__udivmoddi4+0xa0>
 8000d14:	4606      	mov	r6, r0
 8000d16:	e6e9      	b.n	8000aec <__udivmoddi4+0x60>
 8000d18:	4618      	mov	r0, r3
 8000d1a:	e6fd      	b.n	8000b18 <__udivmoddi4+0x8c>
 8000d1c:	4543      	cmp	r3, r8
 8000d1e:	d2e5      	bcs.n	8000cec <__udivmoddi4+0x260>
 8000d20:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d24:	eb69 0104 	sbc.w	r1, r9, r4
 8000d28:	3801      	subs	r0, #1
 8000d2a:	e7df      	b.n	8000cec <__udivmoddi4+0x260>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	e7d2      	b.n	8000cd6 <__udivmoddi4+0x24a>
 8000d30:	4660      	mov	r0, ip
 8000d32:	e78d      	b.n	8000c50 <__udivmoddi4+0x1c4>
 8000d34:	4681      	mov	r9, r0
 8000d36:	e7b9      	b.n	8000cac <__udivmoddi4+0x220>
 8000d38:	4666      	mov	r6, ip
 8000d3a:	e775      	b.n	8000c28 <__udivmoddi4+0x19c>
 8000d3c:	4630      	mov	r0, r6
 8000d3e:	e74a      	b.n	8000bd6 <__udivmoddi4+0x14a>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	4439      	add	r1, r7
 8000d46:	e713      	b.n	8000b70 <__udivmoddi4+0xe4>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	443c      	add	r4, r7
 8000d4c:	e724      	b.n	8000b98 <__udivmoddi4+0x10c>
 8000d4e:	bf00      	nop

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <start_clock>:


/**
 * @brief start the RTC clock
 */
void start_clock (uint8_t hours, uint8_t minutes, uint8_t seconds) {
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	71fb      	strb	r3, [r7, #7]
 8000d5e:	460b      	mov	r3, r1
 8000d60:	71bb      	strb	r3, [r7, #6]
 8000d62:	4613      	mov	r3, r2
 8000d64:	717b      	strb	r3, [r7, #5]
    RTC_TimeTypeDef time;
    time.Hours = hours;
 8000d66:	79fb      	ldrb	r3, [r7, #7]
 8000d68:	733b      	strb	r3, [r7, #12]
    time.Minutes = minutes;
 8000d6a:	79bb      	ldrb	r3, [r7, #6]
 8000d6c:	737b      	strb	r3, [r7, #13]
    time.Seconds = seconds;
 8000d6e:	797b      	ldrb	r3, [r7, #5]
 8000d70:	73bb      	strb	r3, [r7, #14]

    /* date has to be set to start the clock */
    HAL_RTC_SetDate(&hrtc, NULL, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2100      	movs	r1, #0
 8000d76:	4807      	ldr	r0, [pc, #28]	; (8000d94 <start_clock+0x40>)
 8000d78:	f002 fffa 	bl	8003d70 <HAL_RTC_SetDate>
    HAL_RTC_SetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	2200      	movs	r2, #0
 8000d82:	4619      	mov	r1, r3
 8000d84:	4803      	ldr	r0, [pc, #12]	; (8000d94 <start_clock+0x40>)
 8000d86:	f002 fefa 	bl	8003b7e <HAL_RTC_SetTime>
}
 8000d8a:	bf00      	nop
 8000d8c:	3720      	adds	r7, #32
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	200000ac 	.word	0x200000ac

08000d98 <get_time>:

/**
 * @brief Get the current RTC time
 * @return Pointer to the time struct
 */
void get_time (RTC_TimeTypeDef *time) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
    HAL_RTC_GetTime(&hrtc, time, RTC_FORMAT_BIN);
 8000da0:	2200      	movs	r2, #0
 8000da2:	6879      	ldr	r1, [r7, #4]
 8000da4:	480b      	ldr	r0, [pc, #44]	; (8000dd4 <get_time+0x3c>)
 8000da6:	f002 ff87 	bl	8003cb8 <HAL_RTC_GetTime>
    HAL_RTC_GetDate(&hrtc, NULL, RTC_FORMAT_BIN);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <get_time+0x3c>)
 8000db0:	f003 f865 	bl	8003e7e <HAL_RTC_GetDate>

    /* sad but the RTC started counting beyond :( */
    if (time->Hours == 24) {
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	2b18      	cmp	r3, #24
 8000dba:	d107      	bne.n	8000dcc <get_time+0x34>
        time->Hours = 0;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	701a      	strb	r2, [r3, #0]
        HAL_RTC_SetTime(&hrtc, time, RTC_FORMAT_BIN);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	6879      	ldr	r1, [r7, #4]
 8000dc6:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <get_time+0x3c>)
 8000dc8:	f002 fed9 	bl	8003b7e <HAL_RTC_SetTime>
    }
}
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	200000ac 	.word	0x200000ac

08000dd8 <hardware_reset>:
uint16_t pins[] = {Disp_White_Pin, Disp_Green_Pin};

/**
 * @brief Perform a hardware reset on the display
 */
void hardware_reset () {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
    HAL_Delay(5);
 8000ddc:	2005      	movs	r0, #5
 8000dde:	f000 ffd1 	bl	8001d84 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000de8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dec:	f001 fb28 	bl	8002440 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8000df0:	200a      	movs	r0, #10
 8000df2:	f000 ffc7 	bl	8001d84 <HAL_Delay>
    HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e00:	f001 fb1e 	bl	8002440 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000e04:	2001      	movs	r0, #1
 8000e06:	f000 ffbd 	bl	8001d84 <HAL_Delay>
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <test_backlight>:


/**
 * @brief Test all backlight colors
 */
void test_backlight () {
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
    // TODO add red pwm
    for (int i = 0; i < 3; ++i) {
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	e02c      	b.n	8000e76 <test_backlight+0x66>
        if (i != 2) {
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d01b      	beq.n	8000e5a <test_backlight+0x4a>
            HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_SET);
 8000e22:	4a1d      	ldr	r2, [pc, #116]	; (8000e98 <test_backlight+0x88>)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e2a:	4a1c      	ldr	r2, [pc, #112]	; (8000e9c <test_backlight+0x8c>)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e32:	2201      	movs	r2, #1
 8000e34:	4619      	mov	r1, r3
 8000e36:	f001 fb03 	bl	8002440 <HAL_GPIO_WritePin>
            HAL_Delay(200);
 8000e3a:	20c8      	movs	r0, #200	; 0xc8
 8000e3c:	f000 ffa2 	bl	8001d84 <HAL_Delay>
            HAL_GPIO_WritePin(ports[i], pins[i], GPIO_PIN_RESET);
 8000e40:	4a15      	ldr	r2, [pc, #84]	; (8000e98 <test_backlight+0x88>)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000e48:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <test_backlight+0x8c>)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000e50:	2200      	movs	r2, #0
 8000e52:	4619      	mov	r1, r3
 8000e54:	f001 faf4 	bl	8002440 <HAL_GPIO_WritePin>
 8000e58:	e00a      	b.n	8000e70 <test_backlight+0x60>
        } else {
            set_brightness(1.0);
 8000e5a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8000e88 <test_backlight+0x78>
 8000e5e:	f000 fb1b 	bl	8001498 <set_brightness>
            HAL_Delay(200);
 8000e62:	20c8      	movs	r0, #200	; 0xc8
 8000e64:	f000 ff8e 	bl	8001d84 <HAL_Delay>
            set_brightness(0.0);
 8000e68:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8000e90 <test_backlight+0x80>
 8000e6c:	f000 fb14 	bl	8001498 <set_brightness>
    for (int i = 0; i < 3; ++i) {
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	3301      	adds	r3, #1
 8000e74:	607b      	str	r3, [r7, #4]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	ddcf      	ble.n	8000e1c <test_backlight+0xc>
        }
    }
}
 8000e7c:	bf00      	nop
 8000e7e:	bf00      	nop
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	00000000 	.word	0x00000000
 8000e8c:	3ff00000 	.word	0x3ff00000
	...
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	20000008 	.word	0x20000008

08000ea0 <set_backlight>:


/**
 * @brief Set a backlight color
 */
void set_backlight (uint8_t color, GPIO_PinState state) {
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	460a      	mov	r2, r1
 8000eaa:	71fb      	strb	r3, [r7, #7]
 8000eac:	4613      	mov	r3, r2
 8000eae:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(ports[color], pins[color], state);
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	4a07      	ldr	r2, [pc, #28]	; (8000ed0 <set_backlight+0x30>)
 8000eb4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <set_backlight+0x34>)
 8000ebc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ec0:	79ba      	ldrb	r2, [r7, #6]
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	f001 fabc 	bl	8002440 <HAL_GPIO_WritePin>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000008 	.word	0x20000008

08000ed8 <split_byte>:
/**
 * @brief Split a byte to send to the display
 * @param[in] byte The byte to split into two
 * @param[out] buffer Where to place the two new bytes
 */
void split_byte (uint8_t byte, uint8_t *buffer) {
 8000ed8:	b480      	push	{r7}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	4603      	mov	r3, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	71fb      	strb	r3, [r7, #7]
    buffer[0] = byte & 0x0F;            // lower bits first
 8000ee4:	79fb      	ldrb	r3, [r7, #7]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	701a      	strb	r2, [r3, #0]
    buffer[1] = (byte & 0xF0) >> 4;     // upper bits second
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	79fa      	ldrb	r2, [r7, #7]
 8000ef6:	0912      	lsrs	r2, r2, #4
 8000ef8:	b2d2      	uxtb	r2, r2
 8000efa:	701a      	strb	r2, [r3, #0]
}
 8000efc:	bf00      	nop
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <display_transmit>:
 * @brief Send the display data or instructions
 * @param[in] startbyte The byte setting that initiates the transmit
 * @param[in] bytes The bytes that will be sent to the display
 * @param[in] length The number of bytes to send
 */
int display_transmit (uint8_t startbyte, uint8_t *bytes, uint16_t length) {
 8000f08:	b5b0      	push	{r4, r5, r7, lr}
 8000f0a:	b088      	sub	sp, #32
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	4603      	mov	r3, r0
 8000f10:	6039      	str	r1, [r7, #0]
 8000f12:	71fb      	strb	r3, [r7, #7]
 8000f14:	4613      	mov	r3, r2
 8000f16:	80bb      	strh	r3, [r7, #4]
 8000f18:	466b      	mov	r3, sp
 8000f1a:	461d      	mov	r5, r3
    /* create message to transmit */
    uint16_t mes_length = length*2 +1; // +1 for start byte
 8000f1c:	88bb      	ldrh	r3, [r7, #4]
 8000f1e:	005b      	lsls	r3, r3, #1
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	3301      	adds	r3, #1
 8000f24:	837b      	strh	r3, [r7, #26]
    uint8_t message[mes_length];
 8000f26:	8b7c      	ldrh	r4, [r7, #26]
 8000f28:	4623      	mov	r3, r4
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	b2a0      	uxth	r0, r4
 8000f30:	f04f 0100 	mov.w	r1, #0
 8000f34:	f04f 0200 	mov.w	r2, #0
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	00cb      	lsls	r3, r1, #3
 8000f3e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f42:	00c2      	lsls	r2, r0, #3
 8000f44:	b2a0      	uxth	r0, r4
 8000f46:	f04f 0100 	mov.w	r1, #0
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	00cb      	lsls	r3, r1, #3
 8000f54:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000f58:	00c2      	lsls	r2, r0, #3
 8000f5a:	4623      	mov	r3, r4
 8000f5c:	3307      	adds	r3, #7
 8000f5e:	08db      	lsrs	r3, r3, #3
 8000f60:	00db      	lsls	r3, r3, #3
 8000f62:	ebad 0d03 	sub.w	sp, sp, r3
 8000f66:	466b      	mov	r3, sp
 8000f68:	3300      	adds	r3, #0
 8000f6a:	613b      	str	r3, [r7, #16]

    message[0] = startbyte;  // start byte
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	79fa      	ldrb	r2, [r7, #7]
 8000f70:	701a      	strb	r2, [r3, #0]

    uint8_t divided[2]; // for splitting a byte into two
    for (int i = 0; i < length; ++i) {
 8000f72:	2300      	movs	r3, #0
 8000f74:	61fb      	str	r3, [r7, #28]
 8000f76:	e018      	b.n	8000faa <display_transmit+0xa2>
        split_byte(bytes[i], divided);
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	683a      	ldr	r2, [r7, #0]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	f107 020c 	add.w	r2, r7, #12
 8000f84:	4611      	mov	r1, r2
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff ffa6 	bl	8000ed8 <split_byte>
        message[1 + i*2] = divided[0];
 8000f8c:	69fb      	ldr	r3, [r7, #28]
 8000f8e:	005b      	lsls	r3, r3, #1
 8000f90:	3301      	adds	r3, #1
 8000f92:	7b39      	ldrb	r1, [r7, #12]
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	54d1      	strb	r1, [r2, r3]
        message[1 + i*2 +1] = divided[1];
 8000f98:	69fb      	ldr	r3, [r7, #28]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	7b79      	ldrb	r1, [r7, #13]
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	54d1      	strb	r1, [r2, r3]
    for (int i = 0; i < length; ++i) {
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	61fb      	str	r3, [r7, #28]
 8000faa:	88bb      	ldrh	r3, [r7, #4]
 8000fac:	69fa      	ldr	r2, [r7, #28]
 8000fae:	429a      	cmp	r2, r3
 8000fb0:	dbe2      	blt.n	8000f78 <display_transmit+0x70>
    }

    if (HAL_SPI_Transmit(&hspi2, message, mes_length, 100) != HAL_OK) {
 8000fb2:	6939      	ldr	r1, [r7, #16]
 8000fb4:	8b7a      	ldrh	r2, [r7, #26]
 8000fb6:	2364      	movs	r3, #100	; 0x64
 8000fb8:	4806      	ldr	r0, [pc, #24]	; (8000fd4 <display_transmit+0xcc>)
 8000fba:	f003 f922 	bl	8004202 <HAL_SPI_Transmit>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <display_transmit+0xc0>
        return 1;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	e000      	b.n	8000fca <display_transmit+0xc2>
    }
    return 0;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	46ad      	mov	sp, r5
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3720      	adds	r7, #32
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8000fd4:	200000d0 	.word	0x200000d0

08000fd8 <display_send_instruction>:
/**
 * @brief Send instruction bytes via spi to the display
 * @param[in] instructions A pointer to the instructions to send to the display
 * @param[in] length The number of instructions
 */
int display_send_instruction (uint8_t *instructions, uint16_t length) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	807b      	strh	r3, [r7, #2]
    return display_transmit(0x1F, instructions, length);
 8000fe4:	887b      	ldrh	r3, [r7, #2]
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	201f      	movs	r0, #31
 8000fec:	f7ff ff8c 	bl	8000f08 <display_transmit>
 8000ff0:	4603      	mov	r3, r0
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <display_write>:
/**
 * @brief Write characters to the display where the cursor currently are
 * @param characters The characters to write
 * @param length The number of characters
 */
int display_write (char *characters, uint16_t length) {
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	460b      	mov	r3, r1
 8001004:	807b      	strh	r3, [r7, #2]
    return display_transmit(0b01011111, (uint8_t*)characters, length);
 8001006:	887b      	ldrh	r3, [r7, #2]
 8001008:	461a      	mov	r2, r3
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	205f      	movs	r0, #95	; 0x5f
 800100e:	f7ff ff7b 	bl	8000f08 <display_transmit>
 8001012:	4603      	mov	r3, r0
}
 8001014:	4618      	mov	r0, r3
 8001016:	3708      	adds	r7, #8
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <set_row>:
uint8_t rows[] = {0b10000000, 0b10100000, 0b11000000, 0b11100000};
/**
 * @brief Set the cursor on the display
 * @param row The row to write to
 */
int set_row (uint8_t row) {
 800101c:	b580      	push	{r7, lr}
 800101e:	b082      	sub	sp, #8
 8001020:	af00      	add	r7, sp, #0
 8001022:	4603      	mov	r3, r0
 8001024:	71fb      	strb	r3, [r7, #7]
    /* the address range of DDARM is 00H-13H, 20H-33H, 40H53H, 60H-73H */
    return display_send_instruction(&rows[row], 1);
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	4a05      	ldr	r2, [pc, #20]	; (8001040 <set_row+0x24>)
 800102a:	4413      	add	r3, r2
 800102c:	2101      	movs	r1, #1
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ffd2 	bl	8000fd8 <display_send_instruction>
 8001034:	4603      	mov	r3, r0
}
 8001036:	4618      	mov	r0, r3
 8001038:	3708      	adds	r7, #8
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	2000000c 	.word	0x2000000c

08001044 <display_write_row>:
 * @brief Write text to a specific row on the display
 * @param characters The characters to write
 * @param length The number of characters
 * @param row The row to write to
 */
int display_write_row (char *characters, uint16_t length, uint8_t row) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	460b      	mov	r3, r1
 800104e:	807b      	strh	r3, [r7, #2]
 8001050:	4613      	mov	r3, r2
 8001052:	707b      	strb	r3, [r7, #1]
    set_row(row);
 8001054:	787b      	ldrb	r3, [r7, #1]
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ffe0 	bl	800101c <set_row>
    return display_write(characters, length);
 800105c:	887b      	ldrh	r3, [r7, #2]
 800105e:	4619      	mov	r1, r3
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f7ff ffca 	bl	8000ffa <display_write>
 8001066:	4603      	mov	r3, r0
}
 8001068:	4618      	mov	r0, r3
 800106a:	3708      	adds	r7, #8
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}

08001070 <clear_display>:

/**
 * @brief Clears the display
 */
int clear_display () {
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
    uint8_t ins = 0x01;
 8001076:	2301      	movs	r3, #1
 8001078:	71fb      	strb	r3, [r7, #7]
    return display_send_instruction(&ins, 1);
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	2101      	movs	r1, #1
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ffaa 	bl	8000fd8 <display_send_instruction>
 8001084:	4603      	mov	r3, r0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
	...

08001090 <init_display>:

/**
 * @brief Initialise the display
 */
void init_display () {
 8001090:	b580      	push	{r7, lr}
 8001092:	b086      	sub	sp, #24
 8001094:	af00      	add	r7, sp, #0
    hardware_reset();
 8001096:	f7ff fe9f 	bl	8000dd8 <hardware_reset>

    test_backlight();
 800109a:	f7ff feb9 	bl	8000e10 <test_backlight>
//    init_backlight();

    uint16_t ins_length = 12;
 800109e:	230c      	movs	r3, #12
 80010a0:	827b      	strh	r3, [r7, #18]
    uint8_t instructions[] = {
 80010a2:	4a19      	ldr	r2, [pc, #100]	; (8001108 <init_display+0x78>)
 80010a4:	1d3b      	adds	r3, r7, #4
 80010a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80010a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        0x01,
        0x38,
        0x0F,
    };

    if (display_send_instruction(instructions, ins_length))
 80010ac:	8a7a      	ldrh	r2, [r7, #18]
 80010ae:	1d3b      	adds	r3, r7, #4
 80010b0:	4611      	mov	r1, r2
 80010b2:	4618      	mov	r0, r3
 80010b4:	f7ff ff90 	bl	8000fd8 <display_send_instruction>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <init_display+0x32>
        handle_error();
 80010be:	f000 f827 	bl	8001110 <handle_error>

    HAL_Delay(5);
 80010c2:	2005      	movs	r0, #5
 80010c4:	f000 fe5e 	bl	8001d84 <HAL_Delay>

    for (int i = 0; i < 4; ++i) {
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	e00b      	b.n	80010e6 <init_display+0x56>
        set_row(i);
 80010ce:	697b      	ldr	r3, [r7, #20]
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	4618      	mov	r0, r3
 80010d4:	f7ff ffa2 	bl	800101c <set_row>
        display_write("0123456789", 10);
 80010d8:	210a      	movs	r1, #10
 80010da:	480c      	ldr	r0, [pc, #48]	; (800110c <init_display+0x7c>)
 80010dc:	f7ff ff8d 	bl	8000ffa <display_write>
    for (int i = 0; i < 4; ++i) {
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	3301      	adds	r3, #1
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	697b      	ldr	r3, [r7, #20]
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	ddf0      	ble.n	80010ce <init_display+0x3e>
    }

    HAL_Delay(500);
 80010ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010f0:	f000 fe48 	bl	8001d84 <HAL_Delay>

    clear_display();
 80010f4:	f7ff ffbc 	bl	8001070 <clear_display>

    HAL_Delay(10);
 80010f8:	200a      	movs	r0, #10
 80010fa:	f000 fe43 	bl	8001d84 <HAL_Delay>
}
 80010fe:	bf00      	nop
 8001100:	3718      	adds	r7, #24
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	08007de0 	.word	0x08007de0
 800110c:	08007dd4 	.word	0x08007dd4

08001110 <handle_error>:
 *      Author: Dell
 */

#include "main.h"

void handle_error( void ) {
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
    __disable_irq();
    HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8001118:	2201      	movs	r2, #1
 800111a:	2120      	movs	r1, #32
 800111c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001120:	f001 f98e 	bl	8002440 <HAL_GPIO_WritePin>
    while (1)
 8001124:	e7fe      	b.n	8001124 <handle_error+0x14>
	...

08001128 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	4b40      	ldr	r3, [pc, #256]	; (8001240 <MX_GPIO_Init+0x118>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	4a3f      	ldr	r2, [pc, #252]	; (8001240 <MX_GPIO_Init+0x118>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114a:	4b3d      	ldr	r3, [pc, #244]	; (8001240 <MX_GPIO_Init+0x118>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001156:	4b3a      	ldr	r3, [pc, #232]	; (8001240 <MX_GPIO_Init+0x118>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a39      	ldr	r2, [pc, #228]	; (8001240 <MX_GPIO_Init+0x118>)
 800115c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b37      	ldr	r3, [pc, #220]	; (8001240 <MX_GPIO_Init+0x118>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	4b34      	ldr	r3, [pc, #208]	; (8001240 <MX_GPIO_Init+0x118>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	4a33      	ldr	r2, [pc, #204]	; (8001240 <MX_GPIO_Init+0x118>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117a:	4b31      	ldr	r3, [pc, #196]	; (8001240 <MX_GPIO_Init+0x118>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	4b2e      	ldr	r3, [pc, #184]	; (8001240 <MX_GPIO_Init+0x118>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4a2d      	ldr	r2, [pc, #180]	; (8001240 <MX_GPIO_Init+0x118>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4b2b      	ldr	r3, [pc, #172]	; (8001240 <MX_GPIO_Init+0x118>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800119e:	4b28      	ldr	r3, [pc, #160]	; (8001240 <MX_GPIO_Init+0x118>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	4a27      	ldr	r2, [pc, #156]	; (8001240 <MX_GPIO_Init+0x118>)
 80011a4:	f043 0308 	orr.w	r3, r3, #8
 80011a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011aa:	4b25      	ldr	r3, [pc, #148]	; (8001240 <MX_GPIO_Init+0x118>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	603b      	str	r3, [r7, #0]
 80011b4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011b6:	2200      	movs	r2, #0
 80011b8:	2120      	movs	r1, #32
 80011ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011be:	f001 f93f 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Disp_Reset_GPIO_Port, Disp_Reset_Pin, GPIO_PIN_SET);
 80011c2:	2201      	movs	r2, #1
 80011c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011cc:	f001 f938 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Disp_Green_Pin|Disp_White_Pin, GPIO_PIN_RESET);
 80011d0:	2200      	movs	r2, #0
 80011d2:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80011d6:	481b      	ldr	r0, [pc, #108]	; (8001244 <MX_GPIO_Init+0x11c>)
 80011d8:	f001 f932 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011e2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	4619      	mov	r1, r3
 80011f2:	4814      	ldr	r0, [pc, #80]	; (8001244 <MX_GPIO_Init+0x11c>)
 80011f4:	f000 ff7a 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|Disp_Reset_Pin;
 80011f8:	f248 0320 	movw	r3, #32800	; 0x8020
 80011fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011fe:	2301      	movs	r3, #1
 8001200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001206:	2300      	movs	r3, #0
 8001208:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f107 0314 	add.w	r3, r7, #20
 800120e:	4619      	mov	r1, r3
 8001210:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001214:	f000 ff6a 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Disp_Green_Pin|Disp_White_Pin;
 8001218:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800121c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800121e:	2301      	movs	r3, #1
 8001220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001222:	2300      	movs	r3, #0
 8001224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	4804      	ldr	r0, [pc, #16]	; (8001244 <MX_GPIO_Init+0x11c>)
 8001232:	f000 ff5b 	bl	80020ec <HAL_GPIO_Init>

}
 8001236:	bf00      	nop
 8001238:	3728      	adds	r7, #40	; 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000
 8001244:	48000800 	.word	0x48000800

08001248 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b091      	sub	sp, #68	; 0x44
 800124c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124e:	f000 fd1d 	bl	8001c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001252:	f000 f8b7 	bl	80013c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001256:	f7ff ff67 	bl	8001128 <MX_GPIO_Init>
  MX_UART5_Init();
 800125a:	f000 fc33 	bl	8001ac4 <MX_UART5_Init>
  MX_SPI2_Init();
 800125e:	f000 f9a7 	bl	80015b0 <MX_SPI2_Init>
  MX_RTC_Init();
 8001262:	f000 f94b 	bl	80014fc <MX_RTC_Init>
  MX_TIM3_Init();
 8001266:	f000 fae3 	bl	8001830 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800126a:	2104      	movs	r1, #4
 800126c:	4850      	ldr	r0, [pc, #320]	; (80013b0 <main+0x168>)
 800126e:	f003 fb53 	bl	8004918 <HAL_TIM_PWM_Start>

  init_display();
 8001272:	f7ff ff0d 	bl	8001090 <init_display>

  set_backlight(WHITE, GPIO_PIN_SET);
 8001276:	2101      	movs	r1, #1
 8001278:	2000      	movs	r0, #0
 800127a:	f7ff fe11 	bl	8000ea0 <set_backlight>

  uint8_t buf_len = 8;
 800127e:	2308      	movs	r3, #8
 8001280:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  char buf[buf_len];
 8001284:	f897 4037 	ldrb.w	r4, [r7, #55]	; 0x37
 8001288:	4623      	mov	r3, r4
 800128a:	3b01      	subs	r3, #1
 800128c:	633b      	str	r3, [r7, #48]	; 0x30
 800128e:	b2e0      	uxtb	r0, r4
 8001290:	f04f 0100 	mov.w	r1, #0
 8001294:	f04f 0200 	mov.w	r2, #0
 8001298:	f04f 0300 	mov.w	r3, #0
 800129c:	00cb      	lsls	r3, r1, #3
 800129e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80012a2:	00c2      	lsls	r2, r0, #3
 80012a4:	b2e0      	uxtb	r0, r4
 80012a6:	f04f 0100 	mov.w	r1, #0
 80012aa:	f04f 0200 	mov.w	r2, #0
 80012ae:	f04f 0300 	mov.w	r3, #0
 80012b2:	00cb      	lsls	r3, r1, #3
 80012b4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80012b8:	00c2      	lsls	r2, r0, #3
 80012ba:	4623      	mov	r3, r4
 80012bc:	3307      	adds	r3, #7
 80012be:	08db      	lsrs	r3, r3, #3
 80012c0:	00db      	lsls	r3, r3, #3
 80012c2:	ebad 0d03 	sub.w	sp, sp, r3
 80012c6:	ab02      	add	r3, sp, #8
 80012c8:	3300      	adds	r3, #0
 80012ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* initialise time */
  int h;
  int m;
  int s;

  display_write_row("Enter time", 10, 0);
 80012cc:	2200      	movs	r2, #0
 80012ce:	210a      	movs	r1, #10
 80012d0:	4838      	ldr	r0, [pc, #224]	; (80013b4 <main+0x16c>)
 80012d2:	f7ff feb7 	bl	8001044 <display_write_row>
  uart_get_clock_input(buf);
 80012d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d8:	4618      	mov	r0, r3
 80012da:	f000 fbb9 	bl	8001a50 <uart_get_clock_input>
  uart_println("");
 80012de:	4836      	ldr	r0, [pc, #216]	; (80013b8 <main+0x170>)
 80012e0:	f000 fb9e 	bl	8001a20 <uart_println>
  sscanf(buf, "%02d:%02d:%02d", &h, &m, &s);
 80012e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80012e6:	f107 0120 	add.w	r1, r7, #32
 80012ea:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	460b      	mov	r3, r1
 80012f6:	4931      	ldr	r1, [pc, #196]	; (80013bc <main+0x174>)
 80012f8:	f005 fc8e 	bl	8006c18 <siscanf>
  start_clock(h, m, s);
 80012fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	6a3a      	ldr	r2, [r7, #32]
 8001302:	b2d1      	uxtb	r1, r2
 8001304:	69fa      	ldr	r2, [r7, #28]
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fd23 	bl	8000d54 <start_clock>
  clear_display();
 800130e:	f7ff feaf 	bl	8001070 <clear_display>

  /* program variables */
  char c;
  RTC_TimeTypeDef time;

  set_backlight(WHITE, GPIO_PIN_RESET);
 8001312:	2100      	movs	r1, #0
 8001314:	2000      	movs	r0, #0
 8001316:	f7ff fdc3 	bl	8000ea0 <set_backlight>
  set_brightness(1.0);
 800131a:	ed9f 0b23 	vldr	d0, [pc, #140]	; 80013a8 <main+0x160>
 800131e:	f000 f8bb 	bl	8001498 <set_brightness>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      uart_receive(&c, 1);
 8001322:	f107 031b 	add.w	r3, r7, #27
 8001326:	2101      	movs	r1, #1
 8001328:	4618      	mov	r0, r3
 800132a:	f000 fb65 	bl	80019f8 <uart_receive>
//      if (c == '\r')
//          uart_send("\r\n", 2);
//      else
//          uart_send(&c, 1);

      if (c <= '9' && '0' <= c) {
 800132e:	7efb      	ldrb	r3, [r7, #27]
 8001330:	2b39      	cmp	r3, #57	; 0x39
 8001332:	d81a      	bhi.n	800136a <main+0x122>
 8001334:	7efb      	ldrb	r3, [r7, #27]
 8001336:	2b2f      	cmp	r3, #47	; 0x2f
 8001338:	d917      	bls.n	800136a <main+0x122>
          uint8_t val = c - '0';
 800133a:	7efb      	ldrb	r3, [r7, #27]
 800133c:	3b30      	subs	r3, #48	; 0x30
 800133e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
          set_brightness((double)val/10);
 8001342:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8dc 	bl	8000504 <__aeabi_ui2d>
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <main+0x178>)
 8001352:	f7ff fa7b 	bl	800084c <__aeabi_ddiv>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	ec43 2b17 	vmov	d7, r2, r3
 800135e:	eeb0 0a47 	vmov.f32	s0, s14
 8001362:	eef0 0a67 	vmov.f32	s1, s15
 8001366:	f000 f897 	bl	8001498 <set_brightness>
      }


      /* get and write time */
      get_time(&time);
 800136a:	1d3b      	adds	r3, r7, #4
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fd13 	bl	8000d98 <get_time>
      sprintf(buf, "%02d:%02d:%02d", time.Hours, time.Minutes, time.Seconds);
 8001372:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001374:	793b      	ldrb	r3, [r7, #4]
 8001376:	461a      	mov	r2, r3
 8001378:	797b      	ldrb	r3, [r7, #5]
 800137a:	4619      	mov	r1, r3
 800137c:	79bb      	ldrb	r3, [r7, #6]
 800137e:	9300      	str	r3, [sp, #0]
 8001380:	460b      	mov	r3, r1
 8001382:	490e      	ldr	r1, [pc, #56]	; (80013bc <main+0x174>)
 8001384:	f005 fc28 	bl	8006bd8 <siprintf>
      uart_println(buf);
 8001388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800138a:	4618      	mov	r0, r3
 800138c:	f000 fb48 	bl	8001a20 <uart_println>
      display_write_row(buf, buf_len, 0);
 8001390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001392:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001396:	b291      	uxth	r1, r2
 8001398:	2200      	movs	r2, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fe52 	bl	8001044 <display_write_row>
      uart_receive(&c, 1);
 80013a0:	e7bf      	b.n	8001322 <main+0xda>
 80013a2:	bf00      	nop
 80013a4:	f3af 8000 	nop.w
 80013a8:	00000000 	.word	0x00000000
 80013ac:	3ff00000 	.word	0x3ff00000
 80013b0:	20000134 	.word	0x20000134
 80013b4:	08007dec 	.word	0x08007dec
 80013b8:	08007df8 	.word	0x08007df8
 80013bc:	08007dfc 	.word	0x08007dfc
 80013c0:	40240000 	.word	0x40240000

080013c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b096      	sub	sp, #88	; 0x58
 80013c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	2244      	movs	r2, #68	; 0x44
 80013d0:	2100      	movs	r1, #0
 80013d2:	4618      	mov	r0, r3
 80013d4:	f005 fbf8 	bl	8006bc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013d8:	463b      	mov	r3, r7
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
 80013e4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013e6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013ea:	f001 f84f 	bl	800248c <HAL_PWREx_ControlVoltageScaling>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013f4:	f000 f84a 	bl	800148c <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80013f8:	230a      	movs	r3, #10
 80013fa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001400:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001402:	2310      	movs	r3, #16
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001406:	2301      	movs	r3, #1
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140a:	2302      	movs	r3, #2
 800140c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800140e:	2302      	movs	r3, #2
 8001410:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001412:	2301      	movs	r3, #1
 8001414:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001416:	230a      	movs	r3, #10
 8001418:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800141a:	2307      	movs	r3, #7
 800141c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800141e:	2302      	movs	r3, #2
 8001420:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001422:	2302      	movs	r3, #2
 8001424:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001426:	f107 0314 	add.w	r3, r7, #20
 800142a:	4618      	mov	r0, r3
 800142c:	f001 f884 	bl	8002538 <HAL_RCC_OscConfig>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8001436:	f000 f829 	bl	800148c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800143a:	230f      	movs	r3, #15
 800143c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800143e:	2303      	movs	r3, #3
 8001440:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800144a:	2300      	movs	r3, #0
 800144c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800144e:	463b      	mov	r3, r7
 8001450:	2104      	movs	r1, #4
 8001452:	4618      	mov	r0, r3
 8001454:	f001 fc56 	bl	8002d04 <HAL_RCC_ClockConfig>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800145e:	f000 f815 	bl	800148c <Error_Handler>
  }
}
 8001462:	bf00      	nop
 8001464:	3758      	adds	r7, #88	; 0x58
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <HAL_UART_TxCpltCallback>:
* @note This example shows a simple way to report end of IT Tx transfer, and
* you can add your own implementation.
* @retval None
*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
    /* Set transmission flag: transfer complete*/
    uartReady = SET;
 8001474:	4b04      	ldr	r3, [pc, #16]	; (8001488 <HAL_UART_TxCpltCallback+0x1c>)
 8001476:	2201      	movs	r2, #1
 8001478:	701a      	strb	r2, [r3, #0]
}
 800147a:	bf00      	nop
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	2000009c 	.word	0x2000009c

0800148c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
    handle_error();
 8001490:	f7ff fe3e 	bl	8001110 <handle_error>
  /* USER CODE END Error_Handler_Debug */
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <set_brightness>:

/**
 * @brief Change the PWM pulse width of the red background light
 * @param[in] brightness The brightness of the backlight
 */
void set_brightness (double brightness) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	ed87 0b00 	vstr	d0, [r7]
    brightness *= brightness * brightness;
 80014a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014a6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014aa:	f7ff f8a5 	bl	80005f8 <__aeabi_dmul>
 80014ae:	4602      	mov	r2, r0
 80014b0:	460b      	mov	r3, r1
 80014b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014b6:	f7ff f89f 	bl	80005f8 <__aeabi_dmul>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	e9c7 2300 	strd	r2, r3, [r7]
    uint16_t pulse = (uint16_t) (brightness * (double)0xFFFF);
 80014c2:	a30c      	add	r3, pc, #48	; (adr r3, 80014f4 <set_brightness+0x5c>)
 80014c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80014cc:	f7ff f894 	bl	80005f8 <__aeabi_dmul>
 80014d0:	4602      	mov	r2, r0
 80014d2:	460b      	mov	r3, r1
 80014d4:	4610      	mov	r0, r2
 80014d6:	4619      	mov	r1, r3
 80014d8:	f7ff faa0 	bl	8000a1c <__aeabi_d2uiz>
 80014dc:	4603      	mov	r3, r0
 80014de:	81fb      	strh	r3, [r7, #14]
    __HAL_TIM_SET_COMPARE(&htim3, CHANNEL, pulse);
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <set_brightness+0x58>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	89fa      	ldrh	r2, [r7, #14]
 80014e6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80014e8:	bf00      	nop
 80014ea:	3710      	adds	r7, #16
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000134 	.word	0x20000134
 80014f4:	00000000 	.word	0x00000000
 80014f8:	40efffe0 	.word	0x40efffe0

080014fc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001500:	4b10      	ldr	r3, [pc, #64]	; (8001544 <MX_RTC_Init+0x48>)
 8001502:	4a11      	ldr	r2, [pc, #68]	; (8001548 <MX_RTC_Init+0x4c>)
 8001504:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001506:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <MX_RTC_Init+0x48>)
 8001508:	2200      	movs	r2, #0
 800150a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800150c:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <MX_RTC_Init+0x48>)
 800150e:	227f      	movs	r2, #127	; 0x7f
 8001510:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <MX_RTC_Init+0x48>)
 8001514:	22ff      	movs	r2, #255	; 0xff
 8001516:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001518:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <MX_RTC_Init+0x48>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800151e:	4b09      	ldr	r3, [pc, #36]	; (8001544 <MX_RTC_Init+0x48>)
 8001520:	2200      	movs	r2, #0
 8001522:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001524:	4b07      	ldr	r3, [pc, #28]	; (8001544 <MX_RTC_Init+0x48>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <MX_RTC_Init+0x48>)
 800152c:	2200      	movs	r2, #0
 800152e:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001530:	4804      	ldr	r0, [pc, #16]	; (8001544 <MX_RTC_Init+0x48>)
 8001532:	f002 faa9 	bl	8003a88 <HAL_RTC_Init>
 8001536:	4603      	mov	r3, r0
 8001538:	2b00      	cmp	r3, #0
 800153a:	d001      	beq.n	8001540 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800153c:	f7ff ffa6 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001540:	bf00      	nop
 8001542:	bd80      	pop	{r7, pc}
 8001544:	200000ac 	.word	0x200000ac
 8001548:	40002800 	.word	0x40002800

0800154c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b0a4      	sub	sp, #144	; 0x90
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	2288      	movs	r2, #136	; 0x88
 800155a:	2100      	movs	r1, #0
 800155c:	4618      	mov	r0, r3
 800155e:	f005 fb33 	bl	8006bc8 <memset>
  if(rtcHandle->Instance==RTC)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	4a10      	ldr	r2, [pc, #64]	; (80015a8 <HAL_RTC_MspInit+0x5c>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d118      	bne.n	800159e <HAL_RTC_MspInit+0x52>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800156c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001570:	60bb      	str	r3, [r7, #8]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001572:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001576:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	4618      	mov	r0, r3
 8001580:	f001 fdc6 	bl	8003110 <HAL_RCCEx_PeriphCLKConfig>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 800158a:	f7ff ff7f 	bl	800148c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800158e:	4b07      	ldr	r3, [pc, #28]	; (80015ac <HAL_RTC_MspInit+0x60>)
 8001590:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001594:	4a05      	ldr	r2, [pc, #20]	; (80015ac <HAL_RTC_MspInit+0x60>)
 8001596:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800159a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800159e:	bf00      	nop
 80015a0:	3790      	adds	r7, #144	; 0x90
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	40002800 	.word	0x40002800
 80015ac:	40021000 	.word	0x40021000

080015b0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <MX_SPI2_Init+0x74>)
 80015b6:	4a1c      	ldr	r2, [pc, #112]	; (8001628 <MX_SPI2_Init+0x78>)
 80015b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <MX_SPI2_Init+0x74>)
 80015bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <MX_SPI2_Init+0x74>)
 80015c4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80015c8:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015ca:	4b16      	ldr	r3, [pc, #88]	; (8001624 <MX_SPI2_Init+0x74>)
 80015cc:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80015d0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <MX_SPI2_Init+0x74>)
 80015d4:	2202      	movs	r2, #2
 80015d6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80015d8:	4b12      	ldr	r3, [pc, #72]	; (8001624 <MX_SPI2_Init+0x74>)
 80015da:	2201      	movs	r2, #1
 80015dc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <MX_SPI2_Init+0x74>)
 80015e0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80015e4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <MX_SPI2_Init+0x74>)
 80015e8:	2230      	movs	r2, #48	; 0x30
 80015ea:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80015ec:	4b0d      	ldr	r3, [pc, #52]	; (8001624 <MX_SPI2_Init+0x74>)
 80015ee:	2280      	movs	r2, #128	; 0x80
 80015f0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <MX_SPI2_Init+0x74>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <MX_SPI2_Init+0x74>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <MX_SPI2_Init+0x74>)
 8001600:	2207      	movs	r2, #7
 8001602:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001604:	4b07      	ldr	r3, [pc, #28]	; (8001624 <MX_SPI2_Init+0x74>)
 8001606:	2200      	movs	r2, #0
 8001608:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <MX_SPI2_Init+0x74>)
 800160c:	2200      	movs	r2, #0
 800160e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001610:	4804      	ldr	r0, [pc, #16]	; (8001624 <MX_SPI2_Init+0x74>)
 8001612:	f002 fd53 	bl	80040bc <HAL_SPI_Init>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_SPI2_Init+0x70>
  {
    Error_Handler();
 800161c:	f7ff ff36 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	200000d0 	.word	0x200000d0
 8001628:	40003800 	.word	0x40003800

0800162c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b08a      	sub	sp, #40	; 0x28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001634:	f107 0314 	add.w	r3, r7, #20
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]
 8001642:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a25      	ldr	r2, [pc, #148]	; (80016e0 <HAL_SPI_MspInit+0xb4>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d144      	bne.n	80016d8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800164e:	4b25      	ldr	r3, [pc, #148]	; (80016e4 <HAL_SPI_MspInit+0xb8>)
 8001650:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001652:	4a24      	ldr	r2, [pc, #144]	; (80016e4 <HAL_SPI_MspInit+0xb8>)
 8001654:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001658:	6593      	str	r3, [r2, #88]	; 0x58
 800165a:	4b22      	ldr	r3, [pc, #136]	; (80016e4 <HAL_SPI_MspInit+0xb8>)
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001666:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <HAL_SPI_MspInit+0xb8>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	4a1e      	ldr	r2, [pc, #120]	; (80016e4 <HAL_SPI_MspInit+0xb8>)
 800166c:	f043 0304 	orr.w	r3, r3, #4
 8001670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001672:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <HAL_SPI_MspInit+0xb8>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	f003 0304 	and.w	r3, r3, #4
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	4b19      	ldr	r3, [pc, #100]	; (80016e4 <HAL_SPI_MspInit+0xb8>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	4a18      	ldr	r2, [pc, #96]	; (80016e4 <HAL_SPI_MspInit+0xb8>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168a:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <HAL_SPI_MspInit+0xb8>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    PB12     ------> SPI2_NSS
    */
    GPIO_InitStruct.Pin = Display_OUT_Pin;
 8001696:	2308      	movs	r3, #8
 8001698:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a2:	2303      	movs	r3, #3
 80016a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016a6:	2305      	movs	r3, #5
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Display_OUT_GPIO_Port, &GPIO_InitStruct);
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	4619      	mov	r1, r3
 80016b0:	480d      	ldr	r0, [pc, #52]	; (80016e8 <HAL_SPI_MspInit+0xbc>)
 80016b2:	f000 fd1b 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Dispay_CLK_Pin|Display_CS_Pin;
 80016b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016bc:	2302      	movs	r3, #2
 80016be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c4:	2303      	movs	r3, #3
 80016c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80016c8:	2305      	movs	r3, #5
 80016ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4619      	mov	r1, r3
 80016d2:	4806      	ldr	r0, [pc, #24]	; (80016ec <HAL_SPI_MspInit+0xc0>)
 80016d4:	f000 fd0a 	bl	80020ec <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80016d8:	bf00      	nop
 80016da:	3728      	adds	r7, #40	; 0x28
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40003800 	.word	0x40003800
 80016e4:	40021000 	.word	0x40021000
 80016e8:	48000800 	.word	0x48000800
 80016ec:	48000400 	.word	0x48000400

080016f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016f6:	4b0f      	ldr	r3, [pc, #60]	; (8001734 <HAL_MspInit+0x44>)
 80016f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016fa:	4a0e      	ldr	r2, [pc, #56]	; (8001734 <HAL_MspInit+0x44>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6613      	str	r3, [r2, #96]	; 0x60
 8001702:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <HAL_MspInit+0x44>)
 8001704:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	607b      	str	r3, [r7, #4]
 800170c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800170e:	4b09      	ldr	r3, [pc, #36]	; (8001734 <HAL_MspInit+0x44>)
 8001710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001712:	4a08      	ldr	r2, [pc, #32]	; (8001734 <HAL_MspInit+0x44>)
 8001714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001718:	6593      	str	r3, [r2, #88]	; 0x58
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_MspInit+0x44>)
 800171c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800171e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	40021000 	.word	0x40021000

08001738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800173c:	e7fe      	b.n	800173c <NMI_Handler+0x4>

0800173e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173e:	b480      	push	{r7}
 8001740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001742:	e7fe      	b.n	8001742 <HardFault_Handler+0x4>

08001744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001748:	e7fe      	b.n	8001748 <MemManage_Handler+0x4>

0800174a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800174e:	e7fe      	b.n	800174e <BusFault_Handler+0x4>

08001750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001754:	e7fe      	b.n	8001754 <UsageFault_Handler+0x4>

08001756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001756:	b480      	push	{r7}
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800175a:	bf00      	nop
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001784:	f000 fade 	bl	8001d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001790:	4802      	ldr	r0, [pc, #8]	; (800179c <UART5_IRQHandler+0x10>)
 8001792:	f004 fa11 	bl	8005bb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000180 	.word	0x20000180

080017a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a8:	4a14      	ldr	r2, [pc, #80]	; (80017fc <_sbrk+0x5c>)
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <_sbrk+0x60>)
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b4:	4b13      	ldr	r3, [pc, #76]	; (8001804 <_sbrk+0x64>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d102      	bne.n	80017c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <_sbrk+0x64>)
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <_sbrk+0x68>)
 80017c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <_sbrk+0x64>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4413      	add	r3, r2
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d207      	bcs.n	80017e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017d0:	f005 f9d0 	bl	8006b74 <__errno>
 80017d4:	4603      	mov	r3, r0
 80017d6:	220c      	movs	r2, #12
 80017d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017da:	f04f 33ff 	mov.w	r3, #4294967295
 80017de:	e009      	b.n	80017f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017e0:	4b08      	ldr	r3, [pc, #32]	; (8001804 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e6:	4b07      	ldr	r3, [pc, #28]	; (8001804 <_sbrk+0x64>)
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4413      	add	r3, r2
 80017ee:	4a05      	ldr	r2, [pc, #20]	; (8001804 <_sbrk+0x64>)
 80017f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017f2:	68fb      	ldr	r3, [r7, #12]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	20018000 	.word	0x20018000
 8001800:	00000400 	.word	0x00000400
 8001804:	200000a0 	.word	0x200000a0
 8001808:	20000218 	.word	0x20000218

0800180c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <SystemInit+0x20>)
 8001812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <SystemInit+0x20>)
 8001818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800181c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b08e      	sub	sp, #56	; 0x38
 8001834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001850:	463b      	mov	r3, r7
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]
 800185e:	615a      	str	r2, [r3, #20]
 8001860:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001862:	4b2d      	ldr	r3, [pc, #180]	; (8001918 <MX_TIM3_Init+0xe8>)
 8001864:	4a2d      	ldr	r2, [pc, #180]	; (800191c <MX_TIM3_Init+0xec>)
 8001866:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001868:	4b2b      	ldr	r3, [pc, #172]	; (8001918 <MX_TIM3_Init+0xe8>)
 800186a:	2200      	movs	r2, #0
 800186c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800186e:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <MX_TIM3_Init+0xe8>)
 8001870:	2200      	movs	r2, #0
 8001872:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001874:	4b28      	ldr	r3, [pc, #160]	; (8001918 <MX_TIM3_Init+0xe8>)
 8001876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800187a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800187c:	4b26      	ldr	r3, [pc, #152]	; (8001918 <MX_TIM3_Init+0xe8>)
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001882:	4b25      	ldr	r3, [pc, #148]	; (8001918 <MX_TIM3_Init+0xe8>)
 8001884:	2200      	movs	r2, #0
 8001886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001888:	4823      	ldr	r0, [pc, #140]	; (8001918 <MX_TIM3_Init+0xe8>)
 800188a:	f002 ff8d 	bl	80047a8 <HAL_TIM_Base_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001894:	f7ff fdfa 	bl	800148c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800189c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800189e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018a2:	4619      	mov	r1, r3
 80018a4:	481c      	ldr	r0, [pc, #112]	; (8001918 <MX_TIM3_Init+0xe8>)
 80018a6:	f003 fa51 	bl	8004d4c <HAL_TIM_ConfigClockSource>
 80018aa:	4603      	mov	r3, r0
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d001      	beq.n	80018b4 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80018b0:	f7ff fdec 	bl	800148c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018b4:	4818      	ldr	r0, [pc, #96]	; (8001918 <MX_TIM3_Init+0xe8>)
 80018b6:	f002 ffce 	bl	8004856 <HAL_TIM_PWM_Init>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80018c0:	f7ff fde4 	bl	800148c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018c4:	2300      	movs	r3, #0
 80018c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018cc:	f107 031c 	add.w	r3, r7, #28
 80018d0:	4619      	mov	r1, r3
 80018d2:	4811      	ldr	r0, [pc, #68]	; (8001918 <MX_TIM3_Init+0xe8>)
 80018d4:	f003 ff34 	bl	8005740 <HAL_TIMEx_MasterConfigSynchronization>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80018de:	f7ff fdd5 	bl	800148c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018e2:	2360      	movs	r3, #96	; 0x60
 80018e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ee:	2300      	movs	r3, #0
 80018f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018f2:	463b      	mov	r3, r7
 80018f4:	2204      	movs	r2, #4
 80018f6:	4619      	mov	r1, r3
 80018f8:	4807      	ldr	r0, [pc, #28]	; (8001918 <MX_TIM3_Init+0xe8>)
 80018fa:	f003 f913 	bl	8004b24 <HAL_TIM_PWM_ConfigChannel>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001904:	f7ff fdc2 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001908:	4803      	ldr	r0, [pc, #12]	; (8001918 <MX_TIM3_Init+0xe8>)
 800190a:	f000 f829 	bl	8001960 <HAL_TIM_MspPostInit>

}
 800190e:	bf00      	nop
 8001910:	3738      	adds	r7, #56	; 0x38
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	20000134 	.word	0x20000134
 800191c:	40000400 	.word	0x40000400

08001920 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001920:	b480      	push	{r7}
 8001922:	b085      	sub	sp, #20
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <HAL_TIM_Base_MspInit+0x38>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d10b      	bne.n	800194a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <HAL_TIM_Base_MspInit+0x3c>)
 8001934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001936:	4a09      	ldr	r2, [pc, #36]	; (800195c <HAL_TIM_Base_MspInit+0x3c>)
 8001938:	f043 0302 	orr.w	r3, r3, #2
 800193c:	6593      	str	r3, [r2, #88]	; 0x58
 800193e:	4b07      	ldr	r3, [pc, #28]	; (800195c <HAL_TIM_Base_MspInit+0x3c>)
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800194a:	bf00      	nop
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40000400 	.word	0x40000400
 800195c:	40021000 	.word	0x40021000

08001960 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b088      	sub	sp, #32
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 030c 	add.w	r3, r7, #12
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a11      	ldr	r2, [pc, #68]	; (80019c4 <HAL_TIM_MspPostInit+0x64>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d11b      	bne.n	80019ba <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001982:	4b11      	ldr	r3, [pc, #68]	; (80019c8 <HAL_TIM_MspPostInit+0x68>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	4a10      	ldr	r2, [pc, #64]	; (80019c8 <HAL_TIM_MspPostInit+0x68>)
 8001988:	f043 0304 	orr.w	r3, r3, #4
 800198c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800198e:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <HAL_TIM_MspPostInit+0x68>)
 8001990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001992:	f003 0304 	and.w	r3, r3, #4
 8001996:	60bb      	str	r3, [r7, #8]
 8001998:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = Red_PWM_Pin;
 800199a:	2380      	movs	r3, #128	; 0x80
 800199c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199e:	2302      	movs	r3, #2
 80019a0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019aa:	2302      	movs	r3, #2
 80019ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Red_PWM_GPIO_Port, &GPIO_InitStruct);
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4619      	mov	r1, r3
 80019b4:	4805      	ldr	r0, [pc, #20]	; (80019cc <HAL_TIM_MspPostInit+0x6c>)
 80019b6:	f000 fb99 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80019ba:	bf00      	nop
 80019bc:	3720      	adds	r7, #32
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	40000400 	.word	0x40000400
 80019c8:	40021000 	.word	0x40021000
 80019cc:	48000800 	.word	0x48000800

080019d0 <uart_send>:

/**
 * @brief Send a string over uart
 * @param[in] message The character array to send
 */
int uart_send (char *buffer, uint16_t length) {
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Transmit(&huart5, (uint8_t*)buffer, length, TIMEOUT);
 80019dc:	887a      	ldrh	r2, [r7, #2]
 80019de:	f04f 33ff 	mov.w	r3, #4294967295
 80019e2:	6879      	ldr	r1, [r7, #4]
 80019e4:	4803      	ldr	r0, [pc, #12]	; (80019f4 <uart_send+0x24>)
 80019e6:	f003 ff81 	bl	80058ec <HAL_UART_Transmit>
 80019ea:	4603      	mov	r3, r0
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3708      	adds	r7, #8
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	20000180 	.word	0x20000180

080019f8 <uart_receive>:
/**
 * @brief Recieve a string over uart
 * @param[out] buffer The place to write the recieved string
 * @param[in] length The amount of data to read
 */
int uart_receive (char *buffer, uint16_t length) {
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	460b      	mov	r3, r1
 8001a02:	807b      	strh	r3, [r7, #2]
    return HAL_UART_Receive(&huart5, (uint8_t *)buffer, length, TIMEOUT);
 8001a04:	887a      	ldrh	r2, [r7, #2]
 8001a06:	f04f 33ff 	mov.w	r3, #4294967295
 8001a0a:	6879      	ldr	r1, [r7, #4]
 8001a0c:	4803      	ldr	r0, [pc, #12]	; (8001a1c <uart_receive+0x24>)
 8001a0e:	f004 f801 	bl	8005a14 <HAL_UART_Receive>
 8001a12:	4603      	mov	r3, r0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3708      	adds	r7, #8
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	20000180 	.word	0x20000180

08001a20 <uart_println>:

/**
 * @brief send a string line to uart
 * @param[in] string The string to send
 */
int uart_println (char *string) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
    uart_send(string, strlen(string));
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7fe fbd1 	bl	80001d0 <strlen>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	b29b      	uxth	r3, r3
 8001a32:	4619      	mov	r1, r3
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff ffcb 	bl	80019d0 <uart_send>
    return uart_send("\r\n", 2);
 8001a3a:	2102      	movs	r1, #2
 8001a3c:	4803      	ldr	r0, [pc, #12]	; (8001a4c <uart_println+0x2c>)
 8001a3e:	f7ff ffc7 	bl	80019d0 <uart_send>
 8001a42:	4603      	mov	r3, r0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3708      	adds	r7, #8
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	08007e0c 	.word	0x08007e0c

08001a50 <uart_get_clock_input>:

/**
 * @brief Let user input the time
 * @param[out] buffer The buffer to write to
 */
void uart_get_clock_input (char *buffer) {
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
    uart_println("Please enter the time in HH:MM:SS format!");
 8001a58:	4819      	ldr	r0, [pc, #100]	; (8001ac0 <uart_get_clock_input+0x70>)
 8001a5a:	f7ff ffe1 	bl	8001a20 <uart_println>

    char c;
    uint8_t i = 0;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	73fb      	strb	r3, [r7, #15]
    while (1) {
        uart_receive(&c, 1);
 8001a62:	f107 030e 	add.w	r3, r7, #14
 8001a66:	2101      	movs	r1, #1
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ffc5 	bl	80019f8 <uart_receive>
        /* as long as i < 8 and c != \r
         * If a char 127 (backspace) is written
         * move cursor back */

        /* check if done */
        if (i == 8) {
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	2b08      	cmp	r3, #8
 8001a72:	d105      	bne.n	8001a80 <uart_get_clock_input+0x30>
            if (c == '\r')
 8001a74:	7bbb      	ldrb	r3, [r7, #14]
 8001a76:	2b0d      	cmp	r3, #13
 8001a78:	d01d      	beq.n	8001ab6 <uart_get_clock_input+0x66>
                break;
            else if (c != 127)
 8001a7a:	7bbb      	ldrb	r3, [r7, #14]
 8001a7c:	2b7f      	cmp	r3, #127	; 0x7f
 8001a7e:	d118      	bne.n	8001ab2 <uart_get_clock_input+0x62>
                continue;
        }

        uart_send(&c, 1);
 8001a80:	f107 030e 	add.w	r3, r7, #14
 8001a84:	2101      	movs	r1, #1
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff ffa2 	bl	80019d0 <uart_send>

        /* write to buffer */
        if (c == 127) {
 8001a8c:	7bbb      	ldrb	r3, [r7, #14]
 8001a8e:	2b7f      	cmp	r3, #127	; 0x7f
 8001a90:	d106      	bne.n	8001aa0 <uart_get_clock_input+0x50>
            if (i != 0)
 8001a92:	7bfb      	ldrb	r3, [r7, #15]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d0e4      	beq.n	8001a62 <uart_get_clock_input+0x12>
                --i;
 8001a98:	7bfb      	ldrb	r3, [r7, #15]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	73fb      	strb	r3, [r7, #15]
 8001a9e:	e7e0      	b.n	8001a62 <uart_get_clock_input+0x12>
        }
        else
            buffer[i++] = c;
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	73fa      	strb	r2, [r7, #15]
 8001aa6:	461a      	mov	r2, r3
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4413      	add	r3, r2
 8001aac:	7bba      	ldrb	r2, [r7, #14]
 8001aae:	701a      	strb	r2, [r3, #0]
 8001ab0:	e7d7      	b.n	8001a62 <uart_get_clock_input+0x12>
                continue;
 8001ab2:	bf00      	nop
        uart_receive(&c, 1);
 8001ab4:	e7d5      	b.n	8001a62 <uart_get_clock_input+0x12>
                break;
 8001ab6:	bf00      	nop
    }
}
 8001ab8:	bf00      	nop
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	08007e14 	.word	0x08007e14

08001ac4 <MX_UART5_Init>:

UART_HandleTypeDef huart5;

/* UART5 init function */
void MX_UART5_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001ac8:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <MX_UART5_Init+0x58>)
 8001aca:	4a15      	ldr	r2, [pc, #84]	; (8001b20 <MX_UART5_Init+0x5c>)
 8001acc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001ace:	4b13      	ldr	r3, [pc, #76]	; (8001b1c <MX_UART5_Init+0x58>)
 8001ad0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ad4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001ad6:	4b11      	ldr	r3, [pc, #68]	; (8001b1c <MX_UART5_Init+0x58>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001adc:	4b0f      	ldr	r3, [pc, #60]	; (8001b1c <MX_UART5_Init+0x58>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001ae2:	4b0e      	ldr	r3, [pc, #56]	; (8001b1c <MX_UART5_Init+0x58>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ae8:	4b0c      	ldr	r3, [pc, #48]	; (8001b1c <MX_UART5_Init+0x58>)
 8001aea:	220c      	movs	r2, #12
 8001aec:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <MX_UART5_Init+0x58>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <MX_UART5_Init+0x58>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001afa:	4b08      	ldr	r3, [pc, #32]	; (8001b1c <MX_UART5_Init+0x58>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <MX_UART5_Init+0x58>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001b06:	4805      	ldr	r0, [pc, #20]	; (8001b1c <MX_UART5_Init+0x58>)
 8001b08:	f003 fea2 	bl	8005850 <HAL_UART_Init>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d001      	beq.n	8001b16 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8001b12:	f7ff fcbb 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000180 	.word	0x20000180
 8001b20:	40005000 	.word	0x40005000

08001b24 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b0ac      	sub	sp, #176	; 0xb0
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b2c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	609a      	str	r2, [r3, #8]
 8001b38:	60da      	str	r2, [r3, #12]
 8001b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b3c:	f107 0314 	add.w	r3, r7, #20
 8001b40:	2288      	movs	r2, #136	; 0x88
 8001b42:	2100      	movs	r1, #0
 8001b44:	4618      	mov	r0, r3
 8001b46:	f005 f83f 	bl	8006bc8 <memset>
  if(uartHandle->Instance==UART5)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a36      	ldr	r2, [pc, #216]	; (8001c28 <HAL_UART_MspInit+0x104>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d164      	bne.n	8001c1e <HAL_UART_MspInit+0xfa>
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8001b54:	2310      	movs	r3, #16
 8001b56:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b5c:	f107 0314 	add.w	r3, r7, #20
 8001b60:	4618      	mov	r0, r3
 8001b62:	f001 fad5 	bl	8003110 <HAL_RCCEx_PeriphCLKConfig>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b6c:	f7ff fc8e 	bl	800148c <Error_Handler>
    }

    /* UART5 clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8001b70:	4b2e      	ldr	r3, [pc, #184]	; (8001c2c <HAL_UART_MspInit+0x108>)
 8001b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b74:	4a2d      	ldr	r2, [pc, #180]	; (8001c2c <HAL_UART_MspInit+0x108>)
 8001b76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <HAL_UART_MspInit+0x108>)
 8001b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b88:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <HAL_UART_MspInit+0x108>)
 8001b8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b8c:	4a27      	ldr	r2, [pc, #156]	; (8001c2c <HAL_UART_MspInit+0x108>)
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b94:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <HAL_UART_MspInit+0x108>)
 8001b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b98:	f003 0304 	and.w	r3, r3, #4
 8001b9c:	60fb      	str	r3, [r7, #12]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ba0:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <HAL_UART_MspInit+0x108>)
 8001ba2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba4:	4a21      	ldr	r2, [pc, #132]	; (8001c2c <HAL_UART_MspInit+0x108>)
 8001ba6:	f043 0308 	orr.w	r3, r3, #8
 8001baa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bac:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <HAL_UART_MspInit+0x108>)
 8001bae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb0:	f003 0308 	and.w	r3, r3, #8
 8001bb4:	60bb      	str	r3, [r7, #8]
 8001bb6:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001bb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001bd2:	2308      	movs	r3, #8
 8001bd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bd8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001bdc:	4619      	mov	r1, r3
 8001bde:	4814      	ldr	r0, [pc, #80]	; (8001c30 <HAL_UART_MspInit+0x10c>)
 8001be0:	f000 fa84 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001be4:	2304      	movs	r3, #4
 8001be6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8001bfc:	2308      	movs	r3, #8
 8001bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c02:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001c06:	4619      	mov	r1, r3
 8001c08:	480a      	ldr	r0, [pc, #40]	; (8001c34 <HAL_UART_MspInit+0x110>)
 8001c0a:	f000 fa6f 	bl	80020ec <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	2100      	movs	r1, #0
 8001c12:	2035      	movs	r0, #53	; 0x35
 8001c14:	f000 f9b5 	bl	8001f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8001c18:	2035      	movs	r0, #53	; 0x35
 8001c1a:	f000 f9ce 	bl	8001fba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }
}
 8001c1e:	bf00      	nop
 8001c20:	37b0      	adds	r7, #176	; 0xb0
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40005000 	.word	0x40005000
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	48000800 	.word	0x48000800
 8001c34:	48000c00 	.word	0x48000c00

08001c38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001c38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001c3c:	f7ff fde6 	bl	800180c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c40:	480c      	ldr	r0, [pc, #48]	; (8001c74 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c42:	490d      	ldr	r1, [pc, #52]	; (8001c78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c44:	4a0d      	ldr	r2, [pc, #52]	; (8001c7c <LoopForever+0xe>)
  movs r3, #0
 8001c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c48:	e002      	b.n	8001c50 <LoopCopyDataInit>

08001c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c4e:	3304      	adds	r3, #4

08001c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c54:	d3f9      	bcc.n	8001c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c56:	4a0a      	ldr	r2, [pc, #40]	; (8001c80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c58:	4c0a      	ldr	r4, [pc, #40]	; (8001c84 <LoopForever+0x16>)
  movs r3, #0
 8001c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c5c:	e001      	b.n	8001c62 <LoopFillZerobss>

08001c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c60:	3204      	adds	r2, #4

08001c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c64:	d3fb      	bcc.n	8001c5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c66:	f004 ff8b 	bl	8006b80 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c6a:	f7ff faed 	bl	8001248 <main>

08001c6e <LoopForever>:

LoopForever:
    b LoopForever
 8001c6e:	e7fe      	b.n	8001c6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c78:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001c7c:	08008054 	.word	0x08008054
  ldr r2, =_sbss
 8001c80:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001c84:	20000218 	.word	0x20000218

08001c88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c88:	e7fe      	b.n	8001c88 <ADC1_2_IRQHandler>
	...

08001c8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c96:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <HAL_Init+0x3c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a0b      	ldr	r2, [pc, #44]	; (8001cc8 <HAL_Init+0x3c>)
 8001c9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca2:	2003      	movs	r0, #3
 8001ca4:	f000 f962 	bl	8001f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ca8:	2000      	movs	r0, #0
 8001caa:	f000 f80f 	bl	8001ccc <HAL_InitTick>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d002      	beq.n	8001cba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	71fb      	strb	r3, [r7, #7]
 8001cb8:	e001      	b.n	8001cbe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001cba:	f7ff fd19 	bl	80016f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3708      	adds	r7, #8
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	40022000 	.word	0x40022000

08001ccc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001cd8:	4b17      	ldr	r3, [pc, #92]	; (8001d38 <HAL_InitTick+0x6c>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d023      	beq.n	8001d28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001ce0:	4b16      	ldr	r3, [pc, #88]	; (8001d3c <HAL_InitTick+0x70>)
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <HAL_InitTick+0x6c>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4619      	mov	r1, r3
 8001cea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cee:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 f96d 	bl	8001fd6 <HAL_SYSTICK_Config>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d10f      	bne.n	8001d22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2b0f      	cmp	r3, #15
 8001d06:	d809      	bhi.n	8001d1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d08:	2200      	movs	r2, #0
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d10:	f000 f937 	bl	8001f82 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d14:	4a0a      	ldr	r2, [pc, #40]	; (8001d40 <HAL_InitTick+0x74>)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6013      	str	r3, [r2, #0]
 8001d1a:	e007      	b.n	8001d2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	73fb      	strb	r3, [r7, #15]
 8001d20:	e004      	b.n	8001d2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	73fb      	strb	r3, [r7, #15]
 8001d26:	e001      	b.n	8001d2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000018 	.word	0x20000018
 8001d3c:	20000010 	.word	0x20000010
 8001d40:	20000014 	.word	0x20000014

08001d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_IncTick+0x20>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_IncTick+0x24>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <HAL_IncTick+0x24>)
 8001d56:	6013      	str	r3, [r2, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000018 	.word	0x20000018
 8001d68:	20000204 	.word	0x20000204

08001d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <HAL_GetTick+0x14>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000204 	.word	0x20000204

08001d84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d8c:	f7ff ffee 	bl	8001d6c <HAL_GetTick>
 8001d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9c:	d005      	beq.n	8001daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_Delay+0x44>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4413      	add	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001daa:	bf00      	nop
 8001dac:	f7ff ffde 	bl	8001d6c <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d8f7      	bhi.n	8001dac <HAL_Delay+0x28>
  {
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000018 	.word	0x20000018

08001dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ddc:	4b0c      	ldr	r3, [pc, #48]	; (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de8:	4013      	ands	r3, r2
 8001dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001df4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dfe:	4a04      	ldr	r2, [pc, #16]	; (8001e10 <__NVIC_SetPriorityGrouping+0x44>)
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	60d3      	str	r3, [r2, #12]
}
 8001e04:	bf00      	nop
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e18:	4b04      	ldr	r3, [pc, #16]	; (8001e2c <__NVIC_GetPriorityGrouping+0x18>)
 8001e1a:	68db      	ldr	r3, [r3, #12]
 8001e1c:	0a1b      	lsrs	r3, r3, #8
 8001e1e:	f003 0307 	and.w	r3, r3, #7
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	4603      	mov	r3, r0
 8001e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	db0b      	blt.n	8001e5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	f003 021f 	and.w	r2, r3, #31
 8001e48:	4907      	ldr	r1, [pc, #28]	; (8001e68 <__NVIC_EnableIRQ+0x38>)
 8001e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4e:	095b      	lsrs	r3, r3, #5
 8001e50:	2001      	movs	r0, #1
 8001e52:	fa00 f202 	lsl.w	r2, r0, r2
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	e000e100 	.word	0xe000e100

08001e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	4603      	mov	r3, r0
 8001e74:	6039      	str	r1, [r7, #0]
 8001e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	db0a      	blt.n	8001e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	b2da      	uxtb	r2, r3
 8001e84:	490c      	ldr	r1, [pc, #48]	; (8001eb8 <__NVIC_SetPriority+0x4c>)
 8001e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e8a:	0112      	lsls	r2, r2, #4
 8001e8c:	b2d2      	uxtb	r2, r2
 8001e8e:	440b      	add	r3, r1
 8001e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e94:	e00a      	b.n	8001eac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	b2da      	uxtb	r2, r3
 8001e9a:	4908      	ldr	r1, [pc, #32]	; (8001ebc <__NVIC_SetPriority+0x50>)
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	f003 030f 	and.w	r3, r3, #15
 8001ea2:	3b04      	subs	r3, #4
 8001ea4:	0112      	lsls	r2, r2, #4
 8001ea6:	b2d2      	uxtb	r2, r2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	761a      	strb	r2, [r3, #24]
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	e000e100 	.word	0xe000e100
 8001ebc:	e000ed00 	.word	0xe000ed00

08001ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b089      	sub	sp, #36	; 0x24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	f003 0307 	and.w	r3, r3, #7
 8001ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f1c3 0307 	rsb	r3, r3, #7
 8001eda:	2b04      	cmp	r3, #4
 8001edc:	bf28      	it	cs
 8001ede:	2304      	movcs	r3, #4
 8001ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3304      	adds	r3, #4
 8001ee6:	2b06      	cmp	r3, #6
 8001ee8:	d902      	bls.n	8001ef0 <NVIC_EncodePriority+0x30>
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	3b03      	subs	r3, #3
 8001eee:	e000      	b.n	8001ef2 <NVIC_EncodePriority+0x32>
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	fa02 f303 	lsl.w	r3, r2, r3
 8001efe:	43da      	mvns	r2, r3
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	401a      	ands	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f08:	f04f 31ff 	mov.w	r1, #4294967295
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f12:	43d9      	mvns	r1, r3
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f18:	4313      	orrs	r3, r2
         );
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3724      	adds	r7, #36	; 0x24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
	...

08001f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f38:	d301      	bcc.n	8001f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00f      	b.n	8001f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f3e:	4a0a      	ldr	r2, [pc, #40]	; (8001f68 <SysTick_Config+0x40>)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	3b01      	subs	r3, #1
 8001f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f46:	210f      	movs	r1, #15
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f7ff ff8e 	bl	8001e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <SysTick_Config+0x40>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f56:	4b04      	ldr	r3, [pc, #16]	; (8001f68 <SysTick_Config+0x40>)
 8001f58:	2207      	movs	r2, #7
 8001f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	e000e010 	.word	0xe000e010

08001f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b082      	sub	sp, #8
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7ff ff29 	bl	8001dcc <__NVIC_SetPriorityGrouping>
}
 8001f7a:	bf00      	nop
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}

08001f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f82:	b580      	push	{r7, lr}
 8001f84:	b086      	sub	sp, #24
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	4603      	mov	r3, r0
 8001f8a:	60b9      	str	r1, [r7, #8]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001f90:	2300      	movs	r3, #0
 8001f92:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f94:	f7ff ff3e 	bl	8001e14 <__NVIC_GetPriorityGrouping>
 8001f98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	68b9      	ldr	r1, [r7, #8]
 8001f9e:	6978      	ldr	r0, [r7, #20]
 8001fa0:	f7ff ff8e 	bl	8001ec0 <NVIC_EncodePriority>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001faa:	4611      	mov	r1, r2
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7ff ff5d 	bl	8001e6c <__NVIC_SetPriority>
}
 8001fb2:	bf00      	nop
 8001fb4:	3718      	adds	r7, #24
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}

08001fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff31 	bl	8001e30 <__NVIC_EnableIRQ>
}
 8001fce:	bf00      	nop
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff ffa2 	bl	8001f28 <SysTick_Config>
 8001fe4:	4603      	mov	r3, r0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	b085      	sub	sp, #20
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d008      	beq.n	8002018 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2204      	movs	r2, #4
 800200a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	e022      	b.n	800205e <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 020e 	bic.w	r2, r2, #14
 8002026:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f022 0201 	bic.w	r2, r2, #1
 8002036:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203c:	f003 021c 	and.w	r2, r3, #28
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002044:	2101      	movs	r1, #1
 8002046:	fa01 f202 	lsl.w	r2, r1, r2
 800204a:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800205c:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800205e:	4618      	mov	r0, r3
 8002060:	3714      	adds	r7, #20
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr

0800206a <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b084      	sub	sp, #16
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002072:	2300      	movs	r3, #0
 8002074:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800207c:	b2db      	uxtb	r3, r3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d005      	beq.n	800208e <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2204      	movs	r2, #4
 8002086:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	e029      	b.n	80020e2 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 020e 	bic.w	r2, r2, #14
 800209c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0201 	bic.w	r2, r2, #1
 80020ac:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020b2:	f003 021c 	and.w	r2, r3, #28
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	2101      	movs	r1, #1
 80020bc:	fa01 f202 	lsl.w	r2, r1, r2
 80020c0:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	4798      	blx	r3
    }
  }
  return status;
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b087      	sub	sp, #28
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020fa:	e17f      	b.n	80023fc <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681a      	ldr	r2, [r3, #0]
 8002100:	2101      	movs	r1, #1
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	fa01 f303 	lsl.w	r3, r1, r3
 8002108:	4013      	ands	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 8171 	beq.w	80023f6 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f003 0303 	and.w	r3, r3, #3
 800211c:	2b01      	cmp	r3, #1
 800211e:	d005      	beq.n	800212c <HAL_GPIO_Init+0x40>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	f003 0303 	and.w	r3, r3, #3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d130      	bne.n	800218e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	2203      	movs	r2, #3
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4013      	ands	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	68da      	ldr	r2, [r3, #12]
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	693a      	ldr	r2, [r7, #16]
 8002152:	4313      	orrs	r3, r2
 8002154:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	693a      	ldr	r2, [r7, #16]
 800215a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002162:	2201      	movs	r2, #1
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	693a      	ldr	r2, [r7, #16]
 800216e:	4013      	ands	r3, r2
 8002170:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	091b      	lsrs	r3, r3, #4
 8002178:	f003 0201 	and.w	r2, r3, #1
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	fa02 f303 	lsl.w	r3, r2, r3
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	2b03      	cmp	r3, #3
 8002198:	d118      	bne.n	80021cc <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80021a0:	2201      	movs	r2, #1
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	693a      	ldr	r2, [r7, #16]
 80021ac:	4013      	ands	r3, r2
 80021ae:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	08db      	lsrs	r3, r3, #3
 80021b6:	f003 0201 	and.w	r2, r3, #1
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	693a      	ldr	r2, [r7, #16]
 80021ca:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d017      	beq.n	8002208 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	2203      	movs	r2, #3
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	4313      	orrs	r3, r2
 8002200:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	693a      	ldr	r2, [r7, #16]
 8002206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d123      	bne.n	800225c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	08da      	lsrs	r2, r3, #3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3208      	adds	r2, #8
 800221c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002220:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	220f      	movs	r2, #15
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	693a      	ldr	r2, [r7, #16]
 800224a:	4313      	orrs	r3, r2
 800224c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	08da      	lsrs	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3208      	adds	r2, #8
 8002256:	6939      	ldr	r1, [r7, #16]
 8002258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	693a      	ldr	r2, [r7, #16]
 8002270:	4013      	ands	r3, r2
 8002272:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0203 	and.w	r2, r3, #3
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	4313      	orrs	r3, r2
 8002288:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80ac 	beq.w	80023f6 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229e:	4b5f      	ldr	r3, [pc, #380]	; (800241c <HAL_GPIO_Init+0x330>)
 80022a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a2:	4a5e      	ldr	r2, [pc, #376]	; (800241c <HAL_GPIO_Init+0x330>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6613      	str	r3, [r2, #96]	; 0x60
 80022aa:	4b5c      	ldr	r3, [pc, #368]	; (800241c <HAL_GPIO_Init+0x330>)
 80022ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80022b6:	4a5a      	ldr	r2, [pc, #360]	; (8002420 <HAL_GPIO_Init+0x334>)
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	089b      	lsrs	r3, r3, #2
 80022bc:	3302      	adds	r3, #2
 80022be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	220f      	movs	r2, #15
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	693a      	ldr	r2, [r7, #16]
 80022d6:	4013      	ands	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022e0:	d025      	beq.n	800232e <HAL_GPIO_Init+0x242>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a4f      	ldr	r2, [pc, #316]	; (8002424 <HAL_GPIO_Init+0x338>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d01f      	beq.n	800232a <HAL_GPIO_Init+0x23e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a4e      	ldr	r2, [pc, #312]	; (8002428 <HAL_GPIO_Init+0x33c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d019      	beq.n	8002326 <HAL_GPIO_Init+0x23a>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a4d      	ldr	r2, [pc, #308]	; (800242c <HAL_GPIO_Init+0x340>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d013      	beq.n	8002322 <HAL_GPIO_Init+0x236>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a4c      	ldr	r2, [pc, #304]	; (8002430 <HAL_GPIO_Init+0x344>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d00d      	beq.n	800231e <HAL_GPIO_Init+0x232>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a4b      	ldr	r2, [pc, #300]	; (8002434 <HAL_GPIO_Init+0x348>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d007      	beq.n	800231a <HAL_GPIO_Init+0x22e>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a4a      	ldr	r2, [pc, #296]	; (8002438 <HAL_GPIO_Init+0x34c>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d101      	bne.n	8002316 <HAL_GPIO_Init+0x22a>
 8002312:	2306      	movs	r3, #6
 8002314:	e00c      	b.n	8002330 <HAL_GPIO_Init+0x244>
 8002316:	2307      	movs	r3, #7
 8002318:	e00a      	b.n	8002330 <HAL_GPIO_Init+0x244>
 800231a:	2305      	movs	r3, #5
 800231c:	e008      	b.n	8002330 <HAL_GPIO_Init+0x244>
 800231e:	2304      	movs	r3, #4
 8002320:	e006      	b.n	8002330 <HAL_GPIO_Init+0x244>
 8002322:	2303      	movs	r3, #3
 8002324:	e004      	b.n	8002330 <HAL_GPIO_Init+0x244>
 8002326:	2302      	movs	r3, #2
 8002328:	e002      	b.n	8002330 <HAL_GPIO_Init+0x244>
 800232a:	2301      	movs	r3, #1
 800232c:	e000      	b.n	8002330 <HAL_GPIO_Init+0x244>
 800232e:	2300      	movs	r3, #0
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	f002 0203 	and.w	r2, r2, #3
 8002336:	0092      	lsls	r2, r2, #2
 8002338:	4093      	lsls	r3, r2
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	4313      	orrs	r3, r2
 800233e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002340:	4937      	ldr	r1, [pc, #220]	; (8002420 <HAL_GPIO_Init+0x334>)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	089b      	lsrs	r3, r3, #2
 8002346:	3302      	adds	r3, #2
 8002348:	693a      	ldr	r2, [r7, #16]
 800234a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800234e:	4b3b      	ldr	r3, [pc, #236]	; (800243c <HAL_GPIO_Init+0x350>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	43db      	mvns	r3, r3
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4013      	ands	r3, r2
 800235c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002366:	2b00      	cmp	r3, #0
 8002368:	d003      	beq.n	8002372 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002372:	4a32      	ldr	r2, [pc, #200]	; (800243c <HAL_GPIO_Init+0x350>)
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002378:	4b30      	ldr	r3, [pc, #192]	; (800243c <HAL_GPIO_Init+0x350>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	43db      	mvns	r3, r3
 8002382:	693a      	ldr	r2, [r7, #16]
 8002384:	4013      	ands	r3, r2
 8002386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	4313      	orrs	r3, r2
 800239a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800239c:	4a27      	ldr	r2, [pc, #156]	; (800243c <HAL_GPIO_Init+0x350>)
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80023a2:	4b26      	ldr	r3, [pc, #152]	; (800243c <HAL_GPIO_Init+0x350>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	43db      	mvns	r3, r3
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4013      	ands	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d003      	beq.n	80023c6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80023be:	693a      	ldr	r2, [r7, #16]
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	4313      	orrs	r3, r2
 80023c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80023c6:	4a1d      	ldr	r2, [pc, #116]	; (800243c <HAL_GPIO_Init+0x350>)
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80023cc:	4b1b      	ldr	r3, [pc, #108]	; (800243c <HAL_GPIO_Init+0x350>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	43db      	mvns	r3, r3
 80023d6:	693a      	ldr	r2, [r7, #16]
 80023d8:	4013      	ands	r3, r2
 80023da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d003      	beq.n	80023f0 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80023e8:	693a      	ldr	r2, [r7, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023f0:	4a12      	ldr	r2, [pc, #72]	; (800243c <HAL_GPIO_Init+0x350>)
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	3301      	adds	r3, #1
 80023fa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	fa22 f303 	lsr.w	r3, r2, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	f47f ae78 	bne.w	80020fc <HAL_GPIO_Init+0x10>
  }
}
 800240c:	bf00      	nop
 800240e:	bf00      	nop
 8002410:	371c      	adds	r7, #28
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000
 8002420:	40010000 	.word	0x40010000
 8002424:	48000400 	.word	0x48000400
 8002428:	48000800 	.word	0x48000800
 800242c:	48000c00 	.word	0x48000c00
 8002430:	48001000 	.word	0x48001000
 8002434:	48001400 	.word	0x48001400
 8002438:	48001800 	.word	0x48001800
 800243c:	40010400 	.word	0x40010400

08002440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
 800244c:	4613      	mov	r3, r2
 800244e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002450:	787b      	ldrb	r3, [r7, #1]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002456:	887a      	ldrh	r2, [r7, #2]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800245c:	e002      	b.n	8002464 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800245e:	887a      	ldrh	r2, [r7, #2]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002474:	4b04      	ldr	r3, [pc, #16]	; (8002488 <HAL_PWREx_GetVoltageRange+0x18>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800247c:	4618      	mov	r0, r3
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	40007000 	.word	0x40007000

0800248c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800249a:	d130      	bne.n	80024fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800249c:	4b23      	ldr	r3, [pc, #140]	; (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024a8:	d038      	beq.n	800251c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80024aa:	4b20      	ldr	r3, [pc, #128]	; (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024b2:	4a1e      	ldr	r2, [pc, #120]	; (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80024ba:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2232      	movs	r2, #50	; 0x32
 80024c0:	fb02 f303 	mul.w	r3, r2, r3
 80024c4:	4a1b      	ldr	r2, [pc, #108]	; (8002534 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80024c6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ca:	0c9b      	lsrs	r3, r3, #18
 80024cc:	3301      	adds	r3, #1
 80024ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024d0:	e002      	b.n	80024d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	3b01      	subs	r3, #1
 80024d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024d8:	4b14      	ldr	r3, [pc, #80]	; (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024da:	695b      	ldr	r3, [r3, #20]
 80024dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e4:	d102      	bne.n	80024ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d1f2      	bne.n	80024d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024ec:	4b0f      	ldr	r3, [pc, #60]	; (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ee:	695b      	ldr	r3, [r3, #20]
 80024f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024f8:	d110      	bne.n	800251c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e00f      	b.n	800251e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024fe:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002506:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800250a:	d007      	beq.n	800251c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800250c:	4b07      	ldr	r3, [pc, #28]	; (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002514:	4a05      	ldr	r2, [pc, #20]	; (800252c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002516:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800251a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3714      	adds	r7, #20
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40007000 	.word	0x40007000
 8002530:	20000010 	.word	0x20000010
 8002534:	431bde83 	.word	0x431bde83

08002538 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b088      	sub	sp, #32
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e3d4      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800254a:	4ba1      	ldr	r3, [pc, #644]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 030c 	and.w	r3, r3, #12
 8002552:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002554:	4b9e      	ldr	r3, [pc, #632]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0310 	and.w	r3, r3, #16
 8002566:	2b00      	cmp	r3, #0
 8002568:	f000 80e4 	beq.w	8002734 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d007      	beq.n	8002582 <HAL_RCC_OscConfig+0x4a>
 8002572:	69bb      	ldr	r3, [r7, #24]
 8002574:	2b0c      	cmp	r3, #12
 8002576:	f040 808b 	bne.w	8002690 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2b01      	cmp	r3, #1
 800257e:	f040 8087 	bne.w	8002690 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002582:	4b93      	ldr	r3, [pc, #588]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0302 	and.w	r3, r3, #2
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_RCC_OscConfig+0x62>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d101      	bne.n	800259a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e3ac      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6a1a      	ldr	r2, [r3, #32]
 800259e:	4b8c      	ldr	r3, [pc, #560]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d004      	beq.n	80025b4 <HAL_RCC_OscConfig+0x7c>
 80025aa:	4b89      	ldr	r3, [pc, #548]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025b2:	e005      	b.n	80025c0 <HAL_RCC_OscConfig+0x88>
 80025b4:	4b86      	ldr	r3, [pc, #536]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 80025b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d223      	bcs.n	800260c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	4618      	mov	r0, r3
 80025ca:	f000 fd41 	bl	8003050 <RCC_SetFlashLatencyFromMSIRange>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e38d      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d8:	4b7d      	ldr	r3, [pc, #500]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a7c      	ldr	r2, [pc, #496]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 80025de:	f043 0308 	orr.w	r3, r3, #8
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	4b7a      	ldr	r3, [pc, #488]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	4977      	ldr	r1, [pc, #476]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025f6:	4b76      	ldr	r3, [pc, #472]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	021b      	lsls	r3, r3, #8
 8002604:	4972      	ldr	r1, [pc, #456]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 8002606:	4313      	orrs	r3, r2
 8002608:	604b      	str	r3, [r1, #4]
 800260a:	e025      	b.n	8002658 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800260c:	4b70      	ldr	r3, [pc, #448]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a6f      	ldr	r2, [pc, #444]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 8002612:	f043 0308 	orr.w	r3, r3, #8
 8002616:	6013      	str	r3, [r2, #0]
 8002618:	4b6d      	ldr	r3, [pc, #436]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	496a      	ldr	r1, [pc, #424]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 8002626:	4313      	orrs	r3, r2
 8002628:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800262a:	4b69      	ldr	r3, [pc, #420]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69db      	ldr	r3, [r3, #28]
 8002636:	021b      	lsls	r3, r3, #8
 8002638:	4965      	ldr	r1, [pc, #404]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800263e:	69bb      	ldr	r3, [r7, #24]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d109      	bne.n	8002658 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6a1b      	ldr	r3, [r3, #32]
 8002648:	4618      	mov	r0, r3
 800264a:	f000 fd01 	bl	8003050 <RCC_SetFlashLatencyFromMSIRange>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e34d      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002658:	f000 fc36 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 800265c:	4602      	mov	r2, r0
 800265e:	4b5c      	ldr	r3, [pc, #368]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	091b      	lsrs	r3, r3, #4
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	495a      	ldr	r1, [pc, #360]	; (80027d4 <HAL_RCC_OscConfig+0x29c>)
 800266a:	5ccb      	ldrb	r3, [r1, r3]
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
 8002674:	4a58      	ldr	r2, [pc, #352]	; (80027d8 <HAL_RCC_OscConfig+0x2a0>)
 8002676:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002678:	4b58      	ldr	r3, [pc, #352]	; (80027dc <HAL_RCC_OscConfig+0x2a4>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f7ff fb25 	bl	8001ccc <HAL_InitTick>
 8002682:	4603      	mov	r3, r0
 8002684:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d052      	beq.n	8002732 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	e331      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d032      	beq.n	80026fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002698:	4b4d      	ldr	r3, [pc, #308]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a4c      	ldr	r2, [pc, #304]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80026a4:	f7ff fb62 	bl	8001d6c <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026ac:	f7ff fb5e 	bl	8001d6c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e31a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026be:	4b44      	ldr	r3, [pc, #272]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d0f0      	beq.n	80026ac <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026ca:	4b41      	ldr	r3, [pc, #260]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a40      	ldr	r2, [pc, #256]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 80026d0:	f043 0308 	orr.w	r3, r3, #8
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	4b3e      	ldr	r3, [pc, #248]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	493b      	ldr	r1, [pc, #236]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026e8:	4b39      	ldr	r3, [pc, #228]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	69db      	ldr	r3, [r3, #28]
 80026f4:	021b      	lsls	r3, r3, #8
 80026f6:	4936      	ldr	r1, [pc, #216]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	604b      	str	r3, [r1, #4]
 80026fc:	e01a      	b.n	8002734 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026fe:	4b34      	ldr	r3, [pc, #208]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a33      	ldr	r2, [pc, #204]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800270a:	f7ff fb2f 	bl	8001d6c <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002712:	f7ff fb2b 	bl	8001d6c <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e2e7      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002724:	4b2a      	ldr	r3, [pc, #168]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1f0      	bne.n	8002712 <HAL_RCC_OscConfig+0x1da>
 8002730:	e000      	b.n	8002734 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002732:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 0301 	and.w	r3, r3, #1
 800273c:	2b00      	cmp	r3, #0
 800273e:	d074      	beq.n	800282a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2b08      	cmp	r3, #8
 8002744:	d005      	beq.n	8002752 <HAL_RCC_OscConfig+0x21a>
 8002746:	69bb      	ldr	r3, [r7, #24]
 8002748:	2b0c      	cmp	r3, #12
 800274a:	d10e      	bne.n	800276a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	2b03      	cmp	r3, #3
 8002750:	d10b      	bne.n	800276a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002752:	4b1f      	ldr	r3, [pc, #124]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d064      	beq.n	8002828 <HAL_RCC_OscConfig+0x2f0>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	685b      	ldr	r3, [r3, #4]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d160      	bne.n	8002828 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e2c4      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002772:	d106      	bne.n	8002782 <HAL_RCC_OscConfig+0x24a>
 8002774:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a15      	ldr	r2, [pc, #84]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 800277a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800277e:	6013      	str	r3, [r2, #0]
 8002780:	e01d      	b.n	80027be <HAL_RCC_OscConfig+0x286>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800278a:	d10c      	bne.n	80027a6 <HAL_RCC_OscConfig+0x26e>
 800278c:	4b10      	ldr	r3, [pc, #64]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a0f      	ldr	r2, [pc, #60]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 8002792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a0c      	ldr	r2, [pc, #48]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 800279e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027a2:	6013      	str	r3, [r2, #0]
 80027a4:	e00b      	b.n	80027be <HAL_RCC_OscConfig+0x286>
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a09      	ldr	r2, [pc, #36]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 80027ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027b0:	6013      	str	r3, [r2, #0]
 80027b2:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a06      	ldr	r2, [pc, #24]	; (80027d0 <HAL_RCC_OscConfig+0x298>)
 80027b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027bc:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d01c      	beq.n	8002800 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c6:	f7ff fad1 	bl	8001d6c <HAL_GetTick>
 80027ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027cc:	e011      	b.n	80027f2 <HAL_RCC_OscConfig+0x2ba>
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000
 80027d4:	08007e4c 	.word	0x08007e4c
 80027d8:	20000010 	.word	0x20000010
 80027dc:	20000014 	.word	0x20000014
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e0:	f7ff fac4 	bl	8001d6c <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b64      	cmp	r3, #100	; 0x64
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e280      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027f2:	4baf      	ldr	r3, [pc, #700]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x2a8>
 80027fe:	e014      	b.n	800282a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002800:	f7ff fab4 	bl	8001d6c <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002808:	f7ff fab0 	bl	8001d6c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b64      	cmp	r3, #100	; 0x64
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e26c      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800281a:	4ba5      	ldr	r3, [pc, #660]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x2d0>
 8002826:	e000      	b.n	800282a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002828:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d060      	beq.n	80028f8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	2b04      	cmp	r3, #4
 800283a:	d005      	beq.n	8002848 <HAL_RCC_OscConfig+0x310>
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2b0c      	cmp	r3, #12
 8002840:	d119      	bne.n	8002876 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d116      	bne.n	8002876 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002848:	4b99      	ldr	r3, [pc, #612]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_OscConfig+0x328>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d101      	bne.n	8002860 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e249      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002860:	4b93      	ldr	r3, [pc, #588]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	061b      	lsls	r3, r3, #24
 800286e:	4990      	ldr	r1, [pc, #576]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 8002870:	4313      	orrs	r3, r2
 8002872:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002874:	e040      	b.n	80028f8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	68db      	ldr	r3, [r3, #12]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d023      	beq.n	80028c6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800287e:	4b8c      	ldr	r3, [pc, #560]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a8b      	ldr	r2, [pc, #556]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 8002884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800288a:	f7ff fa6f 	bl	8001d6c <HAL_GetTick>
 800288e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002890:	e008      	b.n	80028a4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002892:	f7ff fa6b 	bl	8001d6c <HAL_GetTick>
 8002896:	4602      	mov	r2, r0
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	1ad3      	subs	r3, r2, r3
 800289c:	2b02      	cmp	r3, #2
 800289e:	d901      	bls.n	80028a4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e227      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028a4:	4b82      	ldr	r3, [pc, #520]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d0f0      	beq.n	8002892 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028b0:	4b7f      	ldr	r3, [pc, #508]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	691b      	ldr	r3, [r3, #16]
 80028bc:	061b      	lsls	r3, r3, #24
 80028be:	497c      	ldr	r1, [pc, #496]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	604b      	str	r3, [r1, #4]
 80028c4:	e018      	b.n	80028f8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028c6:	4b7a      	ldr	r3, [pc, #488]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a79      	ldr	r2, [pc, #484]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 80028cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d2:	f7ff fa4b 	bl	8001d6c <HAL_GetTick>
 80028d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028da:	f7ff fa47 	bl	8001d6c <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e203      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028ec:	4b70      	ldr	r3, [pc, #448]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d1f0      	bne.n	80028da <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0308 	and.w	r3, r3, #8
 8002900:	2b00      	cmp	r3, #0
 8002902:	d03c      	beq.n	800297e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d01c      	beq.n	8002946 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800290c:	4b68      	ldr	r3, [pc, #416]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 800290e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002912:	4a67      	ldr	r2, [pc, #412]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291c:	f7ff fa26 	bl	8001d6c <HAL_GetTick>
 8002920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002922:	e008      	b.n	8002936 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002924:	f7ff fa22 	bl	8001d6c <HAL_GetTick>
 8002928:	4602      	mov	r2, r0
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	1ad3      	subs	r3, r2, r3
 800292e:	2b02      	cmp	r3, #2
 8002930:	d901      	bls.n	8002936 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e1de      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002936:	4b5e      	ldr	r3, [pc, #376]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 8002938:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d0ef      	beq.n	8002924 <HAL_RCC_OscConfig+0x3ec>
 8002944:	e01b      	b.n	800297e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002946:	4b5a      	ldr	r3, [pc, #360]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 8002948:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800294c:	4a58      	ldr	r2, [pc, #352]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002956:	f7ff fa09 	bl	8001d6c <HAL_GetTick>
 800295a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800295c:	e008      	b.n	8002970 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800295e:	f7ff fa05 	bl	8001d6c <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	693b      	ldr	r3, [r7, #16]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d901      	bls.n	8002970 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800296c:	2303      	movs	r3, #3
 800296e:	e1c1      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002970:	4b4f      	ldr	r3, [pc, #316]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 8002972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1ef      	bne.n	800295e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	2b00      	cmp	r3, #0
 8002988:	f000 80a6 	beq.w	8002ad8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800298c:	2300      	movs	r3, #0
 800298e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002990:	4b47      	ldr	r3, [pc, #284]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 8002992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002994:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10d      	bne.n	80029b8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800299c:	4b44      	ldr	r3, [pc, #272]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 800299e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a0:	4a43      	ldr	r2, [pc, #268]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 80029a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a6:	6593      	str	r3, [r2, #88]	; 0x58
 80029a8:	4b41      	ldr	r3, [pc, #260]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 80029aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029b4:	2301      	movs	r3, #1
 80029b6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b8:	4b3e      	ldr	r3, [pc, #248]	; (8002ab4 <HAL_RCC_OscConfig+0x57c>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d118      	bne.n	80029f6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029c4:	4b3b      	ldr	r3, [pc, #236]	; (8002ab4 <HAL_RCC_OscConfig+0x57c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a3a      	ldr	r2, [pc, #232]	; (8002ab4 <HAL_RCC_OscConfig+0x57c>)
 80029ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029d0:	f7ff f9cc 	bl	8001d6c <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d8:	f7ff f9c8 	bl	8001d6c <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e184      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ea:	4b32      	ldr	r3, [pc, #200]	; (8002ab4 <HAL_RCC_OscConfig+0x57c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d108      	bne.n	8002a10 <HAL_RCC_OscConfig+0x4d8>
 80029fe:	4b2c      	ldr	r3, [pc, #176]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 8002a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a04:	4a2a      	ldr	r2, [pc, #168]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a0e:	e024      	b.n	8002a5a <HAL_RCC_OscConfig+0x522>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	d110      	bne.n	8002a3a <HAL_RCC_OscConfig+0x502>
 8002a18:	4b25      	ldr	r3, [pc, #148]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 8002a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1e:	4a24      	ldr	r2, [pc, #144]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 8002a20:	f043 0304 	orr.w	r3, r3, #4
 8002a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a28:	4b21      	ldr	r3, [pc, #132]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 8002a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2e:	4a20      	ldr	r2, [pc, #128]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 8002a30:	f043 0301 	orr.w	r3, r3, #1
 8002a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a38:	e00f      	b.n	8002a5a <HAL_RCC_OscConfig+0x522>
 8002a3a:	4b1d      	ldr	r3, [pc, #116]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a40:	4a1b      	ldr	r2, [pc, #108]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 8002a42:	f023 0301 	bic.w	r3, r3, #1
 8002a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a4a:	4b19      	ldr	r3, [pc, #100]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 8002a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a50:	4a17      	ldr	r2, [pc, #92]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 8002a52:	f023 0304 	bic.w	r3, r3, #4
 8002a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d016      	beq.n	8002a90 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a62:	f7ff f983 	bl	8001d6c <HAL_GetTick>
 8002a66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a68:	e00a      	b.n	8002a80 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6a:	f7ff f97f 	bl	8001d6c <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	693b      	ldr	r3, [r7, #16]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d901      	bls.n	8002a80 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	e139      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_RCC_OscConfig+0x578>)
 8002a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0ed      	beq.n	8002a6a <HAL_RCC_OscConfig+0x532>
 8002a8e:	e01a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a90:	f7ff f96c 	bl	8001d6c <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a96:	e00f      	b.n	8002ab8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a98:	f7ff f968 	bl	8001d6c <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d906      	bls.n	8002ab8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002aaa:	2303      	movs	r3, #3
 8002aac:	e122      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
 8002aae:	bf00      	nop
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ab8:	4b90      	ldr	r3, [pc, #576]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d1e8      	bne.n	8002a98 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ac6:	7ffb      	ldrb	r3, [r7, #31]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d105      	bne.n	8002ad8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002acc:	4b8b      	ldr	r3, [pc, #556]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad0:	4a8a      	ldr	r2, [pc, #552]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002ad2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8108 	beq.w	8002cf2 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	f040 80d0 	bne.w	8002c8c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002aec:	4b83      	ldr	r3, [pc, #524]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	f003 0203 	and.w	r2, r3, #3
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d130      	bne.n	8002b62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d127      	bne.n	8002b62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b1c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d11f      	bne.n	8002b62 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b2c:	2a07      	cmp	r2, #7
 8002b2e:	bf14      	ite	ne
 8002b30:	2201      	movne	r2, #1
 8002b32:	2200      	moveq	r2, #0
 8002b34:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d113      	bne.n	8002b62 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b44:	085b      	lsrs	r3, r3, #1
 8002b46:	3b01      	subs	r3, #1
 8002b48:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d109      	bne.n	8002b62 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b58:	085b      	lsrs	r3, r3, #1
 8002b5a:	3b01      	subs	r3, #1
 8002b5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d06e      	beq.n	8002c40 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b62:	69bb      	ldr	r3, [r7, #24]
 8002b64:	2b0c      	cmp	r3, #12
 8002b66:	d069      	beq.n	8002c3c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002b68:	4b64      	ldr	r3, [pc, #400]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d105      	bne.n	8002b80 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002b74:	4b61      	ldr	r3, [pc, #388]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d001      	beq.n	8002b84 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	e0b7      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b84:	4b5d      	ldr	r3, [pc, #372]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a5c      	ldr	r2, [pc, #368]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002b8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b8e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b90:	f7ff f8ec 	bl	8001d6c <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b98:	f7ff f8e8 	bl	8001d6c <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e0a4      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002baa:	4b54      	ldr	r3, [pc, #336]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bb6:	4b51      	ldr	r3, [pc, #324]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002bb8:	68da      	ldr	r2, [r3, #12]
 8002bba:	4b51      	ldr	r3, [pc, #324]	; (8002d00 <HAL_RCC_OscConfig+0x7c8>)
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002bc6:	3a01      	subs	r2, #1
 8002bc8:	0112      	lsls	r2, r2, #4
 8002bca:	4311      	orrs	r1, r2
 8002bcc:	687a      	ldr	r2, [r7, #4]
 8002bce:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002bd0:	0212      	lsls	r2, r2, #8
 8002bd2:	4311      	orrs	r1, r2
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002bd8:	0852      	lsrs	r2, r2, #1
 8002bda:	3a01      	subs	r2, #1
 8002bdc:	0552      	lsls	r2, r2, #21
 8002bde:	4311      	orrs	r1, r2
 8002be0:	687a      	ldr	r2, [r7, #4]
 8002be2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002be4:	0852      	lsrs	r2, r2, #1
 8002be6:	3a01      	subs	r2, #1
 8002be8:	0652      	lsls	r2, r2, #25
 8002bea:	4311      	orrs	r1, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bf0:	0912      	lsrs	r2, r2, #4
 8002bf2:	0452      	lsls	r2, r2, #17
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	4941      	ldr	r1, [pc, #260]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002bfc:	4b3f      	ldr	r3, [pc, #252]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a3e      	ldr	r2, [pc, #248]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c08:	4b3c      	ldr	r3, [pc, #240]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	4a3b      	ldr	r2, [pc, #236]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c14:	f7ff f8aa 	bl	8001d6c <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7ff f8a6 	bl	8001d6c <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e062      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c2e:	4b33      	ldr	r3, [pc, #204]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c3a:	e05a      	b.n	8002cf2 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e059      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c40:	4b2e      	ldr	r3, [pc, #184]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d152      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002c4c:	4b2b      	ldr	r3, [pc, #172]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a2a      	ldr	r2, [pc, #168]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c58:	4b28      	ldr	r3, [pc, #160]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4a27      	ldr	r2, [pc, #156]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c64:	f7ff f882 	bl	8001d6c <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7ff f87e 	bl	8001d6c <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e03a      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c7e:	4b1f      	ldr	r3, [pc, #124]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d0f0      	beq.n	8002c6c <HAL_RCC_OscConfig+0x734>
 8002c8a:	e032      	b.n	8002cf2 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	2b0c      	cmp	r3, #12
 8002c90:	d02d      	beq.n	8002cee <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c92:	4b1a      	ldr	r3, [pc, #104]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a19      	ldr	r2, [pc, #100]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002c98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c9c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002c9e:	4b17      	ldr	r3, [pc, #92]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d105      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002caa:	4b14      	ldr	r3, [pc, #80]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	4a13      	ldr	r2, [pc, #76]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002cb0:	f023 0303 	bic.w	r3, r3, #3
 8002cb4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002cb6:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	4a10      	ldr	r2, [pc, #64]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002cbc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc6:	f7ff f851 	bl	8001d6c <HAL_GetTick>
 8002cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ccc:	e008      	b.n	8002ce0 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cce:	f7ff f84d 	bl	8001d6c <HAL_GetTick>
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	693b      	ldr	r3, [r7, #16]
 8002cd6:	1ad3      	subs	r3, r2, r3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d901      	bls.n	8002ce0 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e009      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ce0:	4b06      	ldr	r3, [pc, #24]	; (8002cfc <HAL_RCC_OscConfig+0x7c4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f0      	bne.n	8002cce <HAL_RCC_OscConfig+0x796>
 8002cec:	e001      	b.n	8002cf2 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e000      	b.n	8002cf4 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8002cf2:	2300      	movs	r3, #0
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3720      	adds	r7, #32
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40021000 	.word	0x40021000
 8002d00:	f99d808c 	.word	0xf99d808c

08002d04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b084      	sub	sp, #16
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d101      	bne.n	8002d18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e0c8      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d18:	4b66      	ldr	r3, [pc, #408]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0307 	and.w	r3, r3, #7
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d910      	bls.n	8002d48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d26:	4b63      	ldr	r3, [pc, #396]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f023 0207 	bic.w	r2, r3, #7
 8002d2e:	4961      	ldr	r1, [pc, #388]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d36:	4b5f      	ldr	r3, [pc, #380]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f003 0307 	and.w	r3, r3, #7
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d001      	beq.n	8002d48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e0b0      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0301 	and.w	r3, r3, #1
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d04c      	beq.n	8002dee <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d107      	bne.n	8002d6c <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d5c:	4b56      	ldr	r3, [pc, #344]	; (8002eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d121      	bne.n	8002dac <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	e09e      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d107      	bne.n	8002d84 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d74:	4b50      	ldr	r3, [pc, #320]	; (8002eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d115      	bne.n	8002dac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e092      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d107      	bne.n	8002d9c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d8c:	4b4a      	ldr	r3, [pc, #296]	; (8002eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d109      	bne.n	8002dac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	e086      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d9c:	4b46      	ldr	r3, [pc, #280]	; (8002eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d101      	bne.n	8002dac <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e07e      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002dac:	4b42      	ldr	r3, [pc, #264]	; (8002eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f023 0203 	bic.w	r2, r3, #3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	493f      	ldr	r1, [pc, #252]	; (8002eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dbe:	f7fe ffd5 	bl	8001d6c <HAL_GetTick>
 8002dc2:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dc4:	e00a      	b.n	8002ddc <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc6:	f7fe ffd1 	bl	8001d6c <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d901      	bls.n	8002ddc <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	e066      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ddc:	4b36      	ldr	r3, [pc, #216]	; (8002eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 020c 	and.w	r2, r3, #12
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d1eb      	bne.n	8002dc6 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d008      	beq.n	8002e0c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dfa:	4b2f      	ldr	r3, [pc, #188]	; (8002eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	492c      	ldr	r1, [pc, #176]	; (8002eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e0c:	4b29      	ldr	r3, [pc, #164]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0307 	and.w	r3, r3, #7
 8002e14:	683a      	ldr	r2, [r7, #0]
 8002e16:	429a      	cmp	r2, r3
 8002e18:	d210      	bcs.n	8002e3c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e1a:	4b26      	ldr	r3, [pc, #152]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f023 0207 	bic.w	r2, r3, #7
 8002e22:	4924      	ldr	r1, [pc, #144]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e2a:	4b22      	ldr	r3, [pc, #136]	; (8002eb4 <HAL_RCC_ClockConfig+0x1b0>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0307 	and.w	r3, r3, #7
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d001      	beq.n	8002e3c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e036      	b.n	8002eaa <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0304 	and.w	r3, r3, #4
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d008      	beq.n	8002e5a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e48:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	4918      	ldr	r1, [pc, #96]	; (8002eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d009      	beq.n	8002e7a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e66:	4b14      	ldr	r3, [pc, #80]	; (8002eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e68:	689b      	ldr	r3, [r3, #8]
 8002e6a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	4910      	ldr	r1, [pc, #64]	; (8002eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e76:	4313      	orrs	r3, r2
 8002e78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e7a:	f000 f825 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <HAL_RCC_ClockConfig+0x1b4>)
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	091b      	lsrs	r3, r3, #4
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	490c      	ldr	r1, [pc, #48]	; (8002ebc <HAL_RCC_ClockConfig+0x1b8>)
 8002e8c:	5ccb      	ldrb	r3, [r1, r3]
 8002e8e:	f003 031f 	and.w	r3, r3, #31
 8002e92:	fa22 f303 	lsr.w	r3, r2, r3
 8002e96:	4a0a      	ldr	r2, [pc, #40]	; (8002ec0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ec4 <HAL_RCC_ClockConfig+0x1c0>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f7fe ff14 	bl	8001ccc <HAL_InitTick>
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	72fb      	strb	r3, [r7, #11]

  return status;
 8002ea8:	7afb      	ldrb	r3, [r7, #11]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3710      	adds	r7, #16
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	40022000 	.word	0x40022000
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	08007e4c 	.word	0x08007e4c
 8002ec0:	20000010 	.word	0x20000010
 8002ec4:	20000014 	.word	0x20000014

08002ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b089      	sub	sp, #36	; 0x24
 8002ecc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	61fb      	str	r3, [r7, #28]
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ed6:	4b3e      	ldr	r3, [pc, #248]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	f003 030c 	and.w	r3, r3, #12
 8002ede:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ee0:	4b3b      	ldr	r3, [pc, #236]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0303 	and.w	r3, r3, #3
 8002ee8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d005      	beq.n	8002efc <HAL_RCC_GetSysClockFreq+0x34>
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	2b0c      	cmp	r3, #12
 8002ef4:	d121      	bne.n	8002f3a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2b01      	cmp	r3, #1
 8002efa:	d11e      	bne.n	8002f3a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002efc:	4b34      	ldr	r3, [pc, #208]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0308 	and.w	r3, r3, #8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d107      	bne.n	8002f18 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f08:	4b31      	ldr	r3, [pc, #196]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f0e:	0a1b      	lsrs	r3, r3, #8
 8002f10:	f003 030f 	and.w	r3, r3, #15
 8002f14:	61fb      	str	r3, [r7, #28]
 8002f16:	e005      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f18:	4b2d      	ldr	r3, [pc, #180]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	091b      	lsrs	r3, r3, #4
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f24:	4a2b      	ldr	r2, [pc, #172]	; (8002fd4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10d      	bne.n	8002f50 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002f38:	e00a      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	2b04      	cmp	r3, #4
 8002f3e:	d102      	bne.n	8002f46 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002f40:	4b25      	ldr	r3, [pc, #148]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f42:	61bb      	str	r3, [r7, #24]
 8002f44:	e004      	b.n	8002f50 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	2b08      	cmp	r3, #8
 8002f4a:	d101      	bne.n	8002f50 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002f4c:	4b23      	ldr	r3, [pc, #140]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x114>)
 8002f4e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	2b0c      	cmp	r3, #12
 8002f54:	d134      	bne.n	8002fc0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002f56:	4b1e      	ldr	r3, [pc, #120]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d003      	beq.n	8002f6e <HAL_RCC_GetSysClockFreq+0xa6>
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	2b03      	cmp	r3, #3
 8002f6a:	d003      	beq.n	8002f74 <HAL_RCC_GetSysClockFreq+0xac>
 8002f6c:	e005      	b.n	8002f7a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002f6e:	4b1a      	ldr	r3, [pc, #104]	; (8002fd8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002f70:	617b      	str	r3, [r7, #20]
      break;
 8002f72:	e005      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f74:	4b19      	ldr	r3, [pc, #100]	; (8002fdc <HAL_RCC_GetSysClockFreq+0x114>)
 8002f76:	617b      	str	r3, [r7, #20]
      break;
 8002f78:	e002      	b.n	8002f80 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	617b      	str	r3, [r7, #20]
      break;
 8002f7e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f80:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	091b      	lsrs	r3, r3, #4
 8002f86:	f003 0307 	and.w	r3, r3, #7
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f8e:	4b10      	ldr	r3, [pc, #64]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f90:	68db      	ldr	r3, [r3, #12]
 8002f92:	0a1b      	lsrs	r3, r3, #8
 8002f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	fb02 f203 	mul.w	r2, r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002fa6:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fa8:	68db      	ldr	r3, [r3, #12]
 8002faa:	0e5b      	lsrs	r3, r3, #25
 8002fac:	f003 0303 	and.w	r3, r3, #3
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002fb6:	697a      	ldr	r2, [r7, #20]
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fbe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002fc0:	69bb      	ldr	r3, [r7, #24]
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3724      	adds	r7, #36	; 0x24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop
 8002fd0:	40021000 	.word	0x40021000
 8002fd4:	08007e64 	.word	0x08007e64
 8002fd8:	00f42400 	.word	0x00f42400
 8002fdc:	007a1200 	.word	0x007a1200

08002fe0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fe4:	4b03      	ldr	r3, [pc, #12]	; (8002ff4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	20000010 	.word	0x20000010

08002ff8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ffc:	f7ff fff0 	bl	8002fe0 <HAL_RCC_GetHCLKFreq>
 8003000:	4602      	mov	r2, r0
 8003002:	4b06      	ldr	r3, [pc, #24]	; (800301c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	0a1b      	lsrs	r3, r3, #8
 8003008:	f003 0307 	and.w	r3, r3, #7
 800300c:	4904      	ldr	r1, [pc, #16]	; (8003020 <HAL_RCC_GetPCLK1Freq+0x28>)
 800300e:	5ccb      	ldrb	r3, [r1, r3]
 8003010:	f003 031f 	and.w	r3, r3, #31
 8003014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003018:	4618      	mov	r0, r3
 800301a:	bd80      	pop	{r7, pc}
 800301c:	40021000 	.word	0x40021000
 8003020:	08007e5c 	.word	0x08007e5c

08003024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003028:	f7ff ffda 	bl	8002fe0 <HAL_RCC_GetHCLKFreq>
 800302c:	4602      	mov	r2, r0
 800302e:	4b06      	ldr	r3, [pc, #24]	; (8003048 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	0adb      	lsrs	r3, r3, #11
 8003034:	f003 0307 	and.w	r3, r3, #7
 8003038:	4904      	ldr	r1, [pc, #16]	; (800304c <HAL_RCC_GetPCLK2Freq+0x28>)
 800303a:	5ccb      	ldrb	r3, [r1, r3]
 800303c:	f003 031f 	and.w	r3, r3, #31
 8003040:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003044:	4618      	mov	r0, r3
 8003046:	bd80      	pop	{r7, pc}
 8003048:	40021000 	.word	0x40021000
 800304c:	08007e5c 	.word	0x08007e5c

08003050 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003058:	2300      	movs	r3, #0
 800305a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800305c:	4b2a      	ldr	r3, [pc, #168]	; (8003108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800305e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d003      	beq.n	8003070 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003068:	f7ff fa02 	bl	8002470 <HAL_PWREx_GetVoltageRange>
 800306c:	6178      	str	r0, [r7, #20]
 800306e:	e014      	b.n	800309a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003070:	4b25      	ldr	r3, [pc, #148]	; (8003108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003074:	4a24      	ldr	r2, [pc, #144]	; (8003108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003076:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307a:	6593      	str	r3, [r2, #88]	; 0x58
 800307c:	4b22      	ldr	r3, [pc, #136]	; (8003108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003084:	60fb      	str	r3, [r7, #12]
 8003086:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003088:	f7ff f9f2 	bl	8002470 <HAL_PWREx_GetVoltageRange>
 800308c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800308e:	4b1e      	ldr	r3, [pc, #120]	; (8003108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003092:	4a1d      	ldr	r2, [pc, #116]	; (8003108 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003094:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003098:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a0:	d10b      	bne.n	80030ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b80      	cmp	r3, #128	; 0x80
 80030a6:	d919      	bls.n	80030dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2ba0      	cmp	r3, #160	; 0xa0
 80030ac:	d902      	bls.n	80030b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030ae:	2302      	movs	r3, #2
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	e013      	b.n	80030dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030b4:	2301      	movs	r3, #1
 80030b6:	613b      	str	r3, [r7, #16]
 80030b8:	e010      	b.n	80030dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2b80      	cmp	r3, #128	; 0x80
 80030be:	d902      	bls.n	80030c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030c0:	2303      	movs	r3, #3
 80030c2:	613b      	str	r3, [r7, #16]
 80030c4:	e00a      	b.n	80030dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2b80      	cmp	r3, #128	; 0x80
 80030ca:	d102      	bne.n	80030d2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030cc:	2302      	movs	r3, #2
 80030ce:	613b      	str	r3, [r7, #16]
 80030d0:	e004      	b.n	80030dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b70      	cmp	r3, #112	; 0x70
 80030d6:	d101      	bne.n	80030dc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030d8:	2301      	movs	r3, #1
 80030da:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030dc:	4b0b      	ldr	r3, [pc, #44]	; (800310c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f023 0207 	bic.w	r2, r3, #7
 80030e4:	4909      	ldr	r1, [pc, #36]	; (800310c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	4313      	orrs	r3, r2
 80030ea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80030ec:	4b07      	ldr	r3, [pc, #28]	; (800310c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	693a      	ldr	r2, [r7, #16]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d001      	beq.n	80030fe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e000      	b.n	8003100 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	3718      	adds	r7, #24
 8003104:	46bd      	mov	sp, r7
 8003106:	bd80      	pop	{r7, pc}
 8003108:	40021000 	.word	0x40021000
 800310c:	40022000 	.word	0x40022000

08003110 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003118:	2300      	movs	r3, #0
 800311a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800311c:	2300      	movs	r3, #0
 800311e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003128:	2b00      	cmp	r3, #0
 800312a:	d041      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003130:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003134:	d02a      	beq.n	800318c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003136:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800313a:	d824      	bhi.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800313c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003140:	d008      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003142:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003146:	d81e      	bhi.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003148:	2b00      	cmp	r3, #0
 800314a:	d00a      	beq.n	8003162 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800314c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003150:	d010      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003152:	e018      	b.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003154:	4b86      	ldr	r3, [pc, #536]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	4a85      	ldr	r2, [pc, #532]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800315e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003160:	e015      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	3304      	adds	r3, #4
 8003166:	2100      	movs	r1, #0
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fabb 	bl	80036e4 <RCCEx_PLLSAI1_Config>
 800316e:	4603      	mov	r3, r0
 8003170:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003172:	e00c      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	3320      	adds	r3, #32
 8003178:	2100      	movs	r1, #0
 800317a:	4618      	mov	r0, r3
 800317c:	f000 fba6 	bl	80038cc <RCCEx_PLLSAI2_Config>
 8003180:	4603      	mov	r3, r0
 8003182:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003184:	e003      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	74fb      	strb	r3, [r7, #19]
      break;
 800318a:	e000      	b.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800318c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800318e:	7cfb      	ldrb	r3, [r7, #19]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10b      	bne.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003194:	4b76      	ldr	r3, [pc, #472]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800319a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031a2:	4973      	ldr	r1, [pc, #460]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031aa:	e001      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ac:	7cfb      	ldrb	r3, [r7, #19]
 80031ae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d041      	beq.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031c0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031c4:	d02a      	beq.n	800321c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80031c6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031ca:	d824      	bhi.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031d0:	d008      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031d6:	d81e      	bhi.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00a      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031e0:	d010      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80031e2:	e018      	b.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80031e4:	4b62      	ldr	r3, [pc, #392]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	4a61      	ldr	r2, [pc, #388]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031ee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80031f0:	e015      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3304      	adds	r3, #4
 80031f6:	2100      	movs	r1, #0
 80031f8:	4618      	mov	r0, r3
 80031fa:	f000 fa73 	bl	80036e4 <RCCEx_PLLSAI1_Config>
 80031fe:	4603      	mov	r3, r0
 8003200:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003202:	e00c      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3320      	adds	r3, #32
 8003208:	2100      	movs	r1, #0
 800320a:	4618      	mov	r0, r3
 800320c:	f000 fb5e 	bl	80038cc <RCCEx_PLLSAI2_Config>
 8003210:	4603      	mov	r3, r0
 8003212:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003214:	e003      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	74fb      	strb	r3, [r7, #19]
      break;
 800321a:	e000      	b.n	800321e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800321c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800321e:	7cfb      	ldrb	r3, [r7, #19]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10b      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003224:	4b52      	ldr	r3, [pc, #328]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800322a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003232:	494f      	ldr	r1, [pc, #316]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003234:	4313      	orrs	r3, r2
 8003236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800323a:	e001      	b.n	8003240 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800323c:	7cfb      	ldrb	r3, [r7, #19]
 800323e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 80a0 	beq.w	800338e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800324e:	2300      	movs	r3, #0
 8003250:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003252:	4b47      	ldr	r3, [pc, #284]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800325e:	2301      	movs	r3, #1
 8003260:	e000      	b.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003262:	2300      	movs	r3, #0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00d      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003268:	4b41      	ldr	r3, [pc, #260]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326c:	4a40      	ldr	r2, [pc, #256]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003272:	6593      	str	r3, [r2, #88]	; 0x58
 8003274:	4b3e      	ldr	r3, [pc, #248]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327c:	60bb      	str	r3, [r7, #8]
 800327e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003280:	2301      	movs	r3, #1
 8003282:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003284:	4b3b      	ldr	r3, [pc, #236]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a3a      	ldr	r2, [pc, #232]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800328a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003290:	f7fe fd6c 	bl	8001d6c <HAL_GetTick>
 8003294:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003296:	e009      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003298:	f7fe fd68 	bl	8001d6c <HAL_GetTick>
 800329c:	4602      	mov	r2, r0
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	1ad3      	subs	r3, r2, r3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d902      	bls.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	74fb      	strb	r3, [r7, #19]
        break;
 80032aa:	e005      	b.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032ac:	4b31      	ldr	r3, [pc, #196]	; (8003374 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0ef      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80032b8:	7cfb      	ldrb	r3, [r7, #19]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d15c      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032be:	4b2c      	ldr	r3, [pc, #176]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d01f      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032d6:	697a      	ldr	r2, [r7, #20]
 80032d8:	429a      	cmp	r2, r3
 80032da:	d019      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032dc:	4b24      	ldr	r3, [pc, #144]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032e8:	4b21      	ldr	r3, [pc, #132]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ee:	4a20      	ldr	r2, [pc, #128]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032f8:	4b1d      	ldr	r3, [pc, #116]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fe:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003304:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003308:	4a19      	ldr	r2, [pc, #100]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d016      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800331a:	f7fe fd27 	bl	8001d6c <HAL_GetTick>
 800331e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003320:	e00b      	b.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003322:	f7fe fd23 	bl	8001d6c <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003330:	4293      	cmp	r3, r2
 8003332:	d902      	bls.n	800333a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	74fb      	strb	r3, [r7, #19]
            break;
 8003338:	e006      	b.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800333a:	4b0d      	ldr	r3, [pc, #52]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800333c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0ec      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003348:	7cfb      	ldrb	r3, [r7, #19]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10c      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800334e:	4b08      	ldr	r3, [pc, #32]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003354:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800335e:	4904      	ldr	r1, [pc, #16]	; (8003370 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003366:	e009      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	74bb      	strb	r3, [r7, #18]
 800336c:	e006      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800336e:	bf00      	nop
 8003370:	40021000 	.word	0x40021000
 8003374:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800337c:	7c7b      	ldrb	r3, [r7, #17]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d105      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003382:	4b9e      	ldr	r3, [pc, #632]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003384:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003386:	4a9d      	ldr	r2, [pc, #628]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003388:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800338c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800339a:	4b98      	ldr	r3, [pc, #608]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a0:	f023 0203 	bic.w	r2, r3, #3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	4994      	ldr	r1, [pc, #592]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0302 	and.w	r3, r3, #2
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033bc:	4b8f      	ldr	r3, [pc, #572]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	f023 020c 	bic.w	r2, r3, #12
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ca:	498c      	ldr	r1, [pc, #560]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033de:	4b87      	ldr	r3, [pc, #540]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ec:	4983      	ldr	r1, [pc, #524]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0308 	and.w	r3, r3, #8
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003400:	4b7e      	ldr	r3, [pc, #504]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003406:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	497b      	ldr	r1, [pc, #492]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0310 	and.w	r3, r3, #16
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003422:	4b76      	ldr	r3, [pc, #472]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003428:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003430:	4972      	ldr	r1, [pc, #456]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0320 	and.w	r3, r3, #32
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003444:	4b6d      	ldr	r3, [pc, #436]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003452:	496a      	ldr	r1, [pc, #424]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003462:	2b00      	cmp	r3, #0
 8003464:	d00a      	beq.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003466:	4b65      	ldr	r3, [pc, #404]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003474:	4961      	ldr	r1, [pc, #388]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003484:	2b00      	cmp	r3, #0
 8003486:	d00a      	beq.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003488:	4b5c      	ldr	r3, [pc, #368]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003496:	4959      	ldr	r1, [pc, #356]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00a      	beq.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034aa:	4b54      	ldr	r3, [pc, #336]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034b8:	4950      	ldr	r1, [pc, #320]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ba:	4313      	orrs	r3, r2
 80034bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d00a      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034cc:	4b4b      	ldr	r3, [pc, #300]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034da:	4948      	ldr	r1, [pc, #288]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00a      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034ee:	4b43      	ldr	r3, [pc, #268]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034fc:	493f      	ldr	r1, [pc, #252]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d028      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003510:	4b3a      	ldr	r3, [pc, #232]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003516:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800351e:	4937      	ldr	r1, [pc, #220]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003520:	4313      	orrs	r3, r2
 8003522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800352a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800352e:	d106      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003530:	4b32      	ldr	r3, [pc, #200]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	4a31      	ldr	r2, [pc, #196]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003536:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800353a:	60d3      	str	r3, [r2, #12]
 800353c:	e011      	b.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003542:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003546:	d10c      	bne.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	3304      	adds	r3, #4
 800354c:	2101      	movs	r1, #1
 800354e:	4618      	mov	r0, r3
 8003550:	f000 f8c8 	bl	80036e4 <RCCEx_PLLSAI1_Config>
 8003554:	4603      	mov	r3, r0
 8003556:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003558:	7cfb      	ldrb	r3, [r7, #19]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800355e:	7cfb      	ldrb	r3, [r7, #19]
 8003560:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d028      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800356e:	4b23      	ldr	r3, [pc, #140]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003574:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357c:	491f      	ldr	r1, [pc, #124]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357e:	4313      	orrs	r3, r2
 8003580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003588:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800358c:	d106      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800358e:	4b1b      	ldr	r3, [pc, #108]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003590:	68db      	ldr	r3, [r3, #12]
 8003592:	4a1a      	ldr	r2, [pc, #104]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003598:	60d3      	str	r3, [r2, #12]
 800359a:	e011      	b.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035a4:	d10c      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3304      	adds	r3, #4
 80035aa:	2101      	movs	r1, #1
 80035ac:	4618      	mov	r0, r3
 80035ae:	f000 f899 	bl	80036e4 <RCCEx_PLLSAI1_Config>
 80035b2:	4603      	mov	r3, r0
 80035b4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035b6:	7cfb      	ldrb	r3, [r7, #19]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d001      	beq.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80035bc:	7cfb      	ldrb	r3, [r7, #19]
 80035be:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d02b      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035cc:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035da:	4908      	ldr	r1, [pc, #32]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035ea:	d109      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ec:	4b03      	ldr	r3, [pc, #12]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	4a02      	ldr	r2, [pc, #8]	; (80035fc <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035f6:	60d3      	str	r3, [r2, #12]
 80035f8:	e014      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80035fa:	bf00      	nop
 80035fc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003604:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003608:	d10c      	bne.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3304      	adds	r3, #4
 800360e:	2101      	movs	r1, #1
 8003610:	4618      	mov	r0, r3
 8003612:	f000 f867 	bl	80036e4 <RCCEx_PLLSAI1_Config>
 8003616:	4603      	mov	r3, r0
 8003618:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800361a:	7cfb      	ldrb	r3, [r7, #19]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d001      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003620:	7cfb      	ldrb	r3, [r7, #19]
 8003622:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d02f      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003630:	4b2b      	ldr	r3, [pc, #172]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003636:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800363e:	4928      	ldr	r1, [pc, #160]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003640:	4313      	orrs	r3, r2
 8003642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800364a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800364e:	d10d      	bne.n	800366c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3304      	adds	r3, #4
 8003654:	2102      	movs	r1, #2
 8003656:	4618      	mov	r0, r3
 8003658:	f000 f844 	bl	80036e4 <RCCEx_PLLSAI1_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d014      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003666:	7cfb      	ldrb	r3, [r7, #19]
 8003668:	74bb      	strb	r3, [r7, #18]
 800366a:	e011      	b.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003670:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003674:	d10c      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3320      	adds	r3, #32
 800367a:	2102      	movs	r1, #2
 800367c:	4618      	mov	r0, r3
 800367e:	f000 f925 	bl	80038cc <RCCEx_PLLSAI2_Config>
 8003682:	4603      	mov	r3, r0
 8003684:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003686:	7cfb      	ldrb	r3, [r7, #19]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d001      	beq.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800368c:	7cfb      	ldrb	r3, [r7, #19]
 800368e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00a      	beq.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800369c:	4b10      	ldr	r3, [pc, #64]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800369e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036a2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036aa:	490d      	ldr	r1, [pc, #52]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036ac:	4313      	orrs	r3, r2
 80036ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00b      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036be:	4b08      	ldr	r3, [pc, #32]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ce:	4904      	ldr	r1, [pc, #16]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40021000 	.word	0x40021000

080036e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80036f2:	4b75      	ldr	r3, [pc, #468]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d018      	beq.n	8003730 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80036fe:	4b72      	ldr	r3, [pc, #456]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	f003 0203 	and.w	r2, r3, #3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d10d      	bne.n	800372a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
       ||
 8003712:	2b00      	cmp	r3, #0
 8003714:	d009      	beq.n	800372a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003716:	4b6c      	ldr	r3, [pc, #432]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	091b      	lsrs	r3, r3, #4
 800371c:	f003 0307 	and.w	r3, r3, #7
 8003720:	1c5a      	adds	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
       ||
 8003726:	429a      	cmp	r2, r3
 8003728:	d047      	beq.n	80037ba <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	73fb      	strb	r3, [r7, #15]
 800372e:	e044      	b.n	80037ba <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	2b03      	cmp	r3, #3
 8003736:	d018      	beq.n	800376a <RCCEx_PLLSAI1_Config+0x86>
 8003738:	2b03      	cmp	r3, #3
 800373a:	d825      	bhi.n	8003788 <RCCEx_PLLSAI1_Config+0xa4>
 800373c:	2b01      	cmp	r3, #1
 800373e:	d002      	beq.n	8003746 <RCCEx_PLLSAI1_Config+0x62>
 8003740:	2b02      	cmp	r3, #2
 8003742:	d009      	beq.n	8003758 <RCCEx_PLLSAI1_Config+0x74>
 8003744:	e020      	b.n	8003788 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003746:	4b60      	ldr	r3, [pc, #384]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d11d      	bne.n	800378e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003752:	2301      	movs	r3, #1
 8003754:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003756:	e01a      	b.n	800378e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003758:	4b5b      	ldr	r3, [pc, #364]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003760:	2b00      	cmp	r3, #0
 8003762:	d116      	bne.n	8003792 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003764:	2301      	movs	r3, #1
 8003766:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003768:	e013      	b.n	8003792 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800376a:	4b57      	ldr	r3, [pc, #348]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d10f      	bne.n	8003796 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003776:	4b54      	ldr	r3, [pc, #336]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d109      	bne.n	8003796 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003786:	e006      	b.n	8003796 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
      break;
 800378c:	e004      	b.n	8003798 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800378e:	bf00      	nop
 8003790:	e002      	b.n	8003798 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003792:	bf00      	nop
 8003794:	e000      	b.n	8003798 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003796:	bf00      	nop
    }

    if(status == HAL_OK)
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10d      	bne.n	80037ba <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800379e:	4b4a      	ldr	r3, [pc, #296]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6819      	ldr	r1, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	3b01      	subs	r3, #1
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	430b      	orrs	r3, r1
 80037b4:	4944      	ldr	r1, [pc, #272]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037ba:	7bfb      	ldrb	r3, [r7, #15]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d17d      	bne.n	80038bc <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037c0:	4b41      	ldr	r3, [pc, #260]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a40      	ldr	r2, [pc, #256]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037c6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037cc:	f7fe face 	bl	8001d6c <HAL_GetTick>
 80037d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037d2:	e009      	b.n	80037e8 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037d4:	f7fe faca 	bl	8001d6c <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d902      	bls.n	80037e8 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	73fb      	strb	r3, [r7, #15]
        break;
 80037e6:	e005      	b.n	80037f4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037e8:	4b37      	ldr	r3, [pc, #220]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d1ef      	bne.n	80037d4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d160      	bne.n	80038bc <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d111      	bne.n	8003824 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003800:	4b31      	ldr	r3, [pc, #196]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800380c:	687a      	ldr	r2, [r7, #4]
 800380e:	6892      	ldr	r2, [r2, #8]
 8003810:	0211      	lsls	r1, r2, #8
 8003812:	687a      	ldr	r2, [r7, #4]
 8003814:	68d2      	ldr	r2, [r2, #12]
 8003816:	0912      	lsrs	r2, r2, #4
 8003818:	0452      	lsls	r2, r2, #17
 800381a:	430a      	orrs	r2, r1
 800381c:	492a      	ldr	r1, [pc, #168]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800381e:	4313      	orrs	r3, r2
 8003820:	610b      	str	r3, [r1, #16]
 8003822:	e027      	b.n	8003874 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	2b01      	cmp	r3, #1
 8003828:	d112      	bne.n	8003850 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800382a:	4b27      	ldr	r3, [pc, #156]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800382c:	691b      	ldr	r3, [r3, #16]
 800382e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003832:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6892      	ldr	r2, [r2, #8]
 800383a:	0211      	lsls	r1, r2, #8
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6912      	ldr	r2, [r2, #16]
 8003840:	0852      	lsrs	r2, r2, #1
 8003842:	3a01      	subs	r2, #1
 8003844:	0552      	lsls	r2, r2, #21
 8003846:	430a      	orrs	r2, r1
 8003848:	491f      	ldr	r1, [pc, #124]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800384a:	4313      	orrs	r3, r2
 800384c:	610b      	str	r3, [r1, #16]
 800384e:	e011      	b.n	8003874 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003850:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003858:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800385c:	687a      	ldr	r2, [r7, #4]
 800385e:	6892      	ldr	r2, [r2, #8]
 8003860:	0211      	lsls	r1, r2, #8
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6952      	ldr	r2, [r2, #20]
 8003866:	0852      	lsrs	r2, r2, #1
 8003868:	3a01      	subs	r2, #1
 800386a:	0652      	lsls	r2, r2, #25
 800386c:	430a      	orrs	r2, r1
 800386e:	4916      	ldr	r1, [pc, #88]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003870:	4313      	orrs	r3, r2
 8003872:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003874:	4b14      	ldr	r3, [pc, #80]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a13      	ldr	r2, [pc, #76]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800387a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800387e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003880:	f7fe fa74 	bl	8001d6c <HAL_GetTick>
 8003884:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003886:	e009      	b.n	800389c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003888:	f7fe fa70 	bl	8001d6c <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b02      	cmp	r3, #2
 8003894:	d902      	bls.n	800389c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	73fb      	strb	r3, [r7, #15]
          break;
 800389a:	e005      	b.n	80038a8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800389c:	4b0a      	ldr	r3, [pc, #40]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d0ef      	beq.n	8003888 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80038a8:	7bfb      	ldrb	r3, [r7, #15]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d106      	bne.n	80038bc <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038ae:	4b06      	ldr	r3, [pc, #24]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b0:	691a      	ldr	r2, [r3, #16]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	4904      	ldr	r1, [pc, #16]	; (80038c8 <RCCEx_PLLSAI1_Config+0x1e4>)
 80038b8:	4313      	orrs	r3, r2
 80038ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	40021000 	.word	0x40021000

080038cc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80038da:	4b6a      	ldr	r3, [pc, #424]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d018      	beq.n	8003918 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80038e6:	4b67      	ldr	r3, [pc, #412]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f003 0203 	and.w	r2, r3, #3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d10d      	bne.n	8003912 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
       ||
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d009      	beq.n	8003912 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80038fe:	4b61      	ldr	r3, [pc, #388]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	091b      	lsrs	r3, r3, #4
 8003904:	f003 0307 	and.w	r3, r3, #7
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
       ||
 800390e:	429a      	cmp	r2, r3
 8003910:	d047      	beq.n	80039a2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	73fb      	strb	r3, [r7, #15]
 8003916:	e044      	b.n	80039a2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2b03      	cmp	r3, #3
 800391e:	d018      	beq.n	8003952 <RCCEx_PLLSAI2_Config+0x86>
 8003920:	2b03      	cmp	r3, #3
 8003922:	d825      	bhi.n	8003970 <RCCEx_PLLSAI2_Config+0xa4>
 8003924:	2b01      	cmp	r3, #1
 8003926:	d002      	beq.n	800392e <RCCEx_PLLSAI2_Config+0x62>
 8003928:	2b02      	cmp	r3, #2
 800392a:	d009      	beq.n	8003940 <RCCEx_PLLSAI2_Config+0x74>
 800392c:	e020      	b.n	8003970 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800392e:	4b55      	ldr	r3, [pc, #340]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0302 	and.w	r3, r3, #2
 8003936:	2b00      	cmp	r3, #0
 8003938:	d11d      	bne.n	8003976 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800393e:	e01a      	b.n	8003976 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003940:	4b50      	ldr	r3, [pc, #320]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003948:	2b00      	cmp	r3, #0
 800394a:	d116      	bne.n	800397a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003950:	e013      	b.n	800397a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003952:	4b4c      	ldr	r3, [pc, #304]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d10f      	bne.n	800397e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800395e:	4b49      	ldr	r3, [pc, #292]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d109      	bne.n	800397e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800396e:	e006      	b.n	800397e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	73fb      	strb	r3, [r7, #15]
      break;
 8003974:	e004      	b.n	8003980 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003976:	bf00      	nop
 8003978:	e002      	b.n	8003980 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800397a:	bf00      	nop
 800397c:	e000      	b.n	8003980 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800397e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003980:	7bfb      	ldrb	r3, [r7, #15]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10d      	bne.n	80039a2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003986:	4b3f      	ldr	r3, [pc, #252]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003988:	68db      	ldr	r3, [r3, #12]
 800398a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6819      	ldr	r1, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	3b01      	subs	r3, #1
 8003998:	011b      	lsls	r3, r3, #4
 800399a:	430b      	orrs	r3, r1
 800399c:	4939      	ldr	r1, [pc, #228]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80039a2:	7bfb      	ldrb	r3, [r7, #15]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d167      	bne.n	8003a78 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80039a8:	4b36      	ldr	r3, [pc, #216]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a35      	ldr	r2, [pc, #212]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039b4:	f7fe f9da 	bl	8001d6c <HAL_GetTick>
 80039b8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039ba:	e009      	b.n	80039d0 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039bc:	f7fe f9d6 	bl	8001d6c <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	1ad3      	subs	r3, r2, r3
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d902      	bls.n	80039d0 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	73fb      	strb	r3, [r7, #15]
        break;
 80039ce:	e005      	b.n	80039dc <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80039d0:	4b2c      	ldr	r3, [pc, #176]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d1ef      	bne.n	80039bc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80039dc:	7bfb      	ldrb	r3, [r7, #15]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d14a      	bne.n	8003a78 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d111      	bne.n	8003a0c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80039e8:	4b26      	ldr	r3, [pc, #152]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 80039ea:	695b      	ldr	r3, [r3, #20]
 80039ec:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80039f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	6892      	ldr	r2, [r2, #8]
 80039f8:	0211      	lsls	r1, r2, #8
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	68d2      	ldr	r2, [r2, #12]
 80039fe:	0912      	lsrs	r2, r2, #4
 8003a00:	0452      	lsls	r2, r2, #17
 8003a02:	430a      	orrs	r2, r1
 8003a04:	491f      	ldr	r1, [pc, #124]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	614b      	str	r3, [r1, #20]
 8003a0a:	e011      	b.n	8003a30 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a0c:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	6892      	ldr	r2, [r2, #8]
 8003a1c:	0211      	lsls	r1, r2, #8
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6912      	ldr	r2, [r2, #16]
 8003a22:	0852      	lsrs	r2, r2, #1
 8003a24:	3a01      	subs	r2, #1
 8003a26:	0652      	lsls	r2, r2, #25
 8003a28:	430a      	orrs	r2, r1
 8003a2a:	4916      	ldr	r1, [pc, #88]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a30:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a13      	ldr	r2, [pc, #76]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a3c:	f7fe f996 	bl	8001d6c <HAL_GetTick>
 8003a40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a42:	e009      	b.n	8003a58 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a44:	f7fe f992 	bl	8001d6c <HAL_GetTick>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	1ad3      	subs	r3, r2, r3
 8003a4e:	2b02      	cmp	r3, #2
 8003a50:	d902      	bls.n	8003a58 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003a52:	2303      	movs	r3, #3
 8003a54:	73fb      	strb	r3, [r7, #15]
          break;
 8003a56:	e005      	b.n	8003a64 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003a58:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d0ef      	beq.n	8003a44 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003a64:	7bfb      	ldrb	r3, [r7, #15]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d106      	bne.n	8003a78 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003a6a:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a6c:	695a      	ldr	r2, [r3, #20]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	695b      	ldr	r3, [r3, #20]
 8003a72:	4904      	ldr	r1, [pc, #16]	; (8003a84 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003a74:	4313      	orrs	r3, r2
 8003a76:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3710      	adds	r7, #16
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	40021000 	.word	0x40021000

08003a88 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d06c      	beq.n	8003b74 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d106      	bne.n	8003ab4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7fd fd4c 	bl	800154c <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	22ca      	movs	r2, #202	; 0xca
 8003ac2:	625a      	str	r2, [r3, #36]	; 0x24
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2253      	movs	r2, #83	; 0x53
 8003aca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fa49 	bl	8003f64 <RTC_EnterInitMode>
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d14b      	bne.n	8003b74 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	6812      	ldr	r2, [r2, #0]
 8003ae6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003aea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003aee:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	6899      	ldr	r1, [r3, #8]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	431a      	orrs	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	431a      	orrs	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	68d2      	ldr	r2, [r2, #12]
 8003b16:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6919      	ldr	r1, [r3, #16]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	041a      	lsls	r2, r3, #16
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fa4d 	bl	8003fcc <RTC_ExitInitMode>
 8003b32:	4603      	mov	r3, r0
 8003b34:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d11b      	bne.n	8003b74 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0203 	bic.w	r2, r2, #3
 8003b4a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	69da      	ldr	r2, [r3, #28]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	695b      	ldr	r3, [r3, #20]
 8003b5a:	431a      	orrs	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	22ff      	movs	r2, #255	; 0xff
 8003b6a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b76:	4618      	mov	r0, r3
 8003b78:	3710      	adds	r7, #16
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	bd80      	pop	{r7, pc}

08003b7e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003b7e:	b590      	push	{r4, r7, lr}
 8003b80:	b087      	sub	sp, #28
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	60f8      	str	r0, [r7, #12]
 8003b86:	60b9      	str	r1, [r7, #8]
 8003b88:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d101      	bne.n	8003b98 <HAL_RTC_SetTime+0x1a>
 8003b94:	2302      	movs	r3, #2
 8003b96:	e08b      	b.n	8003cb0 <HAL_RTC_SetTime+0x132>
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	22ca      	movs	r2, #202	; 0xca
 8003bae:	625a      	str	r2, [r3, #36]	; 0x24
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2253      	movs	r2, #83	; 0x53
 8003bb6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f9d3 	bl	8003f64 <RTC_EnterInitMode>
 8003bbe:	4603      	mov	r3, r0
 8003bc0:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003bc2:	7cfb      	ldrb	r3, [r7, #19]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d163      	bne.n	8003c90 <HAL_RTC_SetTime+0x112>
  {
    if (Format == RTC_FORMAT_BIN)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d126      	bne.n	8003c1c <HAL_RTC_SetTime+0x9e>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d102      	bne.n	8003be2 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	2200      	movs	r2, #0
 8003be0:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	781b      	ldrb	r3, [r3, #0]
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fa2e 	bl	8004048 <RTC_ByteToBcd2>
 8003bec:	4603      	mov	r3, r0
 8003bee:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003bf0:	68bb      	ldr	r3, [r7, #8]
 8003bf2:	785b      	ldrb	r3, [r3, #1]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 fa27 	bl	8004048 <RTC_ByteToBcd2>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003bfe:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	789b      	ldrb	r3, [r3, #2]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fa1f 	bl	8004048 <RTC_ByteToBcd2>
 8003c0a:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c0c:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	78db      	ldrb	r3, [r3, #3]
 8003c14:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c16:	4313      	orrs	r3, r2
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	e018      	b.n	8003c4e <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d102      	bne.n	8003c30 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	785b      	ldrb	r3, [r3, #1]
 8003c3a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c3c:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8003c42:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	78db      	ldrb	r3, [r3, #3]
 8003c48:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003c58:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003c5c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	689a      	ldr	r2, [r3, #8]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003c6c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	6899      	ldr	r1, [r3, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	691b      	ldr	r3, [r3, #16]
 8003c7c:	431a      	orrs	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f000 f9a0 	bl	8003fcc <RTC_ExitInitMode>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	22ff      	movs	r2, #255	; 0xff
 8003c96:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003c98:	7cfb      	ldrb	r3, [r7, #19]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d103      	bne.n	8003ca6 <HAL_RTC_SetTime+0x128>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003cae:	7cfb      	ldrb	r3, [r7, #19]
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	371c      	adds	r7, #28
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd90      	pop	{r4, r7, pc}

08003cb8 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	691b      	ldr	r3, [r3, #16]
 8003cd4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003ce6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8003cea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	0c1b      	lsrs	r3, r3, #16
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	0a1b      	lsrs	r3, r3, #8
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d06:	b2da      	uxtb	r2, r3
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	b2db      	uxtb	r3, r3
 8003d10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	0d9b      	lsrs	r3, r3, #22
 8003d1e:	b2db      	uxtb	r3, r3
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	b2da      	uxtb	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d11a      	bne.n	8003d66 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	4618      	mov	r0, r3
 8003d36:	f000 f9a7 	bl	8004088 <RTC_Bcd2ToByte>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	461a      	mov	r2, r3
 8003d3e:	68bb      	ldr	r3, [r7, #8]
 8003d40:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	785b      	ldrb	r3, [r3, #1]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f000 f99e 	bl	8004088 <RTC_Bcd2ToByte>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	461a      	mov	r2, r3
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	789b      	ldrb	r3, [r3, #2]
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f000 f995 	bl	8004088 <RTC_Bcd2ToByte>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	461a      	mov	r2, r3
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003d66:	2300      	movs	r3, #0
}
 8003d68:	4618      	mov	r0, r3
 8003d6a:	3718      	adds	r7, #24
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003d70:	b590      	push	{r4, r7, lr}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d101      	bne.n	8003d8a <HAL_RTC_SetDate+0x1a>
 8003d86:	2302      	movs	r3, #2
 8003d88:	e075      	b.n	8003e76 <HAL_RTC_SetDate+0x106>
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2202      	movs	r2, #2
 8003d96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d10e      	bne.n	8003dbe <HAL_RTC_SetDate+0x4e>
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	785b      	ldrb	r3, [r3, #1]
 8003da4:	f003 0310 	and.w	r3, r3, #16
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d008      	beq.n	8003dbe <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	785b      	ldrb	r3, [r3, #1]
 8003db0:	f023 0310 	bic.w	r3, r3, #16
 8003db4:	b2db      	uxtb	r3, r3
 8003db6:	330a      	adds	r3, #10
 8003db8:	b2da      	uxtb	r2, r3
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d11c      	bne.n	8003dfe <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	78db      	ldrb	r3, [r3, #3]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f000 f93d 	bl	8004048 <RTC_ByteToBcd2>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	785b      	ldrb	r3, [r3, #1]
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 f936 	bl	8004048 <RTC_ByteToBcd2>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003de0:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date) << RTC_DR_DU_Pos) | \
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	789b      	ldrb	r3, [r3, #2]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f000 f92e 	bl	8004048 <RTC_ByteToBcd2>
 8003dec:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8003dee:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << RTC_DR_YU_Pos) | \
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	617b      	str	r3, [r7, #20]
 8003dfc:	e00e      	b.n	8003e1c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	78db      	ldrb	r3, [r3, #3]
 8003e02:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	785b      	ldrb	r3, [r3, #1]
 8003e08:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003e0a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8003e0c:	68ba      	ldr	r2, [r7, #8]
 8003e0e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8003e10:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	22ca      	movs	r2, #202	; 0xca
 8003e22:	625a      	str	r2, [r3, #36]	; 0x24
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2253      	movs	r2, #83	; 0x53
 8003e2a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003e2c:	68f8      	ldr	r0, [r7, #12]
 8003e2e:	f000 f899 	bl	8003f64 <RTC_EnterInitMode>
 8003e32:	4603      	mov	r3, r0
 8003e34:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 8003e36:	7cfb      	ldrb	r3, [r7, #19]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10c      	bne.n	8003e56 <HAL_RTC_SetDate+0xe6>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e46:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003e4a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 f8bd 	bl	8003fcc <RTC_ExitInitMode>
 8003e52:	4603      	mov	r3, r0
 8003e54:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	22ff      	movs	r2, #255	; 0xff
 8003e5c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8003e5e:	7cfb      	ldrb	r3, [r7, #19]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d103      	bne.n	8003e6c <HAL_RTC_SetDate+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY ;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 8003e74:	7cfb      	ldrb	r3, [r7, #19]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	371c      	adds	r7, #28
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd90      	pop	{r4, r7, pc}

08003e7e <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	b086      	sub	sp, #24
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	60b9      	str	r1, [r7, #8]
 8003e88:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003e94:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003e98:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	0c1b      	lsrs	r3, r3, #16
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	0a1b      	lsrs	r3, r3, #8
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	f003 031f 	and.w	r3, r3, #31
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ebc:	b2da      	uxtb	r2, r3
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	0b5b      	lsrs	r3, r3, #13
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	f003 0307 	and.w	r3, r3, #7
 8003ecc:	b2da      	uxtb	r2, r3
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d11a      	bne.n	8003f0e <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	78db      	ldrb	r3, [r3, #3]
 8003edc:	4618      	mov	r0, r3
 8003ede:	f000 f8d3 	bl	8004088 <RTC_Bcd2ToByte>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	785b      	ldrb	r3, [r3, #1]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f000 f8ca 	bl	8004088 <RTC_Bcd2ToByte>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	789b      	ldrb	r3, [r3, #2]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f000 f8c1 	bl	8004088 <RTC_Bcd2ToByte>
 8003f06:	4603      	mov	r3, r0
 8003f08:	461a      	mov	r2, r3
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f2e:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8003f30:	f7fd ff1c 	bl	8001d6c <HAL_GetTick>
 8003f34:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f36:	e009      	b.n	8003f4c <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003f38:	f7fd ff18 	bl	8001d6c <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f46:	d901      	bls.n	8003f4c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e007      	b.n	8003f5c <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0ee      	beq.n	8003f38 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8003f5a:	2300      	movs	r3, #0
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d120      	bne.n	8003fc0 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f04f 32ff 	mov.w	r2, #4294967295
 8003f86:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8003f88:	f7fd fef0 	bl	8001d6c <HAL_GetTick>
 8003f8c:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003f8e:	e00d      	b.n	8003fac <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8003f90:	f7fd feec 	bl	8001d6c <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003f9e:	d905      	bls.n	8003fac <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2203      	movs	r2, #3
 8003fa8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d102      	bne.n	8003fc0 <RTC_EnterInitMode+0x5c>
 8003fba:	7bfb      	ldrb	r3, [r7, #15]
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	d1e7      	bne.n	8003f90 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}
	...

08003fcc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8003fd8:	4b1a      	ldr	r3, [pc, #104]	; (8004044 <RTC_ExitInitMode+0x78>)
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	4a19      	ldr	r2, [pc, #100]	; (8004044 <RTC_ExitInitMode+0x78>)
 8003fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fe2:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003fe4:	4b17      	ldr	r3, [pc, #92]	; (8004044 <RTC_ExitInitMode+0x78>)
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d10c      	bne.n	800400a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7ff ff91 	bl	8003f18 <HAL_RTC_WaitForSynchro>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d01e      	beq.n	800403a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2203      	movs	r2, #3
 8004000:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	73fb      	strb	r3, [r7, #15]
 8004008:	e017      	b.n	800403a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800400a:	4b0e      	ldr	r3, [pc, #56]	; (8004044 <RTC_ExitInitMode+0x78>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	4a0d      	ldr	r2, [pc, #52]	; (8004044 <RTC_ExitInitMode+0x78>)
 8004010:	f023 0320 	bic.w	r3, r3, #32
 8004014:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff ff7e 	bl	8003f18 <HAL_RTC_WaitForSynchro>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d005      	beq.n	800402e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2203      	movs	r2, #3
 8004026:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800402e:	4b05      	ldr	r3, [pc, #20]	; (8004044 <RTC_ExitInitMode+0x78>)
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	4a04      	ldr	r2, [pc, #16]	; (8004044 <RTC_ExitInitMode+0x78>)
 8004034:	f043 0320 	orr.w	r3, r3, #32
 8004038:	6093      	str	r3, [r2, #8]
  }

  return status;
 800403a:	7bfb      	ldrb	r3, [r7, #15]
}
 800403c:	4618      	mov	r0, r3
 800403e:	3710      	adds	r7, #16
 8004040:	46bd      	mov	sp, r7
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40002800 	.word	0x40002800

08004048 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	4603      	mov	r3, r0
 8004050:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004052:	2300      	movs	r3, #0
 8004054:	60fb      	str	r3, [r7, #12]
  uint8_t temp = Value;
 8004056:	79fb      	ldrb	r3, [r7, #7]
 8004058:	72fb      	strb	r3, [r7, #11]

  while (temp >= 10U)
 800405a:	e005      	b.n	8004068 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	3301      	adds	r3, #1
 8004060:	60fb      	str	r3, [r7, #12]
    temp -= 10U;
 8004062:	7afb      	ldrb	r3, [r7, #11]
 8004064:	3b0a      	subs	r3, #10
 8004066:	72fb      	strb	r3, [r7, #11]
  while (temp >= 10U)
 8004068:	7afb      	ldrb	r3, [r7, #11]
 800406a:	2b09      	cmp	r3, #9
 800406c:	d8f6      	bhi.n	800405c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | temp);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	b2db      	uxtb	r3, r3
 8004072:	011b      	lsls	r3, r3, #4
 8004074:	b2da      	uxtb	r2, r3
 8004076:	7afb      	ldrb	r3, [r7, #11]
 8004078:	4313      	orrs	r3, r2
 800407a:	b2db      	uxtb	r3, r3
}
 800407c:	4618      	mov	r0, r3
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 8004092:	79fb      	ldrb	r3, [r7, #7]
 8004094:	091b      	lsrs	r3, r3, #4
 8004096:	b2db      	uxtb	r3, r3
 8004098:	461a      	mov	r2, r3
 800409a:	0092      	lsls	r2, r2, #2
 800409c:	4413      	add	r3, r2
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 80040a2:	79fb      	ldrb	r3, [r7, #7]
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	b2da      	uxtb	r2, r3
 80040aa:	7bfb      	ldrb	r3, [r7, #15]
 80040ac:	4413      	add	r3, r2
 80040ae:	b2db      	uxtb	r3, r3
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	e095      	b.n	80041fa <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d108      	bne.n	80040e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040de:	d009      	beq.n	80040f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	61da      	str	r2, [r3, #28]
 80040e6:	e005      	b.n	80040f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2200      	movs	r2, #0
 80040f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	d106      	bne.n	8004114 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2200      	movs	r2, #0
 800410a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f7fd fa8c 	bl	800162c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800412a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004134:	d902      	bls.n	800413c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004136:	2300      	movs	r3, #0
 8004138:	60fb      	str	r3, [r7, #12]
 800413a:	e002      	b.n	8004142 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800413c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004140:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800414a:	d007      	beq.n	800415c <HAL_SPI_Init+0xa0>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004154:	d002      	beq.n	800415c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2200      	movs	r2, #0
 800415a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800416c:	431a      	orrs	r2, r3
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	431a      	orrs	r2, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	695b      	ldr	r3, [r3, #20]
 800417c:	f003 0301 	and.w	r3, r3, #1
 8004180:	431a      	orrs	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800418a:	431a      	orrs	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	69db      	ldr	r3, [r3, #28]
 8004190:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004194:	431a      	orrs	r2, r3
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800419e:	ea42 0103 	orr.w	r1, r2, r3
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	430a      	orrs	r2, r1
 80041b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	0c1b      	lsrs	r3, r3, #16
 80041b8:	f003 0204 	and.w	r2, r3, #4
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041ca:	f003 0308 	and.w	r3, r3, #8
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	68db      	ldr	r3, [r3, #12]
 80041d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80041d8:	ea42 0103 	orr.w	r1, r2, r3
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	2201      	movs	r2, #1
 80041f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80041f8:	2300      	movs	r3, #0
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3710      	adds	r7, #16
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b088      	sub	sp, #32
 8004206:	af00      	add	r7, sp, #0
 8004208:	60f8      	str	r0, [r7, #12]
 800420a:	60b9      	str	r1, [r7, #8]
 800420c:	603b      	str	r3, [r7, #0]
 800420e:	4613      	mov	r3, r2
 8004210:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004212:	2300      	movs	r3, #0
 8004214:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800421c:	2b01      	cmp	r3, #1
 800421e:	d101      	bne.n	8004224 <HAL_SPI_Transmit+0x22>
 8004220:	2302      	movs	r3, #2
 8004222:	e158      	b.n	80044d6 <HAL_SPI_Transmit+0x2d4>
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2201      	movs	r2, #1
 8004228:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800422c:	f7fd fd9e 	bl	8001d6c <HAL_GetTick>
 8004230:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004232:	88fb      	ldrh	r3, [r7, #6]
 8004234:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800423c:	b2db      	uxtb	r3, r3
 800423e:	2b01      	cmp	r3, #1
 8004240:	d002      	beq.n	8004248 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004242:	2302      	movs	r3, #2
 8004244:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004246:	e13d      	b.n	80044c4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d002      	beq.n	8004254 <HAL_SPI_Transmit+0x52>
 800424e:	88fb      	ldrh	r3, [r7, #6]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d102      	bne.n	800425a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004258:	e134      	b.n	80044c4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2203      	movs	r2, #3
 800425e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2200      	movs	r2, #0
 8004266:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	88fa      	ldrh	r2, [r7, #6]
 8004272:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	88fa      	ldrh	r2, [r7, #6]
 8004278:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2200      	movs	r2, #0
 8004284:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2200      	movs	r2, #0
 800428c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a4:	d10f      	bne.n	80042c6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042b4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042c4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d0:	2b40      	cmp	r3, #64	; 0x40
 80042d2:	d007      	beq.n	80042e4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80042e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042ec:	d94b      	bls.n	8004386 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d002      	beq.n	80042fc <HAL_SPI_Transmit+0xfa>
 80042f6:	8afb      	ldrh	r3, [r7, #22]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d13e      	bne.n	800437a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004300:	881a      	ldrh	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430c:	1c9a      	adds	r2, r3, #2
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004316:	b29b      	uxth	r3, r3
 8004318:	3b01      	subs	r3, #1
 800431a:	b29a      	uxth	r2, r3
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004320:	e02b      	b.n	800437a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b02      	cmp	r3, #2
 800432e:	d112      	bne.n	8004356 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004334:	881a      	ldrh	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004340:	1c9a      	adds	r2, r3, #2
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800434a:	b29b      	uxth	r3, r3
 800434c:	3b01      	subs	r3, #1
 800434e:	b29a      	uxth	r2, r3
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004354:	e011      	b.n	800437a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004356:	f7fd fd09 	bl	8001d6c <HAL_GetTick>
 800435a:	4602      	mov	r2, r0
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	683a      	ldr	r2, [r7, #0]
 8004362:	429a      	cmp	r2, r3
 8004364:	d803      	bhi.n	800436e <HAL_SPI_Transmit+0x16c>
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800436c:	d102      	bne.n	8004374 <HAL_SPI_Transmit+0x172>
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d102      	bne.n	800437a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004378:	e0a4      	b.n	80044c4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d1ce      	bne.n	8004322 <HAL_SPI_Transmit+0x120>
 8004384:	e07c      	b.n	8004480 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d002      	beq.n	8004394 <HAL_SPI_Transmit+0x192>
 800438e:	8afb      	ldrh	r3, [r7, #22]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d170      	bne.n	8004476 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b01      	cmp	r3, #1
 800439c:	d912      	bls.n	80043c4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043a2:	881a      	ldrh	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	1c9a      	adds	r2, r3, #2
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	3b02      	subs	r3, #2
 80043bc:	b29a      	uxth	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80043c2:	e058      	b.n	8004476 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	330c      	adds	r3, #12
 80043ce:	7812      	ldrb	r2, [r2, #0]
 80043d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d6:	1c5a      	adds	r2, r3, #1
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	3b01      	subs	r3, #1
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80043ea:	e044      	b.n	8004476 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	f003 0302 	and.w	r3, r3, #2
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d12b      	bne.n	8004452 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043fe:	b29b      	uxth	r3, r3
 8004400:	2b01      	cmp	r3, #1
 8004402:	d912      	bls.n	800442a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004408:	881a      	ldrh	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004414:	1c9a      	adds	r2, r3, #2
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800441e:	b29b      	uxth	r3, r3
 8004420:	3b02      	subs	r3, #2
 8004422:	b29a      	uxth	r2, r3
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004428:	e025      	b.n	8004476 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	330c      	adds	r3, #12
 8004434:	7812      	ldrb	r2, [r2, #0]
 8004436:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004450:	e011      	b.n	8004476 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004452:	f7fd fc8b 	bl	8001d6c <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	429a      	cmp	r2, r3
 8004460:	d803      	bhi.n	800446a <HAL_SPI_Transmit+0x268>
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004468:	d102      	bne.n	8004470 <HAL_SPI_Transmit+0x26e>
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d102      	bne.n	8004476 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004470:	2303      	movs	r3, #3
 8004472:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004474:	e026      	b.n	80044c4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800447a:	b29b      	uxth	r3, r3
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1b5      	bne.n	80043ec <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004480:	69ba      	ldr	r2, [r7, #24]
 8004482:	6839      	ldr	r1, [r7, #0]
 8004484:	68f8      	ldr	r0, [r7, #12]
 8004486:	f000 f949 	bl	800471c <SPI_EndRxTxTransaction>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d002      	beq.n	8004496 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2220      	movs	r2, #32
 8004494:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d10a      	bne.n	80044b4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800449e:	2300      	movs	r3, #0
 80044a0:	613b      	str	r3, [r7, #16]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	613b      	str	r3, [r7, #16]
 80044b2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d002      	beq.n	80044c2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	77fb      	strb	r3, [r7, #31]
 80044c0:	e000      	b.n	80044c4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80044c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80044d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80044d6:	4618      	mov	r0, r3
 80044d8:	3720      	adds	r7, #32
 80044da:	46bd      	mov	sp, r7
 80044dc:	bd80      	pop	{r7, pc}
	...

080044e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b088      	sub	sp, #32
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	4613      	mov	r3, r2
 80044ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044f0:	f7fd fc3c 	bl	8001d6c <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f8:	1a9b      	subs	r3, r3, r2
 80044fa:	683a      	ldr	r2, [r7, #0]
 80044fc:	4413      	add	r3, r2
 80044fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004500:	f7fd fc34 	bl	8001d6c <HAL_GetTick>
 8004504:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004506:	4b39      	ldr	r3, [pc, #228]	; (80045ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	015b      	lsls	r3, r3, #5
 800450c:	0d1b      	lsrs	r3, r3, #20
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	fb02 f303 	mul.w	r3, r2, r3
 8004514:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004516:	e054      	b.n	80045c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451e:	d050      	beq.n	80045c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004520:	f7fd fc24 	bl	8001d6c <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	69fa      	ldr	r2, [r7, #28]
 800452c:	429a      	cmp	r2, r3
 800452e:	d902      	bls.n	8004536 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d13d      	bne.n	80045b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004544:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800454e:	d111      	bne.n	8004574 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004558:	d004      	beq.n	8004564 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004562:	d107      	bne.n	8004574 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004572:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800457c:	d10f      	bne.n	800459e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	681a      	ldr	r2, [r3, #0]
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800459c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e017      	b.n	80045e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	3b01      	subs	r3, #1
 80045c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689a      	ldr	r2, [r3, #8]
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	4013      	ands	r3, r2
 80045cc:	68ba      	ldr	r2, [r7, #8]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	bf0c      	ite	eq
 80045d2:	2301      	moveq	r3, #1
 80045d4:	2300      	movne	r3, #0
 80045d6:	b2db      	uxtb	r3, r3
 80045d8:	461a      	mov	r2, r3
 80045da:	79fb      	ldrb	r3, [r7, #7]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d19b      	bne.n	8004518 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3720      	adds	r7, #32
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	20000010 	.word	0x20000010

080045f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08a      	sub	sp, #40	; 0x28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80045fe:	2300      	movs	r3, #0
 8004600:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004602:	f7fd fbb3 	bl	8001d6c <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800460a:	1a9b      	subs	r3, r3, r2
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	4413      	add	r3, r2
 8004610:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004612:	f7fd fbab 	bl	8001d6c <HAL_GetTick>
 8004616:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	330c      	adds	r3, #12
 800461e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004620:	4b3d      	ldr	r3, [pc, #244]	; (8004718 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	4613      	mov	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4413      	add	r3, r2
 800462a:	00da      	lsls	r2, r3, #3
 800462c:	1ad3      	subs	r3, r2, r3
 800462e:	0d1b      	lsrs	r3, r3, #20
 8004630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004632:	fb02 f303 	mul.w	r3, r2, r3
 8004636:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004638:	e060      	b.n	80046fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004640:	d107      	bne.n	8004652 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d104      	bne.n	8004652 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004650:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004658:	d050      	beq.n	80046fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800465a:	f7fd fb87 	bl	8001d6c <HAL_GetTick>
 800465e:	4602      	mov	r2, r0
 8004660:	6a3b      	ldr	r3, [r7, #32]
 8004662:	1ad3      	subs	r3, r2, r3
 8004664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004666:	429a      	cmp	r2, r3
 8004668:	d902      	bls.n	8004670 <SPI_WaitFifoStateUntilTimeout+0x80>
 800466a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466c:	2b00      	cmp	r3, #0
 800466e:	d13d      	bne.n	80046ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685a      	ldr	r2, [r3, #4]
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800467e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004688:	d111      	bne.n	80046ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004692:	d004      	beq.n	800469e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800469c:	d107      	bne.n	80046ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046b6:	d10f      	bne.n	80046d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80046c6:	601a      	str	r2, [r3, #0]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80046d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80046e8:	2303      	movs	r3, #3
 80046ea:	e010      	b.n	800470e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d101      	bne.n	80046f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80046f2:	2300      	movs	r3, #0
 80046f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	3b01      	subs	r3, #1
 80046fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	689a      	ldr	r2, [r3, #8]
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4013      	ands	r3, r2
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	429a      	cmp	r2, r3
 800470a:	d196      	bne.n	800463a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3728      	adds	r7, #40	; 0x28
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000010 	.word	0x20000010

0800471c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b086      	sub	sp, #24
 8004720:	af02      	add	r7, sp, #8
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	9300      	str	r3, [sp, #0]
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	2200      	movs	r2, #0
 8004730:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f7ff ff5b 	bl	80045f0 <SPI_WaitFifoStateUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d007      	beq.n	8004750 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004744:	f043 0220 	orr.w	r2, r3, #32
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e027      	b.n	80047a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	2200      	movs	r2, #0
 8004758:	2180      	movs	r1, #128	; 0x80
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f7ff fec0 	bl	80044e0 <SPI_WaitFlagStateUntilTimeout>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d007      	beq.n	8004776 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800476a:	f043 0220 	orr.w	r2, r3, #32
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e014      	b.n	80047a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	2200      	movs	r2, #0
 800477e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f7ff ff34 	bl	80045f0 <SPI_WaitFifoStateUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d007      	beq.n	800479e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004792:	f043 0220 	orr.w	r2, r3, #32
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e000      	b.n	80047a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e049      	b.n	800484e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c0:	b2db      	uxtb	r3, r3
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d106      	bne.n	80047d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7fd f8a6 	bl	8001920 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f000 fb7a 	bl	8004ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2201      	movs	r2, #1
 8004828:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2201      	movs	r2, #1
 8004840:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2201      	movs	r2, #1
 8004848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800484c:	2300      	movs	r3, #0
}
 800484e:	4618      	mov	r0, r3
 8004850:	3708      	adds	r7, #8
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b082      	sub	sp, #8
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d101      	bne.n	8004868 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e049      	b.n	80048fc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d106      	bne.n	8004882 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f000 f841 	bl	8004904 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2202      	movs	r2, #2
 8004886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	3304      	adds	r3, #4
 8004892:	4619      	mov	r1, r3
 8004894:	4610      	mov	r0, r2
 8004896:	f000 fb23 	bl	8004ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2201      	movs	r2, #1
 80048c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2201      	movs	r2, #1
 80048de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2201      	movs	r2, #1
 80048f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b084      	sub	sp, #16
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d109      	bne.n	800493c <HAL_TIM_PWM_Start+0x24>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	bf14      	ite	ne
 8004934:	2301      	movne	r3, #1
 8004936:	2300      	moveq	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	e03c      	b.n	80049b6 <HAL_TIM_PWM_Start+0x9e>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	2b04      	cmp	r3, #4
 8004940:	d109      	bne.n	8004956 <HAL_TIM_PWM_Start+0x3e>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004948:	b2db      	uxtb	r3, r3
 800494a:	2b01      	cmp	r3, #1
 800494c:	bf14      	ite	ne
 800494e:	2301      	movne	r3, #1
 8004950:	2300      	moveq	r3, #0
 8004952:	b2db      	uxtb	r3, r3
 8004954:	e02f      	b.n	80049b6 <HAL_TIM_PWM_Start+0x9e>
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b08      	cmp	r3, #8
 800495a:	d109      	bne.n	8004970 <HAL_TIM_PWM_Start+0x58>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004962:	b2db      	uxtb	r3, r3
 8004964:	2b01      	cmp	r3, #1
 8004966:	bf14      	ite	ne
 8004968:	2301      	movne	r3, #1
 800496a:	2300      	moveq	r3, #0
 800496c:	b2db      	uxtb	r3, r3
 800496e:	e022      	b.n	80049b6 <HAL_TIM_PWM_Start+0x9e>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2b0c      	cmp	r3, #12
 8004974:	d109      	bne.n	800498a <HAL_TIM_PWM_Start+0x72>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b01      	cmp	r3, #1
 8004980:	bf14      	ite	ne
 8004982:	2301      	movne	r3, #1
 8004984:	2300      	moveq	r3, #0
 8004986:	b2db      	uxtb	r3, r3
 8004988:	e015      	b.n	80049b6 <HAL_TIM_PWM_Start+0x9e>
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	2b10      	cmp	r3, #16
 800498e:	d109      	bne.n	80049a4 <HAL_TIM_PWM_Start+0x8c>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004996:	b2db      	uxtb	r3, r3
 8004998:	2b01      	cmp	r3, #1
 800499a:	bf14      	ite	ne
 800499c:	2301      	movne	r3, #1
 800499e:	2300      	moveq	r3, #0
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	e008      	b.n	80049b6 <HAL_TIM_PWM_Start+0x9e>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049aa:	b2db      	uxtb	r3, r3
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	bf14      	ite	ne
 80049b0:	2301      	movne	r3, #1
 80049b2:	2300      	moveq	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d001      	beq.n	80049be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e09c      	b.n	8004af8 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d104      	bne.n	80049ce <HAL_TIM_PWM_Start+0xb6>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049cc:	e023      	b.n	8004a16 <HAL_TIM_PWM_Start+0xfe>
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	2b04      	cmp	r3, #4
 80049d2:	d104      	bne.n	80049de <HAL_TIM_PWM_Start+0xc6>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2202      	movs	r2, #2
 80049d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049dc:	e01b      	b.n	8004a16 <HAL_TIM_PWM_Start+0xfe>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d104      	bne.n	80049ee <HAL_TIM_PWM_Start+0xd6>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049ec:	e013      	b.n	8004a16 <HAL_TIM_PWM_Start+0xfe>
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	2b0c      	cmp	r3, #12
 80049f2:	d104      	bne.n	80049fe <HAL_TIM_PWM_Start+0xe6>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2202      	movs	r2, #2
 80049f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049fc:	e00b      	b.n	8004a16 <HAL_TIM_PWM_Start+0xfe>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b10      	cmp	r3, #16
 8004a02:	d104      	bne.n	8004a0e <HAL_TIM_PWM_Start+0xf6>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a0c:	e003      	b.n	8004a16 <HAL_TIM_PWM_Start+0xfe>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2202      	movs	r2, #2
 8004a12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	6839      	ldr	r1, [r7, #0]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f000 fe68 	bl	80056f4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a35      	ldr	r2, [pc, #212]	; (8004b00 <HAL_TIM_PWM_Start+0x1e8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d013      	beq.n	8004a56 <HAL_TIM_PWM_Start+0x13e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a34      	ldr	r2, [pc, #208]	; (8004b04 <HAL_TIM_PWM_Start+0x1ec>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d00e      	beq.n	8004a56 <HAL_TIM_PWM_Start+0x13e>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a32      	ldr	r2, [pc, #200]	; (8004b08 <HAL_TIM_PWM_Start+0x1f0>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d009      	beq.n	8004a56 <HAL_TIM_PWM_Start+0x13e>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a31      	ldr	r2, [pc, #196]	; (8004b0c <HAL_TIM_PWM_Start+0x1f4>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d004      	beq.n	8004a56 <HAL_TIM_PWM_Start+0x13e>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a2f      	ldr	r2, [pc, #188]	; (8004b10 <HAL_TIM_PWM_Start+0x1f8>)
 8004a52:	4293      	cmp	r3, r2
 8004a54:	d101      	bne.n	8004a5a <HAL_TIM_PWM_Start+0x142>
 8004a56:	2301      	movs	r3, #1
 8004a58:	e000      	b.n	8004a5c <HAL_TIM_PWM_Start+0x144>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d007      	beq.n	8004a70 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a6e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a22      	ldr	r2, [pc, #136]	; (8004b00 <HAL_TIM_PWM_Start+0x1e8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d01d      	beq.n	8004ab6 <HAL_TIM_PWM_Start+0x19e>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a82:	d018      	beq.n	8004ab6 <HAL_TIM_PWM_Start+0x19e>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a22      	ldr	r2, [pc, #136]	; (8004b14 <HAL_TIM_PWM_Start+0x1fc>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d013      	beq.n	8004ab6 <HAL_TIM_PWM_Start+0x19e>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	4a21      	ldr	r2, [pc, #132]	; (8004b18 <HAL_TIM_PWM_Start+0x200>)
 8004a94:	4293      	cmp	r3, r2
 8004a96:	d00e      	beq.n	8004ab6 <HAL_TIM_PWM_Start+0x19e>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a1f      	ldr	r2, [pc, #124]	; (8004b1c <HAL_TIM_PWM_Start+0x204>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d009      	beq.n	8004ab6 <HAL_TIM_PWM_Start+0x19e>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a17      	ldr	r2, [pc, #92]	; (8004b04 <HAL_TIM_PWM_Start+0x1ec>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d004      	beq.n	8004ab6 <HAL_TIM_PWM_Start+0x19e>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a15      	ldr	r2, [pc, #84]	; (8004b08 <HAL_TIM_PWM_Start+0x1f0>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d115      	bne.n	8004ae2 <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	4b18      	ldr	r3, [pc, #96]	; (8004b20 <HAL_TIM_PWM_Start+0x208>)
 8004abe:	4013      	ands	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2b06      	cmp	r3, #6
 8004ac6:	d015      	beq.n	8004af4 <HAL_TIM_PWM_Start+0x1dc>
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ace:	d011      	beq.n	8004af4 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f042 0201 	orr.w	r2, r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae0:	e008      	b.n	8004af4 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	681a      	ldr	r2, [r3, #0]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f042 0201 	orr.w	r2, r2, #1
 8004af0:	601a      	str	r2, [r3, #0]
 8004af2:	e000      	b.n	8004af6 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004af4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004af6:	2300      	movs	r3, #0
}
 8004af8:	4618      	mov	r0, r3
 8004afa:	3710      	adds	r7, #16
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40012c00 	.word	0x40012c00
 8004b04:	40013400 	.word	0x40013400
 8004b08:	40014000 	.word	0x40014000
 8004b0c:	40014400 	.word	0x40014400
 8004b10:	40014800 	.word	0x40014800
 8004b14:	40000400 	.word	0x40000400
 8004b18:	40000800 	.word	0x40000800
 8004b1c:	40000c00 	.word	0x40000c00
 8004b20:	00010007 	.word	0x00010007

08004b24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	60f8      	str	r0, [r7, #12]
 8004b2c:	60b9      	str	r1, [r7, #8]
 8004b2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b30:	2300      	movs	r3, #0
 8004b32:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d101      	bne.n	8004b42 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b3e:	2302      	movs	r3, #2
 8004b40:	e0ff      	b.n	8004d42 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2b14      	cmp	r3, #20
 8004b4e:	f200 80f0 	bhi.w	8004d32 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b52:	a201      	add	r2, pc, #4	; (adr r2, 8004b58 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b58:	08004bad 	.word	0x08004bad
 8004b5c:	08004d33 	.word	0x08004d33
 8004b60:	08004d33 	.word	0x08004d33
 8004b64:	08004d33 	.word	0x08004d33
 8004b68:	08004bed 	.word	0x08004bed
 8004b6c:	08004d33 	.word	0x08004d33
 8004b70:	08004d33 	.word	0x08004d33
 8004b74:	08004d33 	.word	0x08004d33
 8004b78:	08004c2f 	.word	0x08004c2f
 8004b7c:	08004d33 	.word	0x08004d33
 8004b80:	08004d33 	.word	0x08004d33
 8004b84:	08004d33 	.word	0x08004d33
 8004b88:	08004c6f 	.word	0x08004c6f
 8004b8c:	08004d33 	.word	0x08004d33
 8004b90:	08004d33 	.word	0x08004d33
 8004b94:	08004d33 	.word	0x08004d33
 8004b98:	08004cb1 	.word	0x08004cb1
 8004b9c:	08004d33 	.word	0x08004d33
 8004ba0:	08004d33 	.word	0x08004d33
 8004ba4:	08004d33 	.word	0x08004d33
 8004ba8:	08004cf1 	.word	0x08004cf1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	68b9      	ldr	r1, [r7, #8]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 fa2e 	bl	8005014 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699a      	ldr	r2, [r3, #24]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0208 	orr.w	r2, r2, #8
 8004bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699a      	ldr	r2, [r3, #24]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f022 0204 	bic.w	r2, r2, #4
 8004bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	6999      	ldr	r1, [r3, #24]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	691a      	ldr	r2, [r3, #16]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	430a      	orrs	r2, r1
 8004be8:	619a      	str	r2, [r3, #24]
      break;
 8004bea:	e0a5      	b.n	8004d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 fa9e 	bl	8005134 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699a      	ldr	r2, [r3, #24]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	699a      	ldr	r2, [r3, #24]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6999      	ldr	r1, [r3, #24]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	021a      	lsls	r2, r3, #8
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	619a      	str	r2, [r3, #24]
      break;
 8004c2c:	e084      	b.n	8004d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	68b9      	ldr	r1, [r7, #8]
 8004c34:	4618      	mov	r0, r3
 8004c36:	f000 fb07 	bl	8005248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	69da      	ldr	r2, [r3, #28]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f042 0208 	orr.w	r2, r2, #8
 8004c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	69da      	ldr	r2, [r3, #28]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f022 0204 	bic.w	r2, r2, #4
 8004c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	69d9      	ldr	r1, [r3, #28]
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	691a      	ldr	r2, [r3, #16]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	61da      	str	r2, [r3, #28]
      break;
 8004c6c:	e064      	b.n	8004d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68b9      	ldr	r1, [r7, #8]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f000 fb6f 	bl	8005358 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	69d9      	ldr	r1, [r3, #28]
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	021a      	lsls	r2, r3, #8
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	430a      	orrs	r2, r1
 8004cac:	61da      	str	r2, [r3, #28]
      break;
 8004cae:	e043      	b.n	8004d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f000 fbb8 	bl	800542c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f042 0208 	orr.w	r2, r2, #8
 8004cca:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f022 0204 	bic.w	r2, r2, #4
 8004cda:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	691a      	ldr	r2, [r3, #16]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004cee:	e023      	b.n	8004d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	f000 fbfc 	bl	80054f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d0a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d1a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	691b      	ldr	r3, [r3, #16]
 8004d26:	021a      	lsls	r2, r3, #8
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	430a      	orrs	r2, r1
 8004d2e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004d30:	e002      	b.n	8004d38 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	75fb      	strb	r3, [r7, #23]
      break;
 8004d36:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d40:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop

08004d4c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b084      	sub	sp, #16
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d56:	2300      	movs	r3, #0
 8004d58:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d101      	bne.n	8004d68 <HAL_TIM_ConfigClockSource+0x1c>
 8004d64:	2302      	movs	r3, #2
 8004d66:	e0b6      	b.n	8004ed6 <HAL_TIM_ConfigClockSource+0x18a>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2202      	movs	r2, #2
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004da4:	d03e      	beq.n	8004e24 <HAL_TIM_ConfigClockSource+0xd8>
 8004da6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004daa:	f200 8087 	bhi.w	8004ebc <HAL_TIM_ConfigClockSource+0x170>
 8004dae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004db2:	f000 8086 	beq.w	8004ec2 <HAL_TIM_ConfigClockSource+0x176>
 8004db6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dba:	d87f      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x170>
 8004dbc:	2b70      	cmp	r3, #112	; 0x70
 8004dbe:	d01a      	beq.n	8004df6 <HAL_TIM_ConfigClockSource+0xaa>
 8004dc0:	2b70      	cmp	r3, #112	; 0x70
 8004dc2:	d87b      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x170>
 8004dc4:	2b60      	cmp	r3, #96	; 0x60
 8004dc6:	d050      	beq.n	8004e6a <HAL_TIM_ConfigClockSource+0x11e>
 8004dc8:	2b60      	cmp	r3, #96	; 0x60
 8004dca:	d877      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x170>
 8004dcc:	2b50      	cmp	r3, #80	; 0x50
 8004dce:	d03c      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0xfe>
 8004dd0:	2b50      	cmp	r3, #80	; 0x50
 8004dd2:	d873      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x170>
 8004dd4:	2b40      	cmp	r3, #64	; 0x40
 8004dd6:	d058      	beq.n	8004e8a <HAL_TIM_ConfigClockSource+0x13e>
 8004dd8:	2b40      	cmp	r3, #64	; 0x40
 8004dda:	d86f      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x170>
 8004ddc:	2b30      	cmp	r3, #48	; 0x30
 8004dde:	d064      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x15e>
 8004de0:	2b30      	cmp	r3, #48	; 0x30
 8004de2:	d86b      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x170>
 8004de4:	2b20      	cmp	r3, #32
 8004de6:	d060      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x15e>
 8004de8:	2b20      	cmp	r3, #32
 8004dea:	d867      	bhi.n	8004ebc <HAL_TIM_ConfigClockSource+0x170>
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d05c      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x15e>
 8004df0:	2b10      	cmp	r3, #16
 8004df2:	d05a      	beq.n	8004eaa <HAL_TIM_ConfigClockSource+0x15e>
 8004df4:	e062      	b.n	8004ebc <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6818      	ldr	r0, [r3, #0]
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	6899      	ldr	r1, [r3, #8]
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	f000 fc55 	bl	80056b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68ba      	ldr	r2, [r7, #8]
 8004e20:	609a      	str	r2, [r3, #8]
      break;
 8004e22:	e04f      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6818      	ldr	r0, [r3, #0]
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	6899      	ldr	r1, [r3, #8]
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	f000 fc3e 	bl	80056b4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e46:	609a      	str	r2, [r3, #8]
      break;
 8004e48:	e03c      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6818      	ldr	r0, [r3, #0]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	6859      	ldr	r1, [r3, #4]
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	461a      	mov	r2, r3
 8004e58:	f000 fbb2 	bl	80055c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2150      	movs	r1, #80	; 0x50
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 fc0b 	bl	800567e <TIM_ITRx_SetConfig>
      break;
 8004e68:	e02c      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6818      	ldr	r0, [r3, #0]
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	6859      	ldr	r1, [r3, #4]
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	461a      	mov	r2, r3
 8004e78:	f000 fbd1 	bl	800561e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2160      	movs	r1, #96	; 0x60
 8004e82:	4618      	mov	r0, r3
 8004e84:	f000 fbfb 	bl	800567e <TIM_ITRx_SetConfig>
      break;
 8004e88:	e01c      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6859      	ldr	r1, [r3, #4]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	461a      	mov	r2, r3
 8004e98:	f000 fb92 	bl	80055c0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2140      	movs	r1, #64	; 0x40
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fbeb 	bl	800567e <TIM_ITRx_SetConfig>
      break;
 8004ea8:	e00c      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681a      	ldr	r2, [r3, #0]
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	4610      	mov	r0, r2
 8004eb6:	f000 fbe2 	bl	800567e <TIM_ITRx_SetConfig>
      break;
 8004eba:	e003      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	73fb      	strb	r3, [r7, #15]
      break;
 8004ec0:	e000      	b.n	8004ec4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004ec2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a40      	ldr	r2, [pc, #256]	; (8004ff4 <TIM_Base_SetConfig+0x114>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d013      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efe:	d00f      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a3d      	ldr	r2, [pc, #244]	; (8004ff8 <TIM_Base_SetConfig+0x118>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00b      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a3c      	ldr	r2, [pc, #240]	; (8004ffc <TIM_Base_SetConfig+0x11c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d007      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a3b      	ldr	r2, [pc, #236]	; (8005000 <TIM_Base_SetConfig+0x120>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d003      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a3a      	ldr	r2, [pc, #232]	; (8005004 <TIM_Base_SetConfig+0x124>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d108      	bne.n	8004f32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a2f      	ldr	r2, [pc, #188]	; (8004ff4 <TIM_Base_SetConfig+0x114>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d01f      	beq.n	8004f7a <TIM_Base_SetConfig+0x9a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f40:	d01b      	beq.n	8004f7a <TIM_Base_SetConfig+0x9a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a2c      	ldr	r2, [pc, #176]	; (8004ff8 <TIM_Base_SetConfig+0x118>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d017      	beq.n	8004f7a <TIM_Base_SetConfig+0x9a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a2b      	ldr	r2, [pc, #172]	; (8004ffc <TIM_Base_SetConfig+0x11c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d013      	beq.n	8004f7a <TIM_Base_SetConfig+0x9a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a2a      	ldr	r2, [pc, #168]	; (8005000 <TIM_Base_SetConfig+0x120>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00f      	beq.n	8004f7a <TIM_Base_SetConfig+0x9a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a29      	ldr	r2, [pc, #164]	; (8005004 <TIM_Base_SetConfig+0x124>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00b      	beq.n	8004f7a <TIM_Base_SetConfig+0x9a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a28      	ldr	r2, [pc, #160]	; (8005008 <TIM_Base_SetConfig+0x128>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d007      	beq.n	8004f7a <TIM_Base_SetConfig+0x9a>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a27      	ldr	r2, [pc, #156]	; (800500c <TIM_Base_SetConfig+0x12c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d003      	beq.n	8004f7a <TIM_Base_SetConfig+0x9a>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a26      	ldr	r2, [pc, #152]	; (8005010 <TIM_Base_SetConfig+0x130>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d108      	bne.n	8004f8c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	695b      	ldr	r3, [r3, #20]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	68fa      	ldr	r2, [r7, #12]
 8004f9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	689a      	ldr	r2, [r3, #8]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a10      	ldr	r2, [pc, #64]	; (8004ff4 <TIM_Base_SetConfig+0x114>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d00f      	beq.n	8004fd8 <TIM_Base_SetConfig+0xf8>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a12      	ldr	r2, [pc, #72]	; (8005004 <TIM_Base_SetConfig+0x124>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d00b      	beq.n	8004fd8 <TIM_Base_SetConfig+0xf8>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a11      	ldr	r2, [pc, #68]	; (8005008 <TIM_Base_SetConfig+0x128>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d007      	beq.n	8004fd8 <TIM_Base_SetConfig+0xf8>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a10      	ldr	r2, [pc, #64]	; (800500c <TIM_Base_SetConfig+0x12c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d003      	beq.n	8004fd8 <TIM_Base_SetConfig+0xf8>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a0f      	ldr	r2, [pc, #60]	; (8005010 <TIM_Base_SetConfig+0x130>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d103      	bne.n	8004fe0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	615a      	str	r2, [r3, #20]
}
 8004fe6:	bf00      	nop
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	40012c00 	.word	0x40012c00
 8004ff8:	40000400 	.word	0x40000400
 8004ffc:	40000800 	.word	0x40000800
 8005000:	40000c00 	.word	0x40000c00
 8005004:	40013400 	.word	0x40013400
 8005008:	40014000 	.word	0x40014000
 800500c:	40014400 	.word	0x40014400
 8005010:	40014800 	.word	0x40014800

08005014 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	6a1b      	ldr	r3, [r3, #32]
 8005022:	f023 0201 	bic.w	r2, r3, #1
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	699b      	ldr	r3, [r3, #24]
 800503a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005046:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 0303 	bic.w	r3, r3, #3
 800504e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	68fa      	ldr	r2, [r7, #12]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f023 0302 	bic.w	r3, r3, #2
 8005060:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005062:	683b      	ldr	r3, [r7, #0]
 8005064:	689b      	ldr	r3, [r3, #8]
 8005066:	697a      	ldr	r2, [r7, #20]
 8005068:	4313      	orrs	r3, r2
 800506a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a2c      	ldr	r2, [pc, #176]	; (8005120 <TIM_OC1_SetConfig+0x10c>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d00f      	beq.n	8005094 <TIM_OC1_SetConfig+0x80>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a2b      	ldr	r2, [pc, #172]	; (8005124 <TIM_OC1_SetConfig+0x110>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d00b      	beq.n	8005094 <TIM_OC1_SetConfig+0x80>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a2a      	ldr	r2, [pc, #168]	; (8005128 <TIM_OC1_SetConfig+0x114>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d007      	beq.n	8005094 <TIM_OC1_SetConfig+0x80>
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a29      	ldr	r2, [pc, #164]	; (800512c <TIM_OC1_SetConfig+0x118>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d003      	beq.n	8005094 <TIM_OC1_SetConfig+0x80>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	4a28      	ldr	r2, [pc, #160]	; (8005130 <TIM_OC1_SetConfig+0x11c>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d10c      	bne.n	80050ae <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005094:	697b      	ldr	r3, [r7, #20]
 8005096:	f023 0308 	bic.w	r3, r3, #8
 800509a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	697a      	ldr	r2, [r7, #20]
 80050a2:	4313      	orrs	r3, r2
 80050a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	f023 0304 	bic.w	r3, r3, #4
 80050ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a1b      	ldr	r2, [pc, #108]	; (8005120 <TIM_OC1_SetConfig+0x10c>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d00f      	beq.n	80050d6 <TIM_OC1_SetConfig+0xc2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a1a      	ldr	r2, [pc, #104]	; (8005124 <TIM_OC1_SetConfig+0x110>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d00b      	beq.n	80050d6 <TIM_OC1_SetConfig+0xc2>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a19      	ldr	r2, [pc, #100]	; (8005128 <TIM_OC1_SetConfig+0x114>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d007      	beq.n	80050d6 <TIM_OC1_SetConfig+0xc2>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	4a18      	ldr	r2, [pc, #96]	; (800512c <TIM_OC1_SetConfig+0x118>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d003      	beq.n	80050d6 <TIM_OC1_SetConfig+0xc2>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	4a17      	ldr	r2, [pc, #92]	; (8005130 <TIM_OC1_SetConfig+0x11c>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d111      	bne.n	80050fa <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	695b      	ldr	r3, [r3, #20]
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	693a      	ldr	r2, [r7, #16]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	68fa      	ldr	r2, [r7, #12]
 8005104:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	685a      	ldr	r2, [r3, #4]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	621a      	str	r2, [r3, #32]
}
 8005114:	bf00      	nop
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	40012c00 	.word	0x40012c00
 8005124:	40013400 	.word	0x40013400
 8005128:	40014000 	.word	0x40014000
 800512c:	40014400 	.word	0x40014400
 8005130:	40014800 	.word	0x40014800

08005134 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005134:	b480      	push	{r7}
 8005136:	b087      	sub	sp, #28
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f023 0210 	bic.w	r2, r3, #16
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005162:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005166:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800516e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	021b      	lsls	r3, r3, #8
 8005176:	68fa      	ldr	r2, [r7, #12]
 8005178:	4313      	orrs	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f023 0320 	bic.w	r3, r3, #32
 8005182:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005184:	683b      	ldr	r3, [r7, #0]
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	011b      	lsls	r3, r3, #4
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	4313      	orrs	r3, r2
 800518e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a28      	ldr	r2, [pc, #160]	; (8005234 <TIM_OC2_SetConfig+0x100>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d003      	beq.n	80051a0 <TIM_OC2_SetConfig+0x6c>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a27      	ldr	r2, [pc, #156]	; (8005238 <TIM_OC2_SetConfig+0x104>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d10d      	bne.n	80051bc <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051ba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a1d      	ldr	r2, [pc, #116]	; (8005234 <TIM_OC2_SetConfig+0x100>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d00f      	beq.n	80051e4 <TIM_OC2_SetConfig+0xb0>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a1c      	ldr	r2, [pc, #112]	; (8005238 <TIM_OC2_SetConfig+0x104>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00b      	beq.n	80051e4 <TIM_OC2_SetConfig+0xb0>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	4a1b      	ldr	r2, [pc, #108]	; (800523c <TIM_OC2_SetConfig+0x108>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d007      	beq.n	80051e4 <TIM_OC2_SetConfig+0xb0>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a1a      	ldr	r2, [pc, #104]	; (8005240 <TIM_OC2_SetConfig+0x10c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d003      	beq.n	80051e4 <TIM_OC2_SetConfig+0xb0>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a19      	ldr	r2, [pc, #100]	; (8005244 <TIM_OC2_SetConfig+0x110>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d113      	bne.n	800520c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051e4:	693b      	ldr	r3, [r7, #16]
 80051e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	693a      	ldr	r2, [r7, #16]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	693a      	ldr	r2, [r7, #16]
 8005210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	68fa      	ldr	r2, [r7, #12]
 8005216:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	621a      	str	r2, [r3, #32]
}
 8005226:	bf00      	nop
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40012c00 	.word	0x40012c00
 8005238:	40013400 	.word	0x40013400
 800523c:	40014000 	.word	0x40014000
 8005240:	40014400 	.word	0x40014400
 8005244:	40014800 	.word	0x40014800

08005248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005248:	b480      	push	{r7}
 800524a:	b087      	sub	sp, #28
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800527a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f023 0303 	bic.w	r3, r3, #3
 8005282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	4313      	orrs	r3, r2
 800528c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	021b      	lsls	r3, r3, #8
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	4313      	orrs	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a27      	ldr	r2, [pc, #156]	; (8005344 <TIM_OC3_SetConfig+0xfc>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d003      	beq.n	80052b2 <TIM_OC3_SetConfig+0x6a>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	4a26      	ldr	r2, [pc, #152]	; (8005348 <TIM_OC3_SetConfig+0x100>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d10d      	bne.n	80052ce <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052b8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	021b      	lsls	r3, r3, #8
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	4313      	orrs	r3, r2
 80052c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a1c      	ldr	r2, [pc, #112]	; (8005344 <TIM_OC3_SetConfig+0xfc>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d00f      	beq.n	80052f6 <TIM_OC3_SetConfig+0xae>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a1b      	ldr	r2, [pc, #108]	; (8005348 <TIM_OC3_SetConfig+0x100>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d00b      	beq.n	80052f6 <TIM_OC3_SetConfig+0xae>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4a1a      	ldr	r2, [pc, #104]	; (800534c <TIM_OC3_SetConfig+0x104>)
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d007      	beq.n	80052f6 <TIM_OC3_SetConfig+0xae>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4a19      	ldr	r2, [pc, #100]	; (8005350 <TIM_OC3_SetConfig+0x108>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d003      	beq.n	80052f6 <TIM_OC3_SetConfig+0xae>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	4a18      	ldr	r2, [pc, #96]	; (8005354 <TIM_OC3_SetConfig+0x10c>)
 80052f2:	4293      	cmp	r3, r2
 80052f4:	d113      	bne.n	800531e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	621a      	str	r2, [r3, #32]
}
 8005338:	bf00      	nop
 800533a:	371c      	adds	r7, #28
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	40012c00 	.word	0x40012c00
 8005348:	40013400 	.word	0x40013400
 800534c:	40014000 	.word	0x40014000
 8005350:	40014400 	.word	0x40014400
 8005354:	40014800 	.word	0x40014800

08005358 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005358:	b480      	push	{r7}
 800535a:	b087      	sub	sp, #28
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800538a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	021b      	lsls	r3, r3, #8
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4313      	orrs	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053a6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	031b      	lsls	r3, r3, #12
 80053ae:	693a      	ldr	r2, [r7, #16]
 80053b0:	4313      	orrs	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a18      	ldr	r2, [pc, #96]	; (8005418 <TIM_OC4_SetConfig+0xc0>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d00f      	beq.n	80053dc <TIM_OC4_SetConfig+0x84>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	4a17      	ldr	r2, [pc, #92]	; (800541c <TIM_OC4_SetConfig+0xc4>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00b      	beq.n	80053dc <TIM_OC4_SetConfig+0x84>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a16      	ldr	r2, [pc, #88]	; (8005420 <TIM_OC4_SetConfig+0xc8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d007      	beq.n	80053dc <TIM_OC4_SetConfig+0x84>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4a15      	ldr	r2, [pc, #84]	; (8005424 <TIM_OC4_SetConfig+0xcc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d003      	beq.n	80053dc <TIM_OC4_SetConfig+0x84>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a14      	ldr	r2, [pc, #80]	; (8005428 <TIM_OC4_SetConfig+0xd0>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d109      	bne.n	80053f0 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053e2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	019b      	lsls	r3, r3, #6
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	697a      	ldr	r2, [r7, #20]
 80053f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	621a      	str	r2, [r3, #32]
}
 800540a:	bf00      	nop
 800540c:	371c      	adds	r7, #28
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop
 8005418:	40012c00 	.word	0x40012c00
 800541c:	40013400 	.word	0x40013400
 8005420:	40014000 	.word	0x40014000
 8005424:	40014400 	.word	0x40014400
 8005428:	40014800 	.word	0x40014800

0800542c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800545a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	4313      	orrs	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005470:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	041b      	lsls	r3, r3, #16
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a17      	ldr	r2, [pc, #92]	; (80054e0 <TIM_OC5_SetConfig+0xb4>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d00f      	beq.n	80054a6 <TIM_OC5_SetConfig+0x7a>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a16      	ldr	r2, [pc, #88]	; (80054e4 <TIM_OC5_SetConfig+0xb8>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d00b      	beq.n	80054a6 <TIM_OC5_SetConfig+0x7a>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	4a15      	ldr	r2, [pc, #84]	; (80054e8 <TIM_OC5_SetConfig+0xbc>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d007      	beq.n	80054a6 <TIM_OC5_SetConfig+0x7a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	4a14      	ldr	r2, [pc, #80]	; (80054ec <TIM_OC5_SetConfig+0xc0>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d003      	beq.n	80054a6 <TIM_OC5_SetConfig+0x7a>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a13      	ldr	r2, [pc, #76]	; (80054f0 <TIM_OC5_SetConfig+0xc4>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d109      	bne.n	80054ba <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	695b      	ldr	r3, [r3, #20]
 80054b2:	021b      	lsls	r3, r3, #8
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	4313      	orrs	r3, r2
 80054b8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	697a      	ldr	r2, [r7, #20]
 80054be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	68fa      	ldr	r2, [r7, #12]
 80054c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685a      	ldr	r2, [r3, #4]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	693a      	ldr	r2, [r7, #16]
 80054d2:	621a      	str	r2, [r3, #32]
}
 80054d4:	bf00      	nop
 80054d6:	371c      	adds	r7, #28
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	40012c00 	.word	0x40012c00
 80054e4:	40013400 	.word	0x40013400
 80054e8:	40014000 	.word	0x40014000
 80054ec:	40014400 	.word	0x40014400
 80054f0:	40014800 	.word	0x40014800

080054f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
 80054fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800551a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005522:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	021b      	lsls	r3, r3, #8
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4313      	orrs	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800553a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	051b      	lsls	r3, r3, #20
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	4313      	orrs	r3, r2
 8005546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a18      	ldr	r2, [pc, #96]	; (80055ac <TIM_OC6_SetConfig+0xb8>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d00f      	beq.n	8005570 <TIM_OC6_SetConfig+0x7c>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a17      	ldr	r2, [pc, #92]	; (80055b0 <TIM_OC6_SetConfig+0xbc>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d00b      	beq.n	8005570 <TIM_OC6_SetConfig+0x7c>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a16      	ldr	r2, [pc, #88]	; (80055b4 <TIM_OC6_SetConfig+0xc0>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d007      	beq.n	8005570 <TIM_OC6_SetConfig+0x7c>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a15      	ldr	r2, [pc, #84]	; (80055b8 <TIM_OC6_SetConfig+0xc4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d003      	beq.n	8005570 <TIM_OC6_SetConfig+0x7c>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a14      	ldr	r2, [pc, #80]	; (80055bc <TIM_OC6_SetConfig+0xc8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d109      	bne.n	8005584 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005576:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	029b      	lsls	r3, r3, #10
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	685a      	ldr	r2, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	621a      	str	r2, [r3, #32]
}
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40012c00 	.word	0x40012c00
 80055b0:	40013400 	.word	0x40013400
 80055b4:	40014000 	.word	0x40014000
 80055b8:	40014400 	.word	0x40014400
 80055bc:	40014800 	.word	0x40014800

080055c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b087      	sub	sp, #28
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	60f8      	str	r0, [r7, #12]
 80055c8:	60b9      	str	r1, [r7, #8]
 80055ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	6a1b      	ldr	r3, [r3, #32]
 80055d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	f023 0201 	bic.w	r2, r3, #1
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	011b      	lsls	r3, r3, #4
 80055f0:	693a      	ldr	r2, [r7, #16]
 80055f2:	4313      	orrs	r3, r2
 80055f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	f023 030a 	bic.w	r3, r3, #10
 80055fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055fe:	697a      	ldr	r2, [r7, #20]
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	693a      	ldr	r2, [r7, #16]
 800560a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	697a      	ldr	r2, [r7, #20]
 8005610:	621a      	str	r2, [r3, #32]
}
 8005612:	bf00      	nop
 8005614:	371c      	adds	r7, #28
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800561e:	b480      	push	{r7}
 8005620:	b087      	sub	sp, #28
 8005622:	af00      	add	r7, sp, #0
 8005624:	60f8      	str	r0, [r7, #12]
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f023 0210 	bic.w	r2, r3, #16
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6a1b      	ldr	r3, [r3, #32]
 8005640:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005648:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	031b      	lsls	r3, r3, #12
 800564e:	697a      	ldr	r2, [r7, #20]
 8005650:	4313      	orrs	r3, r2
 8005652:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005654:	693b      	ldr	r3, [r7, #16]
 8005656:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800565a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800565c:	68bb      	ldr	r3, [r7, #8]
 800565e:	011b      	lsls	r3, r3, #4
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	4313      	orrs	r3, r2
 8005664:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	697a      	ldr	r2, [r7, #20]
 800566a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	693a      	ldr	r2, [r7, #16]
 8005670:	621a      	str	r2, [r3, #32]
}
 8005672:	bf00      	nop
 8005674:	371c      	adds	r7, #28
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr

0800567e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800567e:	b480      	push	{r7}
 8005680:	b085      	sub	sp, #20
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
 8005686:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	689b      	ldr	r3, [r3, #8]
 800568c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005694:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	4313      	orrs	r3, r2
 800569c:	f043 0307 	orr.w	r3, r3, #7
 80056a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	609a      	str	r2, [r3, #8]
}
 80056a8:	bf00      	nop
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b087      	sub	sp, #28
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	60f8      	str	r0, [r7, #12]
 80056bc:	60b9      	str	r1, [r7, #8]
 80056be:	607a      	str	r2, [r7, #4]
 80056c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	021a      	lsls	r2, r3, #8
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	431a      	orrs	r2, r3
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	4313      	orrs	r3, r2
 80056dc:	697a      	ldr	r2, [r7, #20]
 80056de:	4313      	orrs	r3, r2
 80056e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	609a      	str	r2, [r3, #8]
}
 80056e8:	bf00      	nop
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b087      	sub	sp, #28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f003 031f 	and.w	r3, r3, #31
 8005706:	2201      	movs	r2, #1
 8005708:	fa02 f303 	lsl.w	r3, r2, r3
 800570c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	6a1a      	ldr	r2, [r3, #32]
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	43db      	mvns	r3, r3
 8005716:	401a      	ands	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6a1a      	ldr	r2, [r3, #32]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	f003 031f 	and.w	r3, r3, #31
 8005726:	6879      	ldr	r1, [r7, #4]
 8005728:	fa01 f303 	lsl.w	r3, r1, r3
 800572c:	431a      	orrs	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	621a      	str	r2, [r3, #32]
}
 8005732:	bf00      	nop
 8005734:	371c      	adds	r7, #28
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr
	...

08005740 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005750:	2b01      	cmp	r3, #1
 8005752:	d101      	bne.n	8005758 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005754:	2302      	movs	r3, #2
 8005756:	e068      	b.n	800582a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a2e      	ldr	r2, [pc, #184]	; (8005838 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d004      	beq.n	800578c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a2d      	ldr	r2, [pc, #180]	; (800583c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d108      	bne.n	800579e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005792:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	4313      	orrs	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057a6:	683b      	ldr	r3, [r7, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68fa      	ldr	r2, [r7, #12]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a1e      	ldr	r2, [pc, #120]	; (8005838 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d01d      	beq.n	80057fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057ca:	d018      	beq.n	80057fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a1b      	ldr	r2, [pc, #108]	; (8005840 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d013      	beq.n	80057fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a1a      	ldr	r2, [pc, #104]	; (8005844 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d00e      	beq.n	80057fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a18      	ldr	r2, [pc, #96]	; (8005848 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d009      	beq.n	80057fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a13      	ldr	r2, [pc, #76]	; (800583c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d004      	beq.n	80057fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a14      	ldr	r2, [pc, #80]	; (800584c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d10c      	bne.n	8005818 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005804:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	4313      	orrs	r3, r2
 800580e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2201      	movs	r2, #1
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40012c00 	.word	0x40012c00
 800583c:	40013400 	.word	0x40013400
 8005840:	40000400 	.word	0x40000400
 8005844:	40000800 	.word	0x40000800
 8005848:	40000c00 	.word	0x40000c00
 800584c:	40014000 	.word	0x40014000

08005850 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b082      	sub	sp, #8
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d101      	bne.n	8005862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800585e:	2301      	movs	r3, #1
 8005860:	e040      	b.n	80058e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005866:	2b00      	cmp	r3, #0
 8005868:	d106      	bne.n	8005878 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7fc f956 	bl	8001b24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2224      	movs	r2, #36	; 0x24
 800587c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 0201 	bic.w	r2, r2, #1
 800588c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fc8a 	bl	80061a8 <UART_SetConfig>
 8005894:	4603      	mov	r3, r0
 8005896:	2b01      	cmp	r3, #1
 8005898:	d101      	bne.n	800589e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e022      	b.n	80058e4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d002      	beq.n	80058ac <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 ff08 	bl	80066bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	685a      	ldr	r2, [r3, #4]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	689a      	ldr	r2, [r3, #8]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80058ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	681a      	ldr	r2, [r3, #0]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f042 0201 	orr.w	r2, r2, #1
 80058da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 ff8f 	bl	8006800 <UART_CheckIdleState>
 80058e2:	4603      	mov	r3, r0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b08a      	sub	sp, #40	; 0x28
 80058f0:	af02      	add	r7, sp, #8
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	603b      	str	r3, [r7, #0]
 80058f8:	4613      	mov	r3, r2
 80058fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005900:	2b20      	cmp	r3, #32
 8005902:	f040 8082 	bne.w	8005a0a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d002      	beq.n	8005912 <HAL_UART_Transmit+0x26>
 800590c:	88fb      	ldrh	r3, [r7, #6]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d101      	bne.n	8005916 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e07a      	b.n	8005a0c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800591c:	2b01      	cmp	r3, #1
 800591e:	d101      	bne.n	8005924 <HAL_UART_Transmit+0x38>
 8005920:	2302      	movs	r3, #2
 8005922:	e073      	b.n	8005a0c <HAL_UART_Transmit+0x120>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2221      	movs	r2, #33	; 0x21
 8005938:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800593a:	f7fc fa17 	bl	8001d6c <HAL_GetTick>
 800593e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	88fa      	ldrh	r2, [r7, #6]
 8005944:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	88fa      	ldrh	r2, [r7, #6]
 800594c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	689b      	ldr	r3, [r3, #8]
 8005954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005958:	d108      	bne.n	800596c <HAL_UART_Transmit+0x80>
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	691b      	ldr	r3, [r3, #16]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d104      	bne.n	800596c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8005962:	2300      	movs	r3, #0
 8005964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005966:	68bb      	ldr	r3, [r7, #8]
 8005968:	61bb      	str	r3, [r7, #24]
 800596a:	e003      	b.n	8005974 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005970:	2300      	movs	r3, #0
 8005972:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2200      	movs	r2, #0
 8005978:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800597c:	e02d      	b.n	80059da <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2200      	movs	r2, #0
 8005986:	2180      	movs	r1, #128	; 0x80
 8005988:	68f8      	ldr	r0, [r7, #12]
 800598a:	f000 ff82 	bl	8006892 <UART_WaitOnFlagUntilTimeout>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e039      	b.n	8005a0c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10b      	bne.n	80059b6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	881a      	ldrh	r2, [r3, #0]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059aa:	b292      	uxth	r2, r2
 80059ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80059ae:	69bb      	ldr	r3, [r7, #24]
 80059b0:	3302      	adds	r3, #2
 80059b2:	61bb      	str	r3, [r7, #24]
 80059b4:	e008      	b.n	80059c8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	781a      	ldrb	r2, [r3, #0]
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	b292      	uxth	r2, r2
 80059c0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	3301      	adds	r3, #1
 80059c6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059ce:	b29b      	uxth	r3, r3
 80059d0:	3b01      	subs	r3, #1
 80059d2:	b29a      	uxth	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1cb      	bne.n	800597e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2200      	movs	r2, #0
 80059ee:	2140      	movs	r1, #64	; 0x40
 80059f0:	68f8      	ldr	r0, [r7, #12]
 80059f2:	f000 ff4e 	bl	8006892 <UART_WaitOnFlagUntilTimeout>
 80059f6:	4603      	mov	r3, r0
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d001      	beq.n	8005a00 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e005      	b.n	8005a0c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2220      	movs	r2, #32
 8005a04:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005a06:	2300      	movs	r3, #0
 8005a08:	e000      	b.n	8005a0c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8005a0a:	2302      	movs	r3, #2
  }
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3720      	adds	r7, #32
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b08a      	sub	sp, #40	; 0x28
 8005a18:	af02      	add	r7, sp, #8
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	603b      	str	r3, [r7, #0]
 8005a20:	4613      	mov	r3, r2
 8005a22:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a28:	2b20      	cmp	r3, #32
 8005a2a:	f040 80bf 	bne.w	8005bac <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d002      	beq.n	8005a3a <HAL_UART_Receive+0x26>
 8005a34:	88fb      	ldrh	r3, [r7, #6]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	e0b7      	b.n	8005bae <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_UART_Receive+0x38>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e0b0      	b.n	8005bae <HAL_UART_Receive+0x19a>
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2222      	movs	r2, #34	; 0x22
 8005a60:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a68:	f7fc f980 	bl	8001d6c <HAL_GetTick>
 8005a6c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	88fa      	ldrh	r2, [r7, #6]
 8005a72:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	88fa      	ldrh	r2, [r7, #6]
 8005a7a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a86:	d10e      	bne.n	8005aa6 <HAL_UART_Receive+0x92>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d105      	bne.n	8005a9c <HAL_UART_Receive+0x88>
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005a96:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005a9a:	e02d      	b.n	8005af8 <HAL_UART_Receive+0xe4>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	22ff      	movs	r2, #255	; 0xff
 8005aa0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005aa4:	e028      	b.n	8005af8 <HAL_UART_Receive+0xe4>
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d10d      	bne.n	8005aca <HAL_UART_Receive+0xb6>
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d104      	bne.n	8005ac0 <HAL_UART_Receive+0xac>
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	22ff      	movs	r2, #255	; 0xff
 8005aba:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005abe:	e01b      	b.n	8005af8 <HAL_UART_Receive+0xe4>
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	227f      	movs	r2, #127	; 0x7f
 8005ac4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ac8:	e016      	b.n	8005af8 <HAL_UART_Receive+0xe4>
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ad2:	d10d      	bne.n	8005af0 <HAL_UART_Receive+0xdc>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	691b      	ldr	r3, [r3, #16]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d104      	bne.n	8005ae6 <HAL_UART_Receive+0xd2>
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	227f      	movs	r2, #127	; 0x7f
 8005ae0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005ae4:	e008      	b.n	8005af8 <HAL_UART_Receive+0xe4>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	223f      	movs	r2, #63	; 0x3f
 8005aea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8005aee:	e003      	b.n	8005af8 <HAL_UART_Receive+0xe4>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005afe:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b08:	d108      	bne.n	8005b1c <HAL_UART_Receive+0x108>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	691b      	ldr	r3, [r3, #16]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d104      	bne.n	8005b1c <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8005b12:	2300      	movs	r3, #0
 8005b14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	61bb      	str	r3, [r7, #24]
 8005b1a:	e003      	b.n	8005b24 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005b20:	2300      	movs	r3, #0
 8005b22:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2200      	movs	r2, #0
 8005b28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005b2c:	e033      	b.n	8005b96 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	2200      	movs	r2, #0
 8005b36:	2120      	movs	r1, #32
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 feaa 	bl	8006892 <UART_WaitOnFlagUntilTimeout>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8005b44:	2303      	movs	r3, #3
 8005b46:	e032      	b.n	8005bae <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10c      	bne.n	8005b68 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005b54:	b29a      	uxth	r2, r3
 8005b56:	8a7b      	ldrh	r3, [r7, #18]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	b29a      	uxth	r2, r3
 8005b5c:	69bb      	ldr	r3, [r7, #24]
 8005b5e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	3302      	adds	r3, #2
 8005b64:	61bb      	str	r3, [r7, #24]
 8005b66:	e00d      	b.n	8005b84 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005b6e:	b29b      	uxth	r3, r3
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	8a7b      	ldrh	r3, [r7, #18]
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	4013      	ands	r3, r2
 8005b78:	b2da      	uxtb	r2, r3
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	3301      	adds	r3, #1
 8005b82:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d1c5      	bne.n	8005b2e <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	e000      	b.n	8005bae <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8005bac:	2302      	movs	r3, #2
  }
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3720      	adds	r7, #32
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
	...

08005bb8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b0ba      	sub	sp, #232	; 0xe8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	69db      	ldr	r3, [r3, #28]
 8005bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005bde:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005be2:	f640 030f 	movw	r3, #2063	; 0x80f
 8005be6:	4013      	ands	r3, r2
 8005be8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005bec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d115      	bne.n	8005c20 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005bf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00f      	beq.n	8005c20 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c04:	f003 0320 	and.w	r3, r3, #32
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d009      	beq.n	8005c20 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 82a6 	beq.w	8006162 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	4798      	blx	r3
      }
      return;
 8005c1e:	e2a0      	b.n	8006162 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005c20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	f000 8117 	beq.w	8005e58 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005c2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c2e:	f003 0301 	and.w	r3, r3, #1
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005c36:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005c3a:	4b85      	ldr	r3, [pc, #532]	; (8005e50 <HAL_UART_IRQHandler+0x298>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	f000 810a 	beq.w	8005e58 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d011      	beq.n	8005c74 <HAL_UART_IRQHandler+0xbc>
 8005c50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00b      	beq.n	8005c74 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2201      	movs	r2, #1
 8005c62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c6a:	f043 0201 	orr.w	r2, r3, #1
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d011      	beq.n	8005ca4 <HAL_UART_IRQHandler+0xec>
 8005c80:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c84:	f003 0301 	and.w	r3, r3, #1
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00b      	beq.n	8005ca4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2202      	movs	r2, #2
 8005c92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005c9a:	f043 0204 	orr.w	r2, r3, #4
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ca4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d011      	beq.n	8005cd4 <HAL_UART_IRQHandler+0x11c>
 8005cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cb4:	f003 0301 	and.w	r3, r3, #1
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00b      	beq.n	8005cd4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	2204      	movs	r2, #4
 8005cc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005cca:	f043 0202 	orr.w	r2, r3, #2
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd8:	f003 0308 	and.w	r3, r3, #8
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d017      	beq.n	8005d10 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce4:	f003 0320 	and.w	r3, r3, #32
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d105      	bne.n	8005cf8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005cec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cf0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00b      	beq.n	8005d10 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2208      	movs	r2, #8
 8005cfe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d06:	f043 0208 	orr.w	r2, r3, #8
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d012      	beq.n	8005d42 <HAL_UART_IRQHandler+0x18a>
 8005d1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d20:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d00c      	beq.n	8005d42 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d38:	f043 0220 	orr.w	r2, r3, #32
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f000 820c 	beq.w	8006166 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d52:	f003 0320 	and.w	r3, r3, #32
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00d      	beq.n	8005d76 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d007      	beq.n	8005d76 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d003      	beq.n	8005d76 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	689b      	ldr	r3, [r3, #8]
 8005d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d8a:	2b40      	cmp	r3, #64	; 0x40
 8005d8c:	d005      	beq.n	8005d9a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d92:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d04f      	beq.n	8005e3a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	f000 fe3d 	bl	8006a1a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005daa:	2b40      	cmp	r3, #64	; 0x40
 8005dac:	d141      	bne.n	8005e32 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	3308      	adds	r3, #8
 8005db4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dbc:	e853 3f00 	ldrex	r3, [r3]
 8005dc0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005dc8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005dcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3308      	adds	r3, #8
 8005dd6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005dda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005dde:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005de6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005dea:	e841 2300 	strex	r3, r2, [r1]
 8005dee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005df2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1d9      	bne.n	8005dae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d013      	beq.n	8005e2a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e06:	4a13      	ldr	r2, [pc, #76]	; (8005e54 <HAL_UART_IRQHandler+0x29c>)
 8005e08:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fc f92b 	bl	800206a <HAL_DMA_Abort_IT>
 8005e14:	4603      	mov	r3, r0
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d017      	beq.n	8005e4a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8005e24:	4610      	mov	r0, r2
 8005e26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e28:	e00f      	b.n	8005e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f9a6 	bl	800617c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e30:	e00b      	b.n	8005e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f9a2 	bl	800617c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e38:	e007      	b.n	8005e4a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 f99e 	bl	800617c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8005e48:	e18d      	b.n	8006166 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e4a:	bf00      	nop
    return;
 8005e4c:	e18b      	b.n	8006166 <HAL_UART_IRQHandler+0x5ae>
 8005e4e:	bf00      	nop
 8005e50:	04000120 	.word	0x04000120
 8005e54:	08006ae1 	.word	0x08006ae1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	f040 8146 	bne.w	80060ee <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005e62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e66:	f003 0310 	and.w	r3, r3, #16
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 813f 	beq.w	80060ee <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005e70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e74:	f003 0310 	and.w	r3, r3, #16
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	f000 8138 	beq.w	80060ee <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2210      	movs	r2, #16
 8005e84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e90:	2b40      	cmp	r3, #64	; 0x40
 8005e92:	f040 80b4 	bne.w	8005ffe <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ea2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	f000 815f 	beq.w	800616a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005eb6:	429a      	cmp	r2, r3
 8005eb8:	f080 8157 	bcs.w	800616a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005ec2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 0320 	and.w	r3, r3, #32
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f040 8085 	bne.w	8005fe2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ee0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005ee4:	e853 3f00 	ldrex	r3, [r3]
 8005ee8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005eec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ef0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ef4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	461a      	mov	r2, r3
 8005efe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005f06:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005f0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005f12:	e841 2300 	strex	r3, r2, [r1]
 8005f16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005f1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d1da      	bne.n	8005ed8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	3308      	adds	r3, #8
 8005f28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f2c:	e853 3f00 	ldrex	r3, [r3]
 8005f30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005f32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f34:	f023 0301 	bic.w	r3, r3, #1
 8005f38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3308      	adds	r3, #8
 8005f42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005f46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005f4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005f4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005f52:	e841 2300 	strex	r3, r2, [r1]
 8005f56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005f58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d1e1      	bne.n	8005f22 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	3308      	adds	r3, #8
 8005f64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f68:	e853 3f00 	ldrex	r3, [r3]
 8005f6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	3308      	adds	r3, #8
 8005f7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f8a:	e841 2300 	strex	r3, r2, [r1]
 8005f8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1e3      	bne.n	8005f5e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2220      	movs	r2, #32
 8005f9a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005faa:	e853 3f00 	ldrex	r3, [r3]
 8005fae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005fb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005fb2:	f023 0310 	bic.w	r3, r3, #16
 8005fb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005fc4:	65bb      	str	r3, [r7, #88]	; 0x58
 8005fc6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fcc:	e841 2300 	strex	r3, r2, [r1]
 8005fd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e4      	bne.n	8005fa2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7fc f806 	bl	8001fee <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	1ad3      	subs	r3, r2, r3
 8005ff2:	b29b      	uxth	r3, r3
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f8ca 	bl	8006190 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ffc:	e0b5      	b.n	800616a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800600a:	b29b      	uxth	r3, r3
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 80a7 	beq.w	800616e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8006020:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 80a2 	beq.w	800616e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006038:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800603a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800603e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	461a      	mov	r2, r3
 8006048:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800604c:	647b      	str	r3, [r7, #68]	; 0x44
 800604e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800605a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e4      	bne.n	800602a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3308      	adds	r3, #8
 8006066:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606a:	e853 3f00 	ldrex	r3, [r3]
 800606e:	623b      	str	r3, [r7, #32]
   return(result);
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	f023 0301 	bic.w	r3, r3, #1
 8006076:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	3308      	adds	r3, #8
 8006080:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006084:	633a      	str	r2, [r7, #48]	; 0x30
 8006086:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006088:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800608a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800608c:	e841 2300 	strex	r3, r2, [r1]
 8006090:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1e3      	bne.n	8006060 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2220      	movs	r2, #32
 800609c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2200      	movs	r2, #0
 80060a8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	e853 3f00 	ldrex	r3, [r3]
 80060b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f023 0310 	bic.w	r3, r3, #16
 80060be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	461a      	mov	r2, r3
 80060c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80060cc:	61fb      	str	r3, [r7, #28]
 80060ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d0:	69b9      	ldr	r1, [r7, #24]
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	e841 2300 	strex	r3, r2, [r1]
 80060d8:	617b      	str	r3, [r7, #20]
   return(result);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e4      	bne.n	80060aa <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80060e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80060e4:	4619      	mov	r1, r3
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f852 	bl	8006190 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80060ec:	e03f      	b.n	800616e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80060ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00e      	beq.n	8006118 <HAL_UART_IRQHandler+0x560>
 80060fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80060fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006102:	2b00      	cmp	r3, #0
 8006104:	d008      	beq.n	8006118 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800610e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fd25 	bl	8006b60 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006116:	e02d      	b.n	8006174 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006118:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800611c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00e      	beq.n	8006142 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006124:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006128:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800612c:	2b00      	cmp	r3, #0
 800612e:	d008      	beq.n	8006142 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006134:	2b00      	cmp	r3, #0
 8006136:	d01c      	beq.n	8006172 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	4798      	blx	r3
    }
    return;
 8006140:	e017      	b.n	8006172 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006142:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614a:	2b00      	cmp	r3, #0
 800614c:	d012      	beq.n	8006174 <HAL_UART_IRQHandler+0x5bc>
 800614e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006156:	2b00      	cmp	r3, #0
 8006158:	d00c      	beq.n	8006174 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fcd6 	bl	8006b0c <UART_EndTransmit_IT>
    return;
 8006160:	e008      	b.n	8006174 <HAL_UART_IRQHandler+0x5bc>
      return;
 8006162:	bf00      	nop
 8006164:	e006      	b.n	8006174 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006166:	bf00      	nop
 8006168:	e004      	b.n	8006174 <HAL_UART_IRQHandler+0x5bc>
      return;
 800616a:	bf00      	nop
 800616c:	e002      	b.n	8006174 <HAL_UART_IRQHandler+0x5bc>
      return;
 800616e:	bf00      	nop
 8006170:	e000      	b.n	8006174 <HAL_UART_IRQHandler+0x5bc>
    return;
 8006172:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006174:	37e8      	adds	r7, #232	; 0xe8
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop

0800617c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800617c:	b480      	push	{r7}
 800617e:	b083      	sub	sp, #12
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006184:	bf00      	nop
 8006186:	370c      	adds	r7, #12
 8006188:	46bd      	mov	sp, r7
 800618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618e:	4770      	bx	lr

08006190 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006190:	b480      	push	{r7}
 8006192:	b083      	sub	sp, #12
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	460b      	mov	r3, r1
 800619a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80061a8:	b5b0      	push	{r4, r5, r7, lr}
 80061aa:	b088      	sub	sp, #32
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80061b0:	2300      	movs	r3, #0
 80061b2:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	689a      	ldr	r2, [r3, #8]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	691b      	ldr	r3, [r3, #16]
 80061bc:	431a      	orrs	r2, r3
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	431a      	orrs	r2, r3
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	69db      	ldr	r3, [r3, #28]
 80061c8:	4313      	orrs	r3, r2
 80061ca:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	4bad      	ldr	r3, [pc, #692]	; (8006488 <UART_SetConfig+0x2e0>)
 80061d4:	4013      	ands	r3, r2
 80061d6:	687a      	ldr	r2, [r7, #4]
 80061d8:	6812      	ldr	r2, [r2, #0]
 80061da:	69f9      	ldr	r1, [r7, #28]
 80061dc:	430b      	orrs	r3, r1
 80061de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68da      	ldr	r2, [r3, #12]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	430a      	orrs	r2, r1
 80061f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	699b      	ldr	r3, [r3, #24]
 80061fa:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4aa2      	ldr	r2, [pc, #648]	; (800648c <UART_SetConfig+0x2e4>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d004      	beq.n	8006210 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	69fa      	ldr	r2, [r7, #28]
 800620c:	4313      	orrs	r3, r2
 800620e:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	689b      	ldr	r3, [r3, #8]
 8006216:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69fa      	ldr	r2, [r7, #28]
 8006220:	430a      	orrs	r2, r1
 8006222:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a99      	ldr	r2, [pc, #612]	; (8006490 <UART_SetConfig+0x2e8>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d121      	bne.n	8006272 <UART_SetConfig+0xca>
 800622e:	4b99      	ldr	r3, [pc, #612]	; (8006494 <UART_SetConfig+0x2ec>)
 8006230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006234:	f003 0303 	and.w	r3, r3, #3
 8006238:	2b03      	cmp	r3, #3
 800623a:	d817      	bhi.n	800626c <UART_SetConfig+0xc4>
 800623c:	a201      	add	r2, pc, #4	; (adr r2, 8006244 <UART_SetConfig+0x9c>)
 800623e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006242:	bf00      	nop
 8006244:	08006255 	.word	0x08006255
 8006248:	08006261 	.word	0x08006261
 800624c:	0800625b 	.word	0x0800625b
 8006250:	08006267 	.word	0x08006267
 8006254:	2301      	movs	r3, #1
 8006256:	76fb      	strb	r3, [r7, #27]
 8006258:	e0e7      	b.n	800642a <UART_SetConfig+0x282>
 800625a:	2302      	movs	r3, #2
 800625c:	76fb      	strb	r3, [r7, #27]
 800625e:	e0e4      	b.n	800642a <UART_SetConfig+0x282>
 8006260:	2304      	movs	r3, #4
 8006262:	76fb      	strb	r3, [r7, #27]
 8006264:	e0e1      	b.n	800642a <UART_SetConfig+0x282>
 8006266:	2308      	movs	r3, #8
 8006268:	76fb      	strb	r3, [r7, #27]
 800626a:	e0de      	b.n	800642a <UART_SetConfig+0x282>
 800626c:	2310      	movs	r3, #16
 800626e:	76fb      	strb	r3, [r7, #27]
 8006270:	e0db      	b.n	800642a <UART_SetConfig+0x282>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a88      	ldr	r2, [pc, #544]	; (8006498 <UART_SetConfig+0x2f0>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d132      	bne.n	80062e2 <UART_SetConfig+0x13a>
 800627c:	4b85      	ldr	r3, [pc, #532]	; (8006494 <UART_SetConfig+0x2ec>)
 800627e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006282:	f003 030c 	and.w	r3, r3, #12
 8006286:	2b0c      	cmp	r3, #12
 8006288:	d828      	bhi.n	80062dc <UART_SetConfig+0x134>
 800628a:	a201      	add	r2, pc, #4	; (adr r2, 8006290 <UART_SetConfig+0xe8>)
 800628c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006290:	080062c5 	.word	0x080062c5
 8006294:	080062dd 	.word	0x080062dd
 8006298:	080062dd 	.word	0x080062dd
 800629c:	080062dd 	.word	0x080062dd
 80062a0:	080062d1 	.word	0x080062d1
 80062a4:	080062dd 	.word	0x080062dd
 80062a8:	080062dd 	.word	0x080062dd
 80062ac:	080062dd 	.word	0x080062dd
 80062b0:	080062cb 	.word	0x080062cb
 80062b4:	080062dd 	.word	0x080062dd
 80062b8:	080062dd 	.word	0x080062dd
 80062bc:	080062dd 	.word	0x080062dd
 80062c0:	080062d7 	.word	0x080062d7
 80062c4:	2300      	movs	r3, #0
 80062c6:	76fb      	strb	r3, [r7, #27]
 80062c8:	e0af      	b.n	800642a <UART_SetConfig+0x282>
 80062ca:	2302      	movs	r3, #2
 80062cc:	76fb      	strb	r3, [r7, #27]
 80062ce:	e0ac      	b.n	800642a <UART_SetConfig+0x282>
 80062d0:	2304      	movs	r3, #4
 80062d2:	76fb      	strb	r3, [r7, #27]
 80062d4:	e0a9      	b.n	800642a <UART_SetConfig+0x282>
 80062d6:	2308      	movs	r3, #8
 80062d8:	76fb      	strb	r3, [r7, #27]
 80062da:	e0a6      	b.n	800642a <UART_SetConfig+0x282>
 80062dc:	2310      	movs	r3, #16
 80062de:	76fb      	strb	r3, [r7, #27]
 80062e0:	e0a3      	b.n	800642a <UART_SetConfig+0x282>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a6d      	ldr	r2, [pc, #436]	; (800649c <UART_SetConfig+0x2f4>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d120      	bne.n	800632e <UART_SetConfig+0x186>
 80062ec:	4b69      	ldr	r3, [pc, #420]	; (8006494 <UART_SetConfig+0x2ec>)
 80062ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80062f6:	2b30      	cmp	r3, #48	; 0x30
 80062f8:	d013      	beq.n	8006322 <UART_SetConfig+0x17a>
 80062fa:	2b30      	cmp	r3, #48	; 0x30
 80062fc:	d814      	bhi.n	8006328 <UART_SetConfig+0x180>
 80062fe:	2b20      	cmp	r3, #32
 8006300:	d009      	beq.n	8006316 <UART_SetConfig+0x16e>
 8006302:	2b20      	cmp	r3, #32
 8006304:	d810      	bhi.n	8006328 <UART_SetConfig+0x180>
 8006306:	2b00      	cmp	r3, #0
 8006308:	d002      	beq.n	8006310 <UART_SetConfig+0x168>
 800630a:	2b10      	cmp	r3, #16
 800630c:	d006      	beq.n	800631c <UART_SetConfig+0x174>
 800630e:	e00b      	b.n	8006328 <UART_SetConfig+0x180>
 8006310:	2300      	movs	r3, #0
 8006312:	76fb      	strb	r3, [r7, #27]
 8006314:	e089      	b.n	800642a <UART_SetConfig+0x282>
 8006316:	2302      	movs	r3, #2
 8006318:	76fb      	strb	r3, [r7, #27]
 800631a:	e086      	b.n	800642a <UART_SetConfig+0x282>
 800631c:	2304      	movs	r3, #4
 800631e:	76fb      	strb	r3, [r7, #27]
 8006320:	e083      	b.n	800642a <UART_SetConfig+0x282>
 8006322:	2308      	movs	r3, #8
 8006324:	76fb      	strb	r3, [r7, #27]
 8006326:	e080      	b.n	800642a <UART_SetConfig+0x282>
 8006328:	2310      	movs	r3, #16
 800632a:	76fb      	strb	r3, [r7, #27]
 800632c:	e07d      	b.n	800642a <UART_SetConfig+0x282>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a5b      	ldr	r2, [pc, #364]	; (80064a0 <UART_SetConfig+0x2f8>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d120      	bne.n	800637a <UART_SetConfig+0x1d2>
 8006338:	4b56      	ldr	r3, [pc, #344]	; (8006494 <UART_SetConfig+0x2ec>)
 800633a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800633e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006342:	2bc0      	cmp	r3, #192	; 0xc0
 8006344:	d013      	beq.n	800636e <UART_SetConfig+0x1c6>
 8006346:	2bc0      	cmp	r3, #192	; 0xc0
 8006348:	d814      	bhi.n	8006374 <UART_SetConfig+0x1cc>
 800634a:	2b80      	cmp	r3, #128	; 0x80
 800634c:	d009      	beq.n	8006362 <UART_SetConfig+0x1ba>
 800634e:	2b80      	cmp	r3, #128	; 0x80
 8006350:	d810      	bhi.n	8006374 <UART_SetConfig+0x1cc>
 8006352:	2b00      	cmp	r3, #0
 8006354:	d002      	beq.n	800635c <UART_SetConfig+0x1b4>
 8006356:	2b40      	cmp	r3, #64	; 0x40
 8006358:	d006      	beq.n	8006368 <UART_SetConfig+0x1c0>
 800635a:	e00b      	b.n	8006374 <UART_SetConfig+0x1cc>
 800635c:	2300      	movs	r3, #0
 800635e:	76fb      	strb	r3, [r7, #27]
 8006360:	e063      	b.n	800642a <UART_SetConfig+0x282>
 8006362:	2302      	movs	r3, #2
 8006364:	76fb      	strb	r3, [r7, #27]
 8006366:	e060      	b.n	800642a <UART_SetConfig+0x282>
 8006368:	2304      	movs	r3, #4
 800636a:	76fb      	strb	r3, [r7, #27]
 800636c:	e05d      	b.n	800642a <UART_SetConfig+0x282>
 800636e:	2308      	movs	r3, #8
 8006370:	76fb      	strb	r3, [r7, #27]
 8006372:	e05a      	b.n	800642a <UART_SetConfig+0x282>
 8006374:	2310      	movs	r3, #16
 8006376:	76fb      	strb	r3, [r7, #27]
 8006378:	e057      	b.n	800642a <UART_SetConfig+0x282>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a49      	ldr	r2, [pc, #292]	; (80064a4 <UART_SetConfig+0x2fc>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d125      	bne.n	80063d0 <UART_SetConfig+0x228>
 8006384:	4b43      	ldr	r3, [pc, #268]	; (8006494 <UART_SetConfig+0x2ec>)
 8006386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800638a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800638e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006392:	d017      	beq.n	80063c4 <UART_SetConfig+0x21c>
 8006394:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006398:	d817      	bhi.n	80063ca <UART_SetConfig+0x222>
 800639a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800639e:	d00b      	beq.n	80063b8 <UART_SetConfig+0x210>
 80063a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063a4:	d811      	bhi.n	80063ca <UART_SetConfig+0x222>
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <UART_SetConfig+0x20a>
 80063aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ae:	d006      	beq.n	80063be <UART_SetConfig+0x216>
 80063b0:	e00b      	b.n	80063ca <UART_SetConfig+0x222>
 80063b2:	2300      	movs	r3, #0
 80063b4:	76fb      	strb	r3, [r7, #27]
 80063b6:	e038      	b.n	800642a <UART_SetConfig+0x282>
 80063b8:	2302      	movs	r3, #2
 80063ba:	76fb      	strb	r3, [r7, #27]
 80063bc:	e035      	b.n	800642a <UART_SetConfig+0x282>
 80063be:	2304      	movs	r3, #4
 80063c0:	76fb      	strb	r3, [r7, #27]
 80063c2:	e032      	b.n	800642a <UART_SetConfig+0x282>
 80063c4:	2308      	movs	r3, #8
 80063c6:	76fb      	strb	r3, [r7, #27]
 80063c8:	e02f      	b.n	800642a <UART_SetConfig+0x282>
 80063ca:	2310      	movs	r3, #16
 80063cc:	76fb      	strb	r3, [r7, #27]
 80063ce:	e02c      	b.n	800642a <UART_SetConfig+0x282>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a2d      	ldr	r2, [pc, #180]	; (800648c <UART_SetConfig+0x2e4>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d125      	bne.n	8006426 <UART_SetConfig+0x27e>
 80063da:	4b2e      	ldr	r3, [pc, #184]	; (8006494 <UART_SetConfig+0x2ec>)
 80063dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80063e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063e8:	d017      	beq.n	800641a <UART_SetConfig+0x272>
 80063ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80063ee:	d817      	bhi.n	8006420 <UART_SetConfig+0x278>
 80063f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063f4:	d00b      	beq.n	800640e <UART_SetConfig+0x266>
 80063f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063fa:	d811      	bhi.n	8006420 <UART_SetConfig+0x278>
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d003      	beq.n	8006408 <UART_SetConfig+0x260>
 8006400:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006404:	d006      	beq.n	8006414 <UART_SetConfig+0x26c>
 8006406:	e00b      	b.n	8006420 <UART_SetConfig+0x278>
 8006408:	2300      	movs	r3, #0
 800640a:	76fb      	strb	r3, [r7, #27]
 800640c:	e00d      	b.n	800642a <UART_SetConfig+0x282>
 800640e:	2302      	movs	r3, #2
 8006410:	76fb      	strb	r3, [r7, #27]
 8006412:	e00a      	b.n	800642a <UART_SetConfig+0x282>
 8006414:	2304      	movs	r3, #4
 8006416:	76fb      	strb	r3, [r7, #27]
 8006418:	e007      	b.n	800642a <UART_SetConfig+0x282>
 800641a:	2308      	movs	r3, #8
 800641c:	76fb      	strb	r3, [r7, #27]
 800641e:	e004      	b.n	800642a <UART_SetConfig+0x282>
 8006420:	2310      	movs	r3, #16
 8006422:	76fb      	strb	r3, [r7, #27]
 8006424:	e001      	b.n	800642a <UART_SetConfig+0x282>
 8006426:	2310      	movs	r3, #16
 8006428:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a17      	ldr	r2, [pc, #92]	; (800648c <UART_SetConfig+0x2e4>)
 8006430:	4293      	cmp	r3, r2
 8006432:	f040 8087 	bne.w	8006544 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006436:	7efb      	ldrb	r3, [r7, #27]
 8006438:	2b08      	cmp	r3, #8
 800643a:	d837      	bhi.n	80064ac <UART_SetConfig+0x304>
 800643c:	a201      	add	r2, pc, #4	; (adr r2, 8006444 <UART_SetConfig+0x29c>)
 800643e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006442:	bf00      	nop
 8006444:	08006469 	.word	0x08006469
 8006448:	080064ad 	.word	0x080064ad
 800644c:	08006471 	.word	0x08006471
 8006450:	080064ad 	.word	0x080064ad
 8006454:	08006477 	.word	0x08006477
 8006458:	080064ad 	.word	0x080064ad
 800645c:	080064ad 	.word	0x080064ad
 8006460:	080064ad 	.word	0x080064ad
 8006464:	0800647f 	.word	0x0800647f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006468:	f7fc fdc6 	bl	8002ff8 <HAL_RCC_GetPCLK1Freq>
 800646c:	6178      	str	r0, [r7, #20]
        break;
 800646e:	e022      	b.n	80064b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006470:	4b0d      	ldr	r3, [pc, #52]	; (80064a8 <UART_SetConfig+0x300>)
 8006472:	617b      	str	r3, [r7, #20]
        break;
 8006474:	e01f      	b.n	80064b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006476:	f7fc fd27 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 800647a:	6178      	str	r0, [r7, #20]
        break;
 800647c:	e01b      	b.n	80064b6 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800647e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006482:	617b      	str	r3, [r7, #20]
        break;
 8006484:	e017      	b.n	80064b6 <UART_SetConfig+0x30e>
 8006486:	bf00      	nop
 8006488:	efff69f3 	.word	0xefff69f3
 800648c:	40008000 	.word	0x40008000
 8006490:	40013800 	.word	0x40013800
 8006494:	40021000 	.word	0x40021000
 8006498:	40004400 	.word	0x40004400
 800649c:	40004800 	.word	0x40004800
 80064a0:	40004c00 	.word	0x40004c00
 80064a4:	40005000 	.word	0x40005000
 80064a8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80064ac:	2300      	movs	r3, #0
 80064ae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	76bb      	strb	r3, [r7, #26]
        break;
 80064b4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f000 80f1 	beq.w	80066a0 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	685a      	ldr	r2, [r3, #4]
 80064c2:	4613      	mov	r3, r2
 80064c4:	005b      	lsls	r3, r3, #1
 80064c6:	4413      	add	r3, r2
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d305      	bcc.n	80064da <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d902      	bls.n	80064e0 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 80064da:	2301      	movs	r3, #1
 80064dc:	76bb      	strb	r3, [r7, #26]
 80064de:	e0df      	b.n	80066a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	4618      	mov	r0, r3
 80064e4:	f04f 0100 	mov.w	r1, #0
 80064e8:	f04f 0200 	mov.w	r2, #0
 80064ec:	f04f 0300 	mov.w	r3, #0
 80064f0:	020b      	lsls	r3, r1, #8
 80064f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064f6:	0202      	lsls	r2, r0, #8
 80064f8:	6879      	ldr	r1, [r7, #4]
 80064fa:	6849      	ldr	r1, [r1, #4]
 80064fc:	0849      	lsrs	r1, r1, #1
 80064fe:	4608      	mov	r0, r1
 8006500:	f04f 0100 	mov.w	r1, #0
 8006504:	1814      	adds	r4, r2, r0
 8006506:	eb43 0501 	adc.w	r5, r3, r1
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	685b      	ldr	r3, [r3, #4]
 800650e:	461a      	mov	r2, r3
 8006510:	f04f 0300 	mov.w	r3, #0
 8006514:	4620      	mov	r0, r4
 8006516:	4629      	mov	r1, r5
 8006518:	f7fa faa0 	bl	8000a5c <__aeabi_uldivmod>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4613      	mov	r3, r2
 8006522:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800652a:	d308      	bcc.n	800653e <UART_SetConfig+0x396>
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006532:	d204      	bcs.n	800653e <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	693a      	ldr	r2, [r7, #16]
 800653a:	60da      	str	r2, [r3, #12]
 800653c:	e0b0      	b.n	80066a0 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 800653e:	2301      	movs	r3, #1
 8006540:	76bb      	strb	r3, [r7, #26]
 8006542:	e0ad      	b.n	80066a0 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	69db      	ldr	r3, [r3, #28]
 8006548:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800654c:	d15b      	bne.n	8006606 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 800654e:	7efb      	ldrb	r3, [r7, #27]
 8006550:	2b08      	cmp	r3, #8
 8006552:	d828      	bhi.n	80065a6 <UART_SetConfig+0x3fe>
 8006554:	a201      	add	r2, pc, #4	; (adr r2, 800655c <UART_SetConfig+0x3b4>)
 8006556:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800655a:	bf00      	nop
 800655c:	08006581 	.word	0x08006581
 8006560:	08006589 	.word	0x08006589
 8006564:	08006591 	.word	0x08006591
 8006568:	080065a7 	.word	0x080065a7
 800656c:	08006597 	.word	0x08006597
 8006570:	080065a7 	.word	0x080065a7
 8006574:	080065a7 	.word	0x080065a7
 8006578:	080065a7 	.word	0x080065a7
 800657c:	0800659f 	.word	0x0800659f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006580:	f7fc fd3a 	bl	8002ff8 <HAL_RCC_GetPCLK1Freq>
 8006584:	6178      	str	r0, [r7, #20]
        break;
 8006586:	e013      	b.n	80065b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006588:	f7fc fd4c 	bl	8003024 <HAL_RCC_GetPCLK2Freq>
 800658c:	6178      	str	r0, [r7, #20]
        break;
 800658e:	e00f      	b.n	80065b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006590:	4b49      	ldr	r3, [pc, #292]	; (80066b8 <UART_SetConfig+0x510>)
 8006592:	617b      	str	r3, [r7, #20]
        break;
 8006594:	e00c      	b.n	80065b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006596:	f7fc fc97 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 800659a:	6178      	str	r0, [r7, #20]
        break;
 800659c:	e008      	b.n	80065b0 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800659e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065a2:	617b      	str	r3, [r7, #20]
        break;
 80065a4:	e004      	b.n	80065b0 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 80065a6:	2300      	movs	r3, #0
 80065a8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	76bb      	strb	r3, [r7, #26]
        break;
 80065ae:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d074      	beq.n	80066a0 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	005a      	lsls	r2, r3, #1
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	085b      	lsrs	r3, r3, #1
 80065c0:	441a      	add	r2, r3
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ca:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	2b0f      	cmp	r3, #15
 80065d0:	d916      	bls.n	8006600 <UART_SetConfig+0x458>
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065d8:	d212      	bcs.n	8006600 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	b29b      	uxth	r3, r3
 80065de:	f023 030f 	bic.w	r3, r3, #15
 80065e2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80065e4:	693b      	ldr	r3, [r7, #16]
 80065e6:	085b      	lsrs	r3, r3, #1
 80065e8:	b29b      	uxth	r3, r3
 80065ea:	f003 0307 	and.w	r3, r3, #7
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	89fb      	ldrh	r3, [r7, #14]
 80065f2:	4313      	orrs	r3, r2
 80065f4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	89fa      	ldrh	r2, [r7, #14]
 80065fc:	60da      	str	r2, [r3, #12]
 80065fe:	e04f      	b.n	80066a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	76bb      	strb	r3, [r7, #26]
 8006604:	e04c      	b.n	80066a0 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006606:	7efb      	ldrb	r3, [r7, #27]
 8006608:	2b08      	cmp	r3, #8
 800660a:	d828      	bhi.n	800665e <UART_SetConfig+0x4b6>
 800660c:	a201      	add	r2, pc, #4	; (adr r2, 8006614 <UART_SetConfig+0x46c>)
 800660e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006612:	bf00      	nop
 8006614:	08006639 	.word	0x08006639
 8006618:	08006641 	.word	0x08006641
 800661c:	08006649 	.word	0x08006649
 8006620:	0800665f 	.word	0x0800665f
 8006624:	0800664f 	.word	0x0800664f
 8006628:	0800665f 	.word	0x0800665f
 800662c:	0800665f 	.word	0x0800665f
 8006630:	0800665f 	.word	0x0800665f
 8006634:	08006657 	.word	0x08006657
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006638:	f7fc fcde 	bl	8002ff8 <HAL_RCC_GetPCLK1Freq>
 800663c:	6178      	str	r0, [r7, #20]
        break;
 800663e:	e013      	b.n	8006668 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006640:	f7fc fcf0 	bl	8003024 <HAL_RCC_GetPCLK2Freq>
 8006644:	6178      	str	r0, [r7, #20]
        break;
 8006646:	e00f      	b.n	8006668 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006648:	4b1b      	ldr	r3, [pc, #108]	; (80066b8 <UART_SetConfig+0x510>)
 800664a:	617b      	str	r3, [r7, #20]
        break;
 800664c:	e00c      	b.n	8006668 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800664e:	f7fc fc3b 	bl	8002ec8 <HAL_RCC_GetSysClockFreq>
 8006652:	6178      	str	r0, [r7, #20]
        break;
 8006654:	e008      	b.n	8006668 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006656:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800665a:	617b      	str	r3, [r7, #20]
        break;
 800665c:	e004      	b.n	8006668 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 800665e:	2300      	movs	r3, #0
 8006660:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006662:	2301      	movs	r3, #1
 8006664:	76bb      	strb	r3, [r7, #26]
        break;
 8006666:	bf00      	nop
    }

    if (pclk != 0U)
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d018      	beq.n	80066a0 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	085a      	lsrs	r2, r3, #1
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	441a      	add	r2, r3
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006680:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	2b0f      	cmp	r3, #15
 8006686:	d909      	bls.n	800669c <UART_SetConfig+0x4f4>
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800668e:	d205      	bcs.n	800669c <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	b29a      	uxth	r2, r3
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	60da      	str	r2, [r3, #12]
 800669a:	e001      	b.n	80066a0 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80066ac:	7ebb      	ldrb	r3, [r7, #26]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3720      	adds	r7, #32
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bdb0      	pop	{r4, r5, r7, pc}
 80066b6:	bf00      	nop
 80066b8:	00f42400 	.word	0x00f42400

080066bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066bc:	b480      	push	{r7}
 80066be:	b083      	sub	sp, #12
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00a      	beq.n	80066e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066ea:	f003 0302 	and.w	r3, r3, #2
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00a      	beq.n	8006708 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	430a      	orrs	r2, r1
 8006706:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670c:	f003 0304 	and.w	r3, r3, #4
 8006710:	2b00      	cmp	r3, #0
 8006712:	d00a      	beq.n	800672a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	685b      	ldr	r3, [r3, #4]
 800671a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	430a      	orrs	r2, r1
 8006728:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672e:	f003 0308 	and.w	r3, r3, #8
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	430a      	orrs	r2, r1
 800674a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006750:	f003 0310 	and.w	r3, r3, #16
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00a      	beq.n	800676e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006772:	f003 0320 	and.w	r3, r3, #32
 8006776:	2b00      	cmp	r3, #0
 8006778:	d00a      	beq.n	8006790 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	430a      	orrs	r2, r1
 800678e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006798:	2b00      	cmp	r3, #0
 800679a:	d01a      	beq.n	80067d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80067ba:	d10a      	bne.n	80067d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	430a      	orrs	r2, r1
 80067d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00a      	beq.n	80067f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	605a      	str	r2, [r3, #4]
  }
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006800:	b580      	push	{r7, lr}
 8006802:	b086      	sub	sp, #24
 8006804:	af02      	add	r7, sp, #8
 8006806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2200      	movs	r2, #0
 800680c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006810:	f7fb faac 	bl	8001d6c <HAL_GetTick>
 8006814:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0308 	and.w	r3, r3, #8
 8006820:	2b08      	cmp	r3, #8
 8006822:	d10e      	bne.n	8006842 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006824:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006828:	9300      	str	r3, [sp, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006832:	6878      	ldr	r0, [r7, #4]
 8006834:	f000 f82d 	bl	8006892 <UART_WaitOnFlagUntilTimeout>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d001      	beq.n	8006842 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e023      	b.n	800688a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f003 0304 	and.w	r3, r3, #4
 800684c:	2b04      	cmp	r3, #4
 800684e:	d10e      	bne.n	800686e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006850:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	2200      	movs	r2, #0
 800685a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f000 f817 	bl	8006892 <UART_WaitOnFlagUntilTimeout>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d001      	beq.n	800686e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e00d      	b.n	800688a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2220      	movs	r2, #32
 8006872:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2220      	movs	r2, #32
 8006878:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b09c      	sub	sp, #112	; 0x70
 8006896:	af00      	add	r7, sp, #0
 8006898:	60f8      	str	r0, [r7, #12]
 800689a:	60b9      	str	r1, [r7, #8]
 800689c:	603b      	str	r3, [r7, #0]
 800689e:	4613      	mov	r3, r2
 80068a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068a2:	e0a5      	b.n	80069f0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068aa:	f000 80a1 	beq.w	80069f0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068ae:	f7fb fa5d 	bl	8001d6c <HAL_GetTick>
 80068b2:	4602      	mov	r2, r0
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	1ad3      	subs	r3, r2, r3
 80068b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d302      	bcc.n	80068c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80068be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d13e      	bne.n	8006942 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80068d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80068d8:	667b      	str	r3, [r7, #100]	; 0x64
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	461a      	mov	r2, r3
 80068e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068e4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80068e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80068ea:	e841 2300 	strex	r3, r2, [r1]
 80068ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80068f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1e6      	bne.n	80068c4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3308      	adds	r3, #8
 80068fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006900:	e853 3f00 	ldrex	r3, [r3]
 8006904:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006908:	f023 0301 	bic.w	r3, r3, #1
 800690c:	663b      	str	r3, [r7, #96]	; 0x60
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3308      	adds	r3, #8
 8006914:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006916:	64ba      	str	r2, [r7, #72]	; 0x48
 8006918:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800691c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800691e:	e841 2300 	strex	r3, r2, [r1]
 8006922:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006924:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1e5      	bne.n	80068f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2220      	movs	r2, #32
 800692e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2220      	movs	r2, #32
 8006934:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2200      	movs	r2, #0
 800693a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e067      	b.n	8006a12 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0304 	and.w	r3, r3, #4
 800694c:	2b00      	cmp	r3, #0
 800694e:	d04f      	beq.n	80069f0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	69db      	ldr	r3, [r3, #28]
 8006956:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800695a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800695e:	d147      	bne.n	80069f0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006968:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800697e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	461a      	mov	r2, r3
 8006986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006988:	637b      	str	r3, [r7, #52]	; 0x34
 800698a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800698e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e6      	bne.n	800696a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3308      	adds	r3, #8
 80069a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	e853 3f00 	ldrex	r3, [r3]
 80069aa:	613b      	str	r3, [r7, #16]
   return(result);
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f023 0301 	bic.w	r3, r3, #1
 80069b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3308      	adds	r3, #8
 80069ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80069bc:	623a      	str	r2, [r7, #32]
 80069be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c0:	69f9      	ldr	r1, [r7, #28]
 80069c2:	6a3a      	ldr	r2, [r7, #32]
 80069c4:	e841 2300 	strex	r3, r2, [r1]
 80069c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e5      	bne.n	800699c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2220      	movs	r2, #32
 80069d4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	2220      	movs	r2, #32
 80069da:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	2220      	movs	r2, #32
 80069e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e010      	b.n	8006a12 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	69da      	ldr	r2, [r3, #28]
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	4013      	ands	r3, r2
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	bf0c      	ite	eq
 8006a00:	2301      	moveq	r3, #1
 8006a02:	2300      	movne	r3, #0
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	461a      	mov	r2, r3
 8006a08:	79fb      	ldrb	r3, [r7, #7]
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	f43f af4a 	beq.w	80068a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3770      	adds	r7, #112	; 0x70
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}

08006a1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a1a:	b480      	push	{r7}
 8006a1c:	b095      	sub	sp, #84	; 0x54
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a2a:	e853 3f00 	ldrex	r3, [r3]
 8006a2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a40:	643b      	str	r3, [r7, #64]	; 0x40
 8006a42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a48:	e841 2300 	strex	r3, r2, [r1]
 8006a4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d1e6      	bne.n	8006a22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	3308      	adds	r3, #8
 8006a5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5c:	6a3b      	ldr	r3, [r7, #32]
 8006a5e:	e853 3f00 	ldrex	r3, [r3]
 8006a62:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	f023 0301 	bic.w	r3, r3, #1
 8006a6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3308      	adds	r3, #8
 8006a72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a7c:	e841 2300 	strex	r3, r2, [r1]
 8006a80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d1e5      	bne.n	8006a54 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d118      	bne.n	8006ac2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f023 0310 	bic.w	r3, r3, #16
 8006aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006aae:	61bb      	str	r3, [r7, #24]
 8006ab0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab2:	6979      	ldr	r1, [r7, #20]
 8006ab4:	69ba      	ldr	r2, [r7, #24]
 8006ab6:	e841 2300 	strex	r3, r2, [r1]
 8006aba:	613b      	str	r3, [r7, #16]
   return(result);
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d1e6      	bne.n	8006a90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2220      	movs	r2, #32
 8006ac6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006ad4:	bf00      	nop
 8006ad6:	3754      	adds	r7, #84	; 0x54
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006afe:	68f8      	ldr	r0, [r7, #12]
 8006b00:	f7ff fb3c 	bl	800617c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b04:	bf00      	nop
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b088      	sub	sp, #32
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b28:	61fb      	str	r3, [r7, #28]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	461a      	mov	r2, r3
 8006b30:	69fb      	ldr	r3, [r7, #28]
 8006b32:	61bb      	str	r3, [r7, #24]
 8006b34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b36:	6979      	ldr	r1, [r7, #20]
 8006b38:	69ba      	ldr	r2, [r7, #24]
 8006b3a:	e841 2300 	strex	r3, r2, [r1]
 8006b3e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d1e6      	bne.n	8006b14 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2220      	movs	r2, #32
 8006b4a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f7fa fc8a 	bl	800146c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b58:	bf00      	nop
 8006b5a:	3720      	adds	r7, #32
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}

08006b60 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b083      	sub	sp, #12
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b68:	bf00      	nop
 8006b6a:	370c      	adds	r7, #12
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b72:	4770      	bx	lr

08006b74 <__errno>:
 8006b74:	4b01      	ldr	r3, [pc, #4]	; (8006b7c <__errno+0x8>)
 8006b76:	6818      	ldr	r0, [r3, #0]
 8006b78:	4770      	bx	lr
 8006b7a:	bf00      	nop
 8006b7c:	2000001c 	.word	0x2000001c

08006b80 <__libc_init_array>:
 8006b80:	b570      	push	{r4, r5, r6, lr}
 8006b82:	4d0d      	ldr	r5, [pc, #52]	; (8006bb8 <__libc_init_array+0x38>)
 8006b84:	4c0d      	ldr	r4, [pc, #52]	; (8006bbc <__libc_init_array+0x3c>)
 8006b86:	1b64      	subs	r4, r4, r5
 8006b88:	10a4      	asrs	r4, r4, #2
 8006b8a:	2600      	movs	r6, #0
 8006b8c:	42a6      	cmp	r6, r4
 8006b8e:	d109      	bne.n	8006ba4 <__libc_init_array+0x24>
 8006b90:	4d0b      	ldr	r5, [pc, #44]	; (8006bc0 <__libc_init_array+0x40>)
 8006b92:	4c0c      	ldr	r4, [pc, #48]	; (8006bc4 <__libc_init_array+0x44>)
 8006b94:	f001 f912 	bl	8007dbc <_init>
 8006b98:	1b64      	subs	r4, r4, r5
 8006b9a:	10a4      	asrs	r4, r4, #2
 8006b9c:	2600      	movs	r6, #0
 8006b9e:	42a6      	cmp	r6, r4
 8006ba0:	d105      	bne.n	8006bae <__libc_init_array+0x2e>
 8006ba2:	bd70      	pop	{r4, r5, r6, pc}
 8006ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ba8:	4798      	blx	r3
 8006baa:	3601      	adds	r6, #1
 8006bac:	e7ee      	b.n	8006b8c <__libc_init_array+0xc>
 8006bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bb2:	4798      	blx	r3
 8006bb4:	3601      	adds	r6, #1
 8006bb6:	e7f2      	b.n	8006b9e <__libc_init_array+0x1e>
 8006bb8:	0800804c 	.word	0x0800804c
 8006bbc:	0800804c 	.word	0x0800804c
 8006bc0:	0800804c 	.word	0x0800804c
 8006bc4:	08008050 	.word	0x08008050

08006bc8 <memset>:
 8006bc8:	4402      	add	r2, r0
 8006bca:	4603      	mov	r3, r0
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d100      	bne.n	8006bd2 <memset+0xa>
 8006bd0:	4770      	bx	lr
 8006bd2:	f803 1b01 	strb.w	r1, [r3], #1
 8006bd6:	e7f9      	b.n	8006bcc <memset+0x4>

08006bd8 <siprintf>:
 8006bd8:	b40e      	push	{r1, r2, r3}
 8006bda:	b500      	push	{lr}
 8006bdc:	b09c      	sub	sp, #112	; 0x70
 8006bde:	ab1d      	add	r3, sp, #116	; 0x74
 8006be0:	9002      	str	r0, [sp, #8]
 8006be2:	9006      	str	r0, [sp, #24]
 8006be4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006be8:	4809      	ldr	r0, [pc, #36]	; (8006c10 <siprintf+0x38>)
 8006bea:	9107      	str	r1, [sp, #28]
 8006bec:	9104      	str	r1, [sp, #16]
 8006bee:	4909      	ldr	r1, [pc, #36]	; (8006c14 <siprintf+0x3c>)
 8006bf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bf4:	9105      	str	r1, [sp, #20]
 8006bf6:	6800      	ldr	r0, [r0, #0]
 8006bf8:	9301      	str	r3, [sp, #4]
 8006bfa:	a902      	add	r1, sp, #8
 8006bfc:	f000 f896 	bl	8006d2c <_svfiprintf_r>
 8006c00:	9b02      	ldr	r3, [sp, #8]
 8006c02:	2200      	movs	r2, #0
 8006c04:	701a      	strb	r2, [r3, #0]
 8006c06:	b01c      	add	sp, #112	; 0x70
 8006c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c0c:	b003      	add	sp, #12
 8006c0e:	4770      	bx	lr
 8006c10:	2000001c 	.word	0x2000001c
 8006c14:	ffff0208 	.word	0xffff0208

08006c18 <siscanf>:
 8006c18:	b40e      	push	{r1, r2, r3}
 8006c1a:	b510      	push	{r4, lr}
 8006c1c:	b09f      	sub	sp, #124	; 0x7c
 8006c1e:	ac21      	add	r4, sp, #132	; 0x84
 8006c20:	f44f 7101 	mov.w	r1, #516	; 0x204
 8006c24:	f854 2b04 	ldr.w	r2, [r4], #4
 8006c28:	9201      	str	r2, [sp, #4]
 8006c2a:	f8ad 101c 	strh.w	r1, [sp, #28]
 8006c2e:	9004      	str	r0, [sp, #16]
 8006c30:	9008      	str	r0, [sp, #32]
 8006c32:	f7f9 facd 	bl	80001d0 <strlen>
 8006c36:	4b0c      	ldr	r3, [pc, #48]	; (8006c68 <siscanf+0x50>)
 8006c38:	9005      	str	r0, [sp, #20]
 8006c3a:	9009      	str	r0, [sp, #36]	; 0x24
 8006c3c:	930d      	str	r3, [sp, #52]	; 0x34
 8006c3e:	480b      	ldr	r0, [pc, #44]	; (8006c6c <siscanf+0x54>)
 8006c40:	9a01      	ldr	r2, [sp, #4]
 8006c42:	6800      	ldr	r0, [r0, #0]
 8006c44:	9403      	str	r4, [sp, #12]
 8006c46:	2300      	movs	r3, #0
 8006c48:	9311      	str	r3, [sp, #68]	; 0x44
 8006c4a:	9316      	str	r3, [sp, #88]	; 0x58
 8006c4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c50:	f8ad 301e 	strh.w	r3, [sp, #30]
 8006c54:	a904      	add	r1, sp, #16
 8006c56:	4623      	mov	r3, r4
 8006c58:	f000 f9c2 	bl	8006fe0 <__ssvfiscanf_r>
 8006c5c:	b01f      	add	sp, #124	; 0x7c
 8006c5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c62:	b003      	add	sp, #12
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	08006c71 	.word	0x08006c71
 8006c6c:	2000001c 	.word	0x2000001c

08006c70 <__seofread>:
 8006c70:	2000      	movs	r0, #0
 8006c72:	4770      	bx	lr

08006c74 <__ssputs_r>:
 8006c74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c78:	688e      	ldr	r6, [r1, #8]
 8006c7a:	429e      	cmp	r6, r3
 8006c7c:	4682      	mov	sl, r0
 8006c7e:	460c      	mov	r4, r1
 8006c80:	4690      	mov	r8, r2
 8006c82:	461f      	mov	r7, r3
 8006c84:	d838      	bhi.n	8006cf8 <__ssputs_r+0x84>
 8006c86:	898a      	ldrh	r2, [r1, #12]
 8006c88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c8c:	d032      	beq.n	8006cf4 <__ssputs_r+0x80>
 8006c8e:	6825      	ldr	r5, [r4, #0]
 8006c90:	6909      	ldr	r1, [r1, #16]
 8006c92:	eba5 0901 	sub.w	r9, r5, r1
 8006c96:	6965      	ldr	r5, [r4, #20]
 8006c98:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	444b      	add	r3, r9
 8006ca4:	106d      	asrs	r5, r5, #1
 8006ca6:	429d      	cmp	r5, r3
 8006ca8:	bf38      	it	cc
 8006caa:	461d      	movcc	r5, r3
 8006cac:	0553      	lsls	r3, r2, #21
 8006cae:	d531      	bpl.n	8006d14 <__ssputs_r+0xa0>
 8006cb0:	4629      	mov	r1, r5
 8006cb2:	f000 ffdf 	bl	8007c74 <_malloc_r>
 8006cb6:	4606      	mov	r6, r0
 8006cb8:	b950      	cbnz	r0, 8006cd0 <__ssputs_r+0x5c>
 8006cba:	230c      	movs	r3, #12
 8006cbc:	f8ca 3000 	str.w	r3, [sl]
 8006cc0:	89a3      	ldrh	r3, [r4, #12]
 8006cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006cc6:	81a3      	strh	r3, [r4, #12]
 8006cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cd0:	6921      	ldr	r1, [r4, #16]
 8006cd2:	464a      	mov	r2, r9
 8006cd4:	f000 ff56 	bl	8007b84 <memcpy>
 8006cd8:	89a3      	ldrh	r3, [r4, #12]
 8006cda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ce2:	81a3      	strh	r3, [r4, #12]
 8006ce4:	6126      	str	r6, [r4, #16]
 8006ce6:	6165      	str	r5, [r4, #20]
 8006ce8:	444e      	add	r6, r9
 8006cea:	eba5 0509 	sub.w	r5, r5, r9
 8006cee:	6026      	str	r6, [r4, #0]
 8006cf0:	60a5      	str	r5, [r4, #8]
 8006cf2:	463e      	mov	r6, r7
 8006cf4:	42be      	cmp	r6, r7
 8006cf6:	d900      	bls.n	8006cfa <__ssputs_r+0x86>
 8006cf8:	463e      	mov	r6, r7
 8006cfa:	4632      	mov	r2, r6
 8006cfc:	6820      	ldr	r0, [r4, #0]
 8006cfe:	4641      	mov	r1, r8
 8006d00:	f000 ff4e 	bl	8007ba0 <memmove>
 8006d04:	68a3      	ldr	r3, [r4, #8]
 8006d06:	6822      	ldr	r2, [r4, #0]
 8006d08:	1b9b      	subs	r3, r3, r6
 8006d0a:	4432      	add	r2, r6
 8006d0c:	60a3      	str	r3, [r4, #8]
 8006d0e:	6022      	str	r2, [r4, #0]
 8006d10:	2000      	movs	r0, #0
 8006d12:	e7db      	b.n	8006ccc <__ssputs_r+0x58>
 8006d14:	462a      	mov	r2, r5
 8006d16:	f001 f807 	bl	8007d28 <_realloc_r>
 8006d1a:	4606      	mov	r6, r0
 8006d1c:	2800      	cmp	r0, #0
 8006d1e:	d1e1      	bne.n	8006ce4 <__ssputs_r+0x70>
 8006d20:	6921      	ldr	r1, [r4, #16]
 8006d22:	4650      	mov	r0, sl
 8006d24:	f000 ff56 	bl	8007bd4 <_free_r>
 8006d28:	e7c7      	b.n	8006cba <__ssputs_r+0x46>
	...

08006d2c <_svfiprintf_r>:
 8006d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d30:	4698      	mov	r8, r3
 8006d32:	898b      	ldrh	r3, [r1, #12]
 8006d34:	061b      	lsls	r3, r3, #24
 8006d36:	b09d      	sub	sp, #116	; 0x74
 8006d38:	4607      	mov	r7, r0
 8006d3a:	460d      	mov	r5, r1
 8006d3c:	4614      	mov	r4, r2
 8006d3e:	d50e      	bpl.n	8006d5e <_svfiprintf_r+0x32>
 8006d40:	690b      	ldr	r3, [r1, #16]
 8006d42:	b963      	cbnz	r3, 8006d5e <_svfiprintf_r+0x32>
 8006d44:	2140      	movs	r1, #64	; 0x40
 8006d46:	f000 ff95 	bl	8007c74 <_malloc_r>
 8006d4a:	6028      	str	r0, [r5, #0]
 8006d4c:	6128      	str	r0, [r5, #16]
 8006d4e:	b920      	cbnz	r0, 8006d5a <_svfiprintf_r+0x2e>
 8006d50:	230c      	movs	r3, #12
 8006d52:	603b      	str	r3, [r7, #0]
 8006d54:	f04f 30ff 	mov.w	r0, #4294967295
 8006d58:	e0d1      	b.n	8006efe <_svfiprintf_r+0x1d2>
 8006d5a:	2340      	movs	r3, #64	; 0x40
 8006d5c:	616b      	str	r3, [r5, #20]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	9309      	str	r3, [sp, #36]	; 0x24
 8006d62:	2320      	movs	r3, #32
 8006d64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d68:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d6c:	2330      	movs	r3, #48	; 0x30
 8006d6e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006f18 <_svfiprintf_r+0x1ec>
 8006d72:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d76:	f04f 0901 	mov.w	r9, #1
 8006d7a:	4623      	mov	r3, r4
 8006d7c:	469a      	mov	sl, r3
 8006d7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d82:	b10a      	cbz	r2, 8006d88 <_svfiprintf_r+0x5c>
 8006d84:	2a25      	cmp	r2, #37	; 0x25
 8006d86:	d1f9      	bne.n	8006d7c <_svfiprintf_r+0x50>
 8006d88:	ebba 0b04 	subs.w	fp, sl, r4
 8006d8c:	d00b      	beq.n	8006da6 <_svfiprintf_r+0x7a>
 8006d8e:	465b      	mov	r3, fp
 8006d90:	4622      	mov	r2, r4
 8006d92:	4629      	mov	r1, r5
 8006d94:	4638      	mov	r0, r7
 8006d96:	f7ff ff6d 	bl	8006c74 <__ssputs_r>
 8006d9a:	3001      	adds	r0, #1
 8006d9c:	f000 80aa 	beq.w	8006ef4 <_svfiprintf_r+0x1c8>
 8006da0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006da2:	445a      	add	r2, fp
 8006da4:	9209      	str	r2, [sp, #36]	; 0x24
 8006da6:	f89a 3000 	ldrb.w	r3, [sl]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 80a2 	beq.w	8006ef4 <_svfiprintf_r+0x1c8>
 8006db0:	2300      	movs	r3, #0
 8006db2:	f04f 32ff 	mov.w	r2, #4294967295
 8006db6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dba:	f10a 0a01 	add.w	sl, sl, #1
 8006dbe:	9304      	str	r3, [sp, #16]
 8006dc0:	9307      	str	r3, [sp, #28]
 8006dc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006dc6:	931a      	str	r3, [sp, #104]	; 0x68
 8006dc8:	4654      	mov	r4, sl
 8006dca:	2205      	movs	r2, #5
 8006dcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dd0:	4851      	ldr	r0, [pc, #324]	; (8006f18 <_svfiprintf_r+0x1ec>)
 8006dd2:	f7f9 fa05 	bl	80001e0 <memchr>
 8006dd6:	9a04      	ldr	r2, [sp, #16]
 8006dd8:	b9d8      	cbnz	r0, 8006e12 <_svfiprintf_r+0xe6>
 8006dda:	06d0      	lsls	r0, r2, #27
 8006ddc:	bf44      	itt	mi
 8006dde:	2320      	movmi	r3, #32
 8006de0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006de4:	0711      	lsls	r1, r2, #28
 8006de6:	bf44      	itt	mi
 8006de8:	232b      	movmi	r3, #43	; 0x2b
 8006dea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dee:	f89a 3000 	ldrb.w	r3, [sl]
 8006df2:	2b2a      	cmp	r3, #42	; 0x2a
 8006df4:	d015      	beq.n	8006e22 <_svfiprintf_r+0xf6>
 8006df6:	9a07      	ldr	r2, [sp, #28]
 8006df8:	4654      	mov	r4, sl
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	f04f 0c0a 	mov.w	ip, #10
 8006e00:	4621      	mov	r1, r4
 8006e02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e06:	3b30      	subs	r3, #48	; 0x30
 8006e08:	2b09      	cmp	r3, #9
 8006e0a:	d94e      	bls.n	8006eaa <_svfiprintf_r+0x17e>
 8006e0c:	b1b0      	cbz	r0, 8006e3c <_svfiprintf_r+0x110>
 8006e0e:	9207      	str	r2, [sp, #28]
 8006e10:	e014      	b.n	8006e3c <_svfiprintf_r+0x110>
 8006e12:	eba0 0308 	sub.w	r3, r0, r8
 8006e16:	fa09 f303 	lsl.w	r3, r9, r3
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	9304      	str	r3, [sp, #16]
 8006e1e:	46a2      	mov	sl, r4
 8006e20:	e7d2      	b.n	8006dc8 <_svfiprintf_r+0x9c>
 8006e22:	9b03      	ldr	r3, [sp, #12]
 8006e24:	1d19      	adds	r1, r3, #4
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	9103      	str	r1, [sp, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	bfbb      	ittet	lt
 8006e2e:	425b      	neglt	r3, r3
 8006e30:	f042 0202 	orrlt.w	r2, r2, #2
 8006e34:	9307      	strge	r3, [sp, #28]
 8006e36:	9307      	strlt	r3, [sp, #28]
 8006e38:	bfb8      	it	lt
 8006e3a:	9204      	strlt	r2, [sp, #16]
 8006e3c:	7823      	ldrb	r3, [r4, #0]
 8006e3e:	2b2e      	cmp	r3, #46	; 0x2e
 8006e40:	d10c      	bne.n	8006e5c <_svfiprintf_r+0x130>
 8006e42:	7863      	ldrb	r3, [r4, #1]
 8006e44:	2b2a      	cmp	r3, #42	; 0x2a
 8006e46:	d135      	bne.n	8006eb4 <_svfiprintf_r+0x188>
 8006e48:	9b03      	ldr	r3, [sp, #12]
 8006e4a:	1d1a      	adds	r2, r3, #4
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	9203      	str	r2, [sp, #12]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	bfb8      	it	lt
 8006e54:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e58:	3402      	adds	r4, #2
 8006e5a:	9305      	str	r3, [sp, #20]
 8006e5c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f28 <_svfiprintf_r+0x1fc>
 8006e60:	7821      	ldrb	r1, [r4, #0]
 8006e62:	2203      	movs	r2, #3
 8006e64:	4650      	mov	r0, sl
 8006e66:	f7f9 f9bb 	bl	80001e0 <memchr>
 8006e6a:	b140      	cbz	r0, 8006e7e <_svfiprintf_r+0x152>
 8006e6c:	2340      	movs	r3, #64	; 0x40
 8006e6e:	eba0 000a 	sub.w	r0, r0, sl
 8006e72:	fa03 f000 	lsl.w	r0, r3, r0
 8006e76:	9b04      	ldr	r3, [sp, #16]
 8006e78:	4303      	orrs	r3, r0
 8006e7a:	3401      	adds	r4, #1
 8006e7c:	9304      	str	r3, [sp, #16]
 8006e7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e82:	4826      	ldr	r0, [pc, #152]	; (8006f1c <_svfiprintf_r+0x1f0>)
 8006e84:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e88:	2206      	movs	r2, #6
 8006e8a:	f7f9 f9a9 	bl	80001e0 <memchr>
 8006e8e:	2800      	cmp	r0, #0
 8006e90:	d038      	beq.n	8006f04 <_svfiprintf_r+0x1d8>
 8006e92:	4b23      	ldr	r3, [pc, #140]	; (8006f20 <_svfiprintf_r+0x1f4>)
 8006e94:	bb1b      	cbnz	r3, 8006ede <_svfiprintf_r+0x1b2>
 8006e96:	9b03      	ldr	r3, [sp, #12]
 8006e98:	3307      	adds	r3, #7
 8006e9a:	f023 0307 	bic.w	r3, r3, #7
 8006e9e:	3308      	adds	r3, #8
 8006ea0:	9303      	str	r3, [sp, #12]
 8006ea2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ea4:	4433      	add	r3, r6
 8006ea6:	9309      	str	r3, [sp, #36]	; 0x24
 8006ea8:	e767      	b.n	8006d7a <_svfiprintf_r+0x4e>
 8006eaa:	fb0c 3202 	mla	r2, ip, r2, r3
 8006eae:	460c      	mov	r4, r1
 8006eb0:	2001      	movs	r0, #1
 8006eb2:	e7a5      	b.n	8006e00 <_svfiprintf_r+0xd4>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	3401      	adds	r4, #1
 8006eb8:	9305      	str	r3, [sp, #20]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	f04f 0c0a 	mov.w	ip, #10
 8006ec0:	4620      	mov	r0, r4
 8006ec2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ec6:	3a30      	subs	r2, #48	; 0x30
 8006ec8:	2a09      	cmp	r2, #9
 8006eca:	d903      	bls.n	8006ed4 <_svfiprintf_r+0x1a8>
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d0c5      	beq.n	8006e5c <_svfiprintf_r+0x130>
 8006ed0:	9105      	str	r1, [sp, #20]
 8006ed2:	e7c3      	b.n	8006e5c <_svfiprintf_r+0x130>
 8006ed4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ed8:	4604      	mov	r4, r0
 8006eda:	2301      	movs	r3, #1
 8006edc:	e7f0      	b.n	8006ec0 <_svfiprintf_r+0x194>
 8006ede:	ab03      	add	r3, sp, #12
 8006ee0:	9300      	str	r3, [sp, #0]
 8006ee2:	462a      	mov	r2, r5
 8006ee4:	4b0f      	ldr	r3, [pc, #60]	; (8006f24 <_svfiprintf_r+0x1f8>)
 8006ee6:	a904      	add	r1, sp, #16
 8006ee8:	4638      	mov	r0, r7
 8006eea:	f3af 8000 	nop.w
 8006eee:	1c42      	adds	r2, r0, #1
 8006ef0:	4606      	mov	r6, r0
 8006ef2:	d1d6      	bne.n	8006ea2 <_svfiprintf_r+0x176>
 8006ef4:	89ab      	ldrh	r3, [r5, #12]
 8006ef6:	065b      	lsls	r3, r3, #25
 8006ef8:	f53f af2c 	bmi.w	8006d54 <_svfiprintf_r+0x28>
 8006efc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006efe:	b01d      	add	sp, #116	; 0x74
 8006f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f04:	ab03      	add	r3, sp, #12
 8006f06:	9300      	str	r3, [sp, #0]
 8006f08:	462a      	mov	r2, r5
 8006f0a:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <_svfiprintf_r+0x1f8>)
 8006f0c:	a904      	add	r1, sp, #16
 8006f0e:	4638      	mov	r0, r7
 8006f10:	f000 fa4c 	bl	80073ac <_printf_i>
 8006f14:	e7eb      	b.n	8006eee <_svfiprintf_r+0x1c2>
 8006f16:	bf00      	nop
 8006f18:	08007e94 	.word	0x08007e94
 8006f1c:	08007e9e 	.word	0x08007e9e
 8006f20:	00000000 	.word	0x00000000
 8006f24:	08006c75 	.word	0x08006c75
 8006f28:	08007e9a 	.word	0x08007e9a

08006f2c <_sungetc_r>:
 8006f2c:	b538      	push	{r3, r4, r5, lr}
 8006f2e:	1c4b      	adds	r3, r1, #1
 8006f30:	4614      	mov	r4, r2
 8006f32:	d103      	bne.n	8006f3c <_sungetc_r+0x10>
 8006f34:	f04f 35ff 	mov.w	r5, #4294967295
 8006f38:	4628      	mov	r0, r5
 8006f3a:	bd38      	pop	{r3, r4, r5, pc}
 8006f3c:	8993      	ldrh	r3, [r2, #12]
 8006f3e:	f023 0320 	bic.w	r3, r3, #32
 8006f42:	8193      	strh	r3, [r2, #12]
 8006f44:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f46:	6852      	ldr	r2, [r2, #4]
 8006f48:	b2cd      	uxtb	r5, r1
 8006f4a:	b18b      	cbz	r3, 8006f70 <_sungetc_r+0x44>
 8006f4c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	dd08      	ble.n	8006f64 <_sungetc_r+0x38>
 8006f52:	6823      	ldr	r3, [r4, #0]
 8006f54:	1e5a      	subs	r2, r3, #1
 8006f56:	6022      	str	r2, [r4, #0]
 8006f58:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006f5c:	6863      	ldr	r3, [r4, #4]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	6063      	str	r3, [r4, #4]
 8006f62:	e7e9      	b.n	8006f38 <_sungetc_r+0xc>
 8006f64:	4621      	mov	r1, r4
 8006f66:	f000 fdd1 	bl	8007b0c <__submore>
 8006f6a:	2800      	cmp	r0, #0
 8006f6c:	d0f1      	beq.n	8006f52 <_sungetc_r+0x26>
 8006f6e:	e7e1      	b.n	8006f34 <_sungetc_r+0x8>
 8006f70:	6921      	ldr	r1, [r4, #16]
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	b151      	cbz	r1, 8006f8c <_sungetc_r+0x60>
 8006f76:	4299      	cmp	r1, r3
 8006f78:	d208      	bcs.n	8006f8c <_sungetc_r+0x60>
 8006f7a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006f7e:	42a9      	cmp	r1, r5
 8006f80:	d104      	bne.n	8006f8c <_sungetc_r+0x60>
 8006f82:	3b01      	subs	r3, #1
 8006f84:	3201      	adds	r2, #1
 8006f86:	6023      	str	r3, [r4, #0]
 8006f88:	6062      	str	r2, [r4, #4]
 8006f8a:	e7d5      	b.n	8006f38 <_sungetc_r+0xc>
 8006f8c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8006f90:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f94:	6363      	str	r3, [r4, #52]	; 0x34
 8006f96:	2303      	movs	r3, #3
 8006f98:	63a3      	str	r3, [r4, #56]	; 0x38
 8006f9a:	4623      	mov	r3, r4
 8006f9c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8006fa0:	6023      	str	r3, [r4, #0]
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e7dc      	b.n	8006f60 <_sungetc_r+0x34>

08006fa6 <__ssrefill_r>:
 8006fa6:	b510      	push	{r4, lr}
 8006fa8:	460c      	mov	r4, r1
 8006faa:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006fac:	b169      	cbz	r1, 8006fca <__ssrefill_r+0x24>
 8006fae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fb2:	4299      	cmp	r1, r3
 8006fb4:	d001      	beq.n	8006fba <__ssrefill_r+0x14>
 8006fb6:	f000 fe0d 	bl	8007bd4 <_free_r>
 8006fba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006fbc:	6063      	str	r3, [r4, #4]
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	6360      	str	r0, [r4, #52]	; 0x34
 8006fc2:	b113      	cbz	r3, 8006fca <__ssrefill_r+0x24>
 8006fc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006fc6:	6023      	str	r3, [r4, #0]
 8006fc8:	bd10      	pop	{r4, pc}
 8006fca:	6923      	ldr	r3, [r4, #16]
 8006fcc:	6023      	str	r3, [r4, #0]
 8006fce:	2300      	movs	r3, #0
 8006fd0:	6063      	str	r3, [r4, #4]
 8006fd2:	89a3      	ldrh	r3, [r4, #12]
 8006fd4:	f043 0320 	orr.w	r3, r3, #32
 8006fd8:	81a3      	strh	r3, [r4, #12]
 8006fda:	f04f 30ff 	mov.w	r0, #4294967295
 8006fde:	e7f3      	b.n	8006fc8 <__ssrefill_r+0x22>

08006fe0 <__ssvfiscanf_r>:
 8006fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe4:	460c      	mov	r4, r1
 8006fe6:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8006fea:	2100      	movs	r1, #0
 8006fec:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006ff0:	49b2      	ldr	r1, [pc, #712]	; (80072bc <__ssvfiscanf_r+0x2dc>)
 8006ff2:	91a0      	str	r1, [sp, #640]	; 0x280
 8006ff4:	f10d 0804 	add.w	r8, sp, #4
 8006ff8:	49b1      	ldr	r1, [pc, #708]	; (80072c0 <__ssvfiscanf_r+0x2e0>)
 8006ffa:	4fb2      	ldr	r7, [pc, #712]	; (80072c4 <__ssvfiscanf_r+0x2e4>)
 8006ffc:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80072c8 <__ssvfiscanf_r+0x2e8>
 8007000:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007004:	4606      	mov	r6, r0
 8007006:	91a1      	str	r1, [sp, #644]	; 0x284
 8007008:	9300      	str	r3, [sp, #0]
 800700a:	f892 a000 	ldrb.w	sl, [r2]
 800700e:	f1ba 0f00 	cmp.w	sl, #0
 8007012:	f000 8151 	beq.w	80072b8 <__ssvfiscanf_r+0x2d8>
 8007016:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800701a:	f013 0308 	ands.w	r3, r3, #8
 800701e:	f102 0501 	add.w	r5, r2, #1
 8007022:	d019      	beq.n	8007058 <__ssvfiscanf_r+0x78>
 8007024:	6863      	ldr	r3, [r4, #4]
 8007026:	2b00      	cmp	r3, #0
 8007028:	dd0f      	ble.n	800704a <__ssvfiscanf_r+0x6a>
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	781a      	ldrb	r2, [r3, #0]
 800702e:	5cba      	ldrb	r2, [r7, r2]
 8007030:	0712      	lsls	r2, r2, #28
 8007032:	d401      	bmi.n	8007038 <__ssvfiscanf_r+0x58>
 8007034:	462a      	mov	r2, r5
 8007036:	e7e8      	b.n	800700a <__ssvfiscanf_r+0x2a>
 8007038:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800703a:	3201      	adds	r2, #1
 800703c:	9245      	str	r2, [sp, #276]	; 0x114
 800703e:	6862      	ldr	r2, [r4, #4]
 8007040:	3301      	adds	r3, #1
 8007042:	3a01      	subs	r2, #1
 8007044:	6062      	str	r2, [r4, #4]
 8007046:	6023      	str	r3, [r4, #0]
 8007048:	e7ec      	b.n	8007024 <__ssvfiscanf_r+0x44>
 800704a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800704c:	4621      	mov	r1, r4
 800704e:	4630      	mov	r0, r6
 8007050:	4798      	blx	r3
 8007052:	2800      	cmp	r0, #0
 8007054:	d0e9      	beq.n	800702a <__ssvfiscanf_r+0x4a>
 8007056:	e7ed      	b.n	8007034 <__ssvfiscanf_r+0x54>
 8007058:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800705c:	f040 8083 	bne.w	8007166 <__ssvfiscanf_r+0x186>
 8007060:	9341      	str	r3, [sp, #260]	; 0x104
 8007062:	9343      	str	r3, [sp, #268]	; 0x10c
 8007064:	7853      	ldrb	r3, [r2, #1]
 8007066:	2b2a      	cmp	r3, #42	; 0x2a
 8007068:	bf02      	ittt	eq
 800706a:	2310      	moveq	r3, #16
 800706c:	1c95      	addeq	r5, r2, #2
 800706e:	9341      	streq	r3, [sp, #260]	; 0x104
 8007070:	220a      	movs	r2, #10
 8007072:	46ab      	mov	fp, r5
 8007074:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8007078:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800707c:	2b09      	cmp	r3, #9
 800707e:	d91d      	bls.n	80070bc <__ssvfiscanf_r+0xdc>
 8007080:	4891      	ldr	r0, [pc, #580]	; (80072c8 <__ssvfiscanf_r+0x2e8>)
 8007082:	2203      	movs	r2, #3
 8007084:	f7f9 f8ac 	bl	80001e0 <memchr>
 8007088:	b140      	cbz	r0, 800709c <__ssvfiscanf_r+0xbc>
 800708a:	2301      	movs	r3, #1
 800708c:	eba0 0009 	sub.w	r0, r0, r9
 8007090:	fa03 f000 	lsl.w	r0, r3, r0
 8007094:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007096:	4318      	orrs	r0, r3
 8007098:	9041      	str	r0, [sp, #260]	; 0x104
 800709a:	465d      	mov	r5, fp
 800709c:	f815 3b01 	ldrb.w	r3, [r5], #1
 80070a0:	2b78      	cmp	r3, #120	; 0x78
 80070a2:	d806      	bhi.n	80070b2 <__ssvfiscanf_r+0xd2>
 80070a4:	2b57      	cmp	r3, #87	; 0x57
 80070a6:	d810      	bhi.n	80070ca <__ssvfiscanf_r+0xea>
 80070a8:	2b25      	cmp	r3, #37	; 0x25
 80070aa:	d05c      	beq.n	8007166 <__ssvfiscanf_r+0x186>
 80070ac:	d856      	bhi.n	800715c <__ssvfiscanf_r+0x17c>
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d074      	beq.n	800719c <__ssvfiscanf_r+0x1bc>
 80070b2:	2303      	movs	r3, #3
 80070b4:	9347      	str	r3, [sp, #284]	; 0x11c
 80070b6:	230a      	movs	r3, #10
 80070b8:	9342      	str	r3, [sp, #264]	; 0x108
 80070ba:	e081      	b.n	80071c0 <__ssvfiscanf_r+0x1e0>
 80070bc:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80070be:	fb02 1303 	mla	r3, r2, r3, r1
 80070c2:	3b30      	subs	r3, #48	; 0x30
 80070c4:	9343      	str	r3, [sp, #268]	; 0x10c
 80070c6:	465d      	mov	r5, fp
 80070c8:	e7d3      	b.n	8007072 <__ssvfiscanf_r+0x92>
 80070ca:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80070ce:	2a20      	cmp	r2, #32
 80070d0:	d8ef      	bhi.n	80070b2 <__ssvfiscanf_r+0xd2>
 80070d2:	a101      	add	r1, pc, #4	; (adr r1, 80070d8 <__ssvfiscanf_r+0xf8>)
 80070d4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80070d8:	080071ab 	.word	0x080071ab
 80070dc:	080070b3 	.word	0x080070b3
 80070e0:	080070b3 	.word	0x080070b3
 80070e4:	08007209 	.word	0x08007209
 80070e8:	080070b3 	.word	0x080070b3
 80070ec:	080070b3 	.word	0x080070b3
 80070f0:	080070b3 	.word	0x080070b3
 80070f4:	080070b3 	.word	0x080070b3
 80070f8:	080070b3 	.word	0x080070b3
 80070fc:	080070b3 	.word	0x080070b3
 8007100:	080070b3 	.word	0x080070b3
 8007104:	0800721f 	.word	0x0800721f
 8007108:	080071f5 	.word	0x080071f5
 800710c:	08007163 	.word	0x08007163
 8007110:	08007163 	.word	0x08007163
 8007114:	08007163 	.word	0x08007163
 8007118:	080070b3 	.word	0x080070b3
 800711c:	080071f9 	.word	0x080071f9
 8007120:	080070b3 	.word	0x080070b3
 8007124:	080070b3 	.word	0x080070b3
 8007128:	080070b3 	.word	0x080070b3
 800712c:	080070b3 	.word	0x080070b3
 8007130:	0800722f 	.word	0x0800722f
 8007134:	08007201 	.word	0x08007201
 8007138:	080071a3 	.word	0x080071a3
 800713c:	080070b3 	.word	0x080070b3
 8007140:	080070b3 	.word	0x080070b3
 8007144:	0800722b 	.word	0x0800722b
 8007148:	080070b3 	.word	0x080070b3
 800714c:	080071f5 	.word	0x080071f5
 8007150:	080070b3 	.word	0x080070b3
 8007154:	080070b3 	.word	0x080070b3
 8007158:	080071ab 	.word	0x080071ab
 800715c:	3b45      	subs	r3, #69	; 0x45
 800715e:	2b02      	cmp	r3, #2
 8007160:	d8a7      	bhi.n	80070b2 <__ssvfiscanf_r+0xd2>
 8007162:	2305      	movs	r3, #5
 8007164:	e02b      	b.n	80071be <__ssvfiscanf_r+0x1de>
 8007166:	6863      	ldr	r3, [r4, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	dd0d      	ble.n	8007188 <__ssvfiscanf_r+0x1a8>
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	781a      	ldrb	r2, [r3, #0]
 8007170:	4552      	cmp	r2, sl
 8007172:	f040 80a1 	bne.w	80072b8 <__ssvfiscanf_r+0x2d8>
 8007176:	3301      	adds	r3, #1
 8007178:	6862      	ldr	r2, [r4, #4]
 800717a:	6023      	str	r3, [r4, #0]
 800717c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800717e:	3a01      	subs	r2, #1
 8007180:	3301      	adds	r3, #1
 8007182:	6062      	str	r2, [r4, #4]
 8007184:	9345      	str	r3, [sp, #276]	; 0x114
 8007186:	e755      	b.n	8007034 <__ssvfiscanf_r+0x54>
 8007188:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800718a:	4621      	mov	r1, r4
 800718c:	4630      	mov	r0, r6
 800718e:	4798      	blx	r3
 8007190:	2800      	cmp	r0, #0
 8007192:	d0eb      	beq.n	800716c <__ssvfiscanf_r+0x18c>
 8007194:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007196:	2800      	cmp	r0, #0
 8007198:	f040 8084 	bne.w	80072a4 <__ssvfiscanf_r+0x2c4>
 800719c:	f04f 30ff 	mov.w	r0, #4294967295
 80071a0:	e086      	b.n	80072b0 <__ssvfiscanf_r+0x2d0>
 80071a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80071a4:	f042 0220 	orr.w	r2, r2, #32
 80071a8:	9241      	str	r2, [sp, #260]	; 0x104
 80071aa:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80071ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071b0:	9241      	str	r2, [sp, #260]	; 0x104
 80071b2:	2210      	movs	r2, #16
 80071b4:	2b6f      	cmp	r3, #111	; 0x6f
 80071b6:	9242      	str	r2, [sp, #264]	; 0x108
 80071b8:	bf34      	ite	cc
 80071ba:	2303      	movcc	r3, #3
 80071bc:	2304      	movcs	r3, #4
 80071be:	9347      	str	r3, [sp, #284]	; 0x11c
 80071c0:	6863      	ldr	r3, [r4, #4]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	dd41      	ble.n	800724a <__ssvfiscanf_r+0x26a>
 80071c6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80071c8:	0659      	lsls	r1, r3, #25
 80071ca:	d404      	bmi.n	80071d6 <__ssvfiscanf_r+0x1f6>
 80071cc:	6823      	ldr	r3, [r4, #0]
 80071ce:	781a      	ldrb	r2, [r3, #0]
 80071d0:	5cba      	ldrb	r2, [r7, r2]
 80071d2:	0712      	lsls	r2, r2, #28
 80071d4:	d440      	bmi.n	8007258 <__ssvfiscanf_r+0x278>
 80071d6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80071d8:	2b02      	cmp	r3, #2
 80071da:	dc4f      	bgt.n	800727c <__ssvfiscanf_r+0x29c>
 80071dc:	466b      	mov	r3, sp
 80071de:	4622      	mov	r2, r4
 80071e0:	a941      	add	r1, sp, #260	; 0x104
 80071e2:	4630      	mov	r0, r6
 80071e4:	f000 fa08 	bl	80075f8 <_scanf_chars>
 80071e8:	2801      	cmp	r0, #1
 80071ea:	d065      	beq.n	80072b8 <__ssvfiscanf_r+0x2d8>
 80071ec:	2802      	cmp	r0, #2
 80071ee:	f47f af21 	bne.w	8007034 <__ssvfiscanf_r+0x54>
 80071f2:	e7cf      	b.n	8007194 <__ssvfiscanf_r+0x1b4>
 80071f4:	220a      	movs	r2, #10
 80071f6:	e7dd      	b.n	80071b4 <__ssvfiscanf_r+0x1d4>
 80071f8:	2300      	movs	r3, #0
 80071fa:	9342      	str	r3, [sp, #264]	; 0x108
 80071fc:	2303      	movs	r3, #3
 80071fe:	e7de      	b.n	80071be <__ssvfiscanf_r+0x1de>
 8007200:	2308      	movs	r3, #8
 8007202:	9342      	str	r3, [sp, #264]	; 0x108
 8007204:	2304      	movs	r3, #4
 8007206:	e7da      	b.n	80071be <__ssvfiscanf_r+0x1de>
 8007208:	4629      	mov	r1, r5
 800720a:	4640      	mov	r0, r8
 800720c:	f000 fb40 	bl	8007890 <__sccl>
 8007210:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007212:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007216:	9341      	str	r3, [sp, #260]	; 0x104
 8007218:	4605      	mov	r5, r0
 800721a:	2301      	movs	r3, #1
 800721c:	e7cf      	b.n	80071be <__ssvfiscanf_r+0x1de>
 800721e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007220:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007224:	9341      	str	r3, [sp, #260]	; 0x104
 8007226:	2300      	movs	r3, #0
 8007228:	e7c9      	b.n	80071be <__ssvfiscanf_r+0x1de>
 800722a:	2302      	movs	r3, #2
 800722c:	e7c7      	b.n	80071be <__ssvfiscanf_r+0x1de>
 800722e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007230:	06c3      	lsls	r3, r0, #27
 8007232:	f53f aeff 	bmi.w	8007034 <__ssvfiscanf_r+0x54>
 8007236:	9b00      	ldr	r3, [sp, #0]
 8007238:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800723a:	1d19      	adds	r1, r3, #4
 800723c:	9100      	str	r1, [sp, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	07c0      	lsls	r0, r0, #31
 8007242:	bf4c      	ite	mi
 8007244:	801a      	strhmi	r2, [r3, #0]
 8007246:	601a      	strpl	r2, [r3, #0]
 8007248:	e6f4      	b.n	8007034 <__ssvfiscanf_r+0x54>
 800724a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800724c:	4621      	mov	r1, r4
 800724e:	4630      	mov	r0, r6
 8007250:	4798      	blx	r3
 8007252:	2800      	cmp	r0, #0
 8007254:	d0b7      	beq.n	80071c6 <__ssvfiscanf_r+0x1e6>
 8007256:	e79d      	b.n	8007194 <__ssvfiscanf_r+0x1b4>
 8007258:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800725a:	3201      	adds	r2, #1
 800725c:	9245      	str	r2, [sp, #276]	; 0x114
 800725e:	6862      	ldr	r2, [r4, #4]
 8007260:	3a01      	subs	r2, #1
 8007262:	2a00      	cmp	r2, #0
 8007264:	6062      	str	r2, [r4, #4]
 8007266:	dd02      	ble.n	800726e <__ssvfiscanf_r+0x28e>
 8007268:	3301      	adds	r3, #1
 800726a:	6023      	str	r3, [r4, #0]
 800726c:	e7ae      	b.n	80071cc <__ssvfiscanf_r+0x1ec>
 800726e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007270:	4621      	mov	r1, r4
 8007272:	4630      	mov	r0, r6
 8007274:	4798      	blx	r3
 8007276:	2800      	cmp	r0, #0
 8007278:	d0a8      	beq.n	80071cc <__ssvfiscanf_r+0x1ec>
 800727a:	e78b      	b.n	8007194 <__ssvfiscanf_r+0x1b4>
 800727c:	2b04      	cmp	r3, #4
 800727e:	dc06      	bgt.n	800728e <__ssvfiscanf_r+0x2ae>
 8007280:	466b      	mov	r3, sp
 8007282:	4622      	mov	r2, r4
 8007284:	a941      	add	r1, sp, #260	; 0x104
 8007286:	4630      	mov	r0, r6
 8007288:	f000 fa0e 	bl	80076a8 <_scanf_i>
 800728c:	e7ac      	b.n	80071e8 <__ssvfiscanf_r+0x208>
 800728e:	4b0f      	ldr	r3, [pc, #60]	; (80072cc <__ssvfiscanf_r+0x2ec>)
 8007290:	2b00      	cmp	r3, #0
 8007292:	f43f aecf 	beq.w	8007034 <__ssvfiscanf_r+0x54>
 8007296:	466b      	mov	r3, sp
 8007298:	4622      	mov	r2, r4
 800729a:	a941      	add	r1, sp, #260	; 0x104
 800729c:	4630      	mov	r0, r6
 800729e:	f3af 8000 	nop.w
 80072a2:	e7a1      	b.n	80071e8 <__ssvfiscanf_r+0x208>
 80072a4:	89a3      	ldrh	r3, [r4, #12]
 80072a6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80072aa:	bf18      	it	ne
 80072ac:	f04f 30ff 	movne.w	r0, #4294967295
 80072b0:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80072b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80072ba:	e7f9      	b.n	80072b0 <__ssvfiscanf_r+0x2d0>
 80072bc:	08006f2d 	.word	0x08006f2d
 80072c0:	08006fa7 	.word	0x08006fa7
 80072c4:	08007ee3 	.word	0x08007ee3
 80072c8:	08007e9a 	.word	0x08007e9a
 80072cc:	00000000 	.word	0x00000000

080072d0 <_printf_common>:
 80072d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072d4:	4616      	mov	r6, r2
 80072d6:	4699      	mov	r9, r3
 80072d8:	688a      	ldr	r2, [r1, #8]
 80072da:	690b      	ldr	r3, [r1, #16]
 80072dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072e0:	4293      	cmp	r3, r2
 80072e2:	bfb8      	it	lt
 80072e4:	4613      	movlt	r3, r2
 80072e6:	6033      	str	r3, [r6, #0]
 80072e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80072ec:	4607      	mov	r7, r0
 80072ee:	460c      	mov	r4, r1
 80072f0:	b10a      	cbz	r2, 80072f6 <_printf_common+0x26>
 80072f2:	3301      	adds	r3, #1
 80072f4:	6033      	str	r3, [r6, #0]
 80072f6:	6823      	ldr	r3, [r4, #0]
 80072f8:	0699      	lsls	r1, r3, #26
 80072fa:	bf42      	ittt	mi
 80072fc:	6833      	ldrmi	r3, [r6, #0]
 80072fe:	3302      	addmi	r3, #2
 8007300:	6033      	strmi	r3, [r6, #0]
 8007302:	6825      	ldr	r5, [r4, #0]
 8007304:	f015 0506 	ands.w	r5, r5, #6
 8007308:	d106      	bne.n	8007318 <_printf_common+0x48>
 800730a:	f104 0a19 	add.w	sl, r4, #25
 800730e:	68e3      	ldr	r3, [r4, #12]
 8007310:	6832      	ldr	r2, [r6, #0]
 8007312:	1a9b      	subs	r3, r3, r2
 8007314:	42ab      	cmp	r3, r5
 8007316:	dc26      	bgt.n	8007366 <_printf_common+0x96>
 8007318:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800731c:	1e13      	subs	r3, r2, #0
 800731e:	6822      	ldr	r2, [r4, #0]
 8007320:	bf18      	it	ne
 8007322:	2301      	movne	r3, #1
 8007324:	0692      	lsls	r2, r2, #26
 8007326:	d42b      	bmi.n	8007380 <_printf_common+0xb0>
 8007328:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800732c:	4649      	mov	r1, r9
 800732e:	4638      	mov	r0, r7
 8007330:	47c0      	blx	r8
 8007332:	3001      	adds	r0, #1
 8007334:	d01e      	beq.n	8007374 <_printf_common+0xa4>
 8007336:	6823      	ldr	r3, [r4, #0]
 8007338:	68e5      	ldr	r5, [r4, #12]
 800733a:	6832      	ldr	r2, [r6, #0]
 800733c:	f003 0306 	and.w	r3, r3, #6
 8007340:	2b04      	cmp	r3, #4
 8007342:	bf08      	it	eq
 8007344:	1aad      	subeq	r5, r5, r2
 8007346:	68a3      	ldr	r3, [r4, #8]
 8007348:	6922      	ldr	r2, [r4, #16]
 800734a:	bf0c      	ite	eq
 800734c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007350:	2500      	movne	r5, #0
 8007352:	4293      	cmp	r3, r2
 8007354:	bfc4      	itt	gt
 8007356:	1a9b      	subgt	r3, r3, r2
 8007358:	18ed      	addgt	r5, r5, r3
 800735a:	2600      	movs	r6, #0
 800735c:	341a      	adds	r4, #26
 800735e:	42b5      	cmp	r5, r6
 8007360:	d11a      	bne.n	8007398 <_printf_common+0xc8>
 8007362:	2000      	movs	r0, #0
 8007364:	e008      	b.n	8007378 <_printf_common+0xa8>
 8007366:	2301      	movs	r3, #1
 8007368:	4652      	mov	r2, sl
 800736a:	4649      	mov	r1, r9
 800736c:	4638      	mov	r0, r7
 800736e:	47c0      	blx	r8
 8007370:	3001      	adds	r0, #1
 8007372:	d103      	bne.n	800737c <_printf_common+0xac>
 8007374:	f04f 30ff 	mov.w	r0, #4294967295
 8007378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800737c:	3501      	adds	r5, #1
 800737e:	e7c6      	b.n	800730e <_printf_common+0x3e>
 8007380:	18e1      	adds	r1, r4, r3
 8007382:	1c5a      	adds	r2, r3, #1
 8007384:	2030      	movs	r0, #48	; 0x30
 8007386:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800738a:	4422      	add	r2, r4
 800738c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007390:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007394:	3302      	adds	r3, #2
 8007396:	e7c7      	b.n	8007328 <_printf_common+0x58>
 8007398:	2301      	movs	r3, #1
 800739a:	4622      	mov	r2, r4
 800739c:	4649      	mov	r1, r9
 800739e:	4638      	mov	r0, r7
 80073a0:	47c0      	blx	r8
 80073a2:	3001      	adds	r0, #1
 80073a4:	d0e6      	beq.n	8007374 <_printf_common+0xa4>
 80073a6:	3601      	adds	r6, #1
 80073a8:	e7d9      	b.n	800735e <_printf_common+0x8e>
	...

080073ac <_printf_i>:
 80073ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073b0:	460c      	mov	r4, r1
 80073b2:	4691      	mov	r9, r2
 80073b4:	7e27      	ldrb	r7, [r4, #24]
 80073b6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80073b8:	2f78      	cmp	r7, #120	; 0x78
 80073ba:	4680      	mov	r8, r0
 80073bc:	469a      	mov	sl, r3
 80073be:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80073c2:	d807      	bhi.n	80073d4 <_printf_i+0x28>
 80073c4:	2f62      	cmp	r7, #98	; 0x62
 80073c6:	d80a      	bhi.n	80073de <_printf_i+0x32>
 80073c8:	2f00      	cmp	r7, #0
 80073ca:	f000 80d8 	beq.w	800757e <_printf_i+0x1d2>
 80073ce:	2f58      	cmp	r7, #88	; 0x58
 80073d0:	f000 80a3 	beq.w	800751a <_printf_i+0x16e>
 80073d4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80073d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073dc:	e03a      	b.n	8007454 <_printf_i+0xa8>
 80073de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073e2:	2b15      	cmp	r3, #21
 80073e4:	d8f6      	bhi.n	80073d4 <_printf_i+0x28>
 80073e6:	a001      	add	r0, pc, #4	; (adr r0, 80073ec <_printf_i+0x40>)
 80073e8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80073ec:	08007445 	.word	0x08007445
 80073f0:	08007459 	.word	0x08007459
 80073f4:	080073d5 	.word	0x080073d5
 80073f8:	080073d5 	.word	0x080073d5
 80073fc:	080073d5 	.word	0x080073d5
 8007400:	080073d5 	.word	0x080073d5
 8007404:	08007459 	.word	0x08007459
 8007408:	080073d5 	.word	0x080073d5
 800740c:	080073d5 	.word	0x080073d5
 8007410:	080073d5 	.word	0x080073d5
 8007414:	080073d5 	.word	0x080073d5
 8007418:	08007565 	.word	0x08007565
 800741c:	08007489 	.word	0x08007489
 8007420:	08007547 	.word	0x08007547
 8007424:	080073d5 	.word	0x080073d5
 8007428:	080073d5 	.word	0x080073d5
 800742c:	08007587 	.word	0x08007587
 8007430:	080073d5 	.word	0x080073d5
 8007434:	08007489 	.word	0x08007489
 8007438:	080073d5 	.word	0x080073d5
 800743c:	080073d5 	.word	0x080073d5
 8007440:	0800754f 	.word	0x0800754f
 8007444:	680b      	ldr	r3, [r1, #0]
 8007446:	1d1a      	adds	r2, r3, #4
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	600a      	str	r2, [r1, #0]
 800744c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007450:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007454:	2301      	movs	r3, #1
 8007456:	e0a3      	b.n	80075a0 <_printf_i+0x1f4>
 8007458:	6825      	ldr	r5, [r4, #0]
 800745a:	6808      	ldr	r0, [r1, #0]
 800745c:	062e      	lsls	r6, r5, #24
 800745e:	f100 0304 	add.w	r3, r0, #4
 8007462:	d50a      	bpl.n	800747a <_printf_i+0xce>
 8007464:	6805      	ldr	r5, [r0, #0]
 8007466:	600b      	str	r3, [r1, #0]
 8007468:	2d00      	cmp	r5, #0
 800746a:	da03      	bge.n	8007474 <_printf_i+0xc8>
 800746c:	232d      	movs	r3, #45	; 0x2d
 800746e:	426d      	negs	r5, r5
 8007470:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007474:	485e      	ldr	r0, [pc, #376]	; (80075f0 <_printf_i+0x244>)
 8007476:	230a      	movs	r3, #10
 8007478:	e019      	b.n	80074ae <_printf_i+0x102>
 800747a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800747e:	6805      	ldr	r5, [r0, #0]
 8007480:	600b      	str	r3, [r1, #0]
 8007482:	bf18      	it	ne
 8007484:	b22d      	sxthne	r5, r5
 8007486:	e7ef      	b.n	8007468 <_printf_i+0xbc>
 8007488:	680b      	ldr	r3, [r1, #0]
 800748a:	6825      	ldr	r5, [r4, #0]
 800748c:	1d18      	adds	r0, r3, #4
 800748e:	6008      	str	r0, [r1, #0]
 8007490:	0628      	lsls	r0, r5, #24
 8007492:	d501      	bpl.n	8007498 <_printf_i+0xec>
 8007494:	681d      	ldr	r5, [r3, #0]
 8007496:	e002      	b.n	800749e <_printf_i+0xf2>
 8007498:	0669      	lsls	r1, r5, #25
 800749a:	d5fb      	bpl.n	8007494 <_printf_i+0xe8>
 800749c:	881d      	ldrh	r5, [r3, #0]
 800749e:	4854      	ldr	r0, [pc, #336]	; (80075f0 <_printf_i+0x244>)
 80074a0:	2f6f      	cmp	r7, #111	; 0x6f
 80074a2:	bf0c      	ite	eq
 80074a4:	2308      	moveq	r3, #8
 80074a6:	230a      	movne	r3, #10
 80074a8:	2100      	movs	r1, #0
 80074aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074ae:	6866      	ldr	r6, [r4, #4]
 80074b0:	60a6      	str	r6, [r4, #8]
 80074b2:	2e00      	cmp	r6, #0
 80074b4:	bfa2      	ittt	ge
 80074b6:	6821      	ldrge	r1, [r4, #0]
 80074b8:	f021 0104 	bicge.w	r1, r1, #4
 80074bc:	6021      	strge	r1, [r4, #0]
 80074be:	b90d      	cbnz	r5, 80074c4 <_printf_i+0x118>
 80074c0:	2e00      	cmp	r6, #0
 80074c2:	d04d      	beq.n	8007560 <_printf_i+0x1b4>
 80074c4:	4616      	mov	r6, r2
 80074c6:	fbb5 f1f3 	udiv	r1, r5, r3
 80074ca:	fb03 5711 	mls	r7, r3, r1, r5
 80074ce:	5dc7      	ldrb	r7, [r0, r7]
 80074d0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80074d4:	462f      	mov	r7, r5
 80074d6:	42bb      	cmp	r3, r7
 80074d8:	460d      	mov	r5, r1
 80074da:	d9f4      	bls.n	80074c6 <_printf_i+0x11a>
 80074dc:	2b08      	cmp	r3, #8
 80074de:	d10b      	bne.n	80074f8 <_printf_i+0x14c>
 80074e0:	6823      	ldr	r3, [r4, #0]
 80074e2:	07df      	lsls	r7, r3, #31
 80074e4:	d508      	bpl.n	80074f8 <_printf_i+0x14c>
 80074e6:	6923      	ldr	r3, [r4, #16]
 80074e8:	6861      	ldr	r1, [r4, #4]
 80074ea:	4299      	cmp	r1, r3
 80074ec:	bfde      	ittt	le
 80074ee:	2330      	movle	r3, #48	; 0x30
 80074f0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80074f4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80074f8:	1b92      	subs	r2, r2, r6
 80074fa:	6122      	str	r2, [r4, #16]
 80074fc:	f8cd a000 	str.w	sl, [sp]
 8007500:	464b      	mov	r3, r9
 8007502:	aa03      	add	r2, sp, #12
 8007504:	4621      	mov	r1, r4
 8007506:	4640      	mov	r0, r8
 8007508:	f7ff fee2 	bl	80072d0 <_printf_common>
 800750c:	3001      	adds	r0, #1
 800750e:	d14c      	bne.n	80075aa <_printf_i+0x1fe>
 8007510:	f04f 30ff 	mov.w	r0, #4294967295
 8007514:	b004      	add	sp, #16
 8007516:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800751a:	4835      	ldr	r0, [pc, #212]	; (80075f0 <_printf_i+0x244>)
 800751c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	680e      	ldr	r6, [r1, #0]
 8007524:	061f      	lsls	r7, r3, #24
 8007526:	f856 5b04 	ldr.w	r5, [r6], #4
 800752a:	600e      	str	r6, [r1, #0]
 800752c:	d514      	bpl.n	8007558 <_printf_i+0x1ac>
 800752e:	07d9      	lsls	r1, r3, #31
 8007530:	bf44      	itt	mi
 8007532:	f043 0320 	orrmi.w	r3, r3, #32
 8007536:	6023      	strmi	r3, [r4, #0]
 8007538:	b91d      	cbnz	r5, 8007542 <_printf_i+0x196>
 800753a:	6823      	ldr	r3, [r4, #0]
 800753c:	f023 0320 	bic.w	r3, r3, #32
 8007540:	6023      	str	r3, [r4, #0]
 8007542:	2310      	movs	r3, #16
 8007544:	e7b0      	b.n	80074a8 <_printf_i+0xfc>
 8007546:	6823      	ldr	r3, [r4, #0]
 8007548:	f043 0320 	orr.w	r3, r3, #32
 800754c:	6023      	str	r3, [r4, #0]
 800754e:	2378      	movs	r3, #120	; 0x78
 8007550:	4828      	ldr	r0, [pc, #160]	; (80075f4 <_printf_i+0x248>)
 8007552:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007556:	e7e3      	b.n	8007520 <_printf_i+0x174>
 8007558:	065e      	lsls	r6, r3, #25
 800755a:	bf48      	it	mi
 800755c:	b2ad      	uxthmi	r5, r5
 800755e:	e7e6      	b.n	800752e <_printf_i+0x182>
 8007560:	4616      	mov	r6, r2
 8007562:	e7bb      	b.n	80074dc <_printf_i+0x130>
 8007564:	680b      	ldr	r3, [r1, #0]
 8007566:	6826      	ldr	r6, [r4, #0]
 8007568:	6960      	ldr	r0, [r4, #20]
 800756a:	1d1d      	adds	r5, r3, #4
 800756c:	600d      	str	r5, [r1, #0]
 800756e:	0635      	lsls	r5, r6, #24
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	d501      	bpl.n	8007578 <_printf_i+0x1cc>
 8007574:	6018      	str	r0, [r3, #0]
 8007576:	e002      	b.n	800757e <_printf_i+0x1d2>
 8007578:	0671      	lsls	r1, r6, #25
 800757a:	d5fb      	bpl.n	8007574 <_printf_i+0x1c8>
 800757c:	8018      	strh	r0, [r3, #0]
 800757e:	2300      	movs	r3, #0
 8007580:	6123      	str	r3, [r4, #16]
 8007582:	4616      	mov	r6, r2
 8007584:	e7ba      	b.n	80074fc <_printf_i+0x150>
 8007586:	680b      	ldr	r3, [r1, #0]
 8007588:	1d1a      	adds	r2, r3, #4
 800758a:	600a      	str	r2, [r1, #0]
 800758c:	681e      	ldr	r6, [r3, #0]
 800758e:	6862      	ldr	r2, [r4, #4]
 8007590:	2100      	movs	r1, #0
 8007592:	4630      	mov	r0, r6
 8007594:	f7f8 fe24 	bl	80001e0 <memchr>
 8007598:	b108      	cbz	r0, 800759e <_printf_i+0x1f2>
 800759a:	1b80      	subs	r0, r0, r6
 800759c:	6060      	str	r0, [r4, #4]
 800759e:	6863      	ldr	r3, [r4, #4]
 80075a0:	6123      	str	r3, [r4, #16]
 80075a2:	2300      	movs	r3, #0
 80075a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075a8:	e7a8      	b.n	80074fc <_printf_i+0x150>
 80075aa:	6923      	ldr	r3, [r4, #16]
 80075ac:	4632      	mov	r2, r6
 80075ae:	4649      	mov	r1, r9
 80075b0:	4640      	mov	r0, r8
 80075b2:	47d0      	blx	sl
 80075b4:	3001      	adds	r0, #1
 80075b6:	d0ab      	beq.n	8007510 <_printf_i+0x164>
 80075b8:	6823      	ldr	r3, [r4, #0]
 80075ba:	079b      	lsls	r3, r3, #30
 80075bc:	d413      	bmi.n	80075e6 <_printf_i+0x23a>
 80075be:	68e0      	ldr	r0, [r4, #12]
 80075c0:	9b03      	ldr	r3, [sp, #12]
 80075c2:	4298      	cmp	r0, r3
 80075c4:	bfb8      	it	lt
 80075c6:	4618      	movlt	r0, r3
 80075c8:	e7a4      	b.n	8007514 <_printf_i+0x168>
 80075ca:	2301      	movs	r3, #1
 80075cc:	4632      	mov	r2, r6
 80075ce:	4649      	mov	r1, r9
 80075d0:	4640      	mov	r0, r8
 80075d2:	47d0      	blx	sl
 80075d4:	3001      	adds	r0, #1
 80075d6:	d09b      	beq.n	8007510 <_printf_i+0x164>
 80075d8:	3501      	adds	r5, #1
 80075da:	68e3      	ldr	r3, [r4, #12]
 80075dc:	9903      	ldr	r1, [sp, #12]
 80075de:	1a5b      	subs	r3, r3, r1
 80075e0:	42ab      	cmp	r3, r5
 80075e2:	dcf2      	bgt.n	80075ca <_printf_i+0x21e>
 80075e4:	e7eb      	b.n	80075be <_printf_i+0x212>
 80075e6:	2500      	movs	r5, #0
 80075e8:	f104 0619 	add.w	r6, r4, #25
 80075ec:	e7f5      	b.n	80075da <_printf_i+0x22e>
 80075ee:	bf00      	nop
 80075f0:	08007ea5 	.word	0x08007ea5
 80075f4:	08007eb6 	.word	0x08007eb6

080075f8 <_scanf_chars>:
 80075f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075fc:	4615      	mov	r5, r2
 80075fe:	688a      	ldr	r2, [r1, #8]
 8007600:	4680      	mov	r8, r0
 8007602:	460c      	mov	r4, r1
 8007604:	b932      	cbnz	r2, 8007614 <_scanf_chars+0x1c>
 8007606:	698a      	ldr	r2, [r1, #24]
 8007608:	2a00      	cmp	r2, #0
 800760a:	bf0c      	ite	eq
 800760c:	2201      	moveq	r2, #1
 800760e:	f04f 32ff 	movne.w	r2, #4294967295
 8007612:	608a      	str	r2, [r1, #8]
 8007614:	6822      	ldr	r2, [r4, #0]
 8007616:	f8df 908c 	ldr.w	r9, [pc, #140]	; 80076a4 <_scanf_chars+0xac>
 800761a:	06d1      	lsls	r1, r2, #27
 800761c:	bf5f      	itttt	pl
 800761e:	681a      	ldrpl	r2, [r3, #0]
 8007620:	1d11      	addpl	r1, r2, #4
 8007622:	6019      	strpl	r1, [r3, #0]
 8007624:	6816      	ldrpl	r6, [r2, #0]
 8007626:	2700      	movs	r7, #0
 8007628:	69a0      	ldr	r0, [r4, #24]
 800762a:	b188      	cbz	r0, 8007650 <_scanf_chars+0x58>
 800762c:	2801      	cmp	r0, #1
 800762e:	d107      	bne.n	8007640 <_scanf_chars+0x48>
 8007630:	682b      	ldr	r3, [r5, #0]
 8007632:	781a      	ldrb	r2, [r3, #0]
 8007634:	6963      	ldr	r3, [r4, #20]
 8007636:	5c9b      	ldrb	r3, [r3, r2]
 8007638:	b953      	cbnz	r3, 8007650 <_scanf_chars+0x58>
 800763a:	bb27      	cbnz	r7, 8007686 <_scanf_chars+0x8e>
 800763c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007640:	2802      	cmp	r0, #2
 8007642:	d120      	bne.n	8007686 <_scanf_chars+0x8e>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	781b      	ldrb	r3, [r3, #0]
 8007648:	f813 3009 	ldrb.w	r3, [r3, r9]
 800764c:	071b      	lsls	r3, r3, #28
 800764e:	d41a      	bmi.n	8007686 <_scanf_chars+0x8e>
 8007650:	6823      	ldr	r3, [r4, #0]
 8007652:	06da      	lsls	r2, r3, #27
 8007654:	bf5e      	ittt	pl
 8007656:	682b      	ldrpl	r3, [r5, #0]
 8007658:	781b      	ldrbpl	r3, [r3, #0]
 800765a:	f806 3b01 	strbpl.w	r3, [r6], #1
 800765e:	682a      	ldr	r2, [r5, #0]
 8007660:	686b      	ldr	r3, [r5, #4]
 8007662:	3201      	adds	r2, #1
 8007664:	602a      	str	r2, [r5, #0]
 8007666:	68a2      	ldr	r2, [r4, #8]
 8007668:	3b01      	subs	r3, #1
 800766a:	3a01      	subs	r2, #1
 800766c:	606b      	str	r3, [r5, #4]
 800766e:	3701      	adds	r7, #1
 8007670:	60a2      	str	r2, [r4, #8]
 8007672:	b142      	cbz	r2, 8007686 <_scanf_chars+0x8e>
 8007674:	2b00      	cmp	r3, #0
 8007676:	dcd7      	bgt.n	8007628 <_scanf_chars+0x30>
 8007678:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800767c:	4629      	mov	r1, r5
 800767e:	4640      	mov	r0, r8
 8007680:	4798      	blx	r3
 8007682:	2800      	cmp	r0, #0
 8007684:	d0d0      	beq.n	8007628 <_scanf_chars+0x30>
 8007686:	6823      	ldr	r3, [r4, #0]
 8007688:	f013 0310 	ands.w	r3, r3, #16
 800768c:	d105      	bne.n	800769a <_scanf_chars+0xa2>
 800768e:	68e2      	ldr	r2, [r4, #12]
 8007690:	3201      	adds	r2, #1
 8007692:	60e2      	str	r2, [r4, #12]
 8007694:	69a2      	ldr	r2, [r4, #24]
 8007696:	b102      	cbz	r2, 800769a <_scanf_chars+0xa2>
 8007698:	7033      	strb	r3, [r6, #0]
 800769a:	6923      	ldr	r3, [r4, #16]
 800769c:	441f      	add	r7, r3
 800769e:	6127      	str	r7, [r4, #16]
 80076a0:	2000      	movs	r0, #0
 80076a2:	e7cb      	b.n	800763c <_scanf_chars+0x44>
 80076a4:	08007ee3 	.word	0x08007ee3

080076a8 <_scanf_i>:
 80076a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ac:	4698      	mov	r8, r3
 80076ae:	4b74      	ldr	r3, [pc, #464]	; (8007880 <_scanf_i+0x1d8>)
 80076b0:	460c      	mov	r4, r1
 80076b2:	4682      	mov	sl, r0
 80076b4:	4616      	mov	r6, r2
 80076b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80076ba:	b087      	sub	sp, #28
 80076bc:	ab03      	add	r3, sp, #12
 80076be:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80076c2:	4b70      	ldr	r3, [pc, #448]	; (8007884 <_scanf_i+0x1dc>)
 80076c4:	69a1      	ldr	r1, [r4, #24]
 80076c6:	4a70      	ldr	r2, [pc, #448]	; (8007888 <_scanf_i+0x1e0>)
 80076c8:	2903      	cmp	r1, #3
 80076ca:	bf18      	it	ne
 80076cc:	461a      	movne	r2, r3
 80076ce:	68a3      	ldr	r3, [r4, #8]
 80076d0:	9201      	str	r2, [sp, #4]
 80076d2:	1e5a      	subs	r2, r3, #1
 80076d4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80076d8:	bf88      	it	hi
 80076da:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80076de:	4627      	mov	r7, r4
 80076e0:	bf82      	ittt	hi
 80076e2:	eb03 0905 	addhi.w	r9, r3, r5
 80076e6:	f240 135d 	movwhi	r3, #349	; 0x15d
 80076ea:	60a3      	strhi	r3, [r4, #8]
 80076ec:	f857 3b1c 	ldr.w	r3, [r7], #28
 80076f0:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80076f4:	bf98      	it	ls
 80076f6:	f04f 0900 	movls.w	r9, #0
 80076fa:	6023      	str	r3, [r4, #0]
 80076fc:	463d      	mov	r5, r7
 80076fe:	f04f 0b00 	mov.w	fp, #0
 8007702:	6831      	ldr	r1, [r6, #0]
 8007704:	ab03      	add	r3, sp, #12
 8007706:	7809      	ldrb	r1, [r1, #0]
 8007708:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800770c:	2202      	movs	r2, #2
 800770e:	f7f8 fd67 	bl	80001e0 <memchr>
 8007712:	b328      	cbz	r0, 8007760 <_scanf_i+0xb8>
 8007714:	f1bb 0f01 	cmp.w	fp, #1
 8007718:	d159      	bne.n	80077ce <_scanf_i+0x126>
 800771a:	6862      	ldr	r2, [r4, #4]
 800771c:	b92a      	cbnz	r2, 800772a <_scanf_i+0x82>
 800771e:	6822      	ldr	r2, [r4, #0]
 8007720:	2308      	movs	r3, #8
 8007722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007726:	6063      	str	r3, [r4, #4]
 8007728:	6022      	str	r2, [r4, #0]
 800772a:	6822      	ldr	r2, [r4, #0]
 800772c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007730:	6022      	str	r2, [r4, #0]
 8007732:	68a2      	ldr	r2, [r4, #8]
 8007734:	1e51      	subs	r1, r2, #1
 8007736:	60a1      	str	r1, [r4, #8]
 8007738:	b192      	cbz	r2, 8007760 <_scanf_i+0xb8>
 800773a:	6832      	ldr	r2, [r6, #0]
 800773c:	1c51      	adds	r1, r2, #1
 800773e:	6031      	str	r1, [r6, #0]
 8007740:	7812      	ldrb	r2, [r2, #0]
 8007742:	f805 2b01 	strb.w	r2, [r5], #1
 8007746:	6872      	ldr	r2, [r6, #4]
 8007748:	3a01      	subs	r2, #1
 800774a:	2a00      	cmp	r2, #0
 800774c:	6072      	str	r2, [r6, #4]
 800774e:	dc07      	bgt.n	8007760 <_scanf_i+0xb8>
 8007750:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8007754:	4631      	mov	r1, r6
 8007756:	4650      	mov	r0, sl
 8007758:	4790      	blx	r2
 800775a:	2800      	cmp	r0, #0
 800775c:	f040 8085 	bne.w	800786a <_scanf_i+0x1c2>
 8007760:	f10b 0b01 	add.w	fp, fp, #1
 8007764:	f1bb 0f03 	cmp.w	fp, #3
 8007768:	d1cb      	bne.n	8007702 <_scanf_i+0x5a>
 800776a:	6863      	ldr	r3, [r4, #4]
 800776c:	b90b      	cbnz	r3, 8007772 <_scanf_i+0xca>
 800776e:	230a      	movs	r3, #10
 8007770:	6063      	str	r3, [r4, #4]
 8007772:	6863      	ldr	r3, [r4, #4]
 8007774:	4945      	ldr	r1, [pc, #276]	; (800788c <_scanf_i+0x1e4>)
 8007776:	6960      	ldr	r0, [r4, #20]
 8007778:	1ac9      	subs	r1, r1, r3
 800777a:	f000 f889 	bl	8007890 <__sccl>
 800777e:	f04f 0b00 	mov.w	fp, #0
 8007782:	68a3      	ldr	r3, [r4, #8]
 8007784:	6822      	ldr	r2, [r4, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d03d      	beq.n	8007806 <_scanf_i+0x15e>
 800778a:	6831      	ldr	r1, [r6, #0]
 800778c:	6960      	ldr	r0, [r4, #20]
 800778e:	f891 c000 	ldrb.w	ip, [r1]
 8007792:	f810 000c 	ldrb.w	r0, [r0, ip]
 8007796:	2800      	cmp	r0, #0
 8007798:	d035      	beq.n	8007806 <_scanf_i+0x15e>
 800779a:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800779e:	d124      	bne.n	80077ea <_scanf_i+0x142>
 80077a0:	0510      	lsls	r0, r2, #20
 80077a2:	d522      	bpl.n	80077ea <_scanf_i+0x142>
 80077a4:	f10b 0b01 	add.w	fp, fp, #1
 80077a8:	f1b9 0f00 	cmp.w	r9, #0
 80077ac:	d003      	beq.n	80077b6 <_scanf_i+0x10e>
 80077ae:	3301      	adds	r3, #1
 80077b0:	f109 39ff 	add.w	r9, r9, #4294967295
 80077b4:	60a3      	str	r3, [r4, #8]
 80077b6:	6873      	ldr	r3, [r6, #4]
 80077b8:	3b01      	subs	r3, #1
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	6073      	str	r3, [r6, #4]
 80077be:	dd1b      	ble.n	80077f8 <_scanf_i+0x150>
 80077c0:	6833      	ldr	r3, [r6, #0]
 80077c2:	3301      	adds	r3, #1
 80077c4:	6033      	str	r3, [r6, #0]
 80077c6:	68a3      	ldr	r3, [r4, #8]
 80077c8:	3b01      	subs	r3, #1
 80077ca:	60a3      	str	r3, [r4, #8]
 80077cc:	e7d9      	b.n	8007782 <_scanf_i+0xda>
 80077ce:	f1bb 0f02 	cmp.w	fp, #2
 80077d2:	d1ae      	bne.n	8007732 <_scanf_i+0x8a>
 80077d4:	6822      	ldr	r2, [r4, #0]
 80077d6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 80077da:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80077de:	d1bf      	bne.n	8007760 <_scanf_i+0xb8>
 80077e0:	2310      	movs	r3, #16
 80077e2:	6063      	str	r3, [r4, #4]
 80077e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077e8:	e7a2      	b.n	8007730 <_scanf_i+0x88>
 80077ea:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 80077ee:	6022      	str	r2, [r4, #0]
 80077f0:	780b      	ldrb	r3, [r1, #0]
 80077f2:	f805 3b01 	strb.w	r3, [r5], #1
 80077f6:	e7de      	b.n	80077b6 <_scanf_i+0x10e>
 80077f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80077fc:	4631      	mov	r1, r6
 80077fe:	4650      	mov	r0, sl
 8007800:	4798      	blx	r3
 8007802:	2800      	cmp	r0, #0
 8007804:	d0df      	beq.n	80077c6 <_scanf_i+0x11e>
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	05d9      	lsls	r1, r3, #23
 800780a:	d50d      	bpl.n	8007828 <_scanf_i+0x180>
 800780c:	42bd      	cmp	r5, r7
 800780e:	d909      	bls.n	8007824 <_scanf_i+0x17c>
 8007810:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007814:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007818:	4632      	mov	r2, r6
 800781a:	4650      	mov	r0, sl
 800781c:	4798      	blx	r3
 800781e:	f105 39ff 	add.w	r9, r5, #4294967295
 8007822:	464d      	mov	r5, r9
 8007824:	42bd      	cmp	r5, r7
 8007826:	d028      	beq.n	800787a <_scanf_i+0x1d2>
 8007828:	6822      	ldr	r2, [r4, #0]
 800782a:	f012 0210 	ands.w	r2, r2, #16
 800782e:	d113      	bne.n	8007858 <_scanf_i+0x1b0>
 8007830:	702a      	strb	r2, [r5, #0]
 8007832:	6863      	ldr	r3, [r4, #4]
 8007834:	9e01      	ldr	r6, [sp, #4]
 8007836:	4639      	mov	r1, r7
 8007838:	4650      	mov	r0, sl
 800783a:	47b0      	blx	r6
 800783c:	f8d8 3000 	ldr.w	r3, [r8]
 8007840:	6821      	ldr	r1, [r4, #0]
 8007842:	1d1a      	adds	r2, r3, #4
 8007844:	f8c8 2000 	str.w	r2, [r8]
 8007848:	f011 0f20 	tst.w	r1, #32
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	d00f      	beq.n	8007870 <_scanf_i+0x1c8>
 8007850:	6018      	str	r0, [r3, #0]
 8007852:	68e3      	ldr	r3, [r4, #12]
 8007854:	3301      	adds	r3, #1
 8007856:	60e3      	str	r3, [r4, #12]
 8007858:	1bed      	subs	r5, r5, r7
 800785a:	44ab      	add	fp, r5
 800785c:	6925      	ldr	r5, [r4, #16]
 800785e:	445d      	add	r5, fp
 8007860:	6125      	str	r5, [r4, #16]
 8007862:	2000      	movs	r0, #0
 8007864:	b007      	add	sp, #28
 8007866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800786a:	f04f 0b00 	mov.w	fp, #0
 800786e:	e7ca      	b.n	8007806 <_scanf_i+0x15e>
 8007870:	07ca      	lsls	r2, r1, #31
 8007872:	bf4c      	ite	mi
 8007874:	8018      	strhmi	r0, [r3, #0]
 8007876:	6018      	strpl	r0, [r3, #0]
 8007878:	e7eb      	b.n	8007852 <_scanf_i+0x1aa>
 800787a:	2001      	movs	r0, #1
 800787c:	e7f2      	b.n	8007864 <_scanf_i+0x1bc>
 800787e:	bf00      	nop
 8007880:	08007e40 	.word	0x08007e40
 8007884:	08007b09 	.word	0x08007b09
 8007888:	08007a0d 	.word	0x08007a0d
 800788c:	08007ee0 	.word	0x08007ee0

08007890 <__sccl>:
 8007890:	b570      	push	{r4, r5, r6, lr}
 8007892:	780b      	ldrb	r3, [r1, #0]
 8007894:	4604      	mov	r4, r0
 8007896:	2b5e      	cmp	r3, #94	; 0x5e
 8007898:	bf0b      	itete	eq
 800789a:	784b      	ldrbeq	r3, [r1, #1]
 800789c:	1c48      	addne	r0, r1, #1
 800789e:	1c88      	addeq	r0, r1, #2
 80078a0:	2200      	movne	r2, #0
 80078a2:	bf08      	it	eq
 80078a4:	2201      	moveq	r2, #1
 80078a6:	1e61      	subs	r1, r4, #1
 80078a8:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80078ac:	f801 2f01 	strb.w	r2, [r1, #1]!
 80078b0:	42a9      	cmp	r1, r5
 80078b2:	d1fb      	bne.n	80078ac <__sccl+0x1c>
 80078b4:	b90b      	cbnz	r3, 80078ba <__sccl+0x2a>
 80078b6:	3801      	subs	r0, #1
 80078b8:	bd70      	pop	{r4, r5, r6, pc}
 80078ba:	f082 0101 	eor.w	r1, r2, #1
 80078be:	54e1      	strb	r1, [r4, r3]
 80078c0:	1c42      	adds	r2, r0, #1
 80078c2:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 80078c6:	2d2d      	cmp	r5, #45	; 0x2d
 80078c8:	f102 36ff 	add.w	r6, r2, #4294967295
 80078cc:	4610      	mov	r0, r2
 80078ce:	d006      	beq.n	80078de <__sccl+0x4e>
 80078d0:	2d5d      	cmp	r5, #93	; 0x5d
 80078d2:	d0f1      	beq.n	80078b8 <__sccl+0x28>
 80078d4:	b90d      	cbnz	r5, 80078da <__sccl+0x4a>
 80078d6:	4630      	mov	r0, r6
 80078d8:	e7ee      	b.n	80078b8 <__sccl+0x28>
 80078da:	462b      	mov	r3, r5
 80078dc:	e7ef      	b.n	80078be <__sccl+0x2e>
 80078de:	7816      	ldrb	r6, [r2, #0]
 80078e0:	2e5d      	cmp	r6, #93	; 0x5d
 80078e2:	d0fa      	beq.n	80078da <__sccl+0x4a>
 80078e4:	42b3      	cmp	r3, r6
 80078e6:	dcf8      	bgt.n	80078da <__sccl+0x4a>
 80078e8:	4618      	mov	r0, r3
 80078ea:	3001      	adds	r0, #1
 80078ec:	4286      	cmp	r6, r0
 80078ee:	5421      	strb	r1, [r4, r0]
 80078f0:	dcfb      	bgt.n	80078ea <__sccl+0x5a>
 80078f2:	43d8      	mvns	r0, r3
 80078f4:	4430      	add	r0, r6
 80078f6:	1c5d      	adds	r5, r3, #1
 80078f8:	42b3      	cmp	r3, r6
 80078fa:	bfa8      	it	ge
 80078fc:	2000      	movge	r0, #0
 80078fe:	182b      	adds	r3, r5, r0
 8007900:	3202      	adds	r2, #2
 8007902:	e7de      	b.n	80078c2 <__sccl+0x32>

08007904 <_strtol_l.isra.0>:
 8007904:	2b01      	cmp	r3, #1
 8007906:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800790a:	d001      	beq.n	8007910 <_strtol_l.isra.0+0xc>
 800790c:	2b24      	cmp	r3, #36	; 0x24
 800790e:	d906      	bls.n	800791e <_strtol_l.isra.0+0x1a>
 8007910:	f7ff f930 	bl	8006b74 <__errno>
 8007914:	2316      	movs	r3, #22
 8007916:	6003      	str	r3, [r0, #0]
 8007918:	2000      	movs	r0, #0
 800791a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800791e:	4f3a      	ldr	r7, [pc, #232]	; (8007a08 <_strtol_l.isra.0+0x104>)
 8007920:	468e      	mov	lr, r1
 8007922:	4676      	mov	r6, lr
 8007924:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007928:	5de5      	ldrb	r5, [r4, r7]
 800792a:	f015 0508 	ands.w	r5, r5, #8
 800792e:	d1f8      	bne.n	8007922 <_strtol_l.isra.0+0x1e>
 8007930:	2c2d      	cmp	r4, #45	; 0x2d
 8007932:	d134      	bne.n	800799e <_strtol_l.isra.0+0x9a>
 8007934:	f89e 4000 	ldrb.w	r4, [lr]
 8007938:	f04f 0801 	mov.w	r8, #1
 800793c:	f106 0e02 	add.w	lr, r6, #2
 8007940:	2b00      	cmp	r3, #0
 8007942:	d05c      	beq.n	80079fe <_strtol_l.isra.0+0xfa>
 8007944:	2b10      	cmp	r3, #16
 8007946:	d10c      	bne.n	8007962 <_strtol_l.isra.0+0x5e>
 8007948:	2c30      	cmp	r4, #48	; 0x30
 800794a:	d10a      	bne.n	8007962 <_strtol_l.isra.0+0x5e>
 800794c:	f89e 4000 	ldrb.w	r4, [lr]
 8007950:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007954:	2c58      	cmp	r4, #88	; 0x58
 8007956:	d14d      	bne.n	80079f4 <_strtol_l.isra.0+0xf0>
 8007958:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800795c:	2310      	movs	r3, #16
 800795e:	f10e 0e02 	add.w	lr, lr, #2
 8007962:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007966:	f10c 3cff 	add.w	ip, ip, #4294967295
 800796a:	2600      	movs	r6, #0
 800796c:	fbbc f9f3 	udiv	r9, ip, r3
 8007970:	4635      	mov	r5, r6
 8007972:	fb03 ca19 	mls	sl, r3, r9, ip
 8007976:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800797a:	2f09      	cmp	r7, #9
 800797c:	d818      	bhi.n	80079b0 <_strtol_l.isra.0+0xac>
 800797e:	463c      	mov	r4, r7
 8007980:	42a3      	cmp	r3, r4
 8007982:	dd24      	ble.n	80079ce <_strtol_l.isra.0+0xca>
 8007984:	2e00      	cmp	r6, #0
 8007986:	db1f      	blt.n	80079c8 <_strtol_l.isra.0+0xc4>
 8007988:	45a9      	cmp	r9, r5
 800798a:	d31d      	bcc.n	80079c8 <_strtol_l.isra.0+0xc4>
 800798c:	d101      	bne.n	8007992 <_strtol_l.isra.0+0x8e>
 800798e:	45a2      	cmp	sl, r4
 8007990:	db1a      	blt.n	80079c8 <_strtol_l.isra.0+0xc4>
 8007992:	fb05 4503 	mla	r5, r5, r3, r4
 8007996:	2601      	movs	r6, #1
 8007998:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800799c:	e7eb      	b.n	8007976 <_strtol_l.isra.0+0x72>
 800799e:	2c2b      	cmp	r4, #43	; 0x2b
 80079a0:	bf08      	it	eq
 80079a2:	f89e 4000 	ldrbeq.w	r4, [lr]
 80079a6:	46a8      	mov	r8, r5
 80079a8:	bf08      	it	eq
 80079aa:	f106 0e02 	addeq.w	lr, r6, #2
 80079ae:	e7c7      	b.n	8007940 <_strtol_l.isra.0+0x3c>
 80079b0:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 80079b4:	2f19      	cmp	r7, #25
 80079b6:	d801      	bhi.n	80079bc <_strtol_l.isra.0+0xb8>
 80079b8:	3c37      	subs	r4, #55	; 0x37
 80079ba:	e7e1      	b.n	8007980 <_strtol_l.isra.0+0x7c>
 80079bc:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 80079c0:	2f19      	cmp	r7, #25
 80079c2:	d804      	bhi.n	80079ce <_strtol_l.isra.0+0xca>
 80079c4:	3c57      	subs	r4, #87	; 0x57
 80079c6:	e7db      	b.n	8007980 <_strtol_l.isra.0+0x7c>
 80079c8:	f04f 36ff 	mov.w	r6, #4294967295
 80079cc:	e7e4      	b.n	8007998 <_strtol_l.isra.0+0x94>
 80079ce:	2e00      	cmp	r6, #0
 80079d0:	da05      	bge.n	80079de <_strtol_l.isra.0+0xda>
 80079d2:	2322      	movs	r3, #34	; 0x22
 80079d4:	6003      	str	r3, [r0, #0]
 80079d6:	4665      	mov	r5, ip
 80079d8:	b942      	cbnz	r2, 80079ec <_strtol_l.isra.0+0xe8>
 80079da:	4628      	mov	r0, r5
 80079dc:	e79d      	b.n	800791a <_strtol_l.isra.0+0x16>
 80079de:	f1b8 0f00 	cmp.w	r8, #0
 80079e2:	d000      	beq.n	80079e6 <_strtol_l.isra.0+0xe2>
 80079e4:	426d      	negs	r5, r5
 80079e6:	2a00      	cmp	r2, #0
 80079e8:	d0f7      	beq.n	80079da <_strtol_l.isra.0+0xd6>
 80079ea:	b10e      	cbz	r6, 80079f0 <_strtol_l.isra.0+0xec>
 80079ec:	f10e 31ff 	add.w	r1, lr, #4294967295
 80079f0:	6011      	str	r1, [r2, #0]
 80079f2:	e7f2      	b.n	80079da <_strtol_l.isra.0+0xd6>
 80079f4:	2430      	movs	r4, #48	; 0x30
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1b3      	bne.n	8007962 <_strtol_l.isra.0+0x5e>
 80079fa:	2308      	movs	r3, #8
 80079fc:	e7b1      	b.n	8007962 <_strtol_l.isra.0+0x5e>
 80079fe:	2c30      	cmp	r4, #48	; 0x30
 8007a00:	d0a4      	beq.n	800794c <_strtol_l.isra.0+0x48>
 8007a02:	230a      	movs	r3, #10
 8007a04:	e7ad      	b.n	8007962 <_strtol_l.isra.0+0x5e>
 8007a06:	bf00      	nop
 8007a08:	08007ee3 	.word	0x08007ee3

08007a0c <_strtol_r>:
 8007a0c:	f7ff bf7a 	b.w	8007904 <_strtol_l.isra.0>

08007a10 <_strtoul_l.isra.0>:
 8007a10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007a14:	4e3b      	ldr	r6, [pc, #236]	; (8007b04 <_strtoul_l.isra.0+0xf4>)
 8007a16:	4686      	mov	lr, r0
 8007a18:	468c      	mov	ip, r1
 8007a1a:	4660      	mov	r0, ip
 8007a1c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007a20:	5da5      	ldrb	r5, [r4, r6]
 8007a22:	f015 0508 	ands.w	r5, r5, #8
 8007a26:	d1f8      	bne.n	8007a1a <_strtoul_l.isra.0+0xa>
 8007a28:	2c2d      	cmp	r4, #45	; 0x2d
 8007a2a:	d134      	bne.n	8007a96 <_strtoul_l.isra.0+0x86>
 8007a2c:	f89c 4000 	ldrb.w	r4, [ip]
 8007a30:	f04f 0801 	mov.w	r8, #1
 8007a34:	f100 0c02 	add.w	ip, r0, #2
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d05e      	beq.n	8007afa <_strtoul_l.isra.0+0xea>
 8007a3c:	2b10      	cmp	r3, #16
 8007a3e:	d10c      	bne.n	8007a5a <_strtoul_l.isra.0+0x4a>
 8007a40:	2c30      	cmp	r4, #48	; 0x30
 8007a42:	d10a      	bne.n	8007a5a <_strtoul_l.isra.0+0x4a>
 8007a44:	f89c 0000 	ldrb.w	r0, [ip]
 8007a48:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007a4c:	2858      	cmp	r0, #88	; 0x58
 8007a4e:	d14f      	bne.n	8007af0 <_strtoul_l.isra.0+0xe0>
 8007a50:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8007a54:	2310      	movs	r3, #16
 8007a56:	f10c 0c02 	add.w	ip, ip, #2
 8007a5a:	f04f 37ff 	mov.w	r7, #4294967295
 8007a5e:	2500      	movs	r5, #0
 8007a60:	fbb7 f7f3 	udiv	r7, r7, r3
 8007a64:	fb03 f907 	mul.w	r9, r3, r7
 8007a68:	ea6f 0909 	mvn.w	r9, r9
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8007a72:	2e09      	cmp	r6, #9
 8007a74:	d818      	bhi.n	8007aa8 <_strtoul_l.isra.0+0x98>
 8007a76:	4634      	mov	r4, r6
 8007a78:	42a3      	cmp	r3, r4
 8007a7a:	dd24      	ble.n	8007ac6 <_strtoul_l.isra.0+0xb6>
 8007a7c:	2d00      	cmp	r5, #0
 8007a7e:	db1f      	blt.n	8007ac0 <_strtoul_l.isra.0+0xb0>
 8007a80:	4287      	cmp	r7, r0
 8007a82:	d31d      	bcc.n	8007ac0 <_strtoul_l.isra.0+0xb0>
 8007a84:	d101      	bne.n	8007a8a <_strtoul_l.isra.0+0x7a>
 8007a86:	45a1      	cmp	r9, r4
 8007a88:	db1a      	blt.n	8007ac0 <_strtoul_l.isra.0+0xb0>
 8007a8a:	fb00 4003 	mla	r0, r0, r3, r4
 8007a8e:	2501      	movs	r5, #1
 8007a90:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8007a94:	e7eb      	b.n	8007a6e <_strtoul_l.isra.0+0x5e>
 8007a96:	2c2b      	cmp	r4, #43	; 0x2b
 8007a98:	bf08      	it	eq
 8007a9a:	f89c 4000 	ldrbeq.w	r4, [ip]
 8007a9e:	46a8      	mov	r8, r5
 8007aa0:	bf08      	it	eq
 8007aa2:	f100 0c02 	addeq.w	ip, r0, #2
 8007aa6:	e7c7      	b.n	8007a38 <_strtoul_l.isra.0+0x28>
 8007aa8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8007aac:	2e19      	cmp	r6, #25
 8007aae:	d801      	bhi.n	8007ab4 <_strtoul_l.isra.0+0xa4>
 8007ab0:	3c37      	subs	r4, #55	; 0x37
 8007ab2:	e7e1      	b.n	8007a78 <_strtoul_l.isra.0+0x68>
 8007ab4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8007ab8:	2e19      	cmp	r6, #25
 8007aba:	d804      	bhi.n	8007ac6 <_strtoul_l.isra.0+0xb6>
 8007abc:	3c57      	subs	r4, #87	; 0x57
 8007abe:	e7db      	b.n	8007a78 <_strtoul_l.isra.0+0x68>
 8007ac0:	f04f 35ff 	mov.w	r5, #4294967295
 8007ac4:	e7e4      	b.n	8007a90 <_strtoul_l.isra.0+0x80>
 8007ac6:	2d00      	cmp	r5, #0
 8007ac8:	da07      	bge.n	8007ada <_strtoul_l.isra.0+0xca>
 8007aca:	2322      	movs	r3, #34	; 0x22
 8007acc:	f8ce 3000 	str.w	r3, [lr]
 8007ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad4:	b942      	cbnz	r2, 8007ae8 <_strtoul_l.isra.0+0xd8>
 8007ad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ada:	f1b8 0f00 	cmp.w	r8, #0
 8007ade:	d000      	beq.n	8007ae2 <_strtoul_l.isra.0+0xd2>
 8007ae0:	4240      	negs	r0, r0
 8007ae2:	2a00      	cmp	r2, #0
 8007ae4:	d0f7      	beq.n	8007ad6 <_strtoul_l.isra.0+0xc6>
 8007ae6:	b10d      	cbz	r5, 8007aec <_strtoul_l.isra.0+0xdc>
 8007ae8:	f10c 31ff 	add.w	r1, ip, #4294967295
 8007aec:	6011      	str	r1, [r2, #0]
 8007aee:	e7f2      	b.n	8007ad6 <_strtoul_l.isra.0+0xc6>
 8007af0:	2430      	movs	r4, #48	; 0x30
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1b1      	bne.n	8007a5a <_strtoul_l.isra.0+0x4a>
 8007af6:	2308      	movs	r3, #8
 8007af8:	e7af      	b.n	8007a5a <_strtoul_l.isra.0+0x4a>
 8007afa:	2c30      	cmp	r4, #48	; 0x30
 8007afc:	d0a2      	beq.n	8007a44 <_strtoul_l.isra.0+0x34>
 8007afe:	230a      	movs	r3, #10
 8007b00:	e7ab      	b.n	8007a5a <_strtoul_l.isra.0+0x4a>
 8007b02:	bf00      	nop
 8007b04:	08007ee3 	.word	0x08007ee3

08007b08 <_strtoul_r>:
 8007b08:	f7ff bf82 	b.w	8007a10 <_strtoul_l.isra.0>

08007b0c <__submore>:
 8007b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b10:	460c      	mov	r4, r1
 8007b12:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007b14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b18:	4299      	cmp	r1, r3
 8007b1a:	d11d      	bne.n	8007b58 <__submore+0x4c>
 8007b1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b20:	f000 f8a8 	bl	8007c74 <_malloc_r>
 8007b24:	b918      	cbnz	r0, 8007b2e <__submore+0x22>
 8007b26:	f04f 30ff 	mov.w	r0, #4294967295
 8007b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b32:	63a3      	str	r3, [r4, #56]	; 0x38
 8007b34:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007b38:	6360      	str	r0, [r4, #52]	; 0x34
 8007b3a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007b3e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007b42:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007b46:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007b4a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8007b4e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007b52:	6020      	str	r0, [r4, #0]
 8007b54:	2000      	movs	r0, #0
 8007b56:	e7e8      	b.n	8007b2a <__submore+0x1e>
 8007b58:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007b5a:	0077      	lsls	r7, r6, #1
 8007b5c:	463a      	mov	r2, r7
 8007b5e:	f000 f8e3 	bl	8007d28 <_realloc_r>
 8007b62:	4605      	mov	r5, r0
 8007b64:	2800      	cmp	r0, #0
 8007b66:	d0de      	beq.n	8007b26 <__submore+0x1a>
 8007b68:	eb00 0806 	add.w	r8, r0, r6
 8007b6c:	4601      	mov	r1, r0
 8007b6e:	4632      	mov	r2, r6
 8007b70:	4640      	mov	r0, r8
 8007b72:	f000 f807 	bl	8007b84 <memcpy>
 8007b76:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007b7a:	f8c4 8000 	str.w	r8, [r4]
 8007b7e:	e7e9      	b.n	8007b54 <__submore+0x48>

08007b80 <__retarget_lock_acquire_recursive>:
 8007b80:	4770      	bx	lr

08007b82 <__retarget_lock_release_recursive>:
 8007b82:	4770      	bx	lr

08007b84 <memcpy>:
 8007b84:	440a      	add	r2, r1
 8007b86:	4291      	cmp	r1, r2
 8007b88:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b8c:	d100      	bne.n	8007b90 <memcpy+0xc>
 8007b8e:	4770      	bx	lr
 8007b90:	b510      	push	{r4, lr}
 8007b92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b9a:	4291      	cmp	r1, r2
 8007b9c:	d1f9      	bne.n	8007b92 <memcpy+0xe>
 8007b9e:	bd10      	pop	{r4, pc}

08007ba0 <memmove>:
 8007ba0:	4288      	cmp	r0, r1
 8007ba2:	b510      	push	{r4, lr}
 8007ba4:	eb01 0402 	add.w	r4, r1, r2
 8007ba8:	d902      	bls.n	8007bb0 <memmove+0x10>
 8007baa:	4284      	cmp	r4, r0
 8007bac:	4623      	mov	r3, r4
 8007bae:	d807      	bhi.n	8007bc0 <memmove+0x20>
 8007bb0:	1e43      	subs	r3, r0, #1
 8007bb2:	42a1      	cmp	r1, r4
 8007bb4:	d008      	beq.n	8007bc8 <memmove+0x28>
 8007bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bba:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bbe:	e7f8      	b.n	8007bb2 <memmove+0x12>
 8007bc0:	4402      	add	r2, r0
 8007bc2:	4601      	mov	r1, r0
 8007bc4:	428a      	cmp	r2, r1
 8007bc6:	d100      	bne.n	8007bca <memmove+0x2a>
 8007bc8:	bd10      	pop	{r4, pc}
 8007bca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007bce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007bd2:	e7f7      	b.n	8007bc4 <memmove+0x24>

08007bd4 <_free_r>:
 8007bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bd6:	2900      	cmp	r1, #0
 8007bd8:	d048      	beq.n	8007c6c <_free_r+0x98>
 8007bda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bde:	9001      	str	r0, [sp, #4]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f1a1 0404 	sub.w	r4, r1, #4
 8007be6:	bfb8      	it	lt
 8007be8:	18e4      	addlt	r4, r4, r3
 8007bea:	f000 f8d3 	bl	8007d94 <__malloc_lock>
 8007bee:	4a20      	ldr	r2, [pc, #128]	; (8007c70 <_free_r+0x9c>)
 8007bf0:	9801      	ldr	r0, [sp, #4]
 8007bf2:	6813      	ldr	r3, [r2, #0]
 8007bf4:	4615      	mov	r5, r2
 8007bf6:	b933      	cbnz	r3, 8007c06 <_free_r+0x32>
 8007bf8:	6063      	str	r3, [r4, #4]
 8007bfa:	6014      	str	r4, [r2, #0]
 8007bfc:	b003      	add	sp, #12
 8007bfe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007c02:	f000 b8cd 	b.w	8007da0 <__malloc_unlock>
 8007c06:	42a3      	cmp	r3, r4
 8007c08:	d90b      	bls.n	8007c22 <_free_r+0x4e>
 8007c0a:	6821      	ldr	r1, [r4, #0]
 8007c0c:	1862      	adds	r2, r4, r1
 8007c0e:	4293      	cmp	r3, r2
 8007c10:	bf04      	itt	eq
 8007c12:	681a      	ldreq	r2, [r3, #0]
 8007c14:	685b      	ldreq	r3, [r3, #4]
 8007c16:	6063      	str	r3, [r4, #4]
 8007c18:	bf04      	itt	eq
 8007c1a:	1852      	addeq	r2, r2, r1
 8007c1c:	6022      	streq	r2, [r4, #0]
 8007c1e:	602c      	str	r4, [r5, #0]
 8007c20:	e7ec      	b.n	8007bfc <_free_r+0x28>
 8007c22:	461a      	mov	r2, r3
 8007c24:	685b      	ldr	r3, [r3, #4]
 8007c26:	b10b      	cbz	r3, 8007c2c <_free_r+0x58>
 8007c28:	42a3      	cmp	r3, r4
 8007c2a:	d9fa      	bls.n	8007c22 <_free_r+0x4e>
 8007c2c:	6811      	ldr	r1, [r2, #0]
 8007c2e:	1855      	adds	r5, r2, r1
 8007c30:	42a5      	cmp	r5, r4
 8007c32:	d10b      	bne.n	8007c4c <_free_r+0x78>
 8007c34:	6824      	ldr	r4, [r4, #0]
 8007c36:	4421      	add	r1, r4
 8007c38:	1854      	adds	r4, r2, r1
 8007c3a:	42a3      	cmp	r3, r4
 8007c3c:	6011      	str	r1, [r2, #0]
 8007c3e:	d1dd      	bne.n	8007bfc <_free_r+0x28>
 8007c40:	681c      	ldr	r4, [r3, #0]
 8007c42:	685b      	ldr	r3, [r3, #4]
 8007c44:	6053      	str	r3, [r2, #4]
 8007c46:	4421      	add	r1, r4
 8007c48:	6011      	str	r1, [r2, #0]
 8007c4a:	e7d7      	b.n	8007bfc <_free_r+0x28>
 8007c4c:	d902      	bls.n	8007c54 <_free_r+0x80>
 8007c4e:	230c      	movs	r3, #12
 8007c50:	6003      	str	r3, [r0, #0]
 8007c52:	e7d3      	b.n	8007bfc <_free_r+0x28>
 8007c54:	6825      	ldr	r5, [r4, #0]
 8007c56:	1961      	adds	r1, r4, r5
 8007c58:	428b      	cmp	r3, r1
 8007c5a:	bf04      	itt	eq
 8007c5c:	6819      	ldreq	r1, [r3, #0]
 8007c5e:	685b      	ldreq	r3, [r3, #4]
 8007c60:	6063      	str	r3, [r4, #4]
 8007c62:	bf04      	itt	eq
 8007c64:	1949      	addeq	r1, r1, r5
 8007c66:	6021      	streq	r1, [r4, #0]
 8007c68:	6054      	str	r4, [r2, #4]
 8007c6a:	e7c7      	b.n	8007bfc <_free_r+0x28>
 8007c6c:	b003      	add	sp, #12
 8007c6e:	bd30      	pop	{r4, r5, pc}
 8007c70:	200000a4 	.word	0x200000a4

08007c74 <_malloc_r>:
 8007c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c76:	1ccd      	adds	r5, r1, #3
 8007c78:	f025 0503 	bic.w	r5, r5, #3
 8007c7c:	3508      	adds	r5, #8
 8007c7e:	2d0c      	cmp	r5, #12
 8007c80:	bf38      	it	cc
 8007c82:	250c      	movcc	r5, #12
 8007c84:	2d00      	cmp	r5, #0
 8007c86:	4606      	mov	r6, r0
 8007c88:	db01      	blt.n	8007c8e <_malloc_r+0x1a>
 8007c8a:	42a9      	cmp	r1, r5
 8007c8c:	d903      	bls.n	8007c96 <_malloc_r+0x22>
 8007c8e:	230c      	movs	r3, #12
 8007c90:	6033      	str	r3, [r6, #0]
 8007c92:	2000      	movs	r0, #0
 8007c94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007c96:	f000 f87d 	bl	8007d94 <__malloc_lock>
 8007c9a:	4921      	ldr	r1, [pc, #132]	; (8007d20 <_malloc_r+0xac>)
 8007c9c:	680a      	ldr	r2, [r1, #0]
 8007c9e:	4614      	mov	r4, r2
 8007ca0:	b99c      	cbnz	r4, 8007cca <_malloc_r+0x56>
 8007ca2:	4f20      	ldr	r7, [pc, #128]	; (8007d24 <_malloc_r+0xb0>)
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	b923      	cbnz	r3, 8007cb2 <_malloc_r+0x3e>
 8007ca8:	4621      	mov	r1, r4
 8007caa:	4630      	mov	r0, r6
 8007cac:	f000 f862 	bl	8007d74 <_sbrk_r>
 8007cb0:	6038      	str	r0, [r7, #0]
 8007cb2:	4629      	mov	r1, r5
 8007cb4:	4630      	mov	r0, r6
 8007cb6:	f000 f85d 	bl	8007d74 <_sbrk_r>
 8007cba:	1c43      	adds	r3, r0, #1
 8007cbc:	d123      	bne.n	8007d06 <_malloc_r+0x92>
 8007cbe:	230c      	movs	r3, #12
 8007cc0:	6033      	str	r3, [r6, #0]
 8007cc2:	4630      	mov	r0, r6
 8007cc4:	f000 f86c 	bl	8007da0 <__malloc_unlock>
 8007cc8:	e7e3      	b.n	8007c92 <_malloc_r+0x1e>
 8007cca:	6823      	ldr	r3, [r4, #0]
 8007ccc:	1b5b      	subs	r3, r3, r5
 8007cce:	d417      	bmi.n	8007d00 <_malloc_r+0x8c>
 8007cd0:	2b0b      	cmp	r3, #11
 8007cd2:	d903      	bls.n	8007cdc <_malloc_r+0x68>
 8007cd4:	6023      	str	r3, [r4, #0]
 8007cd6:	441c      	add	r4, r3
 8007cd8:	6025      	str	r5, [r4, #0]
 8007cda:	e004      	b.n	8007ce6 <_malloc_r+0x72>
 8007cdc:	6863      	ldr	r3, [r4, #4]
 8007cde:	42a2      	cmp	r2, r4
 8007ce0:	bf0c      	ite	eq
 8007ce2:	600b      	streq	r3, [r1, #0]
 8007ce4:	6053      	strne	r3, [r2, #4]
 8007ce6:	4630      	mov	r0, r6
 8007ce8:	f000 f85a 	bl	8007da0 <__malloc_unlock>
 8007cec:	f104 000b 	add.w	r0, r4, #11
 8007cf0:	1d23      	adds	r3, r4, #4
 8007cf2:	f020 0007 	bic.w	r0, r0, #7
 8007cf6:	1ac2      	subs	r2, r0, r3
 8007cf8:	d0cc      	beq.n	8007c94 <_malloc_r+0x20>
 8007cfa:	1a1b      	subs	r3, r3, r0
 8007cfc:	50a3      	str	r3, [r4, r2]
 8007cfe:	e7c9      	b.n	8007c94 <_malloc_r+0x20>
 8007d00:	4622      	mov	r2, r4
 8007d02:	6864      	ldr	r4, [r4, #4]
 8007d04:	e7cc      	b.n	8007ca0 <_malloc_r+0x2c>
 8007d06:	1cc4      	adds	r4, r0, #3
 8007d08:	f024 0403 	bic.w	r4, r4, #3
 8007d0c:	42a0      	cmp	r0, r4
 8007d0e:	d0e3      	beq.n	8007cd8 <_malloc_r+0x64>
 8007d10:	1a21      	subs	r1, r4, r0
 8007d12:	4630      	mov	r0, r6
 8007d14:	f000 f82e 	bl	8007d74 <_sbrk_r>
 8007d18:	3001      	adds	r0, #1
 8007d1a:	d1dd      	bne.n	8007cd8 <_malloc_r+0x64>
 8007d1c:	e7cf      	b.n	8007cbe <_malloc_r+0x4a>
 8007d1e:	bf00      	nop
 8007d20:	200000a4 	.word	0x200000a4
 8007d24:	200000a8 	.word	0x200000a8

08007d28 <_realloc_r>:
 8007d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2a:	4607      	mov	r7, r0
 8007d2c:	4614      	mov	r4, r2
 8007d2e:	460e      	mov	r6, r1
 8007d30:	b921      	cbnz	r1, 8007d3c <_realloc_r+0x14>
 8007d32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007d36:	4611      	mov	r1, r2
 8007d38:	f7ff bf9c 	b.w	8007c74 <_malloc_r>
 8007d3c:	b922      	cbnz	r2, 8007d48 <_realloc_r+0x20>
 8007d3e:	f7ff ff49 	bl	8007bd4 <_free_r>
 8007d42:	4625      	mov	r5, r4
 8007d44:	4628      	mov	r0, r5
 8007d46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d48:	f000 f830 	bl	8007dac <_malloc_usable_size_r>
 8007d4c:	42a0      	cmp	r0, r4
 8007d4e:	d20f      	bcs.n	8007d70 <_realloc_r+0x48>
 8007d50:	4621      	mov	r1, r4
 8007d52:	4638      	mov	r0, r7
 8007d54:	f7ff ff8e 	bl	8007c74 <_malloc_r>
 8007d58:	4605      	mov	r5, r0
 8007d5a:	2800      	cmp	r0, #0
 8007d5c:	d0f2      	beq.n	8007d44 <_realloc_r+0x1c>
 8007d5e:	4631      	mov	r1, r6
 8007d60:	4622      	mov	r2, r4
 8007d62:	f7ff ff0f 	bl	8007b84 <memcpy>
 8007d66:	4631      	mov	r1, r6
 8007d68:	4638      	mov	r0, r7
 8007d6a:	f7ff ff33 	bl	8007bd4 <_free_r>
 8007d6e:	e7e9      	b.n	8007d44 <_realloc_r+0x1c>
 8007d70:	4635      	mov	r5, r6
 8007d72:	e7e7      	b.n	8007d44 <_realloc_r+0x1c>

08007d74 <_sbrk_r>:
 8007d74:	b538      	push	{r3, r4, r5, lr}
 8007d76:	4d06      	ldr	r5, [pc, #24]	; (8007d90 <_sbrk_r+0x1c>)
 8007d78:	2300      	movs	r3, #0
 8007d7a:	4604      	mov	r4, r0
 8007d7c:	4608      	mov	r0, r1
 8007d7e:	602b      	str	r3, [r5, #0]
 8007d80:	f7f9 fd0e 	bl	80017a0 <_sbrk>
 8007d84:	1c43      	adds	r3, r0, #1
 8007d86:	d102      	bne.n	8007d8e <_sbrk_r+0x1a>
 8007d88:	682b      	ldr	r3, [r5, #0]
 8007d8a:	b103      	cbz	r3, 8007d8e <_sbrk_r+0x1a>
 8007d8c:	6023      	str	r3, [r4, #0]
 8007d8e:	bd38      	pop	{r3, r4, r5, pc}
 8007d90:	20000208 	.word	0x20000208

08007d94 <__malloc_lock>:
 8007d94:	4801      	ldr	r0, [pc, #4]	; (8007d9c <__malloc_lock+0x8>)
 8007d96:	f7ff bef3 	b.w	8007b80 <__retarget_lock_acquire_recursive>
 8007d9a:	bf00      	nop
 8007d9c:	20000210 	.word	0x20000210

08007da0 <__malloc_unlock>:
 8007da0:	4801      	ldr	r0, [pc, #4]	; (8007da8 <__malloc_unlock+0x8>)
 8007da2:	f7ff beee 	b.w	8007b82 <__retarget_lock_release_recursive>
 8007da6:	bf00      	nop
 8007da8:	20000210 	.word	0x20000210

08007dac <_malloc_usable_size_r>:
 8007dac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007db0:	1f18      	subs	r0, r3, #4
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	bfbc      	itt	lt
 8007db6:	580b      	ldrlt	r3, [r1, r0]
 8007db8:	18c0      	addlt	r0, r0, r3
 8007dba:	4770      	bx	lr

08007dbc <_init>:
 8007dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dbe:	bf00      	nop
 8007dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dc2:	bc08      	pop	{r3}
 8007dc4:	469e      	mov	lr, r3
 8007dc6:	4770      	bx	lr

08007dc8 <_fini>:
 8007dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dca:	bf00      	nop
 8007dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dce:	bc08      	pop	{r3}
 8007dd0:	469e      	mov	lr, r3
 8007dd2:	4770      	bx	lr
